//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2648.26779)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.chemotherapydetails;

import ims.ccosched.vo.PatTreatPlanActionLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MedicVo;
import ims.core.vo.PatientApptDiaryVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.ocrr.vo.ChemotherapyDetailsShortVo;
import ims.ocrr.vo.ChemotherapyDetailsShortVoCollection;
import ims.ocrr.vo.ChemotherapyDetailsVo;
import ims.oncology.forms.chemotherapydetails.GenForm.grdChemotherapyRow;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabCycleAndDrugCCOContainer.Group1Enumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabCycleAndDrugCCOContainer.GroupStatusEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabCycleAndDrugContainer;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabCycleAndDrugContainer.GroupFilterStatusEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupChemoradiationEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupClinicalTrialEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupCoMorbidityEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupDoseReductionEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupStoppedEarlyEnumeration;
import ims.oncology.forms.chemotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.GroupTimeDelayEnumeration;
import ims.oncology.vo.ChemoCycleDetailsCCOVo;
import ims.oncology.vo.ChemoCycleDetailsCCOVoCollection;
import ims.oncology.vo.ChemoDosageDetailsVo;
import ims.oncology.vo.ChemoRegimensConfigVo;
import ims.oncology.vo.ChemoTherapyDayDetailsVo;
import ims.oncology.vo.ChemotherapyCycleDetailsVo;
import ims.oncology.vo.ChemotherapyCycleDetailsVoCollection;
import ims.oncology.vo.PatTreatmentPlanRadiotherapyDialogVoCollection;
import ims.oncology.vo.enums.ChemoCycleMode;
import ims.oncology.vo.lookups.ChemoCycleTreatmentType;
import ims.oncology.vo.lookups.DrugTherapyType;
import ims.oncology.vo.lookups.TreatmentHospital;
import ims.vo.LookupInstVo;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;
import java.util.Comparator;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Dynamic grid columns constants
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	private static final String CYCLE_DETAILS = "-1";
	private static final String CYCLE_DAY_NO = "-2";
	private static final String CYCLE_DATE = "-3";
	private static final String CYCLE_MEDICATION = "-4";
	private static final String NO_OF_DOSES = "-5";
	private static final String CYCLE_ACTIVE = "-6";	//wdev-12819

	private static final int CYCLE_NUMBER_SIZE = 300;
	private static final int CYCLE_DAY_NO_SIZE = 70;
	private static final int CYCLE_DATE_SIZE = 80;
	private static final int CYCLE_MEDICATION_SIZE = 130;		
	private static final int NO_OF_DOSES_SIZE = 105;
	private static final int CYCLE_ACTIVE_SIZE = -1;	//wdev-12819

	
	private static final int TREAT_TYPE = -11;
	private static final int TREAT_DATE = -12;
	private static final int TREAT_DURATION = -13;
	private static final int TREAT_CYCLE = -14;
	private static final int TREAT_DAY = -15;
	private static final int TREAT_REGIME = -16;
	private static final int TREAT_PCODE = -17;
	private static final int TREAT_DCODE = -18;
	private static final int TREAT_STATUS = -19;
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers region
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		// Form initialisation (setting up dynamic grid, context menus, etc.)
		initialize();

		form.setMode(FormMode.VIEW);
		
		// Refresh screen data (populate record list, if necessary reselect and display previously selected record)
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Refresh controls state
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Oncology.ChemoCycleDrugDetails) && result.equals(DialogResult.OK))
		{
			ChemotherapyCycleDetailsVo voChemoCycleDetails = form.getGlobalContext().Oncology.getChemotherapyCycleDetailsVo();
			
			//wdev-12819
				ChemotherapyCycleDetailsVoCollection voCycleDetailsColl = form.getLocalContext().getCurrentCollectionCycleAndDrugGrid();
				if(voCycleDetailsColl == null)
					voCycleDetailsColl = new ChemotherapyCycleDetailsVoCollection();
				
				if(voCycleDetailsColl.contains(voChemoCycleDetails))
					voCycleDetailsColl.remove(voChemoCycleDetails);
				voCycleDetailsColl.add(voChemoCycleDetails);
				form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(voCycleDetailsColl);
		
			
			form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().clear();
			voCycleDetailsColl = form.getLocalContext().getCurrentCollectionCycleAndDrugGrid();
			voCycleDetailsColl.sort();
			for (int j = 0; voCycleDetailsColl != null && j < voCycleDetailsColl.size(); j++)
			{
				populateChemotherapyCyleDetails(voCycleDetailsColl.get(j),form.lyrDetails().tabCycleAndDrug().GroupFilterStatus().getValue().equals(GroupFilterStatusEnumeration.rdoStatusActive));
			}
			//----------
		}
		if (formName.equals(form.getForms().Oncology.PatientsOutpatientAppointments) && result.equals(DialogResult.OK))
		{
			populateControlsWithOPData();
		}
		//WDEV-16917
		else if (formName.equals(form.getForms().Oncology.PatientsOutpatientAppointments) && result.equals(DialogResult.CANCEL))
		{
			form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().setValue(null);
			onCmbTreatmentTypeValueChanged();
		}
		
		if(formName.equals(form.getForms().Oncology.PatientsChemoTreatmentPlanActionsDialog))
		{
			if(result == DialogResult.OK && form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanActionIsNotNull())
			{
				form.lyrDetails().tabDetails().cmbRegimeAcronym().setValue(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getPlannedRegime());
				form.lyrDetails().tabDetails().customControlMos().setValue(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getTreatingConsultant());
				
				form.lyrDetails().tabDetails().dteDecisionToTreat().setValue(form.getGlobalContext().Oncology.getDecisionTreatFromDialog());
			}
		}

		updateContextMenuState();
	}

	
	private void populateControlsWithOPData() 
	{
		form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setValue(form.getGlobalContext().Oncology.getChosenCCOOPAppointmentIsNotNull() && form.getGlobalContext().Oncology.getChosenCCOOPAppointment().getApptDateIsNotNull() ? form.getGlobalContext().Oncology.getChosenCCOOPAppointment().getApptDate() : null);
		form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setEnabled(false);
		form.lyrDetails().tabCycleAndDrugCCO().lblOPAppt().setVisible(true);
		form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setVisible(true);
		form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setValue(createChosenOPAppointmentString(form.getGlobalContext().Oncology.getChosenCCOOPAppointment(), false));
	}

	private String createChosenOPAppointmentString(PatientApptDiaryVo voDiary, boolean bUseDomainCall) 
	{
		if (voDiary == null)
			return "";
		
		StringBuffer sb = new StringBuffer();
		sb.append("Date: ");
		sb.append(voDiary.getApptDateIsNotNull() ? voDiary.getApptDate().toString() : "" );
		sb.append(" Time: ");
		sb.append(voDiary.getStartTimeIsNotNull() ? voDiary.getStartTime().toString() : "" );
		sb.append(" Clinic: ");
		sb.append(voDiary.getClinicNameIsNotNull() ? voDiary.getClinicName() : "");
		
		return sb.toString();
	}

	@Override
	protected void onNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Create a new instance
		newInstance();
	}

	@Override
	protected void onUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Update current selected instance
		updateInstance();
	}

	@Override
	protected void onSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Refresh screen on successful save
		if (save())
		{
			initializeCCODynamicGrid(form.getLocalContext().getChemotherapyDetailsVoIsNotNull() && form.getLocalContext().getChemotherapyDetailsVo().getDrugTherapyTypeIsNotNull()? form.getLocalContext().getChemotherapyDetailsVo().getDrugTherapyType() : null);
			open();
		}
	}

	@Override
	protected void onCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Refresh screen
		
		open();
	}

	
	@Override
	protected void onGrdChemotherapySelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		selectionChanged();
	}

	private void selectionChanged() 
	{
		// Update local context selection
		form.getLocalContext().setChemotherapyDetailsVo(domain.getChemotherapyDetailsVo(form.grdChemotherapy().getValue()));

		initializeCCOControls();

		// Populate instance controls
		populateScreenFromData(form.getLocalContext().getChemotherapyDetailsVo());
		
		// Update EDIT button and context menu options
		updateControlsState();
	}

	@Override
	protected void onDyngrdCyclesDaysRowSelectionChanged(DynamicGridRow row)
	{
		// Refresh controls state
		//updateControlsState();
		//wdev-12819
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnUpdate().setVisible(form.grdChemotherapy().getValue() != null);
		}
		
		showHideCCOControls(form.getMode());

		showHideSaveAndCancelButtons(form.getMode());
		
		//if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue() )
		
		updateContextMenuState();
		//----------
	}

	/*@Override
	protected void onQmbHospitalTextSubmited(String value) throws PresentationLogicException
	{
		//wdev-12819
		LookupInstanceCollection voColl = domain.getHospitals(value,form.lyrDetails().tabDetails().qmbHospital().getValue());
		form.lyrDetails().tabDetails().qmbHospital().clear();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			form.lyrDetails().tabDetails().qmbHospital().newRow((TreatmentHospital)voColl.getIndex(i), voColl.getIndex(i).toString());
			if (i == 0 && voColl.size() == 1)
				form.lyrDetails().tabDetails().qmbHospital().setValue((TreatmentHospital)voColl.getIndex(i));

		}

		if (form.lyrDetails().tabDetails().qmbHospital().getValues().size() > 1)
			form.lyrDetails().tabDetails().qmbHospital().showOpened();

	}*/

	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			// Generic grid context menu options (Chemotherapy Details grid)
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;

			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;

			// Chemotherapy cycle and fraction context menu options (Chemotherapy Cycle dynamic grid)
			case GenForm.ContextMenus.ChemotherapyCycle.AddCycle:
				addCycle();
				break;

			case GenForm.ContextMenus.ChemotherapyCycle.AddFraction:
				addFraction();
				break;

			case GenForm.ContextMenus.ChemotherapyCycle.Edit:
				editCyle();
				break;

			case GenForm.ContextMenus.ChemotherapyCycle.EditFraction:
				editFraction();
				break;
			case GenForm.ContextMenus.ChemotherapyCycle.ViewDay:			//wdev-12819
				viewDay();
				break;
				
			case GenForm.ContextMenus.OncologyNamespace.CCOChemoCycleMenu.CCO_ADD_CYCLE:
				addCCOCycle();
				break;
			case GenForm.ContextMenus.OncologyNamespace.CCOChemoCycleMenu.CCO_EDIT_CYCLE:
				editCCOCycle();
				break;
				
				
		}
	}


	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation function
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	private void editCCOCycle() 
	{
		form.getLocalContext().setSelectedCCOChemoCycleDetails((ChemoCycleDetailsCCOVo) form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue());
		clearCCOControls();
		populateCCOCycleControls((ChemoCycleDetailsCCOVo) form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue());
		enableDisableCCOControls(FormMode.EDIT);
		showHideSaveAndCancelButtons(FormMode.VIEW);//This will hide the controls while the Cycle details are entered.
		form.getLocalContext().setAddEditMode(Boolean.TRUE);			//wdev-12416
	}

	private void addCCOCycle() 
	{
		form.getLocalContext().setSelectedCCOChemoCycleDetails(new ChemoCycleDetailsCCOVo());
		clearCCOControls();
		enableDisableCCOControls(FormMode.EDIT);
		showHideSaveAndCancelButtons(FormMode.VIEW);//This will hide the controls while the Cycle details are entered.

		if (form.grdChemotherapy().getSelectedRow() == null 
			&& form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size() == 0
			&& form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null)
			initializeCCODynamicGrid(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue());
		
		/*ChemoRegimensConfigVo voConfig = domain.getChemoRegimeConfig(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());
		if (voConfig != null)
		{
			DynamicGridRow row = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().newRow();
			form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().setSelectedRow(row);
			
			DynamicGridCell treatPCODECell = row.getCells().newCell(getCol(TREAT_PCODE), DynamicCellType.STRING);	
			treatPCODECell.setValue(voConfig.getProcurementCodeIsNotNull() ? voConfig.getProcurementCode().getText() : "");								

			DynamicGridCell treatDCODECell = row.getCells().newCell(getCol(TREAT_DCODE), DynamicCellType.STRING);	
			treatDCODECell.setValue(voConfig.getDayOneDeliveryCodeIsNotNull() ? voConfig.getDayOneDeliveryCode().getText() : "");
			
			if (form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))
				treatDCODECell.setValue(voConfig.getDeliveryCodeAllOtherDaysIsNotNull() ? voConfig.getDeliveryCodeAllOtherDays().getText() : "");
		}*/
			
		form.lyrDetails().tabCycleAndDrugCCO().Group1().setValue(Group1Enumeration.rdoActive);
		form.getLocalContext().setAddEditMode(Boolean.FALSE);			//wdev-12416
	}

	private void enableDisableCCOControls(FormMode edit) 
	{
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().setEnabled(edit.equals(FormMode.EDIT) ? false : true );
		form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		
		if ( form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue() != null
			&& form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue().equals(ChemoCycleTreatmentType.OUTPATIENT))
			form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setEnabled(false);

		form.lyrDetails().tabCycleAndDrugCCO().intCycle().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		/*if (form.grdChemotherapy().getValue() != null 
			&& form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull()
			&& form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))*/
		if(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null && form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue().equals(DrugTherapyType.HIGHCOSTDRUG))  //wdev-12393
			
		{
			form.lyrDetails().tabCycleAndDrugCCO().intDuration().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
			form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.TRUE);
			form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.FALSE);
		}
		else
		{
			form.lyrDetails().tabCycleAndDrugCCO().intDay().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
			form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.FALSE);
			form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.TRUE);
		}
		form.lyrDetails().tabCycleAndDrugCCO().Group1().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		
		form.lyrDetails().tabCycleAndDrugCCO().btnSaveCycle().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		form.lyrDetails().tabCycleAndDrugCCO().btnSaveCycle().setVisible(edit.equals(FormMode.EDIT) ? true : false );
		form.lyrDetails().tabCycleAndDrugCCO().btnCancelCycle().setEnabled(edit.equals(FormMode.EDIT) ? true : false );
		form.lyrDetails().tabCycleAndDrugCCO().btnCancelCycle().setVisible(edit.equals(FormMode.EDIT) ? true : false );
		
		//wdev-12819
		form.lyrDetails().tabCycleAndDrugCCO().intWeightStartCycle().setEnabled(edit.equals(FormMode.EDIT) ? true : false);
		form.lyrDetails().tabCycleAndDrugCCO().cmbPerformanceStatusAtSTartCycle().setEnabled(edit.equals(FormMode.EDIT) ? true : false);
		form.lyrDetails().tabCycleAndDrugCCO().txtDummyactiveInactive().setEnabled(edit.equals(FormMode.EDIT) ? true : false);
		//-----------
	}

	public void initialize() throws FormOpenException
	{
		// WDEV-5193
		//form.lyrDetails().tabDetails().customControlMos().initialize(MosType.MEDIC);		//wdev-12819
		
		//WDEV-15194
		form.lyrDetails().tabDetails().customControlMos().initializeResponsibleHcp(MosType.MEDIC,true);
		form.lyrDetails().tabDetails().customControlMos().isRequired(true);
		
		//wdev-12819
		//form.lyrDetails().tabDetails().ccPrescribing().setLabels(AuthoringLabelType.PRESCRIBING);
		//form.lyrDetails().tabDetails().ccPrescribing().initializeComponent(HcpDisType.MEDICAL);
		form.lyrDetails().tabDetails().ccPrescribingHCP().initialize(MosType.MEDIC);		//wdev-13110
		//--------
		form.getLocalContext().setCurrentValueCollectionCycleDetailsTabGrid(null);										//wdev-12819	
		form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(null);												//wdev-12819
		form.lyrDetails().tabCycleAndDrug().GroupFilterStatus().setValue(GroupFilterStatusEnumeration.rdoStatusActive);  //wdev-12819
		form.getLocalContext().setAddEditMode(null);			//wdev-12416
		
		initializeContextMenus();

		if (ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
		{
			initializeDynamicGrid(); 
			form.lyrDetails().tabCycleAndDrugCCO().setVisible(false);
			form.lyrDetails().tabCycleAndDrugCCO().setHeaderVisible(false);
		}
		else
		{
			initializeDynamicGrid(); //wdev-12819
			form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().setValue(GroupStatusEnumeration.rdoActiveFilter);

			initializeCCODynamicGrid(form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull() ? form.grdChemotherapy().getValue().getDrugTherapyType() : null);
			showHideDayDurationControls(form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull() ? form.grdChemotherapy().getValue().getDrugTherapyType() : null);
			//form.lyrDetails().tabCycleAndDrug().setVisible(true);
			//form.lyrDetails().tabCycleAndDrug().setHeaderVisible(true);
			
		}
	}

	private void initializeCCODynamicGrid(DrugTherapyType type)
	{
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().clear();

		DynamicGridColumn colTreat = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Treat Context");
		colTreat.setIdentifier(TREAT_TYPE);
		colTreat.setWidth(150);

		DynamicGridColumn colDate = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Date");
		colDate.setIdentifier(TREAT_DATE);
		colDate.setWidth(70);

		
		
		DynamicGridColumn dateColumn = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Cycle No.");
		dateColumn.setIdentifier(TREAT_CYCLE);
		dateColumn.setWidth(60);

		if (type != null && type.equals(DrugTherapyType.HIGHCOSTDRUG))
		{
			DynamicGridColumn durationColumn = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Duration");
			durationColumn.setIdentifier(TREAT_DURATION);
			durationColumn.setWidth(90);
		}
		
		if (type == null || ! type.equals(DrugTherapyType.HIGHCOSTDRUG))
		{
			DynamicGridColumn colDay = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Day Number");
			colDay.setIdentifier(TREAT_DAY);
			colDay.setWidth(90);
		}

		

		DynamicGridColumn colPCODE = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Procurement Code");
		colPCODE.setIdentifier(TREAT_PCODE);
		colPCODE.setWidth(130);

		DynamicGridColumn colDCODE = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Delivery Code");
		colDCODE.setIdentifier(TREAT_DCODE);
		colDCODE.setWidth(130);

		DynamicGridColumn colStat = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().newColumn("Active");
		colStat.setIdentifier(TREAT_STATUS);
		colStat.setWidth(-1);
	}

	private void initializeContextMenus()
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllChemotherapyCycleMenuItems();
		form.getContextMenus().Oncology.hideAllCCOChemoCycleMenuMenuItems();
	}

	private void initializeDynamicGrid()
	{
		form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().clear();

		DynamicGridColumn cycleColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Cycle Details");
		cycleColumn.setIdentifier(CYCLE_DETAILS);
		cycleColumn.setWidth(CYCLE_NUMBER_SIZE);

		DynamicGridColumn cycleDayNoColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Day No.");
		cycleDayNoColumn.setIdentifier(CYCLE_DAY_NO);
		cycleDayNoColumn.setWidth(CYCLE_DAY_NO_SIZE);

		DynamicGridColumn dateColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Date");
		dateColumn.setWidth(CYCLE_DATE_SIZE);
		dateColumn.setIdentifier(CYCLE_DATE);

		DynamicGridColumn sizeColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Drug");
		sizeColumn.setWidth(CYCLE_MEDICATION_SIZE);
		sizeColumn.setIdentifier(CYCLE_MEDICATION);

		DynamicGridColumn noOfDosesColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Number Of Doses");
		noOfDosesColumn.setIdentifier(NO_OF_DOSES);
		noOfDosesColumn.setWidth(NO_OF_DOSES_SIZE);
		
		//wdev-12819
		DynamicGridColumn activeColumn = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().newColumn("Status");
		activeColumn.setIdentifier(CYCLE_ACTIVE);
		activeColumn.setWidth(CYCLE_ACTIVE_SIZE);
		//---------
		
	}

	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();
		form.getLocalContext().setCurrentValueCollectionCycleDetailsTabGrid(null);										//wdev-12819
		form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(null);												//wdev-12819
		// List chemotherapy records to screen
		populateChemotherapyGrid(domain.listChemotherapies(form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext()));

		// Retrieve selection from data base
		form.getLocalContext().setChemotherapyDetailsVo(domain.getChemotherapyDetailsVo(form.getLocalContext().getChemotherapyDetailsVo()));

		// Reselect in list
		form.grdChemotherapy().setValue(form.getLocalContext().getChemotherapyDetailsVo());
					
		// Populate instance controls
		populateScreenFromData(form.getLocalContext().getChemotherapyDetailsVo());
		
		//WDEV-11651 
		if(form.getLocalContext().getChemotherapyDetailsVo()==null && form.grdChemotherapy().getRows().size()>0)
		{
			form.grdChemotherapy().setValue(form.grdChemotherapy().getRows().get(0).getValue());
			selectionChanged();
		}

		// Set form to VIEW Mode
		form.setMode(FormMode.VIEW);
	}

	public void clear()
	{
		// Clear list grid
		form.grdChemotherapy().getRows().clear();

		// Clear instance controls
		clearInstanceControls();
	}

	public void clearInstanceControls()
	{
		// -------- Details--------------------------------------------
		tabDetailsContainer tabDetails = form.lyrDetails().tabDetails();

		
		tabDetails.cmbHospital().setValue(null);  //wdev-13044
		
		tabDetails.customControlMos().clear();

		
		tabDetails.ccPrescribingHCP().setValue(null);	//wdev-13110
		tabDetails.dtePrescribing().setValue(null);		//wdev-13110
		tabDetails.intNrOfCyclesPlaned().setValue(null);//wdev-12819
		tabDetails.intProgrameNr().setValue(null);//wdev-12819
		tabDetails.intRegimenNr().setValue(null);//wdev-12819
		tabDetails.cmbRegimenOutcomeSummary().setValue(null);//wdev-12819
		tabDetails.GroupCoMorbidity().setValue(null);//wdev-12819
		tabDetails.GroupChemoradiation().setValue(null);//wdev-12819
		tabDetails.GroupClinicalTrial().setValue(null);//wdev-12819
		tabDetails.GroupDoseReduction().setValue(null);//wdev-12819
		tabDetails.GroupTimeDelay().setValue(null);//wdev-12819
		tabDetails.GroupStoppedEarly().setValue(null);//wdev-12819

		// Date Decision to Treat
		tabDetails.dteDecisionToTreat().setValue(null);
		// Drug Therapy Type
		tabDetails.cmbDrugTherapyType().setValue(null);
		// Treatment Intent
		tabDetails.cmbTreatmentIntent().setValue(null);
		// Regime Acronym
		tabDetails.cmbRegimeAcronym().setValue(null);
		// Course Start Date
		tabDetails.dtCourseStartDate().setValue(null);
		// Height & Weight
		tabDetails.decimalHeightCm().setValue(null);
		tabDetails.decimalWeightCm().setValue(null);
		// Pre tx Surface Area
		tabDetails.decPreTxSurfaceArea().setValue(null);
		// Pre tx Creatinine
		tabDetails.decPreTxCretinine().setValue(null);
		// Treatment Response
		tabDetails.cmbTreatmentResponse().setValue(null);
		// Reason for Changing Planned Treatment
		tabDetails.cmbReasonForChanging().setValue(null);

		form.lyrDetails().tabDetails().dteCourseEndDate().setValue(null);
		form.lyrDetails().tabDetails().lblNumberOfCycles().setValue("");
		form.lyrDetails().tabDetails().cmbPrefornmanceStat().setValue(null);
		
		form.lyrDetails().tabDetails().cmbDelay1().setValue(null);
		form.lyrDetails().tabDetails().cmbDelay2().setValue(null);

		// -------- Cycle and Drug Details ----------------------------------------
		tabCycleAndDrugContainer tabCycle = form.lyrDetails().tabCycleAndDrug();
		tabCycle.dyngrdCyclesDays().getRows().clear();
		
		clearCCOControls();
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().clear();

	}

	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		if (super.allowNew())
		{
			
			// Clear instance controls
			clearInstanceControls();
			
			// Clear selection from local context
			form.getLocalContext().setChemotherapyDetailsVo(null);

			//wdev-12819
			form.getLocalContext().setCurrentValueCollectionCycleDetailsTabGrid(null);										//wdev-12819
			form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(null);
			
			form.lyrDetails().tabDetails().ccPrescribingHCP().setValue(null);	//wdev-13110
			
			LookupInstVo lookup = domain.getLookupService().getDefaultInstance(form.getForms().Oncology.ChemotherapyDetails.getID(), new LookupTypeVo(TreatmentHospital.TYPE_ID));
			
			if(lookup != null)
			{
				form.lyrDetails().tabDetails().cmbHospital().setValue(TreatmentHospital.buildLookup(lookup.getBean()));
			}
			//------------
			form.setMode(FormMode.EDIT);
			form.lyrDetails().showtabDetails();
			
			if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
			{
				PatTreatmentPlanRadiotherapyDialogVoCollection voColl;
				try 
				{
					voColl = domain.listActivePatTreatMentPlans(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort());
				} 
				catch (NumberFormatException e) 
				{
					engine.showMessage(e.getMessage());
					return;
				} 
				
				for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
				{
					PatTreatPlanActionLiteVoCollection voActionsColl = voColl.get(i).getActions();
					
					for (int x = 0 ; voActionsColl != null && x < voActionsColl.size() ; x++)
					{
						if( voActionsColl.get(x).getActiveIsNotNull()
							&& voActionsColl.get(x).getActive())
						{
							engine.open(form.getForms().Oncology.PatientsChemoTreatmentPlanActionsDialog);
							break;
						}
					}
				}
			}

		}
	}

	public void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
		form.lyrDetails().tabDetails().cmbDrugTherapyType().setEnabled(false);			//wdev-12819
		if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue() )
		{
			
			selectionChanged();
		}
	}

	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		StringBuffer sbErrors = new StringBuffer();
		if (form.lyrDetails().tabDetails().cmbHospital().getValue() == null)		//wdev-13044
			sbErrors.append("Hospital is a mandatory field.\n");

		if (form.lyrDetails().tabDetails().customControlMos().getValue() == null)
			sbErrors.append("Consultant is a mandatory field.\n");

		if (form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() == null)
			sbErrors.append("Drug Type is a mandatory field.\n");

		if (form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue() == null)
			sbErrors.append("Regimen is a mandatory field.\n");
		//wdev-12819
		if(form.lyrDetails().tabDetails().dteDecisionToTreat().getValue() != null && form.lyrDetails().tabDetails().dteDecisionToTreat().getValue().isGreaterThan(new Date()))
			sbErrors.append("Date Decision to treat cannot be in the future.\n");
		//---------

		if (sbErrors.length() > 0)
		{
			engine.showMessage(sbErrors.toString(), "Missing Mandatory values", MessageButtons.OK, MessageIcon.WARNING);
			return false;
		}

		try
		{
			if (form.getLocalContext().getChemotherapyDetailsVo() != null
				&& form.getLocalContext().getChemotherapyDetailsVo().getID_ChemotherapyDetails() == null
				&& form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanActionIsNotNull()
				&& form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getID_PatActionIsNotNull()
				&& domain.checkIfChosenPlanLinked(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction()))
			{
				engine.showMessage("The chosen action plan is already linked to another record. Please select a different action plan record.","Warning", MessageButtons.OK, MessageIcon.WARNING);
				open();
				return false;
			}
			// Populate data from screen
			form.getLocalContext().setChemotherapyDetailsVo(populateDataFromScreen(form.getLocalContext().getChemotherapyDetailsVo()));

			if (form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanActionIsNotNull())
				form.getLocalContext().getChemotherapyDetailsVo().setAssociatedTreatmentPlanAction(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction());
			
			// Validate data
			String[] errors = validateUIRules();
			errors = form.getLocalContext().getChemotherapyDetailsVo().validate(errors);

			// Display validation errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt save
			form.getLocalContext().setChemotherapyDetailsVo(domain.saveChemotherapyDetailsVo(form.getLocalContext().getChemotherapyDetailsVo()));
		}
		// Treat exceptions
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}


	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnUpdate().setVisible(form.grdChemotherapy().getValue() != null);
			form.lyrDetails().tabDetails().customControlMos().setEnabled(false);			//wdev-13301
		}
		else
		{
			form.lyrDetails().tabDetails().customControlMos().setEnabled(true);				//wdev-13301
		}
		
		if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue() )
		{
			//WDEV-14175  if ( FormMode.EDIT.equals(form.getMode()) )
				enableDisableCCOControls(FormMode.VIEW);
			
			showHideDayDurationControls(form.grdChemotherapy().getValue()!= null && form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull()? form.grdChemotherapy().getValue().getDrugTherapyType() : null);
		}

		showHideCCOControls(form.getMode());

		showHideSaveAndCancelButtons(form.getMode());
		
		//if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue() )
		
		updateContextMenuState();
	}

	private void showHideCCOControls(FormMode mode) 
	{
		form.lyrDetails().tabDetails().lblCourseenddate().setVisible(false);
		form.lyrDetails().tabDetails().lblLABELNumCylces().setVisible(false);
		form.lyrDetails().tabDetails().lblLABELPerf2().setVisible(false);
		//form.lyrDetails().tabDetails().lblPerfStatusDTT().setVisible(false);	//wdev-12819
		form.lyrDetails().tabDetails().lblLABELDelay1().setVisible(false);
		form.lyrDetails().tabDetails().lblLABELDelay2().setVisible(false);
		form.lyrDetails().tabDetails().dteCourseEndDate().setVisible(false);
		form.lyrDetails().tabDetails().cmbPrefornmanceStat().setVisible(false);
		form.lyrDetails().tabDetails().lblNumberOfCycles().setVisible(false);
		form.lyrDetails().tabDetails().cmbDelay1().setVisible(false);
		form.lyrDetails().tabDetails().cmbDelay2().setVisible(false);
		
		
		if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue() )
		{
			form.lyrDetails().tabDetails().lblCourseenddate().setVisible(true);
			form.lyrDetails().tabDetails().dteCourseEndDate().setVisible(true);
			form.lyrDetails().tabDetails().lblLABELNumCylces().setVisible(true);
			form.lyrDetails().tabDetails().lblNumberOfCycles().setVisible(true);
			form.lyrDetails().tabDetails().lblLABELPerf2().setVisible(true);
			//form.lyrDetails().tabDetails().lblPerfStatusDTT().setVisible(false);	//wdev-12819
			form.lyrDetails().tabDetails().lblLABELDelay1().setVisible(true);
			form.lyrDetails().tabDetails().lblLABELDelay2().setVisible(true);
			form.lyrDetails().tabDetails().cmbPrefornmanceStat().setVisible(true);
			form.lyrDetails().tabDetails().cmbDelay1().setVisible(true);
			form.lyrDetails().tabDetails().cmbDelay2().setVisible(true);
			
			form.lyrDetails().tabDetails().dteCourseEndDate().setEnabled(mode.equals(FormMode.EDIT) ? true : false);
			form.lyrDetails().tabDetails().cmbPrefornmanceStat().setEnabled(mode.equals(FormMode.EDIT) ? true : false);
			form.lyrDetails().tabDetails().cmbDelay1().setEnabled(mode.equals(FormMode.EDIT) ? true : false);
			form.lyrDetails().tabDetails().cmbDelay2().setEnabled(mode.equals(FormMode.EDIT) ? true : false);
			form.lyrDetails().tabDetails().cmbDrugTherapyType().setEnabled((mode.equals(FormMode.EDIT) ? true : false)); //WDEV-14175
		}
	}

	private void showHideSaveAndCancelButtons(FormMode mode) 
	{
		form.btnSave().setVisible(FormMode.EDIT.equals(mode) ? true : false);
		form.btnCancel().setVisible(FormMode.EDIT.equals(mode) ? true : false);
	}

	private void initializeCCOControls()
	{
		if ( ! ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
		{
			initializeCCODynamicGrid(form.grdChemotherapy().getValue()!= null && form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull()? form.grdChemotherapy().getValue().getDrugTherapyType() : null);
			showHideDayDurationControls(form.grdChemotherapy().getValue()!= null && form.grdChemotherapy().getValue().getDrugTherapyTypeIsNotNull()? form.grdChemotherapy().getValue().getDrugTherapyType() : null);
		}
	}
	private void showHideDayDurationControls(DrugTherapyType drugTherapyType)
	{
		if (drugTherapyType != null && drugTherapyType.equals(DrugTherapyType.HIGHCOSTDRUG))
		{
			form.lyrDetails().tabCycleAndDrugCCO().lblDayDuration().setValue("Duration:");
			form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.TRUE);
			form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.FALSE);
		}
		else
		{
			form.lyrDetails().tabCycleAndDrugCCO().lblDayDuration().setValue("Day No.:");//WDEV-16917
			form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.FALSE);
			form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.TRUE);
		}
	}

	private void updateContextMenuState()
	{
		// Chemotherapy context menu
		form.getContextMenus().getGenericGridAddItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().getGenericGridUpdateItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdChemotherapy().getValue() != null); // Use grid.getValue() as the selected row
										
		if (ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
		{
			// must also have a value, not just be selected
			// Cycle details context menu
			form.getContextMenus().getChemotherapyCycleAddCycleItem().setVisible(FormMode.EDIT.equals(form.getMode()));
			form.getContextMenus().getChemotherapyCycleEditFractionItem().setText("Edit Day");		//wdev-12819
			form.getContextMenus().getChemotherapyCycleEditFractionItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemoTherapyDayDetailsVo);  //wdev-12819
			form.getContextMenus().getChemotherapyCycleAddFractionItem().setText("Add Day");
			form.getContextMenus().getChemotherapyCycleAddFractionItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemotherapyCycleDetailsVo );	//wdev-12819
			form.getContextMenus().getChemotherapyCycleEditItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemotherapyCycleDetailsVo);	//wdev-12819
			form.getContextMenus().getChemotherapyCycleViewDayItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemoTherapyDayDetailsVo);  //wdev-12819
		
		}
		else
		{
			//wdev-12819
			// must also have a value, not just be selected
			// Cycle details context menu
			form.getContextMenus().getChemotherapyCycleAddCycleItem().setVisible(FormMode.EDIT.equals(form.getMode()));
			form.getContextMenus().getChemotherapyCycleEditFractionItem().setText("Edit Day");		//wdev-12819
			form.getContextMenus().getChemotherapyCycleEditFractionItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemoTherapyDayDetailsVo);  //wdev-12819
			form.getContextMenus().getChemotherapyCycleAddFractionItem().setText("Add Day");
			form.getContextMenus().getChemotherapyCycleAddFractionItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemotherapyCycleDetailsVo );	//wdev-12819
			form.getContextMenus().getChemotherapyCycleEditItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemotherapyCycleDetailsVo);	//wdev-12819
			form.getContextMenus().getChemotherapyCycleViewDayItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getValue() instanceof ChemoTherapyDayDetailsVo);  //wdev-12819
			//-----------
			
			//if (form.getLocalContext().getChemotherapyDetailsVo() != null
			//	&& form.getLocalContext().getChemotherapyDetailsVo().getID_ChemotherapyDetailsIsNotNull())
			//{
				// CCO Cycle details context menu
				form.getContextMenus().Oncology.getCCOChemoCycleMenuCCO_ADD_CYCLEItem().setVisible(FormMode.EDIT.equals(form.getMode()));
				form.getContextMenus().Oncology.getCCOChemoCycleMenuCCO_EDIT_CYCLEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue() instanceof ChemoCycleDetailsCCOVo);
			//}
		}
	}

	// --------------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange functions
	// --------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateChemotherapyGrid(ChemotherapyDetailsShortVoCollection listChemotherapies)
	{
		// Clear grid results
		form.grdChemotherapy().getRows().clear();

		if (listChemotherapies == null)
			return;

		listChemotherapies.sort(new StartDateComparator(SortOrder.ASCENDING));	//wdev-12819
		for (ChemotherapyDetailsShortVo chemotherapy : listChemotherapies)
		{
			// Skip null chemotherapy
			if (chemotherapy == null)
				continue;

			/*if (form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoFilterActive)
				&& chemotherapy.getStatusIsNotNull()
				&&  ! chemotherapy.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				continue;*/ //wdev-12819
			
			setChemotherapyRow(form.grdChemotherapy().getRows().newRow(), chemotherapy);
		}
	}

	private void setChemotherapyRow(grdChemotherapyRow row, ChemotherapyDetailsShortVo chemotherapy)
	{
		if (row == null)
			throw new CodingRuntimeException("Fatal Error - Can not populate chemotherapy to null row");

		if (chemotherapy == null)
			throw new CodingRuntimeException("Major logical error - Can not populate a null value to row");

		row.setcolStartDate(chemotherapy.getStartDate());
		row.setcolRegime(chemotherapy.getRegimenAcronymIsNotNull() ? chemotherapy.getRegimenAcronym().getText() : null);
		row.setcolConsultant(chemotherapy.getTreatingConsultantIsNotNull() ? chemotherapy.getTreatingConsultant().getName().toString() : null);
		row.setcolIntent(chemotherapy.getCancerTreatementIntentIsNotNull() ? chemotherapy.getCancerTreatementIntent().getText() : null);
		row.setcolResponse(chemotherapy.getTreatmentResponseIsNotNull() ? chemotherapy.getTreatmentResponse().getText() : null);
		

		row.setValue(chemotherapy);
	}

	
	private void populateScreenFromData(ChemotherapyDetailsVo voChemotherapyDetails)
	{
		// Clear instance controls
		clearInstanceControls();

		// Terminate function if data provided is null
		if (voChemotherapyDetails == null)
			return;

		// -------- Details--------------------------------------------
		tabDetailsContainer tabDetails = form.lyrDetails().tabDetails();

		// Hospital
		if (voChemotherapyDetails.getTreatmentSiteIsNotNull())
		{
			if( tabDetails.cmbHospital().getValues() != null && tabDetails.cmbHospital().getValues().contains(voChemotherapyDetails.getTreatmentSite()))	//wdev-13044
			{
				tabDetails.cmbHospital().setValue(voChemotherapyDetails.getTreatmentSite());
			}
			else  //wdev-13044
			{
				tabDetails.cmbHospital().newRow(voChemotherapyDetails.getTreatmentSite(), voChemotherapyDetails.getTreatmentSite().toString());
				tabDetails.cmbHospital().setValue(voChemotherapyDetails.getTreatmentSite());
			}
		}
		// Consultant
		if (voChemotherapyDetails.getTreatingConsultantIsNotNull())
		{
			// tabDetails.customControlConsultant().setValue(voChemotherapyDetails.getTreatingConsultant());
			tabDetails.customControlMos().clear();
			tabDetails.customControlMos().setValue(voChemotherapyDetails.getTreatingConsultant());
		}

		//form.lyrDetails().tabDetails().ccPrescribing().setValue(voChemotherapyDetails.getAuthoringInfo()); 	//wdev-12819
		form.lyrDetails().tabDetails().ccPrescribingHCP().setValue(voChemotherapyDetails.getPrescribingHCP());	//wdev-13110
		form.lyrDetails().tabDetails().dtePrescribing().setValue(voChemotherapyDetails.getPrescribedDate());	//wdev-13110	
		

		// Date Decision to Treat
		tabDetails.dteDecisionToTreat().setValue(voChemotherapyDetails.getDateDecisionToTreat());
		// Drug Therapy Type
		tabDetails.cmbDrugTherapyType().setValue(voChemotherapyDetails.getDrugTherapyType());
		// Treatment Intent
		tabDetails.cmbTreatmentIntent().setValue(voChemotherapyDetails.getCancerTreatementIntent());
		// Regime Acronym
		tabDetails.cmbRegimeAcronym().setValue(voChemotherapyDetails.getRegimenAcronym());
		// Course Start Date
		tabDetails.dtCourseStartDate().setValue(voChemotherapyDetails.getStartDate());
		// Height & Weight
		tabDetails.decimalHeightCm().setValue(voChemotherapyDetails.getHeightValueCM());
		tabDetails.decimalWeightCm().setValue(voChemotherapyDetails.getWeightValueKG());
		// Pre tx Surface Area
		tabDetails.decPreTxSurfaceArea().setValue(voChemotherapyDetails.getPreTreatSurfaceArea());
		// Pre tx Creatinine
		tabDetails.decPreTxCretinine().setValue(voChemotherapyDetails.getCreatinineClearance());
		// Treatment Response
		tabDetails.cmbTreatmentResponse().setValue(voChemotherapyDetails.getTreatmentResponse());
		// Reason for Changing Planned Treatment
		tabDetails.cmbReasonForChanging().setValue(voChemotherapyDetails.getTxChangeReason());

		tabDetails.cmbPrefornmanceStat().setValue(voChemotherapyDetails.getPerformanceStatus());
		tabDetails.dteCourseEndDate().setValue(voChemotherapyDetails.getEndDate());	//wdev-12819
		tabDetails.cmbReasonForChanging().setValue(voChemotherapyDetails.getTxChangeReason());
		tabDetails.cmbDelay1().setValue(voChemotherapyDetails.getDelayReason1());
		tabDetails.cmbDelay2().setValue(voChemotherapyDetails.getDelayReason2());

		
		//wdev-12891
		
		tabDetails.intProgrameNr().setValue(voChemotherapyDetails.getProgrammeNr());
		tabDetails.intRegimenNr().setValue(voChemotherapyDetails.getRegimenNr());
		tabDetails.intNrOfCyclesPlaned().setValue(voChemotherapyDetails.getPlannedCycles());
		tabDetails.cmbRegimenOutcomeSummary().setValue(voChemotherapyDetails.getOutcomeSummary());
		tabDetails.GroupCoMorbidity().setValue(voChemotherapyDetails.getComorbidityAdjustmentIsNotNull() ? (voChemotherapyDetails.getComorbidityAdjustment().equals(YesNo.YES) ? GroupCoMorbidityEnumeration.rdoCoMorbidityYes: GroupCoMorbidityEnumeration.rdoCoMorbidityNo) : null);
		tabDetails.GroupChemoradiation().setValue(voChemotherapyDetails.getChemoRadiationIsNotNull() ? (voChemotherapyDetails.getChemoRadiation().equals(YesNo.YES) ? GroupChemoradiationEnumeration.rdoChemoradiationYes: GroupChemoradiationEnumeration.rdoChemoradiationNo) : null);
		tabDetails.GroupClinicalTrial().setValue(voChemotherapyDetails.getClinicalTrialIsNotNull() ? (voChemotherapyDetails.getClinicalTrial().equals(YesNo.YES) ? GroupClinicalTrialEnumeration.rdoClinicalTrialYes: GroupClinicalTrialEnumeration.rdoClinicalTrialNo) : null);
		tabDetails.GroupDoseReduction().setValue(voChemotherapyDetails.getOutcomeDoseReductionIsNotNull() ? (voChemotherapyDetails.getOutcomeDoseReduction().equals(YesNo.YES) ? GroupDoseReductionEnumeration.rdoRMdosereductionYes: GroupDoseReductionEnumeration.rdoRMdosereductionNo) : null);
		tabDetails.GroupTimeDelay().setValue(voChemotherapyDetails.getOutcomeTimeDelayIsNotNull() ? (voChemotherapyDetails.getOutcomeTimeDelay().equals(YesNo.YES) ? GroupTimeDelayEnumeration.rdoRMtimedelayYes: GroupTimeDelayEnumeration.rdoRMtimedelayNo) : null);
		tabDetails.GroupStoppedEarly().setValue(voChemotherapyDetails.getOutcomeStoppedEarlyIsNotNull() ? (voChemotherapyDetails.getOutcomeStoppedEarly().equals(YesNo.YES) ? GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyYes: GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyNo) : null);
		
		//--------
	
		tabDetails.lblNumberOfCycles().setValue(getCycleValue(voChemotherapyDetails));

		// -------- Cycle and Drug Details ----------------------------------------
		if (ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
		{
			form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().clear();
			form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(voChemotherapyDetails.getCycleDetails());				//wdev-12819
			voChemotherapyDetails.getCycleDetails().sort();
			for (int j = 0; voChemotherapyDetails.getCycleDetailsIsNotNull() && j < voChemotherapyDetails.getCycleDetails().size(); j++)
			{
				populateChemotherapyCyleDetails(voChemotherapyDetails.getCycleDetails().get(j),form.lyrDetails().tabCycleAndDrug().GroupFilterStatus().getValue().equals(GroupFilterStatusEnumeration.rdoStatusActive));
			}
		}
		else
		{
			form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().clear();	//wdev-12819
			form.getLocalContext().setCurrentCollectionCycleAndDrugGrid(voChemotherapyDetails.getCycleDetails());				//wdev-12819
			voChemotherapyDetails.getCycleDetails().sort();
			for (int j = 0; voChemotherapyDetails.getCycleDetailsIsNotNull() && j < voChemotherapyDetails.getCycleDetails().size(); j++)	//wdev-12819
			{
				populateChemotherapyCyleDetails(voChemotherapyDetails.getCycleDetails().get(j),form.lyrDetails().tabCycleAndDrug().GroupFilterStatus().getValue().equals(GroupFilterStatusEnumeration.rdoStatusActive)); //wdev-12819
			}
			form.getLocalContext().setCurrentValueCollectionCycleDetailsTabGrid(voChemotherapyDetails != null ? voChemotherapyDetails.getCCOCycleDetails():null); //wdev-12393
			fillCCOGrid(voChemotherapyDetails);
		}
	}

	private String getCycleValue(ChemotherapyDetailsVo voChemotherapyDetails)
	{
		if (ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
			return "";
		
		int maxCycleNum = 0;
		if(voChemotherapyDetails.getCCOCycleDetailsIsNotNull() 
			&& voChemotherapyDetails.getCCOCycleDetails().size() > 0
			&& voChemotherapyDetails.getCCOCycleDetails().get(0).getCycleNumber() != null
			&& voChemotherapyDetails.getCCOCycleDetails().get(0).getIsActiveIsNotNull()
			&& voChemotherapyDetails.getCCOCycleDetails().get(0).getIsActive())
			maxCycleNum = voChemotherapyDetails.getCCOCycleDetails().get(0).getCycleNumber();
		
		for (int j = 0; voChemotherapyDetails.getCCOCycleDetailsIsNotNull() && j < voChemotherapyDetails.getCCOCycleDetails().size(); j++)
		{
			if (voChemotherapyDetails.getCCOCycleDetails().get(j).getCycleNumber() != null
				&& voChemotherapyDetails.getCCOCycleDetails().get(j).getIsActiveIsNotNull()
				&& voChemotherapyDetails.getCCOCycleDetails().get(j).getIsActive()
				&& voChemotherapyDetails.getCCOCycleDetails().get(j).getCycleNumber() > maxCycleNum)
				maxCycleNum = voChemotherapyDetails.getCCOCycleDetails().get(j).getCycleNumber();
		}
		
		return maxCycleNum > 0 ? Integer.toString(maxCycleNum) : "";
	}

	private void fillCCOGrid(ChemotherapyDetailsVo voChemotherapyDetails) 
	{
		
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().clear();
		if(voChemotherapyDetails == null)
			return;
		
		voChemotherapyDetails.getCCOCycleDetails().sort(SortOrder.ASCENDING);
		for (int j = 0; voChemotherapyDetails.getCCOCycleDetailsIsNotNull() && j < voChemotherapyDetails.getCCOCycleDetails().size(); j++)
		{
			addCCOChemotherapyCyleDetailsRow(voChemotherapyDetails.getCCOCycleDetails().get(j), form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue(), form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoActiveFilter));	//wdev-1239
		}
	}

	private ChemotherapyDetailsVo populateDataFromScreen(ChemotherapyDetailsVo chemotherapyDetails)
	{
		if (chemotherapyDetails == null)
		{
			chemotherapyDetails = new ChemotherapyDetailsVo();
			
			chemotherapyDetails.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			chemotherapyDetails.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		// -------- Details--------------------------------------------
		tabDetailsContainer tabDetails = form.lyrDetails().tabDetails();

		//wdev-12819
		//chemotherapyDetails.setAuthoringInfo(form.lyrDetails().tabDetails().ccPrescribing().getValue());  
		//--
		chemotherapyDetails.setPrescribingHCP((MedicVo) form.lyrDetails().tabDetails().ccPrescribingHCP().getValue());	//wdev-13110
		chemotherapyDetails.setPrescribedDate(form.lyrDetails().tabDetails().dtePrescribing().getValue());	//wdev-13110
		// Hospital
		chemotherapyDetails.setTreatmentSite(tabDetails.cmbHospital().getValue());						//wdev-13044
		// Consultant
		// voChemotherapyDetails.setTreatingConsultant(tabDetails.customControlConsultant().getValue());
		chemotherapyDetails.setTreatingConsultant(domain.getHcp(tabDetails.customControlMos().getValue()));

		// Date Decision to Treat
		chemotherapyDetails.setDateDecisionToTreat(tabDetails.dteDecisionToTreat().getValue());
		// Drug Therapy Type
		chemotherapyDetails.setDrugTherapyType(tabDetails.cmbDrugTherapyType().getValue());
		// Treatment Intent
		chemotherapyDetails.setCancerTreatementIntent(tabDetails.cmbTreatmentIntent().getValue());
		// Regime Acronym
		chemotherapyDetails.setRegimenAcronym(tabDetails.cmbRegimeAcronym().getValue());
		// Course Start Date
		chemotherapyDetails.setStartDate(tabDetails.dtCourseStartDate().getValue());
		// Height & Weight
		chemotherapyDetails.setHeightValueCM(tabDetails.decimalHeightCm().getValue());
		chemotherapyDetails.setWeightValueKG(tabDetails.decimalWeightCm().getValue());

		// Pre tx Surface Area
		chemotherapyDetails.setPreTreatSurfaceArea(tabDetails.decPreTxSurfaceArea().getValue());
		// Pre tx Creatinine
		chemotherapyDetails.setCreatinineClearance(tabDetails.decPreTxCretinine().getValue());
		// Treatment Response
		chemotherapyDetails.setTreatmentResponse(tabDetails.cmbTreatmentResponse().getValue());
		// Reason for Changing Planned Treatment
		chemotherapyDetails.setTxChangeReason(tabDetails.cmbReasonForChanging().getValue());

		chemotherapyDetails.setPerformanceStatus(tabDetails.cmbPrefornmanceStat().getValue());
		
		chemotherapyDetails.setEndDate(tabDetails.dteCourseEndDate().getValue());		//wdev-12819
		chemotherapyDetails.setDelayReason1(tabDetails.cmbDelay1().getValue());
		chemotherapyDetails.setDelayReason2(tabDetails.cmbDelay2().getValue());
		//wdev-12819
		chemotherapyDetails.setProgrammeNr(tabDetails.intProgrameNr().getValue());
		chemotherapyDetails.setRegimenNr(tabDetails.intRegimenNr().getValue());
		chemotherapyDetails.setPlannedCycles(tabDetails.intNrOfCyclesPlaned().getValue());
		if (tabDetails.GroupCoMorbidity().getValue() != null && tabDetails.GroupCoMorbidity().getValue().equals(GroupCoMorbidityEnumeration.rdoCoMorbidityYes))
			chemotherapyDetails.setComorbidityAdjustment(YesNo.YES);	
		else if (tabDetails.GroupCoMorbidity().getValue() != null && tabDetails.GroupCoMorbidity().getValue().equals(GroupCoMorbidityEnumeration.rdoCoMorbidityNo))
			chemotherapyDetails.setComorbidityAdjustment(YesNo.NO);   
		else
			chemotherapyDetails.setComorbidityAdjustment(null);		
		
		if (tabDetails.GroupChemoradiation().getValue() != null && tabDetails.GroupChemoradiation().getValue().equals(GroupChemoradiationEnumeration.rdoChemoradiationYes))
			chemotherapyDetails.setChemoRadiation(YesNo.YES);	
		else if (tabDetails.GroupChemoradiation().getValue() != null && tabDetails.GroupChemoradiation().getValue().equals(GroupChemoradiationEnumeration.rdoChemoradiationNo))
			chemotherapyDetails.setChemoRadiation(YesNo.NO);   
		else
			chemotherapyDetails.setChemoRadiation(null);
		
		if (tabDetails.GroupClinicalTrial().getValue() != null && tabDetails.GroupClinicalTrial().getValue().equals(GroupClinicalTrialEnumeration.rdoClinicalTrialYes))
			chemotherapyDetails.setClinicalTrial(YesNo.YES);	
		else if (tabDetails.GroupClinicalTrial().getValue() != null && tabDetails.GroupClinicalTrial().getValue().equals(GroupClinicalTrialEnumeration.rdoClinicalTrialNo))
			chemotherapyDetails.setClinicalTrial(YesNo.NO);   
		else
			chemotherapyDetails.setClinicalTrial(null);
		
		if (tabDetails.GroupDoseReduction().getValue() != null && tabDetails.GroupDoseReduction().getValue().equals(GroupDoseReductionEnumeration.rdoRMdosereductionYes))
			chemotherapyDetails.setOutcomeDoseReduction(YesNo.YES);	
		else if (tabDetails.GroupDoseReduction().getValue() != null && tabDetails.GroupDoseReduction().getValue().equals(GroupDoseReductionEnumeration.rdoRMdosereductionNo))
			chemotherapyDetails.setOutcomeDoseReduction(YesNo.NO);   
		else
			chemotherapyDetails.setOutcomeDoseReduction(null);
		
		if (tabDetails.GroupTimeDelay().getValue() != null && tabDetails.GroupTimeDelay().getValue().equals(GroupTimeDelayEnumeration.rdoRMtimedelayYes))
			chemotherapyDetails.setOutcomeTimeDelay(YesNo.YES);	
		else if (tabDetails.GroupTimeDelay().getValue() != null && tabDetails.GroupTimeDelay().getValue().equals(GroupTimeDelayEnumeration.rdoRMtimedelayNo))
			chemotherapyDetails.setOutcomeTimeDelay(YesNo.NO);   
		else
			chemotherapyDetails.setOutcomeTimeDelay(null);
		
		if (tabDetails.GroupStoppedEarly().getValue() != null && tabDetails.GroupStoppedEarly().getValue().equals(GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyYes))
			chemotherapyDetails.setOutcomeStoppedEarly(YesNo.YES);	
		else if (tabDetails.GroupStoppedEarly().getValue() != null && tabDetails.GroupStoppedEarly().getValue().equals(GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyNo))
			chemotherapyDetails.setOutcomeStoppedEarly(YesNo.NO);   
		else
			chemotherapyDetails.setOutcomeStoppedEarly(null);
		
		
		chemotherapyDetails.setOutcomeSummary(tabDetails.cmbRegimenOutcomeSummary().getValue());
		//-----------

		// Cycle & Drug Details

		if (ConfigFlag.UI.USE_GENERIC_CHEMOTHERAPY_CYCLE_AND_DRUG_DETAILS.getValue())
		{
			/*ChemotherapyCycleDetailsVoCollection voCycleDetailsColl = new ChemotherapyCycleDetailsVoCollection();
			for (int i = 0; i < form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().size(); i++)
			{
				if (form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().get(i).getValue() instanceof ChemotherapyCycleDetailsVo)
					voCycleDetailsColl.add((ChemotherapyCycleDetailsVo) form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().get(i).getValue());
			}*/

			chemotherapyDetails.setCycleDetails(form.getLocalContext().getCurrentCollectionCycleAndDrugGrid()); //wdev-12819
		}
		else
		{
			

			chemotherapyDetails.setCycleDetails(form.getLocalContext().getCurrentCollectionCycleAndDrugGrid());	//wdev-12819
			//-----------
			/*ChemoCycleDetailsCCOVoCollection voCycleCCOColl = new ChemoCycleDetailsCCOVoCollection();

			//Copy in the inactive / Not Shown records.
			if (form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoActiveFilter))
			{
				for (int j = 0; chemotherapyDetails.getCCOCycleDetailsIsNotNull() && j < chemotherapyDetails.getCCOCycleDetails().size(); j++)
				{
					if (chemotherapyDetails.getCCOCycleDetails().get(j).getIsActive() == Boolean.FALSE)
						voCycleCCOColl.add(chemotherapyDetails.getCCOCycleDetails().get(j));
				}
			}
			
			//Copy in all records / or the Active and new ones that are in the grid
			for (int i = 0; i < form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size(); i++)
			{
				if (form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(i).getValue() instanceof ChemoCycleDetailsCCOVo)
					voCycleCCOColl.add((ChemoCycleDetailsCCOVo) form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(i).getValue());
			}*/

			//chemotherapyDetails.setCCOCycleDetails(voCycleCCOColl);
			chemotherapyDetails.setCCOCycleDetails(form.getLocalContext().getCurrentValueCollectionCycleDetailsTabGrid());			//wdev-12393
		}


		return chemotherapyDetails;
	}

	private void addCycle()
	{
		form.getGlobalContext().Oncology.setChemotherapyCycleDetailsVo(null);
		form.getGlobalContext().Oncology.setChemoTherapyDayDetailsVo(null);//wdev-12819
		//getSelectedFraction();
		form.getGlobalContext().Oncology.setRegimenAcronim(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());	//wdev-12819
		openChemoCycleDetailsDialog(ChemoCycleMode.ADDCYCLE);
	}

	private void addFraction()
	{
		getSelectedCycleDetailsVo();
		form.getGlobalContext().Oncology.setChemoTherapyDayDetailsVo(null);
		form.getGlobalContext().Oncology.setRegimenAcronim(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());	//wdev-12819
		openChemoCycleDetailsDialog(ChemoCycleMode.ADDFRACTION);
	}

	private void editCyle()
	{
		getSelectedCycleDetailsVo();
		getSelectedFraction();
		form.getGlobalContext().Oncology.setRegimenAcronim(null);	//wdev-12819
		openChemoCycleDetailsDialog(ChemoCycleMode.EDITCYCLE);
	}

	private void editFraction()
	{
		getSelectedCycleDetailsVo();
		getSelectedFraction();
		form.getGlobalContext().Oncology.setRegimenAcronim(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());	//wdev-12819
		openChemoCycleDetailsDialog(ChemoCycleMode.EDITFRACTION);
	}
	//wdev-12819
	private void viewDay()
	{
		getSelectedCycleDetailsVo();
		getSelectedFraction();
		openChemoCycleDetailsDialog(ChemoCycleMode.VIEWDAY);
	}
	//-----------

	private void openChemoCycleDetailsDialog(ChemoCycleMode mode)
	{
		form.getGlobalContext().Oncology.setChemoTherapyDetailRecord(form.getLocalContext().getChemotherapyDetailsVo());
		form.getGlobalContext().Oncology.setCycleDrugDetailMode(mode);
		engine.open(form.getForms().Oncology.ChemoCycleDrugDetails);
	}
	
	private void getSelectedCycleDetailsVo()
	{
		ChemotherapyCycleDetailsVo voChemoCycleDetails = null;
		DynamicGridRow row = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getSelectedRow();
		if (row != null)
		{
			if (row.getValue() instanceof ChemotherapyCycleDetailsVo)
				voChemoCycleDetails = (ChemotherapyCycleDetailsVo) row.getValue();
			else if (row.getParent() != null && row.getParent().getValue() instanceof ChemotherapyCycleDetailsVo)
				voChemoCycleDetails = (ChemotherapyCycleDetailsVo) row.getParent().getValue();
		}

		if (voChemoCycleDetails == null)
			voChemoCycleDetails = new ChemotherapyCycleDetailsVo();

		form.getGlobalContext().Oncology.setChemotherapyCycleDetailsVo(voChemoCycleDetails);
	}

	private void getSelectedFraction()
	{
		ChemoTherapyDayDetailsVo voChemoTherapyDayDetails = null;
		DynamicGridRow row = form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getSelectedRow();
		if (row != null && row.getValue() instanceof ChemoTherapyDayDetailsVo)
			voChemoTherapyDayDetails = (ChemoTherapyDayDetailsVo) row.getValue();

		if (voChemoTherapyDayDetails == null)
			voChemoTherapyDayDetails = new ChemoTherapyDayDetailsVo();

		form.getGlobalContext().Oncology.setChemoTherapyDayDetailsVo(voChemoTherapyDayDetails);
	}

	private void populateChemotherapyCyleDetails(ChemotherapyCycleDetailsVo voChemoCycleDetails, boolean bActiveOnly) //wdev-12819
	{
		if (voChemoCycleDetails == null)
			return;
		//wdev-12819
		if(voChemoCycleDetails.getIsActiveIsNotNull() && !voChemoCycleDetails.getIsActive() && bActiveOnly)
			return;
		//-----------
		
		DynamicGridRow row = getCycleDetailsNode(voChemoCycleDetails);
		row.setBackColor(Color.Beige);

		DynamicGridCell cycleCell = getCycleDetailsCell(row);
		cycleCell.setValue(getCycleDetailsText(voChemoCycleDetails));
		//wdev-12819
		DynamicGridCell statusCell = getStatusCell(row);
		if(voChemoCycleDetails.getIsActiveIsNotNull())
		{
			if(voChemoCycleDetails.getIsActive().equals(Boolean.TRUE))
				statusCell.setValue("Active");
			else
				statusCell.setValue("Inactive");
		}
		
		//-----------
		
		
		row.getRows().clear();
		voChemoCycleDetails.getDayDetails().sort();
		for (int i = 0; i < voChemoCycleDetails.getDayDetails().size(); i++)
		{
			ChemoTherapyDayDetailsVo voCTDD = voChemoCycleDetails.getDayDetails().get(i);

			for (int j = 0; voCTDD.getDosageDetailsIsNotNull() && j < voCTDD.getDosageDetails().size(); j++)
			{
				DynamicGridRow childRow = row.getRows().newRow();
				childRow.setValue(voCTDD);

				DynamicGridCell cycleDayNoCell = getDayNoCell(childRow);
				cycleDayNoCell.setValue(voCTDD.getDayNumberIsNotNull() ? voCTDD.getDayNumber().toString() : "");

				DynamicGridCell cycleDateCell = getCycleDateCell(childRow);
				cycleDateCell.setValue(voCTDD.getDayDateIsNotNull() ? voCTDD.getDayDate().toString() : "");

				ChemoDosageDetailsVo voCDD = voCTDD.getDosageDetails().get(j);
				DynamicGridCell dateDayCell = getCycleMedicationCell(childRow);
				dateDayCell.setValue(voCDD.getPatientMedicationIsNotNull() ? voCDD.getPatientMedication().getOtherMedicationText() : "");

				DynamicGridCell noOfDosesCell = getNoOfDosesCell(childRow);
				noOfDosesCell.setValue(voCDD.getNumberDosesIsNotNull() ? voCDD.getNumberDoses().toString() : null);
			}
		}

		row.setValue(voChemoCycleDetails);
		row.setExpanded(true);
	}

	private void addCCOChemotherapyCyleDetailsRow(ChemoCycleDetailsCCOVo voChemoCycleDetails, DrugTherapyType type, boolean bActiveOnly)
	{
		if (voChemoCycleDetails == null)
			return;

		if (voChemoCycleDetails.getIsActiveIsNotNull()
			&& ! voChemoCycleDetails.getIsActive()
			&& bActiveOnly)
			return;
		
		DynamicGridRow row = null;
		if (form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getSelectedRow() != null)
			row = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getSelectedRow();
		else
			row = form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().newRow();

		String strOPTooltip = "";
		if (voChemoCycleDetails.getTreatmentType()!= null && voChemoCycleDetails.getTreatmentType().equals(ChemoCycleTreatmentType.OUTPATIENT))  //wdev-12819
			strOPTooltip = createChosenOPAppointmentString(voChemoCycleDetails.getDiaryEntry(), voChemoCycleDetails.getID_ChemoCycleDetailsCCOIsNotNull() ? true : false);
		
		DynamicGridCell treatTypeCell = row.getCells().newCell(getCol(TREAT_TYPE), DynamicCellType.LABEL);	
		treatTypeCell.setValue(voChemoCycleDetails.getTreatmentTypeIsNotNull() ? voChemoCycleDetails.getTreatmentType().getText() : "");								
		treatTypeCell.setTooltip(strOPTooltip);
		
		DynamicGridCell treatDateCell = row.getCells().newCell(getCol(TREAT_DATE), DynamicCellType.LABEL);	
		treatDateCell.setValue(voChemoCycleDetails.getCycleStartDateIsNotNull() ? voChemoCycleDetails.getCycleStartDate().toString() : "");								
		treatDateCell.setTooltip(strOPTooltip);

		if (type != null && type.equals(DrugTherapyType.HIGHCOSTDRUG))
		{
			DynamicGridCell durationCell = row.getCells().newCell(getCol(TREAT_DURATION), DynamicCellType.LABEL);	
			durationCell.setValue(voChemoCycleDetails.getCycleDurationIsNotNull() ? voChemoCycleDetails.getCycleDuration().toString() : "");								
			durationCell.setTooltip(strOPTooltip);
		}
		
		DynamicGridCell treatCycleCell = row.getCells().newCell(getCol(TREAT_CYCLE), DynamicCellType.LABEL);	
		treatCycleCell.setValue(voChemoCycleDetails.getCycleNumberIsNotNull() ? voChemoCycleDetails.getCycleNumber().toString() : "");								
		treatCycleCell.setTooltip(strOPTooltip);

		if (type == null || ! type.equals(DrugTherapyType.HIGHCOSTDRUG))			//wdev-12416
		{
			DynamicGridCell treatDayCell = row.getCells().newCell(getCol(TREAT_DAY), DynamicCellType.LABEL);	
			treatDayCell.setValue(voChemoCycleDetails.getDayNumberIsNotNull() ? voChemoCycleDetails.getDayNumber().toString() : "");								
			treatDayCell.setTooltip(strOPTooltip);
		}

		

		DynamicGridCell treatPCODECell = row.getCells().newCell(getCol(TREAT_PCODE), DynamicCellType.LABEL);	
		treatPCODECell.setValue(voChemoCycleDetails.getProcurementCodeIsNotNull() ? voChemoCycleDetails.getProcurementCode().getText() : "");
		treatPCODECell.setTooltip(strOPTooltip);
		
		DynamicGridCell treatDCODECell = row.getCells().newCell(getCol(TREAT_DCODE), DynamicCellType.LABEL);	
		treatDCODECell.setValue(voChemoCycleDetails.getDayOneDeliveryCodeIsNotNull() ? voChemoCycleDetails.getDayOneDeliveryCode().getText() : (voChemoCycleDetails.getDeliveryCodeAllOtherDaysIsNotNull() ? voChemoCycleDetails.getDeliveryCodeAllOtherDays().getText() : "" ));
		if (type != null && type.equals(DrugTherapyType.HIGHCOSTDRUG))
			treatDCODECell.setValue(voChemoCycleDetails.getDeliveryCodeAllOtherDaysIsNotNull() ? voChemoCycleDetails.getDeliveryCodeAllOtherDays().getText() : "");
		
		treatDCODECell.setTooltip(strOPTooltip);

		DynamicGridCell treatSTATUSCell = row.getCells().newCell(getCol(TREAT_STATUS), DynamicCellType.LABEL);	
		treatSTATUSCell.setValue(voChemoCycleDetails.getIsActiveIsNotNull() ? (voChemoCycleDetails.getIsActive() ? "Active" : "Inactive" ) : "");								

		row.setValue(voChemoCycleDetails);
	}

	private DynamicGridColumn getCol(Integer identifier) 
	{
		return form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridCell getNoOfDosesCell(DynamicGridRow parentRow)
	{
		DynamicGridCell noOfDosesCell = parentRow.getCells().newCell(getColumnByIdentifier(NO_OF_DOSES), DynamicCellType.STRING);
		if (noOfDosesCell == null)
			noOfDosesCell = parentRow.getCells().newCell(getColumnByIdentifier(NO_OF_DOSES), DynamicCellType.STRING);
		return noOfDosesCell;
	}

	private DynamicGridCell getCycleMedicationCell(DynamicGridRow parentRow)
	{
		DynamicGridCell dateDayCell = parentRow.getCells().get(getColumnByIdentifier(CYCLE_MEDICATION));
		if (dateDayCell == null)
			dateDayCell = parentRow.getCells().newCell(getColumnByIdentifier(CYCLE_MEDICATION), DynamicCellType.STRING);
		return dateDayCell;
	}

	private DynamicGridCell getCycleDateCell(DynamicGridRow row)
	{
		DynamicGridCell cycleDateCell = row.getCells().get(getColumnByIdentifier(CYCLE_DATE));
		if (cycleDateCell == null)
			cycleDateCell = row.getCells().newCell(getColumnByIdentifier(CYCLE_DATE), DynamicCellType.STRING);
		return cycleDateCell;
	}

	private DynamicGridCell getCycleDetailsCell(DynamicGridRow row)
	{
		DynamicGridCell cycleNumberCell = row.getCells().get(getColumnByIdentifier(CYCLE_DETAILS));
		if (cycleNumberCell == null)
			cycleNumberCell = row.getCells().newCell(getColumnByIdentifier(CYCLE_DETAILS), DynamicCellType.STRING);
		return cycleNumberCell;
	}
	
	//wdev-12819
	private DynamicGridCell getStatusCell(DynamicGridRow row)
	{
		DynamicGridCell cycleNumberCell = row.getCells().get(getColumnByIdentifier(CYCLE_ACTIVE));
		if (cycleNumberCell == null)
			cycleNumberCell = row.getCells().newCell(getColumnByIdentifier(CYCLE_ACTIVE), DynamicCellType.STRING);
		return cycleNumberCell;
	}
	//----------------

	private DynamicGridCell getDayNoCell(DynamicGridRow row)
	{
		DynamicGridCell cycleDayNoCell = row.getCells().get(getColumnByIdentifier(CYCLE_DAY_NO));
		if (cycleDayNoCell == null)
			cycleDayNoCell = row.getCells().newCell(getColumnByIdentifier(CYCLE_DAY_NO), DynamicCellType.STRING);
		return cycleDayNoCell;
	}

	private Object getCycleDetailsText(ChemotherapyCycleDetailsVo voChemoCycleDetails)
	{
		if (voChemoCycleDetails != null)
		{
			StringBuilder text = new StringBuilder();
			text.append("Cycle Number: ");
			text.append(voChemoCycleDetails.getCycleNumberIsNotNull() ? voChemoCycleDetails.getCycleNumber() + ", Date: " : "");
			text.append(voChemoCycleDetails.getCycleStartDateIsNotNull() ? voChemoCycleDetails.getCycleStartDate() + ", Duration: " : "");
			text.append(voChemoCycleDetails.getCycleDurationIsNotNull() ? voChemoCycleDetails.getCycleDuration() : "");
			return text.toString();
		}

		return null;
	}

	private DynamicGridRow getCycleDetailsNode(ChemotherapyCycleDetailsVo voChemoCycleDetails)
	{

		for (int i = 0; i < form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().size(); i++)
		{
			if (form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().get(i).getValue().equals(voChemoCycleDetails))
			{
				return form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().get(i);
			}
		}

		return form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().newRow();
	}

	private DynamicGridColumn getColumnByIdentifier(String identifier)
	{
		return form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getColumns().getByIdentifier(identifier);
	}

	public String[] validateUIRules()
	{
		// Create a new list of arrays
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.lyrDetails().tabDetails().dtCourseStartDate().getValue() == null // Check for at least one item to be displayed
				&& form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue() == null // in the grid row
				&& form.lyrDetails().tabDetails().customControlMos().getValue() == null && form.lyrDetails().tabDetails().cmbTreatmentIntent().getValue() == null && form.lyrDetails().tabDetails().cmbTreatmentResponse().getValue() == null)
		{
			listOfErrors.add("At least 1 of the grid items (Start Date, Regime, Consultant, Intent or Response) must be entered");
		}
		
		if(form.lyrDetails().tabDetails().dtCourseStartDate().getValue() != null && form.lyrDetails().tabDetails().dteCourseEndDate().getValue() != null && form.lyrDetails().tabDetails().dtCourseStartDate().getValue().isGreaterThan(form.lyrDetails().tabDetails().dteCourseEndDate().getValue()))
		{
			listOfErrors.add("Course Start Date can not be greater than Course End Date.");
		}

		// Check to see if any errors were found
		int errorCount = listOfErrors.size();

		if (errorCount == 0)
			return null;

		// Transform the error list into an array
		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = listOfErrors.get(i);
		}

		// Return the array of errors
		return errors;
	}

	@Override
	protected void onDyngrdCCOCyclesDaysRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		populateCCOCycleControls(row.getValue());
		form.getLocalContext().setSelectedCCOChemoCycleDetails((ChemoCycleDetailsCCOVo) row.getValue());
		updateContextMenuState();
	}

	private void populateCCOCycleControls(Object value) 
	{
		clearCCOControls();
		if (value instanceof ChemoCycleDetailsCCOVo)
		{
			ChemoCycleDetailsCCOVo voChemoCycleDetails = (ChemoCycleDetailsCCOVo)value;

			form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getTreatmentType():null);	//wdev-13106
			form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getCycleStartDate():null);	//wdev-13106
			form.lyrDetails().tabCycleAndDrugCCO().intCycle().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getCycleNumber():null);			//wdev-13106	
			//wdev-12819
			form.lyrDetails().tabCycleAndDrugCCO().intWeightStartCycle().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getWeight():null);		//wdev-13106	
			form.lyrDetails().tabCycleAndDrugCCO().cmbPerformanceStatusAtSTartCycle().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getPerformanceStatus():null);	//wdev-13106
			//----------
			
			//if (form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))
			if(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null && form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue().equals(DrugTherapyType.HIGHCOSTDRUG))  //wdev-12393
			{
				form.lyrDetails().tabCycleAndDrugCCO().intDuration().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getCycleDuration():null);	//wdev-13106	
				form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.TRUE);
				form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.FALSE);
				form.lyrDetails().tabCycleAndDrugCCO().intDay().setValue(null);
			}
			else
			{
				form.lyrDetails().tabCycleAndDrugCCO().intDay().setValue(voChemoCycleDetails != null ? voChemoCycleDetails.getDayNumber():null);			//wdev-13106
				form.lyrDetails().tabCycleAndDrugCCO().intDuration().setVisible(Boolean.FALSE);
				form.lyrDetails().tabCycleAndDrugCCO().intDay().setVisible(Boolean.TRUE);
				form.lyrDetails().tabCycleAndDrugCCO().intDuration().setValue(null);
			}
			
			form.lyrDetails().tabCycleAndDrugCCO().Group1().setValue(voChemoCycleDetails != null && voChemoCycleDetails.getIsActiveIsNotNull() ? (voChemoCycleDetails.getIsActive() ? Group1Enumeration.rdoActive : Group1Enumeration.rdoInactive) : Group1Enumeration.None); //wdev-13106

			form.lyrDetails().tabCycleAndDrugCCO().lblOPAppt().setVisible(false);
			form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setVisible(false);

			if (voChemoCycleDetails != null && voChemoCycleDetails.getTreatmentTypeIsNotNull() && voChemoCycleDetails.getTreatmentType().equals(ChemoCycleTreatmentType.OUTPATIENT)) //wdev-13106 
			{
				form.lyrDetails().tabCycleAndDrugCCO().lblOPAppt().setVisible(true);
				form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setVisible(true);
				form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setValue(createChosenOPAppointmentString(voChemoCycleDetails.getDiaryEntry(),voChemoCycleDetails.getID_ChemoCycleDetailsCCOIsNotNull() ? true : false));
			}
		}
	}

	private void clearCCOControls() 
	{
		form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().intCycle().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().intDuration().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().intDay().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().Group1().setValue(Group1Enumeration.None);
		
		form.lyrDetails().tabCycleAndDrugCCO().lblOPAppt().setVisible(false);
		form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setVisible(false);
		//wdev-12819
		form.lyrDetails().tabCycleAndDrugCCO().intWeightStartCycle().setValue(null);
		form.lyrDetails().tabCycleAndDrugCCO().cmbPerformanceStatusAtSTartCycle().setValue(null);
		//-----------
		
		form.getGlobalContext().Oncology.setChosenCCOOPAppointment(null);
	}

	@Override
	protected void onBtnSaveCycleClick() throws PresentationLogicException 
	{
		//WDEV-16917
		String[] errorsUI = getUIErrors();
		if (errorsUI != null && errorsUI.length > 0)
		{
			engine.showErrors(errorsUI);
			return ;
		}
		
		for (int i = 0 ; i < form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size() ; i ++)
		{
			if (form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(i).getValue() != null
				&& form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(i).getValue() instanceof ChemoCycleDetailsCCOVo)
			{
				ChemoCycleDetailsCCOVo voCCO = ((ChemoCycleDetailsCCOVo)form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(i).getValue());
				if(Boolean.TRUE.equals(form.getLocalContext().getAddEditMode()) && voCCO != null && form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getSelectedRow() != null && voCCO.equals((ChemoCycleDetailsCCOVo)form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getSelectedRow().getValue()))		//wdev-12416
					continue;
				if (voCCO.getCycleNumberIsNotNull()
					&& form.lyrDetails().tabCycleAndDrugCCO().intCycle().getValue() != null
					&& voCCO.getCycleNumber().equals(form.lyrDetails().tabCycleAndDrugCCO().intCycle().getValue())
					&& voCCO.getDayNumberIsNotNull()
					&& voCCO.getIsActiveIsNotNull()
					&& voCCO.getIsActive()
					&& form.lyrDetails().tabCycleAndDrugCCO().Group1().getValue().equals(Group1Enumeration.rdoActive)
					&& form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() != null
					&& voCCO.getDayNumber().equals(form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue())
					&& ! DrugTherapyType.HIGHCOSTDRUG.equals(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue()))
					//&& form.grdChemotherapy().getValue() != null && ! form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))
				{
					engine.showMessage("This 'Cycle/Day' combination has already been used.", "Error", MessageButtons.OK, MessageIcon.WARNING);
					return;
				}
			}
		}
		
		ChemoCycleDetailsCCOVo voCycle = populateCCOChemotherapyVo((ChemoCycleDetailsCCOVo) form.getLocalContext().getSelectedCCOChemoCycleDetails().clone());
		
		String[] errors = voCycle.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		//wdev-12393
		voCycle = populateCCOChemotherapyVo((ChemoCycleDetailsCCOVo) form.getLocalContext().getSelectedCCOChemoCycleDetails());					//wdev-12416
		ChemoCycleDetailsCCOVoCollection voCycleCollectionVo = form.getLocalContext().getCurrentValueCollectionCycleDetailsTabGrid();
		if( voCycleCollectionVo == null)
			voCycleCollectionVo = new ChemoCycleDetailsCCOVoCollection();
		
			
		
		voCycleCollectionVo.add(voCycle);
		form.getLocalContext().setCurrentValueCollectionCycleDetailsTabGrid(voCycleCollectionVo);
		
		
		
		//--------
		//addCCOChemotherapyCyleDetailsRow(populateCCOChemotherapyVo(), form.grdChemotherapy().getValue() != null ? form.grdChemotherapy().getValue().getDrugTherapyType() : null, form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoActiveFilter));
		//wdev-12393
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().clear();
		voCycleCollectionVo = form.getLocalContext().getCurrentValueCollectionCycleDetailsTabGrid();
		if(voCycleCollectionVo != null)
			voCycleCollectionVo.sort(SortOrder.ASCENDING);
		
		for (int j = 0; voCycleCollectionVo != null && j < voCycleCollectionVo.size(); j++)
		{
			addCCOChemotherapyCyleDetailsRow(voCycleCollectionVo.get(j), form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue(), form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoActiveFilter));
		}
		if(voCycle != null && voCycleCollectionVo.contains(voCycle))
			form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().setValue(voCycle);
		
		if(form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue() == null)		//wdev-12819
			clearCCOControls();
		//---------------
		
		enableDisableCCOControls(FormMode.VIEW);
		showHideSaveAndCancelButtons(FormMode.EDIT);//This will SHOW the controls.
		
		updateContextMenuState();

	}

	//WDEV-16917
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue()==null)
		{
			errors.add("'Treatment Context' is mandatory!");
						
		}
		
		if (form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().getValue()==null)
		{
			errors.add("'Date' is mandatory!");
						
		}
		if (form.lyrDetails().tabCycleAndDrugCCO().intCycle().getValue()==null)
		{
			errors.add("'Cycle Number' is mandatory!");
						
		}
		
		if (!form.lyrDetails().tabCycleAndDrugCCO().Group1().getValue().equals(Group1Enumeration.rdoActive) && !form.lyrDetails().tabCycleAndDrugCCO().Group1().getValue().equals(Group1Enumeration.rdoInactive))
		{
			errors.add("'Status' is mandatory!");
						
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private ChemoCycleDetailsCCOVo populateCCOChemotherapyVo(ChemoCycleDetailsCCOVo voCCOCycle)				//wdev-12416
	{
		//ChemoCycleDetailsCCOVo voCCOCycle = (ChemoCycleDetailsCCOVo) form.getLocalContext().getSelectedCCOChemoCycleDetails().clone();
		if(voCCOCycle == null)		//wdev-12416
			return null;

		voCCOCycle.setTreatmentType(form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue());
		voCCOCycle.setCycleStartDate(form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().getValue());
		if (form.getGlobalContext().Oncology.getChosenCCOOPAppointmentIsNotNull())
			voCCOCycle.setDiaryEntry(form.getGlobalContext().Oncology.getChosenCCOOPAppointment());
		
		voCCOCycle.setCycleNumber(form.lyrDetails().tabCycleAndDrugCCO().intCycle().getValue());
		voCCOCycle.setDayNumber(form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue());
		voCCOCycle.setCycleDuration(form.lyrDetails().tabCycleAndDrugCCO().intDuration().getValue());
		voCCOCycle.setIsActive(form.lyrDetails().tabCycleAndDrugCCO().Group1().getValue().equals(Group1Enumeration.rdoActive) ? true : false);
		voCCOCycle.setWeight(form.lyrDetails().tabCycleAndDrugCCO().intWeightStartCycle().getValue()); //wdev-12819
		voCCOCycle.setPerformanceStatus(form.lyrDetails().tabCycleAndDrugCCO().cmbPerformanceStatusAtSTartCycle().getValue()); //wdev-12819

		if (form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue() != null
			&& form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue().equals(ChemoCycleTreatmentType.OUTPATIENT)
			&& form.getGlobalContext().Oncology.getChosenCCOOPAppointmentIsNotNull())
			voCCOCycle.setDiaryEntry(form.getGlobalContext().Oncology.getChosenCCOOPAppointment());
		
		if (form.lyrDetails().tabDetails().cmbRegimeAcronym() != null)
		{
			ChemoRegimensConfigVo voConfig = domain.getChemoRegimeConfig(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());
			if (voConfig != null)
			{
				voCCOCycle.setRegimen(voConfig.getRegimen());
				voCCOCycle.setProcurementCode(form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() != null &&  form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() == 1 ?voConfig.getProcurementCode() : null);
				voCCOCycle.setDayOneDeliveryCode(form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() != null &&  form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() == 1 ? voConfig.getDayOneDeliveryCode() : null);
				voCCOCycle.setDeliveryCodeAllOtherDays(form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() != null && form.lyrDetails().tabCycleAndDrugCCO().intDay().getValue() != 1 ? voConfig.getDeliveryCodeAllOtherDays() : null);
				
				//if (form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))
				if(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null && form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue().equals(DrugTherapyType.HIGHCOSTDRUG))  //wdev-13106	
				{
					voCCOCycle.setDayOneDeliveryCode(null);
					voCCOCycle.setDeliveryCodeAllOtherDays(voConfig.getDeliveryCodeAllOtherDays());
					voCCOCycle.setProcurementCode(voConfig.getProcurementCode());
				}
			}
		}
		
		return voCCOCycle;
	}
	//wdev-13106
	
	protected void upDateRegimenCodes()
	{
		ChemoCycleDetailsCCOVoCollection voCycleCollectionVo = form.getLocalContext().getCurrentValueCollectionCycleDetailsTabGrid();
		if( voCycleCollectionVo == null)
			return;
		if (form.lyrDetails().tabDetails().cmbRegimeAcronym() != null)
		{
			for(int i = 0;i < voCycleCollectionVo.size();i++ )
			{
				ChemoRegimensConfigVo voConfig = domain.getChemoRegimeConfig(form.lyrDetails().tabDetails().cmbRegimeAcronym().getValue());
				ChemoCycleDetailsCCOVo voCCOCycle = voCycleCollectionVo.get(i);
				if(voCCOCycle == null)
					continue;
				if (voConfig != null)
				{
					
					voCCOCycle.setProcurementCode(null);
					voCCOCycle.setDayOneDeliveryCode(null);
					voCCOCycle.setDeliveryCodeAllOtherDays(null);
					
					
					voCCOCycle.setRegimen(voConfig.getRegimen());
					voCCOCycle.setProcurementCode(voCCOCycle.getDayNumber() != null &&  voCCOCycle.getDayNumber() == 1 ? voConfig.getProcurementCode() : null);
					voCCOCycle.setDayOneDeliveryCode(voCCOCycle.getDayNumber() != null &&  voCCOCycle.getDayNumber() == 1 ? voConfig.getDayOneDeliveryCode() : null);
					voCCOCycle.setDeliveryCodeAllOtherDays(voCCOCycle.getDayNumber() != null && voCCOCycle.getDayNumber() != 1 ? voConfig.getDeliveryCodeAllOtherDays() : null);
					
					//if (form.grdChemotherapy().getValue() != null && form.grdChemotherapy().getValue().getDrugTherapyType().equals(DrugTherapyType.HIGHCOSTDRUG))
					if(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null && form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue().equals(DrugTherapyType.HIGHCOSTDRUG))  	
					{
						voCCOCycle.setDayOneDeliveryCode(null);
						voCCOCycle.setDeliveryCodeAllOtherDays(voConfig.getDeliveryCodeAllOtherDays());
						voCCOCycle.setProcurementCode(voConfig.getProcurementCode());
					}
				}
			}
		}

	}
	
	//----------
	
	@Override
	protected void onBtnCancelCycleClick() throws PresentationLogicException 
	{
		if (form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size() > 0
			&& form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size() - 1).getValue() == null)
			form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().remove(form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().get(form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().size() - 1));
		
		clearCCOControls();
		form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().setSelectedRow(null);
		enableDisableCCOControls(FormMode.VIEW);
		showHideSaveAndCancelButtons(FormMode.EDIT);//This will SHOW the controls.
		updateContextMenuState();
	}

	@Override
	protected void onCmbTreatmentTypeValueChanged() throws PresentationLogicException 
	{
		if (form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue() != null && form.lyrDetails().tabCycleAndDrugCCO().cmbTreatmentType().getValue().equals(ChemoCycleTreatmentType.OUTPATIENT))
		{
			form.getGlobalContext().Oncology.setChosenCCOOPAppointment(null);
			engine.open(form.getForms().Oncology.PatientsOutpatientAppointments);
			form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setEnabled(false);
			form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setValue(null);			//wdev-12416
		}
		else
		{
			form.lyrDetails().tabCycleAndDrugCCO().lblOPAppt().setVisible(false);
			form.lyrDetails().tabCycleAndDrugCCO().lblOPDetails().setVisible(false);
			form.lyrDetails().tabCycleAndDrugCCO().dteTreatmentDate().setEnabled(true);
		}
	}

	
	protected void onRadioButtonGroupStatusValueChanged() throws PresentationLogicException 
	{
		fillCCOGrid(form.getLocalContext().getChemotherapyDetailsVo());
	}

	
	//wdev-12819
	protected void onRadioButtonGroupFilterStatusValueChanged()	throws PresentationLogicException 
	{
		ChemotherapyDetailsVo voChemotherapyDetails = domain.getChemotherapyDetailsVo(form.getLocalContext().getChemotherapyDetailsVo());
		
		//WDEV-16069		
		if (form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows() != null)
			form.lyrDetails().tabCycleAndDrug().dyngrdCyclesDays().getRows().clear();
		

		if (voChemotherapyDetails != null && voChemotherapyDetails.getCycleDetailsIsNotNull())
		{
			voChemotherapyDetails.getCycleDetails().sort();
			for (int j = 0; voChemotherapyDetails != null && voChemotherapyDetails.getCycleDetailsIsNotNull() && j < voChemotherapyDetails.getCycleDetails().size(); j++)
			{
				
				populateChemotherapyCyleDetails(voChemotherapyDetails.getCycleDetails().get(j),form.lyrDetails().tabCycleAndDrug().GroupFilterStatus().getValue().equals(GroupFilterStatusEnumeration.rdoStatusActive));
			}
		}
		//WDEV-16069
	}
	//wdev-12819
	public class StartDateComparator implements Comparator
	{
		private int direction = 1;
		
		public StartDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public StartDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof ChemotherapyDetailsShortVo )
			{
				ChemotherapyDetailsShortVo ps1 = (ChemotherapyDetailsShortVo)ob1;
				date1 = ps1.getStartDate();
			}
			if(ob2 instanceof ChemotherapyDetailsShortVo)
			{
				ChemotherapyDetailsShortVo ps2 = (ChemotherapyDetailsShortVo)ob2;
				date2 = ps2.getStartDate();
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//
	//wdev-12819
	protected void onlyrDetailsTabChanged(LayerBridge tab) 
	{
		if(form.lyrDetails().tabCycleAndDrugCCO().isVisible())
		{
			//if(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue() != null)
		//	{
				initializeCCODynamicGrid(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue());
				showHideDayDurationControls(form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue());
				if(form.lyrDetails().tabCycleAndDrugCCO().btnSaveCycle().isVisible())		//wdev-13106
					enableDisableCCOControls(FormMode.EDIT);
				else
					enableDisableCCOControls(FormMode.VIEW);
				//wdev-12393
				ChemoCycleDetailsCCOVo voCycle = (ChemoCycleDetailsCCOVo) form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue(); //wdev-12819
				form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getRows().clear();
				
				ChemoCycleDetailsCCOVoCollection voCycleCollectionVo = form.getLocalContext().getCurrentValueCollectionCycleDetailsTabGrid();
				if(voCycleCollectionVo !=  null)
					voCycleCollectionVo.sort(SortOrder.ASCENDING);
				for (int j = 0; voCycleCollectionVo != null && j < voCycleCollectionVo.size(); j++)
				{
					addCCOChemotherapyCyleDetailsRow(voCycleCollectionVo.get(j), form.lyrDetails().tabDetails().cmbDrugTherapyType().getValue(), form.lyrDetails().tabCycleAndDrugCCO().GroupStatus().getValue().equals(GroupStatusEnumeration.rdoActiveFilter));
				}
				if(voCycle != null && voCycleCollectionVo.contains(voCycle))	//wdev-12819
					form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().setValue(voCycle);
				
				updateContextMenuState();
				//---------------
		//	}
			if(!form.lyrDetails().tabCycleAndDrugCCO().btnSaveCycle().isVisible() && form.lyrDetails().tabCycleAndDrugCCO().dyngrdCCOCyclesDays().getValue() == null)		//wdev-12819
				clearCCOControls();
		}
		
	}

	@Override
	protected void onDte1ValueChanged() throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}

	//wdev-13106
	protected void onCmbRegimeAcronymValueChanged() throws PresentationLogicException 
	{
		upDateRegimenCodes();
		
	}
	
}
