//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.chemotherapydetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.TreatmentHospital value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.TreatmentHospital getValue()
				{
					return (ims.oncology.vo.lookups.TreatmentHospital)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.TreatmentHospital value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRegimenOutcomeSummaryComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.RegimenOutcomeSummary value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenOutcomeSummary value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenOutcomeSummary value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenOutcomeSummary value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.RegimenOutcomeSummary value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.RegimenOutcomeSummary getValue()
				{
					return (ims.oncology.vo.lookups.RegimenOutcomeSummary)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.RegimenOutcomeSummary value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDelay2ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value)
				{
					return super.control.removeRow(value);
				}
				public ims.medicaloncology.vo.lookups.SurgeryReasonForDelay getValue()
				{
					return (ims.medicaloncology.vo.lookups.SurgeryReasonForDelay)super.control.getValue();
				}
				public void setValue(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDelay1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value)
				{
					return super.control.removeRow(value);
				}
				public ims.medicaloncology.vo.lookups.SurgeryReasonForDelay getValue()
				{
					return (ims.medicaloncology.vo.lookups.SurgeryReasonForDelay)super.control.getValue();
				}
				public void setValue(ims.medicaloncology.vo.lookups.SurgeryReasonForDelay value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPrefornmanceStatComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.medicaloncology.vo.lookups.PerformanceStatus getValue()
				{
					return (ims.medicaloncology.vo.lookups.PerformanceStatus)super.control.getValue();
				}
				public void setValue(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatmentIntentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.CancerTreatmentIntent value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.CancerTreatmentIntent getValue()
				{
					return (ims.oncology.vo.lookups.CancerTreatmentIntent)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.CancerTreatmentIntent value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRegimeAcronymComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.RegimenAcronym value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.RegimenAcronym getValue()
				{
					return (ims.oncology.vo.lookups.RegimenAcronym)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.RegimenAcronym value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatmentResponseComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.DrugProgramResponse value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.DrugProgramResponse value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.DrugProgramResponse value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.DrugProgramResponse value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.DrugProgramResponse value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.DrugProgramResponse getValue()
				{
					return (ims.oncology.vo.lookups.DrugProgramResponse)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.DrugProgramResponse value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReasonForChangingComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ChemoTxChangeReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoTxChangeReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoTxChangeReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoTxChangeReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ChemoTxChangeReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ChemoTxChangeReason getValue()
				{
					return (ims.oncology.vo.lookups.ChemoTxChangeReason)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ChemoTxChangeReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDrugTherapyTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.DrugTherapyType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.DrugTherapyType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.DrugTherapyType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.DrugTherapyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.DrugTherapyType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.DrugTherapyType getValue()
				{
					return (ims.oncology.vo.lookups.DrugTherapyType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.DrugTherapyType value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupStoppedEarlyRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 584, 344, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Yes", startTabIndex.intValue() + 2036);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 632, 344, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "No", startTabIndex.intValue() + 2037);
				}
				public void setText(GroupStoppedEarlyEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupStoppedEarlyEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupStoppedEarlyEnumeration.None;
						case 0: return GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyYes;
						case 1: return GroupStoppedEarlyEnumeration.rdoRMStoopedEarlyNo;
					}
					return null;
				}
				public void setValue(GroupStoppedEarlyEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupStoppedEarlyEnumeration.None.id);
				}
				public boolean isEnabled(GroupStoppedEarlyEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupStoppedEarlyEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupStoppedEarlyEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupStoppedEarlyEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupStoppedEarlyEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupStoppedEarlyEnumeration None = new GroupStoppedEarlyEnumeration(-1);
				public static GroupStoppedEarlyEnumeration rdoRMStoopedEarlyYes = new GroupStoppedEarlyEnumeration(0);
				public static GroupStoppedEarlyEnumeration rdoRMStoopedEarlyNo = new GroupStoppedEarlyEnumeration(1);
				private GroupStoppedEarlyEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupStoppedEarlyEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupClinicalTrialRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 712, 226, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "No", startTabIndex.intValue() + 2028);
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 672, 226, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Yes", startTabIndex.intValue() + 2027);
				}
				public void setText(GroupClinicalTrialEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupClinicalTrialEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupClinicalTrialEnumeration.None;
						case 0: return GroupClinicalTrialEnumeration.rdoClinicalTrialNo;
						case 1: return GroupClinicalTrialEnumeration.rdoClinicalTrialYes;
					}
					return null;
				}
				public void setValue(GroupClinicalTrialEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupClinicalTrialEnumeration.None.id);
				}
				public boolean isEnabled(GroupClinicalTrialEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupClinicalTrialEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupClinicalTrialEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupClinicalTrialEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupClinicalTrialEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupClinicalTrialEnumeration None = new GroupClinicalTrialEnumeration(-1);
				public static GroupClinicalTrialEnumeration rdoClinicalTrialNo = new GroupClinicalTrialEnumeration(0);
				public static GroupClinicalTrialEnumeration rdoClinicalTrialYes = new GroupClinicalTrialEnumeration(1);
				private GroupClinicalTrialEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupClinicalTrialEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupTimeDelayRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 296, 368, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper5.getX(), anchoringHelper5.getY(), anchoringHelper5.getWidth(), "No", startTabIndex.intValue() + 2035);
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 240, 368, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "Yes", startTabIndex.intValue() + 2034);
				}
				public void setText(GroupTimeDelayEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupTimeDelayEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupTimeDelayEnumeration.None;
						case 0: return GroupTimeDelayEnumeration.rdoRMtimedelayNo;
						case 1: return GroupTimeDelayEnumeration.rdoRMtimedelayYes;
					}
					return null;
				}
				public void setValue(GroupTimeDelayEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupTimeDelayEnumeration.None.id);
				}
				public boolean isEnabled(GroupTimeDelayEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupTimeDelayEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupTimeDelayEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupTimeDelayEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupTimeDelayEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupTimeDelayEnumeration None = new GroupTimeDelayEnumeration(-1);
				public static GroupTimeDelayEnumeration rdoRMtimedelayNo = new GroupTimeDelayEnumeration(0);
				public static GroupTimeDelayEnumeration rdoRMtimedelayYes = new GroupTimeDelayEnumeration(1);
				private GroupTimeDelayEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupTimeDelayEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupDoseReductionRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 296, 344, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "No", startTabIndex.intValue() + 2033);
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 240, 344, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Yes", startTabIndex.intValue() + 2032);
				}
				public void setText(GroupDoseReductionEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupDoseReductionEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupDoseReductionEnumeration.None;
						case 0: return GroupDoseReductionEnumeration.rdoRMdosereductionNo;
						case 1: return GroupDoseReductionEnumeration.rdoRMdosereductionYes;
					}
					return null;
				}
				public void setValue(GroupDoseReductionEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupDoseReductionEnumeration.None.id);
				}
				public boolean isEnabled(GroupDoseReductionEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupDoseReductionEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupDoseReductionEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupDoseReductionEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupDoseReductionEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupDoseReductionEnumeration None = new GroupDoseReductionEnumeration(-1);
				public static GroupDoseReductionEnumeration rdoRMdosereductionNo = new GroupDoseReductionEnumeration(0);
				public static GroupDoseReductionEnumeration rdoRMdosereductionYes = new GroupDoseReductionEnumeration(1);
				private GroupDoseReductionEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupDoseReductionEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupChemoradiationRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 232, 274, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "No", startTabIndex.intValue() + 2017);
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 176, 274, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Yes", startTabIndex.intValue() + 2016);
				}
				public void setText(GroupChemoradiationEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupChemoradiationEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupChemoradiationEnumeration.None;
						case 0: return GroupChemoradiationEnumeration.rdoChemoradiationNo;
						case 1: return GroupChemoradiationEnumeration.rdoChemoradiationYes;
					}
					return null;
				}
				public void setValue(GroupChemoradiationEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupChemoradiationEnumeration.None.id);
				}
				public boolean isEnabled(GroupChemoradiationEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupChemoradiationEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupChemoradiationEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupChemoradiationEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupChemoradiationEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupChemoradiationEnumeration None = new GroupChemoradiationEnumeration(-1);
				public static GroupChemoradiationEnumeration rdoChemoradiationNo = new GroupChemoradiationEnumeration(0);
				public static GroupChemoradiationEnumeration rdoChemoradiationYes = new GroupChemoradiationEnumeration(1);
				private GroupChemoradiationEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupChemoradiationEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupCoMorbidityRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 712, 202, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "No", startTabIndex.intValue() + 2026);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 672, 202, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Yes", startTabIndex.intValue() + 2025);
				}
				public void setText(GroupCoMorbidityEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupCoMorbidityEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupCoMorbidityEnumeration.None;
						case 0: return GroupCoMorbidityEnumeration.rdoCoMorbidityNo;
						case 1: return GroupCoMorbidityEnumeration.rdoCoMorbidityYes;
					}
					return null;
				}
				public void setValue(GroupCoMorbidityEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupCoMorbidityEnumeration.None.id);
				}
				public boolean isEnabled(GroupCoMorbidityEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupCoMorbidityEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupCoMorbidityEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupCoMorbidityEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupCoMorbidityEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupCoMorbidityEnumeration None = new GroupCoMorbidityEnumeration(-1);
				public static GroupCoMorbidityEnumeration rdoCoMorbidityNo = new GroupCoMorbidityEnumeration(0);
				public static GroupCoMorbidityEnumeration rdoCoMorbidityYes = new GroupCoMorbidityEnumeration(1);
				private GroupCoMorbidityEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupCoMorbidityEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 176, 80, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccPrescribingHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper13.getSize(), instance1, startTabIndex.intValue() + 1007, skipContextValidation);
				//ims.framework.Control m_ccPrescribingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(176), new Integer(80), new Integer(208), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1007), m_ccPrescribingHCPForm, instance1 } );
				ims.framework.Control m_ccPrescribingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1007), m_ccPrescribingHCPForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPrescribingHCPControl);
				Menu[] menus1 = m_ccPrescribingHCPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 176, 56, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlMosForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper14.getSize(), instance2, startTabIndex.intValue() + 6, skipContextValidation);
				//ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(176), new Integer(56), new Integer(208), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6), m_customControlMosForm, instance2 } );
				ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6), m_customControlMosForm, instance2, Boolean.TRUE } );
				super.addControl(m_customControlMosControl);
				Menu[] menus2 = m_customControlMosForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 321, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Outcome", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 106, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prescribing Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Prescribing HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 368, 368, 168, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen outcome summary:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 512, 360, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 368, 344, 215, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen modification-stopped early:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 440, 130, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of Cycles Planned:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 440, 106, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Course End Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 440, 226, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinical Trial:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 368, 198, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen modification-time delay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 222, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen modification-dose reduction:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Chemo-radiation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 440, 202, 151, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Co-morbidity adjustment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 232, 10, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen No.:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Programme No.:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 440, 298, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason Delay 2:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 440, 274, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason Delay 1:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 672, 154, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<NUMBER>", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 226, 165, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performance Status at DTT: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 440, 154, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Actual No. of Cycles:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 130, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Height:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 248, 130, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "cm.", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 154, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Weight:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 248, 154, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "kg.", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 178, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre Tx Surface Area:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 248, 202, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mmol / L.", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 202, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre Tx Creatinine:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 440, 34, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen Acronym:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 440, 82, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Course Start Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 440, 248, 232, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Changing Planned Treatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 440, 178, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Response:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 298, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Intent:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 440, 10, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Drug Treatment Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 250, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Decision to Treat: ", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 176, 104, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 672, 104, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 2022), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 672, 80, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 2021), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 176, 248, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 176, 32, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 584, 366, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbRegimenOutcomeSummaryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 2038), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRegimenOutcomeSummaryTemp);
				cmbRegimenOutcomeSummaryComboBox cmbRegimenOutcomeSummary = (cmbRegimenOutcomeSummaryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRegimenOutcomeSummaryComboBox.class, m_cmbRegimenOutcomeSummaryTemp);
				super.addComboBox(cmbRegimenOutcomeSummary);
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 672, 296, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDelay2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 2031), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDelay2Temp);
				cmbDelay2ComboBox cmbDelay2 = (cmbDelay2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDelay2ComboBox.class, m_cmbDelay2Temp);
				super.addComboBox(cmbDelay2);
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 672, 272, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDelay1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 2030), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDelay1Temp);
				cmbDelay1ComboBox cmbDelay1 = (cmbDelay1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDelay1ComboBox.class, m_cmbDelay1Temp);
				super.addComboBox(cmbDelay1);
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 176, 224, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPrefornmanceStatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPrefornmanceStatTemp);
				cmbPrefornmanceStatComboBox cmbPrefornmanceStat = (cmbPrefornmanceStatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPrefornmanceStatComboBox.class, m_cmbPrefornmanceStatTemp);
				super.addComboBox(cmbPrefornmanceStat);
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 176, 296, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTreatmentIntentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 2018), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTreatmentIntentTemp);
				cmbTreatmentIntentComboBox cmbTreatmentIntent = (cmbTreatmentIntentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentIntentComboBox.class, m_cmbTreatmentIntentTemp);
				super.addComboBox(cmbTreatmentIntent);
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 440, 56, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbRegimeAcronymTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbRegimeAcronymTemp);
				cmbRegimeAcronymComboBox cmbRegimeAcronym = (cmbRegimeAcronymComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRegimeAcronymComboBox.class, m_cmbRegimeAcronymTemp);
				super.addComboBox(cmbRegimeAcronym);
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 672, 176, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTreatmentResponseTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 2024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTreatmentResponseTemp);
				cmbTreatmentResponseComboBox cmbTreatmentResponse = (cmbTreatmentResponseComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentResponseComboBox.class, m_cmbTreatmentResponseTemp);
				super.addComboBox(cmbTreatmentResponse);
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 672, 248, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbReasonForChangingTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 2029), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReasonForChangingTemp);
				cmbReasonForChangingComboBox cmbReasonForChanging = (cmbReasonForChangingComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonForChangingComboBox.class, m_cmbReasonForChangingTemp);
				super.addComboBox(cmbReasonForChanging);
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 672, 8, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDrugTherapyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDrugTherapyTypeTemp);
				cmbDrugTherapyTypeComboBox cmbDrugTherapyType = (cmbDrugTherapyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDrugTherapyTypeComboBox.class, m_cmbDrugTherapyTypeTemp);
				super.addComboBox(cmbDrugTherapyType);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 672, 128, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 2023), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 320, 8, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 176, 8, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 176, 200, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 176, 128, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 2010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(6), new Integer(2), "The decimal value is invalid. A valid value can have up to 4 digits and up to 2 decimals.", null, Boolean.FALSE}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 176, 152, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(6), new Integer(2), "The decimal value is invalid. A valid value can have up to 4 digits and up to 2 decimals.", null, Boolean.FALSE}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 176, 176, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 2012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
		
				// RadioButton Controls
				RadioButton tmpGroupStoppedEarly = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupStoppedEarly);
				GroupStoppedEarlyRadioButton GroupStoppedEarly = (GroupStoppedEarlyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupStoppedEarlyRadioButton.class, tmpGroupStoppedEarly);
				GroupStoppedEarly.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupStoppedEarly);
				RadioButton tmpGroupClinicalTrial = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupClinicalTrial);
				GroupClinicalTrialRadioButton GroupClinicalTrial = (GroupClinicalTrialRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupClinicalTrialRadioButton.class, tmpGroupClinicalTrial);
				GroupClinicalTrial.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupClinicalTrial);
				RadioButton tmpGroupTimeDelay = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupTimeDelay);
				GroupTimeDelayRadioButton GroupTimeDelay = (GroupTimeDelayRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTimeDelayRadioButton.class, tmpGroupTimeDelay);
				GroupTimeDelay.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupTimeDelay);
				RadioButton tmpGroupDoseReduction = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupDoseReduction);
				GroupDoseReductionRadioButton GroupDoseReduction = (GroupDoseReductionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupDoseReductionRadioButton.class, tmpGroupDoseReduction);
				GroupDoseReduction.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupDoseReduction);
				RadioButton tmpGroupChemoradiation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupChemoradiation);
				GroupChemoradiationRadioButton GroupChemoradiation = (GroupChemoradiationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupChemoradiationRadioButton.class, tmpGroupChemoradiation);
				GroupChemoradiation.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupChemoradiation);
				RadioButton tmpGroupCoMorbidity = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupCoMorbidity);
				GroupCoMorbidityRadioButton GroupCoMorbidity = (GroupCoMorbidityRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupCoMorbidityRadioButton.class, tmpGroupCoMorbidity);
				GroupCoMorbidity.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupCoMorbidity);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 8, 334, 784, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			}

			public ims.core.forms.mosquery.IComponent ccPrescribingHCP()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPrescribingHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPrescribingHCPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPrescribingHCPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPrescribingHCPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPrescribingHCPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent customControlMos()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlMosValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlMosVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlMosEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlMosEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblCourseenddate()
			{
				return (Label)super.getControl(9);
			}
			public Label lblLABELDelay2()
			{
				return (Label)super.getControl(17);
			}
			public Label lblLABELDelay1()
			{
				return (Label)super.getControl(18);
			}
			public Label lblNumberOfCycles()
			{
				return (Label)super.getControl(19);
			}
			public Label lblLABELPerf2()
			{
				return (Label)super.getControl(20);
			}
			public Label lblLABELNumCylces()
			{
				return (Label)super.getControl(21);
			}
			public DateControl dtePrescribing()
			{
				return (DateControl)super.getControl(38);
			}
			public DateControl dteCourseEndDate()
			{
				return (DateControl)super.getControl(39);
			}
			public DateControl dtCourseStartDate()
			{
				return (DateControl)super.getControl(40);
			}
			public DateControl dteDecisionToTreat()
			{
				return (DateControl)super.getControl(41);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(0);
			}
			public cmbRegimenOutcomeSummaryComboBox cmbRegimenOutcomeSummary()
			{
				return (cmbRegimenOutcomeSummaryComboBox)super.getComboBox(1);
			}
			public cmbDelay2ComboBox cmbDelay2()
			{
				return (cmbDelay2ComboBox)super.getComboBox(2);
			}
			public cmbDelay1ComboBox cmbDelay1()
			{
				return (cmbDelay1ComboBox)super.getComboBox(3);
			}
			public cmbPrefornmanceStatComboBox cmbPrefornmanceStat()
			{
				return (cmbPrefornmanceStatComboBox)super.getComboBox(4);
			}
			public cmbTreatmentIntentComboBox cmbTreatmentIntent()
			{
				return (cmbTreatmentIntentComboBox)super.getComboBox(5);
			}
			public cmbRegimeAcronymComboBox cmbRegimeAcronym()
			{
				return (cmbRegimeAcronymComboBox)super.getComboBox(6);
			}
			public cmbTreatmentResponseComboBox cmbTreatmentResponse()
			{
				return (cmbTreatmentResponseComboBox)super.getComboBox(7);
			}
			public cmbReasonForChangingComboBox cmbReasonForChanging()
			{
				return (cmbReasonForChangingComboBox)super.getComboBox(8);
			}
			public cmbDrugTherapyTypeComboBox cmbDrugTherapyType()
			{
				return (cmbDrugTherapyTypeComboBox)super.getComboBox(9);
			}
			public IntBox intNrOfCyclesPlaned()
			{
				return (IntBox)super.getControl(52);
			}
			public IntBox intRegimenNr()
			{
				return (IntBox)super.getControl(53);
			}
			public IntBox intProgrameNr()
			{
				return (IntBox)super.getControl(54);
			}
			public DecimalBox decPreTxCretinine()
			{
				return (DecimalBox)super.getControl(55);
			}
			public DecimalBox decimalHeightCm()
			{
				return (DecimalBox)super.getControl(56);
			}
			public DecimalBox decimalWeightCm()
			{
				return (DecimalBox)super.getControl(57);
			}
			public DecimalBox decPreTxSurfaceArea()
			{
				return (DecimalBox)super.getControl(58);
			}
			public GroupStoppedEarlyRadioButton GroupStoppedEarly()
			{
				return (GroupStoppedEarlyRadioButton)super.getRadioButton(0);
			}
			public GroupClinicalTrialRadioButton GroupClinicalTrial()
			{
				return (GroupClinicalTrialRadioButton)super.getRadioButton(1);
			}
			public GroupTimeDelayRadioButton GroupTimeDelay()
			{
				return (GroupTimeDelayRadioButton)super.getRadioButton(2);
			}
			public GroupDoseReductionRadioButton GroupDoseReduction()
			{
				return (GroupDoseReductionRadioButton)super.getRadioButton(3);
			}
			public GroupChemoradiationRadioButton GroupChemoradiation()
			{
				return (GroupChemoradiationRadioButton)super.getRadioButton(4);
			}
			public GroupCoMorbidityRadioButton GroupCoMorbidity()
			{
				return (GroupCoMorbidityRadioButton)super.getRadioButton(5);
			}
		}
		public static class tabCycleAndDrugCCOContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPerformanceStatusAtSTartCycleComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.medicaloncology.vo.lookups.PerformanceStatus getValue()
				{
					return (ims.medicaloncology.vo.lookups.PerformanceStatus)super.control.getValue();
				}
				public void setValue(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatmentTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ChemoCycleTreatmentType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoCycleTreatmentType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoCycleTreatmentType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ChemoCycleTreatmentType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ChemoCycleTreatmentType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ChemoCycleTreatmentType getValue()
				{
					return (ims.oncology.vo.lookups.ChemoCycleTreatmentType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ChemoCycleTreatmentType value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class GroupStatusRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 56, 8, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper73.getX(), anchoringHelper73.getY(), anchoringHelper73.getWidth(), "Active", startTabIndex.intValue() + 2048);
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper74.getX(), anchoringHelper74.getY(), anchoringHelper74.getWidth(), "All", startTabIndex.intValue() + 2046);
				}
				public void setText(GroupStatusEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupStatusEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupStatusEnumeration.None;
						case 0: return GroupStatusEnumeration.rdoActiveFilter;
						case 1: return GroupStatusEnumeration.rdoAllStatus;
					}
					return null;
				}
				public void setValue(GroupStatusEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupStatusEnumeration.None.id);
				}
				public boolean isEnabled(GroupStatusEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupStatusEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupStatusEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupStatusEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupStatusEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupStatusEnumeration None = new GroupStatusEnumeration(-1);
				public static GroupStatusEnumeration rdoActiveFilter = new GroupStatusEnumeration(0);
				public static GroupStatusEnumeration rdoAllStatus = new GroupStatusEnumeration(1);
				private GroupStatusEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupStatusEnumeration)o).id;
				}
				private int id;
			}
		
			public static class Group1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 232, 336, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper75.getX(), anchoringHelper75.getY(), anchoringHelper75.getWidth(), "Inactive", startTabIndex.intValue() + 2062);
					RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 168, 336, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper76.getX(), anchoringHelper76.getY(), anchoringHelper76.getWidth(), "Active", startTabIndex.intValue() + 2060);
				}
				public void setText(Group1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group1Enumeration.None;
						case 0: return Group1Enumeration.rdoInactive;
						case 1: return Group1Enumeration.rdoActive;
					}
					return null;
				}
				public void setValue(Group1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group1Enumeration.None.id);
				}
				public boolean isEnabled(Group1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group1Enumeration None = new Group1Enumeration(-1);
				public static Group1Enumeration rdoInactive = new Group1Enumeration(0);
				public static Group1Enumeration rdoActive = new Group1Enumeration(1);
				private Group1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group1Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 16, 317, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start of Cycle:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 16, 303, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performance status at", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 16, 282, 143, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Weight @ Start of Cycle:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 168, 360, 211, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NEED TO SHOW OP APPT DETAILS HERE", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 16, 360, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "O/P Appointment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 16, 258, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date: ", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 16, 234, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Context:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 544, 234, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cycle Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 544, 258, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 640, 360, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 2076), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 720, 360, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 2079), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 299, 337, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 2064), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 168, 256, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 2054), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 168, 304, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPerformanceStatusAtSTartCycleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 2058), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPerformanceStatusAtSTartCycleTemp);
				cmbPerformanceStatusAtSTartCycleComboBox cmbPerformanceStatusAtSTartCycle = (cmbPerformanceStatusAtSTartCycleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPerformanceStatusAtSTartCycleComboBox.class, m_cmbPerformanceStatusAtSTartCycleTemp);
				super.addComboBox(cmbPerformanceStatusAtSTartCycle);
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 168, 232, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTreatmentTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 2052), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTreatmentTypeTemp);
				cmbTreatmentTypeComboBox cmbTreatmentType = (cmbTreatmentTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatmentTypeComboBox.class, m_cmbTreatmentTypeTemp);
				super.addComboBox(cmbTreatmentType);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 792, 192, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 2050), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Oncology.contextMenuCCOChemoCycleMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 168, 280, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 2056), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 648, 256, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 2073), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 648, 256, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 2070), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 648, 232, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 2067), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroupStatus = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupStatus);
				GroupStatusRadioButton GroupStatus = (GroupStatusRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupStatusRadioButton.class, tmpGroupStatus);
				GroupStatus.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupStatus);
				RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroup1);
				Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
				Group1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group1);
			}

			public Label lblOPDetails()
			{
				return (Label)super.getControl(4);
			}
			public Label lblOPAppt()
			{
				return (Label)super.getControl(5);
			}
			public Label lblDayDuration()
			{
				return (Label)super.getControl(9);
			}
			public Button btnSaveCycle()
			{
				return (Button)super.getControl(10);
			}
			public Button btnCancelCycle()
			{
				return (Button)super.getControl(11);
			}
			public TextBox txtDummyactiveInactive()
			{
				return (TextBox)super.getControl(12);
			}
			public DateControl dteTreatmentDate()
			{
				return (DateControl)super.getControl(13);
			}
			public cmbPerformanceStatusAtSTartCycleComboBox cmbPerformanceStatusAtSTartCycle()
			{
				return (cmbPerformanceStatusAtSTartCycleComboBox)super.getComboBox(0);
			}
			public cmbTreatmentTypeComboBox cmbTreatmentType()
			{
				return (cmbTreatmentTypeComboBox)super.getComboBox(1);
			}
			public DynamicGrid dyngrdCCOCyclesDays()
			{
				return (DynamicGrid)super.getControl(16);
			}
			public IntBox intWeightStartCycle()
			{
				return (IntBox)super.getControl(17);
			}
			public IntBox intDay()
			{
				return (IntBox)super.getControl(18);
			}
			public IntBox intDuration()
			{
				return (IntBox)super.getControl(19);
			}
			public IntBox intCycle()
			{
				return (IntBox)super.getControl(20);
			}
			public GroupStatusRadioButton GroupStatus()
			{
				return (GroupStatusRadioButton)super.getRadioButton(0);
			}
			public Group1RadioButton Group1()
			{
				return (Group1RadioButton)super.getRadioButton(1);
			}
		}
		public static class tabCycleAndDrugContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
		
			public static class GroupFilterStatusRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 56, 8, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper98.getX(), anchoringHelper98.getY(), anchoringHelper98.getWidth(), "Active", startTabIndex.intValue() + 2042);
					RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper99.getX(), anchoringHelper99.getY(), anchoringHelper99.getWidth(), "All", startTabIndex.intValue() + 2040);
				}
				public void setText(GroupFilterStatusEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupFilterStatusEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupFilterStatusEnumeration.None;
						case 0: return GroupFilterStatusEnumeration.rdoStatusActive;
						case 1: return GroupFilterStatusEnumeration.rdoAll;
					}
					return null;
				}
				public void setValue(GroupFilterStatusEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupFilterStatusEnumeration.None.id);
				}
				public boolean isEnabled(GroupFilterStatusEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupFilterStatusEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupFilterStatusEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupFilterStatusEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupFilterStatusEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupFilterStatusEnumeration None = new GroupFilterStatusEnumeration(-1);
				public static GroupFilterStatusEnumeration rdoStatusActive = new GroupFilterStatusEnumeration(0);
				public static GroupFilterStatusEnumeration rdoAll = new GroupFilterStatusEnumeration(1);
				private GroupFilterStatusEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupFilterStatusEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 792, 352, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 2044), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuChemotherapyCycle, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// RadioButton Controls
				RadioButton tmpGroupFilterStatus = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupFilterStatus);
				GroupFilterStatusRadioButton GroupFilterStatus = (GroupFilterStatusRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterStatusRadioButton.class, tmpGroupFilterStatus);
				GroupFilterStatus.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupFilterStatus);
			}

			public DynamicGrid dyngrdCyclesDays()
			{
				return (DynamicGrid)super.getControl(0);
			}
			public GroupFilterStatusRadioButton GroupFilterStatus()
			{
				return (GroupFilterStatusRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 816, 416, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 416);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper101.getWidth(), anchoringHelper101.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 816, 416, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabCycleAndDrugCCO = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Cycle Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCycleAndDrugCCOContainer m_tabCycleAndDrugCCOContainer = (tabCycleAndDrugCCOContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCycleAndDrugCCOContainer.class, m_tabCycleAndDrugCCO, factory);
			super.addContainer(m_tabCycleAndDrugCCO, m_tabCycleAndDrugCCOContainer);
			ims.framework.utils.SizeInfo m_tabCycleAndDrugCCODesignSize = new ims.framework.utils.SizeInfo(816, 416);
			ims.framework.utils.SizeInfo m_tabCycleAndDrugCCORuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper102.getWidth(), anchoringHelper102.getHeight());
			m_tabCycleAndDrugCCOContainer.setContext(form, appForm, m_tabCycleAndDrugCCO, loader, contextMenus, startControlID, m_tabCycleAndDrugCCODesignSize, m_tabCycleAndDrugCCORuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 816, 416, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabCycleAndDrug = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Cycle & Drug Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCycleAndDrugContainer m_tabCycleAndDrugContainer = (tabCycleAndDrugContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCycleAndDrugContainer.class, m_tabCycleAndDrug, factory);
			super.addContainer(m_tabCycleAndDrug, m_tabCycleAndDrugContainer);
			ims.framework.utils.SizeInfo m_tabCycleAndDrugDesignSize = new ims.framework.utils.SizeInfo(816, 416);
			ims.framework.utils.SizeInfo m_tabCycleAndDrugRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper103.getWidth(), anchoringHelper103.getHeight());
			m_tabCycleAndDrugContainer.setContext(form, appForm, m_tabCycleAndDrug, loader, contextMenus, startControlID, m_tabCycleAndDrugDesignSize, m_tabCycleAndDrugRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDetails().setVisible(false);
			tabCycleAndDrugCCO().setVisible(false);
			tabCycleAndDrug().setVisible(false);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabCycleAndDrugCCOEnabled(boolean value)
		{
			tabCycleAndDrugCCO().setEnabled(value);
		}
		public void settabCycleAndDrugEnabled(boolean value)
		{
			tabCycleAndDrug().setEnabled(value);
		}
		public void showtabDetails()
		{
			tabCycleAndDrugCCO().setVisible(false);
			tabCycleAndDrug().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabCycleAndDrugCCO()
		{
			tabDetails().setVisible(false);
			tabCycleAndDrug().setVisible(false);
			tabCycleAndDrugCCO().setVisible(true);
		}
		public void showtabCycleAndDrug()
		{
			tabDetails().setVisible(false);
			tabCycleAndDrugCCO().setVisible(false);
			tabCycleAndDrug().setVisible(true);
		}

		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(0);
		}
		public tabCycleAndDrugCCOContainer tabCycleAndDrugCCO()
		{
			return (tabCycleAndDrugCCOContainer)super.layers.get(1);
		}
		public tabCycleAndDrugContainer tabCycleAndDrug()
		{
			return (tabCycleAndDrugContainer)super.layers.get(2);
		}
	}
	public static class grdChemotherapyRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdChemotherapyRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolStartDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolStartDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getcolStartDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setcolStartDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellcolStartDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRegimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRegimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRegimeOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolRegime()
		{
			return (String)super.row.get(1);
		}
		public void setcolRegime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRegimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(2);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolIntentReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolIntentReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolIntentOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolIntent()
		{
			return (String)super.row.get(3);
		}
		public void setcolIntent(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolIntentTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolResponseReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolResponseReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolResponseOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolResponse()
		{
			return (String)super.row.get(4);
		}
		public void setcolResponse(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolResponseTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.ocrr.vo.ChemotherapyDetailsShortVo getValue()
		{
			return (ims.ocrr.vo.ChemotherapyDetailsShortVo)super.row.getValue();
		}
		public void setValue(ims.ocrr.vo.ChemotherapyDetailsShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdChemotherapyRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdChemotherapyRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdChemotherapyRow get(int index)
		{
			return new grdChemotherapyRow(super.collection.get(index));
		}
		public grdChemotherapyRow newRow()
		{
			return new grdChemotherapyRow(super.collection.newRow());
		}
		public grdChemotherapyRow newRow(boolean autoSelect)
		{
			return new grdChemotherapyRow(super.collection.newRow(autoSelect));
		}
		public grdChemotherapyRow newRowAt(int index)
		{
			return new grdChemotherapyRow(super.collection.newRowAt(index));
		}
		public grdChemotherapyRow newRowAt(int index, boolean autoSelect)
		{
			return new grdChemotherapyRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdChemotherapyGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.ocrr.vo.ChemotherapyDetailsShortVoCollection getValues()
		{
			ims.ocrr.vo.ChemotherapyDetailsShortVoCollection listOfValues = new ims.ocrr.vo.ChemotherapyDetailsShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.ocrr.vo.ChemotherapyDetailsShortVo getValue()
		{
			return (ims.ocrr.vo.ChemotherapyDetailsShortVo)super.grid.getValue();
		}
		public void setValue(ims.ocrr.vo.ChemotherapyDetailsShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdChemotherapyRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdChemotherapyRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdChemotherapyRowCollection getRows()
		{
			return new grdChemotherapyRowCollection(super.grid.getRows());
		}
		public grdChemotherapyRow getRowByValue(ims.ocrr.vo.ChemotherapyDetailsShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdChemotherapyRow(row);
		}
		public void setcolStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRegimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRegimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolIntentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolIntentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolResponseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolResponseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.oncology.vo.lookups.RegimenAcronym.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.oncology.vo.lookups.RegimenAcronym' of the global context variable 'Oncology.RegimenAcronim' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getChemotherapyDetailsVo();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuChemotherapyCycle = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuChemotherapyCycleAddCycleItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Cycle", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuChemotherapyCycle.add(contextMenus.contextMenuChemotherapyCycleAddCycleItem);
		contextMenus.contextMenuChemotherapyCycleEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Cycle", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuChemotherapyCycle.add(contextMenus.contextMenuChemotherapyCycleEditItem);
		contextMenus.contextMenuChemotherapyCycleAddFractionItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Fraction", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuChemotherapyCycle.add(contextMenus.contextMenuChemotherapyCycleAddFractionItem);
		contextMenus.contextMenuChemotherapyCycleEditFractionItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Fraction", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuChemotherapyCycle.add(contextMenus.contextMenuChemotherapyCycleEditFractionItem);
		contextMenus.contextMenuChemotherapyCycleViewDayItem = factory.createMenuItem(startControlID.intValue() + 5, "View Day", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuChemotherapyCycle.add(contextMenus.contextMenuChemotherapyCycleViewDayItem);
		form.registerMenu(contextMenus.contextMenuChemotherapyCycle);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 6, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 9, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 11, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 12, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 13, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 14, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Oncology.contextMenuCCOChemoCycleMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Oncology.contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem = factory.createMenuItem(startControlID.intValue() + 15, "Add Cycle", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3990001)))
			contextMenus.Oncology.contextMenuCCOChemoCycleMenu.add(contextMenus.Oncology.contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem);
		contextMenus.Oncology.contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem = factory.createMenuItem(startControlID.intValue() + 16, "Edit Cycle", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3990002)))
			contextMenus.Oncology.contextMenuCCOChemoCycleMenu.add(contextMenus.Oncology.contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuCCOChemoCycleMenu);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 2089), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 2086), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 2083), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 2080), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 160, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdChemotherapyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdChemotherapyTemp);
		grdChemotherapyGrid grdChemotherapy = (grdChemotherapyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdChemotherapyGrid.class, m_grdChemotherapyTemp);
		grdChemotherapy.addDateColumn("Start Date", 0, 0, 90, true, true, null, false, 0, true);
		grdChemotherapy.addStringColumn("Regimen", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdChemotherapy.addStringColumn("Consultant", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdChemotherapy.addStringColumn("Intent", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdChemotherapy.addStringColumn("Response", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdChemotherapy);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public grdChemotherapyGrid grdChemotherapy()
	{
		return (grdChemotherapyGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Oncology = new OncologyForms();
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				ChemoCycleDrugDetails = new LocalFormName(125131);
				PatientsOutpatientAppointments = new LocalFormName(125122);
				ChemotherapyDetails = new LocalFormName(125110);
				PatientsChemoTreatmentPlanActionsDialog = new LocalFormName(125129);
			}
			public final FormName ChemoCycleDrugDetails;
			public final FormName PatientsOutpatientAppointments;
			public final FormName ChemotherapyDetails;
			public final FormName PatientsChemoTreatmentPlanActionsDialog;
		}

		public OncologyForms Oncology;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ChemotherapyDetailsVo = new ims.framework.ContextVariable("ChemotherapyDetailsVo", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier + "");
			cxl_SelectedCCOChemoCycleDetails = new ims.framework.ContextVariable("SelectedCCOChemoCycleDetails", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier + "");
			cxl_StartDateSortOrder = new ims.framework.ContextVariable("StartDateSortOrder", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__StartDateSortOrder_" + componentIdentifier + "");
			cxl_CurrentCollectionCycleAndDrugGrid = new ims.framework.ContextVariable("CurrentCollectionCycleAndDrugGrid", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__CurrentCollectionCycleAndDrugGrid_" + componentIdentifier + "");
			cxl_CurrentValueCollectionCycleDetailsTabGrid = new ims.framework.ContextVariable("CurrentValueCollectionCycleDetailsTabGrid", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__CurrentValueCollectionCycleDetailsTabGrid_" + componentIdentifier + "");
			cxl_AddEditMode = new ims.framework.ContextVariable("AddEditMode", prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__AddEditMode_" + componentIdentifier + "");
		}
		
		public boolean getChemotherapyDetailsVoIsNotNull()
		{
			return !cxl_ChemotherapyDetailsVo.getValueIsNull(context);
		}
		public ims.ocrr.vo.ChemotherapyDetailsVo getChemotherapyDetailsVo()
		{
			return (ims.ocrr.vo.ChemotherapyDetailsVo)cxl_ChemotherapyDetailsVo.getValue(context);
		}
		public void setChemotherapyDetailsVo(ims.ocrr.vo.ChemotherapyDetailsVo value)
		{
			cxl_ChemotherapyDetailsVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChemotherapyDetailsVo = null;
		public boolean getSelectedCCOChemoCycleDetailsIsNotNull()
		{
			return !cxl_SelectedCCOChemoCycleDetails.getValueIsNull(context);
		}
		public ims.oncology.vo.ChemoCycleDetailsCCOVo getSelectedCCOChemoCycleDetails()
		{
			return (ims.oncology.vo.ChemoCycleDetailsCCOVo)cxl_SelectedCCOChemoCycleDetails.getValue(context);
		}
		public void setSelectedCCOChemoCycleDetails(ims.oncology.vo.ChemoCycleDetailsCCOVo value)
		{
			cxl_SelectedCCOChemoCycleDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCCOChemoCycleDetails = null;
		public boolean getStartDateSortOrderIsNotNull()
		{
			return !cxl_StartDateSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getStartDateSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_StartDateSortOrder.getValue(context);
		}
		public void setStartDateSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_StartDateSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartDateSortOrder = null;
		public boolean getCurrentCollectionCycleAndDrugGridIsNotNull()
		{
			return !cxl_CurrentCollectionCycleAndDrugGrid.getValueIsNull(context);
		}
		public ims.oncology.vo.ChemotherapyCycleDetailsVoCollection getCurrentCollectionCycleAndDrugGrid()
		{
			return (ims.oncology.vo.ChemotherapyCycleDetailsVoCollection)cxl_CurrentCollectionCycleAndDrugGrid.getValue(context);
		}
		public void setCurrentCollectionCycleAndDrugGrid(ims.oncology.vo.ChemotherapyCycleDetailsVoCollection value)
		{
			cxl_CurrentCollectionCycleAndDrugGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCollectionCycleAndDrugGrid = null;
		public boolean getCurrentValueCollectionCycleDetailsTabGridIsNotNull()
		{
			return !cxl_CurrentValueCollectionCycleDetailsTabGrid.getValueIsNull(context);
		}
		public ims.oncology.vo.ChemoCycleDetailsCCOVoCollection getCurrentValueCollectionCycleDetailsTabGrid()
		{
			return (ims.oncology.vo.ChemoCycleDetailsCCOVoCollection)cxl_CurrentValueCollectionCycleDetailsTabGrid.getValue(context);
		}
		public void setCurrentValueCollectionCycleDetailsTabGrid(ims.oncology.vo.ChemoCycleDetailsCCOVoCollection value)
		{
			cxl_CurrentValueCollectionCycleDetailsTabGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentValueCollectionCycleDetailsTabGrid = null;
		public boolean getAddEditModeIsNotNull()
		{
			return !cxl_AddEditMode.getValueIsNull(context);
		}
		public Boolean getAddEditMode()
		{
			return (Boolean)cxl_AddEditMode.getValue(context);
		}
		public void setAddEditMode(Boolean value)
		{
			cxl_AddEditMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddEditMode = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class ChemotherapyCycle implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddCycle = 1;
			public static final int Edit = 2;
			public static final int AddFraction = 3;
			public static final int EditFraction = 4;
			public static final int ViewDay = 5;
		}
		public void disableAllChemotherapyCycleMenuItems()
		{
			this.contextMenuChemotherapyCycleAddCycleItem.setEnabled(false);
			this.contextMenuChemotherapyCycleEditItem.setEnabled(false);
			this.contextMenuChemotherapyCycleAddFractionItem.setEnabled(false);
			this.contextMenuChemotherapyCycleEditFractionItem.setEnabled(false);
			this.contextMenuChemotherapyCycleViewDayItem.setEnabled(false);
		}
		public void hideAllChemotherapyCycleMenuItems()
		{
			this.contextMenuChemotherapyCycleAddCycleItem.setVisible(false);
			this.contextMenuChemotherapyCycleEditItem.setVisible(false);
			this.contextMenuChemotherapyCycleAddFractionItem.setVisible(false);
			this.contextMenuChemotherapyCycleEditFractionItem.setVisible(false);
			this.contextMenuChemotherapyCycleViewDayItem.setVisible(false);
		}
		private Menu contextMenuChemotherapyCycle;
		public MenuItem getChemotherapyCycleAddCycleItem()
		{
			return this.contextMenuChemotherapyCycleAddCycleItem;
		}
		private MenuItem contextMenuChemotherapyCycleAddCycleItem;
		public MenuItem getChemotherapyCycleEditItem()
		{
			return this.contextMenuChemotherapyCycleEditItem;
		}
		private MenuItem contextMenuChemotherapyCycleEditItem;
		public MenuItem getChemotherapyCycleAddFractionItem()
		{
			return this.contextMenuChemotherapyCycleAddFractionItem;
		}
		private MenuItem contextMenuChemotherapyCycleAddFractionItem;
		public MenuItem getChemotherapyCycleEditFractionItem()
		{
			return this.contextMenuChemotherapyCycleEditFractionItem;
		}
		private MenuItem contextMenuChemotherapyCycleEditFractionItem;
		public MenuItem getChemotherapyCycleViewDayItem()
		{
			return this.contextMenuChemotherapyCycleViewDayItem;
		}
		private MenuItem contextMenuChemotherapyCycleViewDayItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 6;
			public static final int Update = 7;
			public static final int Remove = 8;
			public static final int View = 9;
			public static final int MoveUp = 10;
			public static final int MoveDown = 11;
			public static final int Replace = 12;
			public static final int Confirm = 13;
			public static final int EDIT_VIEW_ICP_ACTIONS = 14;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CCOChemoCycleMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CCO_ADD_CYCLE = 15;
				public static final int CCO_EDIT_CYCLE = 16;
			}
			public void disableAllCCOChemoCycleMenuMenuItems()
			{
				this.contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem.setEnabled(false);
				this.contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem.setEnabled(false);
			}
			public void hideAllCCOChemoCycleMenuMenuItems()
			{
				this.contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem.setVisible(false);
				this.contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem.setVisible(false);
			}
			private Menu contextMenuCCOChemoCycleMenu;
			public ReadOnlyMenuItem getCCOChemoCycleMenuCCO_ADD_CYCLEItem()
			{
				return this.contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem;
			}
			private MenuItem contextMenuCCOChemoCycleMenuCCO_ADD_CYCLEItem;
			public ReadOnlyMenuItem getCCOChemoCycleMenuCCO_EDIT_CYCLEItem()
			{
				return this.contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem;
			}
			private MenuItem contextMenuCCOChemoCycleMenuCCO_EDIT_CYCLEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[152];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemotherapyCycleDetailsVo", "BO-1074100005-ID", "ID_ChemotherapyCycleDetails");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemotherapyCycleDetailsVo", "BO-1074100005-CYCLENUMBER", "CycleNumber");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemotherapyCycleDetailsVo", "BO-1074100005-CYCLESTARTDATE", "CycleStartDate");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemotherapyCycleDetailsVo", "BO-1074100005-CYCLEDURATION", "CycleDuration");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemotherapyCycleDetailsVo", "BO-1074100005-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemoTherapyDayDetailsVo", "BO-1074100033-ID", "ID_ChemoTherapyDayDetails");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemoTherapyDayDetailsVo", "BO-1074100033-DAYNUMBER", "DayNumber");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemoTherapyDayDetailsVo", "BO-1074100033-DAYDATE", "DayDate");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ID", "ID_PatAction");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-TREATINGCONSULTANT", "TreatingConsultant");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ACTIVITYGROUP", "ActivityGroup");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ACTIVE", "Active");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenOPAppointment", "BO-1014100001-ID", "ID_OutpatientAttendance");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenOPAppointment", "BO-1014100001-APPOINTMENTDATETIME", "AppointmentDateTime");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenOPAppointment", "BO-1014100001-APPOINTMENTSTATUS", "AppointmentStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenOPAppointment", "BO-1014100001-CANCELLATIONREASON", "CancellationReason");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenOPAppointment", "BO-1014100001-ISACTIVE", "IsActive");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-ID", "ID_PatientApptDiary");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-APPOINTMENTID", "AppointmentId");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-APPTDATE", "ApptDate");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-STARTTIME", "StartTime");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-ENDTIME", "EndTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-CLINICNAME", "ClinicName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-CLINIC", "Clinic");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-SOURCE", "Source");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-APPTTYPE", "ApptType");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-PATIENT", "Patient");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-STATUS", "Status");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-STATUSDATE", "StatusDate");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-BOOKEDBY", "BookedBy");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-BOOKEDDATE", "BookedDate");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-PKEY", "Pkey");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-APPOINTHEADERID", "AppointHeaderId");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChosenCCOOPAppointment", "BO-1055100003-ACTIVE", "Active");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Oncology.ChemoTherapyDetailRecord", "BO-1074100004-ID", "ID_ChemotherapyDetails");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-ID", "ID_ChemotherapyDetails");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-EPISODEOFCARE", "EpisodeOfCare");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-CARECONTEXT", "CareContext");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-STARTDATE", "StartDate");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-DRUGTHERAPYTYPE", "DrugTherapyType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-REGIMENACRONYM", "RegimenAcronym");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-CANCERTREATEMENTINTENT", "CancerTreatementIntent");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-TREATMENTRESPONSE", "TreatmentResponse");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-TXCHANGEREASON", "TxChangeReason");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-PRETREATSURFACEAREA", "PreTreatSurfaceArea");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-CREATININECLEARANCE", "CreatinineClearance");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-HEIGHTVALUECM", "HeightValueCM");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-WEIGHTVALUEKG", "WeightValueKG");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-STATUS", "Status");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-PERFORMANCESTATUS", "PerformanceStatus");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-DELAYREASON1", "DelayReason1");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-DELAYREASON2", "DelayReason2");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-TREATMENTSITE", "TreatmentSite");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-ENDDATE", "EndDate");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-PROGRAMMENR", "ProgrammeNr");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-REGIMENNR", "RegimenNr");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-COMORBIDITYADJUSTMENT", "ComorbidityAdjustment");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-CHEMORADIATION", "ChemoRadiation");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-CLINICALTRIAL", "ClinicalTrial");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-PLANNEDCYCLES", "PlannedCycles");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-OUTCOMEDOSEREDUCTION", "OutcomeDoseReduction");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-OUTCOMETIMEDELAY", "OutcomeTimeDelay");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-OUTCOMESTOPPEDEARLY", "OutcomeStoppedEarly");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-OUTCOMESUMMARY", "OutcomeSummary");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-PRESCRIBEDDATE", "PrescribedDate");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__ChemotherapyDetailsVo_" + componentIdentifier, "BO-1074100004-ASSOCIATEDTREATMENTPLANACTION", "AssociatedTreatmentPlanAction");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-ID", "ID_ChemoCycleDetailsCCO");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-CYCLENUMBER", "CycleNumber");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-CYCLESTARTDATE", "CycleStartDate");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-CYCLEDURATION", "CycleDuration");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-TREATMENTTYPE", "TreatmentType");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-REGIMEN", "Regimen");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-PROCUREMENTCODE", "ProcurementCode");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-DAYONEDELIVERYCODE", "DayOneDeliveryCode");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-DELIVERYCODEALLOTHERDAYS", "DeliveryCodeAllOtherDays");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-DAYNUMBER", "DayNumber");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-ISACTIVE", "IsActive");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-WEIGHT", "Weight");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyDetails.__internal_x_context__SelectedCCOChemoCycleDetails_" + componentIdentifier, "BO-1074100047-PERFORMANCESTATUS", "PerformanceStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
