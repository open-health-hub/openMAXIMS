//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.45 build 2418.19363)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.mdtdetails;

import java.util.ArrayList;
import java.util.Comparator;

import ims.admin.forms.batchprinting.Logic.CreatedonComparator;
import ims.admin.vo.PrintAgentVo;
import ims.admin.vo.PrintAgentVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.oncology.forms.mdtdetails.GenForm.ctnDetailsContainer.grdHCPsInvitedRow;
import ims.oncology.vo.CancerCarePlanShortVo;
import ims.oncology.vo.CancerCarePlanShortVoCollection;
import ims.oncology.vo.CancerMDTMeetingVo;
import ims.oncology.vo.CancerMDTMeetingVoCollection;
import ims.oncology.vo.InvitedHCPVo;
import ims.oncology.vo.InvitedHCPVoCollection;
import ims.oncology.forms.mdtdetails.GenForm;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer MDT_DATE = new Integer(0);

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		prepopulateControls();
		updateContextMenus();
		form.setMode(FormMode.VIEW);
		form.btnUpdate().setVisible(false);
		open();
	}
	private void prepopulateControls() 
	{
		loadLocationCombo();
		loadCarePlanCombo();
	}
	private void loadCarePlanCombo() 
	{
		CancerCarePlanShortVoCollection voCarePlanShortColl = new CancerCarePlanShortVoCollection();
		voCarePlanShortColl = domain.listCancerCarePlanByEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		if(voCarePlanShortColl != null && voCarePlanShortColl.size() > 0)
		{
			for (int i =0; i < voCarePlanShortColl.size();i++)
			{
				StringBuffer carePlan = new StringBuffer();
				carePlan.append("Care Plan - Care Plan Date: ");
				if(voCarePlanShortColl.get(i).getCarePlanDateIsNotNull())
					carePlan.append(voCarePlanShortColl.get(i).getCarePlanDate());
				carePlan.append(" Consultant in Charge: ");
				if(voCarePlanShortColl.get(i).getConsultantInChargeIsNotNull())
					carePlan.append(voCarePlanShortColl.get(i).getConsultantInCharge());
				carePlan.append(" Intent: ");
				if(voCarePlanShortColl.get(i).getCarePlanIntentIsNotNull())
					carePlan.append(voCarePlanShortColl.get(i).getCarePlanIntent());
				carePlan.append(" Recurrence Indicator: ");
				if(voCarePlanShortColl.get(i).getRecurrenceIndicatorIsNotNull())
					carePlan.append(voCarePlanShortColl.get(i).getRecurrenceIndicator());
				
				form.ctnDetails().cmbCarePlan().newRow(voCarePlanShortColl.get(i),  carePlan.toString());
				form.ctnDetails().cmbCarePlan().setValue(voCarePlanShortColl.get(i));
			}
		}
	}
	private void open() 
	{
		clearScreen();
		form.grdMDTList().getRows().clear();
		form.grdMDTList().setValue(null);	
		
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllOCRRMyOrderHcpAlertMenuItems();
		//wdev-10471
		form.getLocalContext().setvoCancerMDTMeeting(null);
		//---------
		//wdev-10470
		form.ctnDetails().cmbCarePlan().clear();
		loadCarePlanCombo();
		//----------
		if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
		{
			clearInstanceControls();
			populateListControl(domain.listCancerMDTMeeting(form.getGlobalContext().Core.getEpisodeofCareShort()));
			updateContextMenus();			
		}
		form.setMode(FormMode.VIEW);		
		
		if (isDialog())
			form.btnClose().setVisible(true);
		else
			form.btnClose().setVisible(false);
	}
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	private void populateInstanceControl(CancerMDTMeetingVo voCancerMDTMeeting) 
	{

		clearInstanceControls();
		
		if(voCancerMDTMeeting != null)
		{
			if(voCancerMDTMeeting.getDateIsNotNull())
				form.ctnDetails().dteMDTDate().setValue(voCancerMDTMeeting.getDate());
			if(voCancerMDTMeeting.getPatientPerformanceStatusIsNotNull())
				form.ctnDetails().cmbPerformanceStatus().setValue(voCancerMDTMeeting.getPatientPerformanceStatus());
			if(voCancerMDTMeeting.getMDTLocationIsNotNull())
				form.ctnDetails().cmbLocation().setValue(voCancerMDTMeeting.getMDTLocation());
			if(voCancerMDTMeeting.getCoMorbidityAssessmentIsNotNull())
				form.ctnDetails().cmbCoMorbidityIndex().setValue(voCancerMDTMeeting.getCoMorbidityAssessment());
			if(voCancerMDTMeeting.getNotesIsNotNull())
				form.ctnDetails().txtNotes().setValue(voCancerMDTMeeting.getNotes());
			if(voCancerMDTMeeting.getAssociatedCarePlanIsNotNull())
				form.ctnDetails().cmbCarePlan().setValue(voCancerMDTMeeting.getAssociatedCarePlan());

			if(voCancerMDTMeeting.getAssociatedCarePlanIsNotNull())
			{
				form.ctnDetails().cmbCarePlan().newRow(voCancerMDTMeeting.getAssociatedCarePlan(), "Care Plan - Care Plan Date: " + voCancerMDTMeeting.getAssociatedCarePlan().getCarePlanDate() + " Consultant in Charge: " + voCancerMDTMeeting.getAssociatedCarePlan().getConsultantInCharge() + " Intent: " + voCancerMDTMeeting.getAssociatedCarePlan().getCarePlanIntent() + " Recurrence Indicator: " + voCancerMDTMeeting.getAssociatedCarePlan().getRecurrenceIndicator());
				form.ctnDetails().cmbCarePlan().setValue(voCancerMDTMeeting.getAssociatedCarePlan());
			}
			
			if(voCancerMDTMeeting.getOthersPresentIsNotNull())
			{
				GenForm.ctnDetailsContainer.grdOthersRow rowOthersPresent = null;
				String[] collOthersPresent = voCancerMDTMeeting.getOthersPresent();
				for(int i=0; i<collOthersPresent.length; i++)
				{
					rowOthersPresent = form.ctnDetails().grdOthers().getRows().newRow();
					rowOthersPresent.setcolOthersPresent(collOthersPresent[i]);
				}
			}
			
			if (voCancerMDTMeeting.getInvitedHCPIsNotNull() && voCancerMDTMeeting.getInvitedHCP().size() > 0)
			{
				InvitedHCPVoCollection collInvitedHCPs = voCancerMDTMeeting.getInvitedHCP();
				
				GenForm.ctnDetailsContainer.grdHCPsInvitedRow row;
				for (int i =0; i < collInvitedHCPs.size();i++)
				{
					row = form.ctnDetails().grdHCPsInvited().getRows().newRow();
					
					row.setValue(collInvitedHCPs.get(i));	
					if(collInvitedHCPs.get(i).getHCPIsNotNull())
					{
						row.getcolHCPs().newRow(collInvitedHCPs.get(i).getHCP(), collInvitedHCPs.get(i).getHCP().getName().toString());
						row.getcolHCPs().setValue(collInvitedHCPs.get(i).getHCP());
						if(collInvitedHCPs.get(i).getAttended().equals(Boolean.TRUE))
							row.setcolAttended(true);
					}
				}
			}
		}
	}
	private void clearScreen() 
	{
		form.grdMDTList().getRows().clear();
		clearInstanceControls();
	}
	private void clearInstanceControls() 
	{
		form.ctnDetails().grdHCPsInvited().getRows().clear();
		form.ctnDetails().grdOthers().getRows().clear();
		form.ctnDetails().dteMDTDate().setValue(null);
		form.ctnDetails().cmbCarePlan().setValue(null);
		form.ctnDetails().cmbCoMorbidityIndex().setValue(null);
		form.ctnDetails().cmbLocation().setValue(null);
		form.ctnDetails().cmbPerformanceStatus().setValue(null);

		form.ctnDetails().txtNotes().setValue(null);
	}
	private void populateListControl(CancerMDTMeetingVoCollection collCancerMDTMeetingVo) 
	{
		clearScreen();
		
		if (collCancerMDTMeetingVo != null)
		{
			GenForm.grdMDTListRow row;
			for (int i =0; i < collCancerMDTMeetingVo.size();i++)
			{
				row = form.grdMDTList().getRows().newRow();
				
				row.setValue(collCancerMDTMeetingVo.get(i));	
				if(collCancerMDTMeetingVo.get(i).getDateIsNotNull())
					row.setcolDate(collCancerMDTMeetingVo.get(i).getDate().toString());
				if(collCancerMDTMeetingVo.get(i).getMDTLocationIsNotNull())
					row.setcolLocation(collCancerMDTMeetingVo.get(i).getMDTLocation().toString());
				if(collCancerMDTMeetingVo.get(i).getPatientPerformanceStatusIsNotNull())
					row.setcolPerfStatus(collCancerMDTMeetingVo.get(i).getPatientPerformanceStatus().toString());
				if(collCancerMDTMeetingVo.get(i).getCoMorbidityAssessmentIsNotNull())
					row.setcolCoMorb(collCancerMDTMeetingVo.get(i).getCoMorbidityAssessment().toString());
				if(collCancerMDTMeetingVo.get(i).getAssociatedCarePlanIsNotNull())
					if(collCancerMDTMeetingVo.get(i).getAssociatedCarePlan().getCarePlanNotesIsNotNull())
						row.setcolAssocCP(collCancerMDTMeetingVo.get(i).getAssociatedCarePlan().getCarePlanNotes().toString());
				if(collCancerMDTMeetingVo.get(i).getNotesIsNotNull())
					row.setcolNotes(collCancerMDTMeetingVo.get(i).getNotes().toString());
			}
		}
	}
	protected void onGrdMDTListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//Display Panel and detail
		form.getLocalContext().setvoCancerMDTMeeting(form.grdMDTList().getValue());
		populateInstanceControl(form.grdMDTList().getValue());
		form.btnUpdate().setVisible(true);
		form.btnUpdate().setEnabled(true);
		updateContextMenus();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	private void updateInstance() 
	{
		if (allowUpdate())
		{
			form.setMode(FormMode.EDIT);
			setContextMenus();
		}
	}
	private boolean allowUpdate() 
	{
		return (form.getLocalContext().getvoCancerMDTMeetingIsNotNull());
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	private void newInstance() 
	{
		// initalise the screen for a new record
		clearInstanceControls();
		form.getLocalContext().setvoCancerMDTMeeting(new CancerMDTMeetingVo());

		// Set Episode of Care, Care Context, Clinical Contact
		form.getLocalContext().getvoCancerMDTMeeting().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		form.getLocalContext().getvoCancerMDTMeeting().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		form.getLocalContext().getvoCancerMDTMeeting().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		form.grdMDTList().setValue(null);
		//set the form mode
		form.setMode(FormMode.EDIT);
		//set any control status specific this form	
		setContextMenus();
	}
	
	private void setContextMenus() 
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().hideAllOCRRMyOrderHcpAlertMenuItems();
		form.getContextMenus().getOCRRMyOrderHcpAlertAddItem().setVisible(true);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();	
	}
	private boolean save() 
	{
		CancerMDTMeetingVo voCancerMDTMeeting = populateInstanceData();
		
		//validate Vo
		String[] arrErrors = voCancerMDTMeeting.validate(validateUIRules());
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setvoCancerMDTMeeting(domain.saveMDTDetails(voCancerMDTMeeting));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	/**
	 * @return
	 */
	private String[] validateUIRules() 
	{
		ArrayList screenErrors = new ArrayList();
		
		if(form.ctnDetails().grdOthers().getRows().size()>0)
		{
			for(int i=0; i<form.ctnDetails().grdOthers().getRows().size(); i++){
				
				if(form.ctnDetails().grdOthers().getRows().get(i).getcolOthersPresent()==null || form.ctnDetails().grdOthers().getRows().get(i).getcolOthersPresent().equals(""))
					screenErrors.add("Please enter value for Others Present.");
			}
		}

		if(form.ctnDetails().grdHCPsInvited().getRows().size()>0)
		{
			for(int i=0; i<form.ctnDetails().grdHCPsInvited().getRows().size(); i++){
				
				if(form.ctnDetails().grdHCPsInvited().getRows().get(i).getcolHCPs().getValue()==null)
					screenErrors.add("Please enter HCP's Invited.");
			}
		}
		
		int errorCount = screenErrors.size();
		if(errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		screenErrors.toArray(result);
		
		return result;
	}
	
	private CancerMDTMeetingVo populateInstanceData() 
	{
		CancerMDTMeetingVo voCancerMDTMeeting = form.getLocalContext().getvoCancerMDTMeeting();
		
		if(voCancerMDTMeeting == null)
		{
			voCancerMDTMeeting = new CancerMDTMeetingVo();
			
			// Set Episode of Care, Care Context, Clinical Contact
			form.getLocalContext().getvoCancerMDTMeeting().setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			form.getLocalContext().getvoCancerMDTMeeting().setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			form.getLocalContext().getvoCancerMDTMeeting().setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		voCancerMDTMeeting.setDate(form.ctnDetails().dteMDTDate().getValue());
		voCancerMDTMeeting.setPatientPerformanceStatus(form.ctnDetails().cmbPerformanceStatus().getValue());
		voCancerMDTMeeting.setMDTLocation(form.ctnDetails().cmbLocation().getValue());
		voCancerMDTMeeting.setCoMorbidityAssessment(form.ctnDetails().cmbCoMorbidityIndex().getValue());
		voCancerMDTMeeting.setNotes(form.ctnDetails().txtNotes().getValue());
		//voCancerMDTMeeting.setAssociatedCarePlan(form.ctnDetails().cmbCarePlan().getValue());
		
		if(form.ctnDetails().grdOthers().getRows().size()>0){
			String[] collOthersPresent = new String[form.ctnDetails().grdOthers().getRows().size()];
			for(int i=0; i<form.ctnDetails().grdOthers().getRows().size(); i++){
				
				collOthersPresent[i] = form.ctnDetails().grdOthers().getRows().get(i).getcolOthersPresent();
			}
			voCancerMDTMeeting.setOthersPresent(collOthersPresent);
		}
		else
			voCancerMDTMeeting.setOthersPresent( new String[0]);
		
		voCancerMDTMeeting.setInvitedHCP(new InvitedHCPVoCollection());
		for (int i = 0; i < form.ctnDetails().grdHCPsInvited().getRows().size(); i++)
		{
			GenForm.ctnDetailsContainer.grdHCPsInvitedRow hRow = form.ctnDetails().grdHCPsInvited().getRows().get(i);
			InvitedHCPVo voInvitedHCPs = hRow.getValue();
			if(voInvitedHCPs == null)
				voInvitedHCPs = new InvitedHCPVo();
			voInvitedHCPs.setHCP((Hcp) hRow.getcolHCPs().getValue());
			if(hRow.getcolAttended() == true)
				voInvitedHCPs.setAttended(Boolean.TRUE);
			else
				voInvitedHCPs.setAttended(Boolean.FALSE);

			voCancerMDTMeeting.getInvitedHCP().add(voInvitedHCPs);
		}
		//wdev-10470
		CancerCarePlanShortVo tempVo = form.ctnDetails().cmbCarePlan().getValue();
		if(tempVo != null)
			tempVo.setMdtMeeting(voCancerMDTMeeting);
		voCancerMDTMeeting.setAssociatedCarePlan(tempVo);
		//---------
		return voCancerMDTMeeting;
	}
	private void loadLocationCombo() 
	{
		LocationLiteVoCollection voLocationLiteColl = domain.listActiveLocations();
		if(voLocationLiteColl != null)
		{
			for(int i=0; i<voLocationLiteColl.size(); i++)
			{
				form.ctnDetails().cmbLocation().newRow(voLocationLiteColl.get(i), voLocationLiteColl.get(i).getName().toString());
			}
		}
	}
	protected void onGrdHCPsInvitedSelectionChanged() throws PresentationLogicException 
	{
		form.getContextMenus().getOCRRMyOrderHcpAlertRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.ctnDetails().grdHCPsInvited().getSelectedRow() != null);
	}
	protected void onGrdHCPsInvitedGridQueryComboBoxTextSubmited(int column, grdHCPsInvitedRow row, String text) throws PresentationLogicException 
	{
		row.getcolHCPs().clear();
		if (text == null || text.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		HcpCollection voCollHcp = domain.listHcps(text);
		if (voCollHcp != null && voCollHcp.size() > 0)
		{
			for (int i = 0; i < voCollHcp.size(); i++)
			{
				row.getcolHCPs().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
			}
			if (voCollHcp.size() == 1)
				row.getcolHCPs().setValue(voCollHcp.get(0));
			else if (voCollHcp.size() > 1)
				row.getcolHCPs().showOpened();
		}
		else
			engine.showMessage("No matching records found");
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.ctnDetails().grdHCPsInvited()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.OCRRMyOrderHcpAlert.Add :
					form.ctnDetails().grdHCPsInvited().getRows().newRow();
				break;
				case GenForm.ContextMenus.OCRRMyOrderHcpAlert.Remove :
					form.ctnDetails().grdHCPsInvited().removeSelectedRow();
					updateContextMenus();
				break;
				default :
			}
		}
		else if (sender.equals(form.ctnDetails().grdOthers()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					form.ctnDetails().grdOthers().getRows().newRow();
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					form.ctnDetails().grdOthers().removeSelectedRow();
					updateContextMenus();
				break;
				default :
			}
		}
		else if(sender.equals(form.grdMDTList()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.OncologyNamespace.MDTDetails.NEW:
					newInstance();
				break;
				
				case GenForm.ContextMenus.OncologyNamespace.MDTDetails.Edit:
					updateInstance();
				break;
			}
		}
	}
	private void updateContextMenus()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Others Present");
		form.getContextMenus().getOCRRMyOrderHcpAlertAddItem().setText("Add New HCP");

		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.ctnDetails().grdHCPsInvited().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getOCRRMyOrderHcpAlertAddItem().setVisible(true);
				form.getContextMenus().getOCRRMyOrderHcpAlertRemoveItem().setVisible(true);
				//if (form.grdDetails().getSelectedRowIndex()>=0)
				//	form.btnUpdate().setVisible(true);
				//else
				//	form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getOCRRMyOrderHcpAlertAddItem().setVisible(true);
				form.getContextMenus().getOCRRMyOrderHcpAlertRemoveItem().setVisible(false);
				//form.btnUpdate().setVisible(false);
			}
			if (form.ctnDetails().grdOthers().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getGenericGridAddItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				//if (form.grdDetails().getSelectedRowIndex()>=0)
				//	form.btnUpdate().setVisible(true);
				//else
				//	form.btnUpdate().setVisible(false);
			}
			else
			{
				
				form.getContextMenus().getGenericGridAddItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
				//form.btnUpdate().setVisible(false);
			}
			
			form.getContextMenus().Oncology.hideAllMDTDetailsMenuItems();
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.getContextMenus().hideAllOCRRMyOrderHcpAlertMenuItems();
			form.getContextMenus().Oncology.getMDTDetailsNEWItem().setVisible(true);
			form.getContextMenus().Oncology.getMDTDetailsEditItem().setVisible(form.grdMDTList().getSelectedRowIndex() >= 0);
		}
	}
	protected void onGrdOthersSelectionChanged() throws PresentationLogicException 
	{
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.ctnDetails().grdOthers().getSelectedRow() != null);
	}
	protected void onFormModeChanged() 
	{
		updateContextMenus();
	}
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException {
		engine.close(DialogResult.OK);		
	}
	//wdev-10471
	public class DateRunComparator implements Comparator
	{
		private int direction = 1;
		
		public DateRunComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DateRunComparator(SortOrder order)
		{
			if(order.equals(SortOrder.DESCENDING))
			{
				direction = -1;
			}
			else
				direction = 1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			Date date1 = null;
			Date date2 = null;
			if(ob1 instanceof CancerMDTMeetingVo )
			{
				CancerMDTMeetingVo pa1 = (CancerMDTMeetingVo)ob1;
				date1 = pa1.getDate();
			}
			if(ob2 instanceof CancerMDTMeetingVo)
			{
				CancerMDTMeetingVo pa2 = (CancerMDTMeetingVo)ob2;
				date2 = pa2.getDate();
			}
			if(date1 == null)
				return -1*direction;
			if(date2 == null)
				return direction;
			
			return  date1.compareTo(date2)*direction;		}
	
	}
	
	
	protected void onGrdMDTListGridHeaderClicked(int column) throws PresentationLogicException 
	{
		if(column == MDT_DATE)
		{
			if (form.getLocalContext().getSortColDate() == null || !form.getLocalContext().getSortColDate().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortColDate(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortColDate(SortOrder.DESCENDING);
			
			CancerMDTMeetingVoCollection collmdtMeetVo = form.grdMDTList().getValues();
			collmdtMeetVo.sort(new DateRunComparator(form.getLocalContext().getSortColDate()));
			
			form.grdMDTList().getRows().clear();
			
			populateListControl(collmdtMeetVo);
			form.grdMDTList().setValue(form.getLocalContext().getvoCancerMDTMeeting());
			populateInstanceControl(form.getLocalContext().getvoCancerMDTMeeting());
			
			
			
		}
		
		
	}
	//--------------------
}
