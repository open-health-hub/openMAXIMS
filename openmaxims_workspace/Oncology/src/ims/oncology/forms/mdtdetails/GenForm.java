//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.mdtdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbCarePlanComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.oncology.vo.CancerCarePlanShortVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.oncology.vo.CancerCarePlanShortVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.oncology.vo.CancerCarePlanShortVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.oncology.vo.CancerCarePlanShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.oncology.vo.CancerCarePlanShortVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.oncology.vo.CancerCarePlanShortVo getValue()
			{
				return (ims.oncology.vo.CancerCarePlanShortVo)super.control.getValue();
			}
			public void setValue(ims.oncology.vo.CancerCarePlanShortVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbPerformanceStatusComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.oncology.vo.lookups.PatientPerformanceStatus value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.oncology.vo.lookups.PatientPerformanceStatus value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.oncology.vo.lookups.PatientPerformanceStatus value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.oncology.vo.lookups.PatientPerformanceStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.oncology.vo.lookups.PatientPerformanceStatus value)
			{
				return super.control.removeRow(value);
			}
			public ims.oncology.vo.lookups.PatientPerformanceStatus getValue()
			{
				return (ims.oncology.vo.lookups.PatientPerformanceStatus)super.control.getValue();
			}
			public void setValue(ims.oncology.vo.lookups.PatientPerformanceStatus value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbLocationComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocationLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocationLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocationLiteVo getValue()
			{
				return (ims.core.vo.LocationLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocationLiteVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbCoMorbidityIndexComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.oncology.vo.lookups.CoMorbidityAssessment value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.oncology.vo.lookups.CoMorbidityAssessment value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.oncology.vo.lookups.CoMorbidityAssessment value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.oncology.vo.lookups.CoMorbidityAssessment value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.oncology.vo.lookups.CoMorbidityAssessment value)
			{
				return super.control.removeRow(value);
			}
			public ims.oncology.vo.lookups.CoMorbidityAssessment getValue()
			{
				return (ims.oncology.vo.lookups.CoMorbidityAssessment)super.control.getValue();
			}
			public void setValue(ims.oncology.vo.lookups.CoMorbidityAssessment value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdHCPsInvitedRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdHCPsInvitedRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolHCPsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolHCPsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolHCPsOpened()
			{
				super.row.showOpened(0);
			}
			public ims.framework.controls.GridMutableComboBox getcolHCPs()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 0);
			}
			public void setCellcolHCPsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolAttendedReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolAttendedReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolAttendedOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolAttended()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolAttended(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolAttendedTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.oncology.vo.InvitedHCPVo getValue()
			{
				return (ims.oncology.vo.InvitedHCPVo)super.row.getValue();
			}
			public void setValue(ims.oncology.vo.InvitedHCPVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdHCPsInvitedRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdHCPsInvitedRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdHCPsInvitedRow get(int index)
			{
				return new grdHCPsInvitedRow(super.collection.get(index));
			}
			public grdHCPsInvitedRow newRow()
			{
				return new grdHCPsInvitedRow(super.collection.newRow());
			}
			public grdHCPsInvitedRow newRow(boolean autoSelect)
			{
				return new grdHCPsInvitedRow(super.collection.newRow(autoSelect));
			}
			public grdHCPsInvitedRow newRowAt(int index)
			{
				return new grdHCPsInvitedRow(super.collection.newRowAt(index));
			}
			public grdHCPsInvitedRow newRowAt(int index, boolean autoSelect)
			{
				return new grdHCPsInvitedRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdHCPsInvitedGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.oncology.vo.InvitedHCPVoCollection getValues()
			{
				ims.oncology.vo.InvitedHCPVoCollection listOfValues = new ims.oncology.vo.InvitedHCPVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.oncology.vo.InvitedHCPVo getValue()
			{
				return (ims.oncology.vo.InvitedHCPVo)super.grid.getValue();
			}
			public void setValue(ims.oncology.vo.InvitedHCPVo value)
			{
				super.grid.setValue(value);
			}
			public grdHCPsInvitedRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdHCPsInvitedRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdHCPsInvitedRowCollection getRows()
			{
				return new grdHCPsInvitedRowCollection(super.grid.getRows());
			}
			public grdHCPsInvitedRow getRowByValue(ims.oncology.vo.InvitedHCPVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdHCPsInvitedRow(row);
			}
			public void setcolHCPsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolHCPsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolAttendedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolAttendedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdOthersRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdOthersRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolOthersPresentReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolOthersPresentReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolOthersPresentOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolOthersPresent()
			{
				return (String)super.row.get(0);
			}
			public void setcolOthersPresent(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolOthersPresentTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getValue()
			{
				return (String)super.row.getValue();
			}
			public void setValue(String value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdOthersRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdOthersRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdOthersRow get(int index)
			{
				return new grdOthersRow(super.collection.get(index));
			}
			public grdOthersRow newRow()
			{
				return new grdOthersRow(super.collection.newRow());
			}
			public grdOthersRow newRow(boolean autoSelect)
			{
				return new grdOthersRow(super.collection.newRow(autoSelect));
			}
			public grdOthersRow newRowAt(int index)
			{
				return new grdOthersRow(super.collection.newRowAt(index));
			}
			public grdOthersRow newRowAt(int index, boolean autoSelect)
			{
				return new grdOthersRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdOthersGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public String[] getValues()
			{
				String[] listOfValues = new String[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public String getValue()
			{
				return (String)super.grid.getValue();
			}
			public void setValue(String value)
			{
				super.grid.setValue(value);
			}
			public grdOthersRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdOthersRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdOthersRowCollection getRows()
			{
				return new grdOthersRowCollection(super.grid.getRows());
			}
			public grdOthersRow getRowByValue(String value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdOthersRow(row);
			}
			public void setcolOthersPresentHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolOthersPresentHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 45, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performance Status:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 134, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notes:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MDT Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 103, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Co-Morbidity Index:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 127, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Associated Care Plan:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 360, 120, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 156, 16, 180, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 152, 288, 648, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbCarePlanTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCarePlanTemp);
			cmbCarePlanComboBox cmbCarePlan = (cmbCarePlanComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCarePlanComboBox.class, m_cmbCarePlanTemp);
			super.addComboBox(cmbCarePlan);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 156, 44, 220, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbPerformanceStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbPerformanceStatusTemp);
			cmbPerformanceStatusComboBox cmbPerformanceStatus = (cmbPerformanceStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPerformanceStatusComboBox.class, m_cmbPerformanceStatusTemp);
			super.addComboBox(cmbPerformanceStatus);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 156, 72, 220, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbLocationTemp);
			cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
			super.addComboBox(cmbLocation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 156, 100, 220, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbCoMorbidityIndexTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCoMorbidityIndexTemp);
			cmbCoMorbidityIndexComboBox cmbCoMorbidityIndex = (cmbCoMorbidityIndexComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCoMorbidityIndexComboBox.class, m_cmbCoMorbidityIndexTemp);
			super.addComboBox(cmbCoMorbidityIndex);
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 16, 400, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdHCPsInvitedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRMyOrderHcpAlert, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdHCPsInvitedTemp);
			grdHCPsInvitedGrid grdHCPsInvited = (grdHCPsInvitedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHCPsInvitedGrid.class, m_grdHCPsInvitedTemp);
			grdHCPsInvited.addMutableComboBoxColumn("HCPs Invited", 0, 0, 270, false, true, true, false, true, true, -1);
			grdHCPsInvited.addBoolColumn("In Attendance", 0, 0, -1, false, false, 0, true);
			super.addGrid(grdHCPsInvited);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 400, 152, 400, 120, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdOthersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdOthersTemp);
			grdOthersGrid grdOthers = (grdOthersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOthersGrid.class, m_grdOthersTemp);
			grdOthers.addStringColumn("Others Present", 0, 0, -1, false, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdOthers);
		}
		public TextBox txtNotes()
		{
			return (TextBox)super.getControl(6);
		}
		public DateControl dteMDTDate()
		{
			return (DateControl)super.getControl(7);
		}
		public cmbCarePlanComboBox cmbCarePlan()
		{
			return (cmbCarePlanComboBox)super.getComboBox(0);
		}
		public cmbPerformanceStatusComboBox cmbPerformanceStatus()
		{
			return (cmbPerformanceStatusComboBox)super.getComboBox(1);
		}
		public cmbLocationComboBox cmbLocation()
		{
			return (cmbLocationComboBox)super.getComboBox(2);
		}
		public cmbCoMorbidityIndexComboBox cmbCoMorbidityIndex()
		{
			return (cmbCoMorbidityIndexComboBox)super.getComboBox(3);
		}
		public grdHCPsInvitedGrid grdHCPsInvited()
		{
			return (grdHCPsInvitedGrid)super.getGrid(0);
		}
		public grdOthersGrid grdOthers()
		{
			return (grdOthersGrid)super.getGrid(1);
		}
	}
	public static class grdMDTListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMDTListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolLocationReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolLocationOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolLocation()
		{
			return (String)super.row.get(1);
		}
		public void setcolLocation(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolLocationTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolPerfStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolPerfStatusReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolPerfStatusOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolPerfStatus()
		{
			return (String)super.row.get(2);
		}
		public void setcolPerfStatus(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolPerfStatusTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolCoMorbReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolCoMorbReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolCoMorbOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolCoMorb()
		{
			return (String)super.row.get(3);
		}
		public void setcolCoMorb(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolCoMorbTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolAssocCPReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolAssocCPReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolAssocCPOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolAssocCP()
		{
			return (String)super.row.get(4);
		}
		public void setcolAssocCP(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolAssocCPTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolNotesReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolNotesReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolNotesOpened()
		{
			super.row.showOpened(5);
		}
		public String getcolNotes()
		{
			return (String)super.row.get(5);
		}
		public void setcolNotes(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolNotesTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.oncology.vo.CancerMDTMeetingVo getValue()
		{
			return (ims.oncology.vo.CancerMDTMeetingVo)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMDTListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMDTListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMDTListRow get(int index)
		{
			return new grdMDTListRow(super.collection.get(index));
		}
		public grdMDTListRow newRow()
		{
			return new grdMDTListRow(super.collection.newRow());
		}
		public grdMDTListRow newRow(boolean autoSelect)
		{
			return new grdMDTListRow(super.collection.newRow(autoSelect));
		}
		public grdMDTListRow newRowAt(int index)
		{
			return new grdMDTListRow(super.collection.newRowAt(index));
		}
		public grdMDTListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMDTListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMDTListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.oncology.vo.CancerMDTMeetingVoCollection getValues()
		{
			ims.oncology.vo.CancerMDTMeetingVoCollection listOfValues = new ims.oncology.vo.CancerMDTMeetingVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.oncology.vo.CancerMDTMeetingVo getValue()
		{
			return (ims.oncology.vo.CancerMDTMeetingVo)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			super.grid.setValue(value);
		}
		public grdMDTListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMDTListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMDTListRowCollection getRows()
		{
			return new grdMDTListRowCollection(super.grid.getRows());
		}
		public grdMDTListRow getRowByValue(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMDTListRow(row);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolPerfStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolPerfStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolCoMorbHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolCoMorbHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolAssocCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolAssocCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolNotesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolNotesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRRMyOrderHcpAlert = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRRMyOrderHcpAlertAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuOCRRMyOrderHcpAlert.add(contextMenus.contextMenuOCRRMyOrderHcpAlertAddItem);
		contextMenus.contextMenuOCRRMyOrderHcpAlertRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRMyOrderHcpAlert.add(contextMenus.contextMenuOCRRMyOrderHcpAlertRemoveItem);
		form.registerMenu(contextMenus.contextMenuOCRRMyOrderHcpAlert);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 3, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 6, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 9, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 10, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Oncology.contextMenuMDTDetails = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Oncology.contextMenuMDTDetailsNEWItem = factory.createMenuItem(startControlID.intValue() + 12, "New", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuMDTDetails.add(contextMenus.Oncology.contextMenuMDTDetailsNEWItem);
		contextMenus.Oncology.contextMenuMDTDetailsEditItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuMDTDetails.add(contextMenus.Oncology.contextMenuMDTDetailsEditItem);
		form.registerMenu(contextMenus.Oncology.contextMenuMDTDetails);


		// Panel Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 816, 320, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 320);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 387, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdMDTListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuMDTDetails, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMDTListTemp);
		grdMDTListGrid grdMDTList = (grdMDTListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMDTListGrid.class, m_grdMDTListTemp);
		grdMDTList.addStringColumn("MDT Date", 0, 0, 80, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMDTList.addStringColumn("Location", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMDTList.addStringColumn("Performance Status", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMDTList.addStringColumn("Co-Morbidity", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMDTList.addStringColumn(" Assoc. Care Plan", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMDTList.addStringColumn("Notes", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdMDTList);
	}


	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public grdMDTListGrid grdMDTList()
	{
		return (grdMDTListGrid)super.getGrid(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_UpdateMode = new ims.framework.ContextVariable("UpdateMode", prefix + "_lv_Oncology.MDTDetails.__internal_x_context__UpdateMode_" + componentIdentifier + "");
			cxl_SelectedRecordID = new ims.framework.ContextVariable("SelectedRecordID", prefix + "_lv_Oncology.MDTDetails.__internal_x_context__SelectedRecordID_" + componentIdentifier + "");
			cxl_voCancerMDTMeeting = new ims.framework.ContextVariable("voCancerMDTMeeting", prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier + "");
			cxl_SortColDate = new ims.framework.ContextVariable("SortColDate", prefix + "_lv_Oncology.MDTDetails.__internal_x_context__SortColDate_" + componentIdentifier + "");
		}
		
		public boolean getUpdateModeIsNotNull()
		{
			return !cxl_UpdateMode.getValueIsNull(context);
		}
		public Boolean getUpdateMode()
		{
			return (Boolean)cxl_UpdateMode.getValue(context);
		}
		public void setUpdateMode(Boolean value)
		{
			cxl_UpdateMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdateMode = null;
		public boolean getSelectedRecordIDIsNotNull()
		{
			return !cxl_SelectedRecordID.getValueIsNull(context);
		}
		public String getSelectedRecordID()
		{
			return (String)cxl_SelectedRecordID.getValue(context);
		}
		public void setSelectedRecordID(String value)
		{
			cxl_SelectedRecordID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordID = null;
		public boolean getvoCancerMDTMeetingIsNotNull()
		{
			return !cxl_voCancerMDTMeeting.getValueIsNull(context);
		}
		public ims.oncology.vo.CancerMDTMeetingVo getvoCancerMDTMeeting()
		{
			return (ims.oncology.vo.CancerMDTMeetingVo)cxl_voCancerMDTMeeting.getValue(context);
		}
		public void setvoCancerMDTMeeting(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			cxl_voCancerMDTMeeting.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCancerMDTMeeting = null;
		public boolean getSortColDateIsNotNull()
		{
			return !cxl_SortColDate.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortColDate()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortColDate.getValue(context);
		}
		public void setSortColDate(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortColDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortColDate = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OCRRMyOrderHcpAlert implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Remove = 2;
		}
		public void disableAllOCRRMyOrderHcpAlertMenuItems()
		{
			this.contextMenuOCRRMyOrderHcpAlertAddItem.setEnabled(false);
			this.contextMenuOCRRMyOrderHcpAlertRemoveItem.setEnabled(false);
		}
		public void hideAllOCRRMyOrderHcpAlertMenuItems()
		{
			this.contextMenuOCRRMyOrderHcpAlertAddItem.setVisible(false);
			this.contextMenuOCRRMyOrderHcpAlertRemoveItem.setVisible(false);
		}
		private Menu contextMenuOCRRMyOrderHcpAlert;
		public MenuItem getOCRRMyOrderHcpAlertAddItem()
		{
			return this.contextMenuOCRRMyOrderHcpAlertAddItem;
		}
		private MenuItem contextMenuOCRRMyOrderHcpAlertAddItem;
		public MenuItem getOCRRMyOrderHcpAlertRemoveItem()
		{
			return this.contextMenuOCRRMyOrderHcpAlertRemoveItem;
		}
		private MenuItem contextMenuOCRRMyOrderHcpAlertRemoveItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 3;
			public static final int Update = 4;
			public static final int Remove = 5;
			public static final int View = 6;
			public static final int MoveUp = 7;
			public static final int MoveDown = 8;
			public static final int Replace = 9;
			public static final int Confirm = 10;
			public static final int EDIT_VIEW_ICP_ACTIONS = 11;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class MDTDetails implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 12;
				public static final int Edit = 13;
			}
			public void disableAllMDTDetailsMenuItems()
			{
				this.contextMenuMDTDetailsNEWItem.setEnabled(false);
				this.contextMenuMDTDetailsEditItem.setEnabled(false);
			}
			public void hideAllMDTDetailsMenuItems()
			{
				this.contextMenuMDTDetailsNEWItem.setVisible(false);
				this.contextMenuMDTDetailsEditItem.setVisible(false);
			}
			private Menu contextMenuMDTDetails;
			public ReadOnlyMenuItem getMDTDetailsNEWItem()
			{
				return this.contextMenuMDTDetailsNEWItem;
			}
			private MenuItem contextMenuMDTDetailsNEWItem;
			public ReadOnlyMenuItem getMDTDetailsEditItem()
			{
				return this.contextMenuMDTDetailsEditItem;
			}
			private MenuItem contextMenuMDTDetailsEditItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[79];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-ID", "ID_CancerMDTMeeting");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-DATE", "Date");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-COMORBIDITYASSESSMENT", "CoMorbidityAssessment");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-NOTES", "Notes");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-PATIENTPERFORMANCESTATUS", "PatientPerformanceStatus");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.MDTDetails.__internal_x_context__voCancerMDTMeeting_" + componentIdentifier, "BO-1074100017-EPISODEOFCARE", "EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
