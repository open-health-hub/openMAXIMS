//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3909.24643)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.internalreferrals;

import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.internalreferrals.GenForm.GroupStatusEnumeration;
import ims.oncology.forms.internalreferrals.GenForm.grdListRow;
import ims.oncology.vo.InternalReferralVoCollection;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.GroupStatus().setValue(GroupStatusEnumeration.rdoCurrent);
		open(true);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OncologyNamespace.InternalReferrals.NEW :
				newReferral();
			break;			
			case GenForm.ContextMenus.OncologyNamespace.InternalReferrals.UPDATE:
				updateReferral();
			break;			
			default :
			break;
		}

	}

	private void open(boolean bClear) 
	{
		form.setMode(FormMode.VIEW);
		form.ccReferral().enablePrintButton(false);

		if (bClear)
			clearScreen();
		
		InternalReferralVoCollection voIR = domain.listInternalReferrals(form.getGlobalContext().Core.getPatientShort(), form.GroupStatus().getValue().equals(GroupStatusEnumeration.rdoCurrent) ? true : false);
		if (voIR != null)
			populateScreenFromData(voIR, bClear);
		else
			clearScreen();//WDEV-13181 
		
		updateContextMenus();
	}

	private void populateScreenFromData(InternalReferralVoCollection voIRColl, boolean bClear) 
	{
		form.grdList().getRows().clear();
		
		if(voIRColl.size()>0)
			form.ccReferral().enablePrintButton(true);
		else
			clearScreen();//WDEV-13181 
		
		for (int i = 0 ; i < voIRColl.size() ; i++)
		{
			grdListRow row = form.grdList().getRows().newRow();
			
			row.setColDate(voIRColl.get(i).getReferralDateIsNotNull() ? voIRColl.get(i).getReferralDate().toString() : "");
			row.setColType(voIRColl.get(i).getReferralTypeIsNotNull() ? voIRColl.get(i).getReferralType().getText() : "");
			row.setColInvDate(voIRColl.get(i).getInternalReferralOutcomeIsNotNull() &&  voIRColl.get(i).getInternalReferralOutcome().getReferralOutcomeDateIsNotNull() ? voIRColl.get(i).getInternalReferralOutcome().getReferralOutcomeDate().toString() : "");
			
			row.setValue(voIRColl.get(i));

			if (! bClear
				&& form.getGlobalContext().Oncology.getInternalReferralRefIsNotNull()
				&& voIRColl.get(i).getID_InternalReferral().equals(form.getGlobalContext().Oncology.getInternalReferralRef().getID_InternalReferral()))
				form.grdList().setValue(voIRColl.get(i));
		}
	}

	private void clearScreen() 
	{
		form.grdList().getRows().clear();
		
		form.ccReferral().clearComponent();
	}

	private void updateReferral() 
	{
		form.ccReferral().initialise(form.grdList().getValue(), true, false);
		form.setMode(FormMode.EDIT);
		updateContextMenus();
	}

	private void newReferral() 
	{
		form.grdList().setValue(null);
		form.getGlobalContext().Oncology.setInternalReferralRef(null);
		form.ccReferral().initialise(null, true, false);
		form.setMode(FormMode.EDIT);
		updateContextMenus();
	}

	@Override
	protected void onGrdListSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenus();
		form.getGlobalContext().Oncology.setInternalReferralRef(form.grdList().getValue());
		form.ccReferral().initialise(form.grdList().getValue(), false, false);//Opens record in View mode
	}
	
	private void updateContextMenus() 
	{
		form.getContextMenus().Oncology.hideAllInternalReferralsMenuItems();
		
		form.getContextMenus().Oncology.getInternalReferralsNEWItem().setVisible(true);
		form.getContextMenus().Oncology.getInternalReferralsNEWItem().setEnabled(true);

		form.getContextMenus().Oncology.getInternalReferralsUPDATEItem().setVisible(form.grdList().getValue() != null && form.grdList().getValue().getInternalReferralOutcome() == null);
		form.getContextMenus().Oncology.getInternalReferralsUPDATEItem().setEnabled(form.grdList().getValue() != null && form.grdList().getValue().getInternalReferralOutcome() == null);
	}

	@Override
	protected void onCcReferralValueChanged() throws PresentationLogicException
	{
		if (form.getGlobalContext().RefMan.getIsComponentInEditModeIsNotNull()
			&& form.getGlobalContext().RefMan.getIsComponentInEditMode().equals(FormMode.VIEW))
		{
			open(false);
			form.getGlobalContext().RefMan.setIsComponentInEditMode(null);
		}
	}

	@Override
	protected void onRadioButtonGroupStatusValueChanged() throws PresentationLogicException 
	{
		open(true);
	}


}
