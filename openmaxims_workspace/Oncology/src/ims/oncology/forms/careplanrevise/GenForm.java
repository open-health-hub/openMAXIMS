//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.careplanrevise;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class chklistAntiCancerReasonCheckedListBox extends CheckedListBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.NoAntiCancerTxReason value, boolean checked, boolean enabled)
		{
			super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, enabled));
		}
		public void newRow(ims.oncology.vo.lookups.NoAntiCancerTxReason value)
		{
			super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor()));
		}
		public void newRow(ims.oncology.vo.lookups.NoAntiCancerTxReason value, boolean checked)
		{
			super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, true));
		}
		public ims.oncology.vo.lookups.NoAntiCancerTxReasonCollection getValues()
		{
			ListItemCollection checkedItems = super.control.getCheckedItems();
			if(checkedItems.size() == 0)
				return null;
			ims.oncology.vo.lookups.NoAntiCancerTxReasonCollection items = new ims.oncology.vo.lookups.NoAntiCancerTxReasonCollection();
			for(int x = 0; x < checkedItems.size(); x++)
			{
				items.add((ims.oncology.vo.lookups.NoAntiCancerTxReason)checkedItems.get(x).getValue());
			}
			return items;
		}
		public void setValues(ims.oncology.vo.lookups.NoAntiCancerTxReasonCollection values)
		{
			if(values == null)
				super.control.setCheckedItems(null);
			else
			{
				ListItemCollection checkedItems = new ListItemCollection();
				for(int x = 0; x < values.size(); x++)
				{
					ListItem item = new ListItem();
					item.setValue(values.get(x));
					checkedItems.add(item);
				}
				super.control.setCheckedItems(checkedItems);
			}
		}
	}
	public static class cmbAssociatedMDTComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.CancerMDTMeetingVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.CancerMDTMeetingVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.CancerMDTMeetingVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.CancerMDTMeetingVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.CancerMDTMeetingVo getValue()
		{
			return (ims.oncology.vo.CancerMDTMeetingVo)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.CancerMDTMeetingVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTreatIntentComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.CarePlanIntent value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanIntent value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanIntent value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanIntent value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.CarePlanIntent value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.CarePlanIntent getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanIntent)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanIntent value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.CarePlanCurrentStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanCurrentStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanCurrentStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.CarePlanCurrentStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.CarePlanCurrentStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.CarePlanCurrentStatus getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanCurrentStatus)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanCurrentStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbRecurrenceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.RecurrenceIndicator value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.RecurrenceIndicator value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.RecurrenceIndicator value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.RecurrenceIndicator value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.RecurrenceIndicator value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.RecurrenceIndicator getValue()
		{
			return (ims.oncology.vo.lookups.RecurrenceIndicator)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.RecurrenceIndicator value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbConsultantHcpComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class gridCurrentCarePlanRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridCurrentCarePlanRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColModalityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColModalityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColModalityOpened()
		{
			super.row.showOpened(0);
		}
		public String getColModality()
		{
			return (String)super.row.get(0);
		}
		public void setColModality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColModalityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridCurrentCarePlanRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridCurrentCarePlanRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridCurrentCarePlanRow get(int index)
		{
			return new gridCurrentCarePlanRow(super.collection.get(index));
		}
		public gridCurrentCarePlanRow newRow()
		{
			return new gridCurrentCarePlanRow(super.collection.newRow());
		}
		public gridCurrentCarePlanRow newRow(boolean autoSelect)
		{
			return new gridCurrentCarePlanRow(super.collection.newRow(autoSelect));
		}
		public gridCurrentCarePlanRow newRowAt(int index)
		{
			return new gridCurrentCarePlanRow(super.collection.newRowAt(index));
		}
		public gridCurrentCarePlanRow newRowAt(int index, boolean autoSelect)
		{
			return new gridCurrentCarePlanRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridCurrentCarePlanGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality[] getValues()
		{
			ims.oncology.vo.lookups.CarePlanTreatmentModality[] listOfValues = new ims.oncology.vo.lookups.CarePlanTreatmentModality[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.grid.setValue(value);
		}
		public gridCurrentCarePlanRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridCurrentCarePlanRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridCurrentCarePlanRowCollection getRows()
		{
			return new gridCurrentCarePlanRowCollection(super.grid.getRows());
		}
		public gridCurrentCarePlanRow getRowByValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridCurrentCarePlanRow(row);
		}
		public void setColModalityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColModalityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class gridPlannedModRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridPlannedModRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColModalityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColModalityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColModalityOpened()
		{
			super.row.showOpened(0);
		}
		public String getColModality()
		{
			return (String)super.row.get(0);
		}
		public void setColModality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColModalityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSequenceReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSequenceReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSequenceOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getColSequence()
		{
			return (Integer)super.row.get(2);
		}
		public void setColSequence(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellColSequenceTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridPlannedModRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridPlannedModRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridPlannedModRow get(int index)
		{
			return new gridPlannedModRow(super.collection.get(index));
		}
		public gridPlannedModRow newRow()
		{
			return new gridPlannedModRow(super.collection.newRow());
		}
		public gridPlannedModRow newRow(boolean autoSelect)
		{
			return new gridPlannedModRow(super.collection.newRow(autoSelect));
		}
		public gridPlannedModRow newRowAt(int index)
		{
			return new gridPlannedModRow(super.collection.newRowAt(index));
		}
		public gridPlannedModRow newRowAt(int index, boolean autoSelect)
		{
			return new gridPlannedModRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridPlannedModGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality[] getValues()
		{
			ims.oncology.vo.lookups.CarePlanTreatmentModality[] listOfValues = new ims.oncology.vo.lookups.CarePlanTreatmentModality[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.grid.setValue(value);
		}
		public gridPlannedModRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridPlannedModRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridPlannedModRowCollection getRows()
		{
			return new gridPlannedModRowCollection(super.grid.getRows());
		}
		public gridPlannedModRow getRowByValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridPlannedModRow(row);
		}
		public void setColModalityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColModalityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSequenceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSequenceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class gridActualModalityRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridActualModalityRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColModalityReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColModalityReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColModalityOpened()
		{
			super.row.showOpened(0);
		}
		public String getColModality()
		{
			return (String)super.row.get(0);
		}
		public void setColModality(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColModalityTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSequenceReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSequenceReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSequenceOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getColSequence()
		{
			return (Integer)super.row.get(2);
		}
		public void setColSequence(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellColSequenceTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridActualModalityRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridActualModalityRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridActualModalityRow get(int index)
		{
			return new gridActualModalityRow(super.collection.get(index));
		}
		public gridActualModalityRow newRow()
		{
			return new gridActualModalityRow(super.collection.newRow());
		}
		public gridActualModalityRow newRow(boolean autoSelect)
		{
			return new gridActualModalityRow(super.collection.newRow(autoSelect));
		}
		public gridActualModalityRow newRowAt(int index)
		{
			return new gridActualModalityRow(super.collection.newRowAt(index));
		}
		public gridActualModalityRow newRowAt(int index, boolean autoSelect)
		{
			return new gridActualModalityRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridActualModalityGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality[] getValues()
		{
			ims.oncology.vo.lookups.CarePlanTreatmentModality[] listOfValues = new ims.oncology.vo.lookups.CarePlanTreatmentModality[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.oncology.vo.lookups.CarePlanTreatmentModality getValue()
		{
			return (ims.oncology.vo.lookups.CarePlanTreatmentModality)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			super.grid.setValue(value);
		}
		public gridActualModalityRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridActualModalityRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridActualModalityRowCollection getRows()
		{
			return new gridActualModalityRowCollection(super.grid.getRows());
		}
		public gridActualModalityRow getRowByValue(ims.oncology.vo.lookups.CarePlanTreatmentModality value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridActualModalityRow(row);
		}
		public void setColModalityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColModalityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSequenceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSequenceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 648);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Care Plan Revision", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 504, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anti-cancer ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 520, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 440, 488, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason No Specific", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 504, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Agreed Plan", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 520, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Differs from MDT:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 488, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason Why", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Plan Notes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 584, 152, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Associated MDT Meeting:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Plan Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 440, 330, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Intent:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 362, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 440, 458, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Agreed Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 458, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Plan Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 72, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason For Revision", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 440, 362, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recurrence:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 240, 96, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, ">>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 680, 616, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 760, 616, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 136, 392, 696, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 136, 272, 696, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 136, 488, 280, 88, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 136, 328, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 560, 456, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 192, 584, 640, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbAssociatedMDTTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAssociatedMDTTemp);
		cmbAssociatedMDTComboBox cmbAssociatedMDT = (cmbAssociatedMDTComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAssociatedMDTComboBox.class, m_cmbAssociatedMDTTemp);
		super.addComboBox(cmbAssociatedMDT);
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 560, 328, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTreatIntentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatIntentTemp);
		cmbTreatIntentComboBox cmbTreatIntent = (cmbTreatIntentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatIntentComboBox.class, m_cmbTreatIntentTemp);
		super.addComboBox(cmbTreatIntent);
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 136, 456, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 560, 360, 272, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbRecurrenceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRecurrenceTemp);
		cmbRecurrenceComboBox cmbRecurrence = (cmbRecurrenceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecurrenceComboBox.class, m_cmbRecurrenceTemp);
		super.addComboBox(cmbRecurrence);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 136, 360, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbConsultantHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantHcpTemp);
		qmbConsultantHcpComboBox qmbConsultantHcp = (qmbConsultantHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantHcpComboBox.class, m_qmbConsultantHcpTemp);
		super.addComboBox(qmbConsultantHcp);

		// CheckedListBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 560, 488, 272, 79, ims.framework.enumerations.ControlAnchoring.ALL);
		CheckedListBox m_chklistAntiCancerReasonTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 15), Boolean.FALSE, null});
		addControl(m_chklistAntiCancerReasonTemp);
		chklistAntiCancerReasonCheckedListBox chklistAntiCancerReason = (chklistAntiCancerReasonCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistAntiCancerReasonCheckedListBox.class, m_chklistAntiCancerReasonTemp);
		super.addCheckedListBox(chklistAntiCancerReason);

		// Grid Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 232, 208, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_gridCurrentCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridCurrentCarePlanTemp);
		gridCurrentCarePlanGrid gridCurrentCarePlan = (gridCurrentCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(gridCurrentCarePlanGrid.class, m_gridCurrentCarePlanTemp);
		gridCurrentCarePlan.addStringColumn("Modality - Current Care Plan", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridCurrentCarePlan);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 264, 48, 280, 208, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_gridPlannedModTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridPlannedModTemp);
		gridPlannedModGrid gridPlannedMod = (gridPlannedModGrid)GridFlyweightFactory.getInstance().createGridBridge(gridPlannedModGrid.class, m_gridPlannedModTemp);
		gridPlannedMod.addStringColumn("Modality - MDT Agreed", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridPlannedMod.addBoolColumn("Select", 0, 0, 60, false, true, 0, true);
		gridPlannedMod.addIntColumn("Seq.", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(gridPlannedMod);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 552, 48, 280, 208, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_gridActualModalityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridActualModalityTemp);
		gridActualModalityGrid gridActualModality = (gridActualModalityGrid)GridFlyweightFactory.getInstance().createGridBridge(gridActualModalityGrid.class, m_gridActualModalityTemp);
		gridActualModality.addStringColumn("Modality - Patient Agreed", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridActualModality.addBoolColumn("Select", 0, 0, 60, false, true, 0, true);
		gridActualModality.addIntColumn("Seq.", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(gridActualModality);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lbl12()
	{
		return (Label)super.getControl(1);
	}
	public Label lbl13()
	{
		return (Label)super.getControl(2);
	}
	public Label lbl14()
	{
		return (Label)super.getControl(3);
	}
	public Label lbl1()
	{
		return (Label)super.getControl(4);
	}
	public Label lbl3()
	{
		return (Label)super.getControl(5);
	}
	public Label lbl11()
	{
		return (Label)super.getControl(6);
	}
	public Label lbl9()
	{
		return (Label)super.getControl(7);
	}
	public Label label4()
	{
		return (Label)super.getControl(14);
	}
	public Button btnMoveCurrentCP()
	{
		return (Button)super.getControl(16);
	}
	public Button btnOk()
	{
		return (Button)super.getControl(17);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(18);
	}
	public TextBox txtNotes()
	{
		return (TextBox)super.getControl(19);
	}
	public TextBox txtRevision()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtReason()
	{
		return (TextBox)super.getControl(21);
	}
	public DateControl dteCarePlan()
	{
		return (DateControl)super.getControl(22);
	}
	public DateControl dteAgreedDate()
	{
		return (DateControl)super.getControl(23);
	}
	public cmbAssociatedMDTComboBox cmbAssociatedMDT()
	{
		return (cmbAssociatedMDTComboBox)super.getComboBox(0);
	}
	public cmbTreatIntentComboBox cmbTreatIntent()
	{
		return (cmbTreatIntentComboBox)super.getComboBox(1);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(2);
	}
	public cmbRecurrenceComboBox cmbRecurrence()
	{
		return (cmbRecurrenceComboBox)super.getComboBox(3);
	}
	public qmbConsultantHcpComboBox qmbConsultantHcp()
	{
		return (qmbConsultantHcpComboBox)super.getComboBox(4);
	}
	public chklistAntiCancerReasonCheckedListBox chklistAntiCancerReason()
	{
		return (chklistAntiCancerReasonCheckedListBox)super.getCheckedListBox(0);
	}
	public gridCurrentCarePlanGrid gridCurrentCarePlan()
	{
		return (gridCurrentCarePlanGrid)super.getGrid(0);
	}
	public gridPlannedModGrid gridPlannedMod()
	{
		return (gridPlannedModGrid)super.getGrid(1);
	}
	public gridActualModalityGrid gridActualModality()
	{
		return (gridActualModalityGrid)super.getGrid(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				PlanOfCareActionsReview = new LocalFormName(100118);
			}
			public final FormName PlanOfCareActionsReview;
		}

		public NursingForms Nursing;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				MoveUp = new ImageHelper(102197, "Images/Core/CommonMoveUp.gif", new Integer(16), new Integer(16));
				MoveDown = new ImageHelper(102198, "Images/Core/CommonMoveDown.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MoveUp;
			public final ims.framework.utils.Image MoveDown;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_bNewMode = new ims.framework.ContextVariable("bNewMode", prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__bNewMode_" + componentIdentifier + "");
			cxl_ClearPlanGrid = new ims.framework.ContextVariable("ClearPlanGrid", prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__ClearPlanGrid_" + componentIdentifier + "");
			cxl_voCancerCarePlan = new ims.framework.ContextVariable("voCancerCarePlan", prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier + "");
		}
		
		public boolean getbNewModeIsNotNull()
		{
			return !cxl_bNewMode.getValueIsNull(context);
		}
		public Boolean getbNewMode()
		{
			return (Boolean)cxl_bNewMode.getValue(context);
		}
		public void setbNewMode(Boolean value)
		{
			cxl_bNewMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bNewMode = null;
		public boolean getClearPlanGridIsNotNull()
		{
			return !cxl_ClearPlanGrid.getValueIsNull(context);
		}
		public Boolean getClearPlanGrid()
		{
			return (Boolean)cxl_ClearPlanGrid.getValue(context);
		}
		public void setClearPlanGrid(Boolean value)
		{
			cxl_ClearPlanGrid.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClearPlanGrid = null;
		public boolean getvoCancerCarePlanIsNotNull()
		{
			return !cxl_voCancerCarePlan.getValueIsNull(context);
		}
		public ims.oncology.vo.CancerCarePlanVo getvoCancerCarePlan()
		{
			return (ims.oncology.vo.CancerCarePlanVo)cxl_voCancerCarePlan.getValue(context);
		}
		public void setvoCancerCarePlan(ims.oncology.vo.CancerCarePlanVo value)
		{
			cxl_voCancerCarePlan.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voCancerCarePlan = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[95];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-ID", "ID_CancerCarePlan");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-CAREPLANDATE", "CarePlanDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-CAREPLANINTENT", "CarePlanIntent");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-RECURRENCEINDICATOR", "RecurrenceIndicator");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-ISCURRENT", "IsCurrent");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-CAREPLANNOTES", "CarePlanNotes");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-CURRENTSTATUS", "CurrentStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-AGREEDDATE", "AgreedDate");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-REASONPATIENTPLANDIFFMDT", "ReasonPatientPlanDiffMDT");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-HASASSOCIATEDMDTMEETING", "HasAssociatedMDTMeeting");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Oncology.voCancerCarePlan", "BO-1074100016-REASONFORREVISION", "ReasonForRevision");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-ID", "ID_CancerCarePlan");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-CAREPLANDATE", "CarePlanDate");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-CAREPLANINTENT", "CarePlanIntent");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-RECURRENCEINDICATOR", "RecurrenceIndicator");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-ISCURRENT", "IsCurrent");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-CAREPLANNOTES", "CarePlanNotes");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-CURRENTSTATUS", "CurrentStatus");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-AGREEDDATE", "AgreedDate");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-REASONPATIENTPLANDIFFMDT", "ReasonPatientPlanDiffMDT");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-HASASSOCIATEDMDTMEETING", "HasAssociatedMDTMeeting");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CarePlanRevise.__internal_x_context__voCancerCarePlan_" + componentIdentifier, "BO-1074100016-REASONFORREVISION", "ReasonForRevision");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
