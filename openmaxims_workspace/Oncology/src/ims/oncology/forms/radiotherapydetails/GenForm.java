//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.radiotherapydetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbCourseStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.TreatmentCourseStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentCourseStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentCourseStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentCourseStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.TreatmentCourseStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.TreatmentCourseStatus getValue()
				{
					return (ims.oncology.vo.lookups.TreatmentCourseStatus)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.TreatmentCourseStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReason2ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.RadiotherapyDelayReason getValue()
				{
					return (ims.oncology.vo.lookups.RadiotherapyDelayReason)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.RadiotherapyDelayReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReason1ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.RadiotherapyDelayReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.RadiotherapyDelayReason getValue()
				{
					return (ims.oncology.vo.lookups.RadiotherapyDelayReason)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.RadiotherapyDelayReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDiseaseTreatmentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.DiseaseStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.DiseaseStatus getValue()
				{
					return (ims.oncology.vo.lookups.DiseaseStatus)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.DiseaseStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDiseaseStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.DiseaseStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.DiseaseStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.DiseaseStatus getValue()
				{
					return (ims.oncology.vo.lookups.DiseaseStatus)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.DiseaseStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPerformanceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.medicaloncology.vo.lookups.PerformanceStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.medicaloncology.vo.lookups.PerformanceStatus getValue()
				{
					return (ims.medicaloncology.vo.lookups.PerformanceStatus)super.control.getValue();
				}
				public void setValue(ims.medicaloncology.vo.lookups.PerformanceStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.TreatmentHospital value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.TreatmentHospital value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.TreatmentHospital getValue()
				{
					return (ims.oncology.vo.lookups.TreatmentHospital)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.TreatmentHospital value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTreatIntentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.CancerTreatmentIntent value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.CancerTreatmentIntent value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.CancerTreatmentIntent getValue()
				{
					return (ims.oncology.vo.lookups.CancerTreatmentIntent)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.CancerTreatmentIntent value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRadiotherapyTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.RadiotherapyType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.RadiotherapyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.RadiotherapyType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.RadiotherapyType getValue()
				{
					return (ims.oncology.vo.lookups.RadiotherapyType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.RadiotherapyType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAnatomicalSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.AnatomicalTreatmentSite value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.AnatomicalTreatmentSite value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.AnatomicalTreatmentSite value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.AnatomicalTreatmentSite value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.AnatomicalTreatmentSite value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.AnatomicalTreatmentSite getValue()
				{
					return (ims.oncology.vo.lookups.AnatomicalTreatmentSite)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.AnatomicalTreatmentSite value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ConcurrentChemotherapyRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 248, 256, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "No", startTabIndex.intValue() + 1014);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 192, 256, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Yes", startTabIndex.intValue() + 1013);
				}
				public void setText(ConcurrentChemotherapyEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public ConcurrentChemotherapyEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return ConcurrentChemotherapyEnumeration.None;
						case 0: return ConcurrentChemotherapyEnumeration.rdoCChemotherapyNo;
						case 1: return ConcurrentChemotherapyEnumeration.rdoCChemotherapyYes;
					}
					return null;
				}
				public void setValue(ConcurrentChemotherapyEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(ConcurrentChemotherapyEnumeration.None.id);
				}
				public boolean isEnabled(ConcurrentChemotherapyEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(ConcurrentChemotherapyEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(ConcurrentChemotherapyEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(ConcurrentChemotherapyEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class ConcurrentChemotherapyEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static ConcurrentChemotherapyEnumeration None = new ConcurrentChemotherapyEnumeration(-1);
				public static ConcurrentChemotherapyEnumeration rdoCChemotherapyNo = new ConcurrentChemotherapyEnumeration(0);
				public static ConcurrentChemotherapyEnumeration rdoCChemotherapyYes = new ConcurrentChemotherapyEnumeration(1);
				private ConcurrentChemotherapyEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((ConcurrentChemotherapyEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 592, 8, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccPrescribingHCPForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1015, skipContextValidation);
				//ims.framework.Control m_ccPrescribingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(592), new Integer(8), new Integer(232), new Integer(20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1015), m_ccPrescribingHCPForm, instance1 } );
				ims.framework.Control m_ccPrescribingHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1015), m_ccPrescribingHCPForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPrescribingHCPControl);
				Menu[] menus1 = m_ccPrescribingHCPForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 192, 56, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_customConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 5, skipContextValidation);
				//ims.framework.Control m_customConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(192), new Integer(56), new Integer(240), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_customConsultantForm, instance2 } );
				ims.framework.Control m_customConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_customConsultantForm, instance2, Boolean.FALSE } );
				super.addControl(m_customConsultantControl);
				Menu[] menus2 = m_customConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 34, 103, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Prescribing Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 10, 99, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Prescribing HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 440, 250, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Course Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 440, 226, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Reason Delay 2:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 202, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Reason Delay 1:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 440, 178, 115, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Disease Treatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 440, 154, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Disease Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 440, 130, 123, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Treatment Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 440, 106, 151, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actual Duration (in days):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 159, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Concurrent Chemotherapy:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 106, 163, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Performance Status at DDT:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 55, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 154, 107, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Treatment Intent:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 116, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Radiotherapy Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 440, 58, 106, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actual Start Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 440, 82, 99, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actual End Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 178, 100, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Prescribed Dose:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 70, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 135, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date Decision to Treat:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 160, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Anatomical Treatment Site:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 202, 124, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Prescribed Fractions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 226, 122, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Prescribed Duration:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 592, 32, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 592, 56, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 592, 80, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 2018), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 192, 80, 120, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 592, 248, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbCourseStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 2025), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCourseStatusTemp);
				cmbCourseStatusComboBox cmbCourseStatus = (cmbCourseStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCourseStatusComboBox.class, m_cmbCourseStatusTemp);
				super.addComboBox(cmbCourseStatus);
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 592, 224, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbReason2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 2024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReason2Temp);
				cmbReason2ComboBox cmbReason2 = (cmbReason2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReason2ComboBox.class, m_cmbReason2Temp);
				super.addComboBox(cmbReason2);
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 592, 200, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbReason1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 2023), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReason1Temp);
				cmbReason1ComboBox cmbReason1 = (cmbReason1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReason1ComboBox.class, m_cmbReason1Temp);
				super.addComboBox(cmbReason1);
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 592, 176, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbDiseaseTreatmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 2022), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDiseaseTreatmentTemp);
				cmbDiseaseTreatmentComboBox cmbDiseaseTreatment = (cmbDiseaseTreatmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiseaseTreatmentComboBox.class, m_cmbDiseaseTreatmentTemp);
				super.addComboBox(cmbDiseaseTreatment);
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 592, 152, 216, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbDiseaseStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 2021), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDiseaseStatusTemp);
				cmbDiseaseStatusComboBox cmbDiseaseStatus = (cmbDiseaseStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDiseaseStatusComboBox.class, m_cmbDiseaseStatusTemp);
				super.addComboBox(cmbDiseaseStatus);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 192, 104, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbPerformanceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPerformanceTemp);
				cmbPerformanceComboBox cmbPerformance = (cmbPerformanceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPerformanceComboBox.class, m_cmbPerformanceTemp);
				super.addComboBox(cmbPerformance);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 192, 32, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 192, 152, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbTreatIntentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTreatIntentTemp);
				cmbTreatIntentComboBox cmbTreatIntent = (cmbTreatIntentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatIntentComboBox.class, m_cmbTreatIntentTemp);
				super.addComboBox(cmbTreatIntent);
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 192, 8, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbRadiotherapyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbRadiotherapyTypeTemp);
				cmbRadiotherapyTypeComboBox cmbRadiotherapyType = (cmbRadiotherapyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRadiotherapyTypeComboBox.class, m_cmbRadiotherapyTypeTemp);
				super.addComboBox(cmbRadiotherapyType);
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 192, 128, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbAnatomicalSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAnatomicalSiteTemp);
				cmbAnatomicalSiteComboBox cmbAnatomicalSite = (cmbAnatomicalSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnatomicalSiteComboBox.class, m_cmbAnatomicalSiteTemp);
				super.addComboBox(cmbAnatomicalSite);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 592, 128, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 592, 104, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 2019), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 192, 224, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 192, 200, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 192, 176, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
		
				// RadioButton Controls
				RadioButton tmpConcurrentChemotherapy = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpConcurrentChemotherapy);
				ConcurrentChemotherapyRadioButton ConcurrentChemotherapy = (ConcurrentChemotherapyRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(ConcurrentChemotherapyRadioButton.class, tmpConcurrentChemotherapy);
				ConcurrentChemotherapy.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(ConcurrentChemotherapy);
			}

			public ims.core.forms.mosquery.IComponent ccPrescribingHCP()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPrescribingHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPrescribingHCPVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPrescribingHCPVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPrescribingHCPEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPrescribingHCPEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent customConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lbl30()
			{
				return (Label)super.getControl(11);
			}
			public Label lbl2()
			{
				return (Label)super.getControl(18);
			}
			public Label lbl3()
			{
				return (Label)super.getControl(22);
			}
			public Label lbl4()
			{
				return (Label)super.getControl(23);
			}
			public DateControl dtePrescribing()
			{
				return (DateControl)super.getControl(24);
			}
			public DateControl dteStart()
			{
				return (DateControl)super.getControl(25);
			}
			public DateControl dteEnd()
			{
				return (DateControl)super.getControl(26);
			}
			public DateControl dteDecisionTreat()
			{
				return (DateControl)super.getControl(27);
			}
			public cmbCourseStatusComboBox cmbCourseStatus()
			{
				return (cmbCourseStatusComboBox)super.getComboBox(0);
			}
			public cmbReason2ComboBox cmbReason2()
			{
				return (cmbReason2ComboBox)super.getComboBox(1);
			}
			public cmbReason1ComboBox cmbReason1()
			{
				return (cmbReason1ComboBox)super.getComboBox(2);
			}
			public cmbDiseaseTreatmentComboBox cmbDiseaseTreatment()
			{
				return (cmbDiseaseTreatmentComboBox)super.getComboBox(3);
			}
			public cmbDiseaseStatusComboBox cmbDiseaseStatus()
			{
				return (cmbDiseaseStatusComboBox)super.getComboBox(4);
			}
			public cmbPerformanceComboBox cmbPerformance()
			{
				return (cmbPerformanceComboBox)super.getComboBox(5);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(6);
			}
			public cmbTreatIntentComboBox cmbTreatIntent()
			{
				return (cmbTreatIntentComboBox)super.getComboBox(7);
			}
			public cmbRadiotherapyTypeComboBox cmbRadiotherapyType()
			{
				return (cmbRadiotherapyTypeComboBox)super.getComboBox(8);
			}
			public cmbAnatomicalSiteComboBox cmbAnatomicalSite()
			{
				return (cmbAnatomicalSiteComboBox)super.getComboBox(9);
			}
			public IntBox intTreatmentCategory()
			{
				return (IntBox)super.getControl(38);
			}
			public IntBox intDuration()
			{
				return (IntBox)super.getControl(39);
			}
			public IntBox intPrescribedDuration()
			{
				return (IntBox)super.getControl(40);
			}
			public IntBox intPrescribedFractions()
			{
				return (IntBox)super.getControl(41);
			}
			public DecimalBox decPrescribedDose()
			{
				return (DecimalBox)super.getControl(42);
			}
			public ConcurrentChemotherapyRadioButton ConcurrentChemotherapy()
			{
				return (ConcurrentChemotherapyRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabTeletherapyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPlanningComplexityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.ComplexityGroup value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.ComplexityGroup value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.ComplexityGroup value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.ComplexityGroup value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.ComplexityGroup value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.ComplexityGroup getValue()
				{
					return (ims.oncology.vo.lookups.ComplexityGroup)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.ComplexityGroup value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSpecialTechniqueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.SpecialTechnique value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.SpecialTechnique value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.SpecialTechnique value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.SpecialTechnique value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.SpecialTechnique value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.SpecialTechnique getValue()
				{
					return (ims.oncology.vo.lookups.SpecialTechnique)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.SpecialTechnique value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbNoFieldsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.NoOfFields value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.NoOfFields value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.NoOfFields value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.NoOfFields value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.NoOfFields value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.NoOfFields getValue()
				{
					return (ims.oncology.vo.lookups.NoOfFields)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.NoOfFields value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBeamEnergyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BeamEnergy value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BeamEnergy value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BeamEnergy value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BeamEnergy value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BeamEnergy value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BeamEnergy getValue()
				{
					return (ims.oncology.vo.lookups.BeamEnergy)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BeamEnergy value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRadiationTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BeamType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BeamType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BeamType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BeamType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BeamType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BeamType getValue()
				{
					return (ims.oncology.vo.lookups.BeamType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BeamType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdPhaseDetailsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPhaseDetailsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColPhaseReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColPhaseReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColPhaseOpened()
				{
					super.row.showOpened(0);
				}
				public Integer getColPhase()
				{
					return (Integer)super.row.get(0);
				}
				public void setColPhase(Integer value)
				{
					super.row.set(0, value);
				}
				public void setCellColPhaseTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDoseReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDoseReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDoseOpened()
				{
					super.row.showOpened(1);
				}
				public Float getColDose()
				{
					return (Float)super.row.get(1);
				}
				public void setColDose(Float value)
				{
					super.row.set(1, value);
				}
				public void setCellColDoseTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColFractionsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColFractionsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColFractionsOpened()
				{
					super.row.showOpened(2);
				}
				public Integer getColFractions()
				{
					return (Integer)super.row.get(2);
				}
				public void setColFractions(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellColFractionsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.oncology.vo.TeletherapyPhaseVo getValue()
				{
					return (ims.oncology.vo.TeletherapyPhaseVo)super.row.getValue();
				}
				public void setValue(ims.oncology.vo.TeletherapyPhaseVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPhaseDetailsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPhaseDetailsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPhaseDetailsRow get(int index)
				{
					return new grdPhaseDetailsRow(super.collection.get(index));
				}
				public grdPhaseDetailsRow newRow()
				{
					return new grdPhaseDetailsRow(super.collection.newRow());
				}
				public grdPhaseDetailsRow newRow(boolean autoSelect)
				{
					return new grdPhaseDetailsRow(super.collection.newRow(autoSelect));
				}
				public grdPhaseDetailsRow newRowAt(int index)
				{
					return new grdPhaseDetailsRow(super.collection.newRowAt(index));
				}
				public grdPhaseDetailsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPhaseDetailsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPhaseDetailsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
				}
				public ims.oncology.vo.TeletherapyPhaseVoCollection getValues()
				{
					ims.oncology.vo.TeletherapyPhaseVoCollection listOfValues = new ims.oncology.vo.TeletherapyPhaseVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.oncology.vo.TeletherapyPhaseVo getValue()
				{
					return (ims.oncology.vo.TeletherapyPhaseVo)super.grid.getValue();
				}
				public void setValue(ims.oncology.vo.TeletherapyPhaseVo value)
				{
					super.grid.setValue(value);
				}
				public grdPhaseDetailsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPhaseDetailsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPhaseDetailsRowCollection getRows()
				{
					return new grdPhaseDetailsRowCollection(super.grid.getRows());
				}
				public grdPhaseDetailsRow getRowByValue(ims.oncology.vo.TeletherapyPhaseVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPhaseDetailsRow(row);
				}
				public void setColPhaseHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColPhaseHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDoseHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDoseHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColFractionsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColFractionsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdAdjacentFieldsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAdjacentFieldsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColPhaseReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColPhaseReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColPhaseOpened()
				{
					super.row.showOpened(0);
				}
				public Integer getColPhase()
				{
					return (Integer)super.row.get(0);
				}
				public void setColPhase(Integer value)
				{
					super.row.set(0, value);
				}
				public void setCellColPhaseTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDose1ReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDose1ReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDose1Opened()
				{
					super.row.showOpened(1);
				}
				public Float getColDose1()
				{
					return (Float)super.row.get(1);
				}
				public void setColDose1(Float value)
				{
					super.row.set(1, value);
				}
				public void setCellColDose1Tooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColTxt1ReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColTxt1ReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColTxt1Opened()
				{
					super.row.showOpened(2);
				}
				public Integer getColTxt1()
				{
					return (Integer)super.row.get(2);
				}
				public void setColTxt1(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellColTxt1Tooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDose2ReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDose2ReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDose2Opened()
				{
					super.row.showOpened(3);
				}
				public Float getColDose2()
				{
					return (Float)super.row.get(3);
				}
				public void setColDose2(Float value)
				{
					super.row.set(3, value);
				}
				public void setCellColDose2Tooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColTxt2ReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColTxt2ReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColTxt2Opened()
				{
					super.row.showOpened(4);
				}
				public Integer getColTxt2()
				{
					return (Integer)super.row.get(4);
				}
				public void setColTxt2(Integer value)
				{
					super.row.set(4, value);
				}
				public void setCellColTxt2Tooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.oncology.vo.AdjacentFieldPhaseVo getValue()
				{
					return (ims.oncology.vo.AdjacentFieldPhaseVo)super.row.getValue();
				}
				public void setValue(ims.oncology.vo.AdjacentFieldPhaseVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAdjacentFieldsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAdjacentFieldsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAdjacentFieldsRow get(int index)
				{
					return new grdAdjacentFieldsRow(super.collection.get(index));
				}
				public grdAdjacentFieldsRow newRow()
				{
					return new grdAdjacentFieldsRow(super.collection.newRow());
				}
				public grdAdjacentFieldsRow newRow(boolean autoSelect)
				{
					return new grdAdjacentFieldsRow(super.collection.newRow(autoSelect));
				}
				public grdAdjacentFieldsRow newRowAt(int index)
				{
					return new grdAdjacentFieldsRow(super.collection.newRowAt(index));
				}
				public grdAdjacentFieldsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAdjacentFieldsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAdjacentFieldsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
				}
				public ims.oncology.vo.AdjacentFieldPhaseVoCollection getValues()
				{
					ims.oncology.vo.AdjacentFieldPhaseVoCollection listOfValues = new ims.oncology.vo.AdjacentFieldPhaseVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.oncology.vo.AdjacentFieldPhaseVo getValue()
				{
					return (ims.oncology.vo.AdjacentFieldPhaseVo)super.grid.getValue();
				}
				public void setValue(ims.oncology.vo.AdjacentFieldPhaseVo value)
				{
					super.grid.setValue(value);
				}
				public grdAdjacentFieldsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAdjacentFieldsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAdjacentFieldsRowCollection getRows()
				{
					return new grdAdjacentFieldsRowCollection(super.grid.getRows());
				}
				public grdAdjacentFieldsRow getRowByValue(ims.oncology.vo.AdjacentFieldPhaseVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAdjacentFieldsRow(row);
				}
				public void setColPhaseHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColPhaseHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDose1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDose1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColTxt1HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColTxt1HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDose2HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDose2HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColTxt2HeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColTxt2HeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
		
			public static class MultiplePlanningRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 640, 256, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper46.getX(), anchoringHelper46.getY(), anchoringHelper46.getWidth(), "No", startTabIndex.intValue() + 2072);
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 576, 256, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper47.getX(), anchoringHelper47.getY(), anchoringHelper47.getWidth(), "Yes", startTabIndex.intValue() + 2071);
				}
				public void setText(MultiplePlanningEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public MultiplePlanningEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return MultiplePlanningEnumeration.None;
						case 0: return MultiplePlanningEnumeration.rdoMPNo;
						case 1: return MultiplePlanningEnumeration.rdoMPYes;
					}
					return null;
				}
				public void setValue(MultiplePlanningEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(MultiplePlanningEnumeration.None.id);
				}
				public boolean isEnabled(MultiplePlanningEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(MultiplePlanningEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(MultiplePlanningEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(MultiplePlanningEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class MultiplePlanningEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static MultiplePlanningEnumeration None = new MultiplePlanningEnumeration(-1);
				public static MultiplePlanningEnumeration rdoMPNo = new MultiplePlanningEnumeration(0);
				public static MultiplePlanningEnumeration rdoMPYes = new MultiplePlanningEnumeration(1);
				private MultiplePlanningEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((MultiplePlanningEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GeneralAnaestheticRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 640, 128, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper48.getX(), anchoringHelper48.getY(), anchoringHelper48.getWidth(), "No", startTabIndex.intValue() + 2066);
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 576, 128, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper49.getX(), anchoringHelper49.getY(), anchoringHelper49.getWidth(), "Yes", startTabIndex.intValue() + 2065);
				}
				public void setText(GeneralAnaestheticEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GeneralAnaestheticEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GeneralAnaestheticEnumeration.None;
						case 0: return GeneralAnaestheticEnumeration.rdoGANo;
						case 1: return GeneralAnaestheticEnumeration.rdoGAYes;
					}
					return null;
				}
				public void setValue(GeneralAnaestheticEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GeneralAnaestheticEnumeration.None.id);
				}
				public boolean isEnabled(GeneralAnaestheticEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GeneralAnaestheticEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GeneralAnaestheticEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GeneralAnaestheticEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GeneralAnaestheticEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GeneralAnaestheticEnumeration None = new GeneralAnaestheticEnumeration(-1);
				public static GeneralAnaestheticEnumeration rdoGANo = new GeneralAnaestheticEnumeration(0);
				public static GeneralAnaestheticEnumeration rdoGAYes = new GeneralAnaestheticEnumeration(1);
				private GeneralAnaestheticEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GeneralAnaestheticEnumeration)o).id;
				}
				private int id;
			}
		
			public static class PreOperativeRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 640, 104, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "No", startTabIndex.intValue() + 2063);
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 576, 104, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "Yes", startTabIndex.intValue() + 2061);
				}
				public void setText(PreOperativeEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public PreOperativeEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return PreOperativeEnumeration.None;
						case 0: return PreOperativeEnumeration.rdoPONo;
						case 1: return PreOperativeEnumeration.rdoPOYes;
					}
					return null;
				}
				public void setValue(PreOperativeEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(PreOperativeEnumeration.None.id);
				}
				public boolean isEnabled(PreOperativeEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(PreOperativeEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(PreOperativeEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(PreOperativeEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class PreOperativeEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static PreOperativeEnumeration None = new PreOperativeEnumeration(-1);
				public static PreOperativeEnumeration rdoPONo = new PreOperativeEnumeration(0);
				public static PreOperativeEnumeration rdoPOYes = new PreOperativeEnumeration(1);
				private PreOperativeEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((PreOperativeEnumeration)o).id;
				}
				private int id;
			}
		
			public static class HyperfractionationRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 640, 48, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper52.getX(), anchoringHelper52.getY(), anchoringHelper52.getWidth(), "No", startTabIndex.intValue() + 2057);
					RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 576, 48, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper53.getX(), anchoringHelper53.getY(), anchoringHelper53.getWidth(), "Yes", startTabIndex.intValue() + 2055);
				}
				public void setText(HyperfractionationEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public HyperfractionationEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return HyperfractionationEnumeration.None;
						case 0: return HyperfractionationEnumeration.rdoHNo;
						case 1: return HyperfractionationEnumeration.rdoHYes;
					}
					return null;
				}
				public void setValue(HyperfractionationEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(HyperfractionationEnumeration.None.id);
				}
				public boolean isEnabled(HyperfractionationEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(HyperfractionationEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(HyperfractionationEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(HyperfractionationEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class HyperfractionationEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static HyperfractionationEnumeration None = new HyperfractionationEnumeration(-1);
				public static HyperfractionationEnumeration rdoHNo = new HyperfractionationEnumeration(0);
				public static HyperfractionationEnumeration rdoHYes = new HyperfractionationEnumeration(1);
				private HyperfractionationEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((HyperfractionationEnumeration)o).id;
				}
				private int id;
			}
		
			public static class RetreatmentRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 640, 24, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper54.getX(), anchoringHelper54.getY(), anchoringHelper54.getWidth(), "No", startTabIndex.intValue() + 2053);
					RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 576, 24, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper55.getX(), anchoringHelper55.getY(), anchoringHelper55.getWidth(), "Yes", startTabIndex.intValue() + 2051);
				}
				public void setText(RetreatmentEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public RetreatmentEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return RetreatmentEnumeration.None;
						case 0: return RetreatmentEnumeration.rdoRNo;
						case 1: return RetreatmentEnumeration.rdoRYes;
					}
					return null;
				}
				public void setValue(RetreatmentEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(RetreatmentEnumeration.None.id);
				}
				public boolean isEnabled(RetreatmentEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(RetreatmentEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(RetreatmentEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(RetreatmentEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class RetreatmentEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static RetreatmentEnumeration None = new RetreatmentEnumeration(-1);
				public static RetreatmentEnumeration rdoRNo = new RetreatmentEnumeration(0);
				public static RetreatmentEnumeration rdoRYes = new RetreatmentEnumeration(1);
				private RetreatmentEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((RetreatmentEnumeration)o).id;
				}
				private int id;
			}
		
			public static class AdjacentFieldsRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 348, 274, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper56.getX(), anchoringHelper56.getY(), anchoringHelper56.getWidth(), "No", startTabIndex.intValue() + 2047);
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 292, 274, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper57.getX(), anchoringHelper57.getY(), anchoringHelper57.getWidth(), "Yes", startTabIndex.intValue() + 2045);
				}
				public void setText(AdjacentFieldsEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public AdjacentFieldsEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return AdjacentFieldsEnumeration.None;
						case 0: return AdjacentFieldsEnumeration.rdoAFNo;
						case 1: return AdjacentFieldsEnumeration.rdoAFYes;
					}
					return null;
				}
				public void setValue(AdjacentFieldsEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(AdjacentFieldsEnumeration.None.id);
				}
				public boolean isEnabled(AdjacentFieldsEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(AdjacentFieldsEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(AdjacentFieldsEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(AdjacentFieldsEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class AdjacentFieldsEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static AdjacentFieldsEnumeration None = new AdjacentFieldsEnumeration(-1);
				public static AdjacentFieldsEnumeration rdoAFNo = new AdjacentFieldsEnumeration(0);
				public static AdjacentFieldsEnumeration rdoAFYes = new AdjacentFieldsEnumeration(1);
				private AdjacentFieldsEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((AdjacentFieldsEnumeration)o).id;
				}
				private int id;
			}
		
			public static class SupraclavicularDetailsRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 348, 231, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper58.getX(), anchoringHelper58.getY(), anchoringHelper58.getWidth(), "No", startTabIndex.intValue() + 2039);
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 292, 231, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper59.getX(), anchoringHelper59.getY(), anchoringHelper59.getWidth(), "Yes", startTabIndex.intValue() + 2037);
				}
				public void setText(SupraclavicularDetailsEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public SupraclavicularDetailsEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return SupraclavicularDetailsEnumeration.None;
						case 0: return SupraclavicularDetailsEnumeration.rdoSDNo;
						case 1: return SupraclavicularDetailsEnumeration.rdoSDYes;
					}
					return null;
				}
				public void setValue(SupraclavicularDetailsEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(SupraclavicularDetailsEnumeration.None.id);
				}
				public boolean isEnabled(SupraclavicularDetailsEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(SupraclavicularDetailsEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(SupraclavicularDetailsEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(SupraclavicularDetailsEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class SupraclavicularDetailsEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static SupraclavicularDetailsEnumeration None = new SupraclavicularDetailsEnumeration(-1);
				public static SupraclavicularDetailsEnumeration rdoSDNo = new SupraclavicularDetailsEnumeration(0);
				public static SupraclavicularDetailsEnumeration rdoSDYes = new SupraclavicularDetailsEnumeration(1);
				private SupraclavicularDetailsEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((SupraclavicularDetailsEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 440, 226, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Planning Complexity:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 440, 128, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "General Anaesthetic:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 440, 104, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Pre Operative:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 440, 74, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Special Technique:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hyperfractionation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 440, 24, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Retreatment:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Adjacent Fields:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 220, 253, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Fractions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 8, 253, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Dose:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 8, 231, 233, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Anterior Split or Supraclavicular Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 8, 140, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Prescription Point:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Phase Details", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 440, 256, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Multiple Planning:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 440, 154, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Radiation Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 440, 178, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Beam Energy:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 440, 202, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Number of Fields:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 8, 163, 108, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total Actual Dose:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 8, 209, 157, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total Actual No. of Phases:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 186, 135, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total  Actual Fractions:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 576, 224, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbPlanningComplexityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 2070), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPlanningComplexityTemp);
				cmbPlanningComplexityComboBox cmbPlanningComplexity = (cmbPlanningComplexityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlanningComplexityComboBox.class, m_cmbPlanningComplexityTemp);
				super.addComboBox(cmbPlanningComplexity);
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 576, 72, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbSpecialTechniqueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 2059), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialTechniqueTemp);
				cmbSpecialTechniqueComboBox cmbSpecialTechnique = (cmbSpecialTechniqueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialTechniqueComboBox.class, m_cmbSpecialTechniqueTemp);
				super.addComboBox(cmbSpecialTechnique);
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 576, 200, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbNoFieldsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 2069), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbNoFieldsTemp);
				cmbNoFieldsComboBox cmbNoFields = (cmbNoFieldsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbNoFieldsComboBox.class, m_cmbNoFieldsTemp);
				super.addComboBox(cmbNoFields);
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 576, 176, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbBeamEnergyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 2068), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBeamEnergyTemp);
				cmbBeamEnergyComboBox cmbBeamEnergy = (cmbBeamEnergyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBeamEnergyComboBox.class, m_cmbBeamEnergyTemp);
				super.addComboBox(cmbBeamEnergy);
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 576, 152, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbRadiationTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 2067), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRadiationTypeTemp);
				cmbRadiationTypeComboBox cmbRadiationType = (cmbRadiationTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRadiationTypeComboBox.class, m_cmbRadiationTypeTemp);
				super.addComboBox(cmbRadiationType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 8, 15, 408, 121, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdPhaseDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 2027), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPhaseDetailsTemp);
				grdPhaseDetailsGrid grdPhaseDetails = (grdPhaseDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhaseDetailsGrid.class, m_grdPhaseDetailsTemp);
				grdPhaseDetails.addIntColumn("Phase", 0, 0, 100, false, true, null, false, 0, true);
				grdPhaseDetails.addDecimalColumn("Dose", 0, 0, 100, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdPhaseDetails.addIntColumn("Fractions", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grdPhaseDetails);
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 294, 408, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdAdjacentFieldsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 2049), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAdjacentFieldsTemp);
				grdAdjacentFieldsGrid grdAdjacentFields = (grdAdjacentFieldsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAdjacentFieldsGrid.class, m_grdAdjacentFieldsTemp);
				grdAdjacentFields.addIntColumn("Phase", 0, 0, 60, false, true, null, false, 0, true);
				grdAdjacentFields.addDecimalColumn("Dose 1", 0, 0, 60, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdAdjacentFields.addIntColumn("No. of Txt 1", 0, 0, 80, false, true, null, false, 0, true);
				grdAdjacentFields.addDecimalColumn("Dose 2", 0, 0, 60, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdAdjacentFields.addIntColumn("No. of Txt 2", 0, 0, -1, false, true, null, false, 0, true);
				super.addGrid(grdAdjacentFields);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 292, 251, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 2043), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 292, 138, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 2029), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 292, 184, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 2033), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 292, 207, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 2035), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 56, 251, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 2041), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 292, 161, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 2031), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
		
				// RadioButton Controls
				RadioButton tmpMultiplePlanning = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpMultiplePlanning);
				MultiplePlanningRadioButton MultiplePlanning = (MultiplePlanningRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(MultiplePlanningRadioButton.class, tmpMultiplePlanning);
				MultiplePlanning.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(MultiplePlanning);
				RadioButton tmpGeneralAnaesthetic = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpGeneralAnaesthetic);
				GeneralAnaestheticRadioButton GeneralAnaesthetic = (GeneralAnaestheticRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GeneralAnaestheticRadioButton.class, tmpGeneralAnaesthetic);
				GeneralAnaesthetic.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GeneralAnaesthetic);
				RadioButton tmpPreOperative = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpPreOperative);
				PreOperativeRadioButton PreOperative = (PreOperativeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(PreOperativeRadioButton.class, tmpPreOperative);
				PreOperative.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(PreOperative);
				RadioButton tmpHyperfractionation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpHyperfractionation);
				HyperfractionationRadioButton Hyperfractionation = (HyperfractionationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(HyperfractionationRadioButton.class, tmpHyperfractionation);
				Hyperfractionation.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Hyperfractionation);
				RadioButton tmpRetreatment = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpRetreatment);
				RetreatmentRadioButton Retreatment = (RetreatmentRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(RetreatmentRadioButton.class, tmpRetreatment);
				Retreatment.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Retreatment);
				RadioButton tmpAdjacentFields = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpAdjacentFields);
				AdjacentFieldsRadioButton AdjacentFields = (AdjacentFieldsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(AdjacentFieldsRadioButton.class, tmpAdjacentFields);
				AdjacentFields.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(AdjacentFields);
				RadioButton tmpSupraclavicularDetails = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpSupraclavicularDetails);
				SupraclavicularDetailsRadioButton SupraclavicularDetails = (SupraclavicularDetailsRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(SupraclavicularDetailsRadioButton.class, tmpSupraclavicularDetails);
				SupraclavicularDetails.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(SupraclavicularDetails);
			}

			public Label lbl14()
			{
				return (Label)super.getControl(0);
			}
			public Label lbl13()
			{
				return (Label)super.getControl(1);
			}
			public Label lbl12()
			{
				return (Label)super.getControl(2);
			}
			public Label lbl47()
			{
				return (Label)super.getControl(3);
			}
			public Label lbl46()
			{
				return (Label)super.getControl(4);
			}
			public Label lbl45()
			{
				return (Label)super.getControl(5);
			}
			public Label lbl44()
			{
				return (Label)super.getControl(6);
			}
			public Label lbl43()
			{
				return (Label)super.getControl(7);
			}
			public Label lbl42()
			{
				return (Label)super.getControl(8);
			}
			public Label lbl41()
			{
				return (Label)super.getControl(9);
			}
			public Label lbl40()
			{
				return (Label)super.getControl(10);
			}
			public Label lbl39()
			{
				return (Label)super.getControl(11);
			}
			public Label lbl18()
			{
				return (Label)super.getControl(12);
			}
			public Label lbl17()
			{
				return (Label)super.getControl(13);
			}
			public Label lbl16()
			{
				return (Label)super.getControl(14);
			}
			public Label lbl15()
			{
				return (Label)super.getControl(15);
			}
			public Label lbl9()
			{
				return (Label)super.getControl(16);
			}
			public Label lbl10()
			{
				return (Label)super.getControl(17);
			}
			public Label lbl11()
			{
				return (Label)super.getControl(18);
			}
			public cmbPlanningComplexityComboBox cmbPlanningComplexity()
			{
				return (cmbPlanningComplexityComboBox)super.getComboBox(0);
			}
			public cmbSpecialTechniqueComboBox cmbSpecialTechnique()
			{
				return (cmbSpecialTechniqueComboBox)super.getComboBox(1);
			}
			public cmbNoFieldsComboBox cmbNoFields()
			{
				return (cmbNoFieldsComboBox)super.getComboBox(2);
			}
			public cmbBeamEnergyComboBox cmbBeamEnergy()
			{
				return (cmbBeamEnergyComboBox)super.getComboBox(3);
			}
			public cmbRadiationTypeComboBox cmbRadiationType()
			{
				return (cmbRadiationTypeComboBox)super.getComboBox(4);
			}
			public grdPhaseDetailsGrid grdPhaseDetails()
			{
				return (grdPhaseDetailsGrid)super.getGrid(0);
			}
			public grdAdjacentFieldsGrid grdAdjacentFields()
			{
				return (grdAdjacentFieldsGrid)super.getGrid(1);
			}
			public IntBox intFractions()
			{
				return (IntBox)super.getControl(26);
			}
			public IntBox intPrescriptionPoint()
			{
				return (IntBox)super.getControl(27);
			}
			public IntBox intActualFractions()
			{
				return (IntBox)super.getControl(28);
			}
			public IntBox intNoofPhases()
			{
				return (IntBox)super.getControl(29);
			}
			public DecimalBox decDose()
			{
				return (DecimalBox)super.getControl(30);
			}
			public DecimalBox decActualDose()
			{
				return (DecimalBox)super.getControl(31);
			}
			public MultiplePlanningRadioButton MultiplePlanning()
			{
				return (MultiplePlanningRadioButton)super.getRadioButton(0);
			}
			public GeneralAnaestheticRadioButton GeneralAnaesthetic()
			{
				return (GeneralAnaestheticRadioButton)super.getRadioButton(1);
			}
			public PreOperativeRadioButton PreOperative()
			{
				return (PreOperativeRadioButton)super.getRadioButton(2);
			}
			public HyperfractionationRadioButton Hyperfractionation()
			{
				return (HyperfractionationRadioButton)super.getRadioButton(3);
			}
			public RetreatmentRadioButton Retreatment()
			{
				return (RetreatmentRadioButton)super.getRadioButton(4);
			}
			public AdjacentFieldsRadioButton AdjacentFields()
			{
				return (AdjacentFieldsRadioButton)super.getRadioButton(5);
			}
			public SupraclavicularDetailsRadioButton SupraclavicularDetails()
			{
				return (SupraclavicularDetailsRadioButton)super.getRadioButton(6);
			}
		}
		public static class tabBrachytherapyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbUnitComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachyTxType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTxType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTxType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTxType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachyTxType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachyTxType getValue()
				{
					return (ims.oncology.vo.lookups.BrachyTxType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachyTxType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPrescriptionPointComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint getValue()
				{
					return (ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBrachytherapyTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachyTherapyType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachyTherapyType getValue()
				{
					return (ims.oncology.vo.lookups.BrachyTherapyType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachyTherapyType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPatientTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPatientType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPatientType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPatientType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyPatientType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachytherapyPatientType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachytherapyPatientType getValue()
				{
					return (ims.oncology.vo.lookups.BrachytherapyPatientType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachytherapyPatientType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDeliveryTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachytherapyDeliveryType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyDeliveryType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyDeliveryType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachytherapyDeliveryType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachytherapyDeliveryType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachytherapyDeliveryType getValue()
				{
					return (ims.oncology.vo.lookups.BrachytherapyDeliveryType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachytherapyDeliveryType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbUnsealedSourceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.UnsealedSourceType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.UnsealedSourceType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.UnsealedSourceType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.UnsealedSourceType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.UnsealedSourceType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.UnsealedSourceType getValue()
				{
					return (ims.oncology.vo.lookups.UnsealedSourceType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.UnsealedSourceType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbIsotypeTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachyTherapyIsotopeType getValue()
				{
					return (ims.oncology.vo.lookups.BrachyTherapyIsotopeType)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachyTherapyIsotopeType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbActualDoseRateComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyDoseRate value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyDoseRate value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyDoseRate value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.BrachyTherapyDoseRate value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.BrachyTherapyDoseRate value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.BrachyTherapyDoseRate getValue()
				{
					return (ims.oncology.vo.lookups.BrachyTherapyDoseRate)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.BrachyTherapyDoseRate value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdDosesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDosesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Date getColDate()
				{
					return (ims.framework.utils.Date)super.row.get(0);
				}
				public void setColDate(ims.framework.utils.Date value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDoseReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDoseReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDoseOpened()
				{
					super.row.showOpened(1);
				}
				public Float getColDose()
				{
					return (Float)super.row.get(1);
				}
				public void setColDose(Float value)
				{
					super.row.set(1, value);
				}
				public void setCellColDoseTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAnaestheticReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAnaestheticReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAnaestheticOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColAnaesthetic()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColAnaesthetic(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColAnaestheticTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.oncology.vo.BrachyTxTreatmentDetailsVo getValue()
				{
					return (ims.oncology.vo.BrachyTxTreatmentDetailsVo)super.row.getValue();
				}
				public void setValue(ims.oncology.vo.BrachyTxTreatmentDetailsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDosesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDosesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDosesRow get(int index)
				{
					return new grdDosesRow(super.collection.get(index));
				}
				public grdDosesRow newRow()
				{
					return new grdDosesRow(super.collection.newRow());
				}
				public grdDosesRow newRow(boolean autoSelect)
				{
					return new grdDosesRow(super.collection.newRow(autoSelect));
				}
				public grdDosesRow newRowAt(int index)
				{
					return new grdDosesRow(super.collection.newRowAt(index));
				}
				public grdDosesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDosesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDosesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.oncology.vo.BrachyTxTreatmentDetailsVoCollection getValues()
				{
					ims.oncology.vo.BrachyTxTreatmentDetailsVoCollection listOfValues = new ims.oncology.vo.BrachyTxTreatmentDetailsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.oncology.vo.BrachyTxTreatmentDetailsVo getValue()
				{
					return (ims.oncology.vo.BrachyTxTreatmentDetailsVo)super.grid.getValue();
				}
				public void setValue(ims.oncology.vo.BrachyTxTreatmentDetailsVo value)
				{
					super.grid.setValue(value);
				}
				public grdDosesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDosesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDosesRowCollection getRows()
				{
					return new grdDosesRowCollection(super.grid.getRows());
				}
				public grdDosesRow getRowByValue(ims.oncology.vo.BrachyTxTreatmentDetailsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDosesRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDoseHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDoseHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAnaestheticHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAnaestheticHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 408, 18, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Individual Treatment details", new Integer(1), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Unit:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Prescription Point:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 122, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Brachytherapy Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 16, 341, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total Dose:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 440, 154, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Patient Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 440, 82, 86, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Delivery Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 440, 10, 176, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actual Number of Treatments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 440, 130, 103, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Unsealed Source:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 440, 106, 82, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Isotype Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 440, 58, 144, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Treatment length (cms):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 440, 34, 105, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actual Dose Rate:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 176, 96, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbUnitTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 2078), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbUnitTemp);
				cmbUnitComboBox cmbUnit = (cmbUnitComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUnitComboBox.class, m_cmbUnitTemp);
				super.addComboBox(cmbUnit);
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 176, 32, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbPrescriptionPointTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 2076), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPrescriptionPointTemp);
				cmbPrescriptionPointComboBox cmbPrescriptionPoint = (cmbPrescriptionPointComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPrescriptionPointComboBox.class, m_cmbPrescriptionPointTemp);
				super.addComboBox(cmbPrescriptionPoint);
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 176, 8, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbBrachytherapyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 2074), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbBrachytherapyTypeTemp);
				cmbBrachytherapyTypeComboBox cmbBrachytherapyType = (cmbBrachytherapyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBrachytherapyTypeComboBox.class, m_cmbBrachytherapyTypeTemp);
				super.addComboBox(cmbBrachytherapyType);
				RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 632, 152, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbPatientTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 2100), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatientTypeTemp);
				cmbPatientTypeComboBox cmbPatientType = (cmbPatientTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientTypeComboBox.class, m_cmbPatientTypeTemp);
				super.addComboBox(cmbPatientType);
				RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 632, 80, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbDeliveryTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), new Integer(startTabIndex.intValue() + 2093), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDeliveryTypeTemp);
				cmbDeliveryTypeComboBox cmbDeliveryType = (cmbDeliveryTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDeliveryTypeComboBox.class, m_cmbDeliveryTypeTemp);
				super.addComboBox(cmbDeliveryType);
				RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 632, 128, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbUnsealedSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), new Integer(startTabIndex.intValue() + 2098), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbUnsealedSourceTemp);
				cmbUnsealedSourceComboBox cmbUnsealedSource = (cmbUnsealedSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUnsealedSourceComboBox.class, m_cmbUnsealedSourceTemp);
				super.addComboBox(cmbUnsealedSource);
				RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 632, 104, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbIsotypeTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), new Integer(startTabIndex.intValue() + 2096), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbIsotypeTypeTemp);
				cmbIsotypeTypeComboBox cmbIsotypeType = (cmbIsotypeTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIsotypeTypeComboBox.class, m_cmbIsotypeTypeTemp);
				super.addComboBox(cmbIsotypeType);
				RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 632, 32, 176, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbActualDoseRateTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), new Integer(startTabIndex.intValue() + 2087), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbActualDoseRateTemp);
				cmbActualDoseRateComboBox cmbActualDoseRate = (cmbActualDoseRateComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActualDoseRateComboBox.class, m_cmbActualDoseRateTemp);
				super.addComboBox(cmbActualDoseRate);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 16, 126, 392, 205, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Grid m_grdDosesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 2080), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDosesTemp);
				grdDosesGrid grdDoses = (grdDosesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDosesGrid.class, m_grdDosesTemp);
				grdDoses.addDateColumn("Date", 0, 0, 100, false, true, null, false, 0, true);
				grdDoses.addDecimalColumn("Dose", 0, 0, 100, false, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 0, true);
				grdDoses.addBoolColumn("G. Anaesthetic", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdDoses);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 632, 8, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 2084), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 632, 56, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 2090), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// DecimalBox Controls
				RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 184, 339, 100, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 2082), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
			}

			public Label lbl49()
			{
				return (Label)super.getControl(1);
			}
			public Label lbl48()
			{
				return (Label)super.getControl(2);
			}
			public Label lbl27()
			{
				return (Label)super.getControl(3);
			}
			public Label lbl29()
			{
				return (Label)super.getControl(4);
			}
			public Label lbl23()
			{
				return (Label)super.getControl(6);
			}
			public Label lbl24()
			{
				return (Label)super.getControl(7);
			}
			public Label lbl22()
			{
				return (Label)super.getControl(8);
			}
			public Label lbl21()
			{
				return (Label)super.getControl(9);
			}
			public Label lbl20()
			{
				return (Label)super.getControl(10);
			}
			public Label lbl19()
			{
				return (Label)super.getControl(11);
			}
			public cmbUnitComboBox cmbUnit()
			{
				return (cmbUnitComboBox)super.getComboBox(0);
			}
			public cmbPrescriptionPointComboBox cmbPrescriptionPoint()
			{
				return (cmbPrescriptionPointComboBox)super.getComboBox(1);
			}
			public cmbBrachytherapyTypeComboBox cmbBrachytherapyType()
			{
				return (cmbBrachytherapyTypeComboBox)super.getComboBox(2);
			}
			public cmbPatientTypeComboBox cmbPatientType()
			{
				return (cmbPatientTypeComboBox)super.getComboBox(3);
			}
			public cmbDeliveryTypeComboBox cmbDeliveryType()
			{
				return (cmbDeliveryTypeComboBox)super.getComboBox(4);
			}
			public cmbUnsealedSourceComboBox cmbUnsealedSource()
			{
				return (cmbUnsealedSourceComboBox)super.getComboBox(5);
			}
			public cmbIsotypeTypeComboBox cmbIsotypeType()
			{
				return (cmbIsotypeTypeComboBox)super.getComboBox(6);
			}
			public cmbActualDoseRateComboBox cmbActualDoseRate()
			{
				return (cmbActualDoseRateComboBox)super.getComboBox(7);
			}
			public grdDosesGrid grdDoses()
			{
				return (grdDosesGrid)super.getGrid(0);
			}
			public IntBox intActualNoofTreatments()
			{
				return (IntBox)super.getControl(21);
			}
			public IntBox intTreatmentLength()
			{
				return (IntBox)super.getControl(22);
			}
			public DecimalBox decTotalDose()
			{
				return (DecimalBox)super.getControl(23);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 8, 201, 832, 395, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 395);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper116.getWidth(), anchoringHelper116.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 8, 201, 832, 395, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabTeletherapy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Teletherapy", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTeletherapyContainer m_tabTeletherapyContainer = (tabTeletherapyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTeletherapyContainer.class, m_tabTeletherapy, factory);
			super.addContainer(m_tabTeletherapy, m_tabTeletherapyContainer);
			ims.framework.utils.SizeInfo m_tabTeletherapyDesignSize = new ims.framework.utils.SizeInfo(832, 395);
			ims.framework.utils.SizeInfo m_tabTeletherapyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper117.getWidth(), anchoringHelper117.getHeight());
			m_tabTeletherapyContainer.setContext(form, appForm, m_tabTeletherapy, loader, contextMenus, startControlID, m_tabTeletherapyDesignSize, m_tabTeletherapyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 8, 201, 832, 395, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabBrachytherapy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Brachytherapy", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabBrachytherapyContainer m_tabBrachytherapyContainer = (tabBrachytherapyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBrachytherapyContainer.class, m_tabBrachytherapy, factory);
			super.addContainer(m_tabBrachytherapy, m_tabBrachytherapyContainer);
			ims.framework.utils.SizeInfo m_tabBrachytherapyDesignSize = new ims.framework.utils.SizeInfo(832, 395);
			ims.framework.utils.SizeInfo m_tabBrachytherapyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper118.getWidth(), anchoringHelper118.getHeight());
			m_tabBrachytherapyContainer.setContext(form, appForm, m_tabBrachytherapy, loader, contextMenus, startControlID, m_tabBrachytherapyDesignSize, m_tabBrachytherapyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDetails().setVisible(false);
			tabTeletherapy().setVisible(false);
			tabBrachytherapy().setVisible(false);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabTeletherapyEnabled(boolean value)
		{
			tabTeletherapy().setEnabled(value);
		}
		public void settabBrachytherapyEnabled(boolean value)
		{
			tabBrachytherapy().setEnabled(value);
		}
		public void showtabDetails()
		{
			tabTeletherapy().setVisible(false);
			tabBrachytherapy().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabTeletherapy()
		{
			tabDetails().setVisible(false);
			tabBrachytherapy().setVisible(false);
			tabTeletherapy().setVisible(true);
		}
		public void showtabBrachytherapy()
		{
			tabDetails().setVisible(false);
			tabTeletherapy().setVisible(false);
			tabBrachytherapy().setVisible(true);
		}

		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(0);
		}
		public tabTeletherapyContainer tabTeletherapy()
		{
			return (tabTeletherapyContainer)super.layers.get(1);
		}
		public tabBrachytherapyContainer tabBrachytherapy()
		{
			return (tabBrachytherapyContainer)super.layers.get(2);
		}
	}
	public static class gridRadiotherapyDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridRadiotherapyDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolStartDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolStartDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getcolStartDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setcolStartDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellcolStartDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolTypeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolTypeOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolType()
		{
			return (String)super.row.get(1);
		}
		public void setcolType(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolTypeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(2);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolDectotrestReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolDectotrestReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolDectotrestOpened()
		{
			super.row.showOpened(3);
		}
		public ims.framework.utils.Date getcolDectotrest()
		{
			return (ims.framework.utils.Date)super.row.get(3);
		}
		public void setcolDectotrest(ims.framework.utils.Date value)
		{
			super.row.set(3, value);
		}
		public void setCellcolDectotrestTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolTreatSiteReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolTreatSiteReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolTreatSiteOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolTreatSite()
		{
			return (String)super.row.get(4);
		}
		public void setcolTreatSite(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolTreatSiteTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolIntentReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolIntentReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolIntentOpened()
		{
			super.row.showOpened(5);
		}
		public String getcolIntent()
		{
			return (String)super.row.get(5);
		}
		public void setcolIntent(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolIntentTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.oncology.vo.RadiotherapyDetailsShortVo getValue()
		{
			return (ims.oncology.vo.RadiotherapyDetailsShortVo)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.RadiotherapyDetailsShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridRadiotherapyDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridRadiotherapyDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridRadiotherapyDetailsRow get(int index)
		{
			return new gridRadiotherapyDetailsRow(super.collection.get(index));
		}
		public gridRadiotherapyDetailsRow newRow()
		{
			return new gridRadiotherapyDetailsRow(super.collection.newRow());
		}
		public gridRadiotherapyDetailsRow newRow(boolean autoSelect)
		{
			return new gridRadiotherapyDetailsRow(super.collection.newRow(autoSelect));
		}
		public gridRadiotherapyDetailsRow newRowAt(int index)
		{
			return new gridRadiotherapyDetailsRow(super.collection.newRowAt(index));
		}
		public gridRadiotherapyDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new gridRadiotherapyDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridRadiotherapyDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.oncology.vo.RadiotherapyDetailsShortVoCollection getValues()
		{
			ims.oncology.vo.RadiotherapyDetailsShortVoCollection listOfValues = new ims.oncology.vo.RadiotherapyDetailsShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.oncology.vo.RadiotherapyDetailsShortVo getValue()
		{
			return (ims.oncology.vo.RadiotherapyDetailsShortVo)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.RadiotherapyDetailsShortVo value)
		{
			super.grid.setValue(value);
		}
		public gridRadiotherapyDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridRadiotherapyDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridRadiotherapyDetailsRowCollection getRows()
		{
			return new gridRadiotherapyDetailsRowCollection(super.grid.getRows());
		}
		public gridRadiotherapyDetailsRow getRowByValue(ims.oncology.vo.RadiotherapyDetailsShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridRadiotherapyDetailsRow(row);
		}
		public void setcolStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolDectotrestHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolDectotrestHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolTreatSiteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolTreatSiteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolIntentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolIntentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuADDItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuEDITItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuRadioTherapyDetailsPhaseMenu);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuADDItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuEDITItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuRadioTherapyDetailsAdjacentMenu);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuADDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuADDItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuEDITItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenuREMOVEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuRadioTherapyDetailsDoseMenu);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsMenuNEWItem = factory.createMenuItem(startControlID.intValue() + 10, "New", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsMenuNEWItem);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuRadioTherapyDetailsMenu.add(contextMenus.Oncology.contextMenuRadioTherapyDetailsMenuEDITItem);
		form.registerMenu(contextMenus.Oncology.contextMenuRadioTherapyDetailsMenu);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 2110), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 675, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 2107), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 92, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 2104), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), new Integer(startTabIndex.intValue() + 2101), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 191, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_gridRadiotherapyDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuRadioTherapyDetailsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_gridRadiotherapyDetailsTemp);
		gridRadiotherapyDetailsGrid gridRadiotherapyDetails = (gridRadiotherapyDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(gridRadiotherapyDetailsGrid.class, m_gridRadiotherapyDetailsTemp);
		gridRadiotherapyDetails.addDateColumn("Start Date", 0, 0, 70, true, true, null, false, 0, true);
		gridRadiotherapyDetails.addStringColumn("Type", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridRadiotherapyDetails.addStringColumn("Consultant", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridRadiotherapyDetails.addDateColumn("Decision to Treat", 0, 0, 120, true, true, null, false, 0, true);
		gridRadiotherapyDetails.addStringColumn("Treatment Site", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridRadiotherapyDetails.addStringColumn("Treatment Intent", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridRadiotherapyDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button bCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button bSave()
	{
		return (Button)super.getControl(4);
	}
	public Button bEdit()
	{
		return (Button)super.getControl(5);
	}
	public Button bNew()
	{
		return (Button)super.getControl(6);
	}
	public gridRadiotherapyDetailsGrid gridRadiotherapyDetails()
	{
		return (gridRadiotherapyDetailsGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Oncology = new OncologyForms();
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				RadioTherapyDetails = new LocalFormName(125118);
				PatientsTreatmentPlanActionsDialog = new LocalFormName(125127);
			}
			public final FormName RadioTherapyDetails;
			public final FormName PatientsTreatmentPlanActionsDialog;
		}

		public OncologyForms Oncology;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.RadiotherapyDetailsVo getSelectedRecord()
		{
			return (ims.oncology.vo.RadiotherapyDetailsVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.oncology.vo.RadiotherapyDetailsVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class RadioTherapyDetailsPhaseMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDIT = 2;
				public static final int REMOVE = 3;
			}
			public void disableAllRadioTherapyDetailsPhaseMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsPhaseMenuADDItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsPhaseMenuEDITItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllRadioTherapyDetailsPhaseMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsPhaseMenuADDItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsPhaseMenuEDITItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuRadioTherapyDetailsPhaseMenu;
			public ReadOnlyMenuItem getRadioTherapyDetailsPhaseMenuADDItem()
			{
				return this.contextMenuRadioTherapyDetailsPhaseMenuADDItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsPhaseMenuADDItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsPhaseMenuEDITItem()
			{
				return this.contextMenuRadioTherapyDetailsPhaseMenuEDITItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsPhaseMenuEDITItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsPhaseMenuREMOVEItem()
			{
				return this.contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsPhaseMenuREMOVEItem;
			public final class RadioTherapyDetailsAdjacentMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
				public static final int REMOVE = 6;
			}
			public void disableAllRadioTherapyDetailsAdjacentMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsAdjacentMenuADDItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsAdjacentMenuEDITItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllRadioTherapyDetailsAdjacentMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsAdjacentMenuADDItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsAdjacentMenuEDITItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuRadioTherapyDetailsAdjacentMenu;
			public ReadOnlyMenuItem getRadioTherapyDetailsAdjacentMenuADDItem()
			{
				return this.contextMenuRadioTherapyDetailsAdjacentMenuADDItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsAdjacentMenuADDItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsAdjacentMenuEDITItem()
			{
				return this.contextMenuRadioTherapyDetailsAdjacentMenuEDITItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsAdjacentMenuEDITItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsAdjacentMenuREMOVEItem()
			{
				return this.contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsAdjacentMenuREMOVEItem;
			public final class RadioTherapyDetailsDoseMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 7;
				public static final int EDIT = 8;
				public static final int REMOVE = 9;
			}
			public void disableAllRadioTherapyDetailsDoseMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsDoseMenuADDItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsDoseMenuEDITItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsDoseMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllRadioTherapyDetailsDoseMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsDoseMenuADDItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsDoseMenuEDITItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsDoseMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuRadioTherapyDetailsDoseMenu;
			public ReadOnlyMenuItem getRadioTherapyDetailsDoseMenuADDItem()
			{
				return this.contextMenuRadioTherapyDetailsDoseMenuADDItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsDoseMenuADDItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsDoseMenuEDITItem()
			{
				return this.contextMenuRadioTherapyDetailsDoseMenuEDITItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsDoseMenuEDITItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsDoseMenuREMOVEItem()
			{
				return this.contextMenuRadioTherapyDetailsDoseMenuREMOVEItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsDoseMenuREMOVEItem;
			public final class RadioTherapyDetailsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 10;
				public static final int EDIT = 11;
			}
			public void disableAllRadioTherapyDetailsMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsMenuNEWItem.setEnabled(false);
				this.contextMenuRadioTherapyDetailsMenuEDITItem.setEnabled(false);
			}
			public void hideAllRadioTherapyDetailsMenuMenuItems()
			{
				this.contextMenuRadioTherapyDetailsMenuNEWItem.setVisible(false);
				this.contextMenuRadioTherapyDetailsMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuRadioTherapyDetailsMenu;
			public ReadOnlyMenuItem getRadioTherapyDetailsMenuNEWItem()
			{
				return this.contextMenuRadioTherapyDetailsMenuNEWItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsMenuNEWItem;
			public ReadOnlyMenuItem getRadioTherapyDetailsMenuEDITItem()
			{
				return this.contextMenuRadioTherapyDetailsMenuEDITItem;
			}
			private MenuItem contextMenuRadioTherapyDetailsMenuEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ID", "ID_PatAction");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-TREATINGCONSULTANT", "TreatingConsultant");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ACTIVITYGROUP", "ActivityGroup");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-PLANNEDREGIME", "PlannedRegime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Oncology.RadiotherapyPatTreatmentPlanAction", "BO-1105100038-ACTIVE", "Active");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-ID", "ID_RadiotherapyDetails");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-RADIOTHERAPYTYPE", "RadiotherapyType");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-TREATINGCONSULTANT", "TreatingConsultant");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-TREATEMENTINTENT", "TreatementIntent");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-ANATOMICALTREATMENTSITE", "AnatomicalTreatmentSite");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-DATEDECISIONTOTREAT", "DateDecisionToTreat");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-STARTDATE", "StartDate");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-EPISODEOFCARE", "EpisodeOfCare");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-ENDDATE", "EndDate");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-PRESCRIBEDDOSE", "PrescribedDose");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-PRESCRIBEDFRACTIONS", "PrescribedFractions");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-PRESCRIBEDDURATION", "PrescribedDuration");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-TREATMENTCOURSESTATUS", "TreatmentCourseStatus");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-TREATINGHOSPITAL", "TreatingHospital");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-PERFORMANCESTATUSATDDT", "PerformanceStatusAtDDT");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-CONCURRENTCHEMOTHERAPY", "ConcurrentChemotherapy");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-TREATMENTCATEGORY", "TreatmentCategory");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-DISEASESTATUS", "DiseaseStatus");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-DISEASETREATMENT", "DiseaseTreatment");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-REASONDELAY1", "ReasonDelay1");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-REASONDELAY2", "ReasonDelay2");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-PRESCRIBEDDATE", "PrescribedDate");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.RadioTherapyDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100003-ASSOCIATEDTREATMENTPLANACTION", "AssociatedTreatmentPlanAction");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
