//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.radiotherapydetails;

public abstract class BaseLogic extends Handlers
{
	private java.util.ArrayList lookupUsageErrors;

	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.RadioTherapyDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.RadioTherapyDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
		if(domain.getLookupService().countLookupInstances(ims.oncology.vo.lookups.RadiotherapyTypeCollection.class, ims.oncology.vo.lookups.RadiotherapyType.class, 1251016, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'RadiotherapyType' (ID: 1251016) must have at least one active instance configured.");
		}
	}
	public final String[] getLookupUsageErrors()
	{
		if(lookupUsageErrors == null)
			return null;
		String[] errors = new String[lookupUsageErrors.size()];
		for(int x = 0; x < lookupUsageErrors.size(); x++)
		{
			errors[x] = (String)lookupUsageErrors.get(x);
		}
		return errors;
	}
	protected final void oncmbCourseStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbCourseStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentCourseStatus existingInstance = (ims.oncology.vo.lookups.TreatmentCourseStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCourseStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.TreatmentCourseStatus)
		{
			ims.oncology.vo.lookups.TreatmentCourseStatus instance = (ims.oncology.vo.lookups.TreatmentCourseStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCourseStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentCourseStatus existingInstance = (ims.oncology.vo.lookups.TreatmentCourseStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbCourseStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCourseStatusLookup()
	{
		this.form.lyrDetails().tabDetails().cmbCourseStatus().clear();
		ims.oncology.vo.lookups.TreatmentCourseStatusCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getTreatmentCourseStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbCourseStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCourseStatusLookupValue(int id)
	{
		ims.oncology.vo.lookups.TreatmentCourseStatus instance = ims.oncology.vo.lookups.LookupHelper.getTreatmentCourseStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbCourseStatus().setValue(instance);
	}
	protected final void defaultcmbCourseStatusLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbCourseStatus().setValue((ims.oncology.vo.lookups.TreatmentCourseStatus)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.TreatmentCourseStatus.class, engine.getFormName().getID(), ims.oncology.vo.lookups.TreatmentCourseStatus.TYPE_ID));
	}
	protected final void oncmbReason2ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbReason2().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyDelayReason existingInstance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReason2Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.RadiotherapyDelayReason)
		{
			ims.oncology.vo.lookups.RadiotherapyDelayReason instance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReason2Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyDelayReason existingInstance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbReason2().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReason2Lookup()
	{
		this.form.lyrDetails().tabDetails().cmbReason2().clear();
		ims.oncology.vo.lookups.RadiotherapyDelayReasonCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyDelayReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbReason2().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReason2LookupValue(int id)
	{
		ims.oncology.vo.lookups.RadiotherapyDelayReason instance = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyDelayReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbReason2().setValue(instance);
	}
	protected final void defaultcmbReason2LookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbReason2().setValue((ims.oncology.vo.lookups.RadiotherapyDelayReason)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.RadiotherapyDelayReason.class, engine.getFormName().getID(), ims.oncology.vo.lookups.RadiotherapyDelayReason.TYPE_ID));
	}
	protected final void oncmbReason1ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbReason1().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyDelayReason existingInstance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReason1Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.RadiotherapyDelayReason)
		{
			ims.oncology.vo.lookups.RadiotherapyDelayReason instance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReason1Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyDelayReason existingInstance = (ims.oncology.vo.lookups.RadiotherapyDelayReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbReason1().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReason1Lookup()
	{
		this.form.lyrDetails().tabDetails().cmbReason1().clear();
		ims.oncology.vo.lookups.RadiotherapyDelayReasonCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyDelayReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbReason1().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReason1LookupValue(int id)
	{
		ims.oncology.vo.lookups.RadiotherapyDelayReason instance = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyDelayReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbReason1().setValue(instance);
	}
	protected final void defaultcmbReason1LookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbReason1().setValue((ims.oncology.vo.lookups.RadiotherapyDelayReason)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.RadiotherapyDelayReason.class, engine.getFormName().getID(), ims.oncology.vo.lookups.RadiotherapyDelayReason.TYPE_ID));
	}
	protected final void oncmbPerformanceValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbPerformance().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.medicaloncology.vo.lookups.PerformanceStatus existingInstance = (ims.medicaloncology.vo.lookups.PerformanceStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPerformanceLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.medicaloncology.vo.lookups.PerformanceStatus)
		{
			ims.medicaloncology.vo.lookups.PerformanceStatus instance = (ims.medicaloncology.vo.lookups.PerformanceStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPerformanceLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.medicaloncology.vo.lookups.PerformanceStatus existingInstance = (ims.medicaloncology.vo.lookups.PerformanceStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbPerformance().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPerformanceLookup()
	{
		this.form.lyrDetails().tabDetails().cmbPerformance().clear();
		ims.medicaloncology.vo.lookups.PerformanceStatusCollection lookupCollection = ims.medicaloncology.vo.lookups.LookupHelper.getPerformanceStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbPerformance().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPerformanceLookupValue(int id)
	{
		ims.medicaloncology.vo.lookups.PerformanceStatus instance = ims.medicaloncology.vo.lookups.LookupHelper.getPerformanceStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbPerformance().setValue(instance);
	}
	protected final void defaultcmbPerformanceLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbPerformance().setValue((ims.medicaloncology.vo.lookups.PerformanceStatus)domain.getLookupService().getDefaultInstance(ims.medicaloncology.vo.lookups.PerformanceStatus.class, engine.getFormName().getID(), ims.medicaloncology.vo.lookups.PerformanceStatus.TYPE_ID));
	}
	protected final void oncmbHospitalValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbHospital().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentHospital existingInstance = (ims.oncology.vo.lookups.TreatmentHospital)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbHospitalLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.TreatmentHospital)
		{
			ims.oncology.vo.lookups.TreatmentHospital instance = (ims.oncology.vo.lookups.TreatmentHospital)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbHospitalLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.TreatmentHospital existingInstance = (ims.oncology.vo.lookups.TreatmentHospital)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbHospital().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbHospitalLookup()
	{
		this.form.lyrDetails().tabDetails().cmbHospital().clear();
		ims.oncology.vo.lookups.TreatmentHospitalCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getTreatmentHospital(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbHospital().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbHospitalLookupValue(int id)
	{
		ims.oncology.vo.lookups.TreatmentHospital instance = ims.oncology.vo.lookups.LookupHelper.getTreatmentHospitalInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbHospital().setValue(instance);
	}
	protected final void defaultcmbHospitalLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbHospital().setValue((ims.oncology.vo.lookups.TreatmentHospital)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.TreatmentHospital.class, engine.getFormName().getID(), ims.oncology.vo.lookups.TreatmentHospital.TYPE_ID));
	}
	protected final void oncmbTreatIntentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbTreatIntent().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.CancerTreatmentIntent existingInstance = (ims.oncology.vo.lookups.CancerTreatmentIntent)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTreatIntentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.CancerTreatmentIntent)
		{
			ims.oncology.vo.lookups.CancerTreatmentIntent instance = (ims.oncology.vo.lookups.CancerTreatmentIntent)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTreatIntentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.CancerTreatmentIntent existingInstance = (ims.oncology.vo.lookups.CancerTreatmentIntent)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbTreatIntent().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTreatIntentLookup()
	{
		this.form.lyrDetails().tabDetails().cmbTreatIntent().clear();
		ims.oncology.vo.lookups.CancerTreatmentIntentCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getCancerTreatmentIntent(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbTreatIntent().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTreatIntentLookupValue(int id)
	{
		ims.oncology.vo.lookups.CancerTreatmentIntent instance = ims.oncology.vo.lookups.LookupHelper.getCancerTreatmentIntentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbTreatIntent().setValue(instance);
	}
	protected final void defaultcmbTreatIntentLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbTreatIntent().setValue((ims.oncology.vo.lookups.CancerTreatmentIntent)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.CancerTreatmentIntent.class, engine.getFormName().getID(), ims.oncology.vo.lookups.CancerTreatmentIntent.TYPE_ID));
	}
	protected final void oncmbRadiotherapyTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbRadiotherapyType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyType existingInstance = (ims.oncology.vo.lookups.RadiotherapyType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRadiotherapyTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.RadiotherapyType)
		{
			ims.oncology.vo.lookups.RadiotherapyType instance = (ims.oncology.vo.lookups.RadiotherapyType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRadiotherapyTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.RadiotherapyType existingInstance = (ims.oncology.vo.lookups.RadiotherapyType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbRadiotherapyType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRadiotherapyTypeLookup()
	{
		this.form.lyrDetails().tabDetails().cmbRadiotherapyType().clear();
		ims.oncology.vo.lookups.RadiotherapyTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbRadiotherapyType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRadiotherapyTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.RadiotherapyType instance = ims.oncology.vo.lookups.LookupHelper.getRadiotherapyTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue(instance);
	}
	protected final void defaultcmbRadiotherapyTypeLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue((ims.oncology.vo.lookups.RadiotherapyType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.RadiotherapyType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.RadiotherapyType.TYPE_ID));
	}
	protected final void oncmbAnatomicalSiteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabDetails().cmbAnatomicalSite().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.AnatomicalTreatmentSite existingInstance = (ims.oncology.vo.lookups.AnatomicalTreatmentSite)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAnatomicalSiteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.AnatomicalTreatmentSite)
		{
			ims.oncology.vo.lookups.AnatomicalTreatmentSite instance = (ims.oncology.vo.lookups.AnatomicalTreatmentSite)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAnatomicalSiteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.AnatomicalTreatmentSite existingInstance = (ims.oncology.vo.lookups.AnatomicalTreatmentSite)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabDetails().cmbAnatomicalSite().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAnatomicalSiteLookup()
	{
		this.form.lyrDetails().tabDetails().cmbAnatomicalSite().clear();
		ims.oncology.vo.lookups.AnatomicalTreatmentSiteCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getAnatomicalTreatmentSite(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabDetails().cmbAnatomicalSite().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAnatomicalSiteLookupValue(int id)
	{
		ims.oncology.vo.lookups.AnatomicalTreatmentSite instance = ims.oncology.vo.lookups.LookupHelper.getAnatomicalTreatmentSiteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabDetails().cmbAnatomicalSite().setValue(instance);
	}
	protected final void defaultcmbAnatomicalSiteLookupValue()
	{
		this.form.lyrDetails().tabDetails().cmbAnatomicalSite().setValue((ims.oncology.vo.lookups.AnatomicalTreatmentSite)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.AnatomicalTreatmentSite.class, engine.getFormName().getID(), ims.oncology.vo.lookups.AnatomicalTreatmentSite.TYPE_ID));
	}
	protected final void oncmbPlanningComplexityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ComplexityGroup existingInstance = (ims.oncology.vo.lookups.ComplexityGroup)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPlanningComplexityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.ComplexityGroup)
		{
			ims.oncology.vo.lookups.ComplexityGroup instance = (ims.oncology.vo.lookups.ComplexityGroup)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPlanningComplexityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ComplexityGroup existingInstance = (ims.oncology.vo.lookups.ComplexityGroup)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPlanningComplexityLookup()
	{
		this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().clear();
		ims.oncology.vo.lookups.ComplexityGroupCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getComplexityGroup(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPlanningComplexityLookupValue(int id)
	{
		ims.oncology.vo.lookups.ComplexityGroup instance = ims.oncology.vo.lookups.LookupHelper.getComplexityGroupInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().setValue(instance);
	}
	protected final void defaultcmbPlanningComplexityLookupValue()
	{
		this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().setValue((ims.oncology.vo.lookups.ComplexityGroup)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.ComplexityGroup.class, engine.getFormName().getID(), ims.oncology.vo.lookups.ComplexityGroup.TYPE_ID));
	}
	protected final void oncmbSpecialTechniqueValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.SpecialTechnique existingInstance = (ims.oncology.vo.lookups.SpecialTechnique)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialTechniqueLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.SpecialTechnique)
		{
			ims.oncology.vo.lookups.SpecialTechnique instance = (ims.oncology.vo.lookups.SpecialTechnique)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialTechniqueLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.SpecialTechnique existingInstance = (ims.oncology.vo.lookups.SpecialTechnique)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialTechniqueLookup()
	{
		this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().clear();
		ims.oncology.vo.lookups.SpecialTechniqueCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getSpecialTechnique(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialTechniqueLookupValue(int id)
	{
		ims.oncology.vo.lookups.SpecialTechnique instance = ims.oncology.vo.lookups.LookupHelper.getSpecialTechniqueInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().setValue(instance);
	}
	protected final void defaultcmbSpecialTechniqueLookupValue()
	{
		this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().setValue((ims.oncology.vo.lookups.SpecialTechnique)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.SpecialTechnique.class, engine.getFormName().getID(), ims.oncology.vo.lookups.SpecialTechnique.TYPE_ID));
	}
	protected final void oncmbNoFieldsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabTeletherapy().cmbNoFields().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.NoOfFields existingInstance = (ims.oncology.vo.lookups.NoOfFields)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbNoFieldsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.NoOfFields)
		{
			ims.oncology.vo.lookups.NoOfFields instance = (ims.oncology.vo.lookups.NoOfFields)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbNoFieldsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.NoOfFields existingInstance = (ims.oncology.vo.lookups.NoOfFields)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabTeletherapy().cmbNoFields().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbNoFieldsLookup()
	{
		this.form.lyrDetails().tabTeletherapy().cmbNoFields().clear();
		ims.oncology.vo.lookups.NoOfFieldsCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getNoOfFields(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabTeletherapy().cmbNoFields().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbNoFieldsLookupValue(int id)
	{
		ims.oncology.vo.lookups.NoOfFields instance = ims.oncology.vo.lookups.LookupHelper.getNoOfFieldsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabTeletherapy().cmbNoFields().setValue(instance);
	}
	protected final void defaultcmbNoFieldsLookupValue()
	{
		this.form.lyrDetails().tabTeletherapy().cmbNoFields().setValue((ims.oncology.vo.lookups.NoOfFields)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.NoOfFields.class, engine.getFormName().getID(), ims.oncology.vo.lookups.NoOfFields.TYPE_ID));
	}
	protected final void oncmbBeamEnergyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BeamEnergy existingInstance = (ims.oncology.vo.lookups.BeamEnergy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbBeamEnergyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BeamEnergy)
		{
			ims.oncology.vo.lookups.BeamEnergy instance = (ims.oncology.vo.lookups.BeamEnergy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbBeamEnergyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BeamEnergy existingInstance = (ims.oncology.vo.lookups.BeamEnergy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbBeamEnergyLookup()
	{
		this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().clear();
		ims.oncology.vo.lookups.BeamEnergyCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBeamEnergy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbBeamEnergyLookupValue(int id)
	{
		ims.oncology.vo.lookups.BeamEnergy instance = ims.oncology.vo.lookups.LookupHelper.getBeamEnergyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().setValue(instance);
	}
	protected final void defaultcmbBeamEnergyLookupValue()
	{
		this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().setValue((ims.oncology.vo.lookups.BeamEnergy)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BeamEnergy.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BeamEnergy.TYPE_ID));
	}
	protected final void oncmbRadiationTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabTeletherapy().cmbRadiationType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BeamType existingInstance = (ims.oncology.vo.lookups.BeamType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRadiationTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BeamType)
		{
			ims.oncology.vo.lookups.BeamType instance = (ims.oncology.vo.lookups.BeamType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRadiationTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BeamType existingInstance = (ims.oncology.vo.lookups.BeamType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabTeletherapy().cmbRadiationType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRadiationTypeLookup()
	{
		this.form.lyrDetails().tabTeletherapy().cmbRadiationType().clear();
		ims.oncology.vo.lookups.BeamTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBeamType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabTeletherapy().cmbRadiationType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRadiationTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.BeamType instance = ims.oncology.vo.lookups.LookupHelper.getBeamTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabTeletherapy().cmbRadiationType().setValue(instance);
	}
	protected final void defaultcmbRadiationTypeLookupValue()
	{
		this.form.lyrDetails().tabTeletherapy().cmbRadiationType().setValue((ims.oncology.vo.lookups.BeamType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BeamType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BeamType.TYPE_ID));
	}
	protected final void oncmbUnitValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbUnit().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTxType existingInstance = (ims.oncology.vo.lookups.BrachyTxType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUnitLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachyTxType)
		{
			ims.oncology.vo.lookups.BrachyTxType instance = (ims.oncology.vo.lookups.BrachyTxType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUnitLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTxType existingInstance = (ims.oncology.vo.lookups.BrachyTxType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbUnit().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUnitLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbUnit().clear();
		ims.oncology.vo.lookups.BrachyTxTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachyTxType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbUnit().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUnitLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachyTxType instance = ims.oncology.vo.lookups.LookupHelper.getBrachyTxTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbUnit().setValue(instance);
	}
	protected final void defaultcmbUnitLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbUnit().setValue((ims.oncology.vo.lookups.BrachyTxType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachyTxType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachyTxType.TYPE_ID));
	}
	protected final void oncmbPrescriptionPointValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint existingInstance = (ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPrescriptionPointLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)
		{
			ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint instance = (ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPrescriptionPointLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint existingInstance = (ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPrescriptionPointLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().clear();
		ims.oncology.vo.lookups.BrachytherapyPrescriptionPointCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyPrescriptionPoint(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPrescriptionPointLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint instance = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyPrescriptionPointInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().setValue(instance);
	}
	protected final void defaultcmbPrescriptionPointLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().setValue((ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachytherapyPrescriptionPoint.TYPE_ID));
	}
	protected final void oncmbBrachytherapyTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyType existingInstance = (ims.oncology.vo.lookups.BrachyTherapyType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbBrachytherapyTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachyTherapyType)
		{
			ims.oncology.vo.lookups.BrachyTherapyType instance = (ims.oncology.vo.lookups.BrachyTherapyType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbBrachytherapyTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyType existingInstance = (ims.oncology.vo.lookups.BrachyTherapyType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbBrachytherapyTypeLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().clear();
		ims.oncology.vo.lookups.BrachyTherapyTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbBrachytherapyTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachyTherapyType instance = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().setValue(instance);
	}
	protected final void defaultcmbBrachytherapyTypeLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().setValue((ims.oncology.vo.lookups.BrachyTherapyType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachyTherapyType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachyTherapyType.TYPE_ID));
	}
	protected final void oncmbPatientTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbPatientType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyPatientType existingInstance = (ims.oncology.vo.lookups.BrachytherapyPatientType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachytherapyPatientType)
		{
			ims.oncology.vo.lookups.BrachytherapyPatientType instance = (ims.oncology.vo.lookups.BrachytherapyPatientType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyPatientType existingInstance = (ims.oncology.vo.lookups.BrachytherapyPatientType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbPatientType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientTypeLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbPatientType().clear();
		ims.oncology.vo.lookups.BrachytherapyPatientTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyPatientType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbPatientType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachytherapyPatientType instance = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyPatientTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbPatientType().setValue(instance);
	}
	protected final void defaultcmbPatientTypeLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbPatientType().setValue((ims.oncology.vo.lookups.BrachytherapyPatientType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachytherapyPatientType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachytherapyPatientType.TYPE_ID));
	}
	protected final void oncmbDeliveryTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyDeliveryType existingInstance = (ims.oncology.vo.lookups.BrachytherapyDeliveryType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDeliveryTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachytherapyDeliveryType)
		{
			ims.oncology.vo.lookups.BrachytherapyDeliveryType instance = (ims.oncology.vo.lookups.BrachytherapyDeliveryType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDeliveryTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachytherapyDeliveryType existingInstance = (ims.oncology.vo.lookups.BrachytherapyDeliveryType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDeliveryTypeLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().clear();
		ims.oncology.vo.lookups.BrachytherapyDeliveryTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyDeliveryType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDeliveryTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachytherapyDeliveryType instance = ims.oncology.vo.lookups.LookupHelper.getBrachytherapyDeliveryTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().setValue(instance);
	}
	protected final void defaultcmbDeliveryTypeLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().setValue((ims.oncology.vo.lookups.BrachytherapyDeliveryType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachytherapyDeliveryType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachytherapyDeliveryType.TYPE_ID));
	}
	protected final void oncmbUnsealedSourceValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.UnsealedSourceType existingInstance = (ims.oncology.vo.lookups.UnsealedSourceType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbUnsealedSourceLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.UnsealedSourceType)
		{
			ims.oncology.vo.lookups.UnsealedSourceType instance = (ims.oncology.vo.lookups.UnsealedSourceType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbUnsealedSourceLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.UnsealedSourceType existingInstance = (ims.oncology.vo.lookups.UnsealedSourceType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbUnsealedSourceLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().clear();
		ims.oncology.vo.lookups.UnsealedSourceTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getUnsealedSourceType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbUnsealedSourceLookupValue(int id)
	{
		ims.oncology.vo.lookups.UnsealedSourceType instance = ims.oncology.vo.lookups.LookupHelper.getUnsealedSourceTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().setValue(instance);
	}
	protected final void defaultcmbUnsealedSourceLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().setValue((ims.oncology.vo.lookups.UnsealedSourceType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.UnsealedSourceType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.UnsealedSourceType.TYPE_ID));
	}
	protected final void oncmbIsotypeTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyIsotopeType existingInstance = (ims.oncology.vo.lookups.BrachyTherapyIsotopeType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIsotypeTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachyTherapyIsotopeType)
		{
			ims.oncology.vo.lookups.BrachyTherapyIsotopeType instance = (ims.oncology.vo.lookups.BrachyTherapyIsotopeType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIsotypeTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyIsotopeType existingInstance = (ims.oncology.vo.lookups.BrachyTherapyIsotopeType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIsotypeTypeLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().clear();
		ims.oncology.vo.lookups.BrachyTherapyIsotopeTypeCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyIsotopeType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIsotypeTypeLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachyTherapyIsotopeType instance = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyIsotopeTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().setValue(instance);
	}
	protected final void defaultcmbIsotypeTypeLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().setValue((ims.oncology.vo.lookups.BrachyTherapyIsotopeType)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachyTherapyIsotopeType.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachyTherapyIsotopeType.TYPE_ID));
	}
	protected final void oncmbActualDoseRateValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyDoseRate existingInstance = (ims.oncology.vo.lookups.BrachyTherapyDoseRate)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbActualDoseRateLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.BrachyTherapyDoseRate)
		{
			ims.oncology.vo.lookups.BrachyTherapyDoseRate instance = (ims.oncology.vo.lookups.BrachyTherapyDoseRate)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbActualDoseRateLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.BrachyTherapyDoseRate existingInstance = (ims.oncology.vo.lookups.BrachyTherapyDoseRate)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbActualDoseRateLookup()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().clear();
		ims.oncology.vo.lookups.BrachyTherapyDoseRateCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyDoseRate(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbActualDoseRateLookupValue(int id)
	{
		ims.oncology.vo.lookups.BrachyTherapyDoseRate instance = ims.oncology.vo.lookups.LookupHelper.getBrachyTherapyDoseRateInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().setValue(instance);
	}
	protected final void defaultcmbActualDoseRateLookupValue()
	{
		this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().setValue((ims.oncology.vo.lookups.BrachyTherapyDoseRate)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.BrachyTherapyDoseRate.class, engine.getFormName().getID(), ims.oncology.vo.lookups.BrachyTherapyDoseRate.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.RadioTherapyDetails domain;
}
