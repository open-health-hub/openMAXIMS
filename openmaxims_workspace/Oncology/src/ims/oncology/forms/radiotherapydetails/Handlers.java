//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.radiotherapydetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected String[] getLookupUsageErrors();
	abstract protected void bindcmbCourseStatusLookup();
	abstract protected void defaultcmbCourseStatusLookupValue();
	abstract protected void bindcmbReason2Lookup();
	abstract protected void defaultcmbReason2LookupValue();
	abstract protected void bindcmbReason1Lookup();
	abstract protected void defaultcmbReason1LookupValue();
	abstract protected void bindcmbPerformanceLookup();
	abstract protected void defaultcmbPerformanceLookupValue();
	abstract protected void bindcmbHospitalLookup();
	abstract protected void defaultcmbHospitalLookupValue();
	abstract protected void bindcmbTreatIntentLookup();
	abstract protected void defaultcmbTreatIntentLookupValue();
	abstract protected void bindcmbRadiotherapyTypeLookup();
	abstract protected void defaultcmbRadiotherapyTypeLookupValue();
	abstract protected void bindcmbAnatomicalSiteLookup();
	abstract protected void defaultcmbAnatomicalSiteLookupValue();
	abstract protected void bindcmbPlanningComplexityLookup();
	abstract protected void defaultcmbPlanningComplexityLookupValue();
	abstract protected void bindcmbSpecialTechniqueLookup();
	abstract protected void defaultcmbSpecialTechniqueLookupValue();
	abstract protected void bindcmbNoFieldsLookup();
	abstract protected void defaultcmbNoFieldsLookupValue();
	abstract protected void bindcmbBeamEnergyLookup();
	abstract protected void defaultcmbBeamEnergyLookupValue();
	abstract protected void bindcmbRadiationTypeLookup();
	abstract protected void defaultcmbRadiationTypeLookupValue();
	abstract protected void bindcmbUnitLookup();
	abstract protected void defaultcmbUnitLookupValue();
	abstract protected void bindcmbPrescriptionPointLookup();
	abstract protected void defaultcmbPrescriptionPointLookupValue();
	abstract protected void bindcmbBrachytherapyTypeLookup();
	abstract protected void defaultcmbBrachytherapyTypeLookupValue();
	abstract protected void bindcmbPatientTypeLookup();
	abstract protected void defaultcmbPatientTypeLookupValue();
	abstract protected void bindcmbDeliveryTypeLookup();
	abstract protected void defaultcmbDeliveryTypeLookupValue();
	abstract protected void bindcmbUnsealedSourceLookup();
	abstract protected void defaultcmbUnsealedSourceLookupValue();
	abstract protected void bindcmbIsotypeTypeLookup();
	abstract protected void defaultcmbIsotypeTypeLookupValue();
	abstract protected void bindcmbActualDoseRateLookup();
	abstract protected void defaultcmbActualDoseRateLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbCourseStatusValueSet(Object value);
	abstract protected void oncmbReason2ValueSet(Object value);
	abstract protected void oncmbReason1ValueSet(Object value);
	abstract protected void onCmbDiseaseStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPerformanceValueSet(Object value);
	abstract protected void oncmbHospitalValueSet(Object value);
	abstract protected void oncmbTreatIntentValueSet(Object value);
	abstract protected void oncmbRadiotherapyTypeValueSet(Object value);
	abstract protected void onCmbRadiotherapyTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteStartValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteEndValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbAnatomicalSiteValueSet(Object value);
	abstract protected void oncmbPlanningComplexityValueSet(Object value);
	abstract protected void oncmbSpecialTechniqueValueSet(Object value);
	abstract protected void onGrdPhaseDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdAdjacentFieldsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonAdjacentFieldsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonSupraclavicularDetailsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbNoFieldsValueSet(Object value);
	abstract protected void oncmbBeamEnergyValueSet(Object value);
	abstract protected void oncmbRadiationTypeValueSet(Object value);
	abstract protected void onGrdDosesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbUnitValueSet(Object value);
	abstract protected void oncmbPrescriptionPointValueSet(Object value);
	abstract protected void oncmbBrachytherapyTypeValueSet(Object value);
	abstract protected void oncmbPatientTypeValueSet(Object value);
	abstract protected void oncmbDeliveryTypeValueSet(Object value);
	abstract protected void oncmbUnsealedSourceValueSet(Object value);
	abstract protected void oncmbIsotypeTypeValueSet(Object value);
	abstract protected void oncmbActualDoseRateValueSet(Object value);
	abstract protected void onGridRadiotherapyDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBEditClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				// Checking lookups usage
				if(getLookupUsageErrors() != null && getLookupUsageErrors().length > 0)
					throw new ims.framework.exceptions.FormMandatoryLookupMissingException(ims.framework.exceptions.FormMandatoryLookupMissingException.getError(getLookupUsageErrors()));
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.lyrDetails().tabDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabDetailsActivated();
			}
		});
		this.form.lyrDetails().tabTeletherapy().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabTeletherapyActivated();
			}
		});
		this.form.lyrDetails().tabBrachytherapy().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabBrachytherapyActivated();
			}
		});
		this.form.lyrDetails().tabDetails().cmbCourseStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCourseStatusValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbReason2().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReason2ValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbReason1().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReason1ValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbDiseaseStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbDiseaseStatusValueChanged();
			}
		});
		this.form.lyrDetails().tabDetails().cmbPerformance().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPerformanceValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbHospital().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbHospitalValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbTreatIntent().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTreatIntentValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbRadiotherapyType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRadiotherapyTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabDetails().cmbRadiotherapyType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbRadiotherapyTypeValueChanged();
			}
		});
		this.form.lyrDetails().tabDetails().dteStart().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteStartValueChanged();
			}
		});
		this.form.lyrDetails().tabDetails().dteEnd().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteEndValueChanged();
			}
		});
		this.form.lyrDetails().tabDetails().cmbAnatomicalSite().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAnatomicalSiteValueSet(value);
			}
		});
		this.form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPlanningComplexityValueSet(value);
			}
		});
		this.form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialTechniqueValueSet(value);
			}
		});
		this.form.lyrDetails().tabTeletherapy().grdPhaseDetails().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPhaseDetailsSelectionChanged();
			}
		});
		this.form.lyrDetails().tabTeletherapy().grdAdjacentFields().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdAdjacentFieldsSelectionChanged();
			}
		});
		this.form.lyrDetails().tabTeletherapy().AdjacentFields().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonAdjacentFieldsValueChanged();
			}
		});
		this.form.lyrDetails().tabTeletherapy().SupraclavicularDetails().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonSupraclavicularDetailsValueChanged();
			}
		});
		this.form.lyrDetails().tabTeletherapy().cmbNoFields().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbNoFieldsValueSet(value);
			}
		});
		this.form.lyrDetails().tabTeletherapy().cmbBeamEnergy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbBeamEnergyValueSet(value);
			}
		});
		this.form.lyrDetails().tabTeletherapy().cmbRadiationType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbRadiationTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().grdDoses().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDosesSelectionChanged();
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbUnit().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbUnitValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPrescriptionPointValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbBrachytherapyTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbPatientType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPatientTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbDeliveryType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDeliveryTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbUnsealedSourceValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbIsotypeType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbIsotypeTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbActualDoseRateValueSet(value);
			}
		});
		this.form.gridRadiotherapyDetails().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGridRadiotherapyDetailsSelectionChanged();
			}
		});
		this.form.bCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBCancelClick();
			}
		});
		this.form.bSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBSaveClick();
			}
		});
		this.form.bEdit().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBEditClick();
			}
		});
		this.form.bNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBNewClick();
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.REMOVE, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsMenuNEWItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsMenu.NEW, sender);
			}
		});
		this.form.getContextMenus().Oncology.getRadioTherapyDetailsMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsMenu.EDIT, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbCourseStatusLookup();
		bindcmbReason2Lookup();
		bindcmbReason1Lookup();
		bindcmbPerformanceLookup();
		bindcmbHospitalLookup();
		bindcmbTreatIntentLookup();
		bindcmbRadiotherapyTypeLookup();
		bindcmbAnatomicalSiteLookup();
		bindcmbPlanningComplexityLookup();
		bindcmbSpecialTechniqueLookup();
		bindcmbNoFieldsLookup();
		bindcmbBeamEnergyLookup();
		bindcmbRadiationTypeLookup();
		bindcmbUnitLookup();
		bindcmbPrescriptionPointLookup();
		bindcmbBrachytherapyTypeLookup();
		bindcmbPatientTypeLookup();
		bindcmbDeliveryTypeLookup();
		bindcmbUnsealedSourceLookup();
		bindcmbIsotypeTypeLookup();
		bindcmbActualDoseRateLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbCourseStatusLookup();
		bindcmbReason2Lookup();
		bindcmbReason1Lookup();
		bindcmbPerformanceLookup();
		bindcmbHospitalLookup();
		bindcmbTreatIntentLookup();
		bindcmbRadiotherapyTypeLookup();
		bindcmbAnatomicalSiteLookup();
		bindcmbPlanningComplexityLookup();
		bindcmbSpecialTechniqueLookup();
		bindcmbNoFieldsLookup();
		bindcmbBeamEnergyLookup();
		bindcmbRadiationTypeLookup();
		bindcmbUnitLookup();
		bindcmbPrescriptionPointLookup();
		bindcmbBrachytherapyTypeLookup();
		bindcmbPatientTypeLookup();
		bindcmbDeliveryTypeLookup();
		bindcmbUnsealedSourceLookup();
		bindcmbIsotypeTypeLookup();
		bindcmbActualDoseRateLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbCourseStatusLookupValue();
		defaultcmbReason2LookupValue();
		defaultcmbReason1LookupValue();
		defaultcmbPerformanceLookupValue();
		defaultcmbHospitalLookupValue();
		defaultcmbTreatIntentLookupValue();
		defaultcmbRadiotherapyTypeLookupValue();
		defaultcmbAnatomicalSiteLookupValue();
		defaultcmbPlanningComplexityLookupValue();
		defaultcmbSpecialTechniqueLookupValue();
		defaultcmbNoFieldsLookupValue();
		defaultcmbBeamEnergyLookupValue();
		defaultcmbRadiationTypeLookupValue();
		defaultcmbUnitLookupValue();
		defaultcmbPrescriptionPointLookupValue();
		defaultcmbBrachytherapyTypeLookupValue();
		defaultcmbPatientTypeLookupValue();
		defaultcmbDeliveryTypeLookupValue();
		defaultcmbUnsealedSourceLookupValue();
		defaultcmbIsotypeTypeLookupValue();
		defaultcmbActualDoseRateLookupValue();
	}
	private void onlyrDetailstabDetailsActivated()
	{
		this.form.lyrDetails().showtabDetails();
	}
	private void onlyrDetailstabTeletherapyActivated()
	{
		this.form.lyrDetails().showtabTeletherapy();
	}
	private void onlyrDetailstabBrachytherapyActivated()
	{
		this.form.lyrDetails().showtabBrachytherapy();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
