//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.imagingevents;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctn1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbResultComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.oncology.vo.lookups.StagingInvestigationResult value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.oncology.vo.lookups.StagingInvestigationResult value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.oncology.vo.lookups.StagingInvestigationResult value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.oncology.vo.lookups.StagingInvestigationResult value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.oncology.vo.lookups.StagingInvestigationResult value)
			{
				return super.control.removeRow(value);
			}
			public ims.oncology.vo.lookups.StagingInvestigationResult getValue()
			{
				return (ims.oncology.vo.lookups.StagingInvestigationResult)super.control.getValue();
			}
			public void setValue(ims.oncology.vo.lookups.StagingInvestigationResult value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbAnatomicalSiteComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.oncology.vo.lookups.ImageAnatomicalSite value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.oncology.vo.lookups.ImageAnatomicalSite value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.oncology.vo.lookups.ImageAnatomicalSite value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.oncology.vo.lookups.ImageAnatomicalSite value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.oncology.vo.lookups.ImageAnatomicalSite value)
			{
				return super.control.removeRow(value);
			}
			public ims.oncology.vo.lookups.ImageAnatomicalSite getValue()
			{
				return (ims.oncology.vo.lookups.ImageAnatomicalSite)super.control.getValue();
			}
			public void setValue(ims.oncology.vo.lookups.ImageAnatomicalSite value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbHospitalPerformedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.LocSiteLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.LocSiteLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.LocSiteLiteVo getValue()
			{
				return (ims.core.vo.LocSiteLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.LocSiteLiteVo value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class GroupSelectionRadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 256, 8, 127, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "All Modalities", startTabIndex.intValue() + 3);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Specialty Hotlist", startTabIndex.intValue() + 2);
			}
			public void setText(GroupSelectionEnumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public GroupSelectionEnumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return GroupSelectionEnumeration.None;
					case 0: return GroupSelectionEnumeration.rdoAll;
					case 1: return GroupSelectionEnumeration.rdoSpecialty;
				}
				return null;
			}
			public void setValue(GroupSelectionEnumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(GroupSelectionEnumeration.None.id);
			}
			public boolean isEnabled(GroupSelectionEnumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(GroupSelectionEnumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(GroupSelectionEnumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class GroupSelectionEnumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static GroupSelectionEnumeration None = new GroupSelectionEnumeration(-1);
			public static GroupSelectionEnumeration rdoAll = new GroupSelectionEnumeration(0);
			public static GroupSelectionEnumeration rdoSpecialty = new GroupSelectionEnumeration(1);
			private GroupSelectionEnumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((GroupSelectionEnumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 784, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ims.framework.FormUiLogic m_customControlCodingItemForm = loader.loadComponent(123133, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
			//ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(16), new Integer(24), new Integer(784), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_customControlCodingItemForm, instance1 } );
			ims.framework.Control m_customControlCodingItemControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 4), m_customControlCodingItemForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlCodingItemControl);
			Menu[] menus1 = m_customControlCodingItemForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
			ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 416, 128, 336, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper4.getSize(), instance2, startTabIndex.intValue() + 1013, skipContextValidation);
			//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(416), new Integer(128), new Integer(336), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1013), m_customControlAuthoringInfoForm, instance2 } );
			ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1013), m_customControlAuthoringInfoForm, instance2, Boolean.FALSE } );
			super.addControl(m_customControlAuthoringInfoControl);
			Menu[] menus2 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus2.length; x++)
			{
				form.registerMenu(menus2[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 224, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Report Result:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 424, 200, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Performed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 616, 96, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "millimeters.", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 424, 96, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lesion Size:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 192, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Report Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 160, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anatomical Site:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 136, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Imaging Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital Imaging", new Integer(1), null, new Integer(0)}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 560, 200, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 128, 192, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 128, 128, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 128, 224, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbResultTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbResultTemp);
			cmbResultComboBox cmbResult = (cmbResultComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbResultComboBox.class, m_cmbResultTemp);
			super.addComboBox(cmbResult);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 128, 160, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbAnatomicalSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbAnatomicalSiteTemp);
			cmbAnatomicalSiteComboBox cmbAnatomicalSite = (cmbAnatomicalSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnatomicalSiteComboBox.class, m_cmbAnatomicalSiteTemp);
			super.addComboBox(cmbAnatomicalSite);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 128, 96, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbHospitalPerformedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbHospitalPerformedTemp);
			cmbHospitalPerformedComboBox cmbHospitalPerformed = (cmbHospitalPerformedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalPerformedComboBox.class, m_cmbHospitalPerformedTemp);
			super.addComboBox(cmbHospitalPerformed);
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 560, 96, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	
			// RadioButton Controls
			RadioButton tmpGroupSelection = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
			super.addControl(tmpGroupSelection);
			GroupSelectionRadioButton GroupSelection = (GroupSelectionRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupSelectionRadioButton.class, tmpGroupSelection);
			GroupSelection.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(GroupSelection);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.clinical.forms.clinicalcoding.IComponent customControlCodingItem()
		{
			return (ims.clinical.forms.clinicalcoding.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlCodingItemValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlCodingItemVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlCodingItemVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlCodingItemEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlCodingItemEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
		}
		public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
		}
		public void setcustomControlAuthoringInfoVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setVisible(value);
		}
		public boolean iscustomControlAuthoringInfoVisible()
		{
			return ((ims.framework.Control)super.getControl(1)).isVisible();
		}
		public void setcustomControlAuthoringInfoEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(1)).setEnabled(value);
		}
		public boolean iscustomControlAuthoringInfoEnabled()
		{
			return ((ims.framework.Control)super.getControl(1)).isEnabled();
		}
		public DateControl dteRequest()
		{
			return (DateControl)super.getControl(11);
		}
		public DateControl dteReport()
		{
			return (DateControl)super.getControl(12);
		}
		public DateControl dteImaging()
		{
			return (DateControl)super.getControl(13);
		}
		public cmbResultComboBox cmbResult()
		{
			return (cmbResultComboBox)super.getComboBox(0);
		}
		public cmbAnatomicalSiteComboBox cmbAnatomicalSite()
		{
			return (cmbAnatomicalSiteComboBox)super.getComboBox(1);
		}
		public cmbHospitalPerformedComboBox cmbHospitalPerformed()
		{
			return (cmbHospitalPerformedComboBox)super.getComboBox(2);
		}
		public IntBox intLesionSize()
		{
			return (IntBox)super.getControl(17);
		}
		public GroupSelectionRadioButton GroupSelection()
		{
			return (GroupSelectionRadioButton)super.getRadioButton(0);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColHospitalReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColHospitalReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColHospitalOpened()
		{
			super.row.showOpened(0);
		}
		public String getColHospital()
		{
			return (String)super.row.get(0);
		}
		public void setColHospital(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColHospitalTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColImagingDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColImagingDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColImagingDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getColImagingDate()
		{
			return (String)super.row.get(1);
		}
		public void setColImagingDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColImagingDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColModalityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColModalityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColModalityOpened()
		{
			super.row.showOpened(2);
		}
		public String getColModality()
		{
			return (String)super.row.get(2);
		}
		public void setColModality(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColModalityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColSiteReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColSiteReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColSiteOpened()
		{
			super.row.showOpened(3);
		}
		public String getColSite()
		{
			return (String)super.row.get(3);
		}
		public void setColSite(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColSiteTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColSizeReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColSizeReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColSizeOpened()
		{
			super.row.showOpened(4);
		}
		public String getColSize()
		{
			return (String)super.row.get(4);
		}
		public void setColSize(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColSizeTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColReportDateReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColReportDateReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColReportDateOpened()
		{
			super.row.showOpened(5);
		}
		public String getColReportDate()
		{
			return (String)super.row.get(5);
		}
		public void setColReportDate(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColReportDateTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColReportResultReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColReportResultReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColReportResultOpened()
		{
			super.row.showOpened(6);
		}
		public String getColReportResult()
		{
			return (String)super.row.get(6);
		}
		public void setColReportResult(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColReportResultTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.oncology.vo.ImagingEventsVo getValue()
		{
			return (ims.oncology.vo.ImagingEventsVo)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.ImagingEventsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.oncology.vo.ImagingEventsVoCollection getValues()
		{
			ims.oncology.vo.ImagingEventsVoCollection listOfValues = new ims.oncology.vo.ImagingEventsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.oncology.vo.ImagingEventsVo getValue()
		{
			return (ims.oncology.vo.ImagingEventsVo)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.ImagingEventsVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.oncology.vo.ImagingEventsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColHospitalHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColHospitalHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColImagingDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColImagingDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColModalityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColModalityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColSiteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColSiteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColSizeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColSizeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColReportDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColReportDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColReportResultHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColReportResultHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCurrentRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);


		// Container Clasess
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 816, 272, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctn1);
		ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
		ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(816, 272);
		ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
		ctn1.setContext(form, appForm, m_ctn1, loader, contextMenus, startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn1);

		// Button Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 2014), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 2016), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 288, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addStringColumn("Hospital", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Imaging Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Imaging Modality", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Site", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Size", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Report Date", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Report Result", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);
	}


	public ctn1Container ctn1()
	{
		return (ctn1Container)super.getContainer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(1);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
		}
		
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.ImagingEventsVo getCurrentRecord()
		{
			return (ims.oncology.vo.ImagingEventsVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.oncology.vo.ImagingEventsVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Update = 2;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[80];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-ID", "ID_Imagingevents");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-IMAGEDATE", "ImageDate");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-ANATOMICALSITE", "AnatomicalSite");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-REPORTDATE", "ReportDate");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-LESIONSIZE", "LesionSize");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-IMAGINGEVENTDESCRIPTION", "ImagingEventDescription");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-REQUESTEDDATE", "RequestedDate");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-INVESTIGATIONRESULT", "InvestigationResult");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ImagingEvents.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1074100001-EPISODEOFCARE", "EpisodeOfCare");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
