//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.userprofile;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdConsultantRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdConsultantRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColConsultantImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColConsultantImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColConsultantImageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getColConsultantImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setColConsultantImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellColConsultantImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolConsultantReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolConsultantOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolConsultant()
		{
			return (String)super.row.get(1);
		}
		public void setcolConsultant(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolConsultantTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolAccessReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolAccessOpened()
		{
			super.row.showOpened(2);
		}
		public ims.correspondence.vo.lookups.Access getcolAccess()
		{
			return (ims.correspondence.vo.lookups.Access)super.row.get(2);
		}
		public void setcolAccess(ims.correspondence.vo.lookups.Access value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolAccessTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdConsultantRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdConsultantRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdConsultantRow get(int index)
		{
			return new grdConsultantRow(super.collection.get(index));
		}
		public grdConsultantRow newRow()
		{
			return new grdConsultantRow(super.collection.newRow());
		}
		public grdConsultantRow newRow(boolean autoSelect)
		{
			return new grdConsultantRow(super.collection.newRow(autoSelect));
		}
		public grdConsultantRow newRowAt(int index)
		{
			return new grdConsultantRow(super.collection.newRowAt(index));
		}
		public grdConsultantRow newRowAt(int index, boolean autoSelect)
		{
			return new grdConsultantRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdConsultantGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdConsultantRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdConsultantRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdConsultantRowCollection getRows()
		{
			return new grdConsultantRowCollection(super.grid.getRows());
		}
		public grdConsultantRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdConsultantRow(row);
		}
		public void setColConsultantImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColConsultantImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colAccessComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
	}
	public static class grdUsersRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdUsersRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolUserNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolUserNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolUserNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolUserName()
		{
			return (String)super.row.get(0);
		}
		public void setcolUserName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolUserNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolRealNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolRealNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolRealNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolRealName()
		{
			return (String)super.row.get(1);
		}
		public void setcolRealName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolRealNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.admin.vo.AppUserShortVo getValue()
		{
			return (ims.admin.vo.AppUserShortVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.AppUserShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdUsersRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdUsersRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdUsersRow get(int index)
		{
			return new grdUsersRow(super.collection.get(index));
		}
		public grdUsersRow newRow()
		{
			return new grdUsersRow(super.collection.newRow());
		}
		public grdUsersRow newRow(boolean autoSelect)
		{
			return new grdUsersRow(super.collection.newRow(autoSelect));
		}
		public grdUsersRow newRowAt(int index)
		{
			return new grdUsersRow(super.collection.newRowAt(index));
		}
		public grdUsersRow newRowAt(int index, boolean autoSelect)
		{
			return new grdUsersRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdUsersGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.admin.vo.AppUserShortVoCollection getValues()
		{
			ims.admin.vo.AppUserShortVoCollection listOfValues = new ims.admin.vo.AppUserShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.AppUserShortVo getValue()
		{
			return (ims.admin.vo.AppUserShortVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.AppUserShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdUsersRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdUsersRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdUsersRowCollection getRows()
		{
			return new grdUsersRowCollection(super.grid.getRows());
		}
		public grdUsersRow getRowByValue(ims.admin.vo.AppUserShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdUsersRow(row);
		}
		public void setcolUserNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolUserNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolRealNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolRealNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdSpecialtyRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSpecialtyRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolSpecialtyImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolSpecialtyImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolSpecialtyImageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getcolSpecialtyImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolSpecialtyImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolSpecialtyImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSpecialtyReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSpecialtyOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolSpecialty()
		{
			return (String)super.row.get(1);
		}
		public void setcolSpecialty(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolSpecialtyTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolAccessReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolAccessOpened()
		{
			super.row.showOpened(2);
		}
		public ims.correspondence.vo.lookups.Access getcolAccess()
		{
			return (ims.correspondence.vo.lookups.Access)super.row.get(2);
		}
		public void setcolAccess(ims.correspondence.vo.lookups.Access value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolAccessTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(Object value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSpecialtyRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSpecialtyRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSpecialtyRow get(int index)
		{
			return new grdSpecialtyRow(super.collection.get(index));
		}
		public grdSpecialtyRow newRow()
		{
			return new grdSpecialtyRow(super.collection.newRow());
		}
		public grdSpecialtyRow newRow(boolean autoSelect)
		{
			return new grdSpecialtyRow(super.collection.newRow(autoSelect));
		}
		public grdSpecialtyRow newRowAt(int index)
		{
			return new grdSpecialtyRow(super.collection.newRowAt(index));
		}
		public grdSpecialtyRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSpecialtyRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSpecialtyGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public Object[] getValues()
		{
			Object[] listOfValues = new Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(Object value)
		{
			super.grid.setValue(value);
		}
		public grdSpecialtyRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSpecialtyRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSpecialtyRowCollection getRows()
		{
			return new grdSpecialtyRowCollection(super.grid.getRows());
		}
		public grdSpecialtyRow getRowByValue(Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSpecialtyRow(row);
		}
		public void setcolSpecialtyImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolSpecialtyImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colAccessComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
	}
	public static class grdClinicRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClinicRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolClinicImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolClinicImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolClinicImageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getcolClinicImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolClinicImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolClinicImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolClinicReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolClinicReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolClinicOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolClinic()
		{
			return (String)super.row.get(1);
		}
		public void setcolClinic(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolClinicTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolAccessReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolAccessOpened()
		{
			super.row.showOpened(2);
		}
		public ims.correspondence.vo.lookups.Access getcolAccess()
		{
			return (ims.correspondence.vo.lookups.Access)super.row.get(2);
		}
		public void setcolAccess(ims.correspondence.vo.lookups.Access value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolAccessTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClinicRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClinicRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClinicRow get(int index)
		{
			return new grdClinicRow(super.collection.get(index));
		}
		public grdClinicRow newRow()
		{
			return new grdClinicRow(super.collection.newRow());
		}
		public grdClinicRow newRow(boolean autoSelect)
		{
			return new grdClinicRow(super.collection.newRow(autoSelect));
		}
		public grdClinicRow newRowAt(int index)
		{
			return new grdClinicRow(super.collection.newRowAt(index));
		}
		public grdClinicRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClinicRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClinicGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdClinicRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClinicRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClinicRowCollection getRows()
		{
			return new grdClinicRowCollection(super.grid.getRows());
		}
		public grdClinicRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClinicRow(row);
		}
		public void setcolClinicImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolClinicImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolClinicHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolClinicHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colAccessComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 272, 384, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Consultant", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 204, 24, 424, 179, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"User Search", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 288, 208, 272, 384, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specialty", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 568, 208, 272, 384, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Clinic", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 220, 48, 88, 13, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Real Surame:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 519, 43, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 311, 45, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 266, 256, 310, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdConsultantTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdConsultantTemp);
		grdConsultantGrid grdConsultant = (grdConsultantGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConsultantGrid.class, m_grdConsultantTemp);
		grdConsultant.addImageColumn(" ", 0, 0, 32, true, 0);
		grdConsultant.addStringColumn("Name", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdConsultant.addComboBoxColumn("Access", 0, 0, -1, false, true, false, false, true, -1);
		super.addGrid(grdConsultant);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 216, 72, 376, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdUsersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdUsersTemp);
		grdUsersGrid grdUsers = (grdUsersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdUsersGrid.class, m_grdUsersTemp);
		grdUsers.addStringColumn("User Name", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdUsers.addStringColumn("Real Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdUsers);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 296, 264, 256, 310, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSpecialtyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSpecialtyTemp);
		grdSpecialtyGrid grdSpecialty = (grdSpecialtyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtyGrid.class, m_grdSpecialtyTemp);
		grdSpecialty.addImageColumn(" ", 0, 0, 32, true, 0);
		grdSpecialty.addStringColumn("Specialty", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSpecialty.addComboBoxColumn("Access", 0, 0, -1, false, true, false, false, true, -1);
		super.addGrid(grdSpecialty);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 576, 264, 256, 310, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdClinicTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdClinicTemp);
		grdClinicGrid grdClinic = (grdClinicGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicGrid.class, m_grdClinicTemp);
		grdClinic.addImageColumn(" ", 0, 0, 32, true, 0);
		grdClinic.addStringColumn("Clinic", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinic.addComboBoxColumn("Access", 0, 0, -1, false, true, false, false, true, -1);
		super.addGrid(grdClinic);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 248, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.ClearEnabled16, this.getImages().Core.ClearDisabled16, "Remove access from all consultants", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 216, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.AnswerBox_No, this.getImages().Core.AnswerBox_No, "Grant R/O access from all consultants", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 184, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, this.getImages().Core.AnswerBox_Yes, this.getImages().Core.AnswerBox_Yes, "Grant R/W access to all consultants", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 528, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled16, this.getImages().Core.ClearDisabled16, "Remove access from all specialties", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 496, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AnswerBox_No, this.getImages().Core.AnswerBox_No, "Grant R/O access from all specialties", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 464, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AnswerBox_Yes, this.getImages().Core.AnswerBox_Yes, "Grant R/W access to all specialties", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 808, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled16, this.getImages().Core.ClearDisabled16, "Remove all access from all clinics", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 776, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AnswerBox_No, this.getImages().Core.AnswerBox_No, "Grant R/O access from all clinics", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 744, 232, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AnswerBox_Yes, this.getImages().Core.AnswerBox_Yes, "Grant R/W access to all clinics", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSearch()
	{
		return (Button)super.getControl(8);
	}
	public TextBox txtUserName()
	{
		return (TextBox)super.getControl(9);
	}
	public grdConsultantGrid grdConsultant()
	{
		return (grdConsultantGrid)super.getGrid(0);
	}
	public grdUsersGrid grdUsers()
	{
		return (grdUsersGrid)super.getGrid(1);
	}
	public grdSpecialtyGrid grdSpecialty()
	{
		return (grdSpecialtyGrid)super.getGrid(2);
	}
	public grdClinicGrid grdClinic()
	{
		return (grdClinicGrid)super.getGrid(3);
	}
	public ImageButton imbClearAllConsultants()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton imbGrantROAllConsultants()
	{
		return (ImageButton)super.getControl(15);
	}
	public ImageButton imbSelectAllConsultants()
	{
		return (ImageButton)super.getControl(16);
	}
	public ImageButton imbClearAllSpecialies()
	{
		return (ImageButton)super.getControl(17);
	}
	public ImageButton imbGrantROAllSpecialties()
	{
		return (ImageButton)super.getControl(18);
	}
	public ImageButton imbSelectAllSpecialties()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbClearClinics()
	{
		return (ImageButton)super.getControl(20);
	}
	public ImageButton imbGrantROAllClinics()
	{
		return (ImageButton)super.getControl(21);
	}
	public ImageButton imbSelectAllClinics()
	{
		return (ImageButton)super.getControl(22);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				ClearEnabled16 = new ImageHelper(102168, "Images/Core/Clear.gif", new Integer(16), new Integer(16));
				ClearDisabled16 = new ImageHelper(102167, "Images/Core/ClearDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image ClearEnabled16;
			public final ims.framework.utils.Image ClearDisabled16;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image Service;
			public final ims.framework.utils.Image MemberOfStaff;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedUser = new ims.framework.ContextVariable("SelectedUser", prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier + "");
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
		}
		
		public boolean getSelectedUserIsNotNull()
		{
			return !cxl_SelectedUser.getValueIsNull(context);
		}
		public ims.admin.vo.AppUserShortVo getSelectedUser()
		{
			return (ims.admin.vo.AppUserShortVo)cxl_SelectedUser.getValue(context);
		}
		public void setSelectedUser(ims.admin.vo.AppUserShortVo value)
		{
			cxl_SelectedUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedUser = null;
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.correspondence.vo.UserAccessVo getSelectedInstance()
		{
			return (ims.correspondence.vo.UserAccessVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.correspondence.vo.UserAccessVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[85];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-ID", "ID_AppUser");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-USERNAME", "Username");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-PASSWORD", "Password");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-ENCODEDPASSWORD", "EncodedPassword");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-THEME", "Theme");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-PWDEXPDATE", "PwdExpDate");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-EFFECTIVEFROM", "EffectiveFrom");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-EFFECTIVETO", "EffectiveTo");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-ISACTIVE", "IsActive");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-DEBUGMODE", "DebugMode");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-LDAPUSERNAME", "LDAPUsername");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedUser_" + componentIdentifier, "BO-1021100004-LDAPPASSWORD", "LDAPPassword");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1053100011-ID", "ID_UserAccess");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Correspondence.UserProfile.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1053100011-APPUSER", "AppUser");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
