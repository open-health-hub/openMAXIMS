//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.correspondenceheadersadminconfiguration;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.correspondence.vo.TemplateCategoryVo;
import ims.correspondence.vo.TemplateCategoryVoCollection;
import ims.correspondence.vo.lookups.Header;
import ims.correspondence.vo.lookups.HeaderCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_HEADING =1;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		initialize();
		open();
	}
	
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		initializeGrid();
	}
	
	private void initializeGrid() 
	{
		form.dyngrdHeaders().clear();
		form.dyngrdHeaders().getColumns().newColumn("Templates / Categories", COL_HEADING);
		form.dyngrdHeaders().getColumns().getByIdentifier(COL_HEADING).setWidth(-1);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		populateGrid();
	}
	
	private void populateGrid() 
	{
		form.dyngrdHeaders().getRows().clear();
		
		ReportTemplateVoCollection templateColl = domain.listTemplates(null);
		
		if(templateColl == null)
			return;
		
		DynamicGridRow row;
		for(int i=0; i<templateColl.size(); i++)
		{
			if(templateColl.get(i) != null)
			{
				row = form.dyngrdHeaders().getRows().newRow();
				row.setValue(templateColl.get(i));
				row.setExpanded(true);
				row.setBackColor(Color.Beige);
				updateRowTemplate(row, templateColl.get(i));
			}
		}
	}
	
	private void updateRowTemplate(DynamicGridRow row, ReportTemplateVo reportTemplate) 
	{
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdHeaders().getColumns().getByIdentifier(COL_HEADING);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(reportTemplate.getName());
		cell.setReadOnly(true);
		
		populateRowTemplate(row, reportTemplate);
	}
	
	private void populateRowTemplate(DynamicGridRow parentRow, ReportTemplateVo reportTemplate) 
	{
		TemplateCategoryVo tempCat = domain.getTemplateCategory(reportTemplate);
		
		if(tempCat == null)
			return;
			
		parentRow.setValue(tempCat);
		parentRow.getRows().clear();
		for(int i=0; i<tempCat.getDischargeCategories().size(); i++)
		{
			DynamicGridRow row = parentRow.getRows().newRow();
			row.setValue(tempCat.getDischargeCategories().get(i));
			updateRowTemplateCategory(row,tempCat.getDischargeCategories().get(i));
		}
	}
	
	private void updateRowTemplateCategory(DynamicGridRow row, Header header) 
	{
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdHeaders().getColumns().getByIdentifier(COL_HEADING);
		cell = row.getCells().newCell(column,(form.getMode().equals(FormMode.EDIT) ? DynamicCellType.QUERYCOMBOBOX : DynamicCellType.STRING ));
		if(form.getMode().equals(FormMode.EDIT))
		{
			DynamicGridCellItem newComboItem = cell.getItems().newItem(header);
			cell.setValue(header);
		}
		else if(form.getMode().equals(FormMode.VIEW))
		{
			cell.setValue(header.getIItemText());
		}
		cell.setReadOnly(!form.getMode().equals(FormMode.EDIT));
	}
	
	public void clearInstanceControls()
	{
		// TODO: Add you code here.
	}
	
	public void addTemplateCategory(DynamicGridRow parentRow)
	{
		if(parentRow.getValue() instanceof TemplateCategoryVo || parentRow.getValue() instanceof ReportTemplateVo)
		{
			DynamicGridRow childRow = parentRow.getRows().newRow(true);
			DynamicGridColumn column = null;
			DynamicGridCell cell = null;
			
			column = form.dyngrdHeaders().getColumns().getByIdentifier(COL_HEADING);
			cell = childRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
			cell.setTooltip("");
			cell.setAutoPostBack(true);
			parentRow.setExpanded(true);
		}
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		TemplateCategoryVoCollection toSave = new TemplateCategoryVoCollection();
		TemplateCategoryVoCollection toDelete = new TemplateCategoryVoCollection();
		
		populateTemplateCategoryCollection(toSave, toDelete);
		
		String arrErrors[] = toSave.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try 
		{
			domain.saveTemplateCategories(toSave, toDelete);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (ForeignKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}
	
	private void populateTemplateCategoryCollection(TemplateCategoryVoCollection toSave, TemplateCategoryVoCollection toDelete) 
	{
		for(int i=0; i < form.dyngrdHeaders().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdHeaders().getRows().get(i); 
			Object value = row.getValue();
			TemplateCategoryVo instance = null;
			
			if(value instanceof ReportTemplateVo)
			{
				if(row.getRows().size() == 0)
					continue;
				boolean hasValues = false;
				for(int x = 0; x < row.getRows().size(); x++)
				{
					if(row.getRows().get(x).getValue() != null)
					{
						hasValues = true;
						break;
					}
				}
				if(!hasValues)
					continue;
				
				instance = new TemplateCategoryVo();
				instance.setTemplate((ReportTemplateVo)value);
			}
			else if(value instanceof TemplateCategoryVo)
			{
				if(row.getRows().size() == 0)
				{
					toDelete.add((TemplateCategoryVo) value);
					continue;
				}
				instance = (TemplateCategoryVo)row.getValue();
			}
			else
			{
				// Unknown header row type, will ignore it
				continue;
			}
			
			HeaderCollection headers = new HeaderCollection();			
			for(int j = 0; j < row.getRows().size(); j++)
			{
				DynamicGridRow childRow = row.getRows().get(j); 
				if(childRow.getValue() != null)
				{
					if(!existInHeaderCollection(headers, j, childRow))
					{
						headers.add((Header)childRow.getValue());
					}
				}
			}
			
			instance.setDischargeCategories(headers);
			
			toSave.add(instance);			
		}
	}

	private boolean existInHeaderCollection(HeaderCollection headers, int j, DynamicGridRow childRow) 
	{
		boolean headerFind = false;
		if(j>0 && headers.size() > 0)
		{
			for(int z = 0; z < headers.size(); z++)
			{
				if(headers.get(z).equals((Header)childRow.getValue()))
				{
					headerFind = true;
					break;
				}
			}
		}
		return headerFind;
	}
	
	public void updateControlsState()
	{
		form.getContextMenus().Correspondence.getHeadersAdminConfigurationADDItem().setVisible(form.getMode().equals(FormMode.EDIT) && (form.dyngrdHeaders().getValue() instanceof TemplateCategoryVo || form.dyngrdHeaders().getValue() instanceof ReportTemplateVo));
		form.getContextMenus().Correspondence.getHeadersAdminConfigurationREMOVEItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.dyngrdHeaders().getValue() instanceof Header);
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		populateGrid();
	}
	
	@Override
	protected void onDyngrdHeadersRowSelectionChanged(DynamicGridRow row) 
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.HeadersAdminConfiguration.ADD:
				if(form.dyngrdHeaders().getSelectedRow() != null)
				{
					addTemplateCategory(form.dyngrdHeaders().getSelectedRow());
				}
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.HeadersAdminConfiguration.REMOVE:
				if(form.dyngrdHeaders().getSelectedRow() != null)
				{
					removeTemplateCategory(form.dyngrdHeaders().getSelectedRow());
				}
				break;
		}
		updateControlsState();
	}
	
	private void removeTemplateCategory(DynamicGridRow selectedRow) 
	{
		if(selectedRow.getValue() instanceof Header)
		{
			form.dyngrdHeaders().getRows().remove(selectedRow);
		}
	}

	@Override
	protected void onDyngrdHeadersCellTextSubmited(DynamicGridCell cell) 
	{
		if(cell.getRow() != null && cell.getRow().getParent() != null && (cell.getRow().getParent().getValue() instanceof TemplateCategoryVo || cell.getRow().getParent().getValue() instanceof ReportTemplateVo))
		{
			if (cell.getTypedText() == null || cell.getTypedText().length() < 3)
			{
				engine.showMessage("Please enter at least 3 characters for search criteria");
				return;
			}
			populateQueryComboBox(cell, ims.correspondence.vo.lookups.LookupHelper.getHeader(domain.getLookupService()));
		}
	}
	
	private void populateQueryComboBox(DynamicGridCell cell, HeaderCollection headerColl) 
	{
		cell.getItems().clear();
		
		for(int i=0; i<headerColl.size(); i++)
		{
			if(validTypedText(cell.getTypedText(), headerColl.get(i).getIItemText()))
			{
				DynamicGridCellItem newComboItem = cell.getItems().newItem(headerColl.get(i));	
			}
		}
		
		if(headerColl.size() > 0)
		{
			cell.showOpened();
		}
	}
	
	private boolean validTypedText(String typedText, String inputString) 
	{
		if(typedText == null || typedText.length() == 0)
			return false;
		 
		String typedTextNew = typedText.replaceAll("%", "");
		
		if(typedTextNew.length() == 0)
			return true;
		
		if(inputString.toLowerCase().indexOf(typedTextNew.toLowerCase()) >= 0)
			return true;
		
		return false;
	}

	@Override
	protected void onDyngrdHeadersCellValueChanged(DynamicGridCell cell) 
	{
		if(cell.getRow() != null && cell.getRow().getParent() != null && (cell.getRow().getParent().getValue() instanceof TemplateCategoryVo || cell.getRow().getParent().getValue() instanceof ReportTemplateVo))
		{
			cell.getRow().setValue(cell.getValue());
		}
	}
	
	public void newInstance() throws PresentationLogicException 
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		updateInstance();
	}
}
