//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.25 build 1955.27417)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.glossarydialog;


import java.util.ArrayList;

import ims.core.vo.PasEventVo;
import ims.correspondence.helper.SpecifierAdapter;
import ims.correspondence.vo.GlossaryVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.interfaces.ICspTypeSpecifier;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		// Get the PASEventVo
		// Get the speicalties and consultants associated
		// show the glossaries based on that.		
	
		ArrayList iArray = new ArrayList();
		ICspTypeSpecifier[] specifierArray = null;

		if (form.getGlobalContext().Core.getPasEventIsNotNull())
		{
			PasEventVo pasEventVo = domain.getPasEvent(form.getGlobalContext().Core.getPasEvent());
			if (pasEventVo != null)
			{
				if (pasEventVo.getSpecialtyIsNotNull())
				{		
		
					iArray.add(new SpecifierAdapter(pasEventVo.getSpecialty()));
						
				}
				if (pasEventVo.getConsultantIsNotNull())
				{
					iArray.add(pasEventVo.getConsultant());
				}
				
				specifierArray = getArray(iArray);
	
	
				if (specifierArray != null)
				{
					populateGlossaryList(domain.listDistinctGlossariesForProfileTypes(specifierArray));
				}
			}
		}
			

	}
	private ICspTypeSpecifier[] getArray(ArrayList array) 
	{
		if(array == null)
			return null;
		
		ICspTypeSpecifier[] result = new ICspTypeSpecifier[array.size()];
		
		for(int x = 0; x < array.size(); x++)
			result[x] = (ICspTypeSpecifier)array.get(x);
		
		return result;
	}
	private void populateGlossaryList(GlossaryVoCollection voGlossaryColl) 
	{
		form.grdGlossaryItems().getRows().clear();
		GenForm.grdGlossaryItemsRow row;
		if (voGlossaryColl != null)
		{
			for(int i=0; i<voGlossaryColl.size();i++)
			{
				row = form.grdGlossaryItems().getRows().newRow();
				row.setValue(voGlossaryColl.get(i));
				row.setGlossaryItem(voGlossaryColl.get(i).getGlossary().getText());
			}
		}
		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdGlossaryItems().getSelectedRowIndex() >= 0)
		{
			form.getGlobalContext().Correspondence.setGlossaryText(form.richTextGlossary().getValue());
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("Please select a glossary item from the left hand side or choose cancel.");
	}
	protected void onGrdGlossaryItemsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.richTextGlossary().setValue(form.grdGlossaryItems().getRows().get(form.grdGlossaryItems().getSelectedRowIndex()).getValue().getGlossaryText());
	}
	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.glossarydialog.Handlers#onBtnSelectClick()
	 */
	protected void onBtnSelectClick() throws PresentationLogicException {
		if (form.grdGlossaryItems().getSelectedRowIndex() > 0)
		{
			form.getGlobalContext().Correspondence.setGlossaryText(form.richTextGlossary().getValue());
			engine.close(DialogResult.OK);
		}
		else
			engine.showMessage("Please select a glossary item from the left hand side or choose cancel.");
		
	}
}
