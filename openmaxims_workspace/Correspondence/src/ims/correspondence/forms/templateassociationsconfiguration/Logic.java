//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3023.13950)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.templateassociationsconfiguration;

import java.util.ArrayList;

import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.correspondence.forms.templateassociationsconfiguration.GenForm.grdTemplatesRow;
import ims.correspondence.vo.TemplateAssociationsVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	// Class constants
	private static final int MAX_DROPDOWN_ITEMS = 10;
	
	
	// Dynamic grid column identifiers
	private static int COL_IMAGE = 1;
	private static int COL_ASSOCIATION = 2;
	
	// Nested enumeration - Modify here to add new association type
	private enum AssociationCategory
	{
		CLINICS (0, "Clinics", "Clinic"), CONSULTANTS (1, "Consultants", "Consultant"), SPECIALTY (2, "Specialties", "Specialty");
		
		private int index;
		private String value;
		private String singular;
		
		AssociationCategory(int index, String value, String singular)
		{
			this.index = index;
			this.value = value;
			this.singular = singular;
		}
		
		public int getIndex()
		{
			return this.index;
		}
		
		public String getStringName()
		{
			return this.value;
		}
		
		public String getStringSingularName()
		{
			return this.singular;
		}
	}

	
	//////////////////////////////////////////////////////////////////////
	////	Events region
	//////////////////////////////////////////////////////////////////////
	
//	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
//	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


//	@Override
	protected void onBtnSearchClick() throws PresentationLogicException
	{
		listTemplatesByName(form.txtTemplateName().getValue());
		updateControlsState();//WDEV-17872
	}

	//	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

//	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

//	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	
//	@Override
	protected void onGrdTemplatesSelectionChanged() throws PresentationLogicException
	{
		setAssociations(form.grdTemplates().getValue());
		updateControlsState();
	}

//	@Override
	protected void onGrdTemplatesSelectionCleared() throws PresentationLogicException
	{
		setAssociations(null);
		updateControlsState();
	}

	
//	@Override
	protected void onDyngrdAssociationsRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenuState();
	}
	
//	@Override
	protected void onDyngrdAssociationsRowSelectionCleared() throws PresentationLogicException
	{
		updateContextMenuState();
	}

	//	@Override
	protected void onDyngrdAssociationsCellTextSubmited(DynamicGridCell cell)
	{
		if (!(cell.getRow().getParent().getValue() instanceof AssociationCategory))
			return;
		
		if (cell.getTypedText() == null || cell.getTypedText().length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters to search upon.");
			return;
		}
		
		try
		{
			switch ((AssociationCategory) cell.getRow().getParent().getValue())
			{
				case CLINICS:
					populateQueryComboboxClinics(cell, listClinicsByName(cell.getTypedText()));
					break;
					
				case CONSULTANTS:
					populateQueryComboboxConsultants(cell, listConsultantsByName(cell.getTypedText()));
					break;
					
				case SPECIALTY:
					populateQueryComboboxSpecialties(cell, listSpecialtyByName(cell.getTypedText()));
					break;
			}
		}
		catch (CodingRuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
		
		form.dyngrdAssociations().setSelectedRow(null);
		updateContextMenuState();
	}


	//	@Override
	protected void onDyngrdAssociationsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getType() != DynamicCellType.QUERYCOMBOBOX)
			return;
		
		if (!(cell.getRow().getParent().getValue() instanceof AssociationCategory))
			return;
		
		switch ((AssociationCategory) cell.getRow().getParent().getValue())
		{
			case CLINICS:
				updateClinicAssociationRowValue(cell.getRow());
				break;
				
			case CONSULTANTS:
				updateConsultantAssociationRowValue(cell.getRow());
				break;
				
			case SPECIALTY:
				updateSpecialtyAssociationRowValue(cell.getRow());
				break;
		}
		
		form.dyngrdAssociations().setSelectedRow(null);
		updateContextMenuState();
	}
	

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociationsConfiguration.AssociationAdd:
			{
				switch ((AssociationCategory) form.dyngrdAssociations().getValue())
				{
					case CLINICS:
						newClinicAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
						
					case CONSULTANTS:
						newConsultantAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
						
					case SPECIALTY:
						newSpecialtyAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
				}
				break;
			}
				
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociationsConfiguration.AssociationEdit:
			{
				switch ((AssociationCategory) form.dyngrdAssociations().getSelectedRow().getParent().getValue())
				{
					case CLINICS:
						editClinicAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
						
					case CONSULTANTS:
						editConsultantAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
						
					case SPECIALTY:
						editSpecialtyAssociation(form.dyngrdAssociations().getSelectedRow());
						updateControlsState();
						break;
				}
				break;
			}
				
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociationsConfiguration.AssociationRemove:
				removeAssociation(form.dyngrdAssociations().getSelectedRow());
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociationsConfiguration.AssociationRemoveAll:
				removeAllAssociations(form.dyngrdAssociations().getSelectedRow());
				break;
		}
	}


	//////////////////////////////////////////////////////////////////////
	////	Form control UI functions
	//////////////////////////////////////////////////////////////////////
//	@Override
	public void initialize() throws FormOpenException
	{
		super.initialize();
		
		// Set up the dynamic grid
		DynamicGridColumn column;
		
		// First column (IMAGE)
		column = form.dyngrdAssociations().getColumns().newColumn("", COL_IMAGE);
		column.setCanGrow(false);
		column.setWidth(60);
		column.setAlignment(Alignment.RIGHT);
		
		// Second column (ASSOCIATION)
		column = form.dyngrdAssociations().getColumns().newColumn(/*"Associations"*/"", COL_ASSOCIATION);
		column.setCanGrow(true);
		column.setWidth(-1);
	}

//	@Override
	public void open() throws PresentationLogicException
	{
		// If there is a template selected - list associations
		if (form.grdTemplates().getValue() != null)
		{
			 setAssociations(form.grdTemplates().getValue());
		}
		else
		{
			clearInstanceControls();
		}
		
		form.setMode(FormMode.VIEW);
	}

//	@Override
	public void clearInstanceControls()
	{
		// Clear list
		form.grdTemplates().getRows().clear();
		
		// Clear details
		setAssociations(null);
	}
	
//	@Override
	public void updateControlsState()
	{
		if (form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.grdTemplates().getValue() != null);
		}
		
		updateContextMenuState();
	}
	

	public void updateContextMenuState()
	{
		if (form.getMode() == FormMode.VIEW)
		{
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationAddItem().setVisible(false);
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationEditItem().setVisible(false);
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveItem().setVisible(false);
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveAllItem().setVisible(false);
		}
		else
		{
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationAddItem().setVisible(
					form.dyngrdAssociations().getValue() instanceof AssociationCategory);
			
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationEditItem().setVisible(
						form.dyngrdAssociations().getSelectedRow() != null
					&&	!(form.dyngrdAssociations().getValue() instanceof AssociationCategory)
					&&	form.dyngrdAssociations().getSelectedRow().getCells().get(form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION)).getType() == DynamicCellType.STRING);
			
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveItem().setVisible(
						form.dyngrdAssociations().getSelectedRow() != null
					&&	!(form.dyngrdAssociations().getValue() instanceof AssociationCategory));
			
			form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveAllItem().setVisible(
						form.dyngrdAssociations().getValue() instanceof AssociationCategory
					&&	form.dyngrdAssociations().getSelectedRow().getRows().size() != 0);
			
			
			// Set up the text for context menu
			DynamicGridRow row = form.dyngrdAssociations().getSelectedRow();
			
			if (row != null && row.getValue() instanceof AssociationCategory)
			{
				String category = ((AssociationCategory) row.getValue()).getStringName();
				String element = ((AssociationCategory) row.getValue()).getStringSingularName();
				
				form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationAddItem().setText("Add " + element);
				form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveAllItem().setText("Remove All " + category);
			}
			else if (row != null && row.getParent() != null && row.getParent().getValue() instanceof AssociationCategory)
			{
				String element = ((AssociationCategory) row.getParent().getValue()).getStringSingularName();
				
				form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationEditItem().setText("Edit " + element);
				form.getContextMenus().Correspondence.getTemplateAssociationsConfigurationAssociationRemoveItem().setText("Remove " + element);
			}
		}
	}

	//////////////////////////////////////////////////////////////////////
	////	Form action functions
	//////////////////////////////////////////////////////////////////////
//	@Override
	public void newInstance() throws PresentationLogicException
	{
	}
	
//	@Override
	public void updateInstance()
	{
	}

//	@Override
	public boolean save() throws PresentationLogicException
	{
		if (form.grdTemplates().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Can not save on null template");
		
		
		TemplateAssociationsVo templateAssociation = form.getLocalContext().getTemplateAssociation();
		
		if (templateAssociation == null)
		{
			if (isEmptyRecord())
				return true;
			
			templateAssociation = new TemplateAssociationsVo();
		}
		
		templateAssociation.setTemplate(form.grdTemplates().getValue());
		templateAssociation.setClinics(new ClinicLiteVoCollection());
		templateAssociation.setConsultants(new MedicLiteVoCollection());
		templateAssociation.setSpecialties(new SpecialtyCollection());

		getAssociations(templateAssociation, form.dyngrdAssociations().getRows());

		String[] errors = templateAssociation.validate();
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveTemplateAssociations(templateAssociation);
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		
		return true;
	}


	private boolean isEmptyRecord()
	{
		for (int i = 0; i < form.dyngrdAssociations().getRows().size(); i++)
		{
				if (form.dyngrdAssociations().getRows().get(i).getRows().size() != 0)
					return false;
		}
		
		return true;
	}

	//////////////////////////////////////////////////////////////////////
	////	Template grid functions
	//////////////////////////////////////////////////////////////////////
	private void listTemplatesByName(String templateName)
	{
		ReportTemplateLiteVoCollection templateList;
		
		// Clear the form 
		clearInstanceControls();
		
		try
		{
			// List the templates from domain
			templateList = domain.listTemplatesByName(templateName);
			
			if (templateList == null || templateList.size() == 0)
			{
				engine.showMessage("No templates found. Please define templates before accesing this form.");
				return;
			}
			
			for (int i = 0; i < templateList.size(); i++)
			{
				if (templateList.get(i) != null)
				{
					setTemplateGridRow(form.grdTemplates().getRows().newRow(), templateList.get(i));
				}
			}
		}
		catch (DomainInterfaceException exception)
		{	engine.showMessage(exception.getMessage());	}
	}

	private void setTemplateGridRow(grdTemplatesRow row, ReportTemplateLiteVo template)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not set a null row to a value");
		
		if (template == null)
			throw new CodingRuntimeException("Logical Error - Value passed for row is null");
		
		// Set the value of the row
		row.setValue(template);
		
		// Set the cell 
		row.setcolTemplateName(template.getName());
		row.setTooltipForcolTemplateName(template.getName());
	}
	
	
	//////////////////////////////////////////////////////////////////////
	////	Associations grid functions
	//////////////////////////////////////////////////////////////////////
	private void getAssociations(TemplateAssociationsVo templateAssociation, DynamicGridRowCollection rows)
	{
		if (templateAssociation == null)
			throw new CodingRuntimeException("Logical Error - Can not set a null template association");
		
		if (rows == null)
			return;
		
		
		DynamicGridRow row;
		
		for (int i = 0; i < rows.size(); i++)
		{
			row = rows.get(i);
			
			if (!(row.getValue() instanceof AssociationCategory))
				throw new CodingRuntimeException("Major Logical Error - Non Association Category added as category");
			
			switch ((AssociationCategory) row.getValue())
			{
				case CLINICS:
					addClinicAssociationsToTemplate(templateAssociation.getClinics(), row.getRows());
					break;
					
				case CONSULTANTS:
					addConsltantAssociationsToTemplate(templateAssociation.getConsultants(), row.getRows());
					break;
					
				case SPECIALTY:
					addSpecialtyAssociationsToTemplate(templateAssociation.getSpecialties(), row.getRows());
					break;
			}
		}
	}
	

	private void setAssociations(ReportTemplateLiteVo template)
	{
		form.dyngrdAssociations().getRows().clear();
		
		if (template == null)
		{
			form.lblTemplateName().setValue("Template: -");
			return;
		}
		
		form.lblTemplateName().setValue("Template: " + template.getName());
		
		try
		{
			// Get template associations from domain
			TemplateAssociationsVo templateAssociations = domain.getTemplateAssociation(template);
			
			// Populate associations
			populateAssociation(templateAssociations);
			
			// Set local context
			form.getLocalContext().setTemplateAssociation(templateAssociations);
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
		}
	}

	private void populateAssociation(TemplateAssociationsVo templateAssociations)
	{
		form.dyngrdAssociations().getRows().clear();
		
		
		// Iterate through all the associations categories and add them to the grid
		for (AssociationCategory association : AssociationCategory.values())
		{
			// Create a new row
			DynamicGridRow newRow = newCategoryAssociationsGridRow(association);
			newRow.setExpanded(true);
			
			// Populate the categories
			if (templateAssociations == null)
				continue;
			
			switch (association)
			{
				case CLINICS:
					populateClinicAssociations(newRow, templateAssociations.getClinics());
					break;
					
				case CONSULTANTS:
					populateConsultantAssociations(newRow, templateAssociations.getConsultants());
					break;
					
				case SPECIALTY:
					populateSpecialtyAssociations(newRow, templateAssociations.getSpecialties());
					break;
			}
		}
	}


	private DynamicGridRow newCategoryAssociationsGridRow(AssociationCategory association)
	{
		if (association == null)
			throw new CodingRuntimeException("Major Logical Error - Can not create an associations category with null value");
		
		DynamicGridRow newRow;
		DynamicGridCell newCell;
		DynamicGridColumn column;
		
		// Create a new row in grid
		newRow = form.dyngrdAssociations().getRows().newRow();
		newRow.setBackColor(Color.Beige);
		newRow.setValue(association);
		
		// Create the fist cell in the row (IMAGE CATEGORY)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		switch (association)
		{
			case CLINICS:
				newCell.setValue(form.getImages().Admin.Clinic02);
				break;
				
			case CONSULTANTS:
				newCell.setValue(form.getImages().Core.Users);
				break;
				
			case SPECIALTY:
				newCell.setValue(form.getImages().Admin.Specialty02);
				break;
		}
		
		// Create the second cell in the row
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(association.getStringName());
		newCell.setReadOnly(true);
		
		return newRow;
	}


	private void populateClinicAssociations(DynamicGridRow parrentRow, ClinicLiteVoCollection clinics)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Clinical association rows to null parent row");
		
		if (clinics == null)
			return;
		
		for (int i = 0; i < clinics.size(); i++)
		{
			newClinicAssociationRow(parrentRow, clinics.get(i));
		}
	}

	private void populateConsultantAssociations(DynamicGridRow parrentRow, MedicLiteVoCollection medics)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Clinical association rows to null parent row");
		
		if (medics == null)
			return;
		
		for (int i = 0; i < medics.size(); i++)
		{
			newConsultantAssociationRow(parrentRow, medics.get(i));
		}
	}

	private void populateSpecialtyAssociations(DynamicGridRow parrentRow, SpecialtyCollection specialties)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Clinical association rows to null parent row");
		
		if (specialties == null)
			return;
		
		for (int i = 0; i < specialties.size(); i++)
		{
			newSpecialtyAssociationRow(parrentRow, specialties.get(i));
		}
	}


	private void newClinicAssociationRow(DynamicGridRow parrentRow, ClinicLiteVo clinic)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add clinical association row to a null parrent row");
		
		if (clinic == null)
			return;
		
		
		DynamicGridCell newCell;
		DynamicGridColumn column;
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow();
		newRow.setValue(clinic);
		
		// Create the first cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic01);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(clinic.getClinicName());
		newCell.setReadOnly(true);
	}

	private void newConsultantAssociationRow(DynamicGridRow parrentRow, MedicLiteVo medic)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add consultant association row to a null parrent row");
		
		if (medic == null)
			return;

		
		DynamicGridCell newCell;
		DynamicGridColumn column;
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow();
		newRow.setValue(medic);
		
		// Create the fist cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(medic.getName().toString());
		newCell.setReadOnly(true);
	}

	private void newSpecialtyAssociationRow(DynamicGridRow parrentRow, Specialty specialty)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add specialty association row to a null parrent row");
		
		if (specialty == null)
			return;
		
		
		DynamicGridCell newCell;
		DynamicGridColumn column;
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow();
		newRow.setValue(specialty);
		
		// Create the first cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty01);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(specialty.getText());
		newCell.setReadOnly(true);
	}


	private void newClinicAssociation(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a CLINIC association to a null parrent row");
		
		if (!(parrentRow.getValue() instanceof AssociationCategory) || ((AssociationCategory) parrentRow.getValue()) != AssociationCategory.CLINICS)
			throw new CodingRuntimeException("Logical Error - Function must be called from CLINICS category row only");
		

		parrentRow.setExpanded(true);
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new ClinicLiteVo());
		form.dyngrdAssociations().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		// Create the first cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic01);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
	}

	private void newConsultantAssociation(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a CONSULTANT association to a null parrent row");
		
		if (!(parrentRow.getValue() instanceof AssociationCategory) || ((AssociationCategory) parrentRow.getValue()) != AssociationCategory.CONSULTANTS)
			throw new CodingRuntimeException("Logical Error - Function must be called from CONSULTANTS category row only");

		
		parrentRow.setExpanded(true);
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new MedicLiteVo());
		form.dyngrdAssociations().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		// Create the first cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
	}

	private void newSpecialtyAssociation(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a CONSULTANT association to a null parrent row");
		
		if (!(parrentRow.getValue() instanceof AssociationCategory) || ((AssociationCategory) parrentRow.getValue()) != AssociationCategory.SPECIALTY)
			throw new CodingRuntimeException("Logical Error - Function must be called from SPECIALTIES category row only");

		
		parrentRow.setExpanded(true);
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new Specialty());
		form.dyngrdAssociations().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		// Create the first cell in the row (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty01);
		
		// Create the second cell in the row (STRING)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
	}


	private void editClinicAssociation(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AssociationCategory)) || ((AssociationCategory)parentRow.
		getValue()) != AssociationCategory.CLINICS)
			throw new CodingRuntimeException("Logical Erroe - Function must be called from CLINICS category rows");
		
		if (row.getValue() == null)
			row.setValue(new ClinicLiteVo());
		
		if (!(row.getValue() instanceof ClinicLiteVo))
			throw new CodingRuntimeException("Major Logical Error - Non clinical association added to CLINICS category");
		
		
		// Insert a new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((ClinicLiteVo) row.getValue());

		// Column identifier
		DynamicGridColumn column;
		// Declare a cell variable
		DynamicGridCell newCell;

		
		// Create the first cell (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic01);
		
		// Create the second cell (QUERYCOMBOBOX)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			ClinicLiteVo value = (ClinicLiteVo) row.getCells().get(column).getValue();
			
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			ClinicLiteVo value = (ClinicLiteVo) row.getValue();

			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText((value).toString());
		}
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			TemplateAssociationsVo localContextTemplateAssociation = form.getLocalContext().getTemplateAssociation();
			if (localContextTemplateAssociation == null)
				return;
			
			localContextTemplateAssociation.getClinics().remove((ClinicLiteVo) row.getValue());
			
			// Select the new row
			form.dyngrdAssociations().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
	}

	private void editConsultantAssociation(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AssociationCategory)) || ((AssociationCategory)parentRow.getValue()) != AssociationCategory.CONSULTANTS)
			throw new CodingRuntimeException("Logical Erroe - Function must be called from CONSULTANTS category rows");
		
		if (row.getValue() == null)
			row.setValue(new MedicLiteVo());
		
		if (!(row.getValue() instanceof MedicLiteVo))
			throw new CodingRuntimeException("Major Logical Error - Non consultant association added to CONSULTANTS category");
		
		
		// Insert a new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((MedicLiteVo) row.getValue());

		// Column identifier
		DynamicGridColumn column;
		// Declare a cell variable
		DynamicGridCell newCell;

		
		// Create the first cell (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);
		
		// Create the second cell (QUERYCOMBOBOX)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			MedicLiteVo value = (MedicLiteVo) row.getCells().get(column).getValue();
			
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			MedicLiteVo value = (MedicLiteVo) row.getValue();

			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText((value).toString());
		}
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			TemplateAssociationsVo localContextTemplateAssociation = form.getLocalContext().getTemplateAssociation();
			if (localContextTemplateAssociation == null)
				return;
			
			localContextTemplateAssociation.getConsultants().remove((MedicLiteVo) row.getValue());
			
			// Select the new row
			form.dyngrdAssociations().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
	}

	private void editSpecialtyAssociation(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AssociationCategory)) || ((AssociationCategory)parentRow.getValue()) != AssociationCategory.SPECIALTY)
			throw new CodingRuntimeException("Logical Erroe - Function must be called from SPECIALITIES category rows");
		
		if (row.getValue() == null)
			row.setValue(new Specialty());
		
		if (!(row.getValue() instanceof Specialty))
			throw new CodingRuntimeException("Major Logical Error - Non specialty association added to SPECIALTIES category");
		
		
		// Insert a new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((Specialty) row.getValue());

		// Column identifier
		DynamicGridColumn column;
		// Declare a cell variable
		DynamicGridCell newCell;

		
		// Create the first cell (IMAGE)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty01);
		
		// Create the second cell (QUERYCOMBOBOX)
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			Specialty value = (Specialty) row.getCells().get(column).getValue();
			
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			Specialty value = (Specialty) row.getValue();

			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText((value).toString());
		}
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			TemplateAssociationsVo localContextTemplateAssociation = form.getLocalContext().getTemplateAssociation();
			if (localContextTemplateAssociation == null)
				return;
			
			localContextTemplateAssociation.getSpecialties().remove((Specialty) row.getValue());
			
			// Select the new row
			form.dyngrdAssociations().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
	}


	private void removeAssociation(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		form.dyngrdAssociations().getRows().remove(row);
	}

	private void removeAllAssociations(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		while (row.getRows().size() > 0)
		{
			row.getRows().remove(row.getRows().get(0));
		}
	}

	
	private void populateQueryComboboxClinics(DynamicGridCell cell, ClinicLiteVoCollection clinicList)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");
		
		// Clear the query combobox
		cell.getItems().clear();
		
		if (clinicList == null || clinicList.size() == 0)
			return;
		
		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the clinics that are already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof ClinicLiteVo))
				throw new CodingRuntimeException("Non clinical association added to CLINICS category");
			
			clinicList.remove((ClinicLiteVo) row.getValue());
		}
		
		
		if (clinicList.size() == 0)
			return;
		
		
		// Add clinics to the query combobox item collection
		DynamicGridCellItem newClinicEntry;
		
		for (int i = 0; i < clinicList.size(); i++)
		{
			// Create a new row for each entry
			newClinicEntry = cell.getItems().newItem();
			newClinicEntry.setValue(clinicList.get(i));
		}
		
		// Expand the cell
		cell.setMaxDropDownItems(MAX_DROPDOWN_ITEMS);
		cell.showOpened();
	}

	private void populateQueryComboboxConsultants(DynamicGridCell cell, MedicLiteVoCollection consultantList)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");
		
		// Clear the query combobox
		cell.getItems().clear();
		
		if (consultantList == null || consultantList.size() == 0)
			return;
		
		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the medics that are already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof MedicLiteVo))
				throw new CodingRuntimeException("Non consultant association added to CONSULTANTS category");
			
			consultantList.remove((MedicLiteVo) row.getValue());
		}
		
		
		if (consultantList.size() == 0)
			return;
		
		
		// Add consultants to the query combobox item collection
		DynamicGridCellItem newConsultantEntry;
		
		for (int i = 0; i < consultantList.size(); i++)
		{
			// Create a new row for each entry
			newConsultantEntry = cell.getItems().newItem();
			newConsultantEntry.setValue(consultantList.get(i));
		}
		
		// Expand the cell
		cell.setMaxDropDownItems(MAX_DROPDOWN_ITEMS);
		cell.showOpened();
	}

	private void populateQueryComboboxSpecialties(DynamicGridCell cell, ArrayList<Specialty> specialtyList)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");
		
		// Clear the combobox
		cell.getItems().clear();
		
		if (specialtyList == null || specialtyList.size() == 0)
			return;
		
		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the specialties already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof Specialty))
				throw new CodingRuntimeException("Non specialty association added to SPECIALTY category");

			specialtyList.remove(null);
			specialtyList.remove(row.getValue());
		}
		
		if (specialtyList.size() == 0)
			return;
		
		// Add specialties to the query combobox item collection
		DynamicGridCellItem newSpecialtyEntry;
		
		for (int i = 0; i < specialtyList.size(); i++)
		{
			// Create a new row for each entry
			newSpecialtyEntry = cell.getItems().newItem();
			newSpecialtyEntry.setValue(specialtyList.get(i));
		}
		
		// Expand the cell
		cell.setMaxDropDownItems(MAX_DROPDOWN_ITEMS);
		cell.showOpened();
	}
	
	
	private void updateClinicAssociationRowValue(DynamicGridRow row)
	{
		if (row == null
			|| (row.getParent() == null)
			|| (!(row.getParent().getValue() instanceof AssociationCategory))
			|| (((AssociationCategory) row.getParent().getValue()) != AssociationCategory.CLINICS))
			throw new CodingRuntimeException("Major Logical Failure");
		
		if (row.getValue() == null)
			row.setValue(new ClinicLiteVo());
		
		if (!(row.getValue() instanceof ClinicLiteVo))
			throw new CodingRuntimeException("Major Logical Error - Clinic value expected");
		

		DynamicGridColumn column;
		DynamicGridCell cell;
		
		// Get the second cell value
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		cell = row.getCells().get(column);
		
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				row.setValue(null);
				cell.setTypedText(null);
			}
			else
				row.setValue((ClinicLiteVo) cell.getValue());
		}
	}

	private void updateConsultantAssociationRowValue(DynamicGridRow row)
	{
		if (row == null
			|| row.getParent() == null
			|| (!(row.getParent().getValue() instanceof AssociationCategory))
			|| (((AssociationCategory) row.getParent().getValue()) != AssociationCategory.CONSULTANTS))
			throw new CodingRuntimeException("Major Logical Failure");
		
		if (row.getValue() == null)
			row.setValue(new MedicLiteVo());
		
		if (!(row.getValue() instanceof MedicLiteVo))
			throw new CodingRuntimeException("Major Logical Error - Consultant value expected");
		
		
		DynamicGridColumn column;
		DynamicGridCell cell;
		
		// Get the second cell value
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		cell = row.getCells().get(column);
		
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				row.setValue(null);
				cell.setTypedText(null);
			}
			else
			{
				row.setValue((MedicLiteVo) cell.getValue());
			}
		}
	}

	private void updateSpecialtyAssociationRowValue(DynamicGridRow row)
	{
		if (row == null
			|| row.getParent() == null
			|| (!(row.getParent().getValue() instanceof AssociationCategory))
			|| (((AssociationCategory) row.getParent().getValue()) != AssociationCategory.SPECIALTY))
			throw new CodingRuntimeException("Mojor Logical Failure");
		
		if (row.getValue() == null)
			row.setValue(new Specialty());
		
		if (!(row.getValue() instanceof Specialty))
			throw new CodingRuntimeException("Major Logical Error - Specialty value expected");
		
		
		DynamicGridColumn column;
		DynamicGridCell cell;
		
		// Get the second cell value
		column = form.dyngrdAssociations().getColumns().getByIdentifier(COL_ASSOCIATION);
		cell = row.getCells().get(column);
		
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				row.setValue(null);
				cell.setTypedText(null);
			}
			else
			{
				row.setValue((Specialty) cell.getValue());
			}
		}
	}


	//////////////////////////////////////////////////////////////////////
	////	Algorithm functions
	//////////////////////////////////////////////////////////////////////
	private ClinicLiteVoCollection listClinicsByName(String clinicName) throws CodingRuntimeException
	{
		// Leave throws so that clinics are not cleared when an invalid search is made
		if (clinicName == null || clinicName.trim().length() < 3)
			throw new CodingRuntimeException("Clinic name search must be at least 3 characters long");
		

		// Build filtering VO
		ClinicLiteVo filterVo = new ClinicLiteVo();
		filterVo.setClinicName(clinicName);
		
		// Retrieve the clinics (list from domain)
		try
		{
			return domain.listClinics(filterVo);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}
	}

	private MedicLiteVoCollection listConsultantsByName(String consultantName) throws CodingRuntimeException
	{
		// Leave throws so that clinics are not cleared when an invalid search is made
		if (consultantName == null || consultantName.trim().length() < 3)
			throw new CodingRuntimeException("Consultant name search must be at least 3 characters long");
		
		
		// Build filtering VO
		MedicLiteVo filterVo = new MedicLiteVo();
		filterVo.setMos(new MemberOfStaffLiteVo());
		filterVo.getMos().setName(new PersonName());
		filterVo.getMos().getName().setSurname(consultantName);
		filterVo.getMos().getName().setForename(consultantName);
		
		// Retrieve the consultants (list from domain)
		try
		{
			return domain.listConsultants(filterVo);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}
	}

	private ArrayList<Specialty> listSpecialtyByName(String specialtyName) throws CodingRuntimeException
	{
		// Leave throws so that specialties are not cleared when an invalid search is made
		if (specialtyName == null || specialtyName.trim().length() < 3)
			throw new CodingRuntimeException("Specialty name search must be at least 3 characters long");
		
		
		// Build filtering lookup
		Specialty filterLookup = new Specialty();
		filterLookup.setText(specialtyName);
		
		// Retrieve the specialties (list form domain)
		try
		{
			return domain.listSpecialties(filterLookup);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}		
	}
	
	
	private void addClinicAssociationsToTemplate(ClinicLiteVoCollection clinics, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make clinics = new ClinicLiteVoCollection() in this function
		// clinics MUST ALWAYS reference the clinics in the TemplateAssociationVo
		
		if (rows == null)
			return;
		
		if (clinics == null)
			throw new CodingRuntimeException("Logical Error - Inserting values into null CLINICS collection");
		
		
		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof ClinicLiteVo))
				throw new CodingRuntimeException("Major Logical Error - Non Clinical association added to CLINICS category association");
			
			updateClinicAssociationRowValue(row);
			
			ClinicLiteVo clinicAssociation = (ClinicLiteVo) row.getValue();
			
			if (clinicAssociation != null)
				clinics.add(clinicAssociation);
		}
	}

	private void addConsltantAssociationsToTemplate(MedicLiteVoCollection consultants, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make consultants = new MedicLiteVoCollection() in this function
		// consultants MUST ALWAYS reference the consultants in the TemplateAssociationVo
		
		if (rows == null)
			return;
		
		if (consultants == null)
			throw new CodingRuntimeException("Logical Error - Inserting values into null CONSULTANTS collection");
		

		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof MedicLiteVo))
				throw new CodingRuntimeException("Major Logical Error - Non Consultant association added to CONSULTANT category association");
			
			updateConsultantAssociationRowValue(row);
			
			MedicLiteVo consultantAssociation = (MedicLiteVo) row.getValue();
			
			if (consultantAssociation != null)
				consultants.add(consultantAssociation);
		}
	}

	private void addSpecialtyAssociationsToTemplate(SpecialtyCollection specialties, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make specialties = new SpecialtyCollection() in this function
		// specialties MUST ALWAYS reference the specialties in the TemplateAssociationVo
		
		if (rows == null)
			return;
		
		if (specialties == null)
			throw new CodingRuntimeException("Logical Error - Inserting values into null SPECIALTIES collection");
		
		
		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof Specialty))
				throw new CodingRuntimeException("Major Logical Error - Non Specialty association added to SPECIALTIES category");
			
			updateSpecialtyAssociationRowValue(row);
			
			Specialty specialtyAssociation = (Specialty) row.getValue();
			
			if (specialtyAssociation != null)
				specialties.add(specialtyAssociation);
		}
	}
}
