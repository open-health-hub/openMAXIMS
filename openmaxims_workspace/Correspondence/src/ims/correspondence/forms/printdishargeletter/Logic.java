//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.29 build 2007.17688)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.printdishargeletter;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DocumentVo;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

import com.ims.query.builder.client.PrinterAvailableCollection;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.FormOpenException
	{ 
		//list available printers
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();		
		QueryBuilderClient client = new QueryBuilderClient(urlReportServer,engine.getSessionId());
		
		if(args.length >0)
		{
		Integer numberOfPrints = (Integer) args[0];
		// sets Number of prints to the number of addressees
		form.intHeaded().setValue(numberOfPrints);
		form.intStandard().setValue(numberOfPrints);
		}
		else
		{
			form.intHeaded().setValue(new Integer(1));
			form.intStandard().setValue(new Integer(1));
		}
		
		
		try
		{
			PrinterAvailableCollection printersColl = client.listPrinters(urlReportServer);
			if (printersColl != null)
			{
				for(int i=0;i<printersColl.size();i++)
				{
					form.cmbHeadedPaper().newRow(printersColl.get(i).getName(),printersColl.get(i).getName());
					form.cmbStandard().newRow(printersColl.get(i).getName(),printersColl.get(i).getName());
				}				
			}			
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage(e.getMessage());
			form.setMode(FormMode.VIEW);
		}

	}
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		if ((form.cmbHeadedPaper().getValue() == null) && (form.cmbStandard().getValue() == null))
		{
			engine.showMessage("Please select at least one printer.");
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(form.getGlobalContext().Core.getDocumentIDIsNotNull())
		{
		 
			QueryBuilderClient client = new QueryBuilderClient(urlQueryServer,engine.getSessionId());
			
 			//Get Document
			if (form.getGlobalContext().Core.getDocumentIDIsNotNull())
			{
				
				DocumentVo voDoc = new DocumentVo();
				voDoc.setID_Document(form.getGlobalContext().Core.getDocumentID());
				voDoc = domain.getDocument(voDoc);
												
				try
				{					
					if (form.cmbHeadedPaper().getValue() != null)
					{
						if (form.intHeaded().getValue() != null)
							client.printReport(voDoc.getContent().getBytes(),urlReportServer,form.cmbHeadedPaper().getValue(),form.intHeaded().getValue().intValue());
						else
						{
							engine.showMessage("Please enter number of copiesm for Headed paper.");
							return;
						}
					}
					if (form.cmbStandard().getValue() != null)
					{
						if (form.intStandard().getValue() != null)
							client.printReport(voDoc.getContent().getBytes(),urlReportServer,form.cmbStandard().getValue(),form.intStandard().getValue().intValue());
						else
						{
							engine.showMessage("Please enter number of copiesm for Standard paper.");
							return;
						}
					}

					engine.close(DialogResult.OK);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error preparing letter to print: " + e1.getMessage());
					return;
				}
			}			
			return;
		}		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
}
