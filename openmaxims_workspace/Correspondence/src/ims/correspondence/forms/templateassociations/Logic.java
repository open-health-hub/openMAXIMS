//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.25 build 1959.26374)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.templateassociations;


import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MedicVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.correspondence.forms.templateassociations.GenForm;
import ims.correspondence.vo.TemplateAssociationsVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;


public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();		
	}
	
	public void open() throws PresentationLogicException 
	{
		populateTemplateGrid(domain.listTemplates(null).sort());

		// Store these in local context variables as they are periodically re-displayed.
		listConsultants();
		listClinics();
		listSpecialties();		

		displayContextMenus(true);

		//set selection back
		if (form.getLocalContext().getSelectedTemplateIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdTemplateRow row = form.grdTemplate().getRowByValue(form.getLocalContext().getSelectedTemplate());			
			if (row != null && row.getValue() != null)
			{			
				form.grdTemplate().setValue(row.getValue());
				populateInstanceControl(form.grdTemplate().getValue());
			}
			else
				clearInstanceControls();
			updateControlsState();			
		}

		form.setMode(FormMode.VIEW);		
	}

	
	
	private void listConsultants() 
	{
		form.getLocalContext().setConsultants(domain.listMedics());
	}
	
	private void listClinics() 
	{
		form.getLocalContext().setClinics(domain.listClinics());		
	}

	private void listSpecialties() 
	{
		SpecialtyCollection lkpCollSpecialties = LookupHelper.getSpecialty(domain.getLookupService());				
		if ( null == lkpCollSpecialties)
			return;

		form.getLocalContext().setSpecialties(lkpCollSpecialties);
	}
	

	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.templateassociations.Handlers#onGrdTemplateSelectionChanged()
	 */
	protected void onGrdTemplateSelectionChanged() throws PresentationLogicException 
	{
		populateInstanceControl(form.grdTemplate().getValue());				
	}

	private void populateInstanceControl(TemplateBoRefVo voRef) 
	{
		form.treAssociate().clear();
		listAssociationsForTemplate(voRef);
		updateControlsState();
	}
	
	
	/**
	 * Populates the RHS tree with first the selected templates associated consultants , clinics and specialties.
	 */
	private void listAssociationsForTemplate(TemplateBoRefVo voRefTemplate)
	{								
		TreeNode clinicRoot = null;
		TreeNode consultantRoot = null;
		TreeNode serviceRoot = null;
		TreeNode node = null;
				
		TemplateAssociationsVo voTemplateAssociation = domain.getAssociationsForTemplate(voRefTemplate);		
		form.getLocalContext().setTemplateAssociations(voTemplateAssociation);
		if (voTemplateAssociation == null ) return;			

			
		
		if (voTemplateAssociation.getClinicsIsNotNull())
		{
			if (clinicRoot == null && voTemplateAssociation.getClinics().size() > 0)
				clinicRoot = form.treAssociate().getNodes().add(null,"Clinics");

			voTemplateAssociation.getClinics().sort();
			for (int i = 0; i < voTemplateAssociation.getClinics().size(); i++) 
			{
				node = clinicRoot.getNodes().add(voTemplateAssociation.getClinics().get(i), voTemplateAssociation.getClinics().get(i).getClinicName());				
				node.setCollapsedImage(form.getImages().Admin.Location);					
			}
		}
							

		if (voTemplateAssociation.getConsultantsIsNotNull())
		{
				if (consultantRoot == null && voTemplateAssociation.getConsultants().size() > 0)
					consultantRoot = form.treAssociate().getNodes().add(null,"Consultants");
				
				voTemplateAssociation.getConsultants().sort();
				for (int i = 0; i < voTemplateAssociation.getConsultants().size(); i++) 
				{
					node = consultantRoot.getNodes().add(voTemplateAssociation.getConsultants().get(i), voTemplateAssociation.getConsultants().get(i).getMos().toString());
					node.setCollapsedImage(form.getImages().Admin.MemberOfStaff);					
				}				
		}
			
		if (voTemplateAssociation.getSpecialtiesIsNotNull())
		{
				if (serviceRoot == null && voTemplateAssociation.getSpecialties().size() > 0)
					serviceRoot = form.treAssociate().getNodes().add(null,"Specialties");
					
				voTemplateAssociation.getSpecialties().sort();
				for (int i = 0; i < voTemplateAssociation.getSpecialties().size(); i++) 
				{
					node = serviceRoot.getNodes().add(voTemplateAssociation.getSpecialties().get(i), voTemplateAssociation.getSpecialties().get(i).getText());
					node.setCollapsedImage(form.getImages().Admin.Service);
				}
		}				

		form.treAssociate().expandAll();
	}

	/* (non-Javadoc)
	 * @see ims.dischargeletters.forms.templateassociations.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		form.getLocalContext().setSelectedMenuOption(new Integer(menuItemID));		
		form.setMode(FormMode.EDIT);
		
		switch(menuItemID)
		{				
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignClinics:												
				editClinicAssociations();
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignServices:
				editSpecialtyAssociations();
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignConsultants:
				editConsultantAssociations();
				break;
		}			
		
		displayContextMenus(false);		
	}
	
	
	
	/**
	 * @param collection
	 */
	private void populateTemplateGrid(ReportTemplateVoCollection voTemplateColl) 
	{
		if (voTemplateColl == null)
			return;
		
		form.grdTemplate().getRows().clear();
		form.grdTemplate().setValue(null);
		
		GenForm.grdTemplateRow row = null;
		for(int i=0;i<voTemplateColl.size();i++)
		{
			row = form.grdTemplate().getRows().newRow();
			row.setValue(voTemplateColl.get(i));			
			row.setcolTemplate(voTemplateColl.get(i).getName().toString());
		}
		
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	/**
	 * @param b
	 */
	private void setMenusVisibility(boolean b) 
	{
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignClinicsItem().setVisible(b);
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignConsultantsItem().setVisible(b);
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignServicesItem().setVisible(b);
	}

	
	/**
	 * 
	 */
	private void displayAllClinics()
	{			 				
		if (form.getLocalContext().getClinics() == null) return;		
		ClinicLiteVoCollection voCollClinics = form.getLocalContext().getClinics();
		
		TreeNode node = null;

		form.treAssociate().clear();										
		for(int i=0;i<voCollClinics.size();i++)
		{
			node = form.treAssociate().getNodes().add(voCollClinics.get(i), voCollClinics.get(i).getClinicName());
			node.setCheckBoxVisible(form.getMode().equals(FormMode.EDIT));
			node.setCollapsedImage(form.getImages().Admin.Location);
		}
	}

	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	private TemplateAssociationsVo populateInstanceData()
	{
		TemplateAssociationsVo voTemplateAssociation = form.getLocalContext().getTemplateAssociations(); 
		
		if (voTemplateAssociation == null)
		{
			voTemplateAssociation = new TemplateAssociationsVo();
			voTemplateAssociation.setTemplate(form.getLocalContext().getSelectedTemplate());
		}
		
		// Based on the assign chosen here you'r only populating 1 collection.		
		
		switch(form.getLocalContext().getSelectedMenuOption().intValue())
		{				
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignClinics:												
				voTemplateAssociation.setClinics(populateClinicInstanceData());
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignServices:
				voTemplateAssociation.setSpecialties(populateSpecialtyInstanceData());
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.TemplateAssociations.AssignConsultants:
				voTemplateAssociation.setConsultants(populateConsultantInstanceData());
				break;		
		}
		return voTemplateAssociation;
	}

	private SpecialtyCollection populateSpecialtyInstanceData() 
	{
		SpecialtyCollection lkpCollSpecialty = new SpecialtyCollection();				
		for (int i = 0; i < form.treAssociate().getNodes().size(); i++) 
		{
			if (form.treAssociate().getNodes().get(i).getValue() instanceof Specialty
				&& form.treAssociate().getNodes().get(i).isChecked())
				lkpCollSpecialty.add((Specialty) form.treAssociate().getNodes().get(i).getValue());			
		}
		
		return lkpCollSpecialty;
	}

	private MedicLiteVoCollection populateConsultantInstanceData() 
	{
		MedicLiteVoCollection voCollConsultants = new MedicLiteVoCollection();
		for (int i = 0; i < form.treAssociate().getNodes().size(); i++) 
		{
			MedicVo medic=null;
			if (form.treAssociate().getNodes().get(i).getValue() instanceof MedicVo && form.treAssociate().getNodes().get(i).isChecked())
			{
				medic=(MedicVo) form.treAssociate().getNodes().get(i).getValue();
				MedicLiteVo medicLite=new MedicLiteVo();
				if (medic.getID_HcpIsNotNull())
					medicLite.setID_Hcp(medic.getID_Hcp());
				if (medic.getMosIsNotNull())
					medicLite.setMos(medic.getMos());
				if (medic.getIsActiveIsNotNull())
					medicLite.setIsActive(medic.getIsActive());
				voCollConsultants.add(medicLite);
			}
		}
		
		return voCollConsultants;
	}

	private ClinicLiteVoCollection populateClinicInstanceData()
	{
		ClinicLiteVoCollection voCollClinics = new ClinicLiteVoCollection();
		for (int i = 0; i < form.treAssociate().getNodes().size(); i++) 
		{
			if (form.treAssociate().getNodes().get(i).getValue() instanceof ClinicLiteVo
				&& form.treAssociate().getNodes().get(i).isChecked())
					voCollClinics.add((ClinicLiteVo) form.treAssociate().getNodes().get(i).getValue());			
		}
		
		return voCollClinics;
	}

	/**
	 * 
	 */

		
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void editConsultantAssociations() 
	{
		if (form.grdTemplate().getValue() != null )
		{
			displayAllConsultants();
			
			ReportTemplateVo voTemplate = (ReportTemplateVo) form.grdTemplate().getValue(); 											  					
			form.getLocalContext().setSelectedTemplate(voTemplate);			
			TemplateAssociationsVo voTemplateAssociations = domain.getAssociationsForTemplate(voTemplate);								
			if (voTemplateAssociations == null) return;
													
			if (voTemplateAssociations.getConsultantsIsNotNull())
				overlayExistingConsultants(voTemplateAssociations.getConsultants() );			
		}		
	}
	
	private void editSpecialtyAssociations() 
	{
		if (form.grdTemplate().getValue() != null )
		{
			displayAllSpecialties();
			
			ReportTemplateVo voTemplate = (ReportTemplateVo) form.grdTemplate().getValue(); 											  					
			form.getLocalContext().setSelectedTemplate(voTemplate);			
			TemplateAssociationsVo voTemplateAssociations = domain.getAssociationsForTemplate(voTemplate);								
			if (voTemplateAssociations == null) return;
													
			if (voTemplateAssociations.getSpecialtiesIsNotNull())
				overlayExistingSpecialties(voTemplateAssociations.getSpecialties());			
		}		

		
	}

		
	private void overlayExistingSpecialties(SpecialtyCollection lkpCollSpecialties) 
	{
		// Set the current templates..
		for(int i=0; i<lkpCollSpecialties.size(); i++)
		{
			TreeNode node = form.treAssociate().getNodeByValue(lkpCollSpecialties.get(i));
			if (node != null)
				node.setChecked(true);
		}

		
	}

	private void displayAllSpecialties() 
	{
		if (form.getLocalContext().getSpecialties() == null) return;		
		SpecialtyCollection lkpCollSpecialties = form.getLocalContext().getSpecialties();
		
		TreeNode node = null;

		form.treAssociate().clear();										
		for(int i=0;i<lkpCollSpecialties.size();i++)
		{
			node = form.treAssociate().getNodes().add(lkpCollSpecialties.get(i), lkpCollSpecialties.get(i).toString());
			node.setCheckBoxVisible(form.getMode().equals(FormMode.EDIT));
			node.setCollapsedImage(form.getImages().Admin.Service);
		}

		
	}

	private void editClinicAssociations() 
	{
		if (form.grdTemplate().getValue() != null )
		{
			displayAllClinics();
			
			ReportTemplateVo voTemplate = (ReportTemplateVo) form.grdTemplate().getValue(); 											  					
			form.getLocalContext().setSelectedTemplate(voTemplate);			
			TemplateAssociationsVo voTemplateAssociations = domain.getAssociationsForTemplate(voTemplate);								
			if (voTemplateAssociations == null) return;
													
			if (voTemplateAssociations.getClinicsIsNotNull())
				overlayExistingClinics(voTemplateAssociations.getClinics() );			
		}
	}
	
	

	private void overlayExistingConsultants(MedicLiteVoCollection medicLiteVoCollection) 
	{
		// Set the current templates..
		for(int i=0; i<medicLiteVoCollection.size(); i++)
		{
			TreeNode node = form.treAssociate().getNodeByValue(medicLiteVoCollection.get(i));
			if (node != null)
				node.setChecked(true);
		}		
	}

	private void displayAllConsultants()
	{
		if (form.getLocalContext().getConsultants() == null) return;		
		MedicVoCollection voCollConsultants = form.getLocalContext().getConsultants();
		
		TreeNode node = null;

		form.treAssociate().clear();										
		for(int i=0;i<voCollConsultants.size();i++)
		{
			node = form.treAssociate().getNodes().add(voCollConsultants.get(i), voCollConsultants.get(i).getMos().getName().toShortForm());
			node.setCheckBoxVisible(form.getMode().equals(FormMode.EDIT));
			node.setCollapsedImage(form.getImages().Admin.MemberOfStaff);
		}
		
	}


	
	private void overlayExistingClinics(ClinicLiteVoCollection voCollClinics)
	{
		// Set the current templates..
		for(int i=0; i<voCollClinics.size(); i++)
		{
			TreeNode node = form.treAssociate().getNodeByValue(voCollClinics.get(i));
			if (node != null)
				node.setChecked(true);
		}
	}

	
	
	private void displayContextMenus(boolean b)
	{
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignClinicsItem().setVisible(b);
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignConsultantsItem().setVisible(b);
		form.getContextMenus().Correspondence.getTemplateAssociationsAssignServicesItem().setVisible(b);
	}

	public void clearInstanceControls() 
	{
		// screen is driven by context menus
	}

	public void newInstance() throws PresentationLogicException 
	{
		// screen is driven by context menus
	}

	public boolean save() throws PresentationLogicException 
	{
		TemplateAssociationsVo voTemplateAssociation = populateInstanceData(); 		
		String[] arrErrors = voTemplateAssociation.validate();		
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{			
			form.getLocalContext().setTemplateAssociations(domain.saveTemplateAssociation(voTemplateAssociation));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		return true;
	}

	public void updateControlsState() 
	{
		setMenusVisibility(form.grdTemplate().getSelectedRowIndex() >= 0);		
	}

	public void updateInstance() 
	{
		// screen is driven by context menus		
	}	
}
