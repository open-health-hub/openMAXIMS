//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.attendancescontacts;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Correspondence = new CorrespondenceContext(context);
		Core = new CoreContext(context);
	}
	public final class CorrespondenceContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CorrespondenceContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getGenerateFormModeIsNotNull()
		{
			return !cx_CorrespondenceGenerateFormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getGenerateFormMode()
		{
			return (ims.framework.enumerations.FormMode)cx_CorrespondenceGenerateFormMode.getValue(context);
		}
		public void setGenerateFormMode(ims.framework.enumerations.FormMode value)
		{
			cx_CorrespondenceGenerateFormMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceGenerateFormMode = new ims.framework.ContextVariable("Correspondence.GenerateFormMode", "_cv_Correspondence.GenerateFormMode");
		public boolean getCorrespondenceDetailsMenuActionIsNotNull()
		{
			return !cx_CorrespondenceCorrespondenceDetailsMenuAction.getValueIsNull(context);
		}
		public Integer getCorrespondenceDetailsMenuAction()
		{
			return (Integer)cx_CorrespondenceCorrespondenceDetailsMenuAction.getValue(context);
		}
		public void setCorrespondenceDetailsMenuAction(Integer value)
		{
			cx_CorrespondenceCorrespondenceDetailsMenuAction.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceCorrespondenceDetailsMenuAction = new ims.framework.ContextVariable("Correspondence.CorrespondenceDetailsMenuAction", "_cv_Correspondence.CorrespondenceDetailsMenuAction");
		public boolean getOpenFormIsNotNull()
		{
			return !cx_CorrespondenceOpenForm.getValueIsNull(context);
		}
		public ims.framework.FormName getOpenForm()
		{
			return (ims.framework.FormName)cx_CorrespondenceOpenForm.getValue(context);
		}
		public void setOpenForm(ims.framework.FormName value)
		{
			cx_CorrespondenceOpenForm.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceOpenForm = new ims.framework.ContextVariable("Correspondence.OpenForm", "_cv_Correspondence.OpenForm");
		public boolean getcurrentCspStatusHistoryIsNotNull()
		{
			return !cx_CorrespondencecurrentCspStatusHistory.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection getcurrentCspStatusHistory()
		{
			return (ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection)cx_CorrespondencecurrentCspStatusHistory.getValue(context);
		}
		public void setcurrentCspStatusHistory(ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection value)
		{
			cx_CorrespondencecurrentCspStatusHistory.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondencecurrentCspStatusHistory = new ims.framework.ContextVariable("Correspondence.currentCspStatusHistory", "_cv_Correspondence.currentCspStatusHistory");
		public boolean getCorrespondenceDetailsIsNotNull()
		{
			return !cx_CorrespondenceCorrespondenceDetails.getValueIsNull(context);
		}
		public ims.correspondence.vo.CorrespondenceDetailsRefVo getCorrespondenceDetails()
		{
			return (ims.correspondence.vo.CorrespondenceDetailsRefVo)cx_CorrespondenceCorrespondenceDetails.getValue(context);
		}
		public void setCorrespondenceDetails(ims.correspondence.vo.CorrespondenceDetailsRefVo value)
		{
			cx_CorrespondenceCorrespondenceDetails.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceCorrespondenceDetails = new ims.framework.ContextVariable("Correspondence.CorrespondenceDetails", "_cvp_Correspondence.CorrespondenceDetails");
		public boolean getDocDetailIdReportSeedIsNotNull()
		{
			return !cx_CorrespondenceDocDetailIdReportSeed.getValueIsNull(context);
		}
		public Integer getDocDetailIdReportSeed()
		{
			return (Integer)cx_CorrespondenceDocDetailIdReportSeed.getValue(context);
		}
		public void setDocDetailIdReportSeed(Integer value)
		{
			cx_CorrespondenceDocDetailIdReportSeed.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorrespondenceDocDetailIdReportSeed = new ims.framework.ContextVariable("Correspondence.DocDetailIdReportSeed", "_cv_Correspondence.DocDetailIdReportSeed");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPasEventIsNotNull()
		{
			return !cx_CorePasEvent.getValueIsNull(context);
		}
		public ims.core.admin.pas.vo.PASEventRefVo getPasEvent()
		{
			return (ims.core.admin.pas.vo.PASEventRefVo)cx_CorePasEvent.getValue(context);
		}
		public void setPasEvent(ims.core.admin.pas.vo.PASEventRefVo value)
		{
			cx_CorePasEvent.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePasEvent = new ims.framework.ContextVariable("Core.PasEvent", "_cvp_Core.PasEvent");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}
		public void setCurrentCareContext(ims.core.vo.CareContextShortVo value)
		{
			cx_CoreCurrentCareContext.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getDocumentIDIsNotNull()
		{
			return !cx_CoreDocumentID.getValueIsNull(context);
		}
		public Integer getDocumentID()
		{
			return (Integer)cx_CoreDocumentID.getValue(context);
		}
		public void setDocumentID(Integer value)
		{
			cx_CoreDocumentID.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreDocumentID = new ims.framework.ContextVariable("Core.DocumentID", "_cv_Core.DocumentID");

		private ims.framework.Context context;
	}

	public CorrespondenceContext Correspondence;
	public CoreContext Core;
}
