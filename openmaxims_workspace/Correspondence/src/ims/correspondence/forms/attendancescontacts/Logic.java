//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.25 build 1949.18196)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.attendancescontacts;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PatientListType;
import ims.correspondence.forms.attendancescontacts.GenForm;
import ims.correspondence.helper.DocumentDetailsInitialiser;
import ims.correspondence.vo.CorrespondenceStatusHistoryVo;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.PasContactVo;
import ims.correspondence.vo.PasContactVoCollection;
import ims.correspondence.vo.lookups.Access;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;


public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();		
		form.getLocalContext().setuserFullAccess(domain.getFullUserAccessForUser(new Integer(engine.getLoggedInUser().getUserId())));				
		
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
			populateContactsGrid(domain.listPASContacts(form.getGlobalContext().Core.getPatientShort()));			
	}
	
	private void initialize()
	{
		engine.setCaption("Attendances " +  "/"  +   "Contacts - " + form.getGlobalContext().Core.getPatientShort().getName().toString());
	}

	private void populateContactsGrid(PasContactVoCollection pasContactColl) 
	{
		form.grdAttendences().getRows().clear();
		
		GenForm.grdAttendencesRow row = null;
		PasContactVo voPasContact;
		
		if (pasContactColl != null)
		{
			for (int i = 0; i < pasContactColl.size(); i++) 
			{
				voPasContact = pasContactColl.get(i);
				row = form.grdAttendences().getRows().newRow();
				
				row.setcolDate(null);
				
				if (voPasContact.getContactTypeIsNotNull())
				{
					row.setcolContactType(voPasContact.getContactType());
					if (voPasContact.getContactType().equalsIgnoreCase("INPATIENT"))
					{
						if (voPasContact.getDischargeDateTimeIsNotNull())
							row.setcolDate(voPasContact.getDischargeDateTime().getDate());
						else
							row.setcolDate(null);
					}
					else
					{
						if (voPasContact.getAppointmentDateTimeIsNotNull())
							row.setcolDate(voPasContact.getAppointmentDateTime().getDate());
						else
							row.setcolDate(null);
						
					}
				}
				if (voPasContact.getContactNumberIsNotNull())
					row.setcolContactNumber(voPasContact.getContactNumber());
				
				if (voPasContact.getConsultantIsNotNull())
					row.setcolConsultant(voPasContact.getConsultant().getName().toString());
				
		//		if (voPasContact.getDocumentStatusIsNotNull())
		//			row.setcolDocStatus(voPasContact.getDocumentStatus().toString());
				
				if (voPasContact.getSpecialtyIsNotNull())
					row.setcolSpecialty(voPasContact.getSpecialty().getText());
				
				if (voPasContact.getLocationIsNotNull())
					row.setcolLocation(voPasContact.getLocation().getName());
				
				if (voPasContact.getDocumentStatusIsNotNull())
				{
					row.setcolDocStatus(voPasContact.getDocumentStatus().getImage());
					row.setTooltipForcolDocStatus(voPasContact.getDocumentStatus().getText());
				}		
				
				Access lkpAccess = null;
				if (form.getLocalContext().getuserFullAccess() != null)
				{
					//TODO Passing null for clinic access here.
					DocumentDetailsInitialiser dd = new DocumentDetailsInitialiser(form.getLocalContext().getuserFullAccess().getConsultantAccess(), null, form.getLocalContext().getuserFullAccess().getSpecialtyAccess());
					lkpAccess = dd.getUserAccess(voPasContact);
				}

				if (lkpAccess != null)
					row.setcolAccess(lkpAccess);

				row.setValue(voPasContact);
			}
		}
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
		
	}
	
	protected void onGrdPatientSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		Access lkpAccess = form.grdAttendences().getRows().get(form.grdAttendences().getSelectedRowIndex()).getcolAccess(); 
		if (lkpAccess == null)
		{
			setContextMenusForNullAccess();
			return;
		}
		
		if (lkpAccess.equals(Access.READONLY))
		{			
			setContextMenusForReadOnlyAccess();			
			return;
		}

		updateContextMenus();
	}
	private void updateContextMenus()
	{

		PasContactVo voPasContact = form.grdAttendences().getValue();
		
		if (null != voPasContact)
		{
		
			if (voPasContact.getDocumentStatusIsNotNull() && voPasContact.getDocumentStatus().equals(DocumentStatus.NOLETTERREQUIRED))
			{
				setContextMenusForNLR();
				return;
			}
			
			form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(true);	
		 		
			CorrespondenceDetailsVo voDocDetails = new CorrespondenceDetailsVo();

			if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
				voDocDetails = domain.getCorrespondenceDetails(form.getGlobalContext().Correspondence.getCorrespondenceDetails());
			
			form.getContextMenus().Correspondence.getCorrespondenceDetailsEditItem().setVisible(voDocDetails.getID_CorrespondenceDetailsIsNotNull());
			form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setVisible(voDocDetails.getID_CorrespondenceDetailsIsNotNull());
			form.getContextMenus().Correspondence.getCorrespondenceDetailsPreviewLetterItem().setVisible(voDocDetails.getID_CorrespondenceDetailsIsNotNull());
			form.getContextMenus().Correspondence.getCorrespondenceDetailsAddItem().setVisible(null == voDocDetails.getID_CorrespondenceDetails());
	
			form.getContextMenus().Correspondence.getCorrespondenceDetailsDocumentStatusItem().setVisible(false);
			if (voDocDetails.getCspStatusHistoryIsNotNull())
					form.getContextMenus().Correspondence.getCorrespondenceDetailsDocumentStatusItem().setVisible(true);
		}
	}
	
	private boolean setContextVariables()
	{
		clearContextVariables();
		
		if (form.grdAttendences().getSelectedRowIndex() >=0)
		{
			PatientShort voPatientShort = new PatientShort();
			voPatientShort = form.getGlobalContext().Core.getPatientShort();
			
			PasContactVo voPasContact = new PasContactVo();									
			voPasContact = form.grdAttendences().getRows().get(form.grdAttendences().getSelectedRowIndex()).getValue();

			if (voPatientShort != null && voPasContact != null)
			{	
				Patient voPatient;
				try 
				{
					voPatient = domain.getPatient(voPatientShort);
				}
				catch (StaleObjectException e)
				{
					//Try a second time. Only then fail.
					try 
					{
						voPatient = domain.getPatient(voPatientShort);
					}
					catch (StaleObjectException e1)
					{
						engine.showMessage("Failed to retrieve Patient due to StaleObjectException");
						return false;
					}
				}
				if (voPatient.getIsDead()!= null && voPatient.getIsDead().booleanValue())
				{
					engine.setPatientInfo(voPatient.getPatientInfo(), ConfigFlag.UI.RIP_INFO_COLOUR.getValue());			
				}
				else
				{
					engine.setPatientInfo(voPatient.getPatientInfo());			
				}
				//This is required to ensure the Patient in the global context
				//has an internal hibernate assigned id.
				form.getGlobalContext().Core.setPatientShort(voPatient);
				voPasContact.setPatient(voPatient);
				
				PatientListType patientListType = null;
				if (voPasContact.getContactType().equalsIgnoreCase("INPATIENT"))					
					patientListType = PatientListType.INPATIENTLIST;
				else
					patientListType = PatientListType.OUTPATIENTLIST;
				
				form.getGlobalContext().Core.setPasEvent(getOrCreatePasEventForPasContact(voPasContact,patientListType));
			}									
		}
		
		return true;	
	}
	
	private PASEventRefVo getOrCreatePasEventForPasContact(PasContactVo voPasContact, PatientListType patientListType) 
	{
		if (voPasContact == null)
			throw new CodingRuntimeException("Pas Contact not supplied");
		
		PasEventVo voPasEvent = null;
		DateTime eventDateTime = null;
		if (patientListType.equals(PatientListType.INPATIENTLIST))
		{
			eventDateTime = voPasContact.getDischargeDateTime();
		}
		else if (patientListType.equals(PatientListType.OUTPATIENTLIST))
		{
			eventDateTime = voPasContact.getAppointmentDateTime();
		}
		voPasEvent = domain.getPasEvent(voPasContact.getPatient(),voPasContact.getContactNumber());			
		if (voPasEvent != null)			
		{	
			CorrespondenceDetailsVo voDocumentDetails = domain.getCorrespondenceDetailsByPasEvent(voPasEvent);
			if (voDocumentDetails != null)
			{
				form.getGlobalContext().Correspondence.setCorrespondenceDetails(voDocumentDetails);
				form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(voDocumentDetails.getID_CorrespondenceDetails());
			}
		}
		else
		{
			try {
				try {
						voPasEvent = domain.createPasEvent(eventDateTime,form.getGlobalContext().Core.getPatientShort(),voPasContact);
				} 
				catch (StaleObjectException e)
				{
					engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return null;
				}
			}
			catch (UniqueKeyViolationException ue)
			{
				engine.showMessage(ue.getMessage());
				return null;				
			}
			voPasEvent.setEventDateTime(eventDateTime); 
			// TODO Save a Pas Event (Using PASContactVO - Use impl methods in ADT or create new one
			
		}
		return voPasEvent;
	}

	private void clearContextVariables() 
	{
		form.getGlobalContext().Correspondence.setGenerateFormMode(null);
		form.getGlobalContext().Correspondence.setOpenForm(null);
		form.getGlobalContext().Core.setPasEvent(null);
	}

	protected void onFormModeChanged() 
	{
		updateContextMenus();		
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
			
		//set global context to reflect new context for the menu action
		setContextVariables();
		
		switch(menuItemID)
		{	 			
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.ViewDemographics:
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Core.Demographics);
				engine.close(DialogResult.OK);
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.PreviewLetter:
				previewDischargeLetter();
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.Edit:				
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Correspondence.CorrespondenceDetails);
				form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);
				engine.close(DialogResult.OK);
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.Add:
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Correspondence.CorrespondenceDetails);
				form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);
				engine.close(DialogResult.OK);
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.View:
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Correspondence.CorrespondenceDetails);
				form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.VIEW);
				engine.close(DialogResult.OK);
				break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.DocumentStatus:
				viewDocumentStatusHistory();					 
				break;		
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetails.SetLetterRequired:
				setLetterRequired();
		}
		
		
		
/*		
		switch(menuItemID)
		{				
		case GenForm.ContextMenus.CorrespondenceDetails.ViewDemographics:
			if (form.grdAttendences().getSelectedRowIndex() >= 0 )
			{
				
				// Set the current patient for the session
				domain.setCurrentPatientId(form.getGlobalContext().Core.getPatientShort());		
				
				engine.setPatientInfo(form.getGlobalContext().Core.getPatientShort().getPatientInfo());
				
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Core.Demographics);
				
				engine.close(DialogResult.OK);
			
			}
			break;
		case GenForm.ContextMenus.CorrespondenceDetails.Edit:
			if (form.grdAttendences().getSelectedRowIndex() >= 0 )
			{
				form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);
				
				domain.setCurrentPatientId(form.getGlobalContext().Core.getPatientShort());		
				
				engine.setPatientInfo(form.getGlobalContext().Core.getPatientShort().getPatientInfo());
				
				if (form.grdAttendences().getValue() != null)
					form.getGlobalContext().Correspondence.setPasContact(form.grdAttendences().getValue());
				
				form.getGlobalContext().Correspondence.setOpenForm(form.getForms().Correspondence.CorrespondenceDetails);
				
				engine.close(DialogResult.OK);
			}
		}*/	
		
	}
	
	private void setContextMenusForNLR() 
	{
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(false);		
		form.getContextMenus().Correspondence.getCorrespondenceDetailsEditItem().setVisible(false);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setVisible(false);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsPreviewLetterItem().setVisible(false);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsAddItem().setVisible(false);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsDocumentStatusItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsSetLetterRequiredItem().setVisible(true);
		
	}

	private void previewDischargeLetter() 
	{
		if (form.getGlobalContext().Core.getPasEventIsNotNull())
		{			
			CorrespondenceDetailsVo voDocumentDetails = domain.getCorrespondenceDetailsByPasEvent(form.getGlobalContext().Core.getPasEvent());
			if (voDocumentDetails.getCurrentDocumentIsNotNull()) 
			{
				form.getGlobalContext().Correspondence.setCorrespondenceDetails(voDocumentDetails);
				form.getGlobalContext().Core.setDocumentID(voDocumentDetails.getCurrentDocument().getID_Document());
				engine.open(form.getForms().Correspondence.ProcessReport);
			}
		}		
	}
	
	private void viewDocumentStatusHistory() 
	{
		if (form.getGlobalContext().Core.getPasEventIsNotNull())
		{			
			CorrespondenceDetailsVo voDocumentDetails = domain.getCorrespondenceDetailsByPasEvent(form.getGlobalContext().Core.getPasEvent());
			if (voDocumentDetails.getCspStatusHistoryIsNotNull())
			{
				form.getGlobalContext().Correspondence.setCorrespondenceDetails(voDocumentDetails);
				form.getGlobalContext().Core.setDocumentID(voDocumentDetails.getCurrentDocument().getID_Document());
				form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(voDocumentDetails.getCspStatusHistory());
				engine.open(form.getForms().Correspondence.DocumentStatusDlg);					
			}
		}
	}

	
	private void setLetterRequired() 
	{				
		CorrespondenceDetailsVo voCorrespDet = null;
		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
		{
			// TODO Possibly use a local context on the form instead of doing a get call (put code into setContextVariables)
			voCorrespDet = domain.getCorrespondenceDetails(voCorrespDet);
			// TODO Business rule - Can we set the letter to "Letter Required" - This depends on the current Status musty be null or "No Letter Required"
			// helper method - CanUpdateStatsus(current status,new status)
		}
		else
		{
			voCorrespDet = new CorrespondenceDetailsVo();
			CorrespondenceStatusHistoryVo cspStatus = new CorrespondenceStatusHistoryVo();
			cspStatus.setStatus(DocumentStatus.LETTERREQUIRED);
			cspStatus.setMos((MemberOfStaffShortVo) domain.getMosUser());//wdev-2677
			
			try 
			{
				voCorrespDet = domain.saveCorrespondenceDetails(voCorrespDet,domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()).getEventType());
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage("Pas status not updated : " + ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return;			
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			
			form.getGlobalContext().Correspondence.setCorrespondenceDetails(voCorrespDet);
			// TODO set the local context full vo for CSP details
		}	
	}
		
	private void setContextMenusForNullAccess() {
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsMenuItems();
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(true);
	}
	
	private void setContextMenusForReadOnlyAccess() {
		form.getContextMenus().Correspondence.disableAllCorrespondenceDetailsMenuItems();
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewDemographicsItem().setVisible(true);
		form.getContextMenus().Correspondence.getCorrespondenceDetailsViewItem().setVisible(true);
	}
	
	
}
