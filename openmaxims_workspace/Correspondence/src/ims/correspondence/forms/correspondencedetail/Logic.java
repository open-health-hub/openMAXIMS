//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.54 build 2714.21485)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.correspondencedetail;

import javax.mail.MessagingException;
import javax.mail.internet.AddressException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.admin.vo.UserEmailAccountVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.documents.domain.objects.Document;

import ims.core.vo.DocumentVo;
import ims.core.vo.ExternalPersonShortVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpToPracticesVoCollection;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PersonAddress;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PasEventType;
import ims.correspondence.forms.correspondencedetail.GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow;
import ims.correspondence.forms.correspondencedetail.GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRowCollection;
import ims.correspondence.helper.AttachmentHelper;
import ims.correspondence.helper.DocumentDetailsInitialiser;
import ims.correspondence.helper.EmailHelper;
import ims.correspondence.vo.CategoryNotesVo;
import ims.correspondence.vo.CategoryNotesVoCollection;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVo;
import ims.correspondence.vo.CorrespondenceStatusHistoryVoCollection;
import ims.correspondence.vo.RecipientVo;
import ims.correspondence.vo.RecipientVoCollection;
import ims.correspondence.vo.TemplateCategoryVo;
import ims.correspondence.vo.lookups.RecipientType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.TextileString;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initalize();
		open();
	}

	private void open()
	{

		form.getLocalContext().setsupplementaryLetterClicked(new Boolean(false));

		// Call the method to see if a doc details exists
		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
		{
			// get CorrespondenceDetail from domain
			// set local context var for correspondenceDetail
			form.getLocalContext().setcorrespondenceDetails(domain.getCorrespondenceDetails(form.getGlobalContext().Correspondence.getCorrespondenceDetails()));

			form.btnEMail().setEnabled(false);
			form.btnSupplementary().setEnabled(false);
			
			if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED))
			{
				form.btnEMail().setEnabled(true);
				form.btnSupplementary().setEnabled(true);
				form.btnUpdate().setEnabled(false);
			}
			else
			{
				form.btnEMail().setEnabled(false);
				form.btnSupplementary().setEnabled(false);
				form.btnUpdate().setEnabled(true);

			}

			setContextVariables(form.getLocalContext().getcorrespondenceDetails());
			populateScreenFromData(form.getLocalContext().getcorrespondenceDetails());

			if (null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplate())
			{
				// check for template association, if more than one then display
				// the list for selection
				// open the template selection dialog if more than one template
				PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();
				ReportTemplateVoCollection voCollRepTemplates = domain.listTemplates(new Boolean(true), getConsultantId(voPasEvent), getLocationId(voPasEvent), getSpecialtyId(voPasEvent));
				if (voCollRepTemplates.size() > 1)
				{
					engine.open(form.getForms().Correspondence.TemplateSelect);
					return;
				}
				else if (voCollRepTemplates.size() == 1)
				{
					form.getGlobalContext().Correspondence.setReportTemplate(voCollRepTemplates.get(0));
				}
				templateSelectOK();
			}
			else
				form.setMode(FormMode.VIEW);
		}
		else
		{
			// create a new one
			DocumentDetailsInitialiser docDetails = new DocumentDetailsInitialiser((MemberOfStaffShortVo) domain.getMosUser(), form.getLocalContext().getpasEventVo());
			CorrespondenceDetailsVo voCorrespondenceDetails = docDetails.get_DocumentDetails();
			if (null == voCorrespondenceDetails)
			{
				engine.showMessage("Error occurred creating Document Details : " + docDetails.getErrorMessage());
				updateControlStateForError();
				form.setMode(FormMode.VIEW);
				return;
			}
			voCorrespondenceDetails.setCurrentStatus(DocumentStatus.LETTERREQUIRED);
			// set local context var for correspondenceDetail
			form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

			// open the template selection dialog if more than one template
			PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();
			ReportTemplateVoCollection voCollRepTemplates = domain.listTemplates(new Boolean(true), getConsultantId(voPasEvent), getLocationId(voPasEvent), getSpecialtyId(voPasEvent));
			if (voCollRepTemplates.size() >= 1)
			{
				// open the template selection dialog
				engine.open(form.getForms().Correspondence.TemplateSelect);
				return;
			}
			else if (voCollRepTemplates.size() == 1)
			{
				form.getGlobalContext().Correspondence.setReportTemplate(voCollRepTemplates.get(0));
			}
			templateSelectOK();
		}
		// set title
		String strTitle = "";
		if (form.getLocalContext().getpasEventVo().getEventType().equals(PasEventType.INPATIENT))
		{
			strTitle = "Inpatient - ";
		}
		else
		{
			strTitle = "Outpatient - ";
		}
		if (form.getLocalContext().getpasEventVo().getEventDateTimeIsNotNull())
			strTitle += form.getLocalContext().getpasEventVo().getEventDateTime().toString();
		if (form.getLocalContext().getpasEventVo().getConsultantIsNotNull())
			strTitle += " - " + form.getLocalContext().getpasEventVo().getConsultant().toString();
		if (form.getLocalContext().getpasEventVo().getLocationIsNotNull())
			strTitle += " - " + form.getLocalContext().getpasEventVo().getLocation().toString();
		if (form.getLocalContext().getpasEventVo().getSpecialtyIsNotNull())
			strTitle += " - " + form.getLocalContext().getpasEventVo().getSpecialty().toString();
		if (form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplateIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocumentIsNotNull())
			strTitle += " - Current Status of " + form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplate().getName().toString() + " : ";

		if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatusIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplateIsNotNull())
		{
			strTitle += form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().getText();
		}
		else if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatusIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplate() == null)
		{
			strTitle += " " + form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().getText();
		}

		form.pnlTitle().setValue(strTitle);
		if (form.getGlobalContext().Correspondence.getGenerateFormMode().equals(FormMode.VIEW))
		{

			form.btnDocStatHist().setEnabled(false);
			form.btnEMail().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.btnPrintLetter().setEnabled(false);
			form.btnSupplementary().setEnabled(false);
			form.btnDocStatHist().setEnabled(false);
			form.btnResetTemplate().setEnabled(false);
		}

		if(form.getGlobalContext().Correspondence.getGenerateFormModeIsNotNull())
		{
			form.setMode(form.getGlobalContext().Correspondence.getGenerateFormMode());

		}
		else
		{
		form.setMode(FormMode.VIEW);
		}
	}

	private void templateSelectOK()
	{
		// Get the selected template
		ReportTemplateVo voReportTemplate = new ReportTemplateVo();
		if (form.getGlobalContext().Correspondence.getReportTemplateIsNotNull())
			voReportTemplate = form.getGlobalContext().Correspondence.getReportTemplate();
		else
		{
			engine.showMessage("Template not selected, cannot continue with discharge letter creation.");
			form.setMode(FormMode.VIEW);
			updateControlStateForError();
			return;
		}

		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull())
		{
			// attach the template used for this document.
			CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();
			voCorrespondenceDetails.getCurrentDocument().setTemplate(voReportTemplate);
			form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

			setContextVariables(voCorrespondenceDetails);
			populateScreenFromData(voCorrespondenceDetails);
			form.setMode(FormMode.EDIT);

		}
	}

	private Integer getSpecialtyId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getSpecialtyIsNotNull())
		{
			return (new Integer(voPasEvent.getSpecialty().getId()));
		}
		return null;
	}

	private Integer getConsultantId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getConsultantIsNotNull())
		{
			return voPasEvent.getConsultant().getID_Hcp();
		}
		return null;
	}

	private Integer getLocationId(PasEventVo voPasEvent)
	{
		if (voPasEvent != null && voPasEvent.getLocationIsNotNull())
		{
			return (voPasEvent.getLocation().getID_Location());
		}
		return null;
	}

	private void initalize() throws FormOpenException
	{

		PasEventVo pasEvent = domain.getPasEvent(form.getGlobalContext().Core.getPasEvent());

		if (pasEvent.getEventType().equals(PasEventType.INPATIENT))
		{

			form.lyrCorrespondenceDetail().tabRecipients().lblStart().setValue("Admission Date:");
		}
		else
		{
			form.lyrCorrespondenceDetail().tabRecipients().lblStart().setValue("Clinic Date:");
			form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().setVisible(false);
			form.lyrCorrespondenceDetail().tabRecipients().lblEnd().setVisible(false);
		}

		form.lyrCorrespondenceDetail().tabRecipients().dteStartDate().setValue(pasEvent.getEventDateTime().getDate());

		form.btnCancel().setImage(form.getImages().Core.Remove);
		form.btnPrintLetter().setImage(form.getImages().Correspondence.Printer);
		form.btnSave().setImage(form.getImages().Core.Save);
		form.btnEMail().setImage(form.getImages().OCRR.Requested);
		form.btnResetTemplate().setImage(form.getImages().OCRR.Reset);

		form.btnSupplementary().setImage(form.getImages().Correspondence.Supplementry);
		form.btnUpdate().setImage(form.getImages().Admin.Edit);
		form.btnPreview().setImage(form.getImages().Core.Preview);

		form.getLocalContext().setsuplementryLetterVisible(new Boolean(ConfigFlag.UI.DISCHARGE_LETTERS_SUPPLEMENTARY_BUTTON.getValue()));

		form.btnSupplementary().setVisible(form.getLocalContext().getsuplementryLetterVisible());

		MemberOfStaffShortVo voMos = (MemberOfStaffShortVo) domain.getMosUser();
		if (null == voMos)
		{
			throw new FormOpenException("Current user not associated with a Member Of Staff");
		}

		form.getLocalContext().setloggedInMos(voMos);

		// get full paseventvo
		form.getLocalContext().setpasEventVo(domain.getPasEvent(form.getGlobalContext().Core.getPasEvent()));

	}

	protected void onGrdAdresseeSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		showAddresseeDetails();
		updateContextMenusState();
	}

	private void showAddresseeDetails()
	{
		RecipientVo addresse = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getSelectedRow().getValue();

		StringBuffer toolTip = new StringBuffer();

		toolTip.append("<b>Type: </b>" + addresse.getRecipientType().getText() + "<br>");
		toolTip.append("<b>Name: </b>" + addresse.getName().toShortForm() + "<br>");

		if (addresse.getAddressIsNotNull())
			toolTip.append("<b>Address: </b>" + addresse.getAddress().toDisplayString() + "<br>");

		form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getSelectedRow().setTooltip(toolTip.toString());

	}

	protected void onGrdCategoriesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		showNoteDetails();
		updateContextMenusState();
	}

	private void showNoteDetails()
	{
		form.lyrCorrespondenceDetail().tabCorrespondence().htmNote().setHTML(form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getValue() != null ? form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getValue().getCategoryText() : "");
	}

	protected void addGP()
	{
		engine.open(form.getForms().Core.GPSelection);
	}

	protected void addNonGP()
	{
		engine.open(form.getForms().Correspondence.NonGPSelect);
	}

	private void moveRecipientUp()
	{
		form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().moveUp();
	}

	private void moveRecipientDown()
	{
		form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().moveDown();
	}

	private void moveUpHeader()
	{
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().moveUp();
	}

	private void moveDownHeader()
	{
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().moveDown();
	}

	private void removeRecipient()
	{
		if (form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getSelectedRowIndex() >= 0)
			form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().remove(form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getSelectedRowIndex());

		updateContextMenusState();
	}

	private void addReferrerGpToGrid()
	{
		if (form.getLocalContext().getReferrerGP() == null)
			return;
		RecipientVo RefGp = new RecipientVo();

		if (form.getLocalContext().getReferrerGPIsNotNull() && form.getLocalContext().getReferrerGP().getNameIsNotNull())
			RefGp.setName(form.getLocalContext().getReferrerGP().getName());

		if (form.getLocalContext().getReferrerGPIsNotNull() && form.getLocalContext().getReferrerGP().getCommChannelsIsNotNull())
			RefGp.setCommChannels(form.getLocalContext().getReferrerGP().getCommChannels());

		if (form.getLocalContext().getReferrerPracticeIsNotNull() && form.getLocalContext().getReferrerPractice().getAddressIsNotNull())
			RefGp.setAddress(form.getLocalContext().getReferrerPractice().getAddress());

		RefGp.setRecipientType(RecipientType.REFERRING_GP);

		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow recipientRow = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();

		if (RefGp.getNameIsNotNull())
			recipientRow.setAdressee(RefGp.getName().toShortForm());

		if (RefGp.getAddressIsNotNull())
			recipientRow.setAddress(RefGp.getAddress().toDisplayString());

		recipientRow.setValue(RefGp);

		recipientRow.setExpandedImage(form.getImages().Admin.StaffRed);
		recipientRow.setCollapsedImage(form.getImages().Admin.StaffRed);
		recipientRow.setSelectedImage(form.getImages().Admin.StaffRed);
		recipientRow.setGP(form.getImages().Admin.StaffRed);

		updateContextMenusState();
	}

	private void addPatientGpToGrid()
	{
		if (form.getLocalContext().getPatientGP() == null)
			return;

		RecipientVo patGP = new RecipientVo();

		if (form.getLocalContext().getPatientGPIsNotNull())
			patGP.setName(form.getLocalContext().getPatientGP().getName());

		if (form.getLocalContext().getPatientGPSurgeryIsNotNull() && form.getLocalContext().getPatientGPSurgery().getAddressIsNotNull())
			patGP.setAddress(form.getLocalContext().getPatientGPSurgery().getAddress());

		if (form.getLocalContext().getPatientGPIsNotNull() && form.getLocalContext().getPatientGP().getCommChannelsIsNotNull())
			patGP.setCommChannels(form.getLocalContext().getPatientGP().getCommChannels());

		patGP.setRecipientType(RecipientType.PATIENT_GP);

		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow recipientRow = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();
		if (patGP.getNameIsNotNull())
			recipientRow.setAdressee(patGP.getName().toShortForm());

		if (patGP.getAddressIsNotNull())
			recipientRow.setAddress(patGP.getAddress().toDisplayString());

		recipientRow.setValue(patGP);

		recipientRow.setExpandedImage(form.getImages().Admin.StaffBlack);
		recipientRow.setCollapsedImage(form.getImages().Admin.StaffBlack);
		recipientRow.setSelectedImage(form.getImages().Admin.StaffBlack);
		recipientRow.setGP(form.getImages().Admin.StaffBlack);

		updateContextMenusState();
	}

	protected void addCategoryText()
	{
		GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow doccatrow;
		CategoryNotesVo doccatVo;
		if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRowIndex() >= 0)
		{
			doccatVo = new CategoryNotesVo();
			doccatrow = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().get(form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRowIndex());

			// check if a doccattext exists
			if (doccatrow.getValue() != null)
				doccatVo = doccatrow.getValue();
			else
			{
				doccatVo.setCategory(doccatrow.getCategory());
			}

			form.getGlobalContext().Correspondence.setDocCategory(doccatVo);

			String l_caption;
			l_caption = "Please enter the associated text for : ";
			l_caption += doccatrow.getCategory().getText();
			engine.open(form.getForms().Correspondence.HeaderComment, l_caption);
		}
	}

	protected void removeCategoryText()
	{
	}

	protected void viewCategoryText()
	{
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.AddGp :
				addGP();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.AddNonGp :
				addNonGP();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.RemoveRecipient :
				removeRecipient();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.ADD_PATIENT_GP :
				addPatientGpToGrid();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.ADD_REFERRER_GP :
				addReferrerGpToGrid();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.MoveDown :
				moveRecipientDown();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.MoveUp :
				moveRecipientUp();
			break;

			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.AddText :
				addCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.RemoveText :
				removeCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.ViewText :
				viewCategoryText();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.MoveDown :
				moveDownHeader();
			break;
			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsCategories.MoveUp :
				moveUpHeader();
			break;

			case GenForm.ContextMenus.CorrespondenceNamespace.CorrespondenceDetailsAddressee.ADD_PATIENT :
				addPatient();
			break;

		}
	}

	private void addPatient()
	{
		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow recipientRow = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();

		RecipientVo patRec = new RecipientVo();

		patRec.setName(form.getGlobalContext().Core.getPatientShort().getName());

		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull())
			patRec.setAddress(form.getGlobalContext().Core.getPatientShort().getAddress());

		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getCommChannelsIsNotNull())
			patRec.setCommChannels(form.getGlobalContext().Core.getPatientShort().getCommChannels());

		patRec.setRecipientType(RecipientType.PATIENT_RECIPIENT);

		recipientRow.setValue(patRec);

		recipientRow.setAdressee(patRec.getName().toShortForm());

		if (patRec.getAddressIsNotNull())
			recipientRow.setAddress(patRec.getAddress().toDisplayString());

		recipientRow.setExpandedImage(form.getImages().Admin.StaffGreen);
		recipientRow.setCollapsedImage(form.getImages().Admin.StaffGreen);
		recipientRow.setSelectedImage(form.getImages().Admin.StaffGreen);
		recipientRow.setGP(form.getImages().Admin.StaffGreen);

		updateContextMenusState();

	}

	/**
	 * @param docDetailVo
	 */
	private void populateCategoryDetails(CategoryNotesVoCollection voDocCats)
	{
		// category glossary texts
		if (voDocCats != null)
		{
			GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow row;
			for (int i = 0; i < voDocCats.size(); i++)
			{
				for (int j = 0; j < form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size(); j++)
				{
					row = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().get(j);
					if (row.getCategory().equals(voDocCats.get(i).getCategory()))
					{
						row.setCategoryText(form.getImages().Core.Memo);
						if (voDocCats.get(i).getCategoryTextIsNotNull())
							row.setTooltipForCategoryText(voDocCats.get(i).getCategoryText());
						if (voDocCats.get(i).getSysInfoIsNotNull())
						{
							row.setDate(voDocCats.get(i).getSysInfo().getCreationDateTime().getDate());
							row.setTime(voDocCats.get(i).getSysInfo().getCreationDateTime().getTime());
							row.setRecUser(voDocCats.get(i).getSysInfo().getCreationUser().toString());
						}
						row.setValue(voDocCats.get(i));
					}
				}
			}
		}
	}

	/**
	 * @param docDetailVo
	 */
	private void populateRecipientsGrid(RecipientVoCollection voDocRecipColl)
	{
		RecipientVo vpDocRecip = new RecipientVo();
		form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().clear();
		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow row;

		for (int i = 0; i < voDocRecipColl.size(); i++)
		{
			vpDocRecip = voDocRecipColl.get(i);
			row = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();

			populateRow(vpDocRecip, row);

			if (vpDocRecip.getRecipientType().equals(RecipientType.EXTERNAL_GP))
			{
				row.setGP(form.getImages().Admin.StaffBlue);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.EXTERNAL_PERSON))
			{
				row.setGP(form.getImages().Admin.StaffYellow);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.PATIENT_RECIPIENT))
			{
				row.setGP(form.getImages().Admin.StaffGreen);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.PATIENT_GP))
			{
				row.setGP(form.getImages().Admin.StaffBlack);
			}
			else if (vpDocRecip.getRecipientType().equals(RecipientType.REFERRING_GP))
			{
				row.setGP(form.getImages().Admin.StaffRed);
			}

		}
	}

	private void populateRow(RecipientVo vpDocRecip, GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow row)
	{

		if (vpDocRecip != null)
		{

			row.setValue(vpDocRecip);

			if (vpDocRecip.getAddressIsNotNull())
				row.setAddress(vpDocRecip.getAddress().toDisplayString());

			if (vpDocRecip.getNameIsNotNull())
				row.setAdressee(vpDocRecip.getName().toShortForm());
		}
	}

	private void populateScreenFromDataTemplateCategoryTexts(CategoryNotesVoCollection voCollCategories, ReportTemplateVo voReportTemplate)
	{
		if (voCollCategories == null)
			return;

		GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow rowDocumentCategory;

		// clear the list
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().clear();

		// add saved category texts

		// Match the categories for the current document details..
		for (int i = 0; i < voCollCategories.size(); i++)
		{
			CategoryNotesVo voCatNote = voCollCategories.get(i);
			rowDocumentCategory = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().newRow();
			rowDocumentCategory.setCategoryText(form.getImages().Core.Memo);
			rowDocumentCategory.setValue(voCatNote);
			rowDocumentCategory.setDate(voCatNote.getSysInfo().getCreationDateTime().getDate());
			rowDocumentCategory.setTime(voCatNote.getSysInfo().getCreationDateTime().getTime());
			rowDocumentCategory.setRecUser(domain.getMosUser(voCatNote.getSysInfo().getCreationUser()).toString());
			rowDocumentCategory.setCategory(voCatNote.getCategory());
			rowDocumentCategory.setTooltipForCategoryText(voCatNote.getCategoryText());
		}

		// load the rest of the Categories based on template and set the value
		// of all rows to a
		GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow catRow;
		TemplateCategoryVo voTemplateCategory = domain.listTemplateDischargeCategories(voReportTemplate);

		if (voTemplateCategory != null && voTemplateCategory.getDischargeCategoriesIsNotNull())
		{
			boolean found = false;
			for (int i = 0; i < voTemplateCategory.getDischargeCategories().size(); i++)
			{
				for (int k = 0; k < form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size(); k++)
				{
					if (voTemplateCategory.getDischargeCategories().get(i) != null)
					{
						if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().get(k).getValue() != null)
						{
							if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().get(k).getValue().getCategory().equals(voTemplateCategory.getDischargeCategories().get(i)))
							{
								found = true;
								break;
							}
						}
					}
				}
				if (!found)
				{
					catRow = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().newRow();
					// store discharge category type id
					catRow.setTemplateCategoryId(new Integer(voTemplateCategory.getDischargeCategories().get(i).getId()));
					// discharge category
					catRow.setCategory(voTemplateCategory.getDischargeCategories().get(i));
				}
				else
					found = false;
			}
		}

	}

	protected void loadCategoriesForTemplate(ReportTemplateVo voReportTemplate)
	{
		// load Categories based on template
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().clear();
		GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow catRow;
		TemplateCategoryVo voTemplateCategory = domain.listTemplateDischargeCategories(voReportTemplate);

		if (voTemplateCategory != null && voTemplateCategory.getDischargeCategoriesIsNotNull())
		{
			for (int i = 0; i < voTemplateCategory.getDischargeCategories().size(); i++)
			{
				if (voTemplateCategory.getDischargeCategories().get(i) != null)
				{
					catRow = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().newRow();
					// store discharge category type id
					catRow.setTemplateCategoryId(new Integer(voTemplateCategory.getDischargeCategories().get(i).getId()));
					// discharge category
					catRow.setCategory(voTemplateCategory.getDischargeCategories().get(i));
				}

			}
		}
	}

	/**
	 * @param docDetailVo
	 */
	private void populateScreenFromData(CorrespondenceDetailsVo voDocumentDetails)
	{
		if (null == voDocumentDetails)
			return;

		if (voDocumentDetails.getCategoriesIsNotNull())
			populateCategoryDetails(voDocumentDetails.getCategories());

		// recipients
		if (voDocumentDetails.getRecipientsIsNotNull())
			populateRecipientsGrid(voDocumentDetails.getRecipients());

		if (voDocumentDetails.getDictatedBy() != null)
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().newRow(voDocumentDetails.getDictatedBy(), voDocumentDetails.getDictatedBy().getIItemText());
			form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().setEditedText(voDocumentDetails.getDictatedBy().getIItemText());

			if (voDocumentDetails.getDictatedByInitialsIsNotNull())
				form.lyrCorrespondenceDetail().tabRecipients().txtDictatedByinitals().setValue(voDocumentDetails.getDictatedByInitials());
		}

		if (voDocumentDetails.getTypedBy() != null)
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().newRow(voDocumentDetails.getTypedBy(),voDocumentDetails.getTypedBy().getIItemText());
			form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().setEditedText(voDocumentDetails.getTypedBy().getIItemText());

			if (voDocumentDetails.getTypedByInitialsIsNotNull())
				form.lyrCorrespondenceDetail().tabRecipients().txtTypedByInitials().setValue(voDocumentDetails.getTypedByInitials());
		}

		if (voDocumentDetails.getEnquiriesToIsNotNull())
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().setValue(voDocumentDetails.getEnquiriesTo());
			form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().setEditedText(voDocumentDetails.getEnquiriesTo().getIItemText());

		}

		if (voDocumentDetails.getDischargeDateIsNotNull())
			form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().setValue(voDocumentDetails.getDischargeDate());

		if (voDocumentDetails.getWasTypedWithoutCaseNotesIsNotNull())
		{
			form.lyrCorrespondenceDetail().tabRecipients().chkTypedWithoutCaseNotes().setValue(voDocumentDetails.getWasTypedWithoutCaseNotes());
		}

		// special interest
		if (voDocumentDetails.getSpecialInterestIsNotNull())
		{
			form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().setValue(voDocumentDetails.getSpecialInterest());
			form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setValue(true);
		}
		else
		{
			form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setValue(false);
		}

		// List template categories
		if (voDocumentDetails.getCurrentDocumentIsNotNull() && voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
		{
			// first time to load template catedories for this correspondence

			if (voDocumentDetails.getCategoriesIsNotNull())
				populateScreenFromDataTemplateCategoryTexts(voDocumentDetails.getCategories(), voDocumentDetails.getCurrentDocument().getTemplate());
			else
				loadCategoriesForTemplate(voDocumentDetails.getCurrentDocument().getTemplate());
		}

		// signed by
		if (voDocumentDetails.getSignedByIsNotNull())
		{
			MedicLiteVo voLiteMedic = voDocumentDetails.getSignedBy();
			if (voLiteMedic != null)
			{
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setValue(voLiteMedic);
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEditedText(voLiteMedic.getMos().getName().toShortForm());
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setTooltip(voLiteMedic.getMos().getName().toShortForm());
			}
		}
		else if (form.getLocalContext().getlastDocumentStatus().equals(DocumentStatus.SIGNED) && form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy() == null)
		{

			if (form.getLocalContext().getLastSignedByIsNotNull())
			{
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setValue(form.getLocalContext().getLastSignedBy());
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEditedText(form.getLocalContext().getLastSignedBy().toString());
				voDocumentDetails.setSignedBy(form.getLocalContext().getLastSignedBy());
			}

			voDocumentDetails.setCurrentStatus(DocumentStatus.SIGNED);
		}

		setCurrentStatusImage(voDocumentDetails.getCurrentStatus());

		if (voDocumentDetails.getCurrentStatusIsNotNull())
			form.getLocalContext().setlastDocumentStatus(voDocumentDetails.getCurrentStatus());

		PasEventVo voPasEvent = form.getLocalContext().getpasEventVo();

		populateScreenPatientInfoFromData(voDocumentDetails, voPasEvent);

	}

	/**
	 * @param voDocumentDetails
	 */
	private void setCurrentStatusImage(ims.core.vo.lookups.DocumentStatus currentStatus)
	{
		if (currentStatus != null)
		{
			form.btnDocStatHist().setImage(currentStatus.getImage());
			form.btnDocStatHist().setTooltip("Current Status : " + currentStatus.getText());
			int l_i = form.pnlTitle().getValue().indexOf("Current");
			if (l_i > -1)
			{
				String[] sTitleLeft = form.pnlTitle().getValue().split("Current Status");
				if (sTitleLeft != null)
				{
					String lTitle = sTitleLeft[0] += "Current Status of " + form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getTemplate().getName().toString() + " : " + currentStatus.getText();
					form.pnlTitle().setValue(lTitle);
				}
			}
		}
		else
		{
			form.btnDocStatHist().setImage(null);
			form.btnDocStatHist().setTooltip("Current Status : None");
		}
	}

	/**
	 * @param voDocumentDetails
	 * @param voPasEvent
	 */
	private void populateScreenPatientInfoFromData(CorrespondenceDetailsVo voDocumentDetails, PasEventVo voPasEvent)
	{
		// show patient details

		Patient voPatient = null;
		PatientShort voPatientShort = null;

		if (voDocumentDetails != null)
			voPatient = domain.getPatientLocal(form.getLocalContext().getpasEventVo().getPatient());
		else if (voPasEvent != null)
			voPatientShort = voPasEvent.getPatient();

		if (null != voPatient)
		{

			String sPatientDetails = formatVo(voPatient, "Patient Details");
			sPatientDetails += formatVo(voPasEvent, "Pas Event Details");
			sPatientDetails += formatVo(voPatient.getGp(), "Patient GP Details");
			sPatientDetails += formatVo(voPasEvent.getReferringGP(), "Referral GP Details");
			sPatientDetails += formatVo(voPasEvent.getReferringGpSurgery(), "Referral Surgery Details");

			form.getLocalContext().setPatientGP(voPatient.getGp());

			if (voPatient.getGpSurgeryIsNotNull())
				form.getLocalContext().setPatientGPSurgery(voPatient.getGpSurgery());

		}

	}

	private void setContextVariables(CorrespondenceDetailsVo voCorrespondenceDetails)
	{

		clearContextvariables();

		if (null == voCorrespondenceDetails)
			return;

		if (voCorrespondenceDetails.getCurrentDocumentIsNotNull())
			form.getGlobalContext().Correspondence.setReportTemplate(voCorrespondenceDetails.getCurrentDocument().getTemplate());

		if (voCorrespondenceDetails.getID_CorrespondenceDetailsIsNotNull())
			form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(voCorrespondenceDetails.getCurrentDocumentIsNotNull() ? voCorrespondenceDetails.getCurrentDocument().getID_Document() : null);

		form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);

		if (voCorrespondenceDetails.getCurrentDocumentIsNotNull())
			form.getLocalContext().setLastDocGenerated(voCorrespondenceDetails.getCurrentDocument());

		if (voCorrespondenceDetails.getCurrentStatusIsNotNull())
			form.getLocalContext().setlastDocumentStatus(voCorrespondenceDetails.getCurrentStatus());

	}

	private String formatVo(Object fVo, String sTitle)
	{
		StringBuffer sbBody = new StringBuffer();
		if (fVo != null)
		{
			sbBody.append(new TextileString("h3{color:green}. " + sTitle));
		}
		if (fVo instanceof PatientShort)
		{
			PatientShort patientShort = (PatientShort) fVo;
			sbBody.append("<table>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Name: "));
			sbBody.append("</td><td>");
			sbBody.append(patientShort.getNameIsNotNull() ? patientShort.getName().toString() : "");
			sbBody.append("</td><td>");

			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. DOB: "));
			sbBody.append("</td><td>");
			sbBody.append(patientShort.getDobIsNotNull() ? patientShort.getDob().toString() : "");
			sbBody.append("</td><td>");

			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Age: "));
			sbBody.append("</td><td>");
			sbBody.append(patientShort.getAgeIsNotNull() ? patientShort.getAge().toString() : "");
			sbBody.append("</td><td>");

			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Sex: "));
			sbBody.append("</td><td>");
			sbBody.append(patientShort.getSexIsNotNull() ? patientShort.getSex().toString() : "");
			sbBody.append("</td><td>");

			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Hosp Num: "));
			sbBody.append("</td><td>");
			sbBody.append(patientShort.getHospnum().getValue());
			sbBody.append("</td></tr></table>");

			if (patientShort.getAddressIsNotNull())
			{
				sbBody.append("<hr />");
				sbBody.append(new TextileString("h3{color:green}. Address"));
				sbBody.append("<table>");
				sbBody.append("<tr><td>");
				sbBody.append(patientShort.getAddress().getLine1IsNotNull() ? patientShort.getAddress().getLine1() : "");
				sbBody.append("</td><td>");
				sbBody.append("<tr><td>");
				sbBody.append(patientShort.getAddress().getLine2IsNotNull() ? patientShort.getAddress().getLine2() : "");
				sbBody.append("</td><td>");
				sbBody.append("<tr><td>");
				sbBody.append(patientShort.getAddress().getLine3IsNotNull() ? patientShort.getAddress().getLine3() : "");
				sbBody.append("</td><td>");
				sbBody.append("<tr><td>");
				sbBody.append(patientShort.getAddress().getLine4IsNotNull() ? patientShort.getAddress().getLine4() : "");
				sbBody.append("</td></tr></table>");
				sbBody.append("<hr />");
			}

			if (patientShort.getCommChannels() != null && patientShort.getCommChannels().size() > 0)
			{
				sbBody.append(new TextileString("h3{color:green}. Contact"));
				if (patientShort.getCommChannels().size() > 0)
				{
					sbBody.append("<table>");
					for (int i = 0; i < patientShort.getCommChannels().size(); i++)
					{
						sbBody.append("<tr><td>");
						sbBody.append(new TextileString("p{color:blue}. " + patientShort.getCommChannels().get(i).getChannelType().toString() + ":"));
						sbBody.append("</td><td>");
						sbBody.append(patientShort.getCommChannels().get(i).getCommValue());
						sbBody.append("</td><td>");
					}
					sbBody.append("</table>");
				}
			}

			sbBody.append("<hr />");

		}
		else if (fVo instanceof PasEventVo)
		{
			PasEventVo pasEvent = (PasEventVo) fVo;
			sbBody.append("<table>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Contact Number: "));
			sbBody.append("</td><td>");
			sbBody.append(pasEvent.getPasEventIdIsNotNull() ? pasEvent.getPasEventId() : "");
			sbBody.append("</td><td>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Clinic Date: "));
			sbBody.append("</td><td>");
			sbBody.append("Date:" + (pasEvent.getEventDateTimeIsNotNull() ? pasEvent.getEventDateTime().getDate().toString(DateFormat.STANDARD) : ""));
			sbBody.append("Time:" + (pasEvent.getEventDateTimeIsNotNull() ? pasEvent.getEventDateTime().getTime().toString(TimeFormat.DEFAULT) : ""));
			sbBody.append("</td><td>");
			sbBody.append("</td></tr></table>");
			sbBody.append("<hr />");
		}
		else if (fVo instanceof GpShortVo)
		{
			GpShortVo gp = (GpShortVo) fVo;
			sbBody.append("<table>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Name: "));
			sbBody.append("</td><td>");
			sbBody.append(gp != null ? gp.getName().toShortForm().toString() : "");
			sbBody.append("</td><td>");
			sbBody.append("</td></tr></table>");
			sbBody.append("<hr />");
		}
		else if (fVo instanceof GpLiteVo)
		{
			GpLiteVo gp = (GpLiteVo) fVo;
			sbBody.append("<table>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Name: "));
			sbBody.append("</td><td>");
			sbBody.append(gp != null ? gp.getName().toString() : "");
			sbBody.append("</td><td>");
			sbBody.append("</td></tr></table>");
			sbBody.append("<hr />");
		}
		else if (fVo instanceof ExternalPersonShortVo)
		{
			ExternalPersonShortVo ep = (ExternalPersonShortVo) fVo;
			sbBody.append("<table>");
			sbBody.append("<tr><td>");
			sbBody.append(new TextileString("p{color:blue}. Name: "));
			sbBody.append("</td><td>");
			sbBody.append(ep.getNameIsNotNull() ? ep.getName() : "");
			sbBody.append("</td><td>");
			sbBody.append("</td></tr></table>");
			sbBody.append("<hr />");

			if (ep.getCommChannels() != null && ep.getCommChannels().size() > 0)
			{
				sbBody.append(new TextileString("h3{color:green}. Contact"));
				if (ep.getCommChannels().size() > 0)
				{
					sbBody.append("<table>");
					for (int i = 0; i < ep.getCommChannels().size(); i++)
					{
						sbBody.append("<tr><td>");
						sbBody.append(new TextileString("p{color:blue}. " + ep.getCommChannels().get(i).getChannelType().toString() + ":"));
						sbBody.append("</td><td>");
						sbBody.append(ep.getCommChannels().get(i).getCommValue());
						sbBody.append("</td><td>");
					}
					sbBody.append("</table>");
				}
			}
		}

		return sbBody.toString();
	}

	private boolean isTemplateSelected()
	{
		return (form.getGlobalContext().Correspondence.getReportTemplateIsNotNull());
	}

	/**
	 * 
	 */
	private void updateControlStateForStatus()
	{

		if (null == form.getLocalContext().getcorrespondenceDetails().getCurrentStatus())
		{
			throw new CodingRuntimeException("No Status found for current document.");
		}

		// allow change status only if a documentdetail is saved
		form.btnDocStatHist().setEnabled(form.getLocalContext().getcorrespondenceDetails().getID_CorrespondenceDetailsIsNotNull());

		DocumentStatus lkpStatus = form.getLocalContext().getcorrespondenceDetails().getCurrentStatus();

		if (lkpStatus.equals(DocumentStatus.SUPLEMENTRY))
			lkpStatus = DocumentStatus.LETTERREQUIRED;

		if (form.getGlobalContext().Correspondence.getGenerateFormModeIsNotNull())
		{
			form.btnEMail().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED) && form.getGlobalContext().Correspondence.getGenerateFormMode().equals(FormMode.EDIT));
			form.btnSupplementary().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED) && form.getGlobalContext().Correspondence.getGenerateFormMode().equals(FormMode.EDIT));
		}
		else
		{
			form.btnEMail().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED));
			form.btnSupplementary().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED));
		}
		boolean l_enable = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.SIGNED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE);

		if (isTemplateSelected())
		{
			if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED) || form.getGlobalContext().Correspondence.getGenerateFormMode().equals(FormMode.VIEW))
			{
				form.btnUpdate().setEnabled(false);
			}
			else
				form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW));
				form.btnDocStatHist().setEnabled(form.getMode().equals(FormMode.VIEW));
		}

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().setEnabled(true);
			form.lyrCorrespondenceDetail().tabRecipients().dteStartDate().setEnabled(true);
			boolean bLetterRequired = (!lkpStatus.equals(DocumentStatus.SIGNED) || (!lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE)));
			form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().setEnabled(bLetterRequired);
			form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setEnabled(bLetterRequired);
			form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().setEnabled(form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().getValue() && bLetterRequired);

			form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().setEnabled(lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || bLetterRequired);

			if (lkpStatus.equals(DocumentStatus.LETTERREQUIRED))
			{
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEnabled(false);
			}
			else if (lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE))
			{
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEnabled(true);
			}
			form.btnSave().setEnabled((lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || bLetterRequired) && (!lkpStatus.equals(DocumentStatus.SIGNED)));

			form.btnSupplementary().setEnabled(lkpStatus.equals(DocumentStatus.SIGNED));

			form.btnPrintLetter().setEnabled(false);

			boolean boolCanResetTemplate = form.getLocalContext().getcorrespondenceDetails() != null && bLetterRequired;
			form.btnResetTemplate().setEnabled(boolCanResetTemplate);
		}
		else
		{
			if (form.getGlobalContext().Correspondence.getGenerateFormMode().equals(FormMode.EDIT))
				form.btnPrintLetter().setEnabled(!lkpStatus.equals(DocumentStatus.SIGNED) && lkpStatus.equals(DocumentStatus.GENNOTPRINTED));
			else
				form.btnPrintLetter().setEnabled(false);

			form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().setEnabled(false);
			form.lyrCorrespondenceDetail().tabRecipients().dteStartDate().setEnabled(false);

		}

		updateContextMenusState();
	}

	private void previewLetter()
	{
		// get saved document from local context
		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();

		byte[] resultPdf;
		resultPdf = null;
		try
		{
			resultPdf = buildDocumentPDF(voCorrespondenceDetails);
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Report Generation Failed for the following reason(s): " + e.getMessage());
			return;
		}

		if (null != resultPdf)
			voCorrespondenceDetails.getCurrentDocument().setContent(new String(resultPdf));

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return;

		previewDoc();
	}

	/**
	 * @param voDocDetail
	 */
	private boolean saveDocumentDetails(CorrespondenceDetailsVo voCorrespondenceDetails)
	{
		if (null == voCorrespondenceDetails)
			return false;

		String[] errors = voCorrespondenceDetails.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;

		}
		CorrespondenceDetailsVo voSavedDocumentDetails = null;
		try
		{

			voSavedDocumentDetails = domain.saveCorrespondenceDetails(voCorrespondenceDetails, form.getLocalContext().getpasEventVo().getEventType());

		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}

		if (voSavedDocumentDetails != null)
		{
			form.getLocalContext().setcorrespondenceDetails(voSavedDocumentDetails);
			form.getLocalContext().setlastDocumentStatus(voSavedDocumentDetails.getCurrentStatus());
			form.getLocalContext().setLastDocGenerated(voSavedDocumentDetails.getCurrentDocument());
			setCurrentStatusImage(voSavedDocumentDetails.getCurrentStatus());
			Integer iDocId = form.getLocalContext().getLastDocGenerated().getID_Document();
			form.getGlobalContext().Core.setDocumentID(iDocId);
			form.getGlobalContext().Correspondence.setCorrespondenceDetails(voSavedDocumentDetails);
		}

		return true;

	}

	/**
	 * 
	 */
	private byte[] buildDocumentPDF(CorrespondenceDetailsVo voCorrespondenceDetails) throws QueryBuilderClientException
	{
		Integer iDocId;
		iDocId = voCorrespondenceDetails.getID_CorrespondenceDetails();

		form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(iDocId);
		// generate the document for viewing
		form.getGlobalContext().Core.setReportID(form.getGlobalContext().Correspondence.getReportTemplate().getReport().getID_ReportBo());
		form.getGlobalContext().Core.setTemplateID(form.getGlobalContext().Correspondence.getReportTemplate().getID_TemplateBo());

		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String[] obj = null;
		try
		{
			obj = domain.getReportAndTemplate(form.getGlobalContext().Core.getReportID(), form.getGlobalContext().Core.getTemplateID());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("I could not get the report and template !");
			return null;
		}

		if (obj == null || obj.length == 0)
		{
			engine.showMessage("I could not get the report and template !");
			return null;
		}

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		if (form.getGlobalContext().Correspondence.getDocDetailIdReportSeedIsNotNull())
			client.addSeed(new SeedValue("CorrespondenceDetails_id", form.getGlobalContext().Correspondence.getDocDetailIdReportSeed(), Integer.class));

		return client.buildReport(obj[0], obj[1], urlReportServer, QueryBuilderClient.FP3, "", 1);

	}

	private void updateControlStateForError()
	{
		form.lyrCorrespondenceDetail().tabCorrespondence().setEnabled(false);
		form.lyrCorrespondenceDetail().tabRecipients().setEnabled(false);
		hideButtons();
	}

	protected void updateContextMenusState()
	{
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsAddresseeMenuItems();
		form.getContextMenus().Correspondence.hideAllCorrespondenceDetailsCategoriesMenuItems();

		if (form.getMode().equals(FormMode.EDIT))
		{
			// check status
			if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED) || form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.NOLETTERREQUIRED))
			{
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddGpItem().setVisible(false);
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddNonGpItem().setVisible(false);
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(false);
			}
			else
			{
				// recipients

				// check if Patient GP already entered as recipient

				if (form.getLocalContext().getPatientGP() != null)
				{

					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_PATIENT_GPItem().setVisible(!checkEnteredRecipients(RecipientType.PATIENT_GP));

				}
				else
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_PATIENT_GPItem().setVisible(false);
				// check if referral Patient GP already entered as recipient

				if (form.getLocalContext().getReferrerGPIsNotNull())
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_REFERRER_GPItem().setVisible(!checkEnteredRecipients(RecipientType.REFERRING_GP));
				}
				else
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_REFERRER_GPItem().setVisible(false);

				if (form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getSelectedRowIndex() >= 0)
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveDownItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveUpItem().setVisible(true);
				}
				else
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeRemoveRecipientItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveDownItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeMoveUpItem().setVisible(false);
				}

				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddNonGpItem().setVisible(true);
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeAddGpItem().setVisible(true);

				// Check if the patient is all ready entered
				form.getContextMenus().Correspondence.getCorrespondenceDetailsAddresseeADD_PATIENTItem().setVisible(!(checkEnteredRecipients(RecipientType.PATIENT_RECIPIENT)));

				// header text
				if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRowIndex() >= 0 && form.getMode().equals(FormMode.EDIT))
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesAddTextItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveDownItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveUpItem().setVisible(true);
				}
				if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRow() != null && form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size() == 1 && form.getMode().equals(FormMode.EDIT))
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesAddTextItem().setVisible(true);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveDownItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveUpItem().setVisible(false);
					return;
				}
				if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRow() == null && form.getMode().equals(FormMode.EDIT))
				{
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesAddTextItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveDownItem().setVisible(false);
					form.getContextMenus().Correspondence.getCorrespondenceDetailsCategoriesMoveUpItem().setVisible(false);
				}

			}
		}
	}

	private boolean checkEnteredRecipients(RecipientType recipentType)
	{

		RecipientVoCollection recpColl = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getValues();

		for (int i = 0; i < recpColl.size(); i++)
		{

			RecipientVo recpVo = recpColl.get(i);
			if (recpVo.getRecipientType().equals(recipentType))
			{
				return true;
			}
		}
		return false;
	}

	private void hideButtons()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnEMail().setEnabled(false);
			form.btnPrintLetter().setEnabled(false);
			form.btnSupplementary().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.btnResetTemplate().setEnabled(false);
			form.btnDocStatHist().setEnabled(false);
		}
		if (form.getGlobalContext().Correspondence.getReportTemplate() == null)
		{
			form.btnEMail().setEnabled(false);
			form.btnPrintLetter().setEnabled(false);
			form.btnSupplementary().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.btnResetTemplate().setEnabled(false);
			form.btnDocStatHist().setEnabled(false);
			// form.btnSave().setEnabled(false);

		}

	}

	protected void onHtmDemographicsHTMLViewerClick(int value) throws PresentationLogicException
	{
		if (value == 1)
		{
			engine.open(form.getForms().Core.Demographics);
		}
		else if (value == 2)
		{
			engine.open(form.getForms().Core.PatientSearch);
		}
		else if (value == 3)
		{
			engine.open(form.getForms().Core.InpatientList);
		}

	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{

		if (form.getGlobalContext().Correspondence.getCorrespondenceDetailsIsNotNull())
		{
			open();
		}
		if (!(form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED)))
		{
			form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().clear();
			form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().clear();
			form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setValue(false);

		}
		if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.LETTERREQUIRED))
		{
			form.lyrCorrespondenceDetail().tabRecipients().chkTypedWithoutCaseNotes().setValue(null);
			form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().clear();
			form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().clear();
			form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().clear();
			form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().setValue(null);
			form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().clear();
			form.lyrCorrespondenceDetail().tabRecipients().txtDictatedByinitals().setValue(null);
			form.lyrCorrespondenceDetail().tabRecipients().txtTypedByInitials().setValue(null);

		}

		form.setMode(FormMode.VIEW);
		updateContextMenusState();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{

		if (validateUI())
		{
			return;
		}

		updateDocumentStatus(form.getLocalContext().getcorrespondenceDetails().getCurrentStatus());
		if (form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue() == null && !form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED))
		{
			if (saveCorrespondence(DocumentStatus.GENNOTPRINTED) == false)
			{
				return;
			}
			updateDocumentStatus(DocumentStatus.GENNOTPRINTED);
			form.setMode(FormMode.VIEW);
		}
		else
		{
			CorrespondenceDetailsVo voDocumentDetails = form.getLocalContext().getcorrespondenceDetails();
			DocumentStatus lkpDocStatus = voDocumentDetails.getCurrentStatus();
			voDocumentDetails.setSignedBy(form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue());

			// update current status

			if (form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue() != null)
			{
				voDocumentDetails.setCurrentStatus(DocumentStatus.SIGNED);
				updateDocumentStatus(voDocumentDetails.getCurrentStatus());
				// update Status History
				voDocumentDetails.setCspStatusHistory(updateHistoryStatus(voDocumentDetails, DocumentStatus.SIGNED));
			}
			if (!saveDocumentDetails(voDocumentDetails))
			{
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setValue(null);
				// roll back signed data
				voDocumentDetails.setSignedBy(null);
				// roll back current status
				voDocumentDetails.setCurrentStatus(lkpDocStatus);
				// remove the document status history record
				CorrespondenceStatusHistoryVoCollection voColl = voDocumentDetails.getCspStatusHistory();
				if (voColl.size() > 0)
					voColl.remove(voColl.size());
			}
			else
				form.setMode(FormMode.VIEW);

			if (form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED))
				form.btnSupplementary().setEnabled(true);

			form.setMode(FormMode.VIEW);
		}

	}

	private boolean validateUI()
	{
		if (form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().size() <= 0)
		{
			engine.showMessage("Please select an addressee before generating.");
			return true;
		}

		return false;
	}

	private void populateDataFromScreen(CorrespondenceDetailsVo voDocumentDetails)
	{
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size();
		if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size() > 0)
		{
			GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow catRow;
			CategoryNotesVoCollection voDocCatColl = new CategoryNotesVoCollection();

			for (int i = 0; i < form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().size(); i++)
			{
				catRow = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getRows().get(i);
				if (catRow.getValue() != null)
				{
					voDocCatColl.add(catRow.getValue());
				}
			}
			voDocumentDetails.setCategories(voDocCatColl);
		}
		// Document Information

		if (form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate() != null)
			voDocumentDetails.setDischargeDate(form.lyrCorrespondenceDetail().tabRecipients().dteDisChargeDate().getValue());

		if (form.getLocalContext().getpasEventVo().getEventType().equals(PasEventType.INPATIENT))
			voDocumentDetails.setAdmissionDate(form.lyrCorrespondenceDetail().tabRecipients().dteStartDate().getValue());

		if (form.getLocalContext().getpasEventVo().getEventType().equals(PasEventType.OUTPATIENT))
			voDocumentDetails.setDateOfClinic(form.lyrCorrespondenceDetail().tabRecipients().dteStartDate().getValue());

		voDocumentDetails.setDictatedBy(form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().getValue());
		voDocumentDetails.setDictatedByInitials(form.lyrCorrespondenceDetail().tabRecipients().txtDictatedByinitals().getValue());

		voDocumentDetails.setTypedByInitials(form.lyrCorrespondenceDetail().tabRecipients().txtTypedByInitials().getValue());
		voDocumentDetails.setTypedBy(form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().getValue());

		voDocumentDetails.setEnquiriesTo(form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().getValue());

		voDocumentDetails.setWasTypedWithoutCaseNotes(form.lyrCorrespondenceDetail().tabRecipients().chkTypedWithoutCaseNotes().getValue());

		// Recipients
		if (form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().size() > 0)
		{
			RecipientVoCollection voDocRecipColl = new RecipientVoCollection();

			voDocRecipColl = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getValues();
			voDocumentDetails.setRecipients(voDocRecipColl);
		}

		// signed by
		if (form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue() != null)
			voDocumentDetails.setSignedBy(form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue());

		if (form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().getValue())
			voDocumentDetails.setSpecialInterest(form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().getValue());

		form.getLocalContext().setcorrespondenceDetails(voDocumentDetails);
	}

	private boolean saveCorrespondence(ims.core.vo.lookups.DocumentStatus docStatus)
	{

		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();
		if (null == voCorrespondenceDetails)
			return false;

		MemberOfStaffShortVo voMos = (MemberOfStaffShortVo) domain.getMosUser();

		if (null == voMos)
			return false;

		populateDataFromScreen(voCorrespondenceDetails);

		String[] error = form.getLocalContext().getcorrespondenceDetails().validate();

		if (error != null)
		{

			engine.showErrors(error);
			return false;

		}

		// WDEV-2774
		// update Status History
		voCorrespondenceDetails.setCspStatusHistory(updateHistoryStatus(voCorrespondenceDetails, voCorrespondenceDetails.getCurrentStatus()));

		// update the current status
		voCorrespondenceDetails.setCurrentStatus(docStatus);

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return false;

		return true;
	}

	/**
	 * @param voDocumentDetails
	 * @return
	 */
	private CorrespondenceStatusHistoryVoCollection updateHistoryStatus(CorrespondenceDetailsVo voDocumentDetails, DocumentStatus docStatus)
	{
		CorrespondenceStatusHistoryVoCollection voColl = null;

		if (voDocumentDetails.getCspStatusHistoryIsNotNull())
			voColl = voDocumentDetails.getCspStatusHistory();
		else
			voColl = new CorrespondenceStatusHistoryVoCollection();

		CorrespondenceStatusHistoryVo vo = new CorrespondenceStatusHistoryVo();

		if (voDocumentDetails.getCurrentDocumentIsNotNull() && voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
			vo.setTemplateName(voDocumentDetails.getCurrentDocument().getTemplate().getNameIsNotNull() ? voDocumentDetails.getCurrentDocument().getTemplate().getName() : "");
		else
			vo.setTemplateName("");

		vo.setStatus(docStatus);
		vo.setMos((MemberOfStaffShortVo) domain.getMosUser());
		if (voDocumentDetails.getCurrentDocument().getTemplateIsNotNull())
			vo.setTemplateName(voDocumentDetails.getCurrentDocument().getTemplate().getNameIsNotNull() ? voDocumentDetails.getCurrentDocument().getTemplate().getName() : "");
		voColl.add(vo);
		return voColl;
	}

	protected void onBtnSignClick() throws PresentationLogicException
	{
		if (null == form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue())
		{
			engine.showMessage("Please choose a 'signed by' entry");
			return;
		}
		CorrespondenceDetailsVo voDocumentDetails = form.getLocalContext().getcorrespondenceDetails();
		DocumentStatus lkpDocStatus = voDocumentDetails.getCurrentStatus();
		voDocumentDetails.setSignedBy(form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue());

		// update current status
		voDocumentDetails.setCurrentStatus(DocumentStatus.SIGNED);

		// update Status History
		voDocumentDetails.setCspStatusHistory(updateHistoryStatus(voDocumentDetails, DocumentStatus.SIGNED));

		if (!saveDocumentDetails(voDocumentDetails))
		{
			form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setValue(null);
			// roll back signed data
			voDocumentDetails.setSignedBy(null);
			// roll back current status
			voDocumentDetails.setCurrentStatus(lkpDocStatus);
			// remove the document status history record
			CorrespondenceStatusHistoryVoCollection voColl = voDocumentDetails.getCspStatusHistory();
			if (voColl.size() > 0)
				voColl.remove(voColl.size());
		}
		else
			form.setMode(FormMode.VIEW);
	}

	private void supplementaryCorrespondence()
	{

		engine.open(form.getForms().Correspondence.TemplateSelect);

	}

	private void eMailCorrespondence()
	{
		if (null == form.getLocalContext().getcorrespondenceDetails() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getContent() || null == form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getContent().getBytes())
		{
			engine.showMessage("Error retrieving document content.");
			return;
		}

		// get email account information for logged in user
		UserEmailAccountVo emailAuthor = domain.getEmailAppUser(engine.getLoggedInUser().getUserId());
		if (emailAuthor == null || emailAuthor.getEmailAddress() == null || emailAuthor.getEmailAddress().length() == 0)
		{
			engine.showMessage("Logged in users email address is not configured. Please add Email communication channel to your account.");
			return;
		}

		StringBuffer sRecipientsNoEmail = new StringBuffer();

		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getRecipientsIsNotNull())
		{
			DocumentVo voDoc = new DocumentVo();
			voDoc.setID_Document(form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getID_Document());
			voDoc = domain.getDocument(voDoc);
			if (null == voDoc)
				return;

			AttachmentHelper correspondenceDocument = new AttachmentHelper(voDoc, engine.getSessionId(), "DischargeLetter_" + String.valueOf(voDoc.getID_Document()) + ".pdf");

			StringBuffer emailAddresses = new StringBuffer();

			try
			{
				String noEmailAddresses = form.getLocalContext().getcorrespondenceDetails().getRecipients().getIRecipientsWithNoEmail();
				if (noEmailAddresses != null)
				{
					engine.showMessage("The following recipients do not have email addresses\n\n" + sRecipientsNoEmail);

					return;
				}

				EmailHelper emailCorresp = new EmailHelper(emailAuthor, emailAuthor);
				if (form.getLocalContext().getcorrespondenceDetails().getRecipients() != null && form.getLocalContext().getcorrespondenceDetails().getRecipients().getIRecipientlistItems().length > 0)
				{
					emailCorresp.addRecipients(form.getLocalContext().getcorrespondenceDetails().getRecipients());
					emailCorresp.setAttach(correspondenceDocument);
					emailCorresp.setSubject("Correspondence Reference : " + form.getLocalContext().getcorrespondenceDetails().getID_CorrespondenceDetails().toString());
					emailCorresp.sendEmail();
				}

				engine.showMessage("The discharge letter has been emailed to\n\n" + emailAddresses);
			}
			catch (MessagingException me)
			{
				engine.showMessage(me.getMessage());
			}
			catch (SecurityException se)
			{
				engine.showMessage(se.getMessage());
			}
		}
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		if (!(form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.PRINTEDNOSIGNATURE)))
		{

			form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEnabled(false);
			form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setEnabled(false);
			form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().setEnabled(true);
			updateContextMenusState();

			return;

		}
		form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEnabled(true);
		form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().setEnabled(true);
		form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().setEnabled(true);

	}

	protected void onBtnSupplementaryClick() throws PresentationLogicException
	{
		supplementaryCorrespondence();
	}

	protected void onBtnPrintLetterClick() throws PresentationLogicException
	{
		printCorrespondence();
	}

	/**
	 * 
	 */
	private void showPrintDialog()
	{
		Integer iDocId = form.getLocalContext().getLastDocGenerated().getID_Document();
		form.getGlobalContext().Core.setDocumentID(iDocId);
		engine.open(form.getForms().Correspondence.PrintDishargeLetter);
		Integer[] params = new Integer[]{form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().size()};
		engine.open(form.getForms().Correspondence.PrintDishargeLetter, params);

	}

	private void printCorrespondence()
	{

		if (form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getContent() == null)
		{

			previewLetter();

		}

		if (form.getMode().equals(FormMode.VIEW))
		{

			if (!form.getLocalContext().getcorrespondenceDetails().getCurrentStatus().equals(DocumentStatus.SIGNED))
			{
				if (prepairPrintCorrespondenceDoc() != null)
					showPrintDialog();

				return;

			}
		}

		// this code for if we are printing from Edit mode.
		if (form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().size() <= 0)
		{
			engine.showMessage("Please select an addressee before generating.");
			return;
		}

		if (form.getLocalContext().getLastDocGeneratedIsNotNull())
			showPrintDialog();
	}

	protected void onChkSpecialInterestValueChanged() throws PresentationLogicException
	{
		if (form.lyrCorrespondenceDetail().tabCorrespondence().chkSpecialInterest().getValue())
			form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().setEnabled(true);
		else
			form.lyrCorrespondenceDetail().tabCorrespondence().cmbType().setEnabled(false);
	}

	protected void onQmbSignedByTextSubmited(String value) throws PresentationLogicException
	{

		form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().clear();

		MedicLiteVoCollection Signatories = domain.listSignatories(value);

		for (int index = 0; index < Signatories.size(); index++)
		{
			form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().newRow(Signatories.get(index), Signatories.get(index).getName().toString());
		}

		form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().showOpened();

	}

	protected PasEventVo GetPasEventDetails()
	{
		if (form.getGlobalContext().Core.getPasEventIsNotNull())
		{
			return domain.getPasEvent(form.getGlobalContext().Core.getPasEvent());
		}
		return null;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Correspondence.TemplateSelect))
		{

			if (result.equals(DialogResult.OK))
			{
				// Use existing information to create a suplementry letter

				// Clear signed status and signature
				form.getLocalContext().setLastSignedBy(form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().getValue());
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().clear();
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setValue(null);
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setEditedText("");
				form.lyrCorrespondenceDetail().tabCorrespondence().qmbSignedBy().setTooltip("");
			//	saveDocumentDetails(form.getLocalContext().getcorrespondenceDetails());
				CorrespondenceDetailsVo voDocumentDetails = form.getLocalContext().getcorrespondenceDetails();

				if (null == voDocumentDetails)
				{
					updateControlStateForError();
					return;
				}
				if (voDocumentDetails.getCurrentStatus().equals(DocumentStatus.SIGNED))
				{
					voDocumentDetails.setCurrentStatus(DocumentStatus.SUPLEMENTRY);
					voDocumentDetails.setSignedBy(null);
					updateDocumentStatus(voDocumentDetails.getCurrentStatus());

				}
				templateSelectOK();

				return;

			}
			else
			{
				// display patient info
				populateScreenPatientInfoFromData(null, GetPasEventDetails());
			}
		}

		else if (formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
			insertgrdGpAdressee(form.getGlobalContext().Core.getGPDetailsIsNotNull() ? form.getGlobalContext().Core.getGPDetails() : null, form.getGlobalContext().Core.getGPSurgeryIsNotNull() ? form.getGlobalContext().Core.getGPSurgery() : null);

		else if (formName.equals(form.getForms().Correspondence.NonGPSelect) && result.equals(DialogResult.OK))
			insertgrdAdressee(form.getGlobalContext().Correspondence.getExternalPersonIsNotNull() ? form.getGlobalContext().Correspondence.getExternalPerson() : null);

		else if (formName.equals(form.getForms().Correspondence.HeaderComment) && result.equals(DialogResult.OK))
			updategrdDischargeComment();

		else if (formName.equals(form.getForms().Correspondence.PrintDishargeLetter) && result.equals(DialogResult.OK))
		{
			updateDocumentStatus(DocumentStatus.PRINTEDNOSIGNATURE);
			byte[] b = prepairPrintCorrespondenceDoc();
			if (b != null)
				saveStatus(DocumentStatus.PRINTEDNOSIGNATURE, form.getLocalContext().getcorrespondenceDetails(), b);

			updateControlsState();

		}

		else if (formName.equals(form.getForms().Correspondence.DocumentStatusDlg))
		{
			open();
		}
	}

	private void updateDocumentStatus(DocumentStatus value)
	{

		if (value.equals(DocumentStatus.SUPLEMENTRY))
		{

			CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();
			DocumentVo nuDoc = new DocumentVo();
			nuDoc.setTemplate(form.getGlobalContext().Correspondence.getReportTemplate());
			nuDoc.setPatient(form.getGlobalContext().Core.getPatientShort());
			nuDoc.setStatus(DocumentStatus.GENNOTPRINTED);
			nuDoc.setContent(voCorrespondenceDetails.getCurrentDocument().getContent());
			nuDoc.setCreationDate(new Date());
			voCorrespondenceDetails.setCurrentDocument(nuDoc);
			voCorrespondenceDetails.setCurrentStatus(DocumentStatus.GENNOTPRINTED);
			form.getLocalContext().setcorrespondenceDetails(voCorrespondenceDetails);
			form.getLocalContext().getcorrespondenceDetails();

		}
		else
		{

			form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().setStatus(value);

		}
	}

	private void insertgrdGpAdressee(GpShortVo gpShortVo, LocSiteShortVo locSiteShortVo)
	{
		if (gpShortVo == null || locSiteShortVo == null)
			return;
		RecipientVo gpRecipVo = new RecipientVo();

		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow row = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();
		GpShortVo voGP = (GpShortVo) gpShortVo;

		PersonAddress surgeryAddress = null;

		if (locSiteShortVo.getAddressIsNotNull())
		{
			surgeryAddress = locSiteShortVo.getAddress();
			row.setAddress(surgeryAddress.toDisplayString());
		}

		row.setGP(form.getImages().Admin.StaffBlue);
		gpRecipVo.setName(voGP.getName());
		gpRecipVo.setAddress(surgeryAddress);
		gpRecipVo.setRecipientType(RecipientType.EXTERNAL_GP);

		row.setValue(gpRecipVo);
		row.setAdressee(voGP.getName().toString());

	}

	private void updateControlsState()
	{
		updateControlStateUI();
		setStatusCaption();
	}

	/**
	 * 
	 */
	private void setStatusCaption()
	{
		if (form.getLocalContext().getcorrespondenceDetailsIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocumentIsNotNull() && form.getLocalContext().getcorrespondenceDetails().getCurrentDocument().getStatusIsNotNull())
			setCurrentStatusImage(form.getLocalContext().getcorrespondenceDetails().getCurrentStatus());
		else
			setCurrentStatusImage(DocumentStatus.LETTERREQUIRED);
	}

	private void updateControlStateUI()
	{
		if (null == form.getLocalContext().getcorrespondenceDetails())
			updateControlStateForError();
		else
			updateControlStateForStatus();

	}

	private byte[] prepairPrintCorrespondenceDoc()
	{

		// get saved document from local context
		CorrespondenceDetailsVo voCorrespondenceDetails = form.getLocalContext().getcorrespondenceDetails();

		byte[] resultPdf;
		resultPdf = null;
		try
		{
			resultPdf = buildDocumentPDF(voCorrespondenceDetails);
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Report Generation Failed for the following reason(s): " + e.getMessage());
			return null;
		}

		return resultPdf;
	}

	protected void insertgrdAdressee(ValueObject voAdressee)
	{
		if (voAdressee == null)
			return;

		GenForm.lyrCorrespondenceDetailLayer.tabRecipientsContainer.grdAdresseeRow row = form.lyrCorrespondenceDetail().tabRecipients().grdAdressee().getRows().newRow();
		ExternalPersonShortVo voExtPer = (ExternalPersonShortVo) voAdressee;

		RecipientVo exterPer = new RecipientVo();

		exterPer.setCommChannels(voExtPer.getCommChannels());
		exterPer.setName(voExtPer.getName());

		exterPer.setAddress(voExtPer.getAddress());
		exterPer.setRecipientType(RecipientType.EXTERNAL_PERSON);
		row.setValue(exterPer);
		row.setAdressee(exterPer.getName().toShortForm());

		if (exterPer.getAddressIsNotNull())
			row.setAddress(exterPer.getAddress().toDisplayString());
		row.setGP(form.getImages().Admin.StaffYellow);

	}

	private boolean saveStatus(ims.core.vo.lookups.DocumentStatus docStatus, CorrespondenceDetailsVo voCorrespondenceDetails, byte[] resultPdf)
	{
		if (null != resultPdf)
			voCorrespondenceDetails.getCurrentDocument().setContent(new String(resultPdf));

		// update current status
		voCorrespondenceDetails.setCurrentStatus(docStatus);

		// update Status History
		voCorrespondenceDetails.setCspStatusHistory(updateHistoryStatus(voCorrespondenceDetails, docStatus));

		if (!saveDocumentDetails(voCorrespondenceDetails))
			return false;

		return true;
	}

	protected void updategrdDischargeComment()
	{
		GenForm.lyrCorrespondenceDetailLayer.tabCorrespondenceContainer.grdCategoriesRow doccatrow;
		CategoryNotesVo doccatVo;

		if (form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRowIndex() >= 0)
		{
			doccatrow = form.lyrCorrespondenceDetail().tabCorrespondence().grdCategories().getSelectedRow();
			// check if a doccattext exists
			if (doccatrow.getValue() != null)
			{
				doccatVo = doccatrow.getValue();
			}
			else
			{
				doccatVo = new CategoryNotesVo();
				doccatVo.setCategory(doccatrow.getCategory());
			}

			// set recording date and time
			doccatrow.setDate(new Date());
			doccatrow.setTime(new Time());

			// set recording user
			Object mos = domain.getMosUser();
			if (mos != null)
			{
				MemberOfStaffShortVo voMosAppUser = new MemberOfStaffShortVo();
				voMosAppUser = (MemberOfStaffShortVo) mos;
				doccatrow.setRecUser(voMosAppUser.getName().toString());
			}

			doccatVo.setCategoryText(form.getGlobalContext().Correspondence.getDocCategory().getCategoryText());
			doccatrow.setValue(doccatVo);
			doccatrow.setCategoryText(form.getImages().Core.Memo);
			doccatrow.setTooltipForCategoryText(form.getGlobalContext().Correspondence.getDocCategory().getCategoryText());
		}
	}

	protected void onlyrCorrespondenceDetailTabChanged(LayerBridge tab)
	{

		updateContextMenusState();

	}

	private void previewDoc()
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		if (urlQueryServer == null || urlQueryServer.length() == 0)
		{
			form.getGlobalContext().Correspondence.setCorrespondencePreviewUrl("<center>The <b>QUERY_SERVER_URL</b> config flag was not set !</center>");
			return;
		}

		if (urlReportServer == null || urlReportServer.length() == 0)
		{
			form.getGlobalContext().Correspondence.setCorrespondencePreviewUrl("<center>The <b>REPORT_SERVER_URL</b> config flag was not set !</center>");
			return;
		}

		if (form.getGlobalContext().Core.getDocumentIDIsNotNull())
		{
			QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

			// Get Document
			if (form.getGlobalContext().Core.getDocumentIDIsNotNull())
			{
				DocumentVo voDoc = new DocumentVo();
				voDoc.setID_Document(form.getGlobalContext().Core.getDocumentID());
				voDoc = domain.getDocument(voDoc);
				if (null == voDoc)
					return;
				String resultUrl = "";
				byte[] resultPdf = null;
				try
				{
					if (voDoc.getContentIsNotNull())
					{
						resultPdf = client.convertReport(urlReportServer, voDoc.getContent().getBytes(), "PDF", "", 1);
						resultUrl = client.prepareReportForViewingInlineFrame(resultPdf, "PDF");
						form.getGlobalContext().Correspondence.setCorrespondencePreviewUrl(resultUrl);
						return;
					}
					else
					{
						engine.showMessage("No Document Content found for report.: ");
						return;
					}
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error preparing report: " + e1.getMessage());
					return;
				}
			}
			return;
		}

		form.getGlobalContext().Correspondence.setCorrespondencePreviewUrl("<center>No report to build or view, you have not passed down the right parameters !</center>");
	}

	protected void onHtmPreviewHTMLViewerClick(int value) throws PresentationLogicException
	{
		try
		{
			form.getGlobalContext().Correspondence.setCorrespondencePreviewUrl(getIFrameCode());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
		}
	}

	/*
	 * This is specific to CSP and will generate a report based on the DocumentDetails_id seed
	 */
	private String getIFrameCode() throws DomainInterfaceException
	{
		StringBuffer sb = new StringBuffer(1000);
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		String[] obj = null;

		obj = domain.getReportAndTemplate(form.getGlobalContext().Core.getReportID(), form.getGlobalContext().Core.getTemplateID());

		if (obj == null || obj.length == 0)
		{
			engine.showMessage("I could not get the report and template !");
			return sb.toString();
		}

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		// get report seed name
		if (form.getGlobalContext().Correspondence.getDocDetailIdReportSeedIsNotNull())
			client.addSeed(new SeedValue("DocumentDetails_id", form.getGlobalContext().Correspondence.getDocDetailIdReportSeed(), Integer.class));

		String result = "";

		try
		{
			result = client.buildReportAsUrlInlineFrame(obj[0], obj[1], urlReportServer, "PDF", "", 1);
			sb.append(result);

		}
		catch (QueryBuilderClientException e1)
		{
			return e1.toString();
		}

		return sb.toString();
	}

	private void clearContextvariables()
	{
		form.getLocalContext().setcorrespondenceDetails(null);
		form.getLocalContext().setLastDocGenerated(null);
		form.getLocalContext().setlastDocumentStatus(null);
	}

	protected void onBtnDocStatHistClick() throws PresentationLogicException
	{
		form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(form.getLocalContext().getcorrespondenceDetails().getCspStatusHistory());
		engine.open(form.getForms().Correspondence.DocumentStatusDlg);
	}

	protected void onBtnResetTemplateClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Correspondence.TemplateSelect);
	}

	protected void onBtnEMailClick() throws PresentationLogicException
	{
		eMailCorrespondence();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onBtnPreviewClick() throws PresentationLogicException
	{

		DocumentStatus lkpStatus = form.getLocalContext().getcorrespondenceDetails().getCurrentStatus();
		boolean l_enable = lkpStatus.equals(DocumentStatus.GENNOTPRINTED) || lkpStatus.equals(DocumentStatus.SIGNED) || lkpStatus.equals(DocumentStatus.PRINTEDNOSIGNATURE);
		if (l_enable)
			previewLetter();
		else
		{
			engine.showMessage("Please save correspondence record before previewing.");
			form.lyrCorrespondenceDetail().showtabCorrespondence();
		}
		engine.open(form.getForms().Correspondence.CorrespondencePreviewDlg);

	}

	protected void onQmbDictatedByTextSubmited(String value) throws PresentationLogicException
	{

		form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().clear();

		MemberOfStaffLiteVoCollection Dictators = domain.getMos(value);

		for (int index = 0; index < Dictators.size(); index++)
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().newRow(Dictators.get(index), Dictators.get(index).getName().toString());
		}

		form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().showOpened();

	}

	protected void onQmbEnquireToTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().clear();
		MemberOfStaffLiteVoCollection enquiriesTo = domain.getMos(value);
		for (int index = 0; index < enquiriesTo.size(); index++)
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().newRow(enquiriesTo.get(index), enquiriesTo.get(index).getName().toString());
		}
		form.lyrCorrespondenceDetail().tabRecipients().qmbEnquiriesTo().showOpened();
	}

	protected void onQmbTypedByTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().clear();

		MemberOfStaffLiteVoCollection Typers = domain.getMos(value);

		for (int index = 0; index < Typers.size(); index++)
		{
			form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().newRow(Typers.get(index), Typers.get(index).getName().toString());
		}

		form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().showOpened();
	}

	protected void onQmbDictatedByValueChanged() throws PresentationLogicException
	{
		if (form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().getValue() != null)
			form.lyrCorrespondenceDetail().tabRecipients().txtDictatedByinitals().setValue(form.lyrCorrespondenceDetail().tabRecipients().qmbDictatedBy().getValue().getInitials());

	}

	protected void onQmbTypedByValueChanged() throws PresentationLogicException
	{

		if (form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().getValue() != null)
			form.lyrCorrespondenceDetail().tabRecipients().txtTypedByInitials().setValue(form.lyrCorrespondenceDetail().tabRecipients().qmbTypedBy().getValue().getInitials());

	}

}
