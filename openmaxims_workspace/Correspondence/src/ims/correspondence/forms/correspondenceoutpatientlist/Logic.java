//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.62 build 3086.19026)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.correspondenceoutpatientlist;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.OutPatientAttendanceVo;
import ims.core.vo.OutPatientListSearchCriteriaVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.PatIdType;
import ims.correspondence.vo.ClinicAccessVoCollection;
import ims.correspondence.vo.ConsultantAccessVoCollection;
import ims.correspondence.vo.CorrespondencePatientListsVoCollection;
import ims.correspondence.vo.SpecialtyAccessVoCollection;
import ims.correspondence.vo.UserAccessVo;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
	}

	private void clearInstanceControls()
	{
		clearClinicCombo();
		form.qmbClinic().setEnabled(false);
		form.cmbLocation().setValue(null);
		clearConsultantCombo();
		clearOutPatientList();
		form.cmbSpecialty().setValue(null);
	}

	private void clearOutPatientList()
	{
		form.grdOutPatient().getRows().clear();
		form.grdOutPatient().setValue(null);
		form.getContextMenus().hideAllADTMenuMenuItems();
	}

	private void clearConsultantCombo()
	{
		form.qmbConsultant().clear();

	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	private void search()
	{
		clearOutPatientList();

		if ((form.dteApptDateTo().getValue() == null)
		|| (form.dteApptDateTo().getValue()!= null && (form.qmbClinic().getValue() == null && form.cmbClinic().getValue()== null))
		&&(form.dteApptDateTo().getValue() != null && (form.qmbConsultant().getValue() == null && form.cmbConsultant().getValue()== null)))
				{
			engine.showMessage("Valid search criteria must be specified - Please enter a Appt. To Date and a Clinic and/or Consultant");
			return;
		}
		
		OutPatientListSearchCriteriaVo filter = populateSearchCriteria();
		
		if(filter==null)
			return;

		populateOutPatientList(domain.listOutpatients(filter, false));
		
		enableBatchUpdateMenuItems();
	}
	
	private OutPatientListSearchCriteriaVo populateSearchCriteria() 
	{
		if(form.dteApptDateFrom().getValue()!=null && form.dteApptDateTo().getValue()!=null && 
				(form.dteApptDateTo().getValue().getDate().before(form.dteApptDateFrom().getValue().getDate())
						|| form.dteApptDateTo().getValue().getDate().equals(form.dteApptDateFrom().getValue().getDate()))){
			engine.showMessage("'Appt. Date To' must be later than 'Appt. Date From'.");
			return null;
		}
					
		OutPatientListSearchCriteriaVo voFilter = new OutPatientListSearchCriteriaVo();
		voFilter.setClinic(form.qmbClinic().getValue());
		voFilter.setSpecialty(form.cmbSpecialty().getValue());
		if(form.getLocalContext().getUserAccessVoIsNotNull())
			voFilter.setConsultant(form.qmbConsultant().getValue());
		else
			voFilter.setConsultant(form.qmbConsultant().getValue());
		voFilter.setDictatedBy(form.qmbDictatedBy().getValue());
		voFilter.setDocumentStatus(form.cmbStatusOfLetter().getValue());
		voFilter.setDateFrom(form.dteApptDateFrom().getValue());
		voFilter.setDateTo(form.dteApptDateTo().getValue());
		
		return voFilter;
	}

	private void populateOutPatientList(CorrespondencePatientListsVoCollection voOutPatColl)
	{
		if (voOutPatColl != null)
		{
			if (voOutPatColl.size() == 0)
			{
				engine.showMessage("No matching patients found.");
				return;
			}
			storeSearchCriteria();
			GenForm.grdOutPatientRow row = null;
			for (int i = 0; i < voOutPatColl.size(); i++)
			{
				OutPatientAttendanceVo voOutPatient = voOutPatColl.get(i).getOutpatientAttendanceVo();
				if(form.cmbConsultant().getValue()==null && form.getLocalContext().getUserAccessVoIsNotNull()){
					boolean bIsUserAccessConsultant = false;
					UserAccessVo voUserAccess = form.getLocalContext().getUserAccessVo();
					ConsultantAccessVoCollection  collConsultantAccessVo = voUserAccess.getConsultantAccess();
					MedicLiteVo med = null;
					
					if (collConsultantAccessVo != null)
					{
						for (int j = 0; j < collConsultantAccessVo.size(); j++)
						{
							med = collConsultantAccessVo.get(j).getConsultant();
							if(med.getID_Hcp().equals(voOutPatient.getPasEvent().getConsultant().getID_Hcp()))
								bIsUserAccessConsultant=true;
						}
					}
					if(!bIsUserAccessConsultant)
						continue;
				}
				if (voOutPatient != null && voOutPatient.getPasEventIsNotNull() && voOutPatient.getPasEvent().getPatientIsNotNull())
				{
					row = form.grdOutPatient().getRows().newRow();
					if (voOutPatient.getPasEvent().getPatient().getNameIsNotNull())
					{
						row.setcolForename(voOutPatient.getPasEvent().getPatient().getName().getForename());
						row.setcolSurname(voOutPatient.getPasEvent().getPatient().getName().getSurname());
					}

					ims.core.vo.PatientId voPatId = voOutPatient.getPasEvent().getPatient().getDisplayId();
					if (voPatId != null)
						row.setcolHospnum(voPatId.getValue());

					if (voOutPatient.getPasEvent().getPatient().getDobIsNotNull())
						row.setcolDob(voOutPatient.getPasEvent().getPatient().getDob().toString());

					if (voOutPatient.getPasEvent().getPatient().getAgeIsNotNull())
						row.setColAge(voOutPatient.getPasEvent().getPatient().getAge().toString());
					else
						row.setColAge(voOutPatient.getPasEvent().getPatient().calculateAge().toString());

					if (voOutPatient.getPasEvent().getPatient().getSexIsNotNull())
						row.setcolSex(voOutPatient.getPasEvent().getPatient().getSex().getText());

					if (voOutPatient.getClinicIsNotNull())
						row.setcolClinic(voOutPatient.getClinic().getClinicName());

					if (voOutPatient.getPasEvent() != null && voOutPatient.getPasEvent().getSpecialty() != null)
						row.setcolSpecialty(voOutPatient.getPasEvent().getSpecialty().getText());

					if (voOutPatient.getAppointmentDateTimeIsNotNull())
						row.setcolClinicDate(voOutPatient.getAppointmentDateTime().toString());

					if (voOutPatient.getPasEvent().getPatient().getIsDead() != null && voOutPatient.getPasEvent().getPatient().getIsDead().booleanValue())
						row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());

					if(voOutPatient.getPasEvent().getCspDocumentStatusIsNotNull()){
						row.setcolDocStatus(voOutPatient.getPasEvent().getCspDocumentStatus().getImage());
						row.setTooltipForcolDocStatus(voOutPatient.getPasEvent().getCspDocumentStatus().getText());
					}
					
					row.setValue(voOutPatient);
				}

			}
		}

	}

	private void storeSearchCriteria()
	{
		OutPatientListSearchCriteriaVo voOutPatSearch = new OutPatientListSearchCriteriaVo();
		if(form.getLocalContext().getUserAccessVoIsNotNull()){
			voOutPatSearch.setClinic(form.cmbClinic().getValue());
			voOutPatSearch.setConsultant(form.cmbConsultant().getValue());
		}
		else{
			voOutPatSearch.setClinic(form.qmbClinic().getValue());
			voOutPatSearch.setConsultant(form.qmbConsultant().getValue());
		}
		voOutPatSearch.setLocation(form.cmbLocation().getValue());
		voOutPatSearch.setSpecialty(form.cmbSpecialty().getValue());
		form.getGlobalContext().Core.setOutPatientSearchCriteria(voOutPatSearch);

	}

	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();

	}

	private void open()
	{
		if (form.getGlobalContext().Core.getOutPatientSearchCriteriaIsNotNull())
		{
			displaySearchCriteria();
			search();
		}

	}

	private void displaySearchCriteria()
	{
		if (form.getGlobalContext().Core.getOutPatientSearchCriteria().getConsultantIsNotNull())
			form.qmbConsultant().newRow(form.getGlobalContext().Core.getOutPatientSearchCriteria().getConsultant(), form.getGlobalContext().Core.getOutPatientSearchCriteria().getConsultant().toString());

		form.cmbLocation().setValue(form.getGlobalContext().Core.getOutPatientSearchCriteria().getLocation());
		form.cmbSpecialty().setValue(form.getGlobalContext().Core.getOutPatientSearchCriteria().getSpecialty());
		if (form.cmbLocation().getValue() != null && form.getGlobalContext().Core.getOutPatientSearchCriteria().getClinicIsNotNull())
		{
			form.qmbClinic().newRow(form.getGlobalContext().Core.getOutPatientSearchCriteria().getClinic(), form.getGlobalContext().Core.getOutPatientSearchCriteria().getClinic().getClinicName());
			form.qmbClinic().setValue(form.getGlobalContext().Core.getOutPatientSearchCriteria().getClinic());
		}
	}

	private void initialize()
	{
		form.qmbClinic().setEnabled(false);

		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.grdOutPatient().setcolHospnumCaption(dispIdType.getText());
		loadClinicLocationCombo();

		UserAccessVo voUserAccess = domain.getUserAccess(engine.getLoggedInUser().getUserId());
		
		if(voUserAccess!=null){
			form.qmbClinic().setVisible(false);
			form.cmbClinic().setVisible(true);
			form.qmbConsultant().setVisible(false);
			form.cmbConsultant().setVisible(true);
			populateCombos(voUserAccess);
		}
		else{
			form.qmbClinic().setVisible(true);
			form.qmbClinic().setEnabled(true);
			form.cmbClinic().setVisible(false);
			form.qmbConsultant().setVisible(true);
			form.cmbConsultant().setVisible(false);
			// WDEV-2847
			populateQmbConsultants();
		}
		form.dteApptDateTo().setValue(new Date());

	}

	private void populateCombos(UserAccessVo voUserAccess) {
		
		ClinicAccessVoCollection  collClinicAccessVo = voUserAccess.getClinicAccess();
		
		if (collClinicAccessVo != null)
		{
			for (int i = 0; i < collClinicAccessVo.size(); i++)
			{
				form.cmbClinic().newRow(collClinicAccessVo.get(i).getClinic(), collClinicAccessVo.get(i).getClinic().getClinicName());
			}
			if (collClinicAccessVo.size() == 1)
			{
				form.cmbClinic().setValue(collClinicAccessVo.get(0).getClinic());
				form.cmbClinic().getValue();
			}
			else if (collClinicAccessVo.size() > 1)
				form.cmbClinic().showOpened();
				
		
		}
		
		ConsultantAccessVoCollection  collConsultantAccessVo = voUserAccess.getConsultantAccess();
		MedicLiteVo med = null;
		
		if (collConsultantAccessVo != null)
		{
			for (int i = 0; i < collConsultantAccessVo.size(); i++)
			{
				med = collConsultantAccessVo.get(i).getConsultant();
				form.cmbConsultant().newRow(med, med.toString());			
			}
		}
		if (collConsultantAccessVo != null &&
				collConsultantAccessVo.size() == 1)
						form.cmbConsultant().setValue(collConsultantAccessVo.get(0).getConsultant());
		else if (collConsultantAccessVo != null &&
				collConsultantAccessVo.size() > 1)
						form.cmbConsultant().showOpened();
		
		Integer id = engine.getLoggedInUser().getHcpId();
		if (med != null && id != null &&id.equals(med.getID_Hcp()))
			form.cmbConsultant().setValue(med);
		
		form.cmbSpecialty().clear();
		
		SpecialtyAccessVoCollection  collSpecialtyAccessVo = voUserAccess.getSpecialtyAccess();
		
		if (collSpecialtyAccessVo != null)
		{
			for (int i = 0; i < collSpecialtyAccessVo.size(); i++)
			{
				form.cmbSpecialty().newRow(collSpecialtyAccessVo.get(i).getSpecialty(), collSpecialtyAccessVo.get(i).getSpecialty().getText());
			}
			if (collSpecialtyAccessVo.size() == 1)
				form.cmbSpecialty().setValue(collSpecialtyAccessVo.get(0).getSpecialty());
			else if (collSpecialtyAccessVo.size() > 1)
				form.cmbSpecialty().showOpened();
		}		
	}

	private void loadClinicLocationCombo()
	{
		LocationLiteVoCollection voLocationLiteColl = domain.listActiveHospitalsLite();
		if (voLocationLiteColl != null)
		{
			String currentLocName = "";
			for (int i = 0; i < voLocationLiteColl.size(); i++)
			{
				form.cmbLocation().newRow(voLocationLiteColl.get(i), voLocationLiteColl.get(i).getName().toString());
				//WDEV-4585
				
				if (engine.getCurrentLocation() != null)
				{
					// WDEV-2847
					currentLocName = engine.getCurrentLocation().getName();
					if (currentLocName.equals(voLocationLiteColl.get(i).getName()))
					{
						form.cmbLocation().setValue(voLocationLiteColl.get(i));
						form.qmbClinic().setEnabled(true);
					}
				}
			}
		}
	}

	protected void onGrdOutPatientSelectionChanged() throws PresentationLogicException
	{
		if (ConfigFlag.UI.OUTPAT_CREATE_CORRESPONDENCE_DETAILS.getValue())
		{
			selectionChanged();
		}
	}

	private void selectionChanged() {
		setContextVariablesForSelection();
		updateControlsState();
		if (form.isReadOnly())
			engine.showMessage("Read only form");
		
	}

	private void updateControlsState() {
		setContextMenusState();
		
	}

	private void setContextMenusState() {
		
		form.getContextMenus().hideAllADTMenuMenuItems();
		
		if (form.getGlobalContext().Core.getPasEvent() == null)
		{			
			setContextMenusForReadOnlyAccess();			
			return;
		}
		
		if(form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull()){
			form.getContextMenus().getADTMenuAddItem().setVisible(false);
			form.getContextMenus().getADTMenuEditItem().setVisible(true);
			form.getContextMenus().getADTMenuViewItem().setVisible(true);
			form.getContextMenus().getADTMenuViewDocumentStatusHistoryItem().setVisible(true);
			
			enableBatchUpdateMenuItems();
		}
		else{
			form.getContextMenus().getADTMenuAddItem().setVisible(true);
			form.getContextMenus().getADTMenuEditItem().setVisible(false);
			form.getContextMenus().getADTMenuViewItem().setVisible(false);
		}
		
	}

	private void setContextMenusForReadOnlyAccess() 
	{
		form.getContextMenus().getADTMenuViewItem().setVisible(true);
		form.getContextMenus().getADTMenuViewItem().setEnabled(true);		
	}

	private void enableBatchUpdateMenuItems() {
		
		boolean enableDictatedItem = false;
		boolean enableNoLetterRequiredItem = false;
		boolean enableSignedItem = false;
		OutPatientAttendanceVo voOutPatientListVo = null;
		PasEventVo voPasEvent = null;
		
		for(int i=0; i< form.grdOutPatient().getRows().size(); i++){
			voOutPatientListVo = form.grdOutPatient().getRows().get(i).getValue();
			voPasEvent = voOutPatientListVo.getPasEvent();
			if(voPasEvent.getCspDocumentStatusIsNotNull())
				if(voPasEvent.getCspDocumentStatus().equals(DocumentStatus.LETTERREQUIRED)){
					enableNoLetterRequiredItem = true;
					enableDictatedItem = true;
				}
				else if(voPasEvent.getCspDocumentStatus().equals(DocumentStatus.NOLETTERREQUIRED))
					enableDictatedItem = true;
				else if(voPasEvent.getCspDocumentStatus().equals(DocumentStatus.PRINTEDNOSIGNATURE))
					enableSignedItem = true;
		}
		
		form.getContextMenus().getADTMenuBatchupdateofstatustoDictatedItem().setVisible(enableDictatedItem);
		form.getContextMenus().getADTMenuBatchupdateofstatustoNoLetterRequiredItem().setVisible(enableNoLetterRequiredItem);
		form.getContextMenus().getADTMenuBatchupdateofstatustoSignedItem().setVisible(enableSignedItem);
	}

	private void setContextVariablesForSelection() {
		clearContextVariables();
		OutPatientAttendanceVo voOutPatientAttendance = null;
		PasEventVo voPasEvent = null;
		
		if (form.grdOutPatient().getSelectedRowIndex() >= 0 && form.grdOutPatient().getRows().get(form.grdOutPatient().getSelectedRowIndex()).getValue() != null) 					
		{
			voOutPatientAttendance = form.grdOutPatient().getSelectedRow().getValue();
			voPasEvent = voOutPatientAttendance.getPasEvent();
												
			form.getGlobalContext().Core.setPatientShort(voPasEvent.getPatient());
		
			form.getGlobalContext().Core.setPasEvent(voPasEvent);						
			form.getLocalContext().setSelectedCorrespondenceInstance(domain.getCorrespondenceDetailsByPasEvent(voPasEvent));
			form.getGlobalContext().Correspondence.setCorrespondenceDetails(form.getLocalContext().getSelectedCorrespondenceInstance());
		}
		
	}

	private void clearContextVariables() {
		form.getLocalContext().setSelectedCorrespondenceInstance(null);

		form.getGlobalContext().Correspondence.setCorrespondenceDetails(null);
		//form.getGlobalContext().Correspondence.setDocDetailIdReportSeed(null);
		form.getGlobalContext().Correspondence.setGenerateFormMode(null);
		form.getGlobalContext().Core.setPasEvent(null);
		form.getGlobalContext().Core.setPatientShort(null);		
	}

	protected void onCmbLocationValueChanged() throws PresentationLogicException
	{
		if (form.cmbLocation().getValue() != null)
			form.qmbClinic().setEnabled(true);
		else
			form.qmbClinic().setEnabled(false);

	}

	private void clearClinicCombo()
	{
		form.qmbClinic().clear();

	}

	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		clearConsultantCombo();
		if (value != null)
		{
			MedicLiteVoCollection voMedicColl = domain.listActiveMedics(value);
			if (voMedicColl != null)
			{
				for (int i = 0; i < voMedicColl.size(); i++)
				{
					MedicLiteVo med = voMedicColl.get(i);
					form.qmbConsultant().newRow(med, med.toString());
				}
			}
			if (voMedicColl != null && voMedicColl.size() == 1)
				form.qmbConsultant().setValue(voMedicColl.get(0));
			else if (voMedicColl != null && voMedicColl.size() > 1)
				form.qmbConsultant().showOpened();
		}
	}

	// WDEV-2847
	private void populateQmbConsultants()
	{
		MedicLiteVo voMedic = new MedicLiteVo();
		MemberOfStaffLiteVo mosLiteVo = (MemberOfStaffLiteVo) domain.getMosUser();
		if (mosLiteVo != null)
		{
			voMedic.setMos(mosLiteVo);
			form.qmbConsultant().newRow(voMedic, voMedic.getName().toString());
			form.qmbConsultant().setValue(voMedic);
		}
	}

	protected void onQmbClinicTextSubmited(String value) throws PresentationLogicException
	{
		if (form.cmbLocation().getValue() == null)
		{
			engine.showMessage("Please select a Location");
			form.cmbLocation().setFocus();
			return;
		}
		loadClinicsbyLocation(form.cmbLocation().getValue(), value);

	}

	private void loadClinicsbyLocation(LocationLiteVo voLocLite, String strClinicName)
	{
		clearClinicCombo();

		if (voLocLite != null)
		{
			ClinicLiteVoCollection voClinicLiteColl = domain.listClinicsforLocation(voLocLite, strClinicName);

			if (voClinicLiteColl != null)
			{
				for (int i = 0; i < voClinicLiteColl.size(); i++)
				{
					form.qmbClinic().newRow(voClinicLiteColl.get(i), voClinicLiteColl.get(i).getClinicName());
				}
				if (voClinicLiteColl.size() == 1)
					form.qmbClinic().setValue(voClinicLiteColl.get(0));
				else if (voClinicLiteColl.size() > 1)
					form.qmbClinic().showOpened();
			}
		}

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{	
			case GenForm.ContextMenus.ADTMenu.Add:
				addDocumentDetails();
				break;
			case GenForm.ContextMenus.ADTMenu.View:
				viewDocumentDetails();
				break;
			case GenForm.ContextMenus.ADTMenu.Edit:
				addDocumentDetails();
				break;
			case GenForm.ContextMenus.ADTMenu.ViewDocumentStatusHistory:
				if(form.getLocalContext().getSelectedCorrespondenceInstanceIsNotNull())
					form.getGlobalContext().Correspondence.setcurrentCspStatusHistory(form.getLocalContext().getSelectedCorrespondenceInstance().getCspStatusHistory());
				engine.open(form.getForms().Correspondence.DocumentStatusDlg);
				break;
			case GenForm.ContextMenus.ADTMenu.BatchupdateofstatustoDictated:
				batchUpdateOfStatusToDictated();
				break;
			case GenForm.ContextMenus.ADTMenu.BatchupdateofstatustoNoLetterRequired:
				batchUpdateOfStatusToNoLetterRequired();
				break;
			case GenForm.ContextMenus.ADTMenu.BatchupdateofstatustoSigned:
				batchUpdateOfStatusToSigned();
				break;
		}	
	}

	private void viewDocumentDetails() {
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.VIEW);	
		engine.open(form.getForms().Correspondence.CorrespondenceDetail);
	}

	private void addDocumentDetails() {
		form.getGlobalContext().Correspondence.setGenerateFormMode(FormMode.EDIT);	
		engine.open(form.getForms().Correspondence.CorrespondenceDetail);
	}

	private void batchUpdateOfStatusToDictated() {
		OutPatientListSearchCriteriaVo voOutPatientSearchCriteria = populateSearchCriteria();
		form.getGlobalContext().Core.setOutPatientSearchCriteria(voOutPatientSearchCriteria);
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
		form.getGlobalContext().Correspondence.setPatientListsBatchUpdateType(DocumentStatus.DICTATED);
		engine.setCaption(form.getForms().Correspondence.BatchUpdatePatientLists, "Batch Update Of Status To 'Dictated'");
		engine.open(form.getForms().Correspondence.BatchUpdatePatientLists);		
	}
	private void batchUpdateOfStatusToNoLetterRequired() {
		OutPatientListSearchCriteriaVo voOutPatientSearchCriteria = populateSearchCriteria();
		voOutPatientSearchCriteria.setDocumentStatus(DocumentStatus.LETTERREQUIRED);
		form.getGlobalContext().Correspondence.setPatientListsBatchUpdateType(DocumentStatus.NOLETTERREQUIRED);
		engine.setCaption(form.getForms().Correspondence.BatchUpdatePatientLists, "Batch Update Of Status To 'No Letter Required'");
		form.getGlobalContext().Core.setOutPatientSearchCriteria(voOutPatientSearchCriteria);
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
		engine.open(form.getForms().Correspondence.BatchUpdatePatientLists);		
	}
	private void batchUpdateOfStatusToSigned() {
		OutPatientListSearchCriteriaVo voOutPatientSearchCriteria = populateSearchCriteria();
		voOutPatientSearchCriteria.setDocumentStatus(DocumentStatus.PRINTEDNOSIGNATURE);
		form.getGlobalContext().Correspondence.setPatientListsBatchUpdateType(DocumentStatus.SIGNED);
		engine.setCaption(form.getForms().Correspondence.BatchUpdatePatientLists, "Batch Update Of Status To 'Signed'");
		form.getGlobalContext().Core.setOutPatientSearchCriteria(voOutPatientSearchCriteria);
		form.getGlobalContext().Correspondence.setPatientListSearchCriteria(null);
		engine.open(form.getForms().Correspondence.BatchUpdatePatientLists);		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException {
		if (result.equals(DialogResult.OK) || result.equals(DialogResult.YES))
			search();		
	}

	@Override
	protected void onQmbDictatedByTextSubmited(String value) throws PresentationLogicException {
		form.qmbDictatedBy().clear();
		
		if (value != null)
		{
			MemberOfStaffShortVo  mos = null;
			MemberOfStaffShortVo filter = new MemberOfStaffShortVo();
			PersonName personName = new PersonName();
			personName.setSurname(value);
			filter.setName(personName);
			filter.setIsActive(Boolean.TRUE);
			MemberOfStaffShortVoCollection voMemberOfStaffShortColl = domain.listMembersOfStaff(filter);
			if (voMemberOfStaffShortColl != null)
			{
				for (int i = 0; i < voMemberOfStaffShortColl.size(); i++)
				{
					mos = voMemberOfStaffShortColl.get(i);
					form.qmbDictatedBy().newRow(mos, mos.toString());			
				}
			}
			if (voMemberOfStaffShortColl != null &&
					voMemberOfStaffShortColl.size() == 1)
							form.qmbDictatedBy().setValue(voMemberOfStaffShortColl.get(0));
			else if (voMemberOfStaffShortColl != null &&
					voMemberOfStaffShortColl.size() > 1)
							form.qmbDictatedBy().showOpened();
			
			Integer id = engine.getLoggedInUser().getMosId();
			if (mos != null && id != null &&id.equals(mos.getID_MemberOfStaff()))
				form.qmbDictatedBy().setValue(mos);
		}
	}
}
