//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.correspondence.forms.documentcategoryconfig;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode, ims.framework.interfaces.IClearInfo
{
	abstract protected void bindcmbDocCatLookup();
	abstract protected void defaultcmbDocCatLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchTClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDocCatValueSet(Object value);
	abstract protected void onBtnSaveTClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelTClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditTClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdReportsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDocCatSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddAllClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveAllClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchDCClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDyngrdAvailableRepCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdMappsCellValueChanged(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdMappsRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveDCClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelDCClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnEditDCClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.lyrMain().tabByTemplate().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabByTemplateActivated();
			}
		});
		this.form.lyrMain().tabByCategory().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrMaintabByCategoryActivated();
			}
		});
		this.form.lyrMain().tabByTemplate().imbSearchT().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchTClick();
			}
		});
		this.form.lyrMain().tabByTemplate().cmbDocCat().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDocCatValueSet(value);
			}
		});
		this.form.lyrMain().tabByTemplate().btnSaveT().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveTClick();
			}
		});
		this.form.lyrMain().tabByTemplate().btnCancelT().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelTClick();
			}
		});
		this.form.lyrMain().tabByTemplate().btnEditT().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditTClick();
			}
		});
		this.form.lyrMain().tabByTemplate().dyngrdReports().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdReportsRowSelectionChanged(row);
			}
		});
		this.form.lyrMain().tabByCategory().grdDocCat().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDocCatSelectionChanged();
			}
		});
		this.form.lyrMain().tabByCategory().imbAddAll().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddAllClick();
			}
		});
		this.form.lyrMain().tabByCategory().imbAdd().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddClick();
			}
		});
		this.form.lyrMain().tabByCategory().imbRemoveAll().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveAllClick();
			}
		});
		this.form.lyrMain().tabByCategory().imbRemove().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveClick();
			}
		});
		this.form.lyrMain().tabByCategory().imbSearchDC().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchDCClick();
			}
		});
		this.form.lyrMain().tabByCategory().dyngrdAvailableRep().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdAvailableRepCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabByCategory().dyngrdMapps().setDynamicGridCellValueChangedEvent(new DynamicGridCellValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdMappsCellValueChanged(cell);
			}
		});
		this.form.lyrMain().tabByCategory().dyngrdMapps().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdMappsRowSelectionChanged(row);
			}
		});
		this.form.lyrMain().tabByCategory().btnSaveDC().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveDCClick();
			}
		});
		this.form.lyrMain().tabByCategory().btnCancelDC().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelDCClick();
			}
		});
		this.form.lyrMain().tabByCategory().btnEditDC().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnEditDCClick();
			}
		});
		this.form.getContextMenus().Correspondence.getDocumentCategorySpecialtyADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CorrespondenceNamespace.DocumentCategorySpecialty.ADD, sender);
			}
		});
		this.form.getContextMenus().Correspondence.getDocumentCategorySpecialtyREMOVEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CorrespondenceNamespace.DocumentCategorySpecialty.REMOVE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbDocCatLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbDocCatLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbDocCatLookupValue();
	}
	private void onlyrMaintabByTemplateActivated()
	{
		this.form.lyrMain().showtabByTemplate();
	}
	private void onlyrMaintabByCategoryActivated()
	{
		this.form.lyrMain().showtabByCategory();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	public abstract void clearContextInformation();
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
