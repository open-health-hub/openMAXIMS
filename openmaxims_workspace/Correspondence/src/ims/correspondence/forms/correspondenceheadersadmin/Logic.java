//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.35 build 2103.16649)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.correspondenceheadersadmin;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.correspondence.vo.TemplateCategoryVo;
import ims.correspondence.vo.lookups.Header;
import ims.correspondence.vo.lookups.HeaderCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	/**
	 *
	 * @see ims.correspondence.forms.correspondenceheadersadmin.Handlers#onFormOpen()
	 */
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	/**
	 * 
	 * @see ims.base.interfaces.IUILogicCode#initialize()
	 */
	public void initialize() 
	{
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setSelTemplateCategoryVo(null);		
	}

	/**
	 * 
	 * @see ims.correspondence.forms.correspondenceheadersadmin.Handlers#onFormModeChanged()
	 */
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
		
	/**
	 * Cancel button action
	 * 
	 */	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();	
	}
	

	/**
	 * 
	 * @see ims.base.interfaces.IUILogicCode#open()
	 */
	public void open() throws PresentationLogicException
	{		
		
		populateTemplateGrid(domain.listTemplates(null));
		populateCategoriesGrid();
		
		//set selection back
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdTemplatesRow row = form.grdTemplates().getRowByValue(form.getLocalContext().getSelectedRecord());			
			if (row != null && row.getValue() != null)
			{			
				form.getLocalContext().setSelTemplateCategoryVo(domain.getTemplateCategories(form.getLocalContext().getSelectedRecord()));
				form.getLocalContext().setSelectedRecord(row.getValue());
				form.grdTemplates().setValue(form.getLocalContext().getSelectedRecord());
				populateInstanceControl(form.grdTemplates().getValue());
			}
			else
				clearInstanceControls();					
		}
				
		updateControlsState();
		
		form.setMode(FormMode.VIEW);
	}
	
	/**
	 * list available headers to be associated
	 * 
	 */	
	private void populateCategoriesGrid() 
	{
		form.grdHeaders().getRows().clear();
		form.grdHeaders().setValue(null);

		HeaderCollection categoryLookupColl = ims.correspondence.vo.lookups.LookupHelper.getHeader(domain.getLookupService());
		GenForm.grdHeadersRow nRow;		
		for (int i=0; i< categoryLookupColl.size(); i++)
		{
			Header category = categoryLookupColl.get(i);
			nRow = form.grdHeaders().getRows().newRow();
			nRow.setcolHeader(category.getText());
			nRow.setcolLinked(false);
			nRow.setValue(category);
		}	
		
	}
	
	/**
	 * List available tempaltes
	 * 
	 */	
	private void populateTemplateGrid(ReportTemplateVoCollection voTemplateColl) 
	{
		form.grdTemplates().getRows().clear();
		form.grdTemplates().setValue(null);
		GenForm.grdTemplatesRow row = null;
		for(int i=0;i<voTemplateColl.size();i++)
		{
			row = form.grdTemplates().getRows().newRow();
			row.setcolTemplate(voTemplateColl.get(i).getName().toString());
			row.setValue(voTemplateColl.get(i));
		}
		
	}
	
	/**
	 * save Template-Header association
	 * 
	 */	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	
	/**
	 * Select Tempalte event
	 * 
	 */	
	protected void onGrdTemplatesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateInstanceControl(form.grdTemplates().getValue());	
		form.getLocalContext().setSelectedRecord(form.grdTemplates().getValue());
	}
		
	/**
	 * LIP: populateInstanceControl
	 * 
	 */	
	private void populateInstanceControl(ReportTemplateVo voTemplate) 
	{
		clearInstanceControls();
		updateControlsState();
		
		TemplateCategoryVo voTemplCategory = domain.getTemplateCategories(voTemplate);
		form.getLocalContext().setSelTemplateCategoryVo(voTemplCategory);
		if (voTemplCategory != null && voTemplCategory.getDischargeCategoriesIsNotNull())
		{
			GenForm.grdHeadersRow nRow;
			for (int i=0; i<voTemplCategory.getDischargeCategories().size(); i++)
			{
				nRow = form.grdHeaders().getRowByValue(voTemplCategory.getDischargeCategories().get(i));
				if (nRow != null)
					nRow.setcolLinked(true);
				else
				{
					nRow = form.grdHeaders().getRows().newRow();
					nRow.setValue(voTemplCategory.getDischargeCategories().get(i));
					nRow.setcolHeader(voTemplCategory.getDischargeCategories().get(i).getText());
					nRow.setcolLinked(true);
				}
			}
		}
		
	}
	
	/**
	 * 
	 * see ims.correspondence.forms.correspondenceheadersadmin.Handlers#onContextMenuItemClick(int, ims.framework.Control)
	 */	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
				
		case GenForm.ContextMenus.GenericGrid.Update:
			if (form.grdTemplates().getSelectedRowIndex() >= 0 )
			{
				updateInstance();		
			}
			break;
		}	
	}

	/**
	 * 
	 * @see ims.correspondence.forms.correspondenceheadersadmin.Handlers#onBtnEditClick()
	 */
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		if (allowUpdate())
			form.setMode(FormMode.EDIT);		
	}

	public void clearInstanceControls() 
	{
		for(int i=0;i<form.grdHeaders().getRows().size();i++)
		{
			form.grdHeaders().getRows().get(i).setcolLinked(false);
		}		
	}

	/**
	 * 
	 * @see ims.base.interfaces.IUILIPLogicCode#newInstance()
	 */
	public void newInstance() throws PresentationLogicException 
	{
		// nothing to do here		
	}

	/**
	 * 
	 * @see ims.base.interfaces.IUILIPLogicCode#save()
	 */
	public boolean save() throws PresentationLogicException 
	{
		TemplateCategoryVo voTemplCategory = form.getLocalContext().getSelTemplateCategoryVo();
		if (voTemplCategory == null)
			voTemplCategory = new TemplateCategoryVo();
	
		voTemplCategory.setTemplate(form.grdTemplates().getValue());

		GenForm.grdHeadersRow nRow;
		HeaderCollection headerColl = new HeaderCollection();
				
		for (int i=0; i<form.grdHeaders().getRows().size(); i++)
		{
			nRow = form.grdHeaders().getRows().get(i);
			if (nRow.getcolLinked())		
				headerColl.add(nRow.getValue());
		}
		
		if (headerColl.size()>0)
			voTemplCategory.setDischargeCategories(headerColl);
		else
			voTemplCategory.setDischargeCategories(null);
		
		String arrErrors[] = voTemplCategory.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);			
			return false;
		}
		 
		try {
			domain.saveTemplateCategories(voTemplCategory);
		} catch (StaleObjectException e) {
			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
			
		}
		catch (ForeignKeyViolationException e) 
		{			
			engine.showMessage(e.getMessage());
			open();
			return false;
		}		
		catch (UniqueKeyViolationException e) 
		{			
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		return true;
		
	}

	/**
	 * 
	 * @see ims.base.interfaces.IUILIPLogicCode#updateControlsState()
	 */
	public void updateControlsState() 
	{
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdTemplates().getSelectedRowIndex() >= 0);
		if (form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(form.grdTemplates().getSelectedRowIndex() >= 0);
	}

	/**
	 * 
	 * @see ims.base.interfaces.IUILIPLogicCode#updateInstance()
	 */
	public void updateInstance() 
	{
		form.setMode(FormMode.EDIT);		
	}
}
