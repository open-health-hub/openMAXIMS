//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.62 build 3019.30328)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.forms.userprofileconfiguration;

import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortWithNameVo;
import ims.admin.vo.AppUserShortWithNameVoCollection;
import ims.core.vo.ClinicLiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.Specialty;
import ims.correspondence.forms.userprofileconfiguration.GenForm.grdUserListRow;
import ims.correspondence.vo.ClinicAccessVo;
import ims.correspondence.vo.ClinicAccessVoCollection;
import ims.correspondence.vo.ConsultantAccessVo;
import ims.correspondence.vo.ConsultantAccessVoCollection;
import ims.correspondence.vo.SpecialtyAccessVo;
import ims.correspondence.vo.SpecialtyAccessVoCollection;
import ims.correspondence.vo.UserAccessVo;
import ims.correspondence.vo.lookups.Access;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// Class constants
	private static final int MAXDROPDOWNITEMS = 10;
	

	// Dynamic grid Details columns
	private static final int COL_IMAGE = 1;
	private static final int COL_ACCESS_CATEGORY = 2;
	private static final int COL_ACCESSRIGHTS = 3;
	

	// Nested enumeration - Modify here to add a new correspondence type
	private enum AccessCategory
	{ 
		CLINICS (0, "Clinics", "Clinic"), CONSULTANTS (1, "Consultants", "Consultant"), SPECIALTY (2, "Specialties", "Specialty");
		
		private int index;
		private String value;
		private String singular;
		
		AccessCategory(int index, String value, String singular)
		{
			this.index = index;
			this.value = value;
			this.singular = singular;
		}
		
		public int getIndex()
		{
			return index;
		}
		
		public String getStringName()
		{
			return this.value;
		}
		
		public String getStringSingularName()
		{
			return this.singular;
		}
	}


	/////////////////////////////////////////////////////
	/// Events region
	/////////////////////////////////////////////////////
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}


	@Override
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		listUsersBySurname(form.txtUserSearch().getValue());
		
		form.txtUserSearch().setValue(null);
		form.txtUserSearch().setFocus();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	
	@Override
	protected void onGrdUserListSelectionChanged() throws PresentationLogicException
	{
		setDetails(form.grdUserList().getValue());
		updateControlsState();
	}
	
	@Override
	protected void onGrdUserListSelectionCleared() throws PresentationLogicException
	{
		clearDetails();
		updateControlsState();
	}

	
	@Override
	protected void onDyngrdDetailsRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenuState();
	}
	
	@Override
	protected void onDyngrdDetailsRowSelectionCleared() throws PresentationLogicException
	{
		updateContextMenuState();
	}
	
	@Override
	protected void onDyngrdDetailsCellTextSubmited(DynamicGridCell cell)
	{
		if (!(cell.getRow().getParent().getValue() instanceof AccessCategory))
			return;
		
		if (cell.getTypedText() == null || cell.getTypedText().trim().length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters to search upon.");
			return;
		}


		try
		{
			switch((AccessCategory) cell.getRow().getParent().getValue())
			{
				case CLINICS:
						populateQueryComboboxClinics(cell, listClinicsByName(cell.getTypedText()));
					break;
					
				case CONSULTANTS:
						populateQueryComboboxConsultants(cell, listConsultantsByName(cell.getTypedText()));
					break;
					
				case SPECIALTY:
						populateQueryComboboxSpecialties(cell, listSpecialtyByName(cell.getTypedText()));
					break;
			}
		}
		catch (CodingRuntimeException e)
		{	engine.showMessage(e.getMessage());	}
		
		form.dyngrdDetails().setSelectedRow(null);
		updateControlsState();
	}
	
	@Override
	protected void onDyngrdDetailsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getType() != DynamicCellType.QUERYCOMBOBOX)
			return;

		if (!(cell.getRow().getParent().getValue() instanceof AccessCategory))
			return;
		
		switch ((AccessCategory) cell.getRow().getParent().getValue())
		{
			case CLINICS:
				updateClinicAccessRowValue(cell.getRow());
				break;
				
			case CONSULTANTS:
				updateConsultantAccessRowValue(cell.getRow());
				break;
				
			case SPECIALTY:
				updateSpecialtyAccessRowValue(cell.getRow());
				break;
		}
		
		form.dyngrdDetails().setSelectedRow(null);
		updateControlsState();
	}

	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.CorrespondenceAdd:
			{
				switch ((AccessCategory) form.dyngrdDetails().getValue())
				{
					case CLINICS:
						newClinicCorrespondence(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
						
					case CONSULTANTS:
						newConsultantCorrespondece(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
						
					case SPECIALTY:
						newSpecialtyCorrespondece(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
				}
				
				break;
			}
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.CorrespondenceEdit:
			{
				switch ((AccessCategory) form.dyngrdDetails().getSelectedRow().getParent().getValue())
				{
					case CLINICS:
						editClinicCorrespondence(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
						
					case CONSULTANTS:
						editConsultantCorrespondence(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
						
					case SPECIALTY:
						editSpecialtyCorrespondence(form.dyngrdDetails().getSelectedRow());
						updateControlsState();
						break;
				}
				
				break;
			}
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.CorrespondenceRemove:
				removeCorrespondence(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.CorrespondenceRemoveAll:
				removeAllCorrespondences(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsGrantFull:
				grantCorrespondenceFullRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsGrantReadOnly:
				grantCorrespondenceReadOnlyRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsRemoveAll:
				grantCorrespondenceNoRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsToAllGrantFull:
				grantAllCorrespondencesFullRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsToAllGrantReadOnly:
				grantAllCorrespondencesReadOnlyRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
				
			case GenForm.ContextMenus.CorrespondenceNamespace.UserProfileConfiguration.RightsToAllRemoveAll:
				grantAllCorrespondencesNoRights(form.dyngrdDetails().getSelectedRow());
				updateControlsState();
				break;
		}
	}


	////////////////////////////////////////////////////////////
	// Form UI control functions
	////////////////////////////////////////////////////////////
	@Override
	public void initialize() throws FormOpenException
	{
		super.initialize();
		
		// Set up the dynamic grid
		DynamicGridColumn column;
		
		// First column (Image)
		column = form.dyngrdDetails().getColumns().newColumn("", COL_IMAGE);
		column.setCanGrow(false);
		column.setWidth(60);
		column.setAlignment(Alignment.RIGHT);

		// Second column (AccessCategory)
		column = form.dyngrdDetails().getColumns().newColumn("Access Category", COL_ACCESS_CATEGORY);
		column.setCanGrow(true);
		column.setWidth(240);

		// Third column (Access Rights)
		column = form.dyngrdDetails().getColumns().newColumn("Access Rights", COL_ACCESSRIGHTS);
		column.setCanGrow(false);
		column.setWidth(80);
		column.setAlignment(Alignment.CENTER);
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// If there is a selection - list details
		if (form.grdUserList().getValue() != null)
		{
			setDetails(form.grdUserList().getValue());
		}
		else
		{
			clearInstanceControls();
		}

		form.txtUserSearch().setFocus();
		form.setMode(FormMode.VIEW);
	}
	
	public void clearInstanceControls()
	{
		super.clear();
	}
	
	public void updateControlsState()
	{
		// Update the state of the controls on the form (EDIT button)
		if (form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.grdUserList().getValue() != null);
		}
		
		// Update the state of the context menu
		updateContextMenuState();
	}
	
	public void updateContextMenuState()
	{
		// Hide context menu in VIEW mode
		if (form.getMode() == FormMode.VIEW)
		{
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceAddItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceEditItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveAllItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsGrantFullItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsGrantReadOnlyItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsRemoveAllItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllGrantFullItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllGrantReadOnlyItem().setVisible(false);
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllRemoveAllItem().setVisible(false);
		}
		
		// Update context menu state in EDIT mode
		if (form.getMode() == FormMode.EDIT)
		{
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceAddItem().setVisible(
					form.dyngrdDetails().getValue() instanceof AccessCategory);

			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceEditItem().setVisible(
						form.dyngrdDetails().getSelectedRow() != null
					&&	!(form.dyngrdDetails().getValue() instanceof AccessCategory)
					&&	form.dyngrdDetails().getSelectedRow().getCells().get(form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY)).getType() != DynamicCellType.QUERYCOMBOBOX);

			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveAllItem().setVisible(
						form.dyngrdDetails().getValue() instanceof AccessCategory
					&&	form.dyngrdDetails().getSelectedRow().getRows().size() != 0);
 
			form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveItem().setVisible(
						form.dyngrdDetails().getSelectedRow() != null
					&&	!(form.dyngrdDetails().getValue() instanceof AccessCategory));

			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsGrantFullItem().setVisible(
						form.dyngrdDetails().getSelectedRow() != null
					&&	!(form.dyngrdDetails().getValue() instanceof AccessCategory));

			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsGrantReadOnlyItem().setVisible(
						form.dyngrdDetails().getSelectedRow() != null
					&&	!(form.dyngrdDetails().getValue() instanceof AccessCategory));
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsRemoveAllItem().setVisible(
						form.dyngrdDetails().getSelectedRow() != null
					&&	!(form.dyngrdDetails().getValue() instanceof AccessCategory));
			
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllGrantFullItem().setVisible(
						form.dyngrdDetails().getValue() instanceof AccessCategory
					&&	form.dyngrdDetails().getSelectedRow().getRows().size() != 0);
			
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllGrantReadOnlyItem().setVisible(
						form.dyngrdDetails().getValue() instanceof AccessCategory
					&&	form.dyngrdDetails().getSelectedRow().getRows().size() != 0);
			
			form.getContextMenus().Correspondence.getUserProfileConfigurationRightsToAllRemoveAllItem().setVisible(
						form.dyngrdDetails().getValue() instanceof AccessCategory
					&&	form.dyngrdDetails().getSelectedRow().getRows().size() != 0);


			// Set up the text for context menu
			DynamicGridRow row = form.dyngrdDetails().getSelectedRow();
			
			if (row != null && row.getValue() instanceof AccessCategory)
			{
				String category = ((AccessCategory) row.getValue()).getStringName();
				String element = ((AccessCategory) row.getValue()).getStringSingularName();
				
				form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceAddItem().setText("Add " + element);
				form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveAllItem().setText("Remove All " + category);
			}
			else if (row != null && row.getParent() != null && row.getParent().getValue() instanceof AccessCategory)
			{
				String element = ((AccessCategory) row.getParent().getValue()).getStringSingularName();
				
				form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceEditItem().setText("Edit " + element);
				form.getContextMenus().Correspondence.getUserProfileConfigurationCorrespondenceRemoveItem().setText("Remove " + element);
			}
		}
	}


	
	////////////////////////////////////////////////////////////
	// Form action functions
	////////////////////////////////////////////////////////////
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
	}
	
	public void updateInstance()
	{
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdUserList().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Can not save on null user");
		
		
		UserAccessVo userAccess = form.getLocalContext().getcurrentUserAccess();
		if (userAccess == null)
		{
			// Check for data to save
			if (isEmptyRecord())
				return true;
				
			userAccess = new UserAccessVo();
		}
		
		userAccess.setAppUser(form.grdUserList().getValue());
		userAccess.setClinicAccess(new ClinicAccessVoCollection());
		userAccess.setConsultantAccess(new ConsultantAccessVoCollection());
		userAccess.setSpecialtyAccess(new SpecialtyAccessVoCollection());

		getDetails(userAccess, form.dyngrdDetails().getRows());
		
		String[] errors =  userAccess.validate();
		
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveUserAccess(userAccess);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		
		return true;
	}
	
	
	private boolean isEmptyRecord()
	{
		for (int i = 0; i < form.dyngrdDetails().getRows().size(); i++)
		{
			if (form.dyngrdDetails().getRows().get(i).getRows().size() != 0)
				return false;
		}
		
		return true;
	}


	///////////////////////////////////////////////
	//	User grid methods
	///////////////////////////////////////////////
	private void listUsersBySurname(String surname)
	{
		try
		{
			setUserGrid(searchUsersBySurname(surname));
			clearDetails();
		}
		catch (CodingRuntimeException exception)
		{
			engine.showMessage(exception.getMessage());
		}
	}
	
	private void clearUsers()
	{
		form.grdUserList().getRows().clear();
	}
	
	private void setUserGrid(AppUserShortWithNameVoCollection searchResults)
	{
		clearUsers();
		
		if (searchResults == null)
			return;
		
		for (int i = 0; i < searchResults.size(); i++)
		{
			if (searchResults.get(i) != null)
			{
				setUserGridRow(form.grdUserList().getRows().newRow(), searchResults.get(i));
			}
		}
	}
	
	private void setUserGridRow(grdUserListRow row, AppUserShortWithNameVo user)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not set a null row to a value");
		
		if (user == null)
			throw new CodingRuntimeException("Logical Error - Can not set a null value to a row");
		
		if (user.getMosName() == null)
			throw new CodingRuntimeException("Logical Error - User has no name");
		
		row.setValue(user);
		row.setcolPersonName(user.getMosName().toString());
		row.setTooltipForcolPersonName(user.getMosName().toString());
		
		row.setcolUsername(user.getUsername());
		row.setTooltipForcolUsername(user.getUsername());
	}
	
	
	///////////////////////////////////////////////
	//	Details controls methods
	///////////////////////////////////////////////
	private void setDetails(AppUserShortWithNameVo user)
	{
		clearDetails();
		
		// Show the correspondences (get from domain)
		try
		{
			setLabels(user);

			UserAccessVo userAccess = domain.getUserAccess(user);
			
			populateCorrespondences(userAccess);
			form.getLocalContext().setcurrentUserAccess(userAccess);
		}
		catch (CodingRuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
	}

	private void getDetails(UserAccessVo userAccess, DynamicGridRowCollection rows)
	{
		if (userAccess == null)
			throw new CodingRuntimeException("Logical Error - Can not set a null user access");

		if (rows == null)
			return;
		
		DynamicGridRow row;
		
		for (int i = 0; i < rows.size(); i++)
		{
			row = rows.get(i);
			if (!(row.getValue() instanceof AccessCategory))
				throw new CodingRuntimeException("Logical Error - Non AccessCategory Category added as category");

			switch ((AccessCategory)row.getValue())
			{
				case CLINICS:
					addClinicsToUserAccess(userAccess.getClinicAccess(), row.getRows());
					break;
					
				case CONSULTANTS:
					addConsultantsToUserAccess(userAccess.getConsultantAccess(), row.getRows());
					break;
					
				case SPECIALTY:
					addSpecialtyToUserAccess(userAccess.getSpecialtyAccess(), row.getRows());
					break;
			}
		}
	}
	
	private void clearDetails()
	{
		// Clear the labels
		form.lblName().setValue("Name: -");
		form.lblUsername().setValue("Username: -");

		// Clear the correspondence grid
		form.dyngrdDetails().getRows().clear();

		// Clear the local context
		form.getLocalContext().setcurrentUserAccess(null);
	}
	
	private void setLabels(AppUserShortWithNameVo user)
	{
		if (user == null)
		{
			// Clear the labels
			form.lblName().setValue("Name: -");
			form.lblUsername().setValue("Username: -");
			return;
		}
		
		if (user.getMosName() == null)
			throw new CodingRuntimeException("Logical Error - User has no name");
		
		// Show the user name and username on labels
		form.lblName().setValue("Name: \t\t" + user.getMosName().toString());
		form.lblUsername().setValue("Username: \t" + user.getUsername());
	}

	
	///////////////////////////////////////////////
	// Correspondence grid methods
	///////////////////////////////////////////////
	private void populateCorrespondences(UserAccessVo userAccess)
	{
		form.dyngrdDetails().getRows().clear();

		
		// Iterate through all the correspondences and add them to the grid
		for (AccessCategory correspondence : AccessCategory.values())
		{
			// Create a new row
			DynamicGridRow newRow = newCategoryCorrespondenceGridRow(correspondence);
			
			// Populate the categories
			if (userAccess == null)
				continue;
			
			newRow.setExpanded(true);
			
			switch(correspondence)
			{
				case CLINICS:
					populateClinicalAccess(newRow, userAccess.getClinicAccess());
					break;
					
				case CONSULTANTS:
					populateConsultantAccess(newRow, userAccess.getConsultantAccess());
					break;
					
				case SPECIALTY:
					populateSpecilatyAccess(newRow, userAccess.getSpecialtyAccess());
					break;
			}
		}
	}

	
	private DynamicGridRow newCategoryCorrespondenceGridRow(AccessCategory correspondence)
	{
		if (correspondence == null)
			throw new CodingRuntimeException("Major Logical Error - Can not create a correspondece category with null value");
		
		DynamicGridRow newRow;
		DynamicGridCell newCell;
		DynamicGridColumn column;
		
		// Create a new row in grid
		newRow = form.dyngrdDetails().getRows().newRow();
		newRow.setBackColor(Color.Beige);
		newRow.setValue(correspondence);
		
		// Create the first cell in the row (IMAGE CATEGORY)
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		switch(correspondence)
		{
			case CLINICS:
				newCell.setValue(form.getImages().Admin.Clinic2);
				break;
			
			case CONSULTANTS:
				newCell.setValue(form.getImages().Core.Users);
				break;
				
			case SPECIALTY:
				newCell.setValue(form.getImages().Admin.Specialty);
				break;
		}
		
		// Create the second cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(correspondence.getStringName());
		newCell.setReadOnly(true);
		
		// Create the third cell in the row (EMPTY - because we are creating a category)
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.EMPTY);
		newCell.setReadOnly(true);
		return newRow;
	}

	
	private void populateClinicalAccess(DynamicGridRow parentRow, ClinicAccessVoCollection clinicAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Clinical correspondences rows to null parent row");
		
		if (clinicAccess == null)
			return;
		
		for (int i = 0; i < clinicAccess.size(); i++)
		{
			newClinicCorrespondenceGridRow(parentRow, clinicAccess.get(i));
		}
	}

	private void populateConsultantAccess(DynamicGridRow parentRow, ConsultantAccessVoCollection consultantAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Consultant correspondences rows to null parent row");
		
		if (consultantAccess == null)
			return;
		
		for (int i = 0; i < consultantAccess.size(); i++)
		{
			newConsultantCorrespondenceGridRow(parentRow, consultantAccess.get(i));
		}
	}

	private void populateSpecilatyAccess(DynamicGridRow parentRow, SpecialtyAccessVoCollection specialtyAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add Specialty correspondences rows to null parent row");
		
		if (specialtyAccess == null)
			return;
		
		for (int i = 0; i < specialtyAccess.size(); i++)
		{
			newSpecialtyCorrespondenceGridRow(parentRow, specialtyAccess.get(i));
		}
	}


	private void newClinicCorrespondenceGridRow(DynamicGridRow parentRow, ClinicAccessVo clinicAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add clinical access row to a null row");
		
		if (clinicAccess == null)
			return;
			
		
		DynamicGridCell newCell;
		DynamicGridColumn column;

		// Create a new row
		DynamicGridRow newRow = parentRow.getRows().newRow();
		newRow.setValue(clinicAccess);
		
		// Create the first cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic);
		
		// Create the second cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(clinicAccess.getClinic().getClinicName());
		newCell.setReadOnly(true);
		
		// Create the third cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue(clinicAccess.getAccessRight());
	}
	
	private void newConsultantCorrespondenceGridRow(DynamicGridRow parentRow, ConsultantAccessVo consultantAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add consultant access row to a null row");
		
		if (consultantAccess == null)
			return;
		
		
		DynamicGridCell newCell;
		DynamicGridColumn column;

		// Create a new row
		DynamicGridRow newRow = parentRow.getRows().newRow();
		newRow.setValue(consultantAccess);
		
		// Create the first cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);

		// Create the second cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(consultantAccess.getConsultant().getIHcpName());
		newCell.setReadOnly(true);
		
		// Create the third cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue(consultantAccess.getAccessRight());
	}

	private void newSpecialtyCorrespondenceGridRow(DynamicGridRow parentRow, SpecialtyAccessVo specialtyAccess)
	{
		if (parentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add specialty access row to a null row");
		
		if (specialtyAccess == null)
			return;
		
		
		DynamicGridCell newCell;
		DynamicGridColumn column;

		// Create a new row
		DynamicGridRow newRow = parentRow.getRows().newRow();
		newRow.setValue(specialtyAccess);
		
		// Create the first cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty2);

		// Create the second cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.STRING);
		newCell.setValue(specialtyAccess.getSpecialty().getText());
		newCell.setReadOnly(true);
		
		// Create the third cell in the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue(specialtyAccess.getAccessRight());
	}
	

	private void newClinicCorrespondence(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a CLINIC correspondence to a null parrent row");
		
		if (!(parrentRow.getValue() instanceof AccessCategory) || (((AccessCategory) parrentRow.getValue()) != AccessCategory.CLINICS))
			throw new CodingRuntimeException("Logical Error - Function must be called from CLINICS category row only");
		
		parrentRow.setExpanded(true);

		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new ClinicAccessVo());
		form.dyngrdDetails().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		// Create the first cell of the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic);
		
		// Create the second cell of the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		// Create the third cell of the row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);		
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);		
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setAutoPostBack(true);
	}

	private void newConsultantCorrespondece(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a CONSULTANT correspondence to a null parrent row");

		if (!(parrentRow.getValue() instanceof AccessCategory) || (((AccessCategory) parrentRow.getValue()) != AccessCategory.CONSULTANTS))
			throw new CodingRuntimeException("Logical Error - Function must be called from CONSULTANTS category row only");
		
		parrentRow.setExpanded(true);
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new ConsultantAccessVo());
		form.dyngrdDetails().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		
		// Create the first cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);

		// Create the second cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		// Create the third cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setAutoPostBack(true);
	}

	private void newSpecialtyCorrespondece(DynamicGridRow parrentRow)
	{
		if (parrentRow == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a SPECIALTY correspondence to a null parrent row");

		if (!(parrentRow.getValue() instanceof AccessCategory) || (((AccessCategory) parrentRow.getValue()) != AccessCategory.SPECIALTY))
			throw new CodingRuntimeException("Logical Error - Function must be called from SPECIALTY category row only");
		
		parrentRow.setExpanded(true);
		
		// Create a new row
		DynamicGridRow newRow = parrentRow.getRows().newRow(true);
		newRow.setValue(new SpecialtyAccessVo());
		form.dyngrdDetails().resetScrollPosition();
		
		// Declare a new cell
		DynamicGridCell newCell;
		// Column identifier
		DynamicGridColumn column;
		
		
		// Create the first cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty2);

		// Create the second cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		// Create the third cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setAutoPostBack(true);
	}


	private void editClinicCorrespondence(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AccessCategory)) || ((AccessCategory) parentRow.getValue()) != AccessCategory.CLINICS)
				throw new CodingRuntimeException("Logical Error - Funtion must be called from CLINIC category rows");
		
		if (row.getValue() == null)
			row.setValue(new ClinicAccessVo());
		
		if (!(row.getValue() instanceof ClinicAccessVo))
			throw new CodingRuntimeException("Major Logical Error - Non clinical correspondences added to CLINICS category");

		
		// Insert new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((ClinicAccessVo) row.getValue());

		// Column identifier
		DynamicGridColumn column;
		// Declare a new cell
		DynamicGridCell newCell;
		
		// Create the first cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Clinic);
		
		// Create the second cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			ClinicLiteVo value = (ClinicLiteVo) row.getCells().get(column).getValue();
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			ClinicLiteVo value = ((ClinicAccessVo) row.getValue()).getClinic();
			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText(value.toString());
		}
		
		// Create the third cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue((Access) row.getCells().get(column).getValue());
		newCell.setAutoPostBack(true);
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			UserAccessVo localContextUserAccess = form.getLocalContext().getcurrentUserAccess();
			if (localContextUserAccess == null)
				return;
			
			int index = localContextUserAccess.getClinicAccess().indexOf((ClinicAccessVo) row.getValue());
			if (index != -1)
				localContextUserAccess.getClinicAccess().remove(index);
			
			// Select the new row
			form.dyngrdDetails().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}
	}

	private void editConsultantCorrespondence(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AccessCategory)) || ((AccessCategory) parentRow.getValue()) != AccessCategory.CONSULTANTS)
				throw new CodingRuntimeException("Logical Error - Funtion must be called from CONSULTANTS category rows");

		if (row.getValue() == null)
			row.setValue(new ConsultantAccessVo());
		
		if (!(row.getValue() instanceof ConsultantAccessVo))
			throw new CodingRuntimeException("Major Logical Error - Non consultant correspondences added to CONSULTANTS category");
		
		// Insert new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((ConsultantAccessVo) row.getValue());

		// Declare a new cell
		DynamicGridColumn column;
		// Column identifier
		DynamicGridCell newCell;
		
		// Create the first cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Core.User);

		// Create the second cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			MedicLiteVo value = (MedicLiteVo) row.getCells().get(column).getValue();
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			MedicLiteVo value = ((ConsultantAccessVo) row.getValue()).getConsultant();
			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText(value.toString());
		}
		
		// Create the third cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue((Access) row.getCells().get(column).getValue());
		newCell.setAutoPostBack(true);
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			UserAccessVo localContextUserAccess = form.getLocalContext().getcurrentUserAccess();
			if (localContextUserAccess == null)
				return;
			
			int index = localContextUserAccess.getConsultantAccess().indexOf((ConsultantAccessVo) row.getValue());
			if (index != -1)
				localContextUserAccess.getConsultantAccess().remove(index);
			
			// Select the new row
			form.dyngrdDetails().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}		
	}
	
	private void editSpecialtyCorrespondence(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not edit a null row");
		
		DynamicGridRow parentRow = row.getParent();
		if (parentRow == null || (!(parentRow.getValue() instanceof AccessCategory)) || ((AccessCategory) parentRow.getValue()) != AccessCategory.SPECIALTY)
			throw new CodingRuntimeException("Logical Error - Funtion must be called from SPECIALTIES category rows");
		
		if (row.getValue() == null)
			row.setValue(new SpecialtyAccessVo());
		
		if (!(row.getValue() instanceof SpecialtyAccessVo))
			throw new CodingRuntimeException("Major Logical Error - Non specialty correspondences added to SPECIALTY category");

		// Insert new row after the current row
		DynamicGridRow newRow = parentRow.getRows().newRowAfter(row);
		newRow.setValue((SpecialtyAccessVo) row.getValue());

		// Declare a new cell
		DynamicGridColumn column;
		// Column identifier
		DynamicGridCell newCell;
		
		// Create the first cell
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_IMAGE);
		newCell = newRow.getCells().newCell(column, DynamicCellType.IMAGE);
		newCell.setValue(form.getImages().Admin.Specialty2);

		// Create the second cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		newCell = newRow.getCells().newCell(column, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		
		if (row.getCells().get(column).getType() == DynamicCellType.QUERYCOMBOBOX)
		{
			Specialty value = (Specialty) row.getCells().get(column).getValue();
			if (value != null)
			{
				newCell.getItems().newItem(value);
				newCell.setValue(value);
				newCell.setTypedText((value).toString());
			}
			else
			{
				newCell.setValue(null);
				newCell.setTypedText(null);
			}
		}
		else
		{
			Specialty value = ((SpecialtyAccessVo) row.getValue()).getSpecialty();
			newCell.getItems().newItem(value);
			newCell.setValue(value);
			newCell.setTypedText(value.toString());
		}
		
		// Create the third cell of the new row
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		newCell = newRow.getCells().newCell(column, DynamicCellType.ANSWER);
		engine.populate(newCell, Access.getNegativeInstancesAsIItemCollection());
		newCell.setValue((Access) row.getCells().get(column).getValue());
		newCell.setAutoPostBack(true);
		
		
		// Remove the row from grid and user
		try
		{
			parentRow.getRows().remove(row);
			
			UserAccessVo localContextUserAccess = form.getLocalContext().getcurrentUserAccess();
			if (localContextUserAccess == null)
				return;
			
			int index = localContextUserAccess.getSpecialtyAccess().indexOf((SpecialtyAccessVo) row.getValue());
			if (index != -1)
				localContextUserAccess.getSpecialtyAccess().remove(index);
			
			// Select the new row
			form.dyngrdDetails().setSelectedRow(newRow);
		}
		catch (RuntimeException exception)
		{	engine.showMessage(exception.getMessage());	}		
	}

	
	private void removeCorrespondence(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logial Error - Function can not be called from a null row");
		
		form.dyngrdDetails().getRows().remove(row);
	}
	
	private void removeAllCorrespondences(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		while (row.getRows().size() > 0)
		{
			row.getRows().remove(row.getRows().get(0));
		}
	}

	
	private void grantCorrespondenceFullRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		DynamicGridColumn column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		row.getCells().get(column).setValue(Access.READWRITE);
	}

	private void grantCorrespondenceReadOnlyRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		DynamicGridColumn column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		row.getCells().get(column).setValue(Access.READONLY);
	}

	private void grantCorrespondenceNoRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		DynamicGridColumn column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		row.getCells().get(column).setValue(null);
	}

	
	private void grantAllCorrespondencesFullRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");
		
		for (int i = 0; i < row.getRows().size(); i++)
			grantCorrespondenceFullRights(row.getRows().get(i));
	}

	private void grantAllCorrespondencesReadOnlyRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");

		for (int i = 0; i < row.getRows().size(); i++)
			grantCorrespondenceReadOnlyRights(row.getRows().get(i));
	}

	private void grantAllCorrespondencesNoRights(DynamicGridRow row)
	{
		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Function can not be called from a null row");

		for (int i = 0; i < row.getRows().size(); i++)
			grantCorrespondenceNoRights(row.getRows().get(i));
	}


	private void populateQueryComboboxClinics(DynamicGridCell cell, ClinicLiteVoCollection clinicList)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");
		
		// Clear the query combobox
		cell.getItems().clear();

		if (clinicList == null || clinicList.size() == 0)
			return;

		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the clinics already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof ClinicAccessVo))
				throw new CodingRuntimeException("Non clinical correspondence added to clinical category");

			clinicList.remove(((ClinicAccessVo) row.getValue()).getClinic());
		}
		
		
		if (clinicList.size() == 0)
			return;

		// Add clinics to the query combobox item collection
		DynamicGridCellItem newClinicEntry;
		
		for (int i = 0; i < clinicList.size(); i++)
		{
			// Create a new row for each entry
			newClinicEntry = cell.getItems().newItem();
			newClinicEntry.setValue(clinicList.get(i));
		}

		// Expand the cell
		cell.setMaxDropDownItems(MAXDROPDOWNITEMS);
		cell.showOpened();
	}
	
	private void populateQueryComboboxConsultants(DynamicGridCell cell, MedicLiteVoCollection medicList)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");

		// Clear the query combobox
		cell.getItems().clear();
		
		if (medicList == null || medicList.size() == 0)
			return;
		
		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the medics already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof ConsultantAccessVo))
				throw new CodingRuntimeException("Non consultant correspondence added to consultant category");
			
			medicList.remove(((ConsultantAccessVo) row.getValue()).getConsultant());
		}
		
		
		if (medicList.size() == 0)
			return;
		
		
		// Add consultants to query combobox item collection
		DynamicGridCellItem newMedicEntry;
		
		for (int i = 0; i < medicList.size(); i++)
		{
			// Create a new row for each entry
			newMedicEntry = cell.getItems().newItem();
			newMedicEntry.setValue(medicList.get(i));
		}
		
		// Expand the cell
		cell.setMaxDropDownItems(MAXDROPDOWNITEMS);
		cell.showOpened();
	}
	
	private void populateQueryComboboxSpecialties(DynamicGridCell cell, ArrayList<Specialty> specialties)
	{
		if (cell == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null cell");
		
		// Clear the combobox
		cell.getItems().clear();
		
		if (specialties == null || specialties.size() == 0)
			return;
		
		if (cell.getRow() == null || cell.getRow().getParent() == null)
			throw new CodingRuntimeException("Major Logical Error - Cell must belong to a non category row");
		
		
		// Remove the specialties already added
		DynamicGridRow parentRow = cell.getRow().getParent();
		DynamicGridRow row;
		
		for (int i = 0; i < parentRow.getRows().size(); i++)
		{
			row = parentRow.getRows().get(i);
			
			// If it is the same row as the cell row or the row has a null value move on to the next row
			if (row == null || row == cell.getRow() || row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof SpecialtyAccessVo))
				throw new CodingRuntimeException("Non specialty correspondence added to specialty category");

			SpecialtyAccessVo specialtyAccess = (SpecialtyAccessVo) row.getValue();
			
			if (specialtyAccess.getSpecialty() != null)
				specialties.remove(specialtyAccess.getSpecialty());
		}


		if (specialties.size() == 0)
			return;
		

		// Add spcialties to the query combobox item collection
		DynamicGridCellItem newSpecialtyEntry;
		
		for (int i = 0; i < specialties.size(); i++)
		{
			// Create a new row for each entry
			newSpecialtyEntry = cell.getItems().newItem();
			newSpecialtyEntry.setValue(specialties.get(i));
		}
		
		// Expand the cell
		cell.setMaxDropDownItems(MAXDROPDOWNITEMS);
		cell.showOpened();
	}

	
	private void updateClinicAccessRowValue(DynamicGridRow row)
	{
		DynamicGridColumn column;
		DynamicGridCell cell;
		
		if (row == null || (row.getParent() == null) || (!(row.getParent().getValue() instanceof AccessCategory)) || (((AccessCategory)row.getParent().getValue()) != AccessCategory.CLINICS))
			throw new CodingRuntimeException("Major Logical Error");
		
		if (row.getValue() == null)
			row.setValue(new ClinicAccessVo());
		
		if (!(row.getValue() instanceof ClinicAccessVo))
			throw new CodingRuntimeException("BUG");
		

		// Get second cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		cell = row.getCells().get(column);
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				((ClinicAccessVo) row.getValue()).setClinic(null);
				cell.setTypedText(null);
			}
			else
			{
				((ClinicAccessVo) row.getValue()).setClinic((ClinicLiteVo) cell.getValue());
			}
		}
		
		// Get third cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		cell = row.getCells().get(column);
		cell.getValue();
		((ClinicAccessVo) row.getValue()).setAccessRight((Access) cell.getValue());
	}
	
	private void updateConsultantAccessRowValue(DynamicGridRow row)
	{
		if (row == null || (row.getParent() == null) || (!(row.getParent().getValue() instanceof AccessCategory)) || (((AccessCategory)row.getParent().getValue()) != AccessCategory.CONSULTANTS))
			throw new CodingRuntimeException("Major Logical Problem");
		
		if (row.getValue() == null)
			row.setValue(new ConsultantAccessVo());
		
		if (!(row.getValue() instanceof ConsultantAccessVo))
			throw new CodingRuntimeException("BUG");


		DynamicGridColumn column;
		DynamicGridCell cell;
		
		// Get second cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		cell = row.getCells().get(column);
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				((ConsultantAccessVo) row.getValue()).setConsultant(null);
				cell.setTypedText(null);
			}
			else
			{
				((ConsultantAccessVo) row.getValue()).setConsultant((MedicLiteVo) cell.getValue());
			}
		}
		
		// Get third cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		cell = row.getCells().get(column);
		((ConsultantAccessVo) row.getValue()).setAccessRight((Access) cell.getValue());
	}
	
	private void updateSpecialtyAccessRowValue(DynamicGridRow row)
	{
		DynamicGridColumn column;
		DynamicGridCell cell;
		
		if (row == null || (row.getParent() == null) || (!(row.getParent().getValue() instanceof AccessCategory)) || (((AccessCategory)row.getParent().getValue()) != AccessCategory.SPECIALTY))
			throw new CodingRuntimeException("Major Logical Problem");
		
		if (row.getValue() == null)
			row.setValue(new SpecialtyAccessVo());
		
		if (!(row.getValue() instanceof SpecialtyAccessVo))
			throw new CodingRuntimeException("BUG");

		
		// Get second cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESS_CATEGORY);
		cell = row.getCells().get(column);
		if (cell.getType() != DynamicCellType.STRING)
		{
			if (cell.getValue() == null)
			{
				cell.setTypedText(null);
				((SpecialtyAccessVo) row.getValue()).setSpecialty(null);
			}
			else
			{
				((SpecialtyAccessVo) row.getValue()).setSpecialty((Specialty) cell.getValue());
			}
		}
		
		// Get third cell value
		column = form.dyngrdDetails().getColumns().getByIdentifier(COL_ACCESSRIGHTS);
		cell = row.getCells().get(column);
		((SpecialtyAccessVo) row.getValue()).setAccessRight((Access) cell.getValue());
	}

	
	/////////////////////////////////////////////////////////////
	// Algorithm functions
	/////////////////////////////////////////////////////////////
	private AppUserShortWithNameVoCollection searchUsersBySurname(String surname) throws CodingRuntimeException
	{
		if (surname == null)
		{
			// Leave throw so that the users are not cleared when an empty search is made
			throw new CodingRuntimeException("Search citeria can not be null");
		}
		
		// Set the filter VO needed for the search
		AppUserShortVo filterVo = new AppUserShortVo();
		filterVo.setUserRealName(surname);

		// Retrieve the users (list from domain)
		try
		{
			return domain.searchUsers(filterVo);
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
			return null;
		}
	}
	
	
	private ClinicLiteVoCollection listClinicsByName(String clinicName) throws CodingRuntimeException
	{
		// Leave throws so that clinics are not cleared when an invalid search is made
		if (clinicName == null || clinicName.trim().length() < 3)
			throw new CodingRuntimeException("Clinic name search must be at least 3 characters long");
		
		
		// Build filtering VO
		ClinicLiteVo filterVo = new ClinicLiteVo();
		filterVo.setClinicName(clinicName);
		
		// Retrieve the clinics (list from domain)
		try
		{
			return domain.listClinics(filterVo);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}
		
	}
	
	private MedicLiteVoCollection listConsultantsByName(String medicName) throws CodingRuntimeException
	{
		// Leave throws so that consultants are not cleared when an invalid search is made
		if (medicName == null || medicName.trim().length() < 3)
			throw new CodingRuntimeException("Consultant name search must be at least 3 characters long");
		
		
		// Build filtering VO
		MedicLiteVo filterVo = new MedicLiteVo();
		filterVo.setMos(new MemberOfStaffLiteVo());
		filterVo.getMos().setName(new PersonName());
		filterVo.getName().setSurname(medicName);
		filterVo.getName().setForename(medicName);
		
		// Retrieve the medics (list from domain)
		try
		{
			return domain.listConsultants(filterVo);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}
	}

	private ArrayList<Specialty> listSpecialtyByName(String specialtyName) throws CodingRuntimeException
	{
		// Leave throws so that specialties are not cleared when an invalid search is made
		if (specialtyName == null || specialtyName.trim().length() < 3)
			throw new CodingRuntimeException("Specialty name search must be at least 3 characters long");
		
		
		// Build filtering lookup
		Specialty filterLookup = new Specialty();
		filterLookup.setText(specialtyName);
		
		// Retrieve the specialties (list form domain)
		try
		{
			return domain.listSpecialty(filterLookup);
		}
		catch (DomainInterfaceException exception)
		{
			throw new CodingRuntimeException(exception.getMessage());
		}		
	}


	private void addClinicsToUserAccess(ClinicAccessVoCollection clinics, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make clinics = new ClinicAccessVoCollection() in this function
		// clinics MUST ALWAYS reference the clinics in the UserAccessVo
		
		if (rows == null)
			return;
		
		if (clinics == null)
			throw new CodingRuntimeException("Logical Error - Inserting values into null CLINICS collection");
		

		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;

			if (!(row.getValue() instanceof ClinicAccessVo))
				throw new CodingRuntimeException("Major Logical Error");

			updateClinicAccessRowValue(row);

			ClinicAccessVo clinicAccess = (ClinicAccessVo) row.getValue();

			if (clinicAccess.getClinic() != null || clinicAccess.getAccessRight() != null)
				clinics.add((ClinicAccessVo) row.getValue());
		}
	}
	
	private void addConsultantsToUserAccess(ConsultantAccessVoCollection consultants, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make consultants = new ConsultantAccessVoCollection() in this function
		// consultants MUST ALWAYS reference the clinics in the UserAccessVo

		if (rows == null)
			return;
		
		if (consultants == null)
			throw new CodingRuntimeException("Logical Error - Inserting values into null CONSULTANTS collection");

		
		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof ConsultantAccessVo))
				throw new CodingRuntimeException("Major Logical Error");
			
			updateConsultantAccessRowValue(row);
			
			ConsultantAccessVo consultantAccess = (ConsultantAccessVo) row.getValue();
			
			if (consultantAccess.getConsultant() != null || consultantAccess.getAccessRight() != null)
			{
				consultants.add((ConsultantAccessVo) row.getValue());
			}
		}
	}
	
	private void addSpecialtyToUserAccess(SpecialtyAccessVoCollection specialties, DynamicGridRowCollection rows)
	{
		// NOTE: DO NOT make specialties = new SpecialtyAccessVoCollection() in this function
		// specialties MUST ALWAYS reference the clinics in the UserAccessVo

		if (rows == null)
			return;
		
		if (specialties == null)
				throw new CodingRuntimeException("Logical Error - Inserting values into null SPECIALTY collection");
		
		
		// Add the records from the grid
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);
			
			if (row.getValue() == null)
				continue;
			
			if (!(row.getValue() instanceof SpecialtyAccessVo))
				throw new CodingRuntimeException("Major Logical Error");
			
			updateSpecialtyAccessRowValue(row);
			
			SpecialtyAccessVo specialtyAccess = (SpecialtyAccessVo) row.getValue();
			
			if (specialtyAccess.getSpecialty() != null || specialtyAccess.getAccessRight() != null)
			{
				specialties.add((SpecialtyAccessVo) row.getValue());
			}
		}
	}
}
