//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.62 build 3086.19026)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.patient.domain.objects.Patient;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.PatientListsFilterVo;
import ims.core.vo.domain.DischargedEpisodeVoAssembler;
import ims.core.vo.domain.InpatientEpisodeVoAssembler;
import ims.core.vo.domain.PasEventVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.correspondence.configuration.domain.objects.UserAccess;
import ims.correspondence.domain.base.impl.BaseCorrespondenceInpatientListImpl;
import ims.correspondence.domain.objects.CorrespondenceDetails;
import ims.correspondence.vo.CorrespondencePatientListsVo;
import ims.correspondence.vo.CorrespondencePatientListsVoCollection;
import ims.correspondence.vo.domain.CorrespondenceDetailsVoAssembler;
import ims.correspondence.vo.domain.UserAccessVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.core.vo.lookups.DocumentStatus;

public class CorrespondenceInpatientListImpl extends BaseCorrespondenceInpatientListImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listInpatients By Ward or Hospital
	*/
	public ims.core.vo.InpatientEpisodeVoCollection listInpatientsByWard(ims.core.vo.LocShortMappingsVo ward)
	{
		DomainFactory factory = getDomainFactory();
		
		if (ward == null)
			throw new CodingRuntimeException("ward must be specified for listInpatients by Ward");
				
		String hql = " from InpatientEpisode i where i.pasEvent.location.id = " + ward.getID_Location(); 
		List lstIPEpisodes = factory.find(hql);		
		return InpatientEpisodeVoAssembler.createInpatientEpisodeVoCollectionFromInpatientEpisode(lstIPEpisodes);			
	}

	/**
	* listActiveHospitals
	*/
	public ims.core.vo.LocShortMappingsVoCollection listActiveHospitals()
	{
		OrganisationAndLocation locImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return locImpl.listActiveHospitals();
	}

	public ims.core.vo.LocShortMappingsVoCollection listActiveWardsForHospital(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		OrganisationAndLocation locImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return locImpl.listActiveWardsForHospital(hospital);
	}

	/**
	* listInpatientsByHospital
	*/
	public ims.core.vo.InpatientEpisodeVoCollection listInpatientsByHospital(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	public ims.core.vo.MedicLiteVoCollection listActiveMedics(String strMedicName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listActiveMedics(strMedicName);
	}

	public CorrespondencePatientListsVoCollection listInPatients(PatientListsFilterVo voFilter, Boolean listByReqAndNotReqStatus, Boolean bCurrentInpatientOnly)
	{
		DomainFactory factory = getDomainFactory();
		String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		boolean bListByCorrespondence = false;
		CorrespondencePatientListsVoCollection collCorrespondencePatientListsVo = new CorrespondencePatientListsVoCollection();
		
		boolean dischargedEpisode = false;
		if(voFilter.getDischargeDateFrom()==null && voFilter.getDischargeDateTo()==null){
			hql = " from InpatientEpisode as i1_1 left join i1_1.pasEvent as p1_1 left join p1_1.patient as p2_1"; 
						
			if (voFilter.getWard() != null)
			{
				condStr.append(andStr + " p1_1.location.id = :ward");
				markers.add("ward");
				values.add(voFilter.getWard().getID_Location());
				andStr = " and ";
			}
			if (voFilter.getConsultant() != null)
			{
				condStr.append(andStr + " p1_1.consultant.id = :cons");
				markers.add("cons");
				values.add(voFilter.getConsultant().getID_Hcp());
				andStr = " and ";
			}
			if(!listByReqAndNotReqStatus){
				if (voFilter.getDocumentStatus() != null)
				{
					condStr.append(andStr + " i1_1.pasEvent.cspDocumentStatus.id = :letterStatus");
					markers.add("letterStatus");
					values.add(voFilter.getDocumentStatus().getID());
					andStr = " and ";
				}
			}
			else{
				condStr.append(andStr + " (i1_1.pasEvent.cspDocumentStatus.id = :required");
				markers.add("required");
				values.add(DocumentStatus.LETTERREQUIRED.getID());
				condStr.append(" or i1_1.pasEvent.cspDocumentStatus.id = :notRequired)");
				markers.add("notRequired");
				values.add(DocumentStatus.NOLETTERREQUIRED.getID());
				andStr = " and ";
			}
			if (voFilter.getDictatedBy() != null)
			{
				bListByCorrespondence = true;
				condStr.append(andStr + " c1_1.dictatedBy.id = :dictatedBy");
				markers.add("dictatedBy");
				values.add(voFilter.getDictatedBy().getID_MemberOfStaff());
				condStr.append(" and c1_1.pasEvent.id = i1_1.pasEvent.id");
				andStr = " and ";
			}
			
			if(bListByCorrespondence)
				hql += ", CorrespondenceDetails as c1_1 right join c1_1.pasEvent as p4_1 left join p4_1.patient as p5_1 left join c1_1.currentStatus as l1_1 where i1_1.isRIE is null and (";
			else
				hql += " where p1_1.isRIE is null and (";
		
			hql += condStr.toString();
			if (andStr.equals(" and "))
			{
				hql += ") ";
			}		
			
			if(bListByCorrespondence)
				hql += " and p1_1.isRIE is null  and c1_1.isRIE is null order by p1_1.eventDateTime asc";
			else
				hql += " and p1_1.isRIE is null order by p1_1.eventDateTime asc";
			
			createCorrespondencePatientListsVoCollection(factory.find(hql, markers, values), collCorrespondencePatientListsVo, dischargedEpisode);
		}
		markers = new ArrayList();
		values = new ArrayList();
		condStr = new StringBuffer();
		andStr = " ";
		if(!bCurrentInpatientOnly){
			hql = " from DischargedEpisode as d1_1 left join d1_1.pasEvent as p1_1 left join p1_1.patient as p2_1";
						
			if (voFilter.getWard() != null)
			{
				condStr.append(andStr + " p1_1.location.id = :ward");
				markers.add("ward");
				values.add(voFilter.getWard().getID_Location());
				andStr = " and ";
			}
			if (voFilter.getConsultant() != null)
			{
				condStr.append(andStr + " p1_1.consultant.id = :cons");
				markers.add("cons");
				values.add(voFilter.getConsultant().getID_Hcp());
				andStr = " and ";
			}
			if(!listByReqAndNotReqStatus){
				if (voFilter.getDocumentStatus() != null)
				{
					condStr.append(andStr + " d1_1.pasEvent.cspDocumentStatus.id = :letterStatus");
					markers.add("letterStatus");
					values.add(voFilter.getDocumentStatus().getID());
					andStr = " and ";
				}
			}
			else{
				condStr.append(andStr + " (d1_1.pasEvent.cspDocumentStatus.id = :required");
				markers.add("required");
				values.add(DocumentStatus.LETTERREQUIRED.getID());
				condStr.append(" or d1_1.pasEvent.cspDocumentStatus.id = :notRequired)");
				markers.add("notRequired");
				values.add(DocumentStatus.NOLETTERREQUIRED.getID());
				andStr = " and ";
			}
			if (voFilter.getDischargeDateFrom() != null)
			{
				condStr.append(andStr + " d1_1.dischargeDateTime >= :dischargeDateFrom");
				markers.add("dischargeDateFrom");
				values.add(voFilter.getDischargeDateFrom().getDate());
				andStr = " and ";
			}
			if (voFilter.getDischargeDateTo() != null)
			{
				condStr.append(andStr + " d1_1.dischargeDateTime <= :dischargeDateTo");
				markers.add("dischargeDateTo");
				values.add(voFilter.getDischargeDateTo().getDate());
				andStr = " and ";
			}
			if (voFilter.getDictatedBy() != null)
			{
				bListByCorrespondence = true;
				condStr.append(andStr + " c1_1.dictatedBy.id = :dictatedBy");
				markers.add("dictatedBy");
				values.add(voFilter.getDictatedBy().getID_MemberOfStaff());
				condStr.append(" and c1_1.pasEvent.id = d1_1.pasEvent.id");
				andStr = " and ";
			}
			
			if(bListByCorrespondence)
				hql += ", CorrespondenceDetails as c1_1 right join c1_1.pasEvent as p4_1 left join p4_1.patient as p5_1 left join c1_1.currentStatus as l1_1 where d1_1.isRIE is null and (";
			else
				hql += " where d1_1.isRIE is null and (";
				
			hql += condStr.toString();
			if (andStr.equals(" and "))
			{
				hql += ") ";
			}		
			
			if(bListByCorrespondence)
				hql += " and d1_1.isRIE is null  and c1_1.isRIE is null";
			else
				hql += " and d1_1.isRIE is null";
			
			dischargedEpisode = true;
			
			createCorrespondencePatientListsVoCollection(factory.find(hql, markers, values), collCorrespondencePatientListsVo, dischargedEpisode);
		}
		
		return collCorrespondencePatientListsVo;
	}

	private void createCorrespondencePatientListsVoCollection(List list, CorrespondencePatientListsVoCollection collCorrespondencePatientListsVo, boolean dischargedEpisode ) {
		
		if(!dischargedEpisode){
			for (int i = 0; i<list.size(); i++)
			{
				Object obj[] = (Object[]) list.get(i);
				CorrespondencePatientListsVo voCorrespondencePatientLists = new CorrespondencePatientListsVo();
				
				if(obj[0]==null)
					;
				else	
					voCorrespondencePatientLists.setInpatientEpisodeVo(InpatientEpisodeVoAssembler.create((InpatientEpisode) obj[0]));
				if(obj[1]==null)
					;
				else	
					voCorrespondencePatientLists.setPASEventVo(PasEventVoAssembler.create((PASEvent) obj[1]));
				if(obj[2]==null)
					;
				else					
					voCorrespondencePatientLists.setPatient(PatientAssembler.create((Patient) obj[2]));
										
				collCorrespondencePatientListsVo.add(voCorrespondencePatientLists);
			}
		}
		else{
			for (int i = 0; i<list.size(); i++)
			{
				Object obj[] = (Object[]) list.get(i);
				CorrespondencePatientListsVo voCorrespondencePatientLists = new CorrespondencePatientListsVo();
				
				if(obj[0]==null)
					;
				else	
					voCorrespondencePatientLists.setDischargeEpisodeVo(DischargedEpisodeVoAssembler.create((DischargedEpisode) obj[0]));
				if(obj[1]==null)
					;
				else	
					voCorrespondencePatientLists.setPASEventVo(PasEventVoAssembler.create((PASEvent) obj[1]));
													
				collCorrespondencePatientListsVo.add(voCorrespondencePatientLists);
			}
		}
	}
	/**
	* get Correspondence record for specified pasEvent
	*/
	public ims.correspondence.vo.CorrespondenceDetailsVo getCorrespondenceDetailsByPasEvent(ims.core.admin.pas.vo.PASEventRefVo pasEventRef)
	{
		if (pasEventRef == null)
			throw new CodingRuntimeException("Mandatory Argument - PAS Event Required");
		DomainFactory factory = getDomainFactory();
		CorrespondenceDetails domCspDet = CorrespondenceDetails.getCorrespondenceDetailsFromPasEvent(factory, pasEventRef.getID_PASEvent());
		return CorrespondenceDetailsVoAssembler.create(domCspDet);
	}

	public ims.correspondence.vo.UserAccessVo getUserAccess(Integer userID)
	{
		if (userID == null)
			throw new CodingRuntimeException("Can not search on null user");
		
		DomainFactory factory = getDomainFactory();
		return UserAccessVoAssembler.create(UserAccess.getUserAccessFromAppUser(factory, userID));
	}

	public MemberOfStaffShortVoCollection listMembersOfStaff(MemberOfStaffShortVo filter) {
		MosAdmin mosAdmin = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return mosAdmin.listMembersOfStaff(filter);
	}

}
