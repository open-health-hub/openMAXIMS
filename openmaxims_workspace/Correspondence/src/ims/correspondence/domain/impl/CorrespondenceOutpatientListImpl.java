//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.62 build 3086.19026)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.correspondence.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.ClinicAdmin;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.ClinicAdminImpl;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.admin.pas.domain.objects.OutpatientAttendance;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.OutPatientListSearchCriteriaVo;
import ims.core.vo.domain.OutPatientAttendanceVoAssembler;
import ims.core.vo.domain.PasEventVoAssembler;
import ims.core.vo.lookups.DocumentStatus;
import ims.correspondence.configuration.domain.objects.UserAccess;
import ims.correspondence.domain.base.impl.BaseCorrespondenceOutpatientListImpl;
import ims.correspondence.domain.objects.CorrespondenceDetails;
import ims.correspondence.vo.CorrespondenceDetailsVo;
import ims.correspondence.vo.CorrespondencePatientListsVo;
import ims.correspondence.vo.CorrespondencePatientListsVoCollection;
import ims.correspondence.vo.domain.CorrespondenceDetailsVoAssembler;
import ims.correspondence.vo.domain.UserAccessVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class CorrespondenceOutpatientListImpl extends BaseCorrespondenceOutpatientListImpl
{

	private static final long serialVersionUID = 1L;

	public CorrespondencePatientListsVoCollection listOutpatients(OutPatientListSearchCriteriaVo filter, Boolean listByReqAndNotReqStatus)
	{
		DomainFactory factory = getDomainFactory();
		String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		boolean bListByCorrespondence = false;
		
		hql = " from OutpatientAttendance as o1_1 left join o1_1.pasEvent as p1_1 left join p1_1.patient as p2_1"; 
		
		if (filter.getClinicIsNotNull())
		{
			condStr.append(andStr + " o1_1.clinic.id = :clinic");
			markers.add("clinic");
			values.add(filter.getClinic().getID_Clinic());
			andStr = " and ";
		}
		if (filter.getConsultantIsNotNull())
		{
			condStr.append(andStr + " o1_1.pasEvent.consultant.id = :cons");
			markers.add("cons");
			values.add(filter.getConsultant().getID_Hcp());
			andStr = " and ";
		}
		if (filter.getSpecialtyIsNotNull())
		{
			condStr.append(andStr + " o1_1.pasEvent.specialty.id = :spec");
			markers.add("spec");
			values.add(filter.getSpecialty().getID());
			andStr = " and ";
		}
		if (filter.getClinicDateIsNotNull())
		{
			condStr.append(andStr + " o1_1.appointmentDateTime >= :startdate");
			condStr.append(andStr + " o1_1.appointmentDateTime = :enddate");
			markers.add("startdate");
			markers.add("enddate");
			values.add(filter.getClinicDate().getDate());
			values.add(filter.getClinicDate().copy().addDay(1).getDate());
		}
		if (filter.getDateFrom() != null)
		{
			condStr.append(andStr + " o1_1.appointmentDateTime >= :dateFrom");
			markers.add("dateFrom");
			values.add(filter.getDateFrom().getDate());
			andStr = " and ";
		}
		if (filter.getDateTo() != null)
		{
			condStr.append(andStr + " o1_1.appointmentDateTime <= :dateTo");
			markers.add("dateTo");
			values.add(filter.getDateTo().getDate());
			andStr = " and ";
		}
		if (filter.getDictatedByIsNotNull())
		{
			bListByCorrespondence = true;
			condStr.append(andStr + " c1_1.dictatedBy.id = :dictatedBy");
			markers.add("dictatedBy");
			values.add(filter.getDictatedBy().getID_MemberOfStaff());
			condStr.append(" and c1_1.pasEvent.id = o1_1.pasEvent.id");
			andStr = " and ";
		}
		if(!listByReqAndNotReqStatus){
			if (filter.getDocumentStatus() != null)
			{
				condStr.append(andStr + " o1_1.pasEvent.cspDocumentStatus.id = :letterStatus");
				markers.add("letterStatus");
				values.add(filter.getDocumentStatus().getID());
				andStr = " and ";
			}
		}
		else{
			condStr.append(andStr + " (o1_1.pasEvent.cspDocumentStatus.id = :required");
			markers.add("required");
			values.add(DocumentStatus.LETTERREQUIRED.getID());
			condStr.append(" or o1_1.pasEvent.cspDocumentStatus.id = :notRequired)");
			markers.add("notRequired");
			values.add(DocumentStatus.NOLETTERREQUIRED.getID());
			andStr = " and ";
		}
		if (filter.getDocumentStatusIsNotNull())
		{
			condStr.append(andStr + " o1_1.pasEvent.cspDocumentStatus.id = :letterStatus");
			markers.add("letterStatus");
			values.add(filter.getDocumentStatus().getID());
			andStr = " and ";
		}		
		
		if(bListByCorrespondence)
			hql += ", CorrespondenceDetails as c1_1 right join c1_1.pasEvent as p4_1 left join p4_1.patient as p5_1 left join c1_1.currentStatus as l1_1 where o1_1.isRIE is null and (";
		else
			hql += " where o1_1.isRIE is null and (";
	
		hql += condStr.toString();
		if (andStr.equals(" and "))
		{
			hql += ") ";
		}		
		
		if(bListByCorrespondence)
			hql += " and c1_1.isRIE is null order by p1_1.eventDateTime asc";
		else
			hql += " and p1_1.isRIE is null";
				
		return createOutPatientListVoCollection(factory.find(hql, markers, values));
	}
	
	private CorrespondencePatientListsVoCollection createOutPatientListVoCollection(List list) {
		
		CorrespondencePatientListsVoCollection collOutPatientListVo = new CorrespondencePatientListsVoCollection();
		
		for (int i = 0; i<list.size(); i++)
		{
			Object obj[] = (Object[]) list.get(i);
			CorrespondencePatientListsVo voOutPatientList = new CorrespondencePatientListsVo();
			
			if(obj[0]==null)
				;
			else	
				voOutPatientList.setOutpatientAttendanceVo(OutPatientAttendanceVoAssembler.create((OutpatientAttendance) obj[0]));
			if(obj[1]==null)
				;
			else	
				voOutPatientList.setPASEventVo(PasEventVoAssembler.create((PASEvent) obj[1]));
			
			collOutPatientListVo.add(voOutPatientList);
		}
		
		return collOutPatientListVo;
	}

	public ims.core.vo.LocationLiteVoCollection listActiveLocations()
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.listActiveLocSiteLite();
	}

	public ims.core.vo.ClinicLiteVoCollection listClinicsforLocation(ims.core.resource.place.vo.LocationRefVo voLocRef, String strClinicName)
	{
		ClinicAdmin clinicAdmin = (ClinicAdmin)getDomainImpl(ClinicAdminImpl.class);
		return clinicAdmin.listClinicsForLocationByClinicName(voLocRef,strClinicName );
	}

	public ims.core.vo.MedicLiteVoCollection listActiveMedics(String strMedicName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listActiveMedics(strMedicName);
	}

	public ims.correspondence.vo.UserAccessVo getUserAccess(Integer userID)
	{
		if (userID == null)
			throw new CodingRuntimeException("Can not search on null user");
		
		DomainFactory factory = getDomainFactory();
		return UserAccessVoAssembler.create(UserAccess.getUserAccessFromAppUser(factory, userID));
	}

	public LocationLiteVoCollection listActiveHospitalsLite() {
		OrganisationAndLocation orgLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.listActiveHospitalsLite();
	}

	public CorrespondenceDetailsVo getCorrespondenceDetailsByPasEvent(PASEventRefVo pasEventRef) {
		if (pasEventRef == null)
			throw new CodingRuntimeException("Mandatory Argument - PAS Event Required");
		DomainFactory factory = getDomainFactory();
		CorrespondenceDetails domCspDet = CorrespondenceDetails.getCorrespondenceDetailsFromPasEvent(factory, pasEventRef.getID_PASEvent());
		return CorrespondenceDetailsVoAssembler.create(domCspDet);
	}

	public MemberOfStaffShortVoCollection listMembersOfStaff(MemberOfStaffShortVo filter) {
		MosAdmin mosAdmin = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return mosAdmin.listMembersOfStaff(filter);
	}
}
