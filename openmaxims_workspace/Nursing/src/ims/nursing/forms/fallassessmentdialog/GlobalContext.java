//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.fallassessmentdialog;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		COE = new COEContext(context);
		Core = new CoreContext(context);
		Nursing = new NursingContext(context);
	}
	public final class COEContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private COEContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getAssessmentScoreIsNotNull()
		{
			return !cx_COEAssessmentScore.getValueIsNull(context);
		}
		public Float getAssessmentScore()
		{
			return (Float)cx_COEAssessmentScore.getValue(context);
		}
		public void setAssessmentScore(Float value)
		{
			cx_COEAssessmentScore.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_COEAssessmentScore = new ims.framework.ContextVariable("COE.AssessmentScore", "_cv_COE.AssessmentScore");
		public boolean getCurrentFallRiskAssessmentIsNotNull()
		{
			return !cx_COECurrentFallRiskAssessment.getValueIsNull(context);
		}
		public ims.coe.vo.FallAssessment getCurrentFallRiskAssessment()
		{
			return (ims.coe.vo.FallAssessment)cx_COECurrentFallRiskAssessment.getValue(context);
		}

		private ims.framework.ContextVariable cx_COECurrentFallRiskAssessment = new ims.framework.ContextVariable("COE.CurrentFallRiskAssessment", "_cv_COE.CurrentFallRiskAssessment");
		public boolean getDisplayScoreIsNotNull()
		{
			return !cx_COEDisplayScore.getValueIsNull(context);
		}
		public Boolean getDisplayScore()
		{
			return (Boolean)cx_COEDisplayScore.getValue(context);
		}
		public void setDisplayScore(Boolean value)
		{
			cx_COEDisplayScore.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_COEDisplayScore = new ims.framework.ContextVariable("COE.DisplayScore", "_cv_COE.DisplayScore");
		public boolean getFallRiskAssessmentsIsNotNull()
		{
			return !cx_COEFallRiskAssessments.getValueIsNull(context);
		}
		public ims.coe.vo.RiskAssessmentCollection getFallRiskAssessments()
		{
			return (ims.coe.vo.RiskAssessmentCollection)cx_COEFallRiskAssessments.getValue(context);
		}
		public void setFallRiskAssessments(ims.coe.vo.RiskAssessmentCollection value)
		{
			cx_COEFallRiskAssessments.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_COEFallRiskAssessments = new ims.framework.ContextVariable("COE.FallRiskAssessments", "_cv_COE.FallRiskAssessments");
		public boolean getAssessmentMobilityIsNotNull()
		{
			return !cx_COEAssessmentMobility.getValueIsNull(context);
		}
		public ims.coe.vo.AssessmentMobility getAssessmentMobility()
		{
			return (ims.coe.vo.AssessmentMobility)cx_COEAssessmentMobility.getValue(context);
		}
		public void setAssessmentMobility(ims.coe.vo.AssessmentMobility value)
		{
			cx_COEAssessmentMobility.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_COEAssessmentMobility = new ims.framework.ContextVariable("COE.AssessmentMobility", "_cv_COE.AssessmentMobility");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getYesNoDialogMessageIsNotNull()
		{
			return !cx_CoreYesNoDialogMessage.getValueIsNull(context);
		}
		public String getYesNoDialogMessage()
		{
			return (String)cx_CoreYesNoDialogMessage.getValue(context);
		}
		public void setYesNoDialogMessage(String value)
		{
			cx_CoreYesNoDialogMessage.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreYesNoDialogMessage = new ims.framework.ContextVariable("Core.YesNoDialogMessage", "_cv_Core.YesNoDialogMessage");
		public boolean getCurrentCareContextIsNotNull()
		{
			return !cx_CoreCurrentCareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCurrentCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);
		}

		private ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");
		public boolean getCurrentClinicalContactIsNotNull()
		{
			return !cx_CoreCurrentClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getCurrentClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cx_CoreCurrentClinicalContact.getValue(context);
		}
		public void setCurrentClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cx_CoreCurrentClinicalContact.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCurrentClinicalContact = new ims.framework.ContextVariable("Core.CurrentClinicalContact", "_cvp_Core.CurrentClinicalContact");

		private ims.framework.Context context;
	}
	public final class NursingContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private NursingContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getAssessmentComponentIsNotNull()
		{
			return !cx_NursingAssessmentComponent.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentComponent getAssessmentComponent()
		{
			return (ims.nursing.vo.AssessmentComponent)cx_NursingAssessmentComponent.getValue(context);
		}
		public void setAssessmentComponent(ims.nursing.vo.AssessmentComponent value)
		{
			cx_NursingAssessmentComponent.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_NursingAssessmentComponent = new ims.framework.ContextVariable("Nursing.AssessmentComponent", "_cv_Nursing.AssessmentComponent");

		private ims.framework.Context context;
	}

	public COEContext COE;
	public CoreContext Core;
	public NursingContext Nursing;
}
