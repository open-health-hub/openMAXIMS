//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.dailypatientprogress;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.nursing.domain.DailyPatientProgress.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.nursing.domain.DailyPatientProgress domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientAssessmentStatusReason existingInstance = (ims.core.vo.lookups.PatientAssessmentStatusReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientAssessmentStatusReason)
		{
			ims.core.vo.lookups.PatientAssessmentStatusReason instance = (ims.core.vo.lookups.PatientAssessmentStatusReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientAssessmentStatusReason existingInstance = (ims.core.vo.lookups.PatientAssessmentStatusReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.cmbStatus().clear();
		ims.core.vo.lookups.PatientAssessmentStatusReasonCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PatientAssessmentStatusReason instance = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.cmbStatus().setValue((ims.core.vo.lookups.PatientAssessmentStatusReason)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientAssessmentStatusReason.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientAssessmentStatusReason.TYPE_ID));
	}
	protected final void oncmbStatusReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatusReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientAssessmentStatusReason existingInstance = (ims.core.vo.lookups.PatientAssessmentStatusReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientAssessmentStatusReason)
		{
			ims.core.vo.lookups.PatientAssessmentStatusReason instance = (ims.core.vo.lookups.PatientAssessmentStatusReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientAssessmentStatusReason existingInstance = (ims.core.vo.lookups.PatientAssessmentStatusReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatusReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusReasonLookup()
	{
		this.form.cmbStatusReason().clear();
		ims.core.vo.lookups.PatientAssessmentStatusReasonCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatusReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusReasonLookupValue(int id)
	{
		ims.core.vo.lookups.PatientAssessmentStatusReason instance = ims.core.vo.lookups.LookupHelper.getPatientAssessmentStatusReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatusReason().setValue(instance);
	}
	protected final void defaultcmbStatusReasonLookupValue()
	{
		this.form.cmbStatusReason().setValue((ims.core.vo.lookups.PatientAssessmentStatusReason)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientAssessmentStatusReason.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientAssessmentStatusReason.TYPE_ID));
	}
	protected final void oncmbAssessmentTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAssessmentType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.assessment.vo.lookups.DPPType existingInstance = (ims.assessment.vo.lookups.DPPType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAssessmentTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.assessment.vo.lookups.DPPType)
		{
			ims.assessment.vo.lookups.DPPType instance = (ims.assessment.vo.lookups.DPPType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAssessmentTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.assessment.vo.lookups.DPPType existingInstance = (ims.assessment.vo.lookups.DPPType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAssessmentType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAssessmentTypeLookup()
	{
		this.form.cmbAssessmentType().clear();
		ims.assessment.vo.lookups.DPPTypeCollection lookupCollection = ims.assessment.vo.lookups.LookupHelper.getDPPType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAssessmentType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAssessmentTypeLookupValue(int id)
	{
		ims.assessment.vo.lookups.DPPType instance = ims.assessment.vo.lookups.LookupHelper.getDPPTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAssessmentType().setValue(instance);
	}
	protected final void defaultcmbAssessmentTypeLookupValue()
	{
		this.form.cmbAssessmentType().setValue((ims.assessment.vo.lookups.DPPType)domain.getLookupService().getDefaultInstance(ims.assessment.vo.lookups.DPPType.class, engine.getFormName().getID(), ims.assessment.vo.lookups.DPPType.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.txtStatusReason().setValue("");
		this.form.txtOtherType().setValue("");
		this.form.cmbStatus().setValue(null);
		this.form.cmbStatusReason().setValue(null);
		this.form.cmbAssessmentType().setValue(null);
	}
	protected void populateScreenFromData(ims.assessment.vo.PatientAssessmentVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.txtStatusReason().setValue(value.getStatusReasonTextIsNotNull() ? value.getStatusReasonText(): null);
		this.form.txtOtherType().setValue(value.getDPPTypeTextIsNotNull() ? value.getDPPTypeText(): null);
		this.form.cmbStatus().setValue(value.getStatusIsNotNull() ? value.getStatus() : null);
		this.form.cmbStatusReason().setValue(value.getStatusReasonIsNotNull() ? value.getStatusReason() : null);
		this.form.cmbAssessmentType().setValue(value.getDPPTypeIsNotNull() ? value.getDPPType() : null);
	}
	protected ims.assessment.vo.PatientAssessmentVo populateDataFromScreen(ims.assessment.vo.PatientAssessmentVo value)
	{
		if(value == null)
			value = new ims.assessment.vo.PatientAssessmentVo();

		value.setStatusReasonText(this.form.txtStatusReason().getValue());
		value.setDPPTypeText(this.form.txtOtherType().getValue());
		value.setStatus(this.form.cmbStatus().getValue());
		value.setStatusReason(this.form.cmbStatusReason().getValue());
		value.setDPPType(this.form.cmbAssessmentType().getValue());

		return value;
	}
	protected ims.assessment.vo.PatientAssessmentVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.assessment.vo.PatientAssessmentVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.nursing.domain.DailyPatientProgress domain;
}
