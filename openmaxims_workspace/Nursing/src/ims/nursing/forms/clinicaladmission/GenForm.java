//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.clinicaladmission;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class recbrAdmissionsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.nursing.vo.ClinicalAdmissionListVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.nursing.vo.ClinicalAdmissionListVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.nursing.vo.ClinicalAdmissionListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.nursing.vo.ClinicalAdmissionListVo getValue()
		{
			return (ims.nursing.vo.ClinicalAdmissionListVo)super.control.getValue();
		}
		public void setValue(ims.nursing.vo.ClinicalAdmissionListVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdActionRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdActionRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnActionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnActionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnActionOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnAction(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnAction()
		{
			return (String)super.row.get(0);
		}
		public void setColumnAction(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnActionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDoneReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDoneReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDoneOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnDone(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getColumnDone()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColumnDone(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColumnDoneTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnDateOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnDate(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColumnDate()
		{
			return (String)super.row.get(2);
		}
		public void setColumnDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnTimeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnTimeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColumnTime(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColumnTime()
		{
			return (String)super.row.get(3);
		}
		public void setColumnTime(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnTimeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnHCPReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnHCPReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnHCPOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColumnHCP(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColumnHCP()
		{
			return (String)super.row.get(4);
		}
		public void setColumnHCP(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnHCPTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.nursing.vo.AdmissionChecklistVo getValue()
		{
			return (ims.nursing.vo.AdmissionChecklistVo)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.AdmissionChecklistVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdActionRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdActionRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdActionRow get(int index)
		{
			return new grdActionRow(super.collection.get(index));
		}
		public grdActionRow newRow()
		{
			return new grdActionRow(super.collection.newRow());
		}
		public grdActionRow newRow(boolean autoSelect)
		{
			return new grdActionRow(super.collection.newRow(autoSelect));
		}
		public grdActionRow newRowAt(int index)
		{
			return new grdActionRow(super.collection.newRowAt(index));
		}
		public grdActionRow newRowAt(int index, boolean autoSelect)
		{
			return new grdActionRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdActionGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.nursing.vo.AdmissionChecklistVoCollection getValues()
		{
			ims.nursing.vo.AdmissionChecklistVoCollection listOfValues = new ims.nursing.vo.AdmissionChecklistVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.nursing.vo.AdmissionChecklistVo getValue()
		{
			return (ims.nursing.vo.AdmissionChecklistVo)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.AdmissionChecklistVo value)
		{
			super.grid.setValue(value);
		}
		public grdActionRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdActionRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdActionRowCollection getRows()
		{
			return new grdActionRowCollection(super.grid.getRows());
		}
		public grdActionRow getRowByValue(ims.nursing.vo.AdmissionChecklistVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdActionRow(row);
		}
		public void setColumnActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDoneHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDoneHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnHCPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnHCPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getlocalContextForRie();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 440, 376, 392, 128, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Social Circumstance", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 224, 392, 144, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Clients Understanding", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 392, 160, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 416, 280, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Admission Actions", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 416, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Linked PAS admission details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 576, 528, 272, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ims.framework.FormUiLogic m_ccDischargedForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 2016, skipContextValidation);
		//ims.framework.Control m_ccDischargedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(576), new Integer(528), new Integer(272), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 2016), m_ccDischargedForm, instance1 } );
		ims.framework.Control m_ccDischargedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 2016), m_ccDischargedForm, instance1, Boolean.TRUE } );
		super.addControl(m_ccDischargedControl);
		Menu[] menus1 = m_ccDischargedForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 152, 528, 264, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_ccConfirmedByForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper7.getSize(), instance2, startTabIndex.intValue() + 1014, skipContextValidation);
		//ims.framework.Control m_ccConfirmedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(152), new Integer(528), new Integer(264), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 1014), m_ccConfirmedByForm, instance2 } );
		ims.framework.Control m_ccConfirmedByControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 1014), m_ccConfirmedByForm, instance2, Boolean.TRUE } );
		super.addControl(m_ccConfirmedByControl);
		Menu[] menus2 = m_ccConfirmedByForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}
		ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 568, 88, 264, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ims.framework.FormUiLogic m_ccAdmittingNurseForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper8.getSize(), instance3, startTabIndex.intValue() + 9, skipContextValidation);
		//ims.framework.Control m_ccAdmittingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(568), new Integer(88), new Integer(264), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 9), m_ccAdmittingNurseForm, instance3 } );
		ims.framework.Control m_ccAdmittingNurseControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 9), m_ccAdmittingNurseForm, instance3, Boolean.FALSE } );
		super.addControl(m_ccAdmittingNurseControl);
		Menu[] menus3 = m_ccAdmittingNurseForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus3.length; x++)
		{
			form.registerMenu(menus3[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 554, 137, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Discharged Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 440, 530, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Discharged By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 530, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Confirmed By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 554, 132, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Confirmed Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 456, 90, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Admitting Nurse:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 162, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Admission:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 32, 138, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 32, 114, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 32, 90, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 745, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3025), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 656, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3024), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 496, 600, 109, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3023), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Discharge", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 384, 600, 109, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 3022), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clinical Discharge", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 296, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3021), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Confirm", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 192, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3020), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Copy Last", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 104, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3019), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 85, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 3018), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 448, 408, 368, 56, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 448, 256, 368, 104, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 168, 160, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 168, 136, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 168, 112, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 168, 88, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 576, 552, 256, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 3017), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 152, 552, 248, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 2015), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAdmissionsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAdmissionsTemp);
		recbrAdmissionsRecordBrowser recbrAdmissions = (recbrAdmissionsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAdmissionsRecordBrowser.class, m_recbrAdmissionsTemp);
		super.addRecordBrowser(recbrAdmissions);

		// Grid Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 24, 256, 400, 208, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdActionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdActionTemp);
		grdActionGrid grdAction = (grdActionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActionGrid.class, m_grdActionTemp);
		grdAction.addStringColumn("Action", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAction.addBoolColumn("Select", 1, 1, 40, false, true, 0, true);
		grdAction.addStringColumn("Date", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAction.addStringColumn("Time", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAction.addStringColumn("HCP", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAction);
	}


	public ims.core.forms.mosquery.IComponent ccDischarged()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(5)).getLogic();
	}
	public void setccDischargedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(5)).setValueChangedEvent(delegate);
	}
	public void setccDischargedVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(5)).setVisible(value);
	}
	public boolean isccDischargedVisible()
	{
		return ((ims.framework.Control)super.getControl(5)).isVisible();
	}
	public void setccDischargedEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(5)).setEnabled(value);
	}
	public boolean isccDischargedEnabled()
	{
		return ((ims.framework.Control)super.getControl(5)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccConfirmedBy()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(6)).getLogic();
	}
	public void setccConfirmedByValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(6)).setValueChangedEvent(delegate);
	}
	public void setccConfirmedByVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(6)).setVisible(value);
	}
	public boolean isccConfirmedByVisible()
	{
		return ((ims.framework.Control)super.getControl(6)).isVisible();
	}
	public void setccConfirmedByEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(6)).setEnabled(value);
	}
	public boolean isccConfirmedByEnabled()
	{
		return ((ims.framework.Control)super.getControl(6)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccAdmittingNurse()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(7)).getLogic();
	}
	public void setccAdmittingNurseValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(7)).setValueChangedEvent(delegate);
	}
	public void setccAdmittingNurseVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(7)).setVisible(value);
	}
	public boolean isccAdmittingNurseVisible()
	{
		return ((ims.framework.Control)super.getControl(7)).isVisible();
	}
	public void setccAdmittingNurseEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(7)).setEnabled(value);
	}
	public boolean isccAdmittingNurseEnabled()
	{
		return ((ims.framework.Control)super.getControl(7)).isEnabled();
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public Button btnUndischarge()
	{
		return (Button)super.getControl(19);
	}
	public Button btnDischarge()
	{
		return (Button)super.getControl(20);
	}
	public Button btnConfirm()
	{
		return (Button)super.getControl(21);
	}
	public Button btnCopy()
	{
		return (Button)super.getControl(22);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(23);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(24);
	}
	public TextBox txtSocialCircumstance()
	{
		return (TextBox)super.getControl(25);
	}
	public TextBox txtClientsUnderstanding()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtSource()
	{
		return (TextBox)super.getControl(27);
	}
	public TextBox txtWard()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtConsultant()
	{
		return (TextBox)super.getControl(29);
	}
	public TextBox txtDateTime()
	{
		return (TextBox)super.getControl(30);
	}
	public DateTimeControl dtimDischarged()
	{
		return (DateTimeControl)super.getControl(31);
	}
	public DateTimeControl dtimConfirmed()
	{
		return (DateTimeControl)super.getControl(32);
	}
	public recbrAdmissionsRecordBrowser recbrAdmissions()
	{
		return (recbrAdmissionsRecordBrowser)super.getRecordBrowser(0);
	}
	public grdActionGrid grdAction()
	{
		return (grdActionGrid)super.getGrid(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AllowRecording = new ims.framework.ContextVariable("AllowRecording", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__AllowRecording_" + componentIdentifier + "");
			cxl_clinicalAdmission = new ims.framework.ContextVariable("clinicalAdmission", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier + "");
			cxl_previousClinicalAdmission = new ims.framework.ContextVariable("previousClinicalAdmission", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier + "");
			cxl_admissionDetail = new ims.framework.ContextVariable("admissionDetail", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier + "");
			cxl_buttonAction = new ims.framework.ContextVariable("buttonAction", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__buttonAction_" + componentIdentifier + "");
			cxl_isOpenCarePlan = new ims.framework.ContextVariable("isOpenCarePlan", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__isOpenCarePlan_" + componentIdentifier + "");
			cxl_AllowEditing = new ims.framework.ContextVariable("AllowEditing", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__AllowEditing_" + componentIdentifier + "");
			cxl_localContextForRie = new ims.framework.ContextVariable("localContextForRie", prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier + "");
		}
		
		public boolean getAllowRecordingIsNotNull()
		{
			return !cxl_AllowRecording.getValueIsNull(context);
		}
		public Boolean getAllowRecording()
		{
			return (Boolean)cxl_AllowRecording.getValue(context);
		}
		public void setAllowRecording(Boolean value)
		{
			cxl_AllowRecording.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowRecording = null;
		public boolean getclinicalAdmissionIsNotNull()
		{
			return !cxl_clinicalAdmission.getValueIsNull(context);
		}
		public ims.nursing.vo.ClinicalAdmissionVo getclinicalAdmission()
		{
			return (ims.nursing.vo.ClinicalAdmissionVo)cxl_clinicalAdmission.getValue(context);
		}
		public void setclinicalAdmission(ims.nursing.vo.ClinicalAdmissionVo value)
		{
			cxl_clinicalAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_clinicalAdmission = null;
		public boolean getpreviousClinicalAdmissionIsNotNull()
		{
			return !cxl_previousClinicalAdmission.getValueIsNull(context);
		}
		public ims.nursing.vo.ClinicalAdmissionVo getpreviousClinicalAdmission()
		{
			return (ims.nursing.vo.ClinicalAdmissionVo)cxl_previousClinicalAdmission.getValue(context);
		}
		public void setpreviousClinicalAdmission(ims.nursing.vo.ClinicalAdmissionVo value)
		{
			cxl_previousClinicalAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_previousClinicalAdmission = null;
		public boolean getadmissionDetailIsNotNull()
		{
			return !cxl_admissionDetail.getValueIsNull(context);
		}
		public ims.core.vo.AdmissionDetailVo getadmissionDetail()
		{
			return (ims.core.vo.AdmissionDetailVo)cxl_admissionDetail.getValue(context);
		}
		public void setadmissionDetail(ims.core.vo.AdmissionDetailVo value)
		{
			cxl_admissionDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_admissionDetail = null;
		public boolean getbuttonActionIsNotNull()
		{
			return !cxl_buttonAction.getValueIsNull(context);
		}
		public Integer getbuttonAction()
		{
			return (Integer)cxl_buttonAction.getValue(context);
		}
		public void setbuttonAction(Integer value)
		{
			cxl_buttonAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_buttonAction = null;
		public boolean getisOpenCarePlanIsNotNull()
		{
			return !cxl_isOpenCarePlan.getValueIsNull(context);
		}
		public Boolean getisOpenCarePlan()
		{
			return (Boolean)cxl_isOpenCarePlan.getValue(context);
		}
		public void setisOpenCarePlan(Boolean value)
		{
			cxl_isOpenCarePlan.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isOpenCarePlan = null;
		public boolean getAllowEditingIsNotNull()
		{
			return !cxl_AllowEditing.getValueIsNull(context);
		}
		public Boolean getAllowEditing()
		{
			return (Boolean)cxl_AllowEditing.getValue(context);
		}
		public void setAllowEditing(Boolean value)
		{
			cxl_AllowEditing.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowEditing = null;
		public boolean getlocalContextForRieIsNotNull()
		{
			return !cxl_localContextForRie.getValueIsNull(context);
		}
		public ims.nursing.vo.ClinicalAdmissionVo getlocalContextForRie()
		{
			return (ims.nursing.vo.ClinicalAdmissionVo)cxl_localContextForRie.getValue(context);
		}
		public void setlocalContextForRie(ims.nursing.vo.ClinicalAdmissionVo value)
		{
			cxl_localContextForRie.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_localContextForRie = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[105];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-ID", "ID_ClinicalAdmission");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-DISCHARGEDDATETIME", "DischargedDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-CARECONTEXT", "CareContext");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-CLIENTUNDERSTANDING", "ClientUnderstanding");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-SOCIALCIRCUMSTANCE", "SocialCircumstance");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__clinicalAdmission_" + componentIdentifier, "BO-1009100020-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-ID", "ID_ClinicalAdmission");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-DISCHARGEDDATETIME", "DischargedDateTime");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-CARECONTEXT", "CareContext");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-CLIENTUNDERSTANDING", "ClientUnderstanding");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-SOCIALCIRCUMSTANCE", "SocialCircumstance");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__previousClinicalAdmission_" + componentIdentifier, "BO-1009100020-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-ID", "ID_AdmissionDetail");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-BED", "Bed");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-CONSULTANT", "Consultant");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-SPECIALTY", "Specialty");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-WARDTYPE", "WardType");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-METHODOFADMISSION", "MethodOfAdmission");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-SOURCEOFADMISSION", "SourceOfAdmission");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-REASONFORADMISSION", "ReasonForAdmission");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-ISCHAPLAINREQUIRED", "IsChaplainRequired");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-REFERRINGCONSULTANT", "ReferringConsultant");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-PATIENTSTATUS", "PatientStatus");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-UPDATECFL", "UpdateCFL");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__admissionDetail_" + componentIdentifier, "BO-1014100008-CASEFOLDERCOMMENTS", "CaseFolderComments");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-ID", "ID_ClinicalAdmission");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-DISCHARGEDDATETIME", "DischargedDateTime");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-CARECONTEXT", "CareContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-CLIENTUNDERSTANDING", "ClientUnderstanding");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-SOCIALCIRCUMSTANCE", "SocialCircumstance");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.ClinicalAdmission.__internal_x_context__localContextForRie_" + componentIdentifier, "BO-1009100020-CONFIRMEDDATETIME", "ConfirmedDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
