//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.dailypatientprogressdlg;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCurrentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientAssessmentStatusReason getValue()
				{
					return (ims.core.vo.lookups.PatientAssessmentStatusReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbStatusReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientAssessmentStatusReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientAssessmentStatusReason getValue()
				{
					return (ims.core.vo.lookups.PatientAssessmentStatusReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientAssessmentStatusReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAssessmentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.lookups.DPPType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.lookups.DPPType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.lookups.DPPType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.lookups.DPPType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.assessment.vo.lookups.DPPType value)
				{
					return super.control.removeRow(value);
				}
				public ims.assessment.vo.lookups.DPPType getValue()
				{
					return (ims.assessment.vo.lookups.DPPType)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.lookups.DPPType value)
				{
					super.control.setValue(value);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 360, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_customControlAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(0), new Integer(360), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1 } );
				ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthoringControl);
				Menu[] menus1 = m_customControlAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 384, 10, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 384, 34, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 384, 58, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status Reason (text):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 58, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 656, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 736, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 512, 56, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 152, 80, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 512, 8, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 512, 32, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbStatusReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbStatusReasonTemp);
				cmbStatusReasonComboBox cmbStatusReason = (cmbStatusReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusReasonComboBox.class, m_cmbStatusReasonTemp);
				super.addComboBox(cmbStatusReason);
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 152, 56, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbAssessmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1002), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAssessmentTemp);
				cmbAssessmentComboBox cmbAssessment = (cmbAssessmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAssessmentComboBox.class, m_cmbAssessmentTemp);
				super.addComboBox(cmbAssessment);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 793, 432, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuDPPQuestions, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnOK()
			{
				return (Button)super.getControl(6);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(7);
			}
			public TextBox txtStatusReasonText()
			{
				return (TextBox)super.getControl(8);
			}
			public TextBox txtOther()
			{
				return (TextBox)super.getControl(9);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(0);
			}
			public cmbStatusReasonComboBox cmbStatusReason()
			{
				return (cmbStatusReasonComboBox)super.getComboBox(1);
			}
			public cmbAssessmentComboBox cmbAssessment()
			{
				return (cmbAssessmentComboBox)super.getComboBox(2);
			}
			public DynamicGrid dynQuestions()
			{
				return (DynamicGrid)super.getControl(13);
			}
		}
		public static class tabNonApplicableContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 624, 560, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Select Questions", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 736, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 793, 536, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnSelectNAQuestions()
			{
				return (Button)super.getControl(0);
			}
			public Button btnCancelNAQuestions()
			{
				return (Button)super.getControl(1);
			}
			public DynamicGrid dynNonApplic()
			{
				return (DynamicGrid)super.getControl(2);
			}
		}
		public static class tabStandardQuestionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 624, 560, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Select Questions", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 736, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 793, 536, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnSelectNSQuestions()
			{
				return (Button)super.getControl(0);
			}
			public Button btnCancelNSQuestions()
			{
				return (Button)super.getControl(1);
			}
			public DynamicGrid dyngrdNonStandard()
			{
				return (DynamicGrid)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCurrent = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Current Questions", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabCurrentContainer m_tabCurrentContainer = (tabCurrentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCurrentContainer.class, m_tabCurrent, factory);
			super.addContainer(m_tabCurrent, m_tabCurrentContainer);
			ims.framework.utils.SizeInfo m_tabCurrentDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabCurrentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabCurrentContainer.setContext(form, appForm, m_tabCurrent, loader, form_images_local, contextMenus, startControlID, m_tabCurrentDesignSize, m_tabCurrentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNonApplicable = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Non Applicable Questions", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabNonApplicableContainer m_tabNonApplicableContainer = (tabNonApplicableContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNonApplicableContainer.class, m_tabNonApplicable, factory);
			super.addContainer(m_tabNonApplicable, m_tabNonApplicableContainer);
			ims.framework.utils.SizeInfo m_tabNonApplicableDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabNonApplicableRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabNonApplicableContainer.setContext(form, appForm, m_tabNonApplicable, loader, form_images_local, contextMenus, startControlID, m_tabNonApplicableDesignSize, m_tabNonApplicableRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabStandardQuestion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Non Standard Questions", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabStandardQuestionContainer m_tabStandardQuestionContainer = (tabStandardQuestionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabStandardQuestionContainer.class, m_tabStandardQuestion, factory);
			super.addContainer(m_tabStandardQuestion, m_tabStandardQuestionContainer);
			ims.framework.utils.SizeInfo m_tabStandardQuestionDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabStandardQuestionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tabStandardQuestionContainer.setContext(form, appForm, m_tabStandardQuestion, loader, form_images_local, contextMenus, startControlID, m_tabStandardQuestionDesignSize, m_tabStandardQuestionRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCurrent().setVisible(false);
			tabNonApplicable().setVisible(false);
			tabStandardQuestion().setVisible(false);
		}
		public void showtabCurrent()
		{
			tabNonApplicable().setVisible(false);
			tabStandardQuestion().setVisible(false);
			tabCurrent().setVisible(true);
		}
		public void showtabNonApplicable()
		{
			tabCurrent().setVisible(false);
			tabStandardQuestion().setVisible(false);
			tabNonApplicable().setVisible(true);
		}
		public void showtabStandardQuestion()
		{
			tabCurrent().setVisible(false);
			tabNonApplicable().setVisible(false);
			tabStandardQuestion().setVisible(true);
		}

		public tabCurrentContainer tabCurrent()
		{
			return (tabCurrentContainer)super.layers.get(0);
		}
		public tabNonApplicableContainer tabNonApplicable()
		{
			return (tabNonApplicableContainer)super.layers.get(1);
		}
		public tabStandardQuestionContainer tabStandardQuestion()
		{
			return (tabStandardQuestionContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuDPPQuestions = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Non Applicable Questions", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuDPPQuestions.add(contextMenus.contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem);
		contextMenus.contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Non Standard Questions", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuDPPQuestions.add(contextMenus.contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem);
		form.registerMenu(contextMenus.contextMenuDPPQuestions);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
			Core = new CoreForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				DailyPatientProgress = new LocalFormName(100110);
			}
			public final FormName DailyPatientProgress;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName YesNoDialog;
		}

		public NursingForms Nursing;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				Text = new ImageHelper(102234, "Images/Core/Text.gif", new Integer(16), new Integer(16));
				SmallCancel = new ImageHelper(102248, "Images/Core/SmallCancel.gif", new Integer(12), new Integer(12));
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				TextBox = new ImageHelper(102240, "Images/Core/Textbox.gif", new Integer(16), new Integer(16));
				SmallNew = new ImageHelper(102247, "Images/Core/SmallNew.gif", new Integer(12), new Integer(12));
				YellowSquare = new ImageHelper(102123, "Images/Core/circle_yellow.png", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
				RedSqaure = new ImageHelper(102122, "Images/Core/circle_red.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image Text;
			public final ims.framework.utils.Image SmallCancel;
			public final ims.framework.utils.Image MandatoryQuestion;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image TextBox;
			public final ims.framework.utils.Image SmallNew;
			public final ims.framework.utils.Image YellowSquare;
			public final ims.framework.utils.Image GreenSquare;
			public final ims.framework.utils.Image RedSqaure;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_DppQuestionGroup = new ims.framework.ContextVariable("DppQuestionGroup", prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__DppQuestionGroup_" + componentIdentifier + "");
			cxl_YesNoDisplayed = new ims.framework.ContextVariable("YesNoDisplayed", prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__YesNoDisplayed_" + componentIdentifier + "");
			cxl_PatientAssessmentVo = new ims.framework.ContextVariable("PatientAssessmentVo", prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier + "");
		}
		
		public boolean getDppQuestionGroupIsNotNull()
		{
			return !cxl_DppQuestionGroup.getValueIsNull(context);
		}
		public ims.assessment.vo.DPPQuestionGroupShortVoCollection getDppQuestionGroup()
		{
			return (ims.assessment.vo.DPPQuestionGroupShortVoCollection)cxl_DppQuestionGroup.getValue(context);
		}
		public void setDppQuestionGroup(ims.assessment.vo.DPPQuestionGroupShortVoCollection value)
		{
			cxl_DppQuestionGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DppQuestionGroup = null;
		public boolean getYesNoDisplayedIsNotNull()
		{
			return !cxl_YesNoDisplayed.getValueIsNull(context);
		}
		public Boolean getYesNoDisplayed()
		{
			return (Boolean)cxl_YesNoDisplayed.getValue(context);
		}
		public void setYesNoDisplayed(Boolean value)
		{
			cxl_YesNoDisplayed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_YesNoDisplayed = null;
		public boolean getPatientAssessmentVoIsNotNull()
		{
			return !cxl_PatientAssessmentVo.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getPatientAssessmentVo()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_PatientAssessmentVo.getValue(context);
		}
		public void setPatientAssessmentVo(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_PatientAssessmentVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessmentVo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class DPPQuestions implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_NON_APPLICABLE_QUESTIONS = 1;
			public static final int ADD_NOT_ANSWERED_QUESTION = 2;
		}
		public void disableAllDPPQuestionsMenuItems()
		{
			this.contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem.setEnabled(false);
			this.contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem.setEnabled(false);
		}
		public void hideAllDPPQuestionsMenuItems()
		{
			this.contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem.setVisible(false);
			this.contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem.setVisible(false);
		}
		private Menu contextMenuDPPQuestions;
		public MenuItem getDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem()
		{
			return this.contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem;
		}
		private MenuItem contextMenuDPPQuestionsADD_NON_APPLICABLE_QUESTIONSItem;
		public MenuItem getDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem()
		{
			return this.contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem;
		}
		private MenuItem contextMenuDPPQuestionsADD_NOT_ANSWERED_QUESTIONItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[119];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ID", "ID_UserAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-HELPURL", "HelpURL");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Nursing.UserAssessmentDPP", "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-STATUS", "Status");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-STATUSREASON", "StatusReason");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-DPPTYPE", "DPPType");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-CARECONTEXT", "CareContext");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-PATIENT", "Patient");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-SCORE", "Score");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Nursing.PatientAssessmentVo", "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.DailyPatientProgressDlg.__internal_x_context__PatientAssessmentVo_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
