//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.nursingadmission;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.nursing.domain.NursingAdmission.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.nursing.domain.NursingAdmission domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPreferredLangValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPreferredLang().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PreferredLanguage existingInstance = (ims.nursing.vo.lookups.PreferredLanguage)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPreferredLangLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.PreferredLanguage)
		{
			ims.nursing.vo.lookups.PreferredLanguage instance = (ims.nursing.vo.lookups.PreferredLanguage)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPreferredLangLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PreferredLanguage existingInstance = (ims.nursing.vo.lookups.PreferredLanguage)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPreferredLang().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPreferredLangLookup()
	{
		this.form.cmbPreferredLang().clear();
		ims.nursing.vo.lookups.PreferredLanguageCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getPreferredLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPreferredLang().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPreferredLangLookupValue(int id)
	{
		ims.nursing.vo.lookups.PreferredLanguage instance = ims.nursing.vo.lookups.LookupHelper.getPreferredLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPreferredLang().setValue(instance);
	}
	protected final void defaultcmbPreferredLangLookupValue()
	{
		this.form.cmbPreferredLang().setValue((ims.nursing.vo.lookups.PreferredLanguage)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.PreferredLanguage.class, engine.getFormName().getID(), ims.nursing.vo.lookups.PreferredLanguage.TYPE_ID));
	}
	protected final void onansDiagDiscussedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ansDiagDiscussed().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansDiagDiscussedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansDiagDiscussedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ansDiagDiscussed().addOption(instance);
		}
	}
	protected final void bindansDiagDiscussedLookup()
	{
		this.form.ansDiagDiscussed().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ansDiagDiscussed().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansDiagDiscussedLookupValue()
	{
		this.form.ansDiagDiscussed().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void bindgrdFamilyColRelationshipLookup()
	{
		this.form.grdFamily().ColRelationshipComboBox().clear();
		ims.core.vo.lookups.SupportNetworkRelationshipCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSupportNetworkRelationship(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdFamily().ColRelationshipComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdFamilyColProgressLookup()
	{
		this.form.grdFamily().answerBoxColumnClear(3);
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdFamily().answerBoxColumnNewOption(3, lookupCollection.get(x));
		}
	}
	protected final void onansDNRCompleteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ansDNRComplete().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansDNRCompleteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNo)
		{
			ims.core.vo.lookups.YesNo instance = (ims.core.vo.lookups.YesNo)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansDNRCompleteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNo existingInstance = (ims.core.vo.lookups.YesNo)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ansDNRComplete().addOption(instance);
		}
	}
	protected final void bindansDNRCompleteLookup()
	{
		this.form.ansDNRComplete().clear();
		ims.core.vo.lookups.YesNoCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNo(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ansDNRComplete().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansDNRCompleteLookupValue()
	{
		this.form.ansDNRComplete().setValue((ims.core.vo.lookups.YesNo)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNo.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNo.TYPE_ID));
	}
	protected final void oncmbResusStatus2ValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbResusStatus2().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ResuscitationStatus existingInstance = (ims.core.vo.lookups.ResuscitationStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbResusStatus2Lookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ResuscitationStatus)
		{
			ims.core.vo.lookups.ResuscitationStatus instance = (ims.core.vo.lookups.ResuscitationStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbResusStatus2Lookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ResuscitationStatus existingInstance = (ims.core.vo.lookups.ResuscitationStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbResusStatus2().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbResusStatus2Lookup()
	{
		this.form.cmbResusStatus2().clear();
		ims.core.vo.lookups.ResuscitationStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getResuscitationStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbResusStatus2().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbResusStatus2LookupValue(int id)
	{
		ims.core.vo.lookups.ResuscitationStatus instance = ims.core.vo.lookups.LookupHelper.getResuscitationStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbResusStatus2().setValue(instance);
	}
	protected final void defaultcmbResusStatus2LookupValue()
	{
		this.form.cmbResusStatus2().setValue((ims.core.vo.lookups.ResuscitationStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ResuscitationStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.ResuscitationStatus.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.nursing.domain.NursingAdmission domain;
}
