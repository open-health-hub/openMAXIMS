//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.patientmovement;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindgridScreeningcolStatusLookup();
	abstract protected void bindgridMovementcolEquipmentLookup();
	abstract protected void bindgridMovementColOtherEquipmentLookup();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlayerControl1TabChanged(ims.framework.LayerBridge tab);
	abstract protected void onComboAllScreeningValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelScreeningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveScreeningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateScreeningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewScreeningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseScreeningClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onComboAllMovementsValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewMovementClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGridMovementSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelMovementClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveMovementClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateMovementClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPrintMovementClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCloseMovementClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.layerControl1().screening().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlayerControl1screeningActivated();
			}
		});
		this.form.layerControl1().movement().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlayerControl1movementActivated();
			}
		});
		this.form.layerControl1().screening().comboAllScreening().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onComboAllScreeningValueChanged();
			}
		});
		this.form.layerControl1().screening().btnCancelScreening().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelScreeningClick();
			}
		});
		this.form.layerControl1().screening().btnSaveScreening().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveScreeningClick();
			}
		});
		this.form.layerControl1().screening().btnUpdateScreening().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateScreeningClick();
			}
		});
		this.form.layerControl1().screening().btnNewScreening().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewScreeningClick();
			}
		});
		this.form.layerControl1().screening().btnCloseScreening().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseScreeningClick();
			}
		});
		this.form.layerControl1().movement().comboAllMovements().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onComboAllMovementsValueChanged();
			}
		});
		this.form.layerControl1().movement().btnNewMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewMovementClick();
			}
		});
		this.form.layerControl1().movement().gridMovement().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGridMovementSelectionChanged();
			}
		});
		this.form.layerControl1().movement().btnCancelMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelMovementClick();
			}
		});
		this.form.layerControl1().movement().btnSaveMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveMovementClick();
			}
		});
		this.form.layerControl1().movement().btnUpdateMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateMovementClick();
			}
		});
		this.form.layerControl1().movement().btnPrintMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPrintMovementClick();
			}
		});
		this.form.layerControl1().movement().btnCloseMovement().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCloseMovementClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindgridScreeningcolStatusLookup();
		bindgridMovementcolEquipmentLookup();
		bindgridMovementColOtherEquipmentLookup();
	}
	protected void rebindAllLookups()
	{
		bindgridScreeningcolStatusLookup();
		bindgridMovementcolEquipmentLookup();
		bindgridMovementColOtherEquipmentLookup();
	}
	protected void defaultAllLookupValues()
	{
	}
	private void onlayerControl1screeningActivated()
	{
		this.form.layerControl1().showscreening();
		onlayerControl1TabChanged(this.form.layerControl1().screening());
	}
	private void onlayerControl1movementActivated()
	{
		this.form.layerControl1().showmovement();
		onlayerControl1TabChanged(this.form.layerControl1().movement());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
