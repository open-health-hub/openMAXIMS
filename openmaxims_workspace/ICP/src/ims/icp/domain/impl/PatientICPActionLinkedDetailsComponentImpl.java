//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.icp.domain.impl;

import ims.assessment.configuration.domain.objects.GraphicAssessment;
import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentLiteVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.assessment.vo.domain.GraphicAssessmentVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.domain.CareContextLiteVoAssembler;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.TemplateBoLiteVoAssembler;
import ims.core.vo.lookups.ContextType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.icp.domain.base.impl.BasePatientICPActionLinkedDetailsComponentImpl;
import ims.icp.vo.domain.PatientICPActionFullVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICPAction;

import java.util.ArrayList;

public class PatientICPActionLinkedDetailsComponentImpl extends BasePatientICPActionLinkedDetailsComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.icp.vo.PatientICPActionFullVo getPatientICPAction(ims.icps.instantiation.vo.PatientICPActionRefVo patientICPActionRef)
	{
		// Check parameter
		if (patientICPActionRef == null)
			return null;
		
		// Return the Patient ICP Action (full VO)
		return PatientICPActionFullVoAssembler.create((PatientICPAction) getDomainFactory().getDomainObject(PatientICPAction.class, patientICPActionRef.getID_PatientICPAction()));
	}

	public UserAssessmentVo getAssessment(UserAssessmentRefVo assessmentRef)
	{
		// Check parameter
		if (assessmentRef == null || !assessmentRef.getID_UserAssessmentIsNotNull())
			return null;

		return UserAssessmentVoAssembler.create((UserAssessment) getDomainFactory().getDomainObject(UserAssessment.class, assessmentRef.getID_UserAssessment()));
	}

	public GraphicAssessmentVo getGraphicAssessment(GraphicAssessmentRefVo graphicAssessmentRef)
	{
		// Check parameter
		if (graphicAssessmentRef == null || !graphicAssessmentRef.getID_GraphicAssessmentIsNotNull())
			return null;
		
		return GraphicAssessmentVoAssembler.create((GraphicAssessment) getDomainFactory().getDomainObject(GraphicAssessment.class, graphicAssessmentRef.getID_GraphicAssessment()));
	}

	public PatientAssessmentLiteVoCollection listPatientAssessments(CareContextRefVo careContextRef, UserAssessmentRefVo assessmentRef)
	{
		// If no assembler or care context is passes return null
		// Do not throw any exception or crash code - this is the domain of a component
		// Try to handle the execution exception
		if (assessmentRef == null || careContextRef == null)
			return null;
		
		CareContextLiteVo careContext = CareContextLiteVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext()));
		
		if (careContext == null)
			return null;
				
		String query = " from PatientAssessment as pa where pa.assessmentData.userAssessment.id = :ASS_ID and ((pa.careContext.id = :CC_ID and pa.careContext.context.id != :CC_TYPE)" +
				" or (pa.careContext.episodeOfCare.id = :EP_ID and pa.careContext.context.id = :CC_TYPE)) order by pa.authoringInformation.authoringDateTime desc";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ASS_ID");
		paramValues.add(assessmentRef.getID_UserAssessment());
		
		paramNames.add("CC_ID");
		paramValues.add(careContextRef.getID_CareContext());
		
		paramNames.add("CC_TYPE");
		paramValues.add(ContextType.INPATIENT.getID());
		
		paramNames.add("EP_ID");
		paramValues.add(careContext.getEpisodeOfCare().getID_EpisodeOfCare());

		
		return PatientAssessmentLiteVoAssembler.createPatientAssessmentLiteVoCollectionFromPatientAssessment(getDomainFactory().find(query, paramNames, paramValues));
	}

	public PatientAssessmentLiteVoCollection listPatientGraphicAssessments(CareContextRefVo careContextRef, GraphicAssessmentRefVo graphicalAssessmentRef)
	{
		// If no assembler or care context is passes return null
		// Do not throw any exception or crash code - this is the domain of a component
		// Try to handle the execution exception
		if (graphicalAssessmentRef == null || careContextRef == null)
			return null;
		
		CareContextLiteVo careContext = CareContextLiteVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext()));
		
		if (careContext == null)
			return null;
		
		String query = " from PatientAssessment as pa where pa.assessmentData.graphic.id = :GASS_ID and ((pa.careContext.id = :CC_ID and pa.careContext.context.id != :CC_TYPE)" +
				" or (pa.careContext.episodeOfCare.id = :EP_ID and pa.careContext.context.id = :CC_TYPE)) order by pa.authoringInformation.authoringDateTime desc";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("GASS_ID");
		paramValues.add(graphicalAssessmentRef.getID_GraphicAssessment());
		
		paramNames.add("CC_ID");
		paramValues.add(careContextRef.getID_CareContext());
		
		paramNames.add("CC_TYPE");
		paramValues.add(ContextType.INPATIENT.getID());
		
		paramNames.add("EP_ID");
		paramValues.add(careContext.getEpisodeOfCare().getID_EpisodeOfCare());

		return PatientAssessmentLiteVoAssembler.createPatientAssessmentLiteVoCollectionFromPatientAssessment(getDomainFactory().find(query, paramNames, paramValues));
	}


	public PatientAssessmentVo getPatientAssessment(PatientAssessmentRefVo patientAssessmentRef)
	{
		if (patientAssessmentRef == null || !patientAssessmentRef.getID_PatientAssessmentIsNotNull())
			return null;
		
		return PatientAssessmentVoAssembler.create((PatientAssessment) getDomainFactory().getDomainObject(PatientAssessment.class, patientAssessmentRef.getID_PatientAssessment()));
	}

	public PatientAssessmentVo getPatientGraphicAssessment(PatientAssessmentRefVo patientAssessmentRef)
	{
		if (patientAssessmentRef == null || !patientAssessmentRef.getID_PatientAssessmentIsNotNull())
			return null;
		
		return PatientAssessmentVoAssembler.create((PatientAssessment) getDomainFactory().getDomainObject(PatientAssessment.class, patientAssessmentRef.getID_PatientAssessment()));
	}

	public CareContextShortVo getCareContext(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || !careContextRef.getID_CareContextIsNotNull())
			return null;
		
		return CareContextShortVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContextRef.getID_CareContext()));
	}

	public ClinicalContactShortVo getClinicalContact(ClinicalContactRefVo clinicalContactRef)
	{
		if (clinicalContactRef == null || !clinicalContactRef.getID_ClinicalContactIsNotNull())
			return null;
		
		return ClinicalContactShortVoAssembler.create((ClinicalContact) getDomainFactory().getDomainObject(ClinicalContact.class, clinicalContactRef.getID_ClinicalContact()));
	}

	public PatientAssessmentVo savePatientAssessment(PatientAssessmentVo patientAssessment) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		// Check for a PatientAssessment and if it is validated
		if (patientAssessment == null)
			throw new DomainInterfaceException("PatientAssessment can not be null");
		
		if (!patientAssessment.isValidated())
			throw new DomainInterfaceException("PatientAssessment must be validated");
		
		// Extract domain object
		PatientAssessment domPatientAssessment = PatientAssessmentVoAssembler.extractPatientAssessment(getDomainFactory(), patientAssessment);
		
		// Attempt save on the domain object
		getDomainFactory().save(domPatientAssessment);
		
		// Return saved PatientAssessment
		return PatientAssessmentVoAssembler.create(domPatientAssessment);
	}

	public PatientAssessmentVo savePatientGraphicalAssessment(PatientAssessmentVo patientGraphicalAssessment) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		// Check for a PatientGraphicAssessment and if it is validated
		if (patientGraphicalAssessment == null)
			throw new DomainInterfaceException("PatientAssessment can not be null");
		
		if (!patientGraphicalAssessment.isValidated())
			throw new DomainInterfaceException("PatientAssessment must be validated");
		
		// Extract domain object
		PatientAssessment domPatientAssessment = PatientAssessmentVoAssembler.extractPatientAssessment(getDomainFactory(), patientGraphicalAssessment);
		
		// Attempt save on the domain object
		getDomainFactory().save(domPatientAssessment);
		
		// Return saved PatientAssessment
		return PatientAssessmentVoAssembler.create(domPatientAssessment);
	}

	public EpisodeOfCareRefVo getEpisodeOfCare(CareContextRefVo careContext) 
	{
		if(careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new CodingRuntimeException("Can not get Episode Of Care by null Care Context.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select e from EpisodeOfCare as e left join e.careContexts as c where c.id = :CareContext";
		EpisodeOfCare obj = (EpisodeOfCare) factory.findFirst(query, new String[] {"CareContext"}, new Object[] {careContext.getID_CareContext()});
		
		if(obj == null)
			throw new DomainRuntimeException("CareContext without Episode Of Care found.");
		
		return new EpisodeOfCareRefVo(obj.getId(), obj.getVersion());
	}

	/**
	 * Get required template report
	 */
	public TemplateBoLiteVo getTemplateReport(TemplateBoRefVo templateRef)
	{
		if (templateRef == null || templateRef.getID_TemplateBo() == null)
			return null;
		
		return TemplateBoLiteVoAssembler.create((TemplateBo) getDomainFactory().getDomainObject(TemplateBo.class, templateRef.getID_TemplateBo()));
	}
}
