//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.icp.domain.impl;

import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.icp.domain.base.impl.BaseICPPhaseSelectDialogImpl;
import ims.icp.vo.ICPPhaseListVo;
import ims.icp.vo.ICPPhaseListVoCollection;
import ims.icp.vo.domain.ICPPhaseListVoAssembler;
import ims.icps.configuration.domain.objects.ICPPhase;

import java.util.Iterator;
import java.util.List;

public class ICPPhaseSelectDialogImpl extends BaseICPPhaseSelectDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Function used to list ICP Phases that meet the search criteria
	*/
	public ICPPhaseListVoCollection listPhases(String phaseName, String stageName, String icpName, PreActiveActiveInactiveStatus status)
	{
		StringBuilder query = new StringBuilder();
		String aux = " WHERE ";
		
		query.append("SELECT phase, icp.name, stage.name FROM ICP AS icp RIGHT JOIN icp.stages AS stage RIGHT JOIN stage.phases AS phase");
		
		
		// Add phase name as a filter criteria to the query
		if (phaseName != null && phaseName.trim().length() > 0)
		{
			query.append(aux);
			query.append(" UPPER(phase.name) LIKE '%").append(phaseName.toUpperCase()).append("%'");
			
			aux = " AND ";
		}
		
		// Add stage name as a filter criteria to the query
		if (stageName != null && stageName.trim().length() > 0)
		{
			query.append(aux);
			query.append(" UPPER(stage.name) LIKE '%").append(stageName.toUpperCase()).append("%'");
			
			aux = " AND ";
		}
		
		// Add ICP name as a filter criteria to the query
		if (icpName != null && icpName.trim().length() > 0)
		{
			query.append(aux);
			query.append(" UPPER(icp.name) LIKE '%").append(icpName.toUpperCase()).append("%'");
			
			aux = " AND ";
		}
		
		// Add status as a filter criteria to the query
		if (status != null)
		{
			query.append(aux);
			query.append(" phase.status.id = ").append(status.getID());
		}
		
		query.append(" ORDER BY UPPER(phase.name)");
		
		
		// Execute query
		List<?> queryResults = getDomainFactory().find(query.toString());
		
		return customAssembleSearchResults(queryResults);
	}

	/**
	 * Function used to custom assemble the results to be used in the form
	 */
	private ICPPhaseListVoCollection customAssembleSearchResults(List<?> queryResults)
	{
		if (queryResults == null)
			return null;
		
		// Collection with results to be returned
		ICPPhaseListVoCollection resultsToReturn = new ICPPhaseListVoCollection();

		
		// Iterate the results and build the results to return
		Iterator<?> iterator = queryResults.iterator();
		
		while (iterator.hasNext())
		{
			Object[] result = (Object[]) iterator.next();
			
			if (result[0] instanceof ICPPhase)
			{
				ICPPhaseListVo resultToReturn = ICPPhaseListVoAssembler.create((ICPPhase) result[0]); 
				
				if (result[1] instanceof String)
				{
					resultToReturn.setICPName((String) result[1]);
				}
				
				if (result[2] instanceof String)
				{
					resultToReturn.setStageName((String) result[2]);
				}
				
				resultsToReturn.add(resultToReturn);
			}
		}
		
		// Return the result
		return resultsToReturn;
	}
}
