//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.icp.domain.impl;

import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.icp.domain.base.impl.BasePatientICPPresentationComponentImpl;
import ims.icp.helper.PatientICPDomainHelper;
import ims.icp.helper.PatientICPHelperInterface;
import ims.icp.vo.PatientICPActionStatusVo;
import ims.icp.vo.PatientICPAction_PresentationVo;
import ims.icp.vo.PatientICPAction_StatusChangeVo;
import ims.icp.vo.PatientICPPhaseStatusVo;
import ims.icp.vo.PatientICPPhase_PresentationVo;
import ims.icp.vo.PatientICPPhase_StatusChangeVo;
import ims.icp.vo.PatientICPStageStatusVo;
import ims.icp.vo.PatientICPStage_PresentationVo;
import ims.icp.vo.PatientICPStage_StatusChangeVo;
import ims.icp.vo.PatientICP_PresentationVo;
import ims.icp.vo.domain.PatientICPAction_PresentationVoAssembler;
import ims.icp.vo.domain.PatientICPAction_StatusChangeVoAssembler;
import ims.icp.vo.domain.PatientICPPhase_StatusChangeVoAssembler;
import ims.icp.vo.domain.PatientICPStage_StatusChangeVoAssembler;
import ims.icp.vo.domain.PatientICP_PresentationVoAssembler;
import ims.icp.vo.lookups.ICPActionStatus;
import ims.icp.vo.lookups.ICPPhaseStatus;
import ims.icp.vo.lookups.ICPStageStatus;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.icps.instantiation.domain.objects.PatientICPAction;
import ims.icps.instantiation.domain.objects.PatientICPStage;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.icps.instantiation.vo.PatientICPPhaseRefVo;
import ims.icps.instantiation.vo.PatientICPRefVo;
import ims.icps.instantiation.vo.PatientICPStageRefVo;



public class PatientICPPresentationComponentImpl extends BasePatientICPPresentationComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	 * Function used to retrieve the Patient ICP record from database
	 */
	public PatientICP_PresentationVo getPatientICP(PatientICPRefVo patientICP)
	{
		PatientICPHelperInterface helper = (PatientICPHelperInterface) getDomainImpl(PatientICPDomainHelper.class);
		
		return helper.getPatientICPQueryFetch(patientICP);
	}


	/**
	 * Function used to set the action status
	 * @return 
	 */
	public PatientICPAction_PresentationVo setActionStatus(PatientICPRefVo patientICP, PatientICPActionRefVo action, ICPActionStatus status, Boolean canCounterSign, MemberOfStaffLiteVo mos) throws StaleObjectException
	{
		if (action == null || action.getID_PatientICPAction() == null)
			throw new CodingRuntimeException("Parameter 'action' is null in 'setActionStatus' function.");
		
		if (patientICP == null || patientICP.getID_PatientICP() == null)
			throw new CodingRuntimeException("Patient ICP - is invalid.");
		
		PatientICP domPatIcp = (PatientICP) getDomainFactory().getDomainObject(PatientICP.class, patientICP.getID_PatientICP());
		
		if (domPatIcp.getCompletedDateTime() != null)
			throw new StaleObjectException(domPatIcp);
		
		
		PatientICPAction_StatusChangeVo patientICPAction = PatientICPAction_StatusChangeVoAssembler.create((PatientICPAction) getDomainFactory().getDomainObject(PatientICPAction.class, action.getID_PatientICPAction()));

		PatientICPActionStatusVo actionStatus = new PatientICPActionStatusVo();
		
		actionStatus.setStatusDate(new DateTime());
		actionStatus.setChangedBy(mos);
		actionStatus.setStatus(status);
		
		patientICPAction.setCurrentStatus(actionStatus);
		patientICPAction.getStatusHistory().add(actionStatus);
		
		
		if (ICPActionStatus.MET.equals(status) || ICPActionStatus.NOT_MET.equals(status))
		{
			if (Boolean.FALSE.equals(canCounterSign) && Boolean.TRUE.equals(patientICPAction.getAction().getRequiresCounterSignature()))
			{
				patientICPAction.setRequiresCounterSigning(Boolean.TRUE);
			}
		}
		
		PatientICPAction domPatientICPAction = PatientICPAction_StatusChangeVoAssembler.extractPatientICPAction(getDomainFactory(), patientICPAction);
		
		getDomainFactory().save(domPatientICPAction);
		
		return PatientICPAction_PresentationVoAssembler.create(domPatientICPAction);
	}


	/**
	 * Function used to remove a Stage from Scope
	 */
	public void removeStageFromScope(PatientICP_PresentationVo patientICP, PatientICPStageRefVo stage, MemberOfStaffLiteVo mos) throws StaleObjectException
	{
		// Check Patient ICP parameter
		if (patientICP == null || patientICP.getID_PatientICP() == null)
			throw new CodingRuntimeException("Parameter 'patientICP' is null in function 'removeStageFromScope'");
		
		// Check stage parameter
		if (stage == null || stage.getID_PatientICPStage() == null)
			throw new CodingRuntimeException("Parameter 'stage' is null in function 'removeStageFromScope'");
		
		if (mos == null)
			throw new CodingRuntimeException("Parameter 'mos' is null in function 'removeStageFromScope'");
	

		// Get Stage
		PatientICPHelperInterface helper = (PatientICPHelperInterface) getDomainImpl(PatientICPDomainHelper.class);
		PatientICPStage_StatusChangeVo patientStage = helper.getPatientStageForStatusChange(stage);

		// Test stage for StaleObject
		if (patientStage.getVersion_PatientICPStage() != stage.getVersion_PatientICPStage())
			throw new StaleObjectException(getDomainFactory().getDomainObject(PatientICPStage.class, stage.getID_PatientICPStage()));
		
		// Prepare state to remove from scope
		patientStage = prepareStageToRemoveFromScope(patientStage, mos);
		
		// Save Stage
		getDomainFactory().save(PatientICPStage_StatusChangeVoAssembler.extractPatientICPStage(getDomainFactory(), patientStage));
		
		// Update the Patient ICP outstanding disciplines
		updatePatientICPOutstandingDisciplines(patientICP, stage, null);
	}


	/**
	 * Function used to remove a Phase from Scope
	 */
	public void removePhaseFromScope(PatientICP_PresentationVo patientICP, PatientICPPhaseRefVo phase, MemberOfStaffLiteVo mos) throws StaleObjectException
	{
		// Check Patient ICP parameter
		if (patientICP == null || patientICP.getID_PatientICP() == null)
			throw new CodingRuntimeException("Parameter 'patientICP' is null in function 'removePhaseFromScope'");
		
		// Check phase parameter
		if (phase == null || phase.getID_PatientICPPhase() == null)
			throw new CodingRuntimeException("Parameter 'phase' is null in function 'removePhaseFromScope'");
		
		
		// Get Phase
		PatientICPHelperInterface helper = (PatientICPHelperInterface) getDomainImpl(PatientICPDomainHelper.class);
		PatientICPPhase_StatusChangeVo patientPhase = helper.getPatientPhaseForStatusChange(phase);
		
		// Prepare phase to remove from scope
		patientPhase = preparePhaseToRemoveFromScope(patientPhase, mos);
		
		// Save Phase
		getDomainFactory().save(PatientICPPhase_StatusChangeVoAssembler.extractPatientICPPhase(getDomainFactory(), patientPhase));

		// Update the Patient ICP outstanding disciplines
		updatePatientICPOutstandingDisciplines(patientICP, null, phase);
	}

	
	private PatientICPStage_StatusChangeVo prepareStageToRemoveFromScope(PatientICPStage_StatusChangeVo stage, MemberOfStaffLiteVo mos)
	{
		// Create stage status
		PatientICPStageStatusVo stageStatus = new PatientICPStageStatusVo();
		// Populate values to status
		stageStatus.setStatusDate(new DateTime());
		stageStatus.setChangedBy(mos.getIMosName());
		stageStatus.setStatus(ICPStageStatus.NOTINSCOPE);
		
		// Set status to stage
		stage.setCurrentStatus(stageStatus);
		stage.getStatusHistory().add(stageStatus);
		
		// Iterate stage phases
		for (PatientICPPhase_StatusChangeVo phase : stage.getStagePhases())
		{
			// If phase is in SCOPE then remove it
			if (ICPPhaseStatus.INPROGRESS.equals(phase.getCurrentStatus().getStatus()))
			{
				phase = preparePhaseToRemoveFromScope(phase, mos);
			}
		}
		
		return stage;
	}


	private PatientICPPhase_StatusChangeVo preparePhaseToRemoveFromScope(PatientICPPhase_StatusChangeVo phase, MemberOfStaffLiteVo mos)
	{
		// Create a new phase status
		PatientICPPhaseStatusVo phaseStatus = new PatientICPPhaseStatusVo();
		// Populate values to status
		phaseStatus.setStatusDate(new DateTime());
		phaseStatus.setChangedBy(mos.getIMosName());
		phaseStatus.setStatus(ICPPhaseStatus.NOTINSCOPE);
		
		// Set status to phase
		phase.setCurrentStatus(phaseStatus);
		phase.getStatusHistory().add(phaseStatus);
		
		// Iterate phase actions
		for (PatientICPAction_StatusChangeVo action : phase.getPhaseActions())
		{
			action = prepareActionToRemoveFromScope(action, mos);
		}
		
		return phase;
	}


	private PatientICPAction_StatusChangeVo prepareActionToRemoveFromScope(PatientICPAction_StatusChangeVo action, MemberOfStaffLiteVo mos)
	{
		// If the action is in SCOPE then remove it from scope
		if (ICPActionStatus.OUTSTANDING.equals(action.getCurrentStatus().getStatus()))
		{
			// Create a new action status
			PatientICPActionStatusVo actionStatus = new PatientICPActionStatusVo();
			// Populate values to status
			actionStatus.setStatusDate(new DateTime());
			actionStatus.setChangedBy(mos);
			actionStatus.setStatus(ICPActionStatus.NOTINSCOPE);
			
			// Set status to action
			action.setCurrentStatus(actionStatus);
			action.getStatusHistory().add(actionStatus);
		}
		
		return action;
	}




	
	/**
	 * Function used to update the Outstanding Disciplines
	 */
	private void updatePatientICPOutstandingDisciplines(PatientICP_PresentationVo patientICP, PatientICPStageRefVo stage, PatientICPPhaseRefVo phase) throws StaleObjectException
	{
		patientICP.setHasOutstandingAdminActions(Boolean.FALSE);
		patientICP.setHasOutstandingClinicalActions(Boolean.FALSE);
		patientICP.setHasOutstandingNursingActions(Boolean.FALSE);
		patientICP.setHasOutstandingPhysioActions(Boolean.FALSE);
		
		
		for (PatientICPStage_PresentationVo patientStage : patientICP.getStages())
		{
			if (stage != null && patientStage.getID_PatientICPStage().equals(stage.getID_PatientICPStage()))
				continue;
			
			if (ICPStageStatus.OUTSTANDING.equals(patientStage.getCurrentStatus().getStatus()))
			{
				for (PatientICPPhase_PresentationVo patientPhase : patientStage.getPhases())
				{
					if (phase != null && patientPhase.getID_PatientICPPhase().equals(phase.getID_PatientICPPhase()))
						continue;
					
					if (ICPPhaseStatus.INPROGRESS.equals(patientPhase.getCurrentStatus().getStatus()))
					{
						for (PatientICPAction_PresentationVo action : patientPhase.getActions())
						{
							if (ICPActionStatus.OUTSTANDING.equals(action.getCurrentStatus().getStatus()))
							{
								if (action.getAction().getDiscipline().contains(HcpDisType.MEDICAL))
									patientICP.setHasOutstandingClinicalActions(Boolean.TRUE);
								
								if (action.getAction().getDiscipline().contains(HcpDisType.NURSING))
									patientICP.setHasOutstandingNursingActions(Boolean.TRUE);
								
								if (action.getAction().getDiscipline().contains(HcpDisType.THERAPY))
									patientICP.setHasOutstandingPhysioActions(Boolean.TRUE);
								
								if (action.getAction().getDiscipline().contains(HcpDisType.OTHER))
									patientICP.setHasOutstandingAdminActions(Boolean.TRUE);
							}
						}
					}
				}
			}
		}
		
		getDomainFactory().save(PatientICP_PresentationVoAssembler.extractPatientICP(getDomainFactory(), patientICP));
	}
}
