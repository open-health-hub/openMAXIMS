//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.70 build 3434.21163)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.icp.forms.recordicpactionvariance;

import java.util.ArrayList;
import java.util.List;

import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.icp.vo.PatientICPActionStatusVo;
import ims.icp.vo.lookups.ICPVarianceType;
import ims.icps.instantiation.domain.objects.PatientICP;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		PatientICPActionStatusVo actionStatus = form.getGlobalContext().ICP.getActionStatus();
		
		form.cmbVarianceCategory().setValue(actionStatus.getVarianceCategory());
		onCmbVarianceCategoryValueChanged();
		
		form.cmbVarianceType().setValue(actionStatus.getVarianceType());
		form.txtComment().setValue(actionStatus.getVarianceComment());
	}
	private void initialize()
	{
		form.cmbVarianceCategory().clear();
		form.cmbVarianceType().clear();
		
		ICPVarianceType[] inst = ICPVarianceType.getNegativeInstances();
		
		if(inst != null)
		{
			for (int i = 0; i < inst.length; i++)
			{
				ICPVarianceType type = inst[i];
				
				if(type.getParent() == null)
					form.cmbVarianceCategory().newRow(type, type.getText());
			}
		}
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientICPActionStatusVo actionStatus = (PatientICPActionStatusVo) form.getGlobalContext().ICP.getActionStatus().clone();
		
		actionStatus.setVarianceCategory(form.cmbVarianceCategory().getValue());
		actionStatus.setVarianceType(form.cmbVarianceType().getValue());
		actionStatus.setVarianceComment(form.txtComment().getValue());
		//-------------------------------------------------------
		String[] err = actionStatus.validate(getUIRulesValidation());
											//---------------------
		
		if(err != null && err.length > 0)
		{
			engine.showErrors(err);
			return;
		}
		
		try
		{
			domain.updateStatusDetails(form.getGlobalContext().ICP.getPatientICPRecord(), actionStatus);
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.toString());
			return;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			if (e.getStaleObject() instanceof PatientICP)
			{
				if (((PatientICP) e.getStaleObject()).getCompletedDateTime() != null)
				{
					engine.close(DialogResult.CANCEL);
				}
			}
			
			return;
		}
		
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onCmbVarianceCategoryValueChanged() throws PresentationLogicException
	{
		form.cmbVarianceType().clear();
		
		if(form.cmbVarianceCategory().getValue() != null)
		{
			ims.icp.vo.lookups.ICPVarianceTypeCollection lookupCollection = ims.icp.vo.lookups.LookupHelper.getICPVarianceType(this.domain.getLookupService());
			for(int x = 0; x < lookupCollection.size(); x++)
			{
				if(lookupCollection.get(x).getParent() != null && form.cmbVarianceCategory().getValue().getID() == lookupCollection.get(x).getParent().getID())
				{
					this.form.cmbVarianceType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
				}
			}
		}
	}
	private String[] getUIRulesValidation() 
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.cmbVarianceCategory().getValue() == null)
			errors.add("The field Variance category is Mandatory");
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

}
