//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.icp.forms.patienticpactionlinkeddetailscomponent;

import java.util.ArrayList;

import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentLiteVo;
import ims.assessment.vo.PatientAssessmentLiteVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.ICPCompLinkedType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.icp.vo.PatientICPActionFullVo;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.ocrr.vo.OrderEntryTemplateLiteVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Domain Interface functions
	// -------------------------------------------------------------------------------------------------------------------------------------------------
	/**
	 * Function used to set the value to the component. Based on the PatientICPActionRefVO 
	 * provided will populate the component with corresponding details
	 * (form, assessment, graphical assessment) and determine current user action rights
	 */
	public void setValue(ims.icps.instantiation.vo.PatientICPActionRefVo patientICPAction)
	{
		// Set Patient Action value to local context (full VO retrieved from domain)
		form.getLocalContext().setPatientICPAction(domain.getPatientICPAction(patientICPAction));

		// Set the user rights
		form.getLocalContext().setUserHasEditRights(isActionEditable());

		// Clear additional local contexts
		form.getLocalContext().setSelectedPatientAssessment(null);
		form.getLocalContext().setSelectedPatientGraphicalAssessment(null);

		// Refresh the form
		open();
	}

	/**
	 *	Function used to set the value to the component.
	 *	Based on the PatientICPActionRefVO provided will populate the component with corresponding details
	 *	(form, assessment, graphical assessment) and determine current user action rights 
	 */
	public void setValue(PatientICPActionRefVo patientICPActionRef, boolean allowEdit)
	{
		// Set Patient Action value to local context (full VO retrieved from domain)
		form.getLocalContext().setPatientICPAction(domain.getPatientICPAction(patientICPActionRef));

		// Set the user rights
		form.getLocalContext().setUserHasEditRights(allowEdit && isActionEditable());

		// Clear additional local contexts
		form.getLocalContext().setSelectedPatientAssessment(null);
		form.getLocalContext().setSelectedPatientGraphicalAssessment(null);

		// Refresh the form
		open();
	}

	/**
	 * Function that determines if current logged user has Write Rights over the linked item of ICP Action 
	 * Will check if current logged user has a discipline,
	 * then if the ICP Action has disciplines associated (will return false if either user or ICP Action don't have disciplines associated or user is not a HCP);
	 * afterwards it will check the current logged user discipline against the disciplines associated with the ICP Action or the current logged user discipline
	 * parent against the disciplines associated with the ICP Action.
	 * 
	 * @return true (meaning the user has WRITE rights) or false (meaning the user doesn't have WRITE rights) over the associated items in ICP Action
	 */
	private boolean isActionEditable()
	{
		// If current user has no discipline return false
		if (domain.getHcpLiteUser() == null || !((HcpLiteVo) domain.getHcpLiteUser()).getHcpTypeIsNotNull())
			return false;

		// Check for a patient action to be selected
		if (!form.getLocalContext().getPatientICPActionIsNotNull() // If no PatientICPAction is selected
				|| !form.getLocalContext().getPatientICPAction().getActionIsNotNull() // or if it has no ICPAction associated
				|| !form.getLocalContext().getPatientICPAction().getAction().getDisciplineIsNotNull()) // or if there are no disciplines associated
			return false; // return false;

		// Iterate disciplines associated with ICP Action
		for (int i = 0; i < form.getLocalContext().getPatientICPAction().getAction().getDiscipline().size(); i++)
		{
			// Shorten the discipline name (for easier usage & code reading)
			HcpDisType discipline = form.getLocalContext().getPatientICPAction().getAction().getDiscipline().get(i);

			// Get current user discipline (we tested it in the beginning of the
			// function and it's not null)
			HcpDisType userDiscipline = ((HcpLiteVo) domain.getHcpLiteUser()).getHcpType();

			// Check if user discipline matches the discipline associated to
			// action
			if (discipline.getID() == userDiscipline.getID())
				return true;

			// Check if user parent discipline matches the discipline associated
			// to action
			if (userDiscipline.getParent() != null && userDiscipline.getParent().getID() == discipline.getID())
				return true;
		}

		// If no match has been found by this point deny write rights for user
		return false;
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers region
	// -------------------------------------------------------------------------------------------------------------------------------------------------
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the component
		initialize();

		// Populate with default data
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onDynamicFormFormModeChanged(FormMode formMode)
	{
		form.setMode(formMode);
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onRecbrStructuralAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Set local context for selected User Assessment with new value
		form.getLocalContext().setSelectedPatientAssessment(domain.getPatientAssessment(form.lyrMain().tabPageAssessment().recbrStructuralAssessment().getValue()));

		// Check for selected PatientIcpAction to have and action with a linked UserAssessment
		// Throw exception otherwise as the programming logic is off
		if (!form.getLocalContext().getPatientICPActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getAction().getLinkedAssessmentIsNotNull())
			throw new CodingRuntimeException("Logical Error - Selected PatientICPAction must not be null and must contain an action with a linked UserAssesment");

		// Populate PatientAssessment instance controls
		populateUserAssessmentInstanceControls(form.getLocalContext().getSelectedPatientAssessment(), form.getLocalContext().getPatientICPAction().getAction().getLinkedAssessment());

		// Refresh control state
		updateControlsState();
	}

	@Override
	protected void onRecbrGraphicalAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Set local context for selected Graphical Assessment with new value
		form.getLocalContext().setSelectedPatientGraphicalAssessment(domain.getPatientGraphicAssessment(form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().getValue()));

		// Check for selected PatientIcpAction to have and action with a linked GraphicalAssessment
		// Throw exception otherwise as the programming logic is off
		if (!form.getLocalContext().getPatientICPActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getAction().getLinkedGraphicAssessmentIsNotNull())
			throw new CodingRuntimeException("Logical Error - Selected PatientICPAction must not be null and must contain an action with a linked GraphicalAssesment");

		// Populate PatientGraphicalAssessment instance controls
		populateGraphicalAssessmentIstanceControls(form.getLocalContext().getSelectedPatientGraphicalAssessment(), form.getLocalContext().getPatientICPAction().getAction().getLinkedGraphicAssessment());

		// Refresh control state
		updateControlsState();
	}

	@Override
	protected void onImbStructuralContextInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{}

	@Override
	protected void onImbStructuralHelpClick() throws ims.framework.exceptions.PresentationLogicException
	{}

	@Override
	protected void onImbGraphicalHelpClick() throws ims.framework.exceptions.PresentationLogicException
	{}

	@Override
	protected void onImbGraphicalContextInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{}

	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException
	{
		if (form.chkComplete().getValue())
		{
			form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().initializeComponent();
			form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().initializeComponent();
		}
		
		updateControlsState();
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Logic functions
	// -------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize() throws FormOpenException
	{
		// Set user rights (at this point it might always be false)
		form.getLocalContext().setUserHasEditRights(isActionEditable());

		// Clear local contexts
		form.getLocalContext().setPatientICPAction(null);
		form.getLocalContext().setSelectedPatientAssessment(null);
		form.getLocalContext().setSelectedPatientGraphicalAssessment(null);

		// Set authoring information components as required
		form.lyrMain().tabPageAssessment().authStructuredAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
	}

	public void open()
	{
		// Clear screen
		clearScreen();

		// Check local context for value - set value to appropriate tab
		if (form.getLocalContext().getPatientICPActionIsNotNull() && form.getLocalContext().getPatientICPAction().getActionIsNotNull())
		{
			if (ICPCompLinkedType.FORM.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			{
				try
				{
					// Set form
					boolean readOnly = Boolean.FALSE.equals(form.getLocalContext().getUserHasEditRights());
					form.lyrMain().tabPageForm().dynamicForm().setReadOnly(readOnly);
					ims.domain.FormName formName = new ims.domain.FormName(form.getLocalContext().getPatientICPAction().getAction().getLinkedForm().getID_AppForm());
					form.lyrMain().tabPageForm().dynamicForm().open(formName);
					
					form.lyrMain().tabPageForm().setCaption(formName.getName());

					form.lyrMain().showtabPageForm();
				}
				catch (Exception exception)
				{
					// Treat any exceptions that might arise
					exception.printStackTrace();
					engine.showMessage("Error displaying linked form: " + exception.getMessage());
					return;
				}

			}

			if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			{
				// Set user defined assessment
				populateUserAssessments(form.getLocalContext().getPatientICPAction());

				form.lyrMain().showtabPageAssessment();
			}

			if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			{
				// Set graphical assessment
				populateGraphicalAssessments(form.getLocalContext().getPatientICPAction());

				form.lyrMain().showtabPageGraphicalAssessment();
			}

			if (ICPCompLinkedType.ORDER_TEMPLATE.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			{
				// Set order template (form) tab
				populateOrderTemplate(form.getLocalContext().getPatientICPAction());

				form.lyrMain().showtabPageForm();
			}
			
			if (ICPCompLinkedType.NONE.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			{
				form.lyrMain().showtabPageNone();
			}
		}

		// Set component mode to VIEW
		form.setMode(FormMode.VIEW);
	}

	private void clearScreen()
	{
		// Clear non-instance controls

		// Clear instance controls
		clearInstanceControls();
	}

	public void clearInstanceControls()
	{
		// Clear FORM tab
		form.lyrMain().tabPageForm().dynamicForm().clear();

		// Clear ASSESSMENT tab
		form.lyrMain().tabPageAssessment().recbrStructuralAssessment().clear();
		form.lyrMain().tabPageAssessment().ccStrructuralAssessment().clearComponent();
		form.lyrMain().tabPageAssessment().authStructuredAssessment().setValue(null);
		form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().setValue(null);

		form.chkComplete().setValue(null);

		// Clear GRAPHICAL ASSESSMENT tab
		form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().clear();
		form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().clear(false, true);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().setValue(null);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(null);

		form.chkComplete().setValue(null); // Josan George: I know this line is
		// duplicated, but keep it just the
		// same, to remember to clear this
		// control

		// Clear REPORT tab
		form.lyrMain().tabPageReport().ccReportBuilder().clear();
	}

	public void updateControlsState()
	{
		// Shorten the Patient ICP Action local context
		PatientICPActionFullVo patientICPAction = form.getLocalContext().getPatientICPAction();

		// Buttons
		// Conditions for NEW button
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getUserHasEditRights() && form.getLocalContext().getPatientICPActionIsNotNull() && patientICPAction.getActionIsNotNull() && (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) || ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType())));

		// Conditions for EDIT button
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getUserHasEditRights() && form.getLocalContext().getPatientICPActionIsNotNull() && patientICPAction.getActionIsNotNull() && ((ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) && form.getLocalContext().getSelectedPatientAssessmentIsNotNull() && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getSelectedPatientAssessment().getStatus())) || (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) && form.getLocalContext().getSelectedPatientGraphicalAssessmentIsNotNull() && !PatientAssessmentStatusReason.COMPLETED.equals(form.getLocalContext().getSelectedPatientGraphicalAssessment().getStatus()))));
		
		// Conditions for SAVE and CANCEL buttons - only EDIT mode
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnSave().setEnabled(true);
			form.btnSave().setVisible(form.getLocalContext().getPatientICPActionIsNotNull() && patientICPAction.getActionIsNotNull() && (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) || ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType())));
			
			form.btnCancel().setEnabled(true);
			form.btnCancel().setVisible(form.getLocalContext().getPatientICPActionIsNotNull() && patientICPAction.getActionIsNotNull() && (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) || ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType())));
		}

		// Check-box completed
		form.chkComplete().setVisible(form.getLocalContext().getPatientICPActionIsNotNull() // A PatientICPAction must be selected
				&& patientICPAction.getActionIsNotNull() // an ICP Action must be associated
				&& (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) // Linked Item must be of type USER ASSESSEMENT
				|| ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType()))); // Linked Item must be of type GRAPHICAL ASSESSMENT

		form.chkComplete().setEnabled(FormMode.EDIT.equals(form.getMode()) // Form must be in EDIT mode
				&& form.getLocalContext().getPatientICPActionIsNotNull() // A PatientICPAction must be selected
				&& patientICPAction.getActionIsNotNull() // An ICP Action must be associated
				&& (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()) || ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType())));

		// FORM tab

		// Shorten the conditions for showing the controls needed for FORM to be shown
		boolean showFormCondition = form.getLocalContext().getPatientICPActionIsNotNull() // A PatientICPAction must be selected
				&& patientICPAction.getActionIsNotNull() // an ICP Action must be associated
				&& (ICPCompLinkedType.FORM.equals(patientICPAction.getAction().getLinkedType()) // Linked Item must be of type FORM
				|| ICPCompLinkedType.ORDER_TEMPLATE.equals(patientICPAction.getAction().getLinkedType())); // Linked Item must be of type ORDER TEMPLATE

		form.lyrMain().tabPageForm().setHeaderVisible(showFormCondition);
		form.lyrMain().tabPageForm().setVisible(showFormCondition);

		// ASSESSMENT Tab

		// Shorten the conditions for showing the controls needed for ASSESSMENT to be shown
		boolean showAssessmentCondition = form.getLocalContext().getPatientICPActionIsNotNull() // A PatientICPAction must be selected
				&& patientICPAction.getActionIsNotNull() // an ICP Action must be associated
				&& ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientICPAction.getAction().getLinkedType()); // Linked Item must be of type ASSESSMENT

		form.lyrMain().tabPageAssessment().setHeaderVisible(showAssessmentCondition);
		form.lyrMain().tabPageAssessment().setVisible(showAssessmentCondition);

		// Assessment
		form.lyrMain().tabPageAssessment().ccStrructuralAssessment().setMode(form.getMode());
		form.lyrMain().tabPageAssessment().ccStrructuralAssessment().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		// Authoring information and authoring completed information controls
		form.lyrMain().tabPageAssessment().setauthStructuredAssessmentVisible(showAssessmentCondition);
		form.lyrMain().tabPageAssessment().setauthStructuredAssessmentEnabled(showAssessmentCondition && FormMode.EDIT.equals(form.getMode()) && !form.getLocalContext().getSelectedPatientAssessmentIsNotNull()
																				&& Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

		form.lyrMain().tabPageAssessment().setauthStructuredAssessmentCompletedVisible(showAssessmentCondition && form.chkComplete().getValue());
		form.lyrMain().tabPageAssessment().setauthStructuredAssessmentCompletedEnabled(showAssessmentCondition && FormMode.EDIT.equals(form.getMode()) && form.chkComplete().getValue()
																							&& Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

		// GRAPHICAL ASSESSMENT Tab

		// Shorten the condition for showing the controls needed for GRAPHICAL ASSESSMENT to be shown
		boolean showGraphicalAssessmentCondition = form.getLocalContext().getPatientICPActionIsNotNull() // A PatientICPAction must be selected
				&& patientICPAction.getActionIsNotNull() // an ICP Action must be associated
				&& ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientICPAction.getAction().getLinkedType()); // Linked Item must be of type GRAPHICAL ASSESSMENT

		form.lyrMain().tabPageGraphicalAssessment().setHeaderVisible(showGraphicalAssessmentCondition);
		form.lyrMain().tabPageGraphicalAssessment().setVisible(showGraphicalAssessmentCondition);
		
		// Graphical Assessment
		form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().setEnabled(FormMode.EDIT.equals(form.getMode()));	//	WDEV-12413

		// Authoring information and authoring completed information controls
		form.lyrMain().tabPageGraphicalAssessment().setauthGraphicalAssessmentVisible(showGraphicalAssessmentCondition);
		form.lyrMain().tabPageGraphicalAssessment().setauthGraphicalAssessmentEnabled(showGraphicalAssessmentCondition && FormMode.EDIT.equals(form.getMode()) && !form.getLocalContext().getSelectedPatientGraphicalAssessmentIsNotNull()
																						&& Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

		form.lyrMain().tabPageGraphicalAssessment().setauthGraphicalAssessmentCompletedVisible(showGraphicalAssessmentCondition && form.chkComplete().getValue());
		form.lyrMain().tabPageGraphicalAssessment().setauthGraphicalAssessmentCompletedEnabled(showGraphicalAssessmentCondition && FormMode.EDIT.equals(form.getMode()) && form.chkComplete().getValue()
																								&& Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

		// REPORT Tab

		// Shorten the condition for showing the controls needed for REPORT to be shown
		boolean showReportCondition = (showAssessmentCondition && form.getLocalContext().getSelectedPatientAssessment() != null && form.getLocalContext().getSelectedPatientAssessment().getAssessmentData().getUserAssessment().getAssociatedReport() != null)
									|| (showGraphicalAssessmentCondition && form.getLocalContext().getSelectedPatientGraphicalAssessment() != null && form.getLocalContext().getSelectedPatientGraphicalAssessment().getAssessmentData().getGraphic().getAssociatedReportForPrinting() != null);

		form.lyrMain().tabPageReport().setHeaderVisible(showReportCondition);
		form.lyrMain().tabPageReport().setHeaderEnabled(FormMode.VIEW.equals(form.getMode()));
		
		form.lyrMain().tabPageNone().setHeaderVisible(form.getLocalContext().getPatientICPAction() == null || patientICPAction.getAction() == null || ICPCompLinkedType.NONE.equals(patientICPAction.getAction().getLinkedType()));
		form.lyrMain().tabPageNone().setVisible(form.getLocalContext().getPatientICPAction() == null || patientICPAction.getAction() == null || ICPCompLinkedType.NONE.equals(patientICPAction.getAction().getLinkedType()));
//		form.lyrMain().tabPageReport().setVisible(showReportCondition);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Check if a PatientICPAction exists
		// Throw an exception if no selected PatientICPAction exists as this
		// means the logic is off
		if (!form.getLocalContext().getPatientICPActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getActionIsNotNull())
			throw new CodingRuntimeException("Logic error - Selected PatientICPAction can not be null and must have an action associated");

		// Determine what kind of instance we need to create
		if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
		{
			form.lyrMain().showtabPageAssessment();
			newPatientAssessmentInstance(domain.getAssessment(form.getLocalContext().getPatientICPAction().getAction().getLinkedAssessment()));
			return;
		}

		if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
		{
			form.lyrMain().showtabPageGraphicalAssessment();
			newPatientGraphicalAssessment(domain.getGraphicAssessment(form.getLocalContext().getPatientICPAction().getAction().getLinkedGraphicAssessment()));
			return;
		}
	}

	private void newPatientAssessmentInstance(UserAssessmentVo userAssessment)
	{
		// Clear selected PatientAssessment local context
		form.getLocalContext().setSelectedPatientAssessment(null);

		// Create a new PatientAssessment
		PatientAssessmentVo patientAssessment = new PatientAssessmentVo();

		// Set PatientAssessment data
		patientAssessment.setCareContext(form.getLocalContext().getPatientICPAction().getCareContext());
		
		// WDEV-11526
		patientAssessment.setEpisodeOfCare(domain.getEpisodeOfCare(form.getLocalContext().getPatientICPAction().getCareContext()));
		
		//WDEV-11721
		patientAssessment.setPatient(form.getLocalContext().getPatientICPAction().getPatient());

		patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
		patientAssessment.getAssessmentData().setUserAssessment(userAssessment);
		patientAssessment.getAssessmentData().setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());

		// Initialize authoring information
		form.lyrMain().tabPageAssessment().authStructuredAssessment().initializeComponent();

		patientAssessment.setAuthoringInformation(form.lyrMain().tabPageAssessment().authStructuredAssessment().getValue());

		patientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		patientAssessment.setStatusReason(PatientAssessmentStatusReason.NOTCOMMENCED);

		// Populate instance controls with new PatientAssessment data
		populateUserAssessmentInstanceControls(patientAssessment, userAssessment);

		// Set mode to Edit
		form.setMode(FormMode.EDIT);
	}

	/**
	 * @param graphicAssessment
	 * 
	 */
	private void newPatientGraphicalAssessment(GraphicAssessmentVo graphicAssessment)
	{
		// Clear selected PatientAssessment local context
		form.getLocalContext().setSelectedPatientGraphicalAssessment(null);

		// Create a new PatientAssessment
		PatientAssessmentVo patientGraphicalAssessment = new PatientAssessmentVo();

		// Set PatientAssessment data
		patientGraphicalAssessment.setCareContext(form.getLocalContext().getPatientICPAction().getCareContext());

		// WDEV-11526
		patientGraphicalAssessment.setEpisodeOfCare(domain.getEpisodeOfCare(form.getLocalContext().getPatientICPAction().getCareContext()));
		patientGraphicalAssessment.setPatient(form.getLocalContext().getPatientICPAction().getPatient());

		patientGraphicalAssessment.setAssessmentData(new PatientAssessmentDataVo());
		patientGraphicalAssessment.getAssessmentData().setGraphic(graphicAssessment);

		// Initialize authoring information
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().initializeComponent();

		patientGraphicalAssessment.setAuthoringInformation(form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().getValue());

		patientGraphicalAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		patientGraphicalAssessment.setStatusReason(PatientAssessmentStatusReason.NOTCOMMENCED);

		// Populate instance controls with new PatientAssessment data
		populateGraphicalAssessmentIstanceControls(patientGraphicalAssessment, graphicAssessment);

		// Set mode to Edit
		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		// Determine what kind of instance we need to create
		if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
		{
			form.lyrMain().showtabPageAssessment();
		}

		if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
		{
			form.lyrMain().showtabPageGraphicalAssessment();
		}
		
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		// Check if a PatientICPAction exits
		// Throw an exception if no selected PatientICPAction exists as this
		// means the logic is off
		if (!form.getLocalContext().getPatientICPActionIsNotNull() || !form.getLocalContext().getPatientICPAction().getActionIsNotNull())
			throw new CodingRuntimeException("Logic error - Selected PatientICPAction can not be null and must have an action associated");

		// Decide what are we saving
		// Patient assessment based on user assessment
		if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			return savePatientAssessment();

		// Patient assessment based on graphical assessment
		if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(form.getLocalContext().getPatientICPAction().getAction().getLinkedType()))
			return savePatientGraphicalAssessment();

		// Return false otherwise
		return false;
	}

	private boolean savePatientAssessment()
	{
		try
		{
			// Get data from the screen
			PatientAssessmentVo patientAssessment = null;

			if (form.getLocalContext().getSelectedPatientAssessmentIsNotNull())
			{
				patientAssessment = populatePatientAssessmentDataFromInstanceControls((PatientAssessmentVo) form.getLocalContext().getSelectedPatientAssessment().clone());
			}
			else
			{
				patientAssessment = populatePatientAssessmentDataFromInstanceControls(null);
			}

			// Validate data && display errors if any
			
			//WDEV-15979
			ArrayList<String> errorsAll = new ArrayList<String>();
			if (form.chkComplete().getValue() == true && form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().getValue() == null)
			{
				errorsAll.add("Completing Information is mandatory.");
			}
			
			if (form.chkComplete().getValue() == true)
			{
				AuthoringInformationVo authoringInfo = form.lyrMain().tabPageAssessment().authStructuredAssessment().getValue();
				AuthoringInformationVo completingInfo = form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().getValue();
				
				if (authoringInfo != null && completingInfo != null)
				{	
					if (authoringInfo.getAuthoringDateTime().isGreaterThan(completingInfo.getAuthoringDateTime()))
					{
						errorsAll.add("Completing Date cannot be set before Authoring Date.");
					}
				}
			}
				
			if (form.chkComplete().getValue() == true)
			{
				String[] ccStrructuralAssessmentErrors = form.lyrMain().tabPageAssessment().ccStrructuralAssessment().validateData();
				if (ccStrructuralAssessmentErrors!=null && ccStrructuralAssessmentErrors.length>0)
				{
					for (int i=0;i<ccStrructuralAssessmentErrors.length;i++)
					{
						errorsAll.add(form.lyrMain().tabPageAssessment().ccStrructuralAssessment().validateData()[i]);
					}
				}
			}
			
			String[] patientAssessmentErrors = patientAssessment.validate();
			if (patientAssessmentErrors!=null && patientAssessmentErrors.length>0)
			{
				for (int i=0;i<patientAssessmentErrors.length;i++)
				{
					errorsAll.add(patientAssessmentErrors[i]);
				}
			}
			
			if (errorsAll.size() > 0)
			{
				String[] errors = new String[errorsAll.size()];
				errorsAll.toArray(errors);
				engine.showErrors(errors);
				return false;
			}
			

			// Attempt save
			form.getLocalContext().setSelectedPatientAssessment(domain.savePatientAssessment(patientAssessment));

			// Return true
			return true;
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return true;
		}
		catch (ForeignKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
	}

	private boolean savePatientGraphicalAssessment()
	{
		try
		{
			// Get data from the screen
			PatientAssessmentVo patientGraphicalAssessment = null;

			if (form.getLocalContext().getSelectedPatientGraphicalAssessmentIsNotNull())
			{
				patientGraphicalAssessment = populatePatientGraphicalAssessmentDataFromInstanceControls((PatientAssessmentVo) form.getLocalContext().getSelectedPatientGraphicalAssessment().clone());
			}
			else
			{
				patientGraphicalAssessment = populatePatientGraphicalAssessmentDataFromInstanceControls(null);
			}

			// Validate data && display errors if any
			
			//WDEV-15979
			ArrayList<String> errorsAll = new ArrayList<String>();
			if (form.chkComplete().getValue() == true && form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().getValue()==null)
			{
				errorsAll.add("Completing Information is mandatory !");
			}
			
			if (form.chkComplete().getValue() == true)
			{
				AuthoringInformationVo authoringInfo = form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().getValue();
				AuthoringInformationVo completingInfo = form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().getValue();
				
				if (authoringInfo != null && completingInfo != null)
				{	
					if (authoringInfo.getAuthoringDateTime().isGreaterThan(completingInfo.getAuthoringDateTime()))
					{
						errorsAll.add("Completing Date cannot be set before Authoring Date.");
					}
				}
			}
			
				
			if (form.chkComplete().getValue() == true)
			{
				String[] ccGraphicalAssessmentErrors = form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().validateData();
				if (ccGraphicalAssessmentErrors != null && ccGraphicalAssessmentErrors.length > 0)
				{
					for (int i = 0; i < ccGraphicalAssessmentErrors.length; i++)
					{
						errorsAll.add(ccGraphicalAssessmentErrors[i]);
					}
				}
			}
		
			String[] patientGraphicalAssessmentErrors = patientGraphicalAssessment.validate();
			if (patientGraphicalAssessmentErrors != null && patientGraphicalAssessmentErrors.length > 0)
			{
				for (int i = 0; i < patientGraphicalAssessmentErrors.length; i++)
				{
					errorsAll.add(patientGraphicalAssessmentErrors[i]);
				}
			}
			
			if (errorsAll.size() > 0)
			{
				String[] errors = new String[errorsAll.size()];
				errorsAll.toArray(errors);
				engine.showErrors(errors);
				return false;
			}

			// Attempt save
			form.getLocalContext().setSelectedPatientGraphicalAssessment(domain.savePatientGraphicalAssessment(patientGraphicalAssessment));

			// Return true
			return true;
		}
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return true;
		}
		catch (ForeignKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			engine.showMessage(exception.getMessage());
			return false;
		}
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used to populate UserAssessment controls
	// -------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	private void populateUserAssessments(PatientICPActionFullVo patientICPAction)
	{
		// Clear the assessment controls
		form.lyrMain().tabPageAssessment().recbrStructuralAssessment().clear();

		form.lyrMain().tabPageAssessment().ccStrructuralAssessment().clearComponent();
		form.lyrMain().tabPageAssessment().authStructuredAssessment().setValue(null);
		form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().setValue(null);

		// Check the Patient ICP Action parameter
		// Should never be null, throw a CodingRuntimeException
		// so that programmers know the code logic is off
		if (patientICPAction == null || !patientICPAction.getActionIsNotNull())
			throw new CodingRuntimeException("Logical ERROR - The PatientICPAction Vo or linked ICP Action must not be null.");

		// Populate record browser with instantiated user assessment
		populateUserAssessmentRecordBrowser(domain.listPatientAssessments(patientICPAction.getCareContext(), patientICPAction.getAction().getLinkedAssessment()));

		// Get the extended user assessment (instantiated) selected (if any) in record browser
		form.getLocalContext().setSelectedPatientAssessment(domain.getPatientAssessment(form.lyrMain().tabPageAssessment().recbrStructuralAssessment().getValue()));

		// Display selected user assessment or display blank user assessment (instance)
		populateUserAssessmentInstanceControls(form.getLocalContext().getSelectedPatientAssessment(), patientICPAction.getAction().getLinkedAssessment());
	}

	/**
	 * 
	 * @param patientAssessment
	 * @param userAssessmentRef
	 */
	private void populateUserAssessmentInstanceControls(PatientAssessmentVo patientAssessment, UserAssessmentRefVo userAssessmentRef)
	{
		// Check for an assessment
		if (patientAssessment == null)
		{
			// Get the configuration user assessment
			UserAssessmentVo userAssessment = domain.getAssessment(userAssessmentRef);

			// Create a blank patient Assessment to be displayed
			patientAssessment = new PatientAssessmentVo();

			patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
			patientAssessment.getAssessmentData().setUserAssessment(userAssessment);
			patientAssessment.getAssessmentData().setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
		}
		else if (patientAssessment.getID_PatientAssessment() != null)
		{
			boolean hasAssociatedReport = patientAssessment.getAssessmentData().getUserAssessment().getAssociatedReport() != null;
			
			if (hasAssociatedReport)
			{
				TemplateBoLiteVo templateReport = domain.getTemplateReport(patientAssessment.getAssessmentData().getUserAssessment().getAssociatedReport());

				form.lyrMain().tabPageReport().ccReportBuilder().buildAssessmentReport(patientAssessment);
				form.lyrMain().tabPageReport().setCaption(templateReport != null ? templateReport.getName() : "");
			}
		}

		// Populate assessment instance controls
		form.lyrMain().tabPageAssessment().setCaption("Assessment");

		if (patientAssessment.getAssessmentDataIsNotNull() && patientAssessment.getAssessmentData().getUserAssessmentIsNotNull())
		{
			form.lyrMain().tabPageAssessment().setCaption(patientAssessment.getAssessmentData().getUserAssessment().getName());
		}

		// Set context tool tip
		form.lyrMain().tabPageAssessment().imbStructuralContextInfo().setTooltip(getContextInformation(patientAssessment.getCareContext(), patientAssessment.getClinicalContact()));

		// Display assessment
		form.lyrMain().tabPageAssessment().ccStrructuralAssessment().setPatientAssessment(patientAssessment);
		// Display authoring information
		form.lyrMain().tabPageAssessment().authStructuredAssessment().setValue(patientAssessment.getAuthoringInfo());

		// Code for completed
		boolean assessmentCompleted = patientAssessment.getStatusIsNotNull() && PatientAssessmentStatusReason.COMPLETED.equals(patientAssessment.getStatus());

		form.chkComplete().setValue(assessmentCompleted);

		if (assessmentCompleted)
		{
			// Set completed authoring information
			AuthoringInformationVo completedAuthoringInformation = new AuthoringInformationVo();
			completedAuthoringInformation.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
			completedAuthoringInformation.setAuthoringHcp(patientAssessment.getCompletedHCP());

			form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().setValue(completedAuthoringInformation);
		}
	}

	private PatientAssessmentVo populatePatientAssessmentDataFromInstanceControls(PatientAssessmentVo patientAssessment)
	{
		// If no assessment is passed, then create one
		if (patientAssessment == null)
		{
			patientAssessment = new PatientAssessmentVo();
		}

		patientAssessment = form.lyrMain().tabPageAssessment().ccStrructuralAssessment().getPatientAssessment();
		patientAssessment.setAuthoringInformation(form.lyrMain().tabPageAssessment().authStructuredAssessment().getValue());
		
		if (form.chkComplete().getValue())
		{
			patientAssessment.setStatus(PatientAssessmentStatusReason.COMPLETED);
			patientAssessment.setStatusReason(PatientAssessmentStatusReason.COMPLETED);

			AuthoringInformationVo authoringCompleted = form.lyrMain().tabPageAssessment().authStructuredAssessmentCompleted().getValue();

			if (authoringCompleted != null)
			{
				patientAssessment.setCompletedDateTime(authoringCompleted.getAuthoringDateTime());
				patientAssessment.setCompletedHCP(authoringCompleted.getAuthoringHcp());
			}
		}
		else
		{
			patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
			patientAssessment.setStatusReason(PatientAssessmentStatusReason.INPROGRESS);
			
			patientAssessment.setCompletedHCP(null);
			patientAssessment.setCompletedDateTime(null);
		}

		// Return PatientAssessment
		return patientAssessment;
	}

	private String getContextInformation(CareContextRefVo careContextRef, ClinicalContactRefVo clinicalContactRef)
	{
		StringBuilder contextInfo = new StringBuilder();

		CareContextShortVo careContext = domain.getCareContext(careContextRef);
		ClinicalContactShortVo clinicalContact = domain.getClinicalContact(clinicalContactRef);

		if (careContext == null)
		{
			contextInfo.append("No Care Context");
		}
		else
		{
			contextInfo.append("Care Context: ");
			contextInfo.append(careContext.toString());
		}

		if (clinicalContact == null)
		{
			contextInfo.append("<br>No Clinical Contact");
		}
		else
		{
			contextInfo.append("<br>Clinical Contact");
			contextInfo.append(clinicalContact.toString());
		}

		return contextInfo.toString();
	}

	/**
	 * 
	 * @param assessments
	 */
	private void populateUserAssessmentRecordBrowser(PatientAssessmentLiteVoCollection assessments)
	{
		// Clear record browser
		form.lyrMain().tabPageAssessment().recbrStructuralAssessment().clear();

		// Check Patient Assessment collection
		if (assessments == null)
			return;

		for (int i = 0; i < assessments.size(); i++)
		{
			PatientAssessmentLiteVo assessment = assessments.get(i);

			if (assessment == null)
				continue;

			StringBuffer display = new StringBuffer();

			if (assessment.getAuthoringInformationIsNotNull())
			{
				if (assessment.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
					display.append(assessment.getAuthoringInformation().getAuthoringDateTime().toString());

				if (assessment.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					if (display.toString().length() > 0)
						display.append(' ');

					display.append(assessment.getAuthoringInformation().getAuthoringHcp().getIHcpName());
				}

			}

			form.lyrMain().tabPageAssessment().recbrStructuralAssessment().newRow(assessment, display.toString());
		}

		if (form.getLocalContext().getSelectedPatientAssessmentIsNotNull())
		{
			form.lyrMain().tabPageAssessment().recbrStructuralAssessment().setValue(form.getLocalContext().getSelectedPatientAssessment());
		}
		else if (assessments.size() > 0)
		{
			form.lyrMain().tabPageAssessment().recbrStructuralAssessment().setValue(assessments.get(0));
		}
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used to populate GraphicalUserAssessment controls
	// -------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	private void populateGraphicalAssessments(PatientICPActionFullVo patientICPAction)
	{
		// Clear the graphical assessment controls
		form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().clear();

		form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().clear(false, true);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().setValue(null);
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(null);

		// Check the Patient ICP Action parameter
		// Should never be null, throw a CodingRuntimeException
		// so that programmers know the code logic is off
		if (patientICPAction == null || !patientICPAction.getActionIsNotNull())
			throw new CodingRuntimeException("Logical ERROR - The PatientICPAction VO or linked ICP Action must not be null");

		// Populate record browser with instantiated graphical assessment
		populateGraphicalRecordBrowser(domain.listPatientGraphicAssessments(patientICPAction.getCareContext(), patientICPAction.getAction().getLinkedGraphicAssessment()));

		// Get the extended user graphical assessment (instance) selected (if any) in record browser
		form.getLocalContext().setSelectedPatientGraphicalAssessment(domain.getPatientAssessment(form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().getValue()));

		// Display selected user graphical assessment or display blank user
		// graphical assessment (instance)
		populateGraphicalAssessmentIstanceControls(form.getLocalContext().getSelectedPatientGraphicalAssessment(), patientICPAction.getAction().getLinkedGraphicAssessment());
	}

	private void populateGraphicalAssessmentIstanceControls(PatientAssessmentVo patientGraphicalAssessment, GraphicAssessmentRefVo graphicAssessmentRef)
	{
		// Check for an assessment
		if (patientGraphicalAssessment == null)
		{
			// Get the configuration graphical assessment
			GraphicAssessmentVo graphicAssessment = domain.getGraphicAssessment(graphicAssessmentRef);

			// Create a blank patient graphic assessment to be displayed
			patientGraphicalAssessment = new PatientAssessmentVo();

			patientGraphicalAssessment.setAssessmentData(new PatientAssessmentDataVo());
			patientGraphicalAssessment.getAssessmentData().setGraphic(graphicAssessment);
		}
		else if (patientGraphicalAssessment.getID_PatientAssessment() != null)
		{
			boolean hasAssociatedReport = patientGraphicalAssessment.getAssessmentData().getGraphic().getAssociatedReportForPrinting() != null;
			
			if (hasAssociatedReport)
			{
				TemplateBoLiteVo template = domain.getTemplateReport(patientGraphicalAssessment.getAssessmentData().getGraphic().getAssociatedReportForPrinting());

				form.lyrMain().tabPageReport().ccReportBuilder().buildAssessmentReport(patientGraphicalAssessment);
				form.lyrMain().tabPageReport().setCaption(template != null ? template.getName() : "");
			}
		}

		// Populate graphical assessment instance controls
		form.lyrMain().tabPageGraphicalAssessment().setCaption("Graphical Assessment");

		if (patientGraphicalAssessment.getAssessmentDataIsNotNull() && patientGraphicalAssessment.getAssessmentData().getGraphicIsNotNull())
		{
			form.lyrMain().tabPageGraphicalAssessment().setCaption(patientGraphicalAssessment.getAssessmentData().getGraphic().getName());
		}

		// Display assessment
		form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().setPatientAssessment(patientGraphicalAssessment);
		// Display authoring information
		form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().setValue(patientGraphicalAssessment.getAuthoringInformation());

		// Code for completed graphical assessment
		boolean graphicalAssessmentCompleted = patientGraphicalAssessment.getStatusIsNotNull() && PatientAssessmentStatusReason.COMPLETED.equals(patientGraphicalAssessment.getStatus());

		form.chkComplete().setValue(graphicalAssessmentCompleted);

		if (graphicalAssessmentCompleted)
		{
			// Set completed authoring information
			AuthoringInformationVo completedAuthoringInformation = new AuthoringInformationVo();
			completedAuthoringInformation.setAuthoringHcp(patientGraphicalAssessment.getCompletedHCP());
			completedAuthoringInformation.setAuthoringDateTime(patientGraphicalAssessment.getCompletedDateTime());

			form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().setValue(completedAuthoringInformation);
		}
	}

	private PatientAssessmentVo populatePatientGraphicalAssessmentDataFromInstanceControls(PatientAssessmentVo patientGraphicalAssessment)
	{
		// If no assessment is passed, then create one
		if (patientGraphicalAssessment == null)
		{
			patientGraphicalAssessment = new PatientAssessmentVo();
		}

		patientGraphicalAssessment = form.lyrMain().tabPageGraphicalAssessment().ccGraphicalAssessment().getPatientAssessment();
		patientGraphicalAssessment.setAuthoringInformation(form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessment().getValue());

		if (form.chkComplete().getValue())
		{
			patientGraphicalAssessment.setStatus(PatientAssessmentStatusReason.COMPLETED);
			patientGraphicalAssessment.setStatusReason(PatientAssessmentStatusReason.COMPLETED);

			AuthoringInformationVo authoringCompleted = form.lyrMain().tabPageGraphicalAssessment().authGraphicalAssessmentCompleted().getValue();

			if (authoringCompleted != null)
			{
				patientGraphicalAssessment.setCompletedDateTime(authoringCompleted.getAuthoringDateTime());
				patientGraphicalAssessment.setCompletedHCP(authoringCompleted.getAuthoringHcp());
			}
		}
		else
		{
			patientGraphicalAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
			patientGraphicalAssessment.setStatusReason(PatientAssessmentStatusReason.INPROGRESS);
			
			patientGraphicalAssessment.setCompletedHCP(null);
			patientGraphicalAssessment.setCompletedDateTime(null);
		}

		// Return PatientAssessment
		return patientGraphicalAssessment;
	}

	private void populateGraphicalRecordBrowser(PatientAssessmentLiteVoCollection graphicAssessments)
	{
		// Clear record browser
		form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().clear();

		// Check Patient Graphical Assessment collection
		if (graphicAssessments == null)
			return;

		for (int i = 0; i < graphicAssessments.size(); i++)
		{
			PatientAssessmentLiteVo graphicAssessment = graphicAssessments.get(i);

			if (graphicAssessment == null)
				return;

			StringBuffer display = new StringBuffer();

			if (graphicAssessment.getAuthoringInformationIsNotNull())
			{
				if (graphicAssessment.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
					display.append(graphicAssessment.getAuthoringInformation().getAuthoringDateTime());

				if (graphicAssessment.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					if (display.toString().length() > 0)
						display.append(' ');

					display.append(graphicAssessment.getAuthoringInformation().getAuthoringHcp().getIHcpName());
				}
			}

			form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().newRow(graphicAssessment, display.toString());
		}

		if (form.getLocalContext().getSelectedPatientGraphicalAssessmentIsNotNull())
		{
			form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().setValue(form.getLocalContext().getSelectedPatientGraphicalAssessment());
		}
		else if (graphicAssessments.size() > 0)
		{
			form.lyrMain().tabPageGraphicalAssessment().recbrGraphicalAssessment().setValue(graphicAssessments.get(0));
		}
	}

	// -------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used to populate OrderTemplate controls
	// -------------------------------------------------------------------------------------------------------------------------------------------------
	private void populateOrderTemplate(PatientICPActionFullVo patientICPAction)
	{
		try
		{
			// Clear the order template controls
			form.lyrMain().tabPageForm().dynamicForm().clear();

			OrderEntryTemplateLiteVo template = patientICPAction.getAction().getLinkedOrderEntryTemplate();

			if (template != null)
			{
				Boolean readOnly = Boolean.FALSE.equals(form.getLocalContext().getUserHasEditRights());
				form.lyrMain().tabPageForm().dynamicForm().setReadOnly(readOnly);
				form.lyrMain().tabPageForm().dynamicForm().open(form.getForms().OCRR.SelectandOrder, new Object[] { template });
			}
		}
		catch (Exception exception)
		{
			// Treat any exceptions that might arise
			exception.printStackTrace();
			engine.showMessage("Error displaying linked form: " + exception.getMessage());
			return;
		}
	}
}
