//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.icp.forms.patienticp;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageActionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDisciplineComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 233, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Actions Associated with Discipline:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 536, 7, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 432, 7, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 240, 8, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDisciplineTemp);
				cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
				super.addComboBox(cmbDiscipline);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 810, 536, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.ICP.contextMenuActionMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Button btnDefaultView()
			{
				return (Button)super.getControl(1);
			}
			public Button btnView()
			{
				return (Button)super.getControl(2);
			}
			public cmbDisciplineComboBox cmbDiscipline()
			{
				return (cmbDisciplineComboBox)super.getComboBox(0);
			}
			public DynamicGrid grdActions()
			{
				return (DynamicGrid)super.getControl(4);
			}
		}
		public static class tabPageDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrICPLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabAssessmentContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class recbrStructuredAssessmentRecordBrowser extends RecordBrowserBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
						{
							super.control.newRow(index, value, text);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(index, value, text, image);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(index, value, text, textColor);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(index, value, text, image, textColor);
						}
						public ims.assessment.instantiation.vo.PatientAssessmentRefVo getValue()
						{
							return (ims.assessment.instantiation.vo.PatientAssessmentRefVo)super.control.getValue();
						}
						public void setValue(ims.assessment.instantiation.vo.PatientAssessmentRefVo value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 336, 440, 304, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ims.framework.FormUiLogic m_authStructuredAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper6.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(336), new Integer(440), new Integer(304), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authStructuredAssessmentCompletedForm, instance1 } );
						ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authStructuredAssessmentCompletedForm, instance1, Boolean.FALSE } );
						super.addControl(m_authStructuredAssessmentCompletedControl);
						Menu[] menus1 = m_authStructuredAssessmentCompletedForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
						ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 304, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ims.framework.FormUiLogic m_authStructuredAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper7.getSize(), instance2, -1, skipContextValidation);
						//ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(8), new Integer(440), new Integer(304), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authStructuredAssessmentForm, instance2 } );
						ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authStructuredAssessmentForm, instance2, Boolean.FALSE } );
						super.addControl(m_authStructuredAssessmentControl);
						Menu[] menus2 = m_authStructuredAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus2.length; x++)
						{
							form.registerMenu(menus2[x]);
						}
						ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 784, 392, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_customStructuredAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 3000, anchoringHelper8.getSize(), instance3, -1, skipContextValidation);
						//ims.framework.Control m_customStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(8), new Integer(40), new Integer(784), new Integer(392), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customStructuredAssessmentForm, instance3 } );
						ims.framework.Control m_customStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customStructuredAssessmentForm, instance3, Boolean.FALSE } );
						super.addControl(m_customStructuredAssessmentControl);
						Menu[] menus3 = m_customStructuredAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus3.length; x++)
						{
							form.registerMenu(menus3[x]);
						}
				
						// RecordBrowser Controls
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 40, 8, 720, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						RecordBrowser m_recbrStructuredAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
						addControl(m_recbrStructuredAssessmentTemp);
						recbrStructuredAssessmentRecordBrowser recbrStructuredAssessment = (recbrStructuredAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrStructuredAssessmentRecordBrowser.class, m_recbrStructuredAssessmentTemp);
						super.addRecordBrowser(recbrStructuredAssessment);
				
						// Image Buttons Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 768, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.HelpEnabled16, form_images_local.Core.HelpEnabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
					}
		
					public ims.core.forms.authoringinfo.IComponent authStructuredAssessmentCompleted()
					{
						return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setauthStructuredAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setauthStructuredAssessmentCompletedVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isauthStructuredAssessmentCompletedVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setauthStructuredAssessmentCompletedEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isauthStructuredAssessmentCompletedEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public ims.core.forms.authoringinfo.IComponent authStructuredAssessment()
					{
						return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
					}
					public void setauthStructuredAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
					}
					public void setauthStructuredAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setVisible(value);
					}
					public boolean isauthStructuredAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(1)).isVisible();
					}
					public void setauthStructuredAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setEnabled(value);
					}
					public boolean isauthStructuredAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(1)).isEnabled();
					}
					public ims.assessment.forms.structuralassessment.IComponent customStructuredAssessment()
					{
						return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
					}
					public void setcustomStructuredAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
					}
					public void setcustomStructuredAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(2)).setVisible(value);
					}
					public boolean iscustomStructuredAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(2)).isVisible();
					}
					public void setcustomStructuredAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(2)).setEnabled(value);
					}
					public boolean iscustomStructuredAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(2)).isEnabled();
					}
					public recbrStructuredAssessmentRecordBrowser recbrStructuredAssessment()
					{
						return (recbrStructuredAssessmentRecordBrowser)super.getRecordBrowser(0);
					}
					public ImageButton imbStructuralContextInfo()
					{
						return (ImageButton)super.getControl(4);
					}
					public ImageButton imbStructuralHelp()
					{
						return (ImageButton)super.getControl(5);
					}
				}
				public static class tabReportContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 5, 5, 789, 495, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccReportBuilderForm = loader.loadComponent(102275, appForm, startControlID * 10 + 4000, anchoringHelper12.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(5), new Integer(5), new Integer(789), new Integer(495), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReportBuilderForm, instance1 } );
						ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReportBuilderForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccReportBuilderControl);
						Menu[] menus1 = m_ccReportBuilderForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.core.forms.assessmentasreport.IComponent ccReportBuilder()
					{
						return (ims.core.forms.assessmentasreport.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccReportBuilderValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccReportBuilderVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccReportBuilderVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccReportBuilderEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccReportBuilderEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabGraphicAssessmentContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class recbrGraphicalAssessmentRecordBrowser extends RecordBrowserBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text)
						{
							super.control.newRow(index, value, text);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(index, value, text, image);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(index, value, text, textColor);
						}
						public void newRow(int index, ims.assessment.instantiation.vo.PatientAssessmentRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(index, value, text, image, textColor);
						}
						public ims.assessment.instantiation.vo.PatientAssessmentRefVo getValue()
						{
							return (ims.assessment.instantiation.vo.PatientAssessmentRefVo)super.control.getValue();
						}
						public void setValue(ims.assessment.instantiation.vo.PatientAssessmentRefVo value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 336, 440, 312, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ims.framework.FormUiLogic m_authGraphicalAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 5000, anchoringHelper13.getSize(), instance1, -1, skipContextValidation);
						//ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(336), new Integer(440), new Integer(312), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authGraphicalAssessmentCompletedForm, instance1 } );
						ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017),  new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authGraphicalAssessmentCompletedForm, instance1, Boolean.FALSE } );
						super.addControl(m_authGraphicalAssessmentCompletedControl);
						Menu[] menus1 = m_authGraphicalAssessmentCompletedForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
						ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 304, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ims.framework.FormUiLogic m_authGraphicalAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 6000, anchoringHelper14.getSize(), instance2, -1, skipContextValidation);
						//ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(8), new Integer(440), new Integer(304), new Integer(64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authGraphicalAssessmentForm, instance2 } );
						ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(-1), m_authGraphicalAssessmentForm, instance2, Boolean.FALSE } );
						super.addControl(m_authGraphicalAssessmentControl);
						Menu[] menus2 = m_authGraphicalAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus2.length; x++)
						{
							form.registerMenu(menus2[x]);
						}
						ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 784, 392, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_customGraphicalAssessmentForm = loader.loadComponent(127114, appForm, startControlID * 10 + 7000, anchoringHelper15.getSize(), instance3, -1, skipContextValidation);
						//ims.framework.Control m_customGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(8), new Integer(40), new Integer(784), new Integer(392), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customGraphicalAssessmentForm, instance3 } );
						ims.framework.Control m_customGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021),  new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_customGraphicalAssessmentForm, instance3, Boolean.FALSE } );
						super.addControl(m_customGraphicalAssessmentControl);
						Menu[] menus3 = m_customGraphicalAssessmentForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus3.length; x++)
						{
							form.registerMenu(menus3[x]);
						}
				
						// RecordBrowser Controls
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 40, 8, 720, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						RecordBrowser m_recbrGraphicalAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
						addControl(m_recbrGraphicalAssessmentTemp);
						recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment = (recbrGraphicalAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrGraphicalAssessmentRecordBrowser.class, m_recbrGraphicalAssessmentTemp);
						super.addRecordBrowser(recbrGraphicalAssessment);
				
						// Image Buttons Controls
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 769, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.HelpEnabled16, form_images_local.Core.HelpDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
					}
		
					public ims.core.forms.authoringinfo.IComponent authGraphicalAssessmentCompleted()
					{
						return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setauthGraphicalAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setauthGraphicalAssessmentCompletedVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isauthGraphicalAssessmentCompletedVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setauthGraphicalAssessmentCompletedEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isauthGraphicalAssessmentCompletedEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public ims.core.forms.authoringinfo.IComponent authGraphicalAssessment()
					{
						return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
					}
					public void setauthGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
					}
					public void setauthGraphicalAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setVisible(value);
					}
					public boolean isauthGraphicalAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(1)).isVisible();
					}
					public void setauthGraphicalAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(1)).setEnabled(value);
					}
					public boolean isauthGraphicalAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(1)).isEnabled();
					}
					public ims.assessment.forms.graphicalassessment.IComponent customGraphicalAssessment()
					{
						return (ims.assessment.forms.graphicalassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
					}
					public void setcustomGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
					}
					public void setcustomGraphicalAssessmentVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(2)).setVisible(value);
					}
					public boolean iscustomGraphicalAssessmentVisible()
					{
						return ((ims.framework.Control)super.getControl(2)).isVisible();
					}
					public void setcustomGraphicalAssessmentEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(2)).setEnabled(value);
					}
					public boolean iscustomGraphicalAssessmentEnabled()
					{
						return ((ims.framework.Control)super.getControl(2)).isEnabled();
					}
					public recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment()
					{
						return (recbrGraphicalAssessmentRecordBrowser)super.getRecordBrowser(0);
					}
					public ImageButton imbGraphicalContextInfo()
					{
						return (ImageButton)super.getControl(4);
					}
					public ImageButton imbGraphicalHelp()
					{
						return (ImageButton)super.getControl(5);
					}
				}
				public static class tabFormContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// DynamicForm Controls
						RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 6, 6, 790, 501, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicForm.class, form, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL}));
					}
		
					public DynamicForm dynamicForm()
					{
						return (DynamicForm)super.getControl(0);
					}
				}
				public static class tabPageNoDetailsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 216, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Details Linked to Action", new Integer(1), null, new Integer(1)}));
					}
		
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabAssessmentContainer m_tabAssessmentContainer = (tabAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssessmentContainer.class, m_tabAssessment, factory);
					super.addContainer(m_tabAssessment, m_tabAssessmentContainer);
					ims.framework.utils.SizeInfo m_tabAssessmentDesignSize = new ims.framework.utils.SizeInfo(808, 536);
					ims.framework.utils.SizeInfo m_tabAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
					m_tabAssessmentContainer.setContext(form, appForm, m_tabAssessment, loader, form_images_local, contextMenus, startControlID, m_tabAssessmentDesignSize, m_tabAssessmentRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabReport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Report", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabReportContainer m_tabReportContainer = (tabReportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReportContainer.class, m_tabReport, factory);
					super.addContainer(m_tabReport, m_tabReportContainer);
					ims.framework.utils.SizeInfo m_tabReportDesignSize = new ims.framework.utils.SizeInfo(808, 536);
					ims.framework.utils.SizeInfo m_tabReportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
					m_tabReportContainer.setContext(form, appForm, m_tabReport, loader, form_images_local, contextMenus, startControlID, m_tabReportDesignSize, m_tabReportRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabGraphicAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Graphic Assessment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabGraphicAssessmentContainer m_tabGraphicAssessmentContainer = (tabGraphicAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGraphicAssessmentContainer.class, m_tabGraphicAssessment, factory);
					super.addContainer(m_tabGraphicAssessment, m_tabGraphicAssessmentContainer);
					ims.framework.utils.SizeInfo m_tabGraphicAssessmentDesignSize = new ims.framework.utils.SizeInfo(808, 536);
					ims.framework.utils.SizeInfo m_tabGraphicAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
					m_tabGraphicAssessmentContainer.setContext(form, appForm, m_tabGraphicAssessment, loader, form_images_local, contextMenus, startControlID, m_tabGraphicAssessmentDesignSize, m_tabGraphicAssessmentRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabForm = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Form", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabFormContainer m_tabFormContainer = (tabFormContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFormContainer.class, m_tabForm, factory);
					super.addContainer(m_tabForm, m_tabFormContainer);
					ims.framework.utils.SizeInfo m_tabFormDesignSize = new ims.framework.utils.SizeInfo(808, 536);
					ims.framework.utils.SizeInfo m_tabFormRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
					m_tabFormContainer.setContext(form, appForm, m_tabForm, loader, form_images_local, contextMenus, startControlID, m_tabFormDesignSize, m_tabFormRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 536, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageNoDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"No Details Linked", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageNoDetailsContainer m_tabPageNoDetailsContainer = (tabPageNoDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageNoDetailsContainer.class, m_tabPageNoDetails, factory);
					super.addContainer(m_tabPageNoDetails, m_tabPageNoDetailsContainer);
					ims.framework.utils.SizeInfo m_tabPageNoDetailsDesignSize = new ims.framework.utils.SizeInfo(808, 536);
					ims.framework.utils.SizeInfo m_tabPageNoDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
					m_tabPageNoDetailsContainer.setContext(form, appForm, m_tabPageNoDetails, loader, form_images_local, contextMenus, startControlID, m_tabPageNoDetailsDesignSize, m_tabPageNoDetailsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabAssessment().setVisible(false);
					tabReport().setVisible(false);
					tabGraphicAssessment().setVisible(false);
					tabForm().setVisible(false);
					tabPageNoDetails().setVisible(false);
				}
				public void settabAssessmentEnabled(boolean value)
				{
					tabAssessment().setEnabled(value);
				}
				public void settabReportEnabled(boolean value)
				{
					tabReport().setEnabled(value);
				}
				public void settabGraphicAssessmentEnabled(boolean value)
				{
					tabGraphicAssessment().setEnabled(value);
				}
				public void settabFormEnabled(boolean value)
				{
					tabForm().setEnabled(value);
				}
				public void settabPageNoDetailsEnabled(boolean value)
				{
					tabPageNoDetails().setEnabled(value);
				}
				public void showtabAssessment()
				{
					tabReport().setVisible(false);
					tabGraphicAssessment().setVisible(false);
					tabForm().setVisible(false);
					tabPageNoDetails().setVisible(false);
					tabAssessment().setVisible(true);
				}
				public void showtabReport()
				{
					tabAssessment().setVisible(false);
					tabGraphicAssessment().setVisible(false);
					tabForm().setVisible(false);
					tabPageNoDetails().setVisible(false);
					tabReport().setVisible(true);
				}
				public void showtabGraphicAssessment()
				{
					tabAssessment().setVisible(false);
					tabReport().setVisible(false);
					tabForm().setVisible(false);
					tabPageNoDetails().setVisible(false);
					tabGraphicAssessment().setVisible(true);
				}
				public void showtabForm()
				{
					tabAssessment().setVisible(false);
					tabReport().setVisible(false);
					tabGraphicAssessment().setVisible(false);
					tabPageNoDetails().setVisible(false);
					tabForm().setVisible(true);
				}
				public void showtabPageNoDetails()
				{
					tabAssessment().setVisible(false);
					tabReport().setVisible(false);
					tabGraphicAssessment().setVisible(false);
					tabForm().setVisible(false);
					tabPageNoDetails().setVisible(true);
				}
		
				public tabAssessmentContainer tabAssessment()
				{
					return (tabAssessmentContainer)super.layers.get(0);
				}
				public tabReportContainer tabReport()
				{
					return (tabReportContainer)super.layers.get(1);
				}
				public tabGraphicAssessmentContainer tabGraphicAssessment()
				{
					return (tabGraphicAssessmentContainer)super.layers.get(2);
				}
				public tabFormContainer tabForm()
				{
					return (tabFormContainer)super.layers.get(3);
				}
				public tabPageNoDetailsContainer tabPageNoDetails()
				{
					return (tabPageNoDetailsContainer)super.layers.get(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrICPLayer m_lyrICPLayer = (lyrICPLayer)LayerFlyweightFactory.getInstance().createLayer(lyrICPLayer.class, this, factory);
				super.addLayer(m_lyrICPLayer);
				m_lyrICPLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 88, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 272, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 661, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 741, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 576, 555, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Complete", Boolean.TRUE, null}));
			}

			public lyrICPLayer lyrICP()
			{
				return (lyrICPLayer)super.getLayer(0);
			}
			public Button btnNew()
			{
				return (Button)super.getControl(5);
			}
			public Button btnUpdate()
			{
				return (Button)super.getControl(6);
			}
			public Button btnClose()
			{
				return (Button)super.getControl(7);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(8);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(9);
			}
			public CheckBox chkComplete()
			{
				return (CheckBox)super.getControl(10);
			}
		}
		public static class tabPageClinicDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class recbrLinkedActionsRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.icp.vo.PatientICPActionFullVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.icp.vo.PatientICPActionFullVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.icp.vo.PatientICPActionFullVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.icp.vo.PatientICPActionFullVo getValue()
				{
					return (ims.icp.vo.PatientICPActionFullVo)super.control.getValue();
				}
				public void setValue(ims.icp.vo.PatientICPActionFullVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccLinkedActionDetailsForm = loader.loadComponent(118121, appForm, startControlID * 10 + 8000, anchoringHelper32.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccLinkedActionDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(8), new Integer(32), new Integer(808), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccLinkedActionDetailsForm, instance1 } );
				ims.framework.Control m_ccLinkedActionDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1039),  new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccLinkedActionDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccLinkedActionDetailsControl);
				Menu[] menus1 = m_ccLinkedActionDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrLinkedActionsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrLinkedActionsTemp);
				recbrLinkedActionsRecordBrowser recbrLinkedActions = (recbrLinkedActionsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrLinkedActionsRecordBrowser.class, m_recbrLinkedActionsTemp);
				super.addRecordBrowser(recbrLinkedActions);
			}

			public ims.icp.forms.patienticpactionlinkeddetailscomponent.IComponent ccLinkedActionDetails()
			{
				return (ims.icp.forms.patienticpactionlinkeddetailscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccLinkedActionDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccLinkedActionDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccLinkedActionDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccLinkedActionDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccLinkedActionDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public recbrLinkedActionsRecordBrowser recbrLinkedActions()
			{
				return (recbrLinkedActionsRecordBrowser)super.getRecordBrowser(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageActions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Stages / Phases / Actions", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageActionsContainer m_tabPageActionsContainer = (tabPageActionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageActionsContainer.class, m_tabPageActions, factory);
			super.addContainer(m_tabPageActions, m_tabPageActionsContainer);
			ims.framework.utils.SizeInfo m_tabPageActionsDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabPageActionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper34.getWidth(), anchoringHelper34.getHeight());
			m_tabPageActionsContainer.setContext(form, appForm, m_tabPageActions, loader, form_images_local, contextMenus, startControlID, m_tabPageActionsDesignSize, m_tabPageActionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageDetailsContainer m_tabPageDetailsContainer = (tabPageDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageDetailsContainer.class, m_tabPageDetails, factory);
			super.addContainer(m_tabPageDetails, m_tabPageDetailsContainer);
			ims.framework.utils.SizeInfo m_tabPageDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabPageDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper35.getWidth(), anchoringHelper35.getHeight());
			m_tabPageDetailsContainer.setContext(form, appForm, m_tabPageDetails, loader, form_images_local, contextMenus, startControlID, m_tabPageDetailsDesignSize, m_tabPageDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageClinicDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageClinicDetailsContainer m_tabPageClinicDetailsContainer = (tabPageClinicDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageClinicDetailsContainer.class, m_tabPageClinicDetails, factory);
			super.addContainer(m_tabPageClinicDetails, m_tabPageClinicDetailsContainer);
			ims.framework.utils.SizeInfo m_tabPageClinicDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabPageClinicDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper36.getWidth(), anchoringHelper36.getHeight());
			m_tabPageClinicDetailsContainer.setContext(form, appForm, m_tabPageClinicDetails, loader, form_images_local, contextMenus, startControlID, m_tabPageClinicDetailsDesignSize, m_tabPageClinicDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageActions().setVisible(false);
			tabPageDetails().setVisible(false);
			tabPageClinicDetails().setVisible(false);
		}
		public void settabPageActionsEnabled(boolean value)
		{
			tabPageActions().setEnabled(value);
		}
		public void settabPageDetailsEnabled(boolean value)
		{
			tabPageDetails().setEnabled(value);
		}
		public void settabPageClinicDetailsEnabled(boolean value)
		{
			tabPageClinicDetails().setEnabled(value);
		}
		public void showtabPageActions()
		{
			tabPageDetails().setVisible(false);
			tabPageClinicDetails().setVisible(false);
			tabPageActions().setVisible(true);
		}
		public void showtabPageDetails()
		{
			tabPageActions().setVisible(false);
			tabPageClinicDetails().setVisible(false);
			tabPageDetails().setVisible(true);
		}
		public void showtabPageClinicDetails()
		{
			tabPageActions().setVisible(false);
			tabPageDetails().setVisible(false);
			tabPageClinicDetails().setVisible(true);
		}

		public tabPageActionsContainer tabPageActions()
		{
			return (tabPageActionsContainer)super.layers.get(0);
		}
		public tabPageDetailsContainer tabPageDetails()
		{
			return (tabPageDetailsContainer)super.layers.get(1);
		}
		public tabPageClinicDetailsContainer tabPageClinicDetails()
		{
			return (tabPageClinicDetailsContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("ICP.PatientICPRecord", "_cv_ICP.PatientICPRecord").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'ICP.PatientICPRecord' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.ICP.contextMenuActionMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.ICP.contextMenuActionMenuActionMetItem = factory.createMenuItem(startControlID.intValue() + 1, "Action Met", true, false, new Integer(118108), true, false);
		contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuActionMetItem);
		contextMenus.ICP.contextMenuActionMenuActionNotMetItem = factory.createMenuItem(startControlID.intValue() + 2, "Action Not Met", true, false, new Integer(118109), true, false);
		contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuActionNotMetItem);
		contextMenus.ICP.contextMenuActionMenuRecordVarianceItem = factory.createMenuItem(startControlID.intValue() + 3, "Record Variance", true, false, new Integer(118130), true, false);
		contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuRecordVarianceItem);
		contextMenus.ICP.contextMenuActionMenuViewHelpItem = factory.createMenuItem(startControlID.intValue() + 4, "View Help", true, false, new Integer(102217), true, true);
		contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuViewHelpItem);
		contextMenus.ICP.contextMenuActionMenuAddCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Critical Event", true, false, new Integer(118126), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010001)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuAddCriticalEventItem);
		contextMenus.ICP.contextMenuActionMenuEditCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Critical Event", true, false, new Integer(118128), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010002)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuEditCriticalEventItem);
		contextMenus.ICP.contextMenuActionMenuViewCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 7, "View Critical Event", true, false, new Integer(102298), false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010007)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuViewCriticalEventItem);
		contextMenus.ICP.contextMenuActionMenuAddStageItem = factory.createMenuItem(startControlID.intValue() + 8, "Add Stage", true, false, new Integer(118105), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010003)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuAddStageItem);
		contextMenus.ICP.contextMenuActionMenuAddPhaseItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Phase", true, false, new Integer(118106), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010004)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuAddPhaseItem);
		contextMenus.ICP.contextMenuActionMenuAddEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 10, "Add Evaluation Note", true, false, new Integer(118127), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010005)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuAddEvaluationNoteItem);
		contextMenus.ICP.contextMenuActionMenuEditEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit Evaluation Note", true, false, new Integer(118129), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010006)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuEditEvaluationNoteItem);
		contextMenus.ICP.contextMenuActionMenuViewEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 12, "View Evaluation Note", true, false, new Integer(102223), false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010008)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuViewEvaluationNoteItem);
		contextMenus.ICP.contextMenuActionMenuInactivateItem = factory.createMenuItem(startControlID.intValue() + 13, "Inactivate", true, false, new Integer(102148), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010009)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuInactivateItem);
		contextMenus.ICP.contextMenuActionMenuActivateItem = factory.createMenuItem(startControlID.intValue() + 14, "Activate Stage or Phases", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3010010)))
			contextMenus.ICP.contextMenuActionMenu.add(contextMenus.ICP.contextMenuActionMenuActivateItem);
		form.registerMenu(contextMenus.ICP.contextMenuActionMenu);


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Link Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 696, 0, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"<< Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ICP = new ICPForms();
			OCRR = new OCRRForms();
			Clinical = new ClinicalForms();
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				RecordICPActionVariance = new LocalFormName(118116);
				ICPCritcalEvents = new LocalFormName(118119);
				BringIntoScope = new LocalFormName(118120);
				ICPEvaluationNotes = new LocalFormName(118101);
				ActivateStagePhases = new LocalFormName(118124);
			}
			public final FormName RecordICPActionVariance;
			public final FormName ICPCritcalEvents;
			public final FormName BringIntoScope;
			public final FormName ICPEvaluationNotes;
			public final FormName ActivateStagePhases;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectandOrder = new LocalFormName(116112);
			}
			public final FormName SelectandOrder;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PatientICPList = new LocalFormName(123166);
				ClinicListWithICPActions = new LocalFormName(123155);
			}
			public final FormName PatientICPList;
			public final FormName ClinicListWithICPActions;
		}

		public ICPForms ICP;
		public OCRRForms OCRR;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
				RedSqaure = new ImageHelper(102122, "Images/Core/circle_red.png", new Integer(16), new Integer(16));
				YellowSquare = new ImageHelper(102123, "Images/Core/circle_yellow.png", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				RedCircle = new ImageHelper(102274, "Images/Core/red-circle-1.gif", new Integer(16), new Integer(16));
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
				HelpDisabled16 = new ImageHelper(102535, "Images/Core/help_disabled_16.png", new Integer(16), new Integer(16));
				HelpEnabled16 = new ImageHelper(102534, "Images/Core/help_enabled_16.png", new Integer(16), new Integer(16));
				InfoDisabled16 = new ImageHelper(102533, "Images/Core/info_disabled_16.png", new Integer(16), new Integer(16));
				InfoEnabled16 = new ImageHelper(102532, "Images/Core/info_enabled_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image BlueSquare;
			public final ims.framework.utils.Image RedSqaure;
			public final ims.framework.utils.Image YellowSquare;
			public final ims.framework.utils.Image GreenSquare;
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image RedCircle;
			public final ims.framework.utils.Image Memo;
			public final ims.framework.utils.Image HelpDisabled16;
			public final ims.framework.utils.Image HelpEnabled16;
			public final ims.framework.utils.Image InfoDisabled16;
			public final ims.framework.utils.Image InfoEnabled16;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Action = new ImageHelper(118107, "Images/ICP/Action.gif", new Integer(16), new Integer(16));
				Phase = new ImageHelper(118106, "Images/ICP/Phase.gif", new Integer(16), new Integer(16));
				Stage = new ImageHelper(118105, "Images/ICP/Stage.gif", new Integer(16), new Integer(16));
				ACTION_OUTSANDING_ENABLED_16 = new ImageHelper(118110, "Images/ICP/ACTION_OUTSANDING_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Action;
			public final ims.framework.utils.Image Phase;
			public final ims.framework.utils.Image Stage;
			public final ims.framework.utils.Image ACTION_OUTSANDING_ENABLED_16;
		}
		public final CoreImages Core;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_LoadedRecords = new ims.framework.ContextVariable("LoadedRecords", prefix + "_lv_ICP.PatientICP.__internal_x_context__LoadedRecords_" + componentIdentifier + "");
			cxl_CurrentPatientAssessment = new ims.framework.ContextVariable("CurrentPatientAssessment", prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier + "");
			cxl_StructuralAssessment = new ims.framework.ContextVariable("StructuralAssessment", prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier + "");
			cxl_AllowNew = new ims.framework.ContextVariable("AllowNew", prefix + "_lv_ICP.PatientICP.__internal_x_context__AllowNew_" + componentIdentifier + "");
			cxl_AllowUpdate = new ims.framework.ContextVariable("AllowUpdate", prefix + "_lv_ICP.PatientICP.__internal_x_context__AllowUpdate_" + componentIdentifier + "");
			cxl_OneInstancePresent = new ims.framework.ContextVariable("OneInstancePresent", prefix + "_lv_ICP.PatientICP.__internal_x_context__OneInstancePresent_" + componentIdentifier + "");
			cxl_SelectedAction = new ims.framework.ContextVariable("SelectedAction", prefix + "_lv_ICP.PatientICP.__internal_x_context__SelectedAction_" + componentIdentifier + "");
			cxl_GraphicalAssessment = new ims.framework.ContextVariable("GraphicalAssessment", prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier + "");
			cxl_CurrentPatientICP = new ims.framework.ContextVariable("CurrentPatientICP", prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier + "");
			cxl_HasNotInScopeStages = new ims.framework.ContextVariable("HasNotInScopeStages", prefix + "_lv_ICP.PatientICP.__internal_x_context__HasNotInScopeStages_" + componentIdentifier + "");
			cxl_HasNotInScopePhases = new ims.framework.ContextVariable("HasNotInScopePhases", prefix + "_lv_ICP.PatientICP.__internal_x_context__HasNotInScopePhases_" + componentIdentifier + "");
			cxl_DisciplineType = new ims.framework.ContextVariable("DisciplineType", prefix + "_lv_ICP.PatientICP.__internal_x_context__DisciplineType_" + componentIdentifier + "");
			cxl_ConfigurationICP = new ims.framework.ContextVariable("ConfigurationICP", prefix + "_lv_ICP.PatientICP.__internal_x_context__ConfigurationICP_" + componentIdentifier + "");
			cxl_LoggedInHcp = new ims.framework.ContextVariable("LoggedInHcp", prefix + "_lv_ICP.PatientICP.__internal_x_context__LoggedInHcp_" + componentIdentifier + "");
		}
		
		public boolean getLoadedRecordsIsNotNull()
		{
			return !cxl_LoadedRecords.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentListVoCollection getLoadedRecords()
		{
			return (ims.assessment.vo.PatientAssessmentListVoCollection)cxl_LoadedRecords.getValue(context);
		}
		public void setLoadedRecords(ims.assessment.vo.PatientAssessmentListVoCollection value)
		{
			cxl_LoadedRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoadedRecords = null;
		public boolean getCurrentPatientAssessmentIsNotNull()
		{
			return !cxl_CurrentPatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getCurrentPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_CurrentPatientAssessment.getValue(context);
		}
		public void setCurrentPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_CurrentPatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentPatientAssessment = null;
		public boolean getStructuralAssessmentIsNotNull()
		{
			return !cxl_StructuralAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getStructuralAssessment()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_StructuralAssessment.getValue(context);
		}
		public void setStructuralAssessment(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_StructuralAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StructuralAssessment = null;
		public boolean getAllowNewIsNotNull()
		{
			return !cxl_AllowNew.getValueIsNull(context);
		}
		public Boolean getAllowNew()
		{
			return (Boolean)cxl_AllowNew.getValue(context);
		}
		public void setAllowNew(Boolean value)
		{
			cxl_AllowNew.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowNew = null;
		public boolean getAllowUpdateIsNotNull()
		{
			return !cxl_AllowUpdate.getValueIsNull(context);
		}
		public Boolean getAllowUpdate()
		{
			return (Boolean)cxl_AllowUpdate.getValue(context);
		}
		public void setAllowUpdate(Boolean value)
		{
			cxl_AllowUpdate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllowUpdate = null;
		public boolean getOneInstancePresentIsNotNull()
		{
			return !cxl_OneInstancePresent.getValueIsNull(context);
		}
		public Boolean getOneInstancePresent()
		{
			return (Boolean)cxl_OneInstancePresent.getValue(context);
		}
		public void setOneInstancePresent(Boolean value)
		{
			cxl_OneInstancePresent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OneInstancePresent = null;
		public boolean getSelectedActionIsNotNull()
		{
			return !cxl_SelectedAction.getValueIsNull(context);
		}
		public ims.icp.vo.PatientICPActionViewVo getSelectedAction()
		{
			return (ims.icp.vo.PatientICPActionViewVo)cxl_SelectedAction.getValue(context);
		}
		public void setSelectedAction(ims.icp.vo.PatientICPActionViewVo value)
		{
			cxl_SelectedAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAction = null;
		public boolean getGraphicalAssessmentIsNotNull()
		{
			return !cxl_GraphicalAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.GraphicAssessmentVo getGraphicalAssessment()
		{
			return (ims.assessment.vo.GraphicAssessmentVo)cxl_GraphicalAssessment.getValue(context);
		}
		public void setGraphicalAssessment(ims.assessment.vo.GraphicAssessmentVo value)
		{
			cxl_GraphicalAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GraphicalAssessment = null;
		public boolean getCurrentPatientICPIsNotNull()
		{
			return !cxl_CurrentPatientICP.getValueIsNull(context);
		}
		public ims.icp.vo.PatientICPViewVo getCurrentPatientICP()
		{
			return (ims.icp.vo.PatientICPViewVo)cxl_CurrentPatientICP.getValue(context);
		}
		public void setCurrentPatientICP(ims.icp.vo.PatientICPViewVo value)
		{
			cxl_CurrentPatientICP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentPatientICP = null;
		public boolean getHasNotInScopeStagesIsNotNull()
		{
			return !cxl_HasNotInScopeStages.getValueIsNull(context);
		}
		public Boolean getHasNotInScopeStages()
		{
			return (Boolean)cxl_HasNotInScopeStages.getValue(context);
		}
		public void setHasNotInScopeStages(Boolean value)
		{
			cxl_HasNotInScopeStages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasNotInScopeStages = null;
		public boolean getHasNotInScopePhasesIsNotNull()
		{
			return !cxl_HasNotInScopePhases.getValueIsNull(context);
		}
		public Boolean getHasNotInScopePhases()
		{
			return (Boolean)cxl_HasNotInScopePhases.getValue(context);
		}
		public void setHasNotInScopePhases(Boolean value)
		{
			cxl_HasNotInScopePhases.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasNotInScopePhases = null;
		public boolean getDisciplineTypeIsNotNull()
		{
			return !cxl_DisciplineType.getValueIsNull(context);
		}
		public ims.core.vo.lookups.HcpDisType getDisciplineType()
		{
			return (ims.core.vo.lookups.HcpDisType)cxl_DisciplineType.getValue(context);
		}
		public void setDisciplineType(ims.core.vo.lookups.HcpDisType value)
		{
			cxl_DisciplineType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DisciplineType = null;
		public boolean getConfigurationICPIsNotNull()
		{
			return !cxl_ConfigurationICP.getValueIsNull(context);
		}
		public ims.icp.vo.ICPConfigurationDisplayVo getConfigurationICP()
		{
			return (ims.icp.vo.ICPConfigurationDisplayVo)cxl_ConfigurationICP.getValue(context);
		}
		public void setConfigurationICP(ims.icp.vo.ICPConfigurationDisplayVo value)
		{
			cxl_ConfigurationICP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfigurationICP = null;
		public boolean getLoggedInHcpIsNotNull()
		{
			return !cxl_LoggedInHcp.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.HcpRefVo getLoggedInHcp()
		{
			return (ims.core.resource.people.vo.HcpRefVo)cxl_LoggedInHcp.getValue(context);
		}
		public void setLoggedInHcp(ims.core.resource.people.vo.HcpRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'LoggedInHcp' RefVo context variable.");
			if(value == null)
				cxl_LoggedInHcp.setValue(context, null);
			else
				cxl_LoggedInHcp.setValue(context, new ims.core.resource.people.vo.HcpRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_LoggedInHcp = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ICPNamespace ICP = new ICPNamespace();
		public final class ICPNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ActionMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ActionMet = 1;
				public static final int ActionNotMet = 2;
				public static final int RecordVariance = 3;
				public static final int ViewHelp = 4;
				public static final int AddCriticalEvent = 5;
				public static final int EditCriticalEvent = 6;
				public static final int ViewCriticalEvent = 7;
				public static final int AddStage = 8;
				public static final int AddPhase = 9;
				public static final int AddEvaluationNote = 10;
				public static final int EditEvaluationNote = 11;
				public static final int ViewEvaluationNote = 12;
				public static final int Inactivate = 13;
				public static final int Activate = 14;
			}
			public void disableAllActionMenuMenuItems()
			{
				this.contextMenuActionMenuActionMetItem.setEnabled(false);
				this.contextMenuActionMenuActionNotMetItem.setEnabled(false);
				this.contextMenuActionMenuRecordVarianceItem.setEnabled(false);
				this.contextMenuActionMenuViewHelpItem.setEnabled(false);
				this.contextMenuActionMenuAddCriticalEventItem.setEnabled(false);
				this.contextMenuActionMenuEditCriticalEventItem.setEnabled(false);
				this.contextMenuActionMenuViewCriticalEventItem.setEnabled(false);
				this.contextMenuActionMenuAddStageItem.setEnabled(false);
				this.contextMenuActionMenuAddPhaseItem.setEnabled(false);
				this.contextMenuActionMenuAddEvaluationNoteItem.setEnabled(false);
				this.contextMenuActionMenuEditEvaluationNoteItem.setEnabled(false);
				this.contextMenuActionMenuViewEvaluationNoteItem.setEnabled(false);
				this.contextMenuActionMenuInactivateItem.setEnabled(false);
				this.contextMenuActionMenuActivateItem.setEnabled(false);
			}
			public void hideAllActionMenuMenuItems()
			{
				this.contextMenuActionMenuActionMetItem.setVisible(false);
				this.contextMenuActionMenuActionNotMetItem.setVisible(false);
				this.contextMenuActionMenuRecordVarianceItem.setVisible(false);
				this.contextMenuActionMenuViewHelpItem.setVisible(false);
				this.contextMenuActionMenuAddCriticalEventItem.setVisible(false);
				this.contextMenuActionMenuEditCriticalEventItem.setVisible(false);
				this.contextMenuActionMenuViewCriticalEventItem.setVisible(false);
				this.contextMenuActionMenuAddStageItem.setVisible(false);
				this.contextMenuActionMenuAddPhaseItem.setVisible(false);
				this.contextMenuActionMenuAddEvaluationNoteItem.setVisible(false);
				this.contextMenuActionMenuEditEvaluationNoteItem.setVisible(false);
				this.contextMenuActionMenuViewEvaluationNoteItem.setVisible(false);
				this.contextMenuActionMenuInactivateItem.setVisible(false);
				this.contextMenuActionMenuActivateItem.setVisible(false);
			}
			private Menu contextMenuActionMenu;
			public ReadOnlyMenuItem getActionMenuActionMetItem()
			{
				return this.contextMenuActionMenuActionMetItem;
			}
			private MenuItem contextMenuActionMenuActionMetItem;
			public ReadOnlyMenuItem getActionMenuActionNotMetItem()
			{
				return this.contextMenuActionMenuActionNotMetItem;
			}
			private MenuItem contextMenuActionMenuActionNotMetItem;
			public ReadOnlyMenuItem getActionMenuRecordVarianceItem()
			{
				return this.contextMenuActionMenuRecordVarianceItem;
			}
			private MenuItem contextMenuActionMenuRecordVarianceItem;
			public MenuItem getActionMenuViewHelpItem()
			{
				return this.contextMenuActionMenuViewHelpItem;
			}
			private MenuItem contextMenuActionMenuViewHelpItem;
			public ReadOnlyMenuItem getActionMenuAddCriticalEventItem()
			{
				return this.contextMenuActionMenuAddCriticalEventItem;
			}
			private MenuItem contextMenuActionMenuAddCriticalEventItem;
			public ReadOnlyMenuItem getActionMenuEditCriticalEventItem()
			{
				return this.contextMenuActionMenuEditCriticalEventItem;
			}
			private MenuItem contextMenuActionMenuEditCriticalEventItem;
			public ReadOnlyMenuItem getActionMenuViewCriticalEventItem()
			{
				return this.contextMenuActionMenuViewCriticalEventItem;
			}
			private MenuItem contextMenuActionMenuViewCriticalEventItem;
			public ReadOnlyMenuItem getActionMenuAddStageItem()
			{
				return this.contextMenuActionMenuAddStageItem;
			}
			private MenuItem contextMenuActionMenuAddStageItem;
			public ReadOnlyMenuItem getActionMenuAddPhaseItem()
			{
				return this.contextMenuActionMenuAddPhaseItem;
			}
			private MenuItem contextMenuActionMenuAddPhaseItem;
			public ReadOnlyMenuItem getActionMenuAddEvaluationNoteItem()
			{
				return this.contextMenuActionMenuAddEvaluationNoteItem;
			}
			private MenuItem contextMenuActionMenuAddEvaluationNoteItem;
			public ReadOnlyMenuItem getActionMenuEditEvaluationNoteItem()
			{
				return this.contextMenuActionMenuEditEvaluationNoteItem;
			}
			private MenuItem contextMenuActionMenuEditEvaluationNoteItem;
			public ReadOnlyMenuItem getActionMenuViewEvaluationNoteItem()
			{
				return this.contextMenuActionMenuViewEvaluationNoteItem;
			}
			private MenuItem contextMenuActionMenuViewEvaluationNoteItem;
			public ReadOnlyMenuItem getActionMenuInactivateItem()
			{
				return this.contextMenuActionMenuInactivateItem;
			}
			private MenuItem contextMenuActionMenuInactivateItem;
			public ReadOnlyMenuItem getActionMenuActivateItem()
			{
				return this.contextMenuActionMenuActivateItem;
			}
			private MenuItem contextMenuActionMenuActivateItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[135];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-ID", "ID_PatientICPActionStatus");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-STATUSDATE", "StatusDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-STATUS", "Status");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCECATEGORY", "VarianceCategory");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCETYPE", "VarianceType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCECOMMENT", "VarianceComment");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_ICP.EvaluationNote", "BO-1100100008-ID", "ID_PatientICPEvaluationNote");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientCriticalEvent", "BO-1100100007-ID", "ID_PatientCriticalEvents");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__StructuralAssessment_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__SelectedAction_" + componentIdentifier, "BO-1100100004-ID", "ID_PatientICPAction");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__SelectedAction_" + componentIdentifier, "BO-1100100004-REQUIRESCOUNTERSIGNING", "RequiresCounterSigning");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-NAME", "Name");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-HELPURL", "HelpUrl");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__GraphicalAssessment_" + componentIdentifier, "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-ID", "ID_PatientICP");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGADMINACTIONS", "HasOutstandingAdminActions");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGNURSINGACTIONS", "HasOutstandingNursingActions");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGPHYSIOACTIONS", "HasOutstandingPhysioActions");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGCLINICALACTIONS", "HasOutstandingClinicalActions");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-COMPLETEDDATETIME", "CompletedDateTime");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__CurrentPatientICP_" + componentIdentifier, "BO-1100100000-ICP", "ICP");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__ConfigurationICP_" + componentIdentifier, "BO-1060100000-ID", "ID_ICP");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__ConfigurationICP_" + componentIdentifier, "BO-1060100000-NAME", "Name");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__ConfigurationICP_" + componentIdentifier, "BO-1060100000-DESCRIPTION", "Description");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__ConfigurationICP_" + componentIdentifier, "BO-1060100000-STATUS", "Status");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICP.__internal_x_context__LoggedInHcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
