//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//// This code was generated by Sinead McDermott using IMS Development Environment (version 1.25 build 1942.14331)
//// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//
package ims.icp.forms.patienticp;

import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.ICPCompLinkedType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.MouseButton;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.icp.forms.patienticp.GenForm.lyrMainLayer.tabPageClinicDetailsContainer;
import ims.icp.vo.ICPConfigurationDisplayVo;
import ims.icp.vo.ICPLiteVo;
import ims.icp.vo.ICPPhaseDisplayVo;
import ims.icp.vo.ICPPhaseLiteVo;
import ims.icp.vo.ICPStageDisplayVo;
import ims.icp.vo.ICPStageLiteVo;
import ims.icp.vo.IcpPhaseGoalVo;
import ims.icp.vo.PatientCriticalEventsVo;
import ims.icp.vo.PatientICPActionFullVo;
import ims.icp.vo.PatientICPActionFullVoCollection;
import ims.icp.vo.PatientICPActionLiteVo;
import ims.icp.vo.PatientICPActionViewVo;
import ims.icp.vo.PatientICPEvaluationNoteVo;
import ims.icp.vo.PatientICPPhaseViewVo;
import ims.icp.vo.PatientICPStageViewVo;
import ims.icp.vo.PatientICPStageViewVoCollection;
import ims.icp.vo.PatientICPViewVo;
import ims.icp.vo.lookups.ICPActionStatus;
import ims.icp.vo.lookups.ICPPhaseStatus;
import ims.icp.vo.lookups.ICPStageStatus;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.ocrr.vo.OrderEntryTemplateBaseVo;
import ims.vo.ValueObject;
import ims.vo.interfaces.IInstantiationICPStagePhaseAction;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final int PatientDocumentsViewFormId = 102277;//WDEV-14160
	
	protected void onFormOpen() throws PresentationLogicException
	{
		initializeDisciplineCombobox();
		initLoggedInUser();

		form.getLocalContext().setDisciplineType(domain.getCurrentUserDiscipline());

		// engine.setNavigationCollapsed(true);

		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabForm().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(false);

		if (!form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().isImageSelected())
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().clear(Boolean.TRUE);

		createGridColumns();

		open(null);

		form.lnkReturn().setVisible(false);
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PatientICPList) || engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.ClinicListWithICPActions))
			form.lnkReturn().setVisible(true);
	}

	private void initializeDisciplineCombobox()
	{
		// Clear disciplines from combo-box list
		form.lyrMain().tabPageActions().cmbDiscipline().clear();
		
		// Get all the values for ICP Action discipline
		HcpDisTypeCollection disciplines = LookupHelper.getHcpDisType(domain.getLookupService());

		if (disciplines == null)
			return;
		
		// Populate the check list with discipline
		for (int i = 0; i < disciplines.size(); i++)
		{
			HcpDisType discipline = disciplines.get(i);
			
			// Skip null disciplines or disciplines that are not root nodes
			if (discipline == null || discipline.getParent() != null)
				continue;
			
			form.lyrMain().tabPageActions().cmbDiscipline().newRow(discipline, discipline.getText());
		}
	}

	@Override
	protected void onBtnDefaultViewClick() throws PresentationLogicException
	{
		// Clear discipline combo-box
		form.lyrMain().tabPageActions().cmbDiscipline().setValue(null);

		// Open populate with default view
		open(null);

	}

	@Override
	protected void onCmbDisciplineValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onBtnViewClick() throws PresentationLogicException
	{
		open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
	}

	private void initLoggedInUser()
	{
		Object hcpLiteUser = domain.getHcpLiteUser();
		form.getLocalContext().setLoggedInHcp(hcpLiteUser instanceof HcpLiteVo ? (HcpRefVo) hcpLiteUser : null);
	}

	private void open(HcpDisType discipline) throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);

		form.lyrMain().tabPageDetails().setHeaderVisible(false);
		form.lyrMain().tabPageClinicDetails().setHeaderVisible(false);

		form.getLocalContext().setHasNotInScopeStages(Boolean.FALSE);
		form.getLocalContext().setHasNotInScopePhases(Boolean.FALSE);

		form.getContextMenus().ICP.hideAllActionMenuMenuItems();
		form.lyrMain().tabPageActions().grdActions().getRows().clear();

		if (form.getGlobalContext().ICP.getPatientICPRecord() == null)
			return;

		if (form.getGlobalContext().Core.getCurrentCareContext() == null)
		{
			try
			{
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortFromPatientICP(form.getGlobalContext().ICP.getPatientICPRecord()));
			}
			catch (DomainInterfaceException e)
			{
				e.printStackTrace();
				engine.showMessage(e.getMessage());
			}
		}

		// wdev-8663
		try
		{
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralRefVoForCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
		}

		// PatientICPActionLiteVoCollection actions =
		// domain.listActions(form.getGlobalContext().ICP.getPatientICPRecord());
		PatientICPViewVo patientICP = null;
	
		patientICP = domain.getPatientICPViewVo(form.getGlobalContext().ICP.getPatientICPRecord());
		form.getGlobalContext().ICP.setPatientICPRecord(patientICP);

		form.getLocalContext().setCurrentPatientICP(patientICP);

		try
		{
			form.getLocalContext().setConfigurationICP(domain.getConfigurationICP(patientICP == null ? null : patientICP.getICP()));
		}
		catch (DomainInterfaceException e1)
		{
			e1.printStackTrace();
			engine.showMessage(e1.getMessage());
			return;
		}

		ICPLiteVo icp = null;
		try
		{
			icp = domain.getICPInfo(patientICP);
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		}
		

		form.lyrMain().tabPageActions().setCaption("Stages / Phases / Actions - " + icp.getName());

		PatientICPActionViewVo firstAction = null;
		StringBuilder sb = new StringBuilder();
		DynamicGridRow lastStageRow = null;

		// HcpDisType disciplineType =
		// form.getLocalContext().getDisciplineType();
		Image imgLink = form.getImages().Core.InfoEnabled16;

		if (patientICP.getStagesIsNotNull())
		{
			patientICP.getStages().sort(new StageComparator());
			for (PatientICPStageViewVo stage : patientICP.getStages())
			{
				if (stage.getCurrentStatusIsNotNull() && stage.getCurrentStatus().getStatusIsNotNull() && stage.getCurrentStatus().getStatus().equals(ICPStageStatus.NOTINSCOPE))
				{
					form.getLocalContext().setHasNotInScopeStages(Boolean.TRUE);
				}

				if (stage.getCurrentStatusIsNotNull() && stage.getCurrentStatus().getStatusIsNotNull() && !stage.getCurrentStatus().getStatus().equals(ICPStageStatus.NOTINSCOPE))
				{
					DynamicGridRow row = form.lyrMain().tabPageActions().grdActions().getRows().newRow();

					DynamicGridCell cell = row.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
					cell.setValue(stage.getStageIsNotNull() ? stage.getStage().getName() : "");
					cell.setReadOnly(true);
					cell.setWidth(400);

					row.setValue(stage);
					row.setSelectable(true);

					row.setCollapsedImage(form.getImages().ICP.Stage);
					row.setExpandedImage(form.getImages().ICP.Stage);

					if (stage.getStageIsNotNull() && stage.getStage().getHelpURLIsNotNull() && stage.getStage().getHelpURL().trim().length() > 0)
					{
						cell = row.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
						cell.setValue(imgLink);
						cell.setReadOnly(false);
						cell.setTooltip(stage.getStage().getHelpURL());
						cell.setWidth(50);
					}

					if (stage.getStagePhasesIsNotNull())
					{
						stage.getStagePhases().sort(new PhaseComparator());
						for (PatientICPPhaseViewVo phase : stage.getStagePhases())
						{
							if (phase.getCurrentStatusIsNotNull() && phase.getCurrentStatus().getStatusIsNotNull() && phase.getCurrentStatus().getStatus().equals(ICPPhaseStatus.NOTINSCOPE))
							{
								form.getLocalContext().setHasNotInScopePhases(Boolean.TRUE);
							}

							if (phase.getCurrentStatusIsNotNull() && phase.getCurrentStatus().getStatusIsNotNull() && !phase.getCurrentStatus().getStatus().equals(ICPPhaseStatus.NOTINSCOPE))
							{
								DynamicGridRow phaseRow = row.getRows().newRow();

								cell = phaseRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
								cell.setValue(phase.getPhaseIsNotNull() ? phase.getPhase().getName() : "");

								cell.setReadOnly(true);
								cell.setWidth(400);

								phaseRow.setValue(phase);
								phaseRow.setSelectable(true);

								phaseRow.setCollapsedImage(form.getImages().ICP.Phase);
								phaseRow.setExpandedImage(form.getImages().ICP.Phase);

								if (phase.getPhaseIsNotNull() && phase.getPhase().getGoalsIsNotNull() && phase.getPhase().getGoals().size() > 0)
								{
									sb.setLength(0);
									sb.append("Goals: ");
									for (IcpPhaseGoalVo goal : phase.getPhase().getGoals())
									{
										sb.append(goal.getGoal());
										sb.append("; ");
									}

									cell.setTooltip(sb.toString());
								}

								if (phase.getPhaseIsNotNull() && phase.getPhase().getHelpURLIsNotNull() && phase.getPhase().getHelpURL().trim().length() > 0)
								{
									cell = phaseRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
									cell.setValue(imgLink);
									cell.setTooltip(phase.getPhase().getHelpURL());
									cell.setWidth(50);
								}

								if (phase.getPhaseActionsIsNotNull())
								{
									phase.getPhaseActions().sort(new ActionComparator());
									for (PatientICPActionViewVo action : phase.getPhaseActions())
									{
										if (discipline != null
												&& action.getActionIsNotNull()
												&& action.getAction().getDisciplineIsNotNull()
												&& !action.getAction().getDiscipline().contains(discipline))
											continue;

										if (action.getCurrentStatusIsNotNull())
										{
											if (ICPActionStatus.MET.equals(action.getCurrentStatus().getStatus()) || ICPActionStatus.NOT_MET.equals(action.getCurrentStatus().getStatus()) || ICPActionStatus.OUTSTANDING.equals(action.getCurrentStatus().getStatus()))
											{
												DynamicGridRow rowAction = phaseRow.getRows().newRow();

												cell = rowAction.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
												cell.setValue(action.getAction().getName());
												cell.setTooltip(action.getAction().getName());
												cell.setReadOnly(true);
												cell.setWidth(400);

												rowAction.setCollapsedImage(form.getImages().ICP.Action);
												rowAction.setExpandedImage(form.getImages().ICP.Action);

												// WDEV - 10277 (Create a new cell that will show "Requires Counter-Signing")
												cell = rowAction.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_COUNTER_SIGNATURE), DynamicCellType.IMAGE);

												cell.setValue(null);
												cell.setTooltip("");

												if (Boolean.TRUE.equals(action.getRequiresCounterSigning()))
												{
													cell.setValue(form.getImages().ICP.ACTION_OUTSANDING_ENABLED_16);
													cell.setTooltip("Requires counter-signing");
												}

												cell.setWidth(50);
												cell.setReadOnly(true);

												if (action.getCurrentStatusIsNotNull() && action.getCurrentStatus().getStatusIsNotNull())
												{
													cell = rowAction.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ICON), DynamicCellType.IMAGE);
													cell.setValue(action.getCurrentStatus().getStatus().getImage());

													// Set status information for Audit View - in tool tip
													StringBuilder toolTip = new StringBuilder();

													toolTip.append("Status: " + action.getCurrentStatus().getStatus().getText());

													if (ICPActionStatus.MET.equals(action.getCurrentStatus().getStatus()))
													{
														//WDEV-17157 - Changed by in the Audit Info tool tip now displays the name of the MOS, rather than their initials.
														toolTip.append("<br>Changed By: " + (action.getCurrentStatus().getChangedByIsNotNull() && action.getCurrentStatus().getChangedBy().getNameIsNotNull() ? action.getCurrentStatus().getChangedBy().getIMosName().toString() : ""));
														toolTip.append("<br>Date / Time: " + (action.getCurrentStatus().getStatusDateIsNotNull() ? action.getCurrentStatus().getStatusDate().toString() : "--/--/--"));
													}
													else if (ICPActionStatus.NOT_MET.equals(action.getCurrentStatus().getStatus()))
													{
														//WDEV-17157 - Changed by in the Audit Info tool tip now displays the name of the MOS, rather than their initials.
														toolTip.append("<br>Changed By: " + (action.getCurrentStatus().getChangedByIsNotNull() && action.getCurrentStatus().getChangedBy().getNameIsNotNull() ? action.getCurrentStatus().getChangedBy().getIMosName().toString() : ""));
														toolTip.append("<br>Date / Time: " + (action.getCurrentStatus().getStatusDateIsNotNull() ? action.getCurrentStatus().getStatusDate().toString() : "--/--/--"));
														toolTip.append("<br>Variance Category: " + (action.getCurrentStatus().getVarianceCategoryIsNotNull() ? action.getCurrentStatus().getVarianceCategory().toString() : ""));
														toolTip.append("<br>Variance Type: " + (action.getCurrentStatus().getVarianceTypeIsNotNull() ? action.getCurrentStatus().getVarianceType().toString() : ""));
														toolTip.append("<br>Variance Comment: " + (action.getCurrentStatus().getVarianceCommentIsNotNull() ? action.getCurrentStatus().getVarianceComment() : ""));
													}

													cell.setTooltip(toolTip.toString());
													cell.setWidth(50);
												}

												rowAction.setValue(action);

												rowAction.setSelectable(true);

												if (isActionEditable(action))
												{
													rowAction.setBackColor(InScopeColor);
												}

												if (action.getActionIsNotNull() && action.getAction().getHelpURLIsNotNull() && action.getAction().getHelpURL().trim().length() > 0)
												{
													cell = rowAction.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
													cell.setValue(imgLink);
													cell.setTooltip(action.getAction().getHelpURL());
													cell.setWidth(50);
												}

											}
										}
									}

									// phaseRow.setExpanded(true);
								}
							}
						}

						// row.setExpanded(true);
					}

					if (lastStageRow == null)
						lastStageRow = row;
					else
					{
						PatientICPStageViewVo prevStage = (PatientICPStageViewVo) lastStageRow.getValue();

						if (prevStage.getCurrentStatusIsNotNull() && prevStage.getCurrentStatus().getStatusDateIsNotNull() && stage.getCurrentStatusIsNotNull() && stage.getCurrentStatus().getStatusDateIsNotNull())
						{
							if (stage.getCurrentStatus().getStatusDate().isGreaterThan(prevStage.getCurrentStatus().getStatusDate()))
							{
								lastStageRow = row;
							}
						}
					}
				}
				else
				{
					// check phases that belong to NOT_IN_SCOPE stages
					if (stage.getStagePhasesIsNotNull())
					{
						for (PatientICPPhaseViewVo phase : stage.getStagePhases())
						{
							if (phase.getCurrentStatusIsNotNull() && phase.getCurrentStatus().getStatusIsNotNull() && phase.getCurrentStatus().getStatus().equals(ICPPhaseStatus.NOTINSCOPE))
							{
								form.getLocalContext().setHasNotInScopePhases(Boolean.TRUE);
							}
						}
					}
				}
			}
		}

		if (form.getLocalContext().getSelectedAction() != null)
		{
			firstAction = form.getLocalContext().getSelectedAction();

			form.lyrMain().tabPageActions().grdActions().setValue(firstAction);
			onGrdActionsRowSelectionChanged(null, null);

			expandActionRow(null);
		}
		else if (lastStageRow != null)
		{
			/*
			 * PatientICPStagesLiteVo prevStage = (PatientICPStagesLiteVo) lastStageRow.getValue();
			 * 
			 * if(prevStage.getStagePhasesIsNotNull()) { for (PatientICPPhasesLiteVo phase : prevStage.getStagePhases()) { if(phase.getPhaseActionsIsNotNull()) { for (PatientICPActionLiteVo action : phase.getPhaseActions()) { if(firstAction == null) { if(ICPActionStatus.MET.equals(action.getCurrentStatus().getStatus()) || ICPActionStatus.NOT_MET.equals(action.getCurrentStatus().getStatus()) || ICPActionStatus.OUTSTANDING.equals(action.getCurrentStatus().getStatus())) { firstAction = action; break; } } } }
			 * 
			 * if(firstAction != null) break; } }
			 * 
			 * 
			 * form.lyrMain().tabPageActions().grdActions().setValue(firstAction); onGrdActionsRowSelectionChanged(null);
			 */
			expandActionRow(lastStageRow);
			form.lyrMain().tabPageDetails().lyrICP().hide();
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().hide();
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
		}

		if (Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue()) && patientICP.getCriticalEventsIsNotNull())	//WDEV-12171
		{
			DynamicGridRow row = form.lyrMain().tabPageActions().grdActions().getRows().newRow();

			DynamicGridCell cell = row.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
			cell.setValue(CRITICAL_EVENT);
			cell.setReadOnly(true);
			cell.setWidth(-1);

			row.setValue(CRITICAL_EVENT);
			row.setSelectable(true);

			row.setCollapsedImage(form.getImages().Core.CriticalError);
			row.setExpandedImage(form.getImages().Core.CriticalError);

			patientICP.getCriticalEvents().sort(SortOrder.DESCENDING);

			for (PatientCriticalEventsVo event : patientICP.getCriticalEvents())
			{
				DynamicGridRow eventRow = row.getRows().newRow();

				DynamicGridCell eventCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
				eventCell.setValue(event.getCriticalEvent() + " - " + (event.getAuthoringInformationIsNotNull() ? event.getAuthoringInformation().getAuthoringDateTime().getDate() : " ? "));
				eventCell.setReadOnly(true);
				eventCell.setTooltip(event.getNote());
				eventCell.setWidth(600);				// WDEV-11957: Increased size of column for Critical events for a better text display

				eventRow.setValue(event);
				eventRow.setSelectable(true);
				eventRow.setCollapsedImage(form.getImages().Core.RedCircle);
				eventRow.setExpandedImage(form.getImages().Core.RedCircle);

				DynamicGridCell dummyCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ICON), DynamicCellType.STRING);
				dummyCell.setWidth(0);
				dummyCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_HELP), DynamicCellType.STRING);
				dummyCell.setWidth(0);

			}

			row.setExpanded(true);
		}

		if (patientICP.getEvaluationNotesIsNotNull())
		{
			DynamicGridRow row = form.lyrMain().tabPageActions().grdActions().getRows().newRow();

			DynamicGridCell cell = row.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
			cell.setValue(EVALUATION_NOTES);
			cell.setReadOnly(true);
			cell.setWidth(-1);

			row.setValue(EVALUATION_NOTES);
			row.setSelectable(true);

			row.setCollapsedImage(form.getImages().Core.Memo);
			row.setExpandedImage(form.getImages().Core.Memo);

			patientICP.getEvaluationNotes().sort(SortOrder.DESCENDING);

			for (PatientICPEvaluationNoteVo note : patientICP.getEvaluationNotes())
			{
				DynamicGridRow eventRow = row.getRows().newRow();

				DynamicGridCell eventCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ACTION), DynamicCellType.STRING);
				eventCell.setValue(note.getDiscipline() + " - " + (note.getAuthoringInformationIsNotNull() ? note.getAuthoringInformation().getAuthoringDateTime().getDate() : " ? "));
				eventCell.setReadOnly(true);
				eventCell.setTooltip(note.getNote());
				eventCell.setWidth(250);

				eventRow.setValue(note);
				eventRow.setSelectable(true);
				eventRow.setCollapsedImage(form.getImages().Core.GreenSquare);
				eventRow.setExpandedImage(form.getImages().Core.GreenSquare);

				DynamicGridCell dummyCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_ICON), DynamicCellType.STRING);
				dummyCell.setWidth(0);
				dummyCell = eventRow.getCells().newCell(form.lyrMain().tabPageActions().grdActions().getColumns().getByIdentifier(COL_HELP), DynamicCellType.STRING);
				dummyCell.setWidth(0);

			}

			row.setExpanded(true);
		}

		showContextMenu();
	}

	private void expandActionRow(DynamicGridRow lastStageRow)
	{
		if (lastStageRow != null)
		{
			lastStageRow.setExpanded(true, true);
		}
		else if (form.lyrMain().tabPageActions().grdActions().getSelectedRow() != null)
		{
			if (form.lyrMain().tabPageActions().grdActions().getSelectedRow().getParent() != null)
			{
				if (form.lyrMain().tabPageActions().grdActions().getSelectedRow().getParent().getParent() != null)
				{
					form.lyrMain().tabPageActions().grdActions().getSelectedRow().getParent().getParent().setExpanded(true, true);
				}
				else
				{
					form.lyrMain().tabPageActions().grdActions().getSelectedRow().getParent().setExpanded(true, true);
				}
			}
			else
			{
				form.lyrMain().tabPageActions().grdActions().getSelectedRow().setExpanded(true, true);
			}
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().ICP.RecordICPActionVariance) && result.equals(DialogResult.OK))
		{
			form.lyrMain().tabPageActions().grdActions().setValue(null);

			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			form.lyrMain().showtabPageActions();
		}
		else if (formName.equals(form.getForms().ICP.ICPCritcalEvents) && result.equals(DialogResult.OK))
		{
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			form.lyrMain().showtabPageActions();
		}
		else if (formName.equals(form.getForms().ICP.BringIntoScope) && result.equals(DialogResult.OK))
		{
			form.lyrMain().tabPageActions().grdActions().setValue(null);
			form.getLocalContext().setSelectedAction(null);
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			form.lyrMain().showtabPageActions();
		}
		else if (formName.equals(form.getForms().ICP.ICPEvaluationNotes) && result.equals(DialogResult.OK))
		{
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			form.lyrMain().showtabPageActions();
		}
		else if (formName.equals(form.getForms().ICP.ActivateStagePhases) && result.equals(DialogResult.OK))
		{
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			form.lyrMain().showtabPageActions();
		}
		
		open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
		
		// Update controls & context menu
		updateControlsState();
		updateBringIntoScopeMenu();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.ActionMet:
				doActionMet();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.ActionNotMet:
				doActionNotMet();
				doRecordVariance();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.RecordVariance:
				doRecordVariance();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.AddCriticalEvent:
				doAddCriticalEvent();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.EditCriticalEvent:
				doEditCriticalEvent();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.ViewCriticalEvent:
				doViewCriticalEvent();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.AddStage:
				doAddStage();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.AddPhase:
				doAddPhase();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.AddEvaluationNote:
				doAddEvaluationNote();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.EditEvaluationNote:
				doEditEvaluationNote();
				break;
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.ViewEvaluationNote:
				doViewEvaluationNote();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.Activate:
				doActivateStagesPhases();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.ActionMenu.Inactivate:
				doInactivateStagePhase();
				break;
				
			default:
				break;
		}

	}

	/**
	 * WDEV-13377
	 * Function used to inactivate a stage or a phase
	 */
	private void doInactivateStagePhase() throws PresentationLogicException
	{
		try
		{
    		// Check for selected row to contain a stage or a phase
    		if (!(form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPStageViewVo)
    				&& !(form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPPhaseViewVo))
    		{
    			engine.showMessage("Can only inactivate stages or phases.");
    			return;
    		}
    		
    		// Call domain function to inactivate stage or phase
			form.getGlobalContext().ICP.setPatientICPRecord(domain.inactivateStagePhase(form.getGlobalContext().ICP.getPatientICPRecord(), (ValueObject) form.lyrMain().tabPageActions().grdActions().getValue()));

			// Refresh screen
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
		}
		// Treat exceptions
		catch (DomainInterfaceException exception)
		{
			engine.showMessage(exception.getMessage());
			exception.printStackTrace();
		}
		catch (StaleObjectException exception)
		{
			exception.printStackTrace();
			// Show message
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// Refresh screen
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
		}
	}

	private void doActivateStagesPhases()
	{
		engine.open(form.getForms().ICP.ActivateStagePhases);
	}

	private void doAddStage()
	{
		form.getGlobalContext().ICP.setTypeToSelect("S");
		engine.open(form.getForms().ICP.BringIntoScope);
	}

	private void doAddPhase()
	{
		form.getGlobalContext().ICP.setTypeToSelect("P");
		engine.open(form.getForms().ICP.BringIntoScope);
	}

	private void doEditCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent((PatientCriticalEventsVo) form.lyrMain().tabPageActions().grdActions().getValue());
		engine.open(form.getForms().ICP.ICPCritcalEvents);
	}

	private void doAddCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent(null);
		engine.open(form.getForms().ICP.ICPCritcalEvents);
	}

	private void doViewCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent((PatientCriticalEventsVo) form.lyrMain().tabPageActions().grdActions().getValue());
		engine.open(form.getForms().ICP.ICPCritcalEvents, new Object[] { Boolean.TRUE });
	}

	private void doViewHelp(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		Object rowValue = cell.getRow().getValue();
		
		if (rowValue instanceof IInstantiationICPStagePhaseAction)
		{
			String helpURL = ((IInstantiationICPStagePhaseAction) rowValue).getHelpURL();
			
			if (helpURL != null && helpURL.trim().length() > 0)
			{
				engine.openUrl(helpURL);
			}
		}
	}

	private void doActionMet() throws PresentationLogicException
	{
		try
		{
			domain.addActionStatus((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue(), ICPActionStatus.MET, engine.hasRight(AppRight.CAN_COUNTERSIGN));
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
	}

	private void doActionNotMet() throws PresentationLogicException
	{
		try
		{
			domain.addActionStatus((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue(), ICPActionStatus.NOT_MET, engine.hasRight(AppRight.CAN_COUNTERSIGN));
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
			return;
		}

		open(form.lyrMain().tabPageActions().cmbDiscipline().getValue());
	}

	private void doRecordVariance()
	{
		form.getGlobalContext().ICP.setActionStatus(((PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue()).getCurrentStatus());
		engine.open(form.getForms().ICP.RecordICPActionVariance);
	}

	private void doEditEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote((PatientICPEvaluationNoteVo) form.lyrMain().tabPageActions().grdActions().getValue());
		engine.open(form.getForms().ICP.ICPEvaluationNotes);
	}

	private void doAddEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote(null);
		engine.open(form.getForms().ICP.ICPEvaluationNotes);
	}

	private void doViewEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote((PatientICPEvaluationNoteVo) form.lyrMain().tabPageActions().grdActions().getValue());
		engine.open(form.getForms().ICP.ICPEvaluationNotes, new Object[] { Boolean.TRUE });
	}

	private void displayFormOrAssessment() throws PresentationLogicException
	{
		// WDEV-12965
		// Condition for Patient ICP to be completed
		boolean patientICPCompleted = form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();

		PatientICPActionViewVo actionView = (PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue();
		PatientICPActionLiteVo action = domain.getPatientICPActionLiteVo((PatientICPActionRefVo) actionView);

		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabForm().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabPageNoDetails().setHeaderVisible(false);

		if (action == null)
		{
			form.getLocalContext().setCurrentPatientAssessment(null);//WDEV-12099
			form.lyrMain().tabPageDetails().lyrICP().showtabForm();
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
			return;
		}

		form.getLocalContext().setOneInstancePresent(Boolean.FALSE);

		if (!form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().isImageSelected())
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().clear(Boolean.TRUE);

		if (ICPCompLinkedType.FORM.equals(action.getAction().getLinkedType()) && action.getAction().getLinkedFormIsNotNull())
		{
			form.getLocalContext().setCurrentPatientAssessment(null);//WDEV-12099
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
			form.lyrMain().tabPageDetails().lyrICP().showtabForm();
			form.lyrMain().tabPageDetails().lyrICP().tabForm().setHeaderVisible(true);
			try
			{
				form.lyrMain().tabPageDetails().lyrICP().tabForm().dynamicForm().setReadOnly(patientICPCompleted || !isActionEditable(action));//WDEV-12965
				
				//WDEV-14160 - starts here
				Object[] args = null;
				if(action.getAction().getLinkedForm().getFormId() == PatientDocumentsViewFormId)
				{
					args = new Object[] {UploadDocumentStoreLevel.REFERRAL};
					form.lyrMain().tabPageDetails().lyrICP().tabForm().dynamicForm().open(new ims.domain.FormName(action.getAction().getLinkedForm().getFormId()), args);
				}
				else
				{
					form.lyrMain().tabPageDetails().lyrICP().tabForm().dynamicForm().open(new ims.domain.FormName(action.getAction().getLinkedForm().getFormId()));
				}
				//WDEV-14160 - ends here
			}
			catch (Exception e)
			{
				engine.showMessage("Error displaying linked form: " + e.getMessage());
				return;
			}
			// engine.setCaption(action.getAction().getLinkedForm().getCaption());
		}
		else if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(action.getAction().getLinkedType()) && action.getAction().getLinkedAssessmentIsNotNull())
		{
			form.lyrMain().tabPageDetails().chkComplete().setVisible(true);
			UserAssessmentVo assessment = action.getAction().getLinkedAssessment();
			if (form.getLocalContext().getCurrentPatientAssessmentIsNotNull() 
					&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentDataIsNotNull() 
					&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull() 
					&&  !form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().equals(assessment) )
			{
				form.getLocalContext().setCurrentPatientAssessment(null);
			}
			if (assessment != null)
			{
				// structured assessment
				form.lyrMain().tabPageDetails().lyrICP().showtabAssessment();
				form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setHeaderVisible(true);

				openStructuredAssessments();
				// engine.setCaption(assessment.getName());
			}

			if (isActionEditable(action) == false)
			{
				// WDEV-8379
				if (form.getMode().equals(FormMode.VIEW))
				{
					form.lyrMain().tabPageDetails().btnNew().setVisible(false);
					form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
				}
			}
			//WDEV-12965-Start
			if (patientICPCompleted)
			{
				if (form.getMode().equals(FormMode.VIEW))
				{
					form.lyrMain().tabPageDetails().btnNew().setVisible(false);
					form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
				}
			}
			//WDEV-12965-End
		}
		else if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(action.getAction().getLinkedType()) && action.getAction().getLinkedGraphicAssessmentIsNotNull())
		{
			form.lyrMain().tabPageDetails().chkComplete().setVisible(true);
			GraphicAssessmentShortVo graphicAssessment = action.getAction().getLinkedGraphicAssessment();
			if (form.getLocalContext().getCurrentPatientAssessmentIsNotNull() 
					&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentDataIsNotNull() 
					&& form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull() 
					&&  !form.getLocalContext().getCurrentPatientAssessment().getAssessmentData().getUserAssessment().equals(graphicAssessment) )
			{
				form.getLocalContext().setCurrentPatientAssessment(null);
			}

			if (graphicAssessment != null)
			{
				// graphic assessment
				form.lyrMain().tabPageDetails().lyrICP().showtabGraphicAssessment();
				form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setHeaderVisible(true);

				openGraphicAssessments();
			}

			if (isActionEditable(action) == false)
			{
				// WDEV-8379
				if (form.getMode().equals(FormMode.VIEW))
				{
					form.lyrMain().tabPageDetails().btnNew().setVisible(false);
					form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
				}
			}
			//WDEV-12965-Start
			if (patientICPCompleted)
			{
				if (form.getMode().equals(FormMode.VIEW))
				{
					form.lyrMain().tabPageDetails().btnNew().setVisible(false);
					form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
				}
			}
			//WDEV-12965-End

		}
		else if (ICPCompLinkedType.ORDER_TEMPLATE.equals(action.getAction().getLinkedType()) && action.getAction().getLinkedOrderEntryTemplateIsNotNull())
		{
			form.getLocalContext().setCurrentPatientAssessment(null);
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
			OrderEntryTemplateBaseVo orderEntryTemplate = action.getAction().getLinkedOrderEntryTemplate();

			if (orderEntryTemplate != null)
			{
				form.lyrMain().tabPageDetails().lyrICP().showtabForm();
				form.lyrMain().tabPageDetails().lyrICP().tabForm().setHeaderVisible(true);
				form.lyrMain().tabPageDetails().lyrICP().tabForm().dynamicForm().setReadOnly(patientICPCompleted || !isActionEditable(action));//WDEV-12965
				form.lyrMain().tabPageDetails().lyrICP().tabForm().dynamicForm().open(form.getForms().OCRR.SelectandOrder, new Object[] { action.getAction().getLinkedOrderEntryTemplate() });
				// engine.setCaption(form.getForms().OCRR.SelectandOrder.getName());
			}
		}
		else if (ICPCompLinkedType.NONE.equals(action.getAction().getLinkedType()))
		{
			form.getLocalContext().setCurrentPatientAssessment(null);
			form.lyrMain().tabPageDetails().chkComplete().setVisible(false);
			
			form.lyrMain().tabPageDetails().lyrICP().showtabPageNoDetails();
			form.lyrMain().tabPageDetails().lyrICP().tabPageNoDetails().setHeaderVisible(true);
		}

		updateControlsState();

		form.getLocalContext().setSelectedAction(actionView);

		form.lyrMain().tabPageDetails().setHeaderVisible(true);
		form.lyrMain().showtabPageDetails();

		form.lyrMain().tabPageDetails().setCaption("Details - " + action.getAction().getName());
	}

	private boolean isActionEditable(PatientICPActionLiteVo action)
    {
		if (action == null)
    		return false;
    
    	HcpDisType disciplineType = form.getLocalContext().getDisciplineType();
    
    	if (disciplineType == null || !action.getActionIsNotNull() || !action.getAction().getDisciplineIsNotNull())
    		return false;
    
    	for (int i = 0; i < action.getAction().getDiscipline().size(); i++)
    	{
    		HcpDisType actionDiscipline = action.getAction().getDiscipline().get(i);
    
    		if (actionDiscipline.getID() == disciplineType.getID())
    			return true;
    
    		if (disciplineType.getParent() != null && actionDiscipline.getID() == disciplineType.getParent().getID())
    			return true;
    	}
    
    	return false;
	}

	private void openGraphicAssessments() throws PresentationLogicException
	{
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);

		PatientICPActionLiteVo action = domain.getPatientICPActionLiteVo((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue());
		GraphicAssessmentShortVo graphicAssessment = action.getAction().getLinkedGraphicAssessment();

		GraphicAssessmentVo graphicalAssessment = domain.getGraphicalAssessment(graphicAssessment);

		if (graphicalAssessment == null)
			throw new PresentationLogicException("Invalid graphical assessment");

		form.getLocalContext().setGraphicalAssessment(graphicalAssessment);

		clearPageControls();

		populateGraphicalAssessmentControlsFromData();
		enableGraphicalAssessmentHelpUrlImage(graphicalAssessment);

	}

	private void populateGraphicalAssessmentControlsFromData()
	{
		// GraphicAssessmentVo graphicalAssessment =
		// form.getLocalContext().getGraphicalAssessment();
		// form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalHelp().setEnabled(graphicalAssessment
		// != null && graphicalAssessment.getHelpUrlIsNotNull() &&
		// graphicalAssessment.getHelpUrl().trim().length() > 0);

		int count = populateGraphicalAssessmentHistoricControlsFromData();

		PatientAssessmentVo patientAssessment = null;

		// if(form.getGlobalContext().Core.getCurrentClinicalContact() != null)
		// patientAssessment =
		// domain.getPatientAssessment(form.getGlobalContext().Core.getCurrentClinicalContact(),
		// graphicalAssessment);

			if (count == 0)
			{
				displayBlankGraphicalAssessment();

				form.getLocalContext().setAllowNew(new Boolean(allowNew()));
				form.getLocalContext().setAllowUpdate(new Boolean(allowUpdate()));
			}
			else if (form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().getValue() != null)
			{
				patientAssessment = domain.getPatientAssessment(form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().getValue());
				populateGraphicalAssessmentControlsFromData(patientAssessment);
			}

		// form.getLocalContext().setRIE(patientAssessment);
	}

	private void displayBlankGraphicalAssessment()
	{
		GraphicAssessmentVo graphicalAssessment = form.getLocalContext().getGraphicalAssessment();
		PatientAssessmentVo newAssessment = new PatientAssessmentVo();
		PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();
		// engine.setCaption(graphicalAssessment.getName());
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setCaption(graphicalAssessment.getName());
		assessmentData.setGraphic(graphicalAssessment);
		newAssessment.setAssessmentData(assessmentData);
		form.lyrMain().tabPageDetails().chkComplete().setValue(false);
		//WDEV-11366
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().setPatientAssessment(newAssessment,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalContextInfo().setTooltip("");
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedVisible(false);
	}

	private void populateGraphicalAssessmentControlsFromData(PatientAssessmentVo patientAssessment)
	{
		// form.getLocalContext().setRIE(patientAssessment);
		form.getLocalContext().setCurrentPatientAssessment((PatientAssessmentVo) patientAssessment.clone());

		boolean completed = patientAssessment.getStatus() != null && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);

		form.lyrMain().tabPageDetails().chkComplete().setValue(completed);
		//WDEV-11366
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().setPatientAssessment(patientAssessment,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));

		form.getLocalContext().setAllowNew(new Boolean(allowNew()));
		form.getLocalContext().setAllowUpdate(new Boolean(allowUpdate(patientAssessment)));

		if (form.getLocalContext().getGraphicalAssessment() != null && form.getLocalContext().getGraphicalAssessment().getName() != null)
		{
			// engine.setCaption(form.getLocalContext().getGraphicalAssessment().getName());
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setCaption(form.getLocalContext().getGraphicalAssessment().getName());
		}
		else
		{
			// engine.setCaption("Assessment");
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setCaption("Assessment");
		}

		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().setValue(patientAssessment.getAuthoringInformation());

		if (completed)
		{
			AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();
			completeAuthoring.setAuthoringHcp(patientAssessment.getCompletedHCP());
			completeAuthoring.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setValue(completeAuthoring);
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedVisible(true);
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedVisible(false);
		}

		populateGraphicalAssessmentContextInformation(patientAssessment.getCareContext(), patientAssessment.getClinicalContact());
	}

	private void populateGraphicalAssessmentContextInformation(CareContextRefVo careContext, ClinicalContactRefVo clinicalContact)
	{
		populateGraphicalAssessmentContextInformation(domain.getCareContextShort(careContext), domain.getClinicalContactShort(clinicalContact));
	}

	private void populateGraphicalAssessmentContextInformation(CareContextShortVo careContext, ClinicalContactShortVo clinicalContact)
	{
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalContextInfo().setTooltip(getContextInformation(careContext, clinicalContact));
	}

	private void enableGraphicalAssessmentHelpUrlImage(GraphicAssessmentVo assessment)
	{
		String helpUrl = assessment != null && assessment.getHelpUrlIsNotNull() && assessment.getHelpUrl().trim().length() > 0 ? assessment.getHelpUrl().trim() : null;

		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalHelp().setEnabled(helpUrl != null ? true : false);

		if (helpUrl != null)
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalHelp().setTooltip(helpUrl);
	}

	private int populateGraphicalAssessmentHistoricControlsFromData()
	{
		form.getLocalContext().setLoadedRecords(new PatientAssessmentListVoCollection());

		GraphicAssessmentVo graphicalAssessment = form.getLocalContext().getGraphicalAssessment();
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().clear();

		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		if (careContext == null || careContext.getContext() == null)
			return 0;

		PatientAssessmentListVoCollection records = null;
		if (careContext.getContext().equals(ContextType.INPATIENT))
			records = domain.listPatientAssessments(careContext, graphicalAssessment);
		else
			records = domain.listPatientAssessments(careContext.getEpisodeOfCare(), graphicalAssessment);

		if (records != null)
		{
			form.getLocalContext().setLoadedRecords(records);

			for (int x = 0; x < records.size(); x++)
			{
				PatientAssessmentListVo patientAssessment = records.get(x);
				String text = "";

				Color color = Color.Default;
				if (patientAssessment.getClinicalContact() != null && patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
					color = Color.Blue;
				if (patientAssessment.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContact() == null && patientAssessment.getCareContext() != null && patientAssessment.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
					color = Color.Blue;

				if (patientAssessment.getAuthoringInformation() != null)
				{
					text += patientAssessment.getAuthoringInformation().getAuthoringDateTime() == null ? "<unknown date>" : patientAssessment.getAuthoringInformation().getAuthoringDateTime().toString();
					text += " - ";
					text += patientAssessment.getAuthoringInformation().getAuthoringHcp() == null ? "<unknown>" : patientAssessment.getAuthoringInformation().getAuthoringHcp().toString();
				}
				else
					text = "? - ?";

				form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().newRow(patientAssessment, text, color);
			}

			updateGraphicalAssessmentSelection();

			return records.size();
		}

		return 0;
	}

	private void updateGraphicalAssessmentSelection()
	{
		if (form.getLocalContext().getLoadedRecords() == null)
			return;

		PatientAssessmentVo lastSelectedPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if (lastSelectedPatientAssessment == null)
		{
			CareContextRefVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactRefVo clinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			PatientAssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();

			for (int x = 0; x < records.size(); x++)
			{
				PatientAssessmentListVo record = records.get(x);

				if (record.getCareContext() != null && record.getCareContext().equals(careContext))
				{
					if (record.getClinicalContact() != null && record.getClinicalContact().equals(clinicalContact))
					{
						form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().setValue(record);
						return;
					}
					else if (record.getClinicalContact() == null && clinicalContact == null)
					{
						form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().setValue(record);
						return;
					}
				}
			}
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().setValue(lastSelectedPatientAssessment);
		}
	}

	private void openStructuredAssessments()
	{
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().setIsRequiredPropertyToControls(Boolean.TRUE);

		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(Boolean.FALSE);

		clearPageControls();

		PatientICPActionLiteVo action = domain.getPatientICPActionLiteVo((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue());
		UserAssessmentVo assessment = action.getAction().getLinkedAssessment();

		form.getLocalContext().setStructuralAssessment(assessment);
		populateStructuralAssessmentControlsFromData();

		boolean hasLinkedReport = refreshReport(assessment);
		form.lyrMain().tabPageDetails().lyrICP().settabReportEnabled(hasLinkedReport);
		form.lyrMain().tabPageDetails().lyrICP().settabAssessmentEnabled(true);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setHeaderVisible(true);
		form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(hasLinkedReport);
		if (hasLinkedReport)
			form.lyrMain().tabPageDetails().lyrICP().showtabReport();
		form.lyrMain().tabPageDetails().lyrICP().showtabAssessment();
	}

	private void clearPageControls()
	{
		form.lyrMain().tabPageDetails().chkComplete().setValue(false);

		// Structural Assessment
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().clearComponent();
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().clear();
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.FALSE);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedEnabled(false);

		// Graphical Assessment
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().clear();
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().clear();
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().imbGraphicalContextInfo().setTooltip("");
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.FALSE);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedVisible(false);
		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedEnabled(false);
	}

	private boolean refreshReport(UserAssessmentVo assessment)
	{
		boolean hasLinkedReport = false;

		String linkedReportName = (assessment != null ? domain.getLinkedReportName(assessment) : null);

		// form.lyrMain().tabPageDetails().lyrICP().tabAssessment().btnView().setVisible(false);

		if (linkedReportName != null)
		{
			form.lyrMain().tabPageDetails().lyrICP().tabReport().ccReportBuilder().buildAssessmentReport(assessment);
			hasLinkedReport = true;
		}

		if (form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().getValue() != null)
		{
			form.lyrMain().tabPageDetails().lyrICP().tabReport().setCaption("View as report");
			form.lyrMain().tabPageDetails().lyrICP().showtabAssessment();

			if (linkedReportName != null)
			{
				form.lyrMain().tabPageDetails().lyrICP().tabReport().setCaption(linkedReportName);
				form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(true);
				hasLinkedReport = true;
			}
			else
			{
				form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(false);
			}
		}
		else
		{
			if (linkedReportName != null)
			{
				form.lyrMain().tabPageDetails().lyrICP().tabReport().setCaption(linkedReportName);
				form.lyrMain().tabPageDetails().lyrICP().showtabReport();
				hasLinkedReport = true;
			}
			else
			{
				form.lyrMain().tabPageDetails().lyrICP().showtabAssessment();
				form.lyrMain().tabPageDetails().lyrICP().tabReport().setHeaderVisible(false);
			}
		}

		return hasLinkedReport;
	}

	private void populateStructuralAssessmentControlsFromData()
	{
		int count = populateStructuralAssessmentHistoricControlsFromData();

		if (count == 0)
		{
			UserAssessmentVo assessment = form.getLocalContext().getStructuralAssessment();
			displayBlankStructuralAssessment(assessment);

			form.getLocalContext().setAllowNew(new Boolean(allowNew()));
			form.getLocalContext().setAllowUpdate(new Boolean(allowUpdate()));
		}
		else
		{
			PatientAssessmentVo patientAssessment = domain.getPatientAssessment(form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().getValue());
			form.getLocalContext().setCurrentPatientAssessment(patientAssessment);
			populateStructuralAssessmentControlsFromData(patientAssessment);
		}

	}

	private void populateStructuralAssessmentControlsFromData(PatientAssessmentVo patientAssessment)
	{
		form.getLocalContext().setCurrentPatientAssessment((PatientAssessmentVo) patientAssessment.clone());

		boolean completed = patientAssessment.getStatus() != null && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);

		form.lyrMain().tabPageDetails().chkComplete().setValue(completed);
		//WDEV-11366
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().setPatientAssessment(patientAssessment,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));

		form.getLocalContext().setAllowNew(new Boolean(allowNew()));
		form.getLocalContext().setAllowUpdate(new Boolean(allowUpdate(patientAssessment)));

		if (patientAssessment.getAssessmentData() != null && patientAssessment.getAssessmentData().getUserAssessment() != null)
		{
			// engine.setCaption(patientAssessment.getAssessmentData().getUserAssessment().getName());
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setCaption(patientAssessment.getAssessmentData().getUserAssessment().getName());
		}
		else
		{
			// engine.setCaption("Assessment");
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setCaption("Assessment");
		}

		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().setValue(patientAssessment.getAuthoringInformation());

		if (completed)
		{
			AuthoringInformationVo completeAuthoring = new AuthoringInformationVo();
			completeAuthoring.setAuthoringHcp(patientAssessment.getCompletedHCP());
			completeAuthoring.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setValue(completeAuthoring);
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(true);
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(false);
		}

		populateStructuralAssessmentContextInformation(patientAssessment.getCareContext(), patientAssessment.getClinicalContact());
	}

	private void populateStructuralAssessmentContextInformation()
	{
		populateStructuralAssessmentContextInformation(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact());
	}

	private void populateStructuralAssessmentContextInformation(CareContextShortVo careContext, ClinicalContactShortVo clinicalContact)
	{
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().imbStructuralContextInfo().setTooltip(getContextInformation(careContext, clinicalContact));
	}

	private void populateStructuralAssessmentContextInformation(CareContextRefVo careContext, ClinicalContactRefVo clinicalContact)
	{
		populateStructuralAssessmentContextInformation(domain.getCareContextShort(careContext), domain.getClinicalContactShort(clinicalContact));
	}

	private String getContextInformation(CareContextShortVo careContext, ClinicalContactShortVo clinicalContact)
	{
		String infoText = "";

		if (careContext != null)
		{
			infoText += "Care Context: " + careContext.toString();
		}
		else
		{
			infoText += "No Care Context";
		}

		if (clinicalContact == null)
		{
			infoText += "<br>No Clinical Contact.";
		}
		else
		{
			infoText += "<br>Clinical Contact: " + clinicalContact.toString();
		}
		return infoText;
	}

	private void displayBlankStructuralAssessment(UserAssessmentVo assessment)
	{
		UserAssessmentVo userAssessment = form.getLocalContext().getStructuralAssessment();
		PatientAssessmentVo newAssessment = new PatientAssessmentVo();
		PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();
		// engine.setCaption(userAssessment.getName());
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setCaption(userAssessment.getName());
		assessmentData.setUserAssessment(userAssessment);

		assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
		newAssessment.setAssessmentData(assessmentData);
		form.lyrMain().tabPageDetails().chkComplete().setValue(false);
		//WDEV-11366
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().setPatientAssessment(newAssessment,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(false);
	}

	private int populateStructuralAssessmentHistoricControlsFromData()
	{
		form.getLocalContext().setLoadedRecords(new PatientAssessmentListVoCollection());

		UserAssessmentVo userAssessment = form.getLocalContext().getStructuralAssessment();

		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().clear();

		CareContextShortVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
		if (careContext == null || careContext.getContext() == null)
			return 0;

		PatientAssessmentListVoCollection records = null;
		if (careContext.getContext().equals(ContextType.INPATIENT))
			records = domain.listPatientAssessments(careContext, userAssessment);
		else
			records = domain.listPatientAssessments(careContext.getEpisodeOfCare(), userAssessment);

		if (records != null)
		{
			form.getLocalContext().setLoadedRecords(records);

			for (int x = 0; x < records.size(); x++)
			{
				PatientAssessmentListVo patientAssessment = records.get(x);
				String text = "";

				Color color = Color.Default;
				if (patientAssessment.getClinicalContact() != null && patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
					color = Color.Blue;
				if (patientAssessment.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContact() == null && patientAssessment.getCareContext() != null && patientAssessment.getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext()))
					color = Color.Blue;

				if (patientAssessment.getAuthoringInformation() != null)
				{
					text += patientAssessment.getAuthoringInformation().getAuthoringDateTime() == null ? "<unknown date>" : patientAssessment.getAuthoringInformation().getAuthoringDateTime().toString();
					text += " - ";
					text += patientAssessment.getAuthoringInformation().getAuthoringHcp() == null ? "<unknown>" : patientAssessment.getAuthoringInformation().getAuthoringHcp().toString();
				}
				else
					text = "? - ?";

				form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().newRow(patientAssessment, text, color);
			}

			updateStructuredAssessmentSelection();

			return records.size();
		}

		return 0;
	}

	private void updateStructuredAssessmentSelection()
	{
		if (form.getLocalContext().getLoadedRecords() == null)
			return;

		PatientAssessmentVo lastSelectedPatientAssessment = form.getLocalContext().getCurrentPatientAssessment();
		if (lastSelectedPatientAssessment == null)
		{
			CareContextRefVo careContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactRefVo clinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			PatientAssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();

			for (int x = 0; x < records.size(); x++)
			{
				PatientAssessmentListVo record = records.get(x);

				if (record.getCareContext() != null && record.getCareContext().equals(careContext))
				{
					if (record.getClinicalContact() != null && record.getClinicalContact().equals(clinicalContact))
					{
						form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().setValue(record);
						return;
					}
					else if (record.getClinicalContact() == null && clinicalContact == null)
					{
						form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().setValue(record);
						return;
					}
				}
			}
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().setValue(lastSelectedPatientAssessment);
		}
	}

	private boolean allowNew()
	{
		if (form.getGlobalContext().Core.getCurrentClinicalContact() == null)
			return true;

		PatientAssessmentListVoCollection records = form.getLocalContext().getLoadedRecords();
		if (records == null)
			return true;

		for (int x = 0; x < records.size(); x++)
		{
			PatientAssessmentListVo record = records.get(x);
			if (record != null && record.getClinicalContact() != null && record.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
				return false;
		}

		return true;
	}

	private boolean allowUpdate()
	{
		return false;
	}

	private boolean allowUpdate(PatientAssessmentVo patientAssessment)
	{
		if (patientAssessment.getClinicalContact() == null)
			return patientAssessment != null && form.getGlobalContext().Core.getCurrentClinicalContact() == null;

		if (patientAssessment.getClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact()))
			return true;

		return false;
	}

	private void showContextMenu()
	{
		form.getContextMenus().ICP.hideAllActionMenuMenuItems();

		updateBringIntoScopeMenu();

		Object obj = form.lyrMain().tabPageActions().grdActions().getValue();

		if (obj == null)
			return;
		
		if (form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull())//WDEV-12965
			return;//WDEV-12965

		if (obj instanceof PatientICPActionViewVo)
		{
			PatientICPActionViewVo action = (PatientICPActionViewVo) obj;

			if (InScopeColor.equals(form.lyrMain().tabPageActions().grdActions().getSelectedRow().getBackColor()))
			{
				if (ICPActionStatus.OUTSTANDING.equals(action.getCurrentStatus().getStatus()))
				{
					form.getContextMenus().ICP.getActionMenuActionMetItem().setVisible(true);
					form.getContextMenus().ICP.getActionMenuActionNotMetItem().setVisible(true);
				}
				else if (ICPActionStatus.NOT_MET.equals(action.getCurrentStatus().getStatus()))
				{
					form.getContextMenus().ICP.getActionMenuRecordVarianceItem().setVisible(true);
				}
			}
		}
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		// WDEV-12303 - No need to simulate the reselecting of an action (check previous code for reference)
		// we just need to refresh the Details tab, so just call displayFormOrAssessment() & remember to set the form to VIEW mode
		try
		{
			displayFormOrAssessment();
			form.setMode(FormMode.VIEW);
		}
		catch (PresentationLogicException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
		}
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
		{
			form.setMode(FormMode.VIEW);
			onGrdActionsRowSelectionChanged(form.lyrMain().tabPageActions().grdActions().getSelectedRow(), MouseButton.LEFT);
		}
	}

	@Override
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onImbStructuralContextInfoClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	@Override
	protected void onImbStructuralHelpClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	@Override
	protected void onRecbrStructuredAssessmentValueChanged() throws PresentationLogicException
	{
		PatientAssessmentVo patientAssessment = domain.getPatientAssessment(form.lyrMain().tabPageDetails().lyrICP().tabAssessment().recbrStructuredAssessment().getValue());
		
		if (patientAssessment != null)
		{
    		form.getLocalContext().setCurrentPatientAssessment((PatientAssessmentVo) patientAssessment.clone());
    		populateStructuralAssessmentControlsFromData(patientAssessment);
		}
		updateControlsState();

		// refreshReport(form.getGlobalContext().Assessment.getDynamicAssessment());
		checkNewUpdateForAction();
	}

	private void checkNewUpdateForAction()
	{
		// WDEV-8379
		if (form.getMode().equals(FormMode.VIEW) && form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPActionViewVo)
		{
			PatientICPActionViewVo action = (PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue();
			
			boolean isCompleted =form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();//WDEV-12965
			if (!isCompleted && isActionEditable(action) == false)//WDEV-12965
			{
				form.lyrMain().tabPageDetails().btnNew().setVisible(false);
				form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
			}
		}
	}

	private void updateControlsState()
	{
		form.lyrMain().tabPageActions().btnView().setEnabled(form.lyrMain().tabPageActions().cmbDiscipline().getValue() != null);
		form.lyrMain().tabPageDetails().btnClose().setVisible(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.lnkReturn().setEnabled(true);
			
			boolean isCompleted =form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();//WDEV-12965
			
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().setReadOnly(Boolean.TRUE);

			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().setEnabled(Boolean.FALSE);

			if (!isCompleted && form.getLocalContext().getAllowNewIsNotNull() && form.getLocalContext().getAllowNew().booleanValue() && (form.getLocalContext().getOneInstancePresent() == null || !form.getLocalContext().getOneInstancePresent().booleanValue()))//WDEV-12965
			{
				form.lyrMain().tabPageDetails().btnNew().setVisible(true);
				form.lyrMain().tabPageDetails().btnNew().setEnabled(true);
			}
			else
			{
				form.lyrMain().tabPageDetails().btnNew().setVisible(false);
				form.lyrMain().tabPageDetails().btnNew().setEnabled(false);
			}

			if (!isCompleted && form.getLocalContext().getAllowUpdateIsNotNull() && form.getLocalContext().getAllowUpdate().booleanValue() && !form.lyrMain().tabPageDetails().chkComplete().getValue())//WDEV-12965
			{
				form.lyrMain().tabPageDetails().btnUpdate().setVisible(true);
				form.lyrMain().tabPageDetails().btnUpdate().setEnabled(true);
				form.lyrMain().tabPageDetails().btnNew().setVisible(true);
			}
			else
			{
				form.lyrMain().tabPageDetails().btnUpdate().setVisible(false);
				form.lyrMain().tabPageDetails().btnUpdate().setEnabled(false);
			}

			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentEnabled(false);
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentEnabled(false);

			if (form.lyrMain().tabPageDetails().chkComplete().isVisible())
			{
				form.lyrMain().tabPageDetails().chkComplete().setEnabled(false);
			}

			form.lyrMain().tabPageActions().setHeaderEnabled(true);
		}
		else
		{
			form.lnkReturn().setEnabled(false);

			form.lyrMain().tabPageDetails().btnSave().setVisible(isGraphicalAssessment() || isStructuralAssessment());
			// WDEV-8165
			form.lyrMain().tabPageDetails().btnCancel().setVisible(isGraphicalAssessment() || isStructuralAssessment());

			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().setEnabled(Boolean.TRUE);
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().setReadOnly(Boolean.FALSE);

			// WDEV-12644
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

			if (form.lyrMain().tabPageDetails().chkComplete().isVisible())
			{
				form.lyrMain().tabPageDetails().chkComplete().setEnabled(true);
			}

			form.lyrMain().tabPageActions().setHeaderEnabled(false);
		}

		form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().setMode(form.getMode());

		checkNewUpdateForAction();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void newInstance()
	{
		form.getLocalContext().setCurrentPatientAssessment(null);

		if (isStructuralAssessment())
		{
			displayBlankStructuralAssessment();
			populateStructuralAssessmentContextInformation();
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().initializeComponent();
			form.setMode(FormMode.EDIT);
			// WDEV-12644
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		}
		else if (isGraphicalAssessment())
		{
			displayBlankGraphicalAssessment();
			populateGraphicalAssessmentContextInformation();
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().initializeComponent();
			form.setMode(FormMode.EDIT);
			// WDEV-12644
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
		}
	}

	private void populateGraphicalAssessmentContextInformation()
	{
		populateGraphicalAssessmentContextInformation(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact());
	}

	private boolean isStructuralAssessment()
	{
		PatientICPActionViewVo action = (PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue();

		if (action == null)
			return false;

		if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(action.getAction().getLinkedType()))
		{
			return true;
		}

		return false;
	}

	private boolean isGraphicalAssessment()
	{
		PatientICPActionViewVo action = (PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue();

		if (action == null)
			return false;

		if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(action.getAction().getLinkedType()) )
		{
			return true;
		}

		return false;
	}

	private void displayBlankStructuralAssessment()
	{
		UserAssessmentVo userAssessment = form.getLocalContext().getStructuralAssessment();
		PatientAssessmentVo newAssessment = new PatientAssessmentVo();
		PatientAssessmentDataVo assessmentData = new PatientAssessmentDataVo();
		// engine.setCaption(userAssessment.getName());
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setCaption(userAssessment.getName());
		assessmentData.setUserAssessment(userAssessment);

		assessmentData.setGroupQuestionWidth(userAssessment.getGroupQuestionWidth());
		newAssessment.setAssessmentData(assessmentData);
		form.lyrMain().tabPageDetails().chkComplete().setValue(false);
		//WDEV-11366
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().setPatientAssessment(newAssessment,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().setValue(null);
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().imbStructuralContextInfo().setTooltip("");
		form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(false);
	}

	private boolean save() throws PresentationLogicException
	{
		PatientAssessmentVo patientAssessment = null;
		AuthoringInformationVo authoringInfo = null;
		AuthoringInformationVo completingInfo = null;

		String[] componentValidationErrors = null;

		if (isStructuralAssessment())
		{
			patientAssessment = form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().getPatientAssessment();
			authoringInfo = form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().getValue();
			componentValidationErrors = form.lyrMain().tabPageDetails().lyrICP().tabAssessment().customStructuredAssessment().validateData();

			if (form.lyrMain().tabPageDetails().chkComplete().getValue())
				completingInfo = form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().getValue();
		}
		else if (isGraphicalAssessment())
		{
			if (form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().isImageSelected() == null || !form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().isImageSelected().booleanValue())
			{
				engine.showMessage("No image has been selected");
				return false;
			}

			patientAssessment = form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().getPatientAssessment();
			authoringInfo = form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().getValue();
			componentValidationErrors = form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().customGraphicalAssessment().validateData();

			if (form.lyrMain().tabPageDetails().chkComplete().getValue())
				completingInfo = form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().getValue();
		}
		else
			throw new CodingRuntimeException("Invalid patient assessment to save");

		//WDEV-11721
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//WDEV-11526
		patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientAssessment.setAuthoringInformation(authoringInfo);
		boolean completed = form.lyrMain().tabPageDetails().chkComplete().getValue();
		patientAssessment.setStatus(completed ? PatientAssessmentStatusReason.COMPLETED : PatientAssessmentStatusReason.INPROGRESS);

		// updating the authoring hcp for answers
		patientAssessment = DynamicAssessmentHelper.populateHCPDataForAnswers(form.getLocalContext().getCurrentPatientAssessment(), patientAssessment, (HcpLiteVo) domain.getHcpLiteUser(), new DateTime());

		// updating the completing hcp
		ArrayList<String> completingErrors = new ArrayList<String>();
		if (completed)
		{
			if (completingInfo == null || completingInfo.getAuthoringHcp() == null || completingInfo.getAuthoringDateTime() == null)
			{
				if (completingInfo == null)
				{
					completingErrors.add("Invalid completing information");
				}
				else if (completingInfo.getAuthoringHcp() == null)
				{
					completingErrors.add("Invalid completing HCP");
				}
				else if (completingInfo.getAuthoringDateTime() == null)
				{
					completingErrors.add("Invalid completing date/time");
				}
			}
			else
			{
				if (authoringInfo != null // wdev-5914
						&& completingInfo != null && authoringInfo.getAuthoringDateTime() != null && completingInfo.getAuthoringDateTime() != null && completingInfo.getAuthoringDateTime().compareTo(authoringInfo.getAuthoringDateTime()) < 0)
				{
					completingErrors.add("Completing date/time cannot be before authoring date/time");
				}

				patientAssessment.setCompletedHCP(completingInfo.getAuthoringHcp());
				patientAssessment.setCompletedDateTime(completingInfo.getAuthoringDateTime());
			}
		}

		ArrayList<String> authoringErrors = new ArrayList<String>();
		if (authoringInfo == null)
		{
			authoringErrors.add("Invalid authoring information");
		}
		else
		{
			if (authoringInfo.getAuthoringHcp() == null)
			{
				authoringErrors.add("Invalid authoring HCP");
			}
			if (authoringInfo.getAuthoringDateTime() == null)
			{
				authoringErrors.add("Invalid authoring date/time");
			}
		}
		if (authoringErrors.size() > 0 || completingErrors.size() > 0)
		{
			String[] extraErrors = new String[authoringErrors.size() + completingErrors.size()];
			int index = 0;
			for (int x = 0; x < authoringErrors.size(); x++)
			{
				extraErrors[index++] = (String) authoringErrors.get(x);
			}
			for (int x = 0; x < completingErrors.size(); x++)
			{
				extraErrors[index++] = (String) completingErrors.get(x);
			}

			engine.showErrors(extraErrors);
			return false;
		}

		String[] errors = patientAssessment.validate(completed ? componentValidationErrors : null);
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			form.getLocalContext().setCurrentPatientAssessment(domain.savePatientAssessment(patientAssessment));
			// form.getGlobalContext().Core.setPatientAssessmentFull(domain.savePatientAssessment(patientAssessment));
			// form.getGlobalContext().Assessment.setPatientAssessment(form.getGlobalContext().Core.getPatientAssessmentFull());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			form.setMode(FormMode.VIEW);
			onGrdActionsRowSelectionChanged(form.lyrMain().tabPageActions().grdActions().getSelectedRow(), null);
			return false;
		}

		if (form.getGlobalContext().Core.getCurrentClinicalContact() != null)
			form.getLocalContext().setOneInstancePresent(Boolean.TRUE);

		return true;
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);

		if (isStructuralAssessment())
		{
			populateStructuralAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentEnabled(false);
		}
		else if (isGraphicalAssessment())
		{
			populateGraphicalAssessmentControlsFromData(form.getLocalContext().getCurrentPatientAssessment());
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentEnabled(false);
		}
	}

	@Override
	protected void onChkCompleteValueChanged() throws PresentationLogicException
	{
		processCompletedOptions(form.lyrMain().tabPageDetails().chkComplete().getValue());
	}

	private void processCompletedOptions(boolean completed)
	{
		if (isStructuralAssessment())
		{
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedVisible(completed);
			// WDEV-12644
			form.lyrMain().tabPageDetails().lyrICP().tabAssessment().setauthStructuredAssessmentCompletedEnabled(completed && Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

			if (completed)
			{
				form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().initializeComponent();
				form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);

				//WDEV-11988 form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessmentCompleted().setValue(form.lyrMain().tabPageDetails().lyrICP().tabAssessment().authStructuredAssessment().getValue());
			}
		}
		else
		{
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedVisible(completed);
			// WDEV-12644
			form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().setauthGraphicalAssessmentCompletedEnabled(completed && Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));

			if (completed)
			{
				form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().initializeComponent();
				form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);

				//WDEV-11988 form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessmentCompleted().setValue(form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().authGraphicalAssessment().getValue());
			}
		}
	}

	@Override
	protected void onImbGraphicalContextInfoClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	@Override
	protected void onImbGraphicalHelpClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	@Override
	protected void onRecbrGraphicalAssessmentValueChanged() throws PresentationLogicException
	{
		PatientAssessmentVo patientAssessment = domain.getPatientAssessment(form.lyrMain().tabPageDetails().lyrICP().tabGraphicAssessment().recbrGraphicalAssessment().getValue());
		
		if (patientAssessment != null)
		{
			form.getLocalContext().setCurrentPatientAssessment((PatientAssessmentVo) patientAssessment.clone());
			populateGraphicalAssessmentControlsFromData(patientAssessment);
		}
		
		updateControlsState();

		checkNewUpdateForAction();
	}

	private void createGridColumns()
	{
		form.lyrMain().tabPageActions().grdActions().clear();

		DynamicGridColumn column = form.lyrMain().tabPageActions().grdActions().getColumns().newColumn("Action");
		column.setIdentifier(COL_ACTION);
		column.setWidth(400);
		column.setDynamicWidthSupported(true);

		column = form.lyrMain().tabPageActions().grdActions().getColumns().newColumn(" ");
		column.setIdentifier(COL_COUNTER_SIGNATURE);
		column.setWidth(50);
		column.setDynamicWidthSupported(true);
		column.setAlignment(Alignment.CENTER);

		column = form.lyrMain().tabPageActions().grdActions().getColumns().newColumn("Status");
		column.setIdentifier(COL_ICON);
		column.setWidth(50);
		column.setDynamicWidthSupported(true);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);

		column = form.lyrMain().tabPageActions().grdActions().getColumns().newColumn(" ");
		column.setIdentifier(COL_HELP);
		column.setWidth(25);
		column.setDynamicWidthSupported(true);
	}

	@Override
	protected void onGrdActionsCellButtonClicked(DynamicGridCell cell)
	{
		doViewHelp(cell);
	}

	@Override
	protected void onGrdActionsRowSelectionChanged(DynamicGridRow row, MouseButton mouseButton) throws PresentationLogicException
	{
		PatientICPViewVo patICP = form.getLocalContext().getCurrentPatientICP();

		if (patICP == null)
			return;

		updateBringIntoScopeMenu();
		
		boolean isCompleted =patICP.getCompletedDateTimeIsNotNull();//WDEV-12965
		if (!isCompleted)
		{
			if (domain.isICPCompleted(patICP))
			{
				engine.showMessage("The current Patient ICP was marked as completed by another user.No further data can be linked to this ICP.");
				form.getLocalContext().setCurrentPatientICP(domain.getPatientICPViewVo(patICP));
			
			}
		}

		if (row != null && CRITICAL_EVENT.equals(row.getValue()))
		{
			form.getContextMenus().ICP.hideAllActionMenuMenuItems();

			updateBringIntoScopeMenu();

			if (Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue()) && !isCompleted)	//wdev-12171//WDEV-12965
				form.getContextMenus().ICP.getActionMenuAddCriticalEventItem().setVisible(true);

			form.getLocalContext().setSelectedAction(null);
			form.lyrMain().tabPageDetails().setHeaderVisible(false);

			return;
		}

		if (row != null && EVALUATION_NOTES.equals(row.getValue()))
		{
			form.getContextMenus().ICP.hideAllActionMenuMenuItems();

			updateBringIntoScopeMenu();

			if (!isCompleted)//WDEV-12965
				form.getContextMenus().ICP.getActionMenuAddEvaluationNoteItem().setVisible(true);

			form.getLocalContext().setSelectedAction(null);
			form.lyrMain().tabPageDetails().setHeaderVisible(false);

			return;
		}

		if (row != null && row.getValue() instanceof PatientCriticalEventsVo)
		{
			form.getContextMenus().ICP.hideAllActionMenuMenuItems();

			updateBringIntoScopeMenu();

			PatientCriticalEventsVo patientCriticalEventsVo = (PatientCriticalEventsVo) row.getValue();
			boolean isSelectedEventAuthoredByMe = patientCriticalEventsVo.getAuthoringInformationIsNotNull() && patientCriticalEventsVo.getAuthoringInformation().getAuthoringHcpIsNotNull() && patientCriticalEventsVo.getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedInHcp());
			form.getContextMenus().ICP.getActionMenuEditCriticalEventItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue()) && isSelectedEventAuthoredByMe && !isCompleted);	//WDEV-12171//WDEV-12965
			form.getContextMenus().ICP.getActionMenuViewCriticalEventItem().setVisible(Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue()) && (!isSelectedEventAuthoredByMe || isCompleted));	//WDEV-12171//WDEV-12965

			form.getLocalContext().setSelectedAction(null);
			form.lyrMain().tabPageDetails().setHeaderVisible(false);

			return;
		}

		if (row != null && row.getValue() instanceof PatientICPEvaluationNoteVo)
		{
			form.getContextMenus().ICP.hideAllActionMenuMenuItems();

			updateBringIntoScopeMenu();

			PatientICPEvaluationNoteVo patientIcpEvaluationNote = (PatientICPEvaluationNoteVo) row.getValue();
			boolean isSelectedEvaluationAuthoredByMe = patientIcpEvaluationNote.getAuthoringInformationIsNotNull() && patientIcpEvaluationNote.getAuthoringInformation().getAuthoringHcpIsNotNull() && patientIcpEvaluationNote.getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedInHcp());

			form.getContextMenus().ICP.getActionMenuEditEvaluationNoteItem().setVisible(isSelectedEvaluationAuthoredByMe && !isCompleted);//WDEV-12965
			form.getContextMenus().ICP.getActionMenuViewEvaluationNoteItem().setVisible(!isSelectedEvaluationAuthoredByMe || isCompleted);//WDEV-12965

			form.getLocalContext().setSelectedAction(null);
			form.lyrMain().tabPageDetails().setHeaderVisible(false);

			return;
		}

		showContextMenu();

		if (form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPActionViewVo)
			form.getLocalContext().setSelectedAction((PatientICPActionViewVo) form.lyrMain().tabPageActions().grdActions().getValue());

		if (mouseButton == null || MouseButton.RIGHT.equals(mouseButton))
			return;
		else
		{
			if (form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPActionViewVo)
			{

				form.getLocalContext().setCurrentPatientAssessment(null);		//wdev-13048
				form.getLocalContext().setGraphicalAssessment(null);
				form.getLocalContext().setLoadedRecords(null);
				form.getLocalContext().setOneInstancePresent(null);
				form.getLocalContext().setAllowNew(null);
				form.getLocalContext().setAllowUpdate(null);
				form.getLocalContext().setStructuralAssessment(null);

				try
				{
					displayFormOrAssessment();

					displayLinkedForms();
				}
				catch (PresentationLogicException e)
				{
					e.printStackTrace();
					engine.showMessage(e.getMessage());
				}

				if (row == null)
					form.lyrMain().showtabPageActions();
			}
			else
			{
				form.lyrMain().tabPageClinicDetails().setVisible(false);
				form.lyrMain().tabPageDetails().setVisible(false);
				
				form.lyrMain().tabPageClinicDetails().setHeaderVisible(false);
				form.lyrMain().tabPageDetails().setHeaderVisible(false);
			}
		}
	}

	protected void onRecbrLinkedActionsValueChanged() throws PresentationLogicException
	{
		boolean completedPatientICP = form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();
		
		form.lyrMain().tabPageClinicDetails().ccLinkedActionDetails().setValue(form.lyrMain().tabPageClinicDetails().recbrLinkedActions().getValue(), !completedPatientICP);
	}

	private void displayLinkedForms()
	{
		
		// Get linked actions
		PatientICPActionFullVo actionFull = domain.getPatientICPActionFull((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue());

		// Populate record browser actions
		PatientICPActionFullVoCollection linkedPatientICPActions = domain.getLinkedPatientICPActions(actionFull);

		// Determine if there are linked actions to be displayed
		if (linkedPatientICPActions == null || linkedPatientICPActions.size() == 0)
		{
			form.lyrMain().tabPageClinicDetails().setHeaderVisible(false);
			return;
		}

		//populateLinkedActionsRecordBrowser(linkedPatientICPActions);

		// Select one action
//		form.lyrMain().tabPageClinicDetails().ccLinkedActionDetails().setValue(form.lyrMain().tabPageClinicDetails().recbrLinkedActions().getValue(), false);

		// Show header for
		form.lyrMain().tabPageClinicDetails().setHeaderVisible(true);
	}

	private void populateLinkedActionsRecordBrowser(PatientICPActionFullVoCollection patientActionCollection)
	{
		// Clear record browser
		form.lyrMain().tabPageClinicDetails().recbrLinkedActions().clear();

		if (patientActionCollection == null)
			return;

		for (int i = 0; i < patientActionCollection.size(); i++)
		{
			PatientICPActionFullVo patientAction = patientActionCollection.get(i);

			if (patientAction == null)
				continue;

			StringBuilder display = new StringBuilder();

			if (patientAction.getActionIsNotNull())
				display.append(patientAction.getAction().getName());

			form.lyrMain().tabPageClinicDetails().recbrLinkedActions().newRow(patientAction, display.toString());
		}

		if (patientActionCollection.size() > 0)
			form.lyrMain().tabPageClinicDetails().recbrLinkedActions().setValue(patientActionCollection.get(0));
	}

	private void updateBringIntoScopeMenu()
	{
		boolean isCompleted =form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();//WDEV-12965
		
		form.getContextMenus().ICP.getActionMenuAddStageItem().setVisible(!isCompleted && (Boolean.TRUE.equals(form.getLocalContext().getHasNotInScopeStages()) || hasStagesNotAdded()));//WDEV-12965
		form.getContextMenus().ICP.getActionMenuAddPhaseItem().setVisible(!isCompleted && (Boolean.TRUE.equals(form.getLocalContext().getHasNotInScopePhases()) || hasPhasesNotAdded()));//WDEV-12965
		
		form.getContextMenus().ICP.getActionMenuActivateItem().setVisible((Boolean.TRUE.equals(form.getLocalContext().getHasNotInScopeStages()) || Boolean.TRUE.equals(form.getLocalContext().getHasNotInScopePhases())) && !isCompleted ); //WDEV-14338 
		form.getContextMenus().ICP.getActionMenuInactivateItem().setVisible((form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPStageViewVo || form.lyrMain().tabPageActions().grdActions().getValue() instanceof PatientICPPhaseViewVo) && !isCompleted); //WDEV-14338
	}

	private boolean hasStagesNotAdded()
	{
		// Get Patient ICP
		PatientICPViewVo patientICP = form.getLocalContext().getCurrentPatientICP();

		// If no patient ICP exists or configuration ICP is not present ->
		// NO stages to add
		if (patientICP == null || !patientICP.getICPIsNotNull())
			return false;

		// Get Configuration ICP
		ICPConfigurationDisplayVo configurationICP = form.getLocalContext().getConfigurationICP();

		// If no configuration ICP exists or configuration ICP has no stages
		// -> NO stages to add
		if (configurationICP == null || !configurationICP.getStagesIsNotNull())
			return false;

		if (patientICP.getStagesIsNotNull() && patientICP.getStages().size() == configurationICP.getStages().size())
			return false;

		// Sort configuration Stages
		configurationICP.getStages().sort(new StageComparator());

		// Iterate configuration stages
		for (ICPStageDisplayVo stage : configurationICP.getStages())
		{
			// Check stage status
			if (stage == null || !PreActiveActiveInactiveStatus.ACTIVE.equals(stage.getStatus()))
				continue;

			// Find stage in patient ICP Stages
			if (!findStageInPatientICP((ICPStageLiteVo) stage, patientICP.getStages()))
				return true;
		}

		return false;
	}

	private boolean findStageInPatientICP(ICPStageLiteVo stage, PatientICPStageViewVoCollection patientICPStageViewVoCollection)
	{
		// For a null stage always assume it exits
		if (stage == null)
			return true;

		// If the Patient ICP doesn't have any stages - return false
		if (patientICPStageViewVoCollection == null)
			return false;

		// Sort patient stages
		patientICPStageViewVoCollection.sort(new StageComparator());

		// Iterate patient stages
		for (PatientICPStageViewVo patientStage : patientICPStageViewVoCollection)
		{
			// Skip null stages
			if (patientStage == null)
				continue;

			// Return true when finding the stage
			if (stage.equals(patientStage.getStage()))
				return true;
		}

		// In the end return false
		return false;
	}

	private boolean hasPhasesNotAdded()
	{
		// Get Patient ICP
		PatientICPViewVo patientICP = form.getLocalContext().getCurrentPatientICP();

		// If no patient ICP exits or configuration ICP is not present -> NO
		// Phases to add
		if (patientICP == null || !patientICP.getICPIsNotNull())
			return false;

		// Get Configuration ICP
		ICPConfigurationDisplayVo configurationICP = form.getLocalContext().getConfigurationICP();

		// If no configuration ICP exits or configuration ICP has no stages ->
		// NO Phases to add
		if (configurationICP == null || !configurationICP.getStagesIsNotNull() || PreActiveActiveInactiveStatus.INACTIVE.equals(configurationICP.getStatus()))
			return false;

		// Sort configuration stages
		configurationICP.getStages().sort(new StageComparator());

		// Iterate configuration stages
		for (ICPStageDisplayVo stage : configurationICP.getStages())
		{
			// Check stage status
			if (stage == null || !PreActiveActiveInactiveStatus.ACTIVE.equals(stage.getStatus()) || !stage.getPhasesIsNotNull())
				continue;

			// Sort configuration phases
			stage.getPhases().sort(new PhaseComparator());

			// Iterate configuration phases
			for (ICPPhaseDisplayVo phase : stage.getPhases())
			{
				// Check phase status
				if (phase == null || !PreActiveActiveInactiveStatus.ACTIVE.equals(phase.getStatus()))
					continue;

				if (!findPhaseInPatientICP((ICPPhaseLiteVo) phase, patientICP.getStages()))
					return true;
			}
		}

		return false;
	}

	private boolean findPhaseInPatientICP(ICPPhaseLiteVo phase, PatientICPStageViewVoCollection patientICPStageViewVoCollection)
	{
		// For a null phase always assume it exists
		if (phase == null)
			return true;

		// If the Patient ICP doesn't have any stages - return false
		if (patientICPStageViewVoCollection == null)
			return false;

		// Sort patient stages
		patientICPStageViewVoCollection.sort(new StageComparator());

		// Iterate patient stages
		for (PatientICPStageViewVo patientStage : patientICPStageViewVoCollection.sort(new StageComparator()))
		{
			// Skip null stages or stages without phases
			if (patientStage == null || !patientStage.getStageIsNotNull())
				continue;

			// Iterate patient phases
			for (PatientICPPhaseViewVo patientPhase : patientStage.getStagePhases())
			{
				// Skip null phases
				if (patientPhase == null)
					continue;

				// Return true when finding the phase
				if (phase.equals(patientPhase.getPhase()))
					return true;
			}
		}

		// In the end return false
		return false;
	}

	/**
	 * Checks if the provided action can be edited by current user
	 * 
	 * @param action
	 *            - Action to be checked; if the action passed is null the function will return false
	 * @return - returns true if the current user has the same discipline
	 */
	private boolean isActionEditable(PatientICPActionViewVo action)
	{
		if (action == null)
			return false;

		HcpDisType disciplineType = form.getLocalContext().getDisciplineType();

		if (disciplineType == null || !action.getActionIsNotNull() || !action.getAction().getDisciplineIsNotNull())
			return false;

		for (int i = 0; i < action.getAction().getDiscipline().size(); i++)
		{
			HcpDisType actionDiscipline = action.getAction().getDiscipline().get(i);

			if (actionDiscipline.getID() == disciplineType.getID())
				return true;

			if (disciplineType.getParent() != null && actionDiscipline.getID() == disciplineType.getParent().getID())
				return true;
		}

		return false;
	}

	@SuppressWarnings("serial")
	public class CustomFormName extends FormName
	{

		public CustomFormName(int id, String name)
		{
			super(id, name);
		}

	}

	/**
	 *	WDEV-13377
	 *	Comparator for sorting ICPStageDisplayVo, PatientICPStageViewVo after configuration sequence
	 */
	public class StageComparator implements Comparator<Object>
	{
		public int compare(Object arg0, Object arg1)
		{
			if (arg0 instanceof PatientICPStageViewVo && arg1 instanceof PatientICPStageViewVo)
			{
				PatientICPStageViewVo patientStage0 = (PatientICPStageViewVo) arg0;
				PatientICPStageViewVo patientStage1 = (PatientICPStageViewVo) arg1;
				
				return patientStage0.getStage().getSequence().compareTo(patientStage1.getStage().getSequence());
			}
			
			if (arg0 instanceof ICPStageDisplayVo && arg1 instanceof ICPStageDisplayVo)
			{
				ICPStageDisplayVo stage0 = (ICPStageDisplayVo) arg0;
				ICPStageDisplayVo stage1 = (ICPStageDisplayVo) arg1;
				
				return stage0.getSequence().compareTo(stage1.getSequence());
			}
			
			if (arg0 instanceof PatientICPStageViewVo && arg1 instanceof ICPStageDisplayVo)
			{
				PatientICPStageViewVo	patientStage0	= (PatientICPStageViewVo) arg0;
				ICPStageDisplayVo		stage1			= (ICPStageDisplayVo) arg1;
				
				return patientStage0.getStage().getSequence().compareTo(stage1.getSequence());
			}
			
			if (arg0 instanceof ICPStageDisplayVo && arg1 instanceof PatientICPStageViewVo)
			{
				ICPStageDisplayVo		stage0			= (ICPStageDisplayVo) arg0;
				PatientICPStageViewVo	patientStage1	= (PatientICPStageViewVo) arg1;
				
				return stage0.getSequence().compareTo(patientStage1.getStage().getSequence());
			}
			
			return 0;
		}
	}

	/**
	 *	WDEV-13377
	 *	Comparator for sorting ICPPhaseDisplayVo, PatientICPPhaseViewVo after configuration sequence
	 */
	public class PhaseComparator implements Comparator<Object>
	{
		public int compare(Object arg0, Object arg1)
		{
			if (arg0 instanceof PatientICPPhaseViewVo && arg1 instanceof PatientICPPhaseViewVo)
			{
				PatientICPPhaseViewVo patientPhase0 = (PatientICPPhaseViewVo) arg0;
				PatientICPPhaseViewVo patientPhase1 = (PatientICPPhaseViewVo) arg1;
				
				return patientPhase0.getPhase().getSequence().compareTo(patientPhase1.getPhase().getSequence());
			}
			
			if (arg0 instanceof ICPPhaseDisplayVo && arg1 instanceof ICPPhaseDisplayVo)
			{
				ICPPhaseDisplayVo phase0 = (ICPPhaseDisplayVo) arg0;
				ICPPhaseDisplayVo phase1 = (ICPPhaseDisplayVo) arg1;
				
				return phase0.getSequence().compareTo(phase1.getSequence());
			}
			
			if (arg0 instanceof PatientICPPhaseViewVo && arg1 instanceof ICPPhaseDisplayVo)
			{
				PatientICPPhaseViewVo 	patientPhase0 	= (PatientICPPhaseViewVo) arg0;
				ICPPhaseDisplayVo 		phase1 			= (ICPPhaseDisplayVo) arg1;
				
				return patientPhase0.getPhase().getSequence().compareTo(phase1.getSequence());
			}
			
			if (arg0 instanceof ICPPhaseDisplayVo && arg1 instanceof PatientICPPhaseViewVo)
			{
				ICPPhaseDisplayVo		phase0			= (ICPPhaseDisplayVo) arg0;
				PatientICPPhaseViewVo	patientPhase1	= (PatientICPPhaseViewVo) arg1;
				
				return phase0.getSequence().compareTo(patientPhase1.getPhase().getSequence());
			}
			
			return 0;
		}
	}

	public class ActionComparator implements Comparator<PatientICPActionViewVo>
	{
		public int compare(PatientICPActionViewVo arg0, PatientICPActionViewVo arg1)
		{
			return arg0.getAction().getSequence().compareTo(arg1.getAction().getSequence());
		}
	}

	@Override
	protected void onLnkReturnClick() throws PresentationLogicException
	{
		engine.open(engine.getPreviousNonDialogFormName());
	}

	@Override
	protected void onDynamicFormFormModeChanged(FormMode formMode)
	{
		form.setMode(formMode);
	}

	private static Color InScopeColor = Color.BlanchedAlmond;
	private static final Integer COL_ACTION = new Integer(1);
	private static final Integer COL_COUNTER_SIGNATURE = new Integer(2);
	private static final Integer COL_ICON = new Integer(3);
	private static final Integer COL_HELP = new Integer(4);

	private static final String CRITICAL_EVENT = "Critical events";
	private static final String EVALUATION_NOTES = "Evaluation notes";

	
	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		boolean completedPatientICP = form.getLocalContext().getCurrentPatientICPIsNotNull() && form.getLocalContext().getCurrentPatientICP().getCompletedDateTimeIsNotNull();

		if (tab instanceof tabPageClinicDetailsContainer)
		{
			// Get linked actions
			PatientICPActionFullVo actionFull = domain.getPatientICPActionFull((PatientICPActionRefVo) form.lyrMain().tabPageActions().grdActions().getValue());

			// Populate record browser actions
			PatientICPActionFullVoCollection linkedPatientICPActions = domain.getLinkedPatientICPActions(actionFull);

			// Determine if there are linked actions to be displayed
			if (linkedPatientICPActions == null || linkedPatientICPActions.size() == 0)
			{
				form.lyrMain().tabPageClinicDetails().setHeaderVisible(false);
				return;
			}

			populateLinkedActionsRecordBrowser(linkedPatientICPActions);

			// Select one action
			form.lyrMain().tabPageClinicDetails().ccLinkedActionDetails().setValue(form.lyrMain().tabPageClinicDetails().recbrLinkedActions().getValue(), !completedPatientICP);
		}
	}

	@Override
	/**
	 *	WDEV-13457
	 *	
	 */
	protected void OnComponentModeChanged() throws PresentationLogicException
	{
		toggleControlsState(!FormMode.EDIT.equals(form.lyrMain().tabPageClinicDetails().ccLinkedActionDetails().getMode()));
	}

	/**
	 * WDEV-13457
	 * When component enters EDIT mode then disable the rest of the form, not to navigate away
	 */
	private void toggleControlsState(boolean enable)
	{
//		form.lyrMain().settabPageActionsEnabled(enable);
//		form.lyrMain().settabPageDetailsEnabled(enable);
//		form.lyrMain().settabPageClinicDetailsEnabled(enable);
		
		form.lyrMain().tabPageActions().setHeaderEnabled(enable);
		form.lyrMain().tabPageDetails().setHeaderEnabled(enable);
		form.lyrMain().tabPageClinicDetails().setHeaderEnabled(enable);

		form.lyrMain().tabPageClinicDetails().recbrLinkedActions().setEnabled(enable);
	}
}
