//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2202.25904)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseStandingImpl;
import ims.therapies.treatment.domain.objects.StandingSession;
import ims.therapies.treatment.vo.StandingSessionRefVo;
import ims.therapies.vo.StandingSessionShortVoCollection;
import ims.therapies.vo.StandingSessionVo;
import ims.therapies.vo.StandingSessionVoCollection;
import ims.therapies.vo.domain.StandingSessionShortVoAssembler;
import ims.therapies.vo.domain.StandingSessionVoAssembler;

public class StandingImpl extends BaseStandingImpl
{
	/**
	* lists medics
	*/
	public ims.core.vo.HcpCollection listMedics(ims.core.vo.HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);
	}

	/**
	* lists Standing records for clinicalContact
	*/
	public StandingSessionShortVoCollection getStandingSessionByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from StandingSession ss ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContextRef != null)
		{
			hql.append(andStr + " ss.clinicalContact.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		java.util.List standing = factory.find(query,markers,values);
		StandingSessionShortVoCollection voStandingSessShortColl = StandingSessionShortVoAssembler.createStandingSessionShortVoCollectionFromStandingSession(standing);
		
		return voStandingSessShortColl;
	}

	/**
	* saves Standing
	*/
	public StandingSessionVo save(ims.therapies.vo.StandingSessionVo voStandingSession) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException 
	{
		if(!voStandingSession.isValidated())
			throw new DomainRuntimeException("This Standing Session has not been validated");
		
		if (voStandingSession.getID_StandingSession() == null && getStandingSessionByClinicalContact(voStandingSession.getClinicalContact()) != null)
			throw new UniqueKeyViolationException("The screen will be refreshed.");
		
		DomainFactory factory = getDomainFactory();
		StandingSession doStanding = StandingSessionVoAssembler.extractStandingSession(factory, voStandingSession);

		factory.save(doStanding);
		
		return StandingSessionVoAssembler.create(doStanding);
	}

	public StandingSessionVo getStandingSessionByClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		if(voClinicalContactRef == null)
			throw new CodingRuntimeException("Standing Session Filter not provided for get call. ");
		
		String hql = new String("from StandingSession s where s.clinicalContact.id = :CLINICAL_CONTACT_ID");

		java.util.List list = getDomainFactory().find(hql, "CLINICAL_CONTACT_ID", voClinicalContactRef.getID_ClinicalContact());

		StandingSessionVoCollection vo = StandingSessionVoAssembler.createStandingSessionVoCollectionFromStandingSession(list);
		if(vo!=null && vo.size()>0 )
			return vo.get(0);
		else
			return null;
	}

	//	WDEV-13649
	public StandingSessionVo getStanding(StandingSessionRefVo standing)
	{
		if(standing == null || standing.getID_StandingSession() == null)
			throw new CodingRuntimeException("Cannot get StandingSession on null Id.");
		
		return StandingSessionVoAssembler.create((StandingSession) getDomainFactory().getDomainObject(StandingSession.class, standing.getID_StandingSession()));
	}

}
