//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseWheelchairSkillsImpl;
import ims.therapies.mobilitytransfers.domain.objects.WheelchairSkills;
import ims.therapies.vo.WheelchairSkillsShortVoCollection;
import ims.therapies.vo.WheelchairSkillsVo;
import ims.therapies.vo.WheelchairSkillsVoCollection;
import ims.therapies.vo.domain.WheelchairSkillsShortVoAssembler;
import ims.therapies.vo.domain.WheelchairSkillsVoAssembler;

public class WheelchairSkillsImpl extends BaseWheelchairSkillsImpl
{

	public WheelchairSkillsVo saveWheelchairSkills(WheelchairSkillsVo wheelchairSkills) throws StaleObjectException, UniqueKeyViolationException 
	{
		if (wheelchairSkills == null)
			throw new CodingRuntimeException("This WheelchairSkillsVo is null");
		if (!wheelchairSkills.isValidated())
			throw new DomainRuntimeException("This WheelchairSkillsVo has not been validated");
		
		DomainFactory factory = getDomainFactory();	
		
		if (wheelchairSkills.getID_WheelchairSkills() == null)//Inserting a record
		{
			WheelchairSkillsVo voWS = getWheelchairSkillsByClinicalContact(wheelchairSkills.getClinicalContact());
			if(voWS != null)
				throw new UniqueKeyViolationException("A record exists for this clinical contact, the screen will be refreshed");
		}
		
		WheelchairSkills domWheelchairSkills = WheelchairSkillsVoAssembler.extractWheelchairSkills(factory, wheelchairSkills);
		
		factory.save(domWheelchairSkills);
		
		return WheelchairSkillsVoAssembler.create(domWheelchairSkills);
	}

	public WheelchairSkillsVo getWheelchairSkillsByClinicalContact(ClinicalContactRefVo voClinicalContactRef) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from WheelchairSkills w ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if (voClinicalContactRef != null)
		{
			hql.append(andStr + " w.clinicalContact.id = :id_ClinicalContact");
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactRef.getID_ClinicalContact());			
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		
		query += " order by w.id desc";			//wdev-13637
		List skills = factory.find(query, markers, values);	
		WheelchairSkillsVoCollection collWheelchairSkillsVo = WheelchairSkillsVoAssembler.createWheelchairSkillsVoCollectionFromWheelchairSkills(skills);
		if(collWheelchairSkillsVo!=null && collWheelchairSkillsVo.size()>0)
			return collWheelchairSkillsVo.get(0);
		
		return null;
	}

	public HcpCollection listHcps(Hcp filter) 
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public WheelchairSkillsShortVoCollection listWheelchairSkillsByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from WheelchairSkills w ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if (voCareContextRef != null)
		{
			hql.append(andStr + " w.clinicalContact.careContext.id = :id_cc");
			markers.add("id_cc");
			values.add(voCareContextRef.getID_CareContext());			
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		
		List skills = factory.find(query, markers, values);	
		WheelchairSkillsShortVoCollection voWheelchairSkillsShortColl = WheelchairSkillsShortVoAssembler.createWheelchairSkillsShortVoCollectionFromWheelchairSkills(skills);
		if(voWheelchairSkillsShortColl != null && voWheelchairSkillsShortColl.size()>0)
			return voWheelchairSkillsShortColl;
		
		return null;
	}

}
