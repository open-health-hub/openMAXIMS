//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.42 build 2196.26417)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;


import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.vo.CareContextLiteVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseTENSImpl;
import ims.therapies.treatment.domain.objects.ElectrotherapyTENS;
import ims.therapies.treatment.vo.ElectrotherapyTENSRefVo;
import ims.therapies.vo.ElectrotherapyTENSShortVoCollection;
import ims.therapies.vo.ElectrotherapyTENSVo;
import ims.therapies.vo.ElectrotherapyTENSVoCollection;
import ims.therapies.vo.domain.ElectrotherapyTENSShortVoAssembler;
import ims.therapies.vo.domain.ElectrotherapyTENSVoAssembler;

public class TENSImpl extends BaseTENSImpl
{
	private static final long serialVersionUID = 1L;


	/**
	 * WDEV-13648
	 * 
	 */
	public ElectrotherapyTENSShortVoCollection listElectrotherapyTensByCareContext(CareContextLiteVo voCareContext)
	{
		String query = "from ElectrotherapyTENS tens where tens.clinicalContact.careContext.id = :EC";
		
		return ElectrotherapyTENSShortVoAssembler.createElectrotherapyTENSShortVoCollectionFromElectrotherapyTENS(getDomainFactory().find(query, "EC", voCareContext.getID_CareContext()));
	}

	public ims.therapies.vo.ElectrotherapyTENSVo saveElectrotherapyTens(ims.therapies.vo.ElectrotherapyTENSVo voElectrotherapyTens) throws StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voElectrotherapyTens.isValidated())
			throw new DomainRuntimeException("ElectrotherapyTens Record has not been validated");
		
		if (voElectrotherapyTens.getID_ElectrotherapyTENS() == null && getElectrotherapyTens(voElectrotherapyTens.getClinicalContact()) != null)
			throw new UniqueKeyViolationException("The screen will be refreshed.");
		
		DomainFactory factory = getDomainFactory();
		ElectrotherapyTENS domElectrotherapyTens = ElectrotherapyTENSVoAssembler.extractElectrotherapyTENS(factory, voElectrotherapyTens);

		factory.save(domElectrotherapyTens);

		return ElectrotherapyTENSVoAssembler.create(domElectrotherapyTens);
	}

	public ims.therapies.vo.ElectrotherapyTENSVo getElectrotherapyTens(ims.core.vo.ClinicalContactShortVo voClinicalContactShort)
	{
		if(voClinicalContactShort == null || voClinicalContactShort.getID_ClinicalContact() == null)
			throw new DomainRuntimeException("Contact not provided for get call. ");
		
		DomainFactory factory = getDomainFactory();
		ElectrotherapyTENSVo voElectrotherapyTENS  = new ElectrotherapyTENSVo();
		
		java.util.List electrotherapyTENSList = factory.find("from ElectrotherapyTENS EctTENS where EctTENS.clinicalContact.id = :contactId", new String[]{"contactId"}, new Object[]{voClinicalContactShort.getID_ClinicalContact()});
		
		ElectrotherapyTENSVoCollection coll = ElectrotherapyTENSVoAssembler.createElectrotherapyTENSVoCollectionFromElectrotherapyTENS(electrotherapyTENSList);//	WDEV-13592
		
		if (coll != null && coll.size()>0)//	WDEV-13592
			voElectrotherapyTENS = coll.get(0);   //	WDEV-13592 
		else
			voElectrotherapyTENS = null;
		
		return voElectrotherapyTENS;
	}
	
	/**
	* Return a list of HCP's
	*/
	public ims.core.vo.HcpCollection listHcps(ims.core.vo.HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(filter);
	}

	public ElectrotherapyTENSVo getElectrotherapyTensByRef(ElectrotherapyTENSRefVo electroTherapyTENS)
	{
		if(electroTherapyTENS == null || electroTherapyTENS.getID_ElectrotherapyTENS() == null)
			throw new CodingRuntimeException("Cannot get ElectroTherapyTENS on null Id.");
		
		return ElectrotherapyTENSVoAssembler.create((ElectrotherapyTENS) getDomainFactory().getDomainObject(ElectrotherapyTENS.class, electroTherapyTENS.getID_ElectrotherapyTENS()));
	}
}
