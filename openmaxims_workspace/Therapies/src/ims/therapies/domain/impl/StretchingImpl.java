//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.40 build 2180.16557)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.therapies.treatment.domain.objects.Stretching;
import ims.therapies.treatment.vo.StretchingRefVo;
import ims.therapies.vo.StretchingShortVo;
import ims.therapies.vo.StretchingShortVoCollection;
import ims.therapies.vo.StretchingVo;
import ims.therapies.vo.domain.StretchingShortVoAssembler;
import ims.therapies.vo.domain.StretchingVoAssembler;

import java.util.ArrayList;

public class StretchingImpl extends DomainImpl implements ims.therapies.domain.Stretching, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	
	/**
	 *	Domain Interface function used to list stretching for a specific CareContext
	 */
	public StretchingShortVoCollection listStretchingByCareContext(CareContextRefVo careContextRef)
	{
		// Check for parameter
		if (careContextRef == null || !careContextRef.getID_CareContextIsNotNull())
			throw new DomainRuntimeException("Can not search after null careContext");
		
		String query = "from Stretching AS st where st.clinicalContact.careContext.id = :CCID order by st.authoringDateTime asc";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("CCID");
		paramValues.add(careContextRef.getID_CareContext());
		
		return StretchingShortVoAssembler.createStretchingShortVoCollectionFromStretching(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}


	/**
	*	Save a stretching Record for a Clinical Contact
	*/
	public StretchingVo saveStretchingVo(StretchingVo stretching) throws StaleObjectException, ForeignKeyViolationException
	{
		// Ensure the value object has been validated
		if (!stretching.isValidated())
			throw new DomainRuntimeException("Stretching has not been validated");

		// if a new Stretching record is created check if a Stretching record already exists for this SOAP clinical contact
		if (stretching != null && stretching.getID_Stretching() == null)
		{
			if (existsRecord(stretching.getClinicalContact()))
				throw new ForeignKeyViolationException("A Stretch record already exists for this SOAP clinical contact");
		}
		
		DomainFactory factory = getDomainFactory();
		Stretching doStretching = StretchingVoAssembler.extractStretching(factory, stretching);

		factory.save(doStretching);

		return StretchingVoAssembler.create(doStretching);
	}

	/**
	*	Get the stretching 
	*/
	public StretchingVo getStretchingVo(StretchingRefVo stretchingRef)
	{
		// Check for parameter
		if (stretchingRef == null || !stretchingRef.getID_StretchingIsNotNull())
			throw new DomainRuntimeException("Invalid parameter Stretching Ref");
		
		return StretchingVoAssembler.create((Stretching) getDomainFactory().getDomainObject(Stretching.class, stretchingRef.getID_Stretching()));
	}

	public HcpCollection listHCPs(HcpFilter filter) 
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(filter);
	}

	public void deleteStretchingVo(StretchingShortVo voStretchingShort) throws ForeignKeyViolationException {
		DomainFactory factory = getDomainFactory();

		Stretching doStretchingShort = StretchingShortVoAssembler.extractStretching(factory, voStretchingShort);
		factory.delete(doStretchingShort);
	}


	private boolean existsRecord(ClinicalContactRefVo clinicalContact)
	{
		if (clinicalContact == null || !clinicalContact.getID_ClinicalContactIsNotNull())
			throw new DomainRuntimeException("Invalid parameter Clinical Contact");
		
		String query = "select COUNT (st.id) from Stretching as st where st.clinicalContact.id = :CCID and st.isRIE <> 1";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("CCID");
		paramValues.add(clinicalContact.getID_ClinicalContact());
		
		Object[] count = getDomainFactory().find(query, paramNames, paramValues).toArray();
		
		if (count != null && count.length > 0 && ((Long)count[0]).intValue() > 0)
			return true;

		return false;
	}
}
