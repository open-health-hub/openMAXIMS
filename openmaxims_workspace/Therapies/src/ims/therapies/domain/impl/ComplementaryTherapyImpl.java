//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.40 build 2194.25473)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.therapies.treatment.domain.objects.ComplementaryTherapyTreatment;
import ims.therapies.treatment.vo.ComplementaryTherapyTreatmentRefVo;
import ims.therapies.vo.ComplementaryTherapyTreatmentShortVoCollection;
import ims.therapies.vo.ComplementaryTherapyTreatmentVo;
import ims.therapies.vo.domain.ComplementaryTherapyTreatmentShortVoAssembler;
import ims.therapies.vo.domain.ComplementaryTherapyTreatmentVoAssembler;


public class ComplementaryTherapyImpl extends DomainImpl implements ims.therapies.domain.ComplementaryTherapy, ims.domain.impl.Transactional
{

	private static final long serialVersionUID = 1L;

	public HcpCollection listMedics(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);
	}

	public ComplementaryTherapyTreatmentVo save(ComplementaryTherapyTreatmentVo voComplementaryTherapyTreat) throws StaleObjectException, UniqueKeyViolationException
	{
		if(!voComplementaryTherapyTreat.isValidated())
			throw new DomainRuntimeException("This Complementary Therapy Treatment has not been validated");
		
		if (voComplementaryTherapyTreat.getID_ComplementaryTherapyTreatment() == null && getComplementaryTherapyByClinicalContact(voComplementaryTherapyTreat.getClinicalContact()) != null)
			throw new UniqueKeyViolationException("The screen will be refreshed.");
	
		DomainFactory factory = getDomainFactory();
		ComplementaryTherapyTreatment doComplementary = ComplementaryTherapyTreatmentVoAssembler.extractComplementaryTherapyTreatment(factory, voComplementaryTherapyTreat);
		factory.save(doComplementary);
		return ComplementaryTherapyTreatmentVoAssembler.create(doComplementary);
	}

	private ComplementaryTherapyTreatmentVo getComplementaryTherapyByClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		if (voClinicalContactRef == null)
			throw new RuntimeException("Cannot get Complementary Therapy for null Clinical Contact");

		StringBuffer query = new StringBuffer("from ComplementaryTherapyTreatment ctt where ctt.clinicalContact.id = :CCID and ctt.isRIE is null");

		return ComplementaryTherapyTreatmentVoAssembler.create((ComplementaryTherapyTreatment) getDomainFactory().findFirst(query.toString(), "CCID", voClinicalContactRef.getID_ClinicalContact()));
	}
	

	/**
	 *	WDEV-13581
	 *	Function used to retrieve the Complementary Therapy Treatment record by ID
	 */
	public ComplementaryTherapyTreatmentVo getComplementaryTherapy(ComplementaryTherapyTreatmentRefVo complementaryTherapy)
	{
		// For null parameter or not saved record return null
		if (complementaryTherapy == null || !complementaryTherapy.getID_ComplementaryTherapyTreatmentIsNotNull())
			return null;
		
		return ComplementaryTherapyTreatmentVoAssembler.create((ComplementaryTherapyTreatment) getDomainFactory().getDomainObject(ComplementaryTherapyTreatment.class, complementaryTherapy.getID_ComplementaryTherapyTreatment()));
	}

	/**
	 * WDEV-13581
	 * List all Complementary Therapy Treatment records
	 * The parameter is a mandatory one (marked from DevEnv)
	 */
	public ComplementaryTherapyTreatmentShortVoCollection listComplementaryTherapyByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();

		String query = "from ComplementaryTherapyTreatment ctt where ctt.clinicalContact.careContext.id = :CC";

		return ComplementaryTherapyTreatmentShortVoAssembler.createComplementaryTherapyTreatmentShortVoCollectionFromComplementaryTherapyTreatment(factory.find(query, "CC", voCareContextRef.getID_CareContext()));
	}
}
