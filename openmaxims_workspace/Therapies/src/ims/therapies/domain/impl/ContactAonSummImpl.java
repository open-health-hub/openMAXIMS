//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.45 build 2272.27859)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.vo.AreaOfNeedsNotingVo;
import ims.clinical.vo.AreaOfNeedsNotingVoCollection;
import ims.clinical.vo.SoapNoteShortVoCollection;
import ims.clinical.vo.domain.AreaOfNeedsNotingVoAssembler;
import ims.clinical.vo.domain.SoapNoteShortVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.AreaofNeedsNoting;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.lookups.AreaOfNeedCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.therapies.domain.base.impl.BaseContactAonSummImpl;

public class ContactAonSummImpl extends BaseContactAonSummImpl
{
	private static final long serialVersionUID = 1L;

	public HcpCollection listMedics(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);
	}

	public AreaOfNeedsNotingVo save(AreaOfNeedsNotingVo voAreaOfNeedsNoting) throws StaleObjectException
	{
		if(!voAreaOfNeedsNoting.isValidated())
			throw new DomainRuntimeException("This Area Of Needs record has not been validated");
		
		DomainFactory factory = getDomainFactory();
		AreaofNeedsNoting doAreaOfNeeds = AreaOfNeedsNotingVoAssembler.extractAreaofNeedsNoting(factory, voAreaOfNeedsNoting);
		factory.save(doAreaOfNeeds);
		return AreaOfNeedsNotingVoAssembler.create(doAreaOfNeeds);
	}

	public AreaOfNeedsNotingVoCollection list(ClinicalContactShortVo voClinicalContact)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from AreaofNeedsNoting aon ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voClinicalContact != null)
		{
			hql.append(andStr + " aon.clinicalContact.id = :cc");
			markers.add("cc");
			values.add(voClinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		java.util.List cttList = factory.find(query,markers,values);
		AreaOfNeedsNotingVoCollection voAreaOfNeedsNotingColl = AreaOfNeedsNotingVoAssembler.createAreaOfNeedsNotingVoCollectionFromAreaofNeedsNoting(cttList);
		//if(voAreaOfNeedsNotingColl.size()>0)
			return voAreaOfNeedsNotingColl;
		//else
			//return null;
	}

	public AreaOfNeedCollection getAreaOfNeeds(ClinicalContactShortVo voClinicalContact)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from SoapNote sn where";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if(voClinicalContact != null)
		{
			hql.append(" sn.clinicalContact.id = :cc");
			markers.add("cc");
			values.add(voClinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}
		
		hql.append(andStr + " sn.areaofNeed.size > 0");
		
		query += hql.toString();
		
		List AreaList = factory.find(query, markers, values);
		//if(AreaList.size() == 1)
		//	return SoapNoteShortVoAssembler.createSoapNoteShortVoCollectionFromSoapNote(AreaList).get(0).getAreaofNeed();
		
		SoapNoteShortVoCollection tempVoCol = SoapNoteShortVoAssembler.createSoapNoteShortVoCollectionFromSoapNote(AreaList);
		if(tempVoCol.size() == 1)
			return tempVoCol.get(0).getAreaofNeed();
		
		return null;
	}

	public AreaOfNeedsNotingVoCollection listbyCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from AreaofNeedsNoting aon ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContextRef != null)
		{
			hql.append(andStr + " aon.clinicalContact.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContextRef.getID_CareContext());
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		java.util.List cttList = factory.find(query,markers,values);
		AreaOfNeedsNotingVoCollection voAreaOfNeedsNotingColl = AreaOfNeedsNotingVoAssembler.createAreaOfNeedsNotingVoCollectionFromAreaofNeedsNoting(cttList);
		//if(voAreaOfNeedsNotingColl.size()>0)
			return voAreaOfNeedsNotingColl;
		//else
			//return null;
	}
}
