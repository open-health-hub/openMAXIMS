//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.39 build 2174.26977)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;
 
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.impl.DomainImpl;
import ims.therapies.domain.objects.EducationToCarers;
import ims.therapies.vo.EducationToCarersVoCollection;
import ims.therapies.vo.domain.EducationToCarersVoAssembler;

public class EducationToCarerImpl extends DomainImpl implements ims.therapies.domain.EducationToCarer, ims.domain.impl.Transactional
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public ims.therapies.vo.EducationToCarersVoCollection list(ims.core.vo.ClinicalContactShortVo voClinicalContact)
	{
		if(voClinicalContact == null)
			throw new DomainRuntimeException("Contact Filter not provided for list call. ");

		DomainFactory factory = getDomainFactory();
		
		java.util.List educList = factory.find("from  EducationToCarers educs where educs.clinicalContact.id = :clinicalcontactId", new String[]{"clinicalcontactId"}, new Object[]{voClinicalContact.getID_ClinicalContact()});
		
		return EducationToCarersVoAssembler.createEducationToCarersVoCollectionFromEducationToCarers(educList).sort();
	}

	public EducationToCarersVoCollection listEduTocCarerForCareContext(CareContextRefVo careContextRefVo) 
	{
		if(careContextRefVo == null)
			throw new DomainRuntimeException("Care Context is null. ");

		DomainFactory factory = getDomainFactory();
		
		java.util.List educList = factory.find("from  EducationToCarers educs where educs.careContext.id = :ccId", new String[]{"ccId"}, new Object[]{careContextRefVo.getID_CareContext()});
		
		return EducationToCarersVoAssembler.createEducationToCarersVoCollectionFromEducationToCarers(educList).sort();
	}

	/**
	* get Education to Carer record for refresh
	*/
	public ims.therapies.vo.EducationToCarersVo getEducationToCarer(Integer educationToCarerId)
	{
		if(educationToCarerId == null)
			throw new DomainRuntimeException("EducationToCarers Filter not provided for list call. ");

		DomainFactory factory = getDomainFactory();
		ims.therapies.domain.objects.EducationToCarers educBo = (ims.therapies.domain.objects.EducationToCarers)factory.getDomainObject(EducationToCarers.class,educationToCarerId.intValue());
		return EducationToCarersVoAssembler.create(educBo);		
	}

	/**
	* save education to carer record
	*/
	public ims.therapies.vo.EducationToCarersVo saveEducationToCarer(ims.therapies.vo.EducationToCarersVo voEducationToCarer) throws ims.domain.exceptions.StaleObjectException
	{
		if(!voEducationToCarer.isValidated())
		{
			throw new DomainRuntimeException("EducationToCarers Value Object has not been validated");
		}
		
		DomainFactory factory = getDomainFactory();		
		EducationToCarers educBo = EducationToCarersVoAssembler.extractEducationToCarers(factory,voEducationToCarer);
				 
		factory.save(educBo);
					
		return EducationToCarersVoAssembler.create(educBo);		
	}

	public ims.core.vo.HcpCollection listHCPs(ims.core.vo.HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(voHcpFilter);
	}
}
