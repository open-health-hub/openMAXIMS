//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.45 build 2263.21661)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.therapies.hand.domain.objects.HandTest;
import ims.therapies.domain.base.impl.BaseHandTestImpl;
import ims.therapies.vo.HandTestVo;
import ims.therapies.vo.HandTestVoCollection;
import ims.therapies.vo.domain.HandTestVoAssembler;

public class HandTestImpl extends BaseHandTestImpl
{
	private static final long serialVersionUID = 1L;

	public HandTestVo saveHandTest(HandTestVo handTest) throws StaleObjectException, UniqueKeyViolationException {
		if (!handTest.isValidated())
			throw new DomainRuntimeException("This Hand Test has not been validated");
		
		DomainFactory factory = getDomainFactory();	
		
		if(handTest.getID_HandTest() == null)
		{
			if(handTest.getClinicalContactIsNotNull())
			{
				HandTestVoCollection coll = getHandTest(handTest.getClinicalContact().getID_ClinicalContact());
				if(coll != null && coll.size()>0)
					throw new UniqueKeyViolationException("A record exists for this clinical contact, the screen will be refreshed.");
			}
		}
		
		HandTest doHandTest = HandTestVoAssembler.extractHandTest(factory, handTest);
		
		factory.save(doHandTest);
		
		return HandTestVoAssembler.create(doHandTest);
	}

	public HandTestVoCollection getHandTest(Integer contactId) {
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from HandTest h ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		String andStr = " ";
		
		if (contactId != null)
		{
			hql.append(andStr + " h.clinicalContact.id = :id_ClinicalContact");
			markers.add("id_ClinicalContact");
			values.add(contactId);			
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		

		List skills = factory.find(query, markers, values);	
		HandTestVoCollection collHandTestVo = HandTestVoAssembler.createHandTestVoCollectionFromHandTest(skills);
		return collHandTestVo;
		
	}

	public HcpCollection listHcps(Hcp filter) {
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public ClinicalContactShortVoCollection listClinicalContactsByCareContext(CareContextRefVo refCareContext) {
	
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from ClinicalContact cc ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		String andStr = " ";
		
		if (refCareContext != null)
		{
			hql.append(andStr + " cc.careContext.id = :id_CareContext");
			markers.add("id_CareContext");
			values.add(refCareContext.getID_CareContext());			
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		

		List contacts = factory.find(query, markers, values);	
		return ClinicalContactShortVoAssembler.createClinicalContactShortVoCollectionFromClinicalContact(contacts);
	}
}
