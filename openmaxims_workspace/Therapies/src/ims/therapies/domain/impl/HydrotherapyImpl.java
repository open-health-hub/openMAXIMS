//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.42 build 2196.26417)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.therapies.domain.base.impl.BaseHydrotherapyImpl;
import ims.therapies.treatment.domain.objects.Hydrotherapy;
import ims.therapies.treatment.vo.HydrotherapyRefVo;
import ims.therapies.vo.HydrotherapyShortVoCollection;
import ims.therapies.vo.HydrotherapyVo;
import ims.therapies.vo.domain.HydrotherapyShortVoAssembler;
import ims.therapies.vo.domain.HydrotherapyVoAssembler;


public class HydrotherapyImpl extends BaseHydrotherapyImpl
{
	private static final long serialVersionUID = 1L;

	
	/**
	 * WDEV-13587
	 * Retrieve Hydrotherapy record based on ClinicalContact
	 * Depending on RIE parameter will retrieve RIE or non-RIE record
	 */
	public HydrotherapyVo getHydroTherapy(ClinicalContactRefVo voClinicalContact, Boolean modeRIE)
	{
		if (voClinicalContact == null)
			throw new RuntimeException("Cannot get Hidrotherapy record for null Clinical Contact");

		StringBuffer query = new StringBuffer("from Hydrotherapy as hyd where hyd.clinicalContact.id = :CCID ");
		
		if (Boolean.TRUE.equals(modeRIE))
		{
			query.append(" and hyd.isRIE = 1 order by hyd.systemInformation.creationDateTime desc");
		}
		else
		{
			query.append(" and hyd.isRIE is null order by hyd.systemInformation.creationDateTime desc");
		}

		return HydrotherapyVoAssembler.create((Hydrotherapy) getDomainFactory().findFirst(query.toString(), "CCID", voClinicalContact.getID_ClinicalContact()));
	}

	public void saveHydroTherapy(HydrotherapyVo voHydrotherapy) throws StaleObjectException, UniqueKeyViolationException 
	{
		if(!voHydrotherapy.isValidated())
			throw new DomainRuntimeException("This HydroTherapy has not been validated");
	
		//if a new Hydrotherapy record is created check if already exists a Hydrotherapy record for selected clinical contact in the database
		//must exist only one Hydrotherapy record per clinical contact
		if(voHydrotherapy.getID_Hydrotherapy() == null)
		{
			if(voHydrotherapy.getClinicalContactIsNotNull())
			{
				HydrotherapyVo tempvo = getHydroTherapy(voHydrotherapy.getClinicalContact(), false);
				if(tempvo != null)
					throw new DomainRuntimeException("A Hydrotherapy record already exists for selected Clinical Contact.");
			}
		}
		
		DomainFactory factory = getDomainFactory();
		Hydrotherapy doHydro = HydrotherapyVoAssembler.extractHydrotherapy(factory, voHydrotherapy);
		factory.save(doHydro);
		
	}

	public HcpCollection listHCPs(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(voHcpFilter);
	}

	
	/**
	 * WDEV-13587
	 * List Hydrotherapy records, including RIE records
	 */
	public HydrotherapyShortVoCollection listHydroForCareContext(CareContextRefVo careContextRefVo) 
	{
		if (careContextRefVo == null)
			throw new DomainRuntimeException("Cannot list CareContextRefVo is null");
			
		String query = "from Hydrotherapy hr where hr.clinicalContact.careContext.id = :RCC";
		
		return HydrotherapyShortVoAssembler.createHydrotherapyShortVoCollectionFromHydrotherapy(getDomainFactory().find(query, "RCC", careContextRefVo.getID_CareContext()));
	}

	/**
	 * WDEV-13587
	 * Get Hydrotherapy record
	 */
	public HydrotherapyVo getHydrotherapyById(HydrotherapyRefVo hydroRefVo)
	{
		if(hydroRefVo == null || hydroRefVo.getID_Hydrotherapy() == null)
			throw new DomainRuntimeException("Hydrotherapy ID not provided for get call. ");

		DomainFactory factory = getDomainFactory();
		
		return HydrotherapyVoAssembler.create((Hydrotherapy) factory.getDomainObject(Hydrotherapy.class, hydroRefVo.getID_Hydrotherapy()));
	}


}
