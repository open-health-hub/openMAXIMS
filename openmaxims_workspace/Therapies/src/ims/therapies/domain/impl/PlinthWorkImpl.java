//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.40 build 2183.15436)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.treatment.domain.objects.PlinthWork;
import ims.therapies.vo.PlinthWorkShortVoCollection;
import ims.therapies.vo.PlinthWorkVo;
import ims.therapies.vo.PlinthWorkVoCollection;
import ims.therapies.vo.domain.PlinthWorkShortVoAssembler;
import ims.therapies.vo.domain.PlinthWorkVoAssembler;

public class PlinthWorkImpl extends DomainImpl implements ims.therapies.domain.PlinthWork, ims.domain.impl.Transactional
{

	public PlinthWorkVo getPlinthWorkByClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		if (voClinicalContactRef == null)
			throw new RuntimeException("Cannot get PlinthWorkVo for null ClinicalContactRefVo");

		String hql = "from PlinthWork c where c.clinicalContact = :clinicalContact order by c.systemInformation.creationDateTime desc";	  //wdev-13560	
		DomainFactory factory = getDomainFactory();
		List list =  factory.find(hql, new String[]{"clinicalContact"}, new Object[]{(ClinicalContact) getDomainFactory().getDomainObject(voClinicalContactRef)});
		
		//List list = ims.therapies.treatment.domain.objects.PlinthWork.listPlinthWorkByClinicalContact(getDomainFactory(), (ClinicalContact) getDomainFactory().getDomainObject(voClinicalContactRef));
		if (list == null || list.size() == 0)
			return null;
		//else if (list.size() > 1)
		//	throw new CodingRuntimeException("More than one Plinth Work found for the current Clinical Contact");

		PlinthWorkVoCollection coll = PlinthWorkVoAssembler.createPlinthWorkVoCollectionFromPlinthWork(list);

		if(coll!=null && coll.size()>0)
			return coll.get(0);
		
		return null;
	}

	public HcpCollection listMedics(HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);
	}

	public void savePlinthWork(PlinthWorkVo voPlinthWork) throws StaleObjectException, UniqueKeyViolationException
	{
		if(voPlinthWork == null)
			throw new DomainRuntimeException("Cannot save null Plinth Work");
		
		// Ensure the value object has been validated
		if (!voPlinthWork.isValidated())
			throw new DomainRuntimeException("Plinth Work has not been validated");
	
		DomainFactory factory = getDomainFactory();
		PlinthWork doPlinthWork = PlinthWorkVoAssembler.extractPlinthWork(factory, voPlinthWork);
		
		factory.save(doPlinthWork);
	
	}

	public PlinthWorkShortVoCollection getPlinthWorkByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from PlinthWork pw ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContextRef != null)
		{
			hql.append(andStr + " pw.clinicalContact.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		java.util.List pwList = factory.find(query,markers,values);
		PlinthWorkShortVoCollection voPlinthWorkShortColl = PlinthWorkShortVoAssembler.createPlinthWorkShortVoCollectionFromPlinthWork(pwList);
		//if(voPlinthWorkShortColl.size()>0)
		return voPlinthWorkShortColl;    //wdev-13560
		//else
		//	return null;
	}

}
