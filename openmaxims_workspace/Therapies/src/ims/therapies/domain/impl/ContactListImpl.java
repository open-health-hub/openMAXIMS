//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.45 build 2265.41281)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.clinical.domain.objects.SoapNote;
import ims.clinical.vo.SoapNoteVo;
import ims.clinical.vo.SoapNoteVoCollection;
import ims.clinical.vo.domain.SoapNoteVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.RespiratoryTreatmentVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.therapies.domain.base.impl.BaseContactSOAPAoNImpl;

import java.util.ArrayList;
import java.util.List;

public class ContactListImpl extends BaseContactSOAPAoNImpl
{
	private static final long	serialVersionUID	= 1L;

	public SoapNoteVo saveSoapNoteVo(SoapNoteVo soapNoteVo) throws StaleObjectException
	{
		if(soapNoteVo == null)
			throw new RuntimeException("Cannot save null value for SoapNoteVo");
		
		if (!soapNoteVo.isValidated())
			throw new CodingRuntimeException("SoapNoteVo value object has not been validated");

		//if a new SoapNoteVo record must be save check if already exist a SoapNoteVo record for selected clinical contact
		if(soapNoteVo != null && !soapNoteVo.getID_SoapNoteIsNotNull())
		{			
			if(soapNoteVo.getClinicalContactIsNotNull())
			{
				SoapNoteVo tempVo = getSoapNoteVo(soapNoteVo.getClinicalContact()); 

				if(tempVo != null)
					throw new DomainRuntimeException("A Therapy Contact record already exists for this clinical contact");
			}
		}
		
		DomainFactory factory = getDomainFactory();
		SoapNote doSoapNote = SoapNoteVoAssembler.extractSoapNote(factory, soapNoteVo);
		factory.save(doSoapNote);

		return SoapNoteVoAssembler.create(doSoapNote);
	}
	public HcpCollection listHCPs(HcpFilter hcpFilter)
	{
		HcpAdmin hcpAdminImpl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdminImpl.listHCPs(hcpFilter);
	}
	public SoapNoteVoCollection listSoapNotesVo(CareContextRefVo careContextRefVo) 
	{
		if (careContextRefVo == null)
			throw new DomainRuntimeException("CareContextRefVo is null");
			
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from SoapNote sn ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();

		hql.append(" sn.careContext.id = :rcc");
		markers.add("rcc");
		values.add(careContextRefVo.getID_CareContext());
		
		if (markers.size() > 0) 
			query += " where ";
		
		query += hql.toString();	
		
		List listSoapNote = factory.find(query,markers,values);
		SoapNoteVoCollection voSoapNoteColl = SoapNoteVoAssembler.createSoapNoteVoCollectionFromSoapNote(listSoapNote);
		//if(voSoapNoteColl.size() > 0)
			return voSoapNoteColl;
		////else
			//return null;	
	}
	public SoapNoteVo getSoapNoteVo(ClinicalContactShortVo clinicalContactShortVo)
	{
		if (clinicalContactShortVo == null)
			throw new CodingRuntimeException("Cannot get SoapNoteVo for null Clinical Contact");

		DomainFactory factory = getDomainFactory();
		String hql = " from SoapNote sn ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (clinicalContactShortVo != null)
		{
			condStr.append(andStr + " sn.clinicalContact.id = :id_ClinicalContact");
			markers.add("id_ClinicalContact");
			values.add(clinicalContactShortVo.getID_ClinicalContact());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql +=  " order by sn.systemInformation.creationDateTime desc";
		SoapNoteVoCollection collSoapNoteVo = SoapNoteVoAssembler.createSoapNoteVoCollectionFromSoapNote(factory.find(hql, markers, values));
		if (collSoapNoteVo != null)
		{
			if (collSoapNoteVo.size() >= 1)
				return collSoapNoteVo.get(0);
		}

		return null;
	}
	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}
}
