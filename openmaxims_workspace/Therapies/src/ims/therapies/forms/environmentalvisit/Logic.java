//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.39 build 2173.29356)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.environmentalvisit;

import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.EnvironmentalHomeVisitComponentType;
import ims.therapies.vo.EnvironmentalVisitShortVo;
import ims.therapies.vo.EnvironmentalVisitShortVoCollection;
import ims.therapies.vo.EnvironmentalVisitVo;
import ims.therapies.vo.HomeDetailsVo;
import ims.therapies.vo.VisitAssessmentComponentVo;
import ims.therapies.vo.VisitAssessmentComponentVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		loadTherapistPresentCombo();
	}
	private void loadTherapistPresentCombo() 
	{
		form.cmbTherapistPresent().clear();
		Hcp filter = new Hcp();
		filter.setHcpType(HcpDisType.THERAPY);
		
		HcpCollection collVoHcp = domain.listHcps(filter);
		
		if(collVoHcp != null)
		{
			for (int i = 0; i < collVoHcp.size(); i++)
			{
				form.cmbTherapistPresent().newRow(collVoHcp.get(i), collVoHcp.get(i).getName().toString());
			}
		}
	}
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		form.recbrEnvironment().clear();
		fillRecordBrowser();
	}

	private void fillRecordBrowser()
	{
		EnvironmentalVisitShortVoCollection voEnvirVisitShortColl = domain.getEnvironmentalVisitByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		loadCurrentCareContext();
		loadEnvironmentalVisitsOfCareContext(voEnvirVisitShortColl);
		boolean currentClinicalContactFound = false;
		
		if(voEnvirVisitShortColl != null)
		{
			for(int i=0; i<voEnvirVisitShortColl.size(); i++)
			{
				if(voEnvirVisitShortColl.get(i).getClinicalContactIsNotNull())
				{
					currentClinicalContactFound = loadEnvironmentalVisitsOfClinicalContact(voEnvirVisitShortColl.get(i));
				}
			}
		}
		if(!currentClinicalContactFound)
			loadCurrentClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact(), Color.Green);
		
		browseRecord();
	}
	private void loadEnvironmentalVisitsOfCareContext(EnvironmentalVisitShortVoCollection voEnvirVisitShortColl)
	{
		if(voEnvirVisitShortColl != null)
		{
			for(int i =0; i<voEnvirVisitShortColl.size(); i++)
			{
				EnvironmentalVisitShortVo voEnvironmentalVisit = voEnvirVisitShortColl.get(i);
				if(voEnvironmentalVisit.getClinicalContact() == null && voEnvironmentalVisit.getCareContext().getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
				{
					loadEnvironmentalVisitsForACareContext(voEnvironmentalVisit);
				}
			}
		}
		
	}
	private void loadEnvironmentalVisitsForACareContext(EnvironmentalVisitShortVo voEnvirVisit)
	{
		//A care context can have a number of Environmental Visits
		if(form.getGlobalContext().Core.getCurrentClinicalContact() == null)
			form.recbrEnvironment().newRow(voEnvirVisit, "\t\t\t\t "+ voEnvirVisit.getAuthoringDateTime() + " - " + voEnvirVisit.getAuthoringCP().getMos().getName(), Color.Green);
		else
			form.recbrEnvironment().newRow(voEnvirVisit, "\t\t\t\t "+ voEnvirVisit.getAuthoringDateTime() + " - " + voEnvirVisit.getAuthoringCP().getMos().getName());
	}
	private void loadCurrentClinicalContact(ClinicalContactShortVo voClinicalContact, Color active)
	{
		//Populates recordBrowser with Clinical Contact info
		if(voClinicalContact != null)
		{
			form.recbrEnvironment().newRow(voClinicalContact, "\t\t\t\tClinical Contact:"+voClinicalContact.getStartDateTime() +" - "+ voClinicalContact.getSeenBy(), active);
			if(active != null)
				form.recbrEnvironment().setValue(voClinicalContact);
		}
	}
	private boolean loadEnvironmentalVisitsOfClinicalContact(EnvironmentalVisitShortVo voEnvirVisit)
	{
		ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		//A Clinical Contact can only have one Environmental Visit Record
		if(voClinicalContact != null && voClinicalContact.getID_ClinicalContact().equals(voEnvirVisit.getClinicalContact().getID_ClinicalContact()))
		{
			//this Clinical Contact has been selected from the patient summary
			loadCurrentClinicalContact(voEnvirVisit.getClinicalContact(), Color.Green);
			return true;
		}
		else
		{
			loadCurrentClinicalContact(voEnvirVisit.getClinicalContact(), null);
		}

		return false;
	}
	private void loadCurrentCareContext()
	{
		//loads the Current Care Context into the record browser
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.recbrEnvironment().newRow(voCareContext, voCareContext.getRecordBrowserText());
		}
		else
		{
			form.recbrEnvironment().newRow(voCareContext, voCareContext.getRecordBrowserText(), Color.Green);
			form.recbrEnvironment().setValue(voCareContext);
		}
	}
	private void clearScreen() 
	{
		form.qmbAuthoringHCP().setValue(null);
		form.dtimAuthoringDateTime().setValue(null);
		form.txtAddress().setValue(null);
		form.dteDateOfVisit().setValue(null);
		form.cmbLocation().setValue(null);
		form.txtOccupation().setValue(null);
		form.txtJobRole().setValue(null);
		form.cmbTherapistPresent().setValue(null);
		form.txtOthersPresent().setValue(null);
		form.txtExternalAccessandParking().setValue(null);
		form.txtExternalShortTerm().setValue(null);
		form.txtExternalLongTerm().setValue(null);
		form.txtInternalAccess().setValue(null);
		form.txtInternalShortTerm().setValue(null);
		form.txtInternalLongTerm().setValue(null);
		form.txtToiletingAndChanging().setValue(null);
		form.txtToiletingShortTerm().setValue(null);
		form.txtToiletingLongTerm().setValue(null);
		form.txtFoodandDrink().setValue(null);
		form.txtFoodShortTerm().setValue(null);
		form.txtFoodLongTerm().setValue(null);
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(false);
	}
	private void enableAuthoringControls(boolean enable)
	{
		form.qmbAuthoringHCP().setEnabled(enable);
		form.dtimAuthoringDateTime().setEnabled(enable);
	}
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		EnvironmentalVisitVo voEnvironmentalVisit = populateInstanceData(form.getLocalContext().getvoEnvironmentalVisit());
		
		voEnvironmentalVisit.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voEnvironmentalVisit.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		String[] arrErrors = voEnvironmentalVisit.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			form.getLocalContext().setvoEnvironmentalVisit(domain.saveEnvironmentalVisit(voEnvironmentalVisit));
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A meeting with the same criteria already exists.   " + e.getMessage());
			open();
			return;
		}
		form.getGlobalContext().Therapies.setEnvironmentalVisit(form.getLocalContext().getvoEnvironmentalVisit());
		open();
	}
	private EnvironmentalVisitVo populateInstanceData(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		if(voEnvironmentalVisit == null)
			voEnvironmentalVisit = new EnvironmentalVisitVo();
		
		voEnvironmentalVisit = populateDataFromUpperPartOfScreen(voEnvironmentalVisit);
		
		VisitAssessmentComponentVoCollection colVisitAssessment =  new VisitAssessmentComponentVoCollection();
		
		//Populate Data for External Access and Parking
		colVisitAssessment.add(populateDataExternalAccessAndParking());
		//Populate Data for Internal Access
		colVisitAssessment.add(populateDataInternalAccess());
		//Populate Data for Toileting and Changing Facilities
		colVisitAssessment.add(populateDataToiletingAndChangingFacilities());
		//Populate Data for Food and Drinking Facilities
		colVisitAssessment.add(populateDataFoodAndDrinkingFacilities());
		
		voEnvironmentalVisit.setVisitAssessmentDetails(colVisitAssessment);
		
		return voEnvironmentalVisit;
	}
	private EnvironmentalVisitVo populateDataFromUpperPartOfScreen(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		voEnvironmentalVisit.setAuthoringCP(form.qmbAuthoringHCP().getValue());
		voEnvironmentalVisit.setAuthoringDateTime(form.dtimAuthoringDateTime().getValue());
		
		HomeDetailsVo voHomeDetails = voEnvironmentalVisit.getHouseDetails();
		if(voHomeDetails == null)
			voHomeDetails = new HomeDetailsVo();
		
		voHomeDetails.setAddress(form.txtAddress().getValue());
		voEnvironmentalVisit.setHouseDetails(voHomeDetails);

		voEnvironmentalVisit.setVisitDate(form.dteDateOfVisit().getValue());
		voEnvironmentalVisit.setLocation(form.cmbLocation().getValue());
		voEnvironmentalVisit.setOccupation(form.txtOccupation().getValue());
		voEnvironmentalVisit.setJobRole(form.txtJobRole().getValue());
		voEnvironmentalVisit.setTherapistPresent(form.cmbTherapistPresent().getValue());
		voEnvironmentalVisit.setOthersPresent(form.txtOthersPresent().getValue());
		
		return voEnvironmentalVisit;
	}
	private VisitAssessmentComponentVo populateDataFoodAndDrinkingFacilities() 
	{
		VisitAssessmentComponentVo voFoodAndDrinkingFacilities = new VisitAssessmentComponentVo();
		voFoodAndDrinkingFacilities.setType(EnvironmentalHomeVisitComponentType.FOODANDDRINKINGFACILITIES);
		voFoodAndDrinkingFacilities.setDetails(form.txtFoodandDrink().getValue());
		voFoodAndDrinkingFacilities.setShortTermPlan(form.txtFoodShortTerm().getValue());
		voFoodAndDrinkingFacilities.setLongTermPlan(form.txtFoodLongTerm().getValue());

		return voFoodAndDrinkingFacilities;
	}
	private VisitAssessmentComponentVo populateDataToiletingAndChangingFacilities() 
	{
		VisitAssessmentComponentVo voToiletAndChangingFacilities = new VisitAssessmentComponentVo();
		voToiletAndChangingFacilities.setType(EnvironmentalHomeVisitComponentType.TOILETINGANDCHANGINGFACILITIES);
		voToiletAndChangingFacilities.setDetails(form.txtToiletingAndChanging().getValue());
		voToiletAndChangingFacilities.setShortTermPlan(form.txtToiletingShortTerm().getValue());
		voToiletAndChangingFacilities.setLongTermPlan(form.txtToiletingLongTerm().getValue());

		return voToiletAndChangingFacilities;
	}
	private VisitAssessmentComponentVo populateDataInternalAccess() 
	{
		VisitAssessmentComponentVo voInternalAccess = new VisitAssessmentComponentVo();
		voInternalAccess.setType(EnvironmentalHomeVisitComponentType.INTERNALACCESS);
		voInternalAccess.setDetails(form.txtInternalAccess().getValue());
		voInternalAccess.setShortTermPlan(form.txtInternalShortTerm().getValue());
		voInternalAccess.setLongTermPlan(form.txtInternalLongTerm().getValue());

		return voInternalAccess;
	}
	private VisitAssessmentComponentVo populateDataExternalAccessAndParking() 
	{
		VisitAssessmentComponentVo voExternalAccessAndParking = new VisitAssessmentComponentVo();
		voExternalAccessAndParking.setType(EnvironmentalHomeVisitComponentType.ENVIRONMENTALEXTERNALACCESSANDPARKING);
		voExternalAccessAndParking.setDetails(form.txtExternalAccessandParking().getValue());
		voExternalAccessAndParking.setShortTermPlan(form.txtExternalShortTerm().getValue());
		voExternalAccessAndParking.setLongTermPlan(form.txtExternalLongTerm().getValue());

		return voExternalAccessAndParking;
	}
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		clearScreen();
		form.getGlobalContext().Therapies.setEnvironmentalVisit(null);
		form.getLocalContext().setvoEnvironmentalVisit(null);
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(true);
		setDefaultValues();
	}
	private void populateScreenFromData() 
	{
		EnvironmentalVisitVo voEnvironmentalVisit = form.getLocalContext().getvoEnvironmentalVisit();
		form.getGlobalContext().Therapies.setEnvironmentalVisit(voEnvironmentalVisit);
		if(voEnvironmentalVisit == null)
			return;
		
		populateUpperScreenControls(voEnvironmentalVisit);
		populateVisitAssessmentDetails(voEnvironmentalVisit);
		
	}
	private void populateUpperScreenControls(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		form.qmbAuthoringHCP().clear();
		if (voEnvironmentalVisit.getAuthoringCPIsNotNull())
		{
			form.qmbAuthoringHCP().newRow(voEnvironmentalVisit.getAuthoringCP(), voEnvironmentalVisit.getAuthoringCP().toString());
			form.qmbAuthoringHCP().setValue(voEnvironmentalVisit.getAuthoringCP());			
		}
		
		form.dtimAuthoringDateTime().setValue(voEnvironmentalVisit.getAuthoringDateTime());

		if(voEnvironmentalVisit.getHouseDetailsIsNotNull()&& voEnvironmentalVisit.getHouseDetails().getAddressIsNotNull())
			form.txtAddress().setValue(voEnvironmentalVisit.getHouseDetails().getAddress());
		
		form.dteDateOfVisit().setValue(voEnvironmentalVisit.getVisitDate());
		form.cmbLocation().setValue(voEnvironmentalVisit.getLocation());
		form.txtOccupation().setValue(voEnvironmentalVisit.getOccupation());
		form.txtJobRole().setValue(voEnvironmentalVisit.getJobRole());
		form.cmbTherapistPresent().setValue(voEnvironmentalVisit.getTherapistPresent());
		form.txtOthersPresent().setValue(voEnvironmentalVisit.getOthersPresent());
	}
	private void populateVisitAssessmentDetails(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		VisitAssessmentComponentVoCollection colVisitAssessment =  voEnvironmentalVisit.getVisitAssessmentDetails();
		if(colVisitAssessment != null)
		{
			populateExternalAccess(voEnvironmentalVisit);
			populateInternalAccess(voEnvironmentalVisit);
			populateToiletAndChanging(voEnvironmentalVisit);
			populateFoodAndDrinking(voEnvironmentalVisit);
		}
	}
	private void populateFoodAndDrinking(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		VisitAssessmentComponentVo voVisitAssessment;
		//Populate Food and Drinking Facilities
		for (int i=0; i < voEnvironmentalVisit.getVisitAssessmentDetails().size();i++)
		{
			voVisitAssessment = voEnvironmentalVisit.getVisitAssessmentDetails().get(i);
			if(voVisitAssessment.getType().getId() == EnvironmentalHomeVisitComponentType.FOODANDDRINKINGFACILITIES.getId())
			{
				form.txtFoodandDrink().setValue(voVisitAssessment.getDetails());
				form.txtFoodShortTerm().setValue(voVisitAssessment.getShortTermPlan());
				form.txtFoodLongTerm().setValue(voVisitAssessment.getLongTermPlan());
				break;
			}
		}
	}
	private void populateToiletAndChanging(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		VisitAssessmentComponentVo voVisitAssessment;

		//Populate Toileting and Changing Facilities
		for (int i=0; i < voEnvironmentalVisit.getVisitAssessmentDetails().size();i++)
		{
			voVisitAssessment = voEnvironmentalVisit.getVisitAssessmentDetails().get(i);
			if(voVisitAssessment.getType().getId() == EnvironmentalHomeVisitComponentType.TOILETINGANDCHANGINGFACILITIES.getId())
			{
				form.txtToiletingAndChanging().setValue(voVisitAssessment.getDetails());
				form.txtToiletingShortTerm().setValue(voVisitAssessment.getShortTermPlan());
				form.txtToiletingLongTerm().setValue(voVisitAssessment.getLongTermPlan());
				break;
			}
		}
	}
	private void populateInternalAccess(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		VisitAssessmentComponentVo voVisitAssessment;

		//Populate Internal Access
		for (int i=0; i < voEnvironmentalVisit.getVisitAssessmentDetails().size();i++)
		{
			voVisitAssessment = voEnvironmentalVisit.getVisitAssessmentDetails().get(i);
			if(voVisitAssessment.getType().getId() == EnvironmentalHomeVisitComponentType.INTERNALACCESS.getId())
			{
				form.txtInternalAccess().setValue(voVisitAssessment.getDetails());
				form.txtInternalShortTerm().setValue(voVisitAssessment.getShortTermPlan());
				form.txtInternalLongTerm().setValue(voVisitAssessment.getLongTermPlan());
				
				break;
			}
		}
	}
	private void populateExternalAccess(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		VisitAssessmentComponentVo voVisitAssessment;

		//Populate External Access and Parking Details
		for (int i=0; i < voEnvironmentalVisit.getVisitAssessmentDetails().size();i++)
		{
			voVisitAssessment = voEnvironmentalVisit.getVisitAssessmentDetails().get(i);
			if(voVisitAssessment.getType().getId() == EnvironmentalHomeVisitComponentType.ENVIRONMENTALEXTERNALACCESSANDPARKING.getId())
			{
				form.txtExternalAccessandParking().setValue(voVisitAssessment.getDetails());
				form.txtExternalShortTerm().setValue(voVisitAssessment.getShortTermPlan());
				form.txtExternalLongTerm().setValue(voVisitAssessment.getLongTermPlan());
				
				break;
			}
		}
	}
	private void displayButtonsForRecord() 
	{
		if(form.getLocalContext().getvoEnvironmentalVisit() == null)
			showButtonsForRecord(true);
		else
			showButtonsForRecord(false);
	}
	private void showButtonsForRecord(boolean display)
	{
		form.btnNew().setVisible(display);
		form.btnNew().setEnabled(display);
		form.btnUpdate().setVisible(!display);
		form.btnUpdate().setEnabled(!display);
	}
	private void setDefaultValues() 
	{
		form.qmbAuthoringHCP().clear();
		
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if (voHcp != null)
		{
			form.qmbAuthoringHCP().newRow(voHcp,voHcp.toString());
			form.qmbAuthoringHCP().setValue(voHcp);			
		}
		form.dtimAuthoringDateTime().setValue(new DateTime());
		form.dteDateOfVisit().setValue(new Date());
	}
	protected void onRecbrEnvironmentValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
	private void browseRecord()
	{
		form.getLocalContext().setvoEnvironmentalVisit(null);
		clearScreen();
		if(form.recbrEnvironment().getValue() != null)
		{
			if(form.recbrEnvironment().getValue() instanceof ClinicalContactShortVo)
				form.getLocalContext().setvoEnvironmentalVisit(domain.getEnvironmentalVisitByClinicalContact((ClinicalContactRefVo) form.recbrEnvironment().getValue()));
			else if(form.recbrEnvironment().getValue() instanceof EnvironmentalVisitShortVo)
				form.getLocalContext().setvoEnvironmentalVisit(domain.getEnvironmentalVisit((EnvironmentalVisitShortVo) form.recbrEnvironment().getValue()));
		}
		populateScreenFromData();
		isRecordEditable();
	}
	private void isRecordEditable()
	{
		if(form.recbrEnvironment().getValue()!= null)
		{
			if(form.recbrEnvironment().getValue() instanceof ClinicalContactShortVo && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
					&& form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact().equals(((ClinicalContactRefVo) form.recbrEnvironment().getValue()).getID_ClinicalContact()))
			{
				displayButtonsForRecord();
			}
			else if((form.recbrEnvironment().getValue() instanceof CareContextShortVo || form.recbrEnvironment().getValue() instanceof EnvironmentalVisitShortVo) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
			{
				//If the current Care Context is selected then there is always an option of many environment records.
				displayButtonsForRecord();
				form.btnNew().setVisible(true);
				form.btnNew().setEnabled(true);
			}
			else
				hideButtons();
		}
	}
	private void hideButtons()
	{
		form.btnNew().setVisible(false);
		form.btnUpdate().setVisible(false);
	}
	protected void onQmbAuthoringHCPTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbAuthoringHCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHcps(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.qmbAuthoringHCP().newRow(med, med.toString());			
		}
		
		if (coll.size() == 1)
			form.qmbAuthoringHCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.qmbAuthoringHCP().showOpened();	
	}
}
