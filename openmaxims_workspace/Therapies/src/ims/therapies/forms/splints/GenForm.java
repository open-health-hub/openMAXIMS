//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.splints;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbProductComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintProduct value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintProduct value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintProduct value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintProduct value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintProduct value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintProduct getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintProduct)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintProduct value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSizeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintSize value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintSize value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintSize value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintSize value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintSize value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintSize getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintSize)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintSize value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbLateralityComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.LateralityLRonly value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.LateralityLRonly getValue()
			{
				return (ims.core.vo.lookups.LateralityLRonly)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.LateralityLRonly value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbBasedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintBase value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintBase value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintBase value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintBase value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintBase value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintBase getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintBase)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintBase value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintType value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintType getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintType)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbMaterialComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintMaterial value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintMaterial value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintMaterial value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintMaterial value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintMaterial value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintMaterial getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintMaterial)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintMaterial value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbCategoryComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintCategory value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintCategory value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintCategory value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintCategory value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintCategory getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintCategory)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintCategory value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbAreaComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.SplintArea value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintArea value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintArea value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.SplintArea value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.SplintArea value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.SplintArea getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SplintArea)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SplintArea value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbAuthoringCPComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.Hcp value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.Hcp value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.Hcp getValue()
			{
				return (ims.core.vo.Hcp)super.control.getValue();
			}
			public void setValue(ims.core.vo.Hcp value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class grdInstructionsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdInstructionsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColInstructionDetailsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColInstructionDetailsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColInstructionDetailsOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SplintInstructionLeaflet getColInstructionDetails()
			{
				return (ims.spinalinjuries.vo.lookups.SplintInstructionLeaflet)super.row.get(0);
			}
			public void setColInstructionDetails(ims.spinalinjuries.vo.lookups.SplintInstructionLeaflet value)
			{
				super.row.set(0, value, true);
			}
			public void setCellColInstructionDetailsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColDateReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColDateReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColDateOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.utils.Date getColDate()
			{
				return (ims.framework.utils.Date)super.row.get(1);
			}
			public void setColDate(ims.framework.utils.Date value)
			{
				super.row.set(1, value);
			}
			public void setCellColDateTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.therapies.vo.SplintsInstructionDetailsVo getValue()
			{
				return (ims.therapies.vo.SplintsInstructionDetailsVo)super.row.getValue();
			}
			public void setValue(ims.therapies.vo.SplintsInstructionDetailsVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdInstructionsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdInstructionsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdInstructionsRow get(int index)
			{
				return new grdInstructionsRow(super.collection.get(index));
			}
			public grdInstructionsRow newRow()
			{
				return new grdInstructionsRow(super.collection.newRow());
			}
			public grdInstructionsRow newRow(boolean autoSelect)
			{
				return new grdInstructionsRow(super.collection.newRow(autoSelect));
			}
			public grdInstructionsRow newRowAt(int index)
			{
				return new grdInstructionsRow(super.collection.newRowAt(index));
			}
			public grdInstructionsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdInstructionsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdInstructionsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.therapies.vo.SplintsInstructionDetailsVoCollection getValues()
			{
				ims.therapies.vo.SplintsInstructionDetailsVoCollection listOfValues = new ims.therapies.vo.SplintsInstructionDetailsVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.therapies.vo.SplintsInstructionDetailsVo getValue()
			{
				return (ims.therapies.vo.SplintsInstructionDetailsVo)super.grid.getValue();
			}
			public void setValue(ims.therapies.vo.SplintsInstructionDetailsVo value)
			{
				super.grid.setValue(value);
			}
			public grdInstructionsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdInstructionsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdInstructionsRowCollection getRows()
			{
				return new grdInstructionsRowCollection(super.grid.getRows());
			}
			public grdInstructionsRow getRowByValue(ims.therapies.vo.SplintsInstructionDetailsVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdInstructionsRow(row);
			}
			public void setColInstructionDetailsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColInstructionDetailsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox ColInstructionDetailsComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setColDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdFeaturesRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdFeaturesRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColAdditionalFeaturesReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColAdditionalFeaturesReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColAdditionalFeaturesOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SplintAdditionalFeature getColAdditionalFeatures()
			{
				return (ims.spinalinjuries.vo.lookups.SplintAdditionalFeature)super.row.get(0);
			}
			public void setColAdditionalFeatures(ims.spinalinjuries.vo.lookups.SplintAdditionalFeature value)
			{
				super.row.set(0, value, true);
			}
			public void setCellColAdditionalFeaturesTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColCommentsReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColCommentsReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColCommentsOpened()
			{
				super.row.showOpened(1);
			}
			public String getColComments()
			{
				return (String)super.row.get(1);
			}
			public void setColComments(String value)
			{
				super.row.set(1, value);
			}
			public void setCellColCommentsTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.therapies.vo.SplintAdditionalFeaturesVo getValue()
			{
				return (ims.therapies.vo.SplintAdditionalFeaturesVo)super.row.getValue();
			}
			public void setValue(ims.therapies.vo.SplintAdditionalFeaturesVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdFeaturesRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdFeaturesRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdFeaturesRow get(int index)
			{
				return new grdFeaturesRow(super.collection.get(index));
			}
			public grdFeaturesRow newRow()
			{
				return new grdFeaturesRow(super.collection.newRow());
			}
			public grdFeaturesRow newRow(boolean autoSelect)
			{
				return new grdFeaturesRow(super.collection.newRow(autoSelect));
			}
			public grdFeaturesRow newRowAt(int index)
			{
				return new grdFeaturesRow(super.collection.newRowAt(index));
			}
			public grdFeaturesRow newRowAt(int index, boolean autoSelect)
			{
				return new grdFeaturesRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdFeaturesGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.therapies.vo.SplintAdditionalFeaturesVoCollection getValues()
			{
				ims.therapies.vo.SplintAdditionalFeaturesVoCollection listOfValues = new ims.therapies.vo.SplintAdditionalFeaturesVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.therapies.vo.SplintAdditionalFeaturesVo getValue()
			{
				return (ims.therapies.vo.SplintAdditionalFeaturesVo)super.grid.getValue();
			}
			public void setValue(ims.therapies.vo.SplintAdditionalFeaturesVo value)
			{
				super.grid.setValue(value);
			}
			public grdFeaturesRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdFeaturesRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdFeaturesRowCollection getRows()
			{
				return new grdFeaturesRowCollection(super.grid.getRows());
			}
			public grdFeaturesRow getRowByValue(ims.therapies.vo.SplintAdditionalFeaturesVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdFeaturesRow(row);
			}
			public void setColAdditionalFeaturesHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColAdditionalFeaturesHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox ColAdditionalFeaturesComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setColCommentsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColCommentsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdWearRegimeRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdWearRegimeRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColWearRegimeTimeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColWearRegimeTimeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColWearRegimeTimeOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SplintWearRegime getColWearRegimeTime()
			{
				return (ims.spinalinjuries.vo.lookups.SplintWearRegime)super.row.get(0);
			}
			public void setColWearRegimeTime(ims.spinalinjuries.vo.lookups.SplintWearRegime value)
			{
				super.row.set(0, value, true);
			}
			public void setCellColWearRegimeTimeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColStartDateReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColStartDateReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColStartDateOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.utils.Date getColStartDate()
			{
				return (ims.framework.utils.Date)super.row.get(1);
			}
			public void setColStartDate(ims.framework.utils.Date value)
			{
				super.row.set(1, value);
			}
			public void setCellColStartDateTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColEndDateReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColEndDateReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColEndDateOpened()
			{
				super.row.showOpened(2);
			}
			public ims.framework.utils.Date getColEndDate()
			{
				return (ims.framework.utils.Date)super.row.get(2);
			}
			public void setColEndDate(ims.framework.utils.Date value)
			{
				super.row.set(2, value);
			}
			public void setCellColEndDateTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.therapies.vo.SplintsWearRegimeVo getValue()
			{
				return (ims.therapies.vo.SplintsWearRegimeVo)super.row.getValue();
			}
			public void setValue(ims.therapies.vo.SplintsWearRegimeVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdWearRegimeRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdWearRegimeRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdWearRegimeRow get(int index)
			{
				return new grdWearRegimeRow(super.collection.get(index));
			}
			public grdWearRegimeRow newRow()
			{
				return new grdWearRegimeRow(super.collection.newRow());
			}
			public grdWearRegimeRow newRow(boolean autoSelect)
			{
				return new grdWearRegimeRow(super.collection.newRow(autoSelect));
			}
			public grdWearRegimeRow newRowAt(int index)
			{
				return new grdWearRegimeRow(super.collection.newRowAt(index));
			}
			public grdWearRegimeRow newRowAt(int index, boolean autoSelect)
			{
				return new grdWearRegimeRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdWearRegimeGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.therapies.vo.SplintsWearRegimeVoCollection getValues()
			{
				ims.therapies.vo.SplintsWearRegimeVoCollection listOfValues = new ims.therapies.vo.SplintsWearRegimeVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.therapies.vo.SplintsWearRegimeVo getValue()
			{
				return (ims.therapies.vo.SplintsWearRegimeVo)super.grid.getValue();
			}
			public void setValue(ims.therapies.vo.SplintsWearRegimeVo value)
			{
				super.grid.setValue(value);
			}
			public grdWearRegimeRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdWearRegimeRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdWearRegimeRowCollection getRows()
			{
				return new grdWearRegimeRowCollection(super.grid.getRows());
			}
			public grdWearRegimeRow getRowByValue(ims.therapies.vo.SplintsWearRegimeVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdWearRegimeRow(row);
			}
			public void setColWearRegimeTimeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColWearRegimeTimeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox ColWearRegimeTimeComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setColStartDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColStartDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColEndDateHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColEndDateHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 376, 312, 88, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consent Date :", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 264, 53, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Product:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 296, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Size:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 328, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "End Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 232, 43, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Based:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 168, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type of Splint:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 200, 55, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Material:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 130, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 40, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 136, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Splint Category:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 72, 34, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Area:", new Integer(1), null, new Integer(0)}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 376, 328, 152, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 160, 328, 192, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 160, 40, 192, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 160, 8, 192, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 160, 264, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbProductTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbProductTemp);
			cmbProductComboBox cmbProduct = (cmbProductComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProductComboBox.class, m_cmbProductTemp);
			super.addComboBox(cmbProduct);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 160, 296, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbSizeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSizeTemp);
			cmbSizeComboBox cmbSize = (cmbSizeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSizeComboBox.class, m_cmbSizeTemp);
			super.addComboBox(cmbSize);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 160, 104, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbLateralityTemp);
			cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
			super.addComboBox(cmbLaterality);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 160, 232, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbBasedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbBasedTemp);
			cmbBasedComboBox cmbBased = (cmbBasedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBasedComboBox.class, m_cmbBasedTemp);
			super.addComboBox(cmbBased);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 160, 168, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbTypeTemp);
			cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
			super.addComboBox(cmbType);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 160, 200, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbMaterialTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbMaterialTemp);
			cmbMaterialComboBox cmbMaterial = (cmbMaterialComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMaterialComboBox.class, m_cmbMaterialTemp);
			super.addComboBox(cmbMaterial);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 160, 136, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCategoryTemp);
			cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
			super.addComboBox(cmbCategory);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 160, 72, 192, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbAreaTemp);
			cmbAreaComboBox cmbArea = (cmbAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreaComboBox.class, m_cmbAreaTemp);
			super.addComboBox(cmbArea);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 472, 8, 320, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_qmbAuthoringCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbAuthoringCPTemp);
			qmbAuthoringCPComboBox qmbAuthoringCP = (qmbAuthoringCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthoringCPComboBox.class, m_qmbAuthoringCPTemp);
			super.addComboBox(qmbAuthoringCP);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 376, 280, 144, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Consent Given", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 536, 264, 256, 86, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdInstructionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAddUpDown, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdInstructionsTemp);
			grdInstructionsGrid grdInstructions = (grdInstructionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInstructionsGrid.class, m_grdInstructionsTemp);
			grdInstructions.addComboBoxColumn("Instruction Details", 0, 0, 150, false, true, false, false, true, -1);
			grdInstructions.addDateColumn("Date Given", 0, 0, -1, false, true, null, false, 0, true);
			super.addGrid(grdInstructions);
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 376, 160, 416, 96, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdFeaturesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuSmokingGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdFeaturesTemp);
			grdFeaturesGrid grdFeatures = (grdFeaturesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFeaturesGrid.class, m_grdFeaturesTemp);
			grdFeatures.addComboBoxColumn("Additional Features", 0, 0, 150, false, true, false, false, true, -1);
			grdFeatures.addStringColumn("Comments", 0, 0, -1, false, false, 0, 100, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdFeatures);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 376, 40, 416, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdWearRegimeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMedicationGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdWearRegimeTemp);
			grdWearRegimeGrid grdWearRegime = (grdWearRegimeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWearRegimeGrid.class, m_grdWearRegimeTemp);
			grdWearRegime.addComboBoxColumn("Wear Regime / Time", 0, 0, 220, false, true, false, false, true, -1);
			grdWearRegime.addDateColumn("Start Date", 0, 0, 100, false, true, null, false, 0, true);
			grdWearRegime.addDateColumn("End Date", 0, 0, -1, false, true, null, false, 0, true);
			super.addGrid(grdWearRegime);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public DateControl dteConsent()
		{
			return (DateControl)super.getControl(13);
		}
		public DateControl dteEnd()
		{
			return (DateControl)super.getControl(14);
		}
		public DateControl dteStart()
		{
			return (DateControl)super.getControl(15);
		}
		public DateTimeControl dtimAuthoring()
		{
			return (DateTimeControl)super.getControl(16);
		}
		public cmbProductComboBox cmbProduct()
		{
			return (cmbProductComboBox)super.getComboBox(0);
		}
		public cmbSizeComboBox cmbSize()
		{
			return (cmbSizeComboBox)super.getComboBox(1);
		}
		public cmbLateralityComboBox cmbLaterality()
		{
			return (cmbLateralityComboBox)super.getComboBox(2);
		}
		public cmbBasedComboBox cmbBased()
		{
			return (cmbBasedComboBox)super.getComboBox(3);
		}
		public cmbTypeComboBox cmbType()
		{
			return (cmbTypeComboBox)super.getComboBox(4);
		}
		public cmbMaterialComboBox cmbMaterial()
		{
			return (cmbMaterialComboBox)super.getComboBox(5);
		}
		public cmbCategoryComboBox cmbCategory()
		{
			return (cmbCategoryComboBox)super.getComboBox(6);
		}
		public cmbAreaComboBox cmbArea()
		{
			return (cmbAreaComboBox)super.getComboBox(7);
		}
		public qmbAuthoringCPComboBox qmbAuthoringCP()
		{
			return (qmbAuthoringCPComboBox)super.getComboBox(8);
		}
		public CheckBox chkConsent()
		{
			return (CheckBox)super.getControl(26);
		}
		public grdInstructionsGrid grdInstructions()
		{
			return (grdInstructionsGrid)super.getGrid(0);
		}
		public grdFeaturesGrid grdFeatures()
		{
			return (grdFeaturesGrid)super.getGrid(1);
		}
		public grdWearRegimeGrid grdWearRegime()
		{
			return (grdWearRegimeGrid)super.getGrid(2);
		}
	}
	public static class grdSummaryRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSummaryRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColStartDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColStartDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getColStartDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColStartDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColStartDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(1);
		}
		public String getColArea()
		{
			return (String)super.row.get(1);
		}
		public void setColArea(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColCategoryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColCategoryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColCategoryOpened()
		{
			super.row.showOpened(2);
		}
		public String getColCategory()
		{
			return (String)super.row.get(2);
		}
		public void setColCategory(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColCategoryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColMaterialReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColMaterialReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColMaterialOpened()
		{
			super.row.showOpened(3);
		}
		public String getColMaterial()
		{
			return (String)super.row.get(3);
		}
		public void setColMaterial(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColMaterialTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColProductReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColProductReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColProductOpened()
		{
			super.row.showOpened(4);
		}
		public String getColProduct()
		{
			return (String)super.row.get(4);
		}
		public void setColProduct(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColProductTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(5);
		}
		public String getColLaterality()
		{
			return (String)super.row.get(5);
		}
		public void setColLaterality(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColEndDateReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColEndDateOpened()
		{
			super.row.showOpened(6);
		}
		public ims.framework.utils.Date getColEndDate()
		{
			return (ims.framework.utils.Date)super.row.get(6);
		}
		public void setColEndDate(ims.framework.utils.Date value)
		{
			super.row.set(6, value);
		}
		public void setCellColEndDateTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.therapies.vo.SplintDetailsVo getValue()
		{
			return (ims.therapies.vo.SplintDetailsVo)super.row.getValue();
		}
		public void setValue(ims.therapies.vo.SplintDetailsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSummaryRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSummaryRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSummaryRow get(int index)
		{
			return new grdSummaryRow(super.collection.get(index));
		}
		public grdSummaryRow newRow()
		{
			return new grdSummaryRow(super.collection.newRow());
		}
		public grdSummaryRow newRow(boolean autoSelect)
		{
			return new grdSummaryRow(super.collection.newRow(autoSelect));
		}
		public grdSummaryRow newRowAt(int index)
		{
			return new grdSummaryRow(super.collection.newRowAt(index));
		}
		public grdSummaryRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSummaryRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSummaryGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.therapies.vo.SplintDetailsVo[] getValues()
		{
			ims.therapies.vo.SplintDetailsVo[] listOfValues = new ims.therapies.vo.SplintDetailsVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.therapies.vo.SplintDetailsVo getValue()
		{
			return (ims.therapies.vo.SplintDetailsVo)super.grid.getValue();
		}
		public void setValue(ims.therapies.vo.SplintDetailsVo value)
		{
			super.grid.setValue(value);
		}
		public grdSummaryRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSummaryRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSummaryRowCollection getRows()
		{
			return new grdSummaryRowCollection(super.grid.getRows());
		}
		public grdSummaryRow getRowByValue(ims.therapies.vo.SplintDetailsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSummaryRow(row);
		}
		public void setColStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColCategoryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColCategoryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColMaterialHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColMaterialHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColProductHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColProductHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getupdateVoSplintDetails();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuAddUpDown = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuAddUpDownADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuAddUpDown.add(contextMenus.contextMenuAddUpDownADDItem);
		contextMenus.contextMenuAddUpDownMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 2, "Move Up", true, false, new Integer(102114), true, false);
		contextMenus.contextMenuAddUpDown.add(contextMenus.contextMenuAddUpDownMOVEUPItem);
		contextMenus.contextMenuAddUpDownMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 3, "Move Down", true, false, new Integer(102108), true, false);
		contextMenus.contextMenuAddUpDown.add(contextMenus.contextMenuAddUpDownMOVEDOWNItem);
		form.registerMenu(contextMenus.contextMenuAddUpDown);
		contextMenus.contextMenuSmokingGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuSmokingGridADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuSmokingGrid.add(contextMenus.contextMenuSmokingGridADDItem);
		contextMenus.contextMenuSmokingGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuSmokingGrid.add(contextMenus.contextMenuSmokingGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuSmokingGrid);
		contextMenus.contextMenuMedicationGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuMedicationGridADDItem = factory.createMenuItem(startControlID.intValue() + 6, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedicationGrid.add(contextMenus.contextMenuMedicationGridADDItem);
		contextMenus.contextMenuMedicationGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove ", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMedicationGrid.add(contextMenus.contextMenuMedicationGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuMedicationGrid);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 8, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 11, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 12, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 14, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 15, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 16, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Container Clasess
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 816, 376, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 376);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 184, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSummaryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdSummaryTemp);
		grdSummaryGrid grdSummary = (grdSummaryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSummaryGrid.class, m_grdSummaryTemp);
		grdSummary.addDateColumn("Start Date", 0, 0, 100, true, true, null, false, 0, true);
		grdSummary.addStringColumn("Area", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSummary.addStringColumn("Category", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSummary.addStringColumn("Material", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSummary.addStringColumn("Product", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSummary.addStringColumn("Laterality", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSummary.addDateColumn("End Date", 0, 0, -1, true, true, null, false, 0, true);
		super.addGrid(grdSummary);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(1);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(4);
	}
	public grdSummaryGrid grdSummary()
	{
		return (grdSummaryGrid)super.getGrid(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_updateVoSplintDetails = new ims.framework.ContextVariable("updateVoSplintDetails", prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier + "");
			cxl_SelectedClinicalContact = new ims.framework.ContextVariable("SelectedClinicalContact", prefix + "_lv_Therapies.Splints.__internal_x_context__SelectedClinicalContact_" + componentIdentifier + "");
		}
		
		public boolean getupdateVoSplintDetailsIsNotNull()
		{
			return !cxl_updateVoSplintDetails.getValueIsNull(context);
		}
		public ims.therapies.vo.SplintDetailsVo getupdateVoSplintDetails()
		{
			return (ims.therapies.vo.SplintDetailsVo)cxl_updateVoSplintDetails.getValue(context);
		}
		public void setupdateVoSplintDetails(ims.therapies.vo.SplintDetailsVo value)
		{
			cxl_updateVoSplintDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_updateVoSplintDetails = null;
		public boolean getSelectedClinicalContactIsNotNull()
		{
			return !cxl_SelectedClinicalContact.getValueIsNull(context);
		}
		public Boolean getSelectedClinicalContact()
		{
			return (Boolean)cxl_SelectedClinicalContact.getValue(context);
		}
		public void setSelectedClinicalContact(Boolean value)
		{
			cxl_SelectedClinicalContact.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedClinicalContact = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class AddUpDown implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int MOVEUP = 2;
			public static final int MOVEDOWN = 3;
		}
		public void disableAllAddUpDownMenuItems()
		{
			this.contextMenuAddUpDownADDItem.setEnabled(false);
			this.contextMenuAddUpDownMOVEUPItem.setEnabled(false);
			this.contextMenuAddUpDownMOVEDOWNItem.setEnabled(false);
		}
		public void hideAllAddUpDownMenuItems()
		{
			this.contextMenuAddUpDownADDItem.setVisible(false);
			this.contextMenuAddUpDownMOVEUPItem.setVisible(false);
			this.contextMenuAddUpDownMOVEDOWNItem.setVisible(false);
		}
		private Menu contextMenuAddUpDown;
		public MenuItem getAddUpDownADDItem()
		{
			return this.contextMenuAddUpDownADDItem;
		}
		private MenuItem contextMenuAddUpDownADDItem;
		public MenuItem getAddUpDownMOVEUPItem()
		{
			return this.contextMenuAddUpDownMOVEUPItem;
		}
		private MenuItem contextMenuAddUpDownMOVEUPItem;
		public MenuItem getAddUpDownMOVEDOWNItem()
		{
			return this.contextMenuAddUpDownMOVEDOWNItem;
		}
		private MenuItem contextMenuAddUpDownMOVEDOWNItem;
		public final class SmokingGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 4;
			public static final int REMOVE = 5;
		}
		public void disableAllSmokingGridMenuItems()
		{
			this.contextMenuSmokingGridADDItem.setEnabled(false);
			this.contextMenuSmokingGridREMOVEItem.setEnabled(false);
		}
		public void hideAllSmokingGridMenuItems()
		{
			this.contextMenuSmokingGridADDItem.setVisible(false);
			this.contextMenuSmokingGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuSmokingGrid;
		public MenuItem getSmokingGridADDItem()
		{
			return this.contextMenuSmokingGridADDItem;
		}
		private MenuItem contextMenuSmokingGridADDItem;
		public MenuItem getSmokingGridREMOVEItem()
		{
			return this.contextMenuSmokingGridREMOVEItem;
		}
		private MenuItem contextMenuSmokingGridREMOVEItem;
		public final class MedicationGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 6;
			public static final int REMOVE = 7;
		}
		public void disableAllMedicationGridMenuItems()
		{
			this.contextMenuMedicationGridADDItem.setEnabled(false);
			this.contextMenuMedicationGridREMOVEItem.setEnabled(false);
		}
		public void hideAllMedicationGridMenuItems()
		{
			this.contextMenuMedicationGridADDItem.setVisible(false);
			this.contextMenuMedicationGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuMedicationGrid;
		public MenuItem getMedicationGridADDItem()
		{
			return this.contextMenuMedicationGridADDItem;
		}
		private MenuItem contextMenuMedicationGridADDItem;
		public MenuItem getMedicationGridREMOVEItem()
		{
			return this.contextMenuMedicationGridREMOVEItem;
		}
		private MenuItem contextMenuMedicationGridREMOVEItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 8;
			public static final int Update = 9;
			public static final int Remove = 10;
			public static final int View = 11;
			public static final int MoveUp = 12;
			public static final int MoveDown = 13;
			public static final int Replace = 14;
			public static final int Confirm = 15;
			public static final int EDIT_VIEW_ICP_ACTIONS = 16;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[83];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-ID", "ID_SplintDetails");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-STARTDATE", "StartDate");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-AREA", "Area");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-SPLINTCATEGORY", "SplintCategory");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-MATERIAL", "Material");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-PRODUCT", "Product");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-LATERALITY", "Laterality");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-SPLINTTYPE", "SplintType");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-SPLINTBASE", "SplintBase");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-SPLINTSIZE", "SplintSize");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Splints.__internal_x_context__updateVoSplintDetails_" + componentIdentifier, "BO-1019100041-ENDDATE", "EndDate");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
