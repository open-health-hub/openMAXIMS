//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.gait;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.therapies.domain.Gait.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.therapies.domain.Gait domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbSupervisionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel existingInstance = (ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSupervisionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel)
		{
			ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel instance = (ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSupervisionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel existingInstance = (ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSupervisionLookup()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().clear();
		ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevelCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTreatmentSupervisionLevel(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSupervisionLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel instance = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTreatmentSupervisionLevelInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().setValue(instance);
	}
	protected final void defaultcmbSupervisionLookupValue()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbSupervision().setValue((ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.GaitTreatmentSupervisionLevel.TYPE_ID));
	}
	protected final void oncmboGaitTechValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTechnique existingInstance = (ims.spinalinjuries.vo.lookups.GaitTechnique)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmboGaitTechLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.GaitTechnique)
		{
			ims.spinalinjuries.vo.lookups.GaitTechnique instance = (ims.spinalinjuries.vo.lookups.GaitTechnique)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmboGaitTechLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTechnique existingInstance = (ims.spinalinjuries.vo.lookups.GaitTechnique)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmboGaitTechLookup()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().clear();
		ims.spinalinjuries.vo.lookups.GaitTechniqueCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTechnique(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmboGaitTechLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.GaitTechnique instance = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTechniqueInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().setValue(instance);
	}
	protected final void defaultcmboGaitTechLookupValue()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmboGaitTech().setValue((ims.spinalinjuries.vo.lookups.GaitTechnique)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.GaitTechnique.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.GaitTechnique.TYPE_ID));
	}
	protected final void oncmbEnvironmentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTestEnvironment existingInstance = (ims.spinalinjuries.vo.lookups.GaitTestEnvironment)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbEnvironmentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.GaitTestEnvironment)
		{
			ims.spinalinjuries.vo.lookups.GaitTestEnvironment instance = (ims.spinalinjuries.vo.lookups.GaitTestEnvironment)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbEnvironmentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.GaitTestEnvironment existingInstance = (ims.spinalinjuries.vo.lookups.GaitTestEnvironment)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbEnvironmentLookup()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().clear();
		ims.spinalinjuries.vo.lookups.GaitTestEnvironmentCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTestEnvironment(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbEnvironmentLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.GaitTestEnvironment instance = ims.spinalinjuries.vo.lookups.LookupHelper.getGaitTestEnvironmentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().setValue(instance);
	}
	protected final void defaultcmbEnvironmentLookupValue()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbEnvironment().setValue((ims.spinalinjuries.vo.lookups.GaitTestEnvironment)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.GaitTestEnvironment.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.GaitTestEnvironment.TYPE_ID));
	}
	protected final void oncmbOrthosisValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.therapies.vo.lookups.GaitOrthosis existingInstance = (ims.therapies.vo.lookups.GaitOrthosis)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOrthosisLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.therapies.vo.lookups.GaitOrthosis)
		{
			ims.therapies.vo.lookups.GaitOrthosis instance = (ims.therapies.vo.lookups.GaitOrthosis)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOrthosisLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.therapies.vo.lookups.GaitOrthosis existingInstance = (ims.therapies.vo.lookups.GaitOrthosis)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOrthosisLookup()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().clear();
		ims.therapies.vo.lookups.GaitOrthosisCollection lookupCollection = ims.therapies.vo.lookups.LookupHelper.getGaitOrthosis(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOrthosisLookupValue(int id)
	{
		ims.therapies.vo.lookups.GaitOrthosis instance = ims.therapies.vo.lookups.LookupHelper.getGaitOrthosisInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().setValue(instance);
	}
	protected final void defaultcmbOrthosisLookupValue()
	{
		this.form.ctnGait().lyrGait().tabDetail().cmbOrthosis().setValue((ims.therapies.vo.lookups.GaitOrthosis)domain.getLookupService().getDefaultInstance(ims.therapies.vo.lookups.GaitOrthosis.class, engine.getFormName().getID(), ims.therapies.vo.lookups.GaitOrthosis.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.therapies.domain.Gait domain;
}
