//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.40 build 2194.25473)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.complementarytherapy;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.ComplementaryTherapyCollection;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.therapies.forms.complementarytherapy.GenForm.gridTherapyRow;
import ims.therapies.vo.ComplementaryTherapyDetailsVo;
import ims.therapies.vo.ComplementaryTherapyDetailsVoCollection;
import ims.therapies.vo.ComplementaryTherapyTreatmentShortVo;
import ims.therapies.vo.ComplementaryTherapyTreatmentShortVoCollection;
import ims.therapies.vo.ComplementaryTherapyTreatmentVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{	
		initialize();
		open();
	}	
	private void initialize() throws PresentationLogicException
	{
		checkComplementaryTherpay();
		form.ctnTherapy().setCollapsed(true);
		form.ctnTherapy().lyrTherapy().tabempty().setHeaderVisible(false);
	}
	private void checkComplementaryTherpay() throws PresentationLogicException
	{
		ComplementaryTherapyCollection voComplementaryTherapyColl = LookupHelper.getComplementaryTherapy(domain.getLookupService());
		if(voComplementaryTherapyColl == null || voComplementaryTherapyColl.size() == 0)
			throw new PresentationLogicException("Please configure ComplementaryTherapy lookup");
	}
	private void open()
	{
		clear();
		resetContextVariables();		
							
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			populateParentNodes(domain.listComplementaryTherapyByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));			
		}
									
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();		
	}
	private void populateParentNodes(ComplementaryTherapyTreatmentShortVoCollection voComTherapyShortColl)
	{
		if (voComTherapyShortColl == null || voComTherapyShortColl.size() <= 0 ) return;
		
		for(int i=0; i<voComTherapyShortColl.size(); i++)
		{
			populateParentNode(voComTherapyShortColl.get(i));			
		}	
		
	}
	private void populateParentNode(ComplementaryTherapyTreatmentShortVo voComTherapyTreatShort)
	{
		GenForm.gridTherapyRow parRow = form.gridTherapy().getRows().newRow();
		parRow.setColComplementary(voComTherapyTreatShort.getAuthoringDateTime().toString()+ " - " + 
					voComTherapyTreatShort.getAuthoringCP().toString());
		parRow.setValue(voComTherapyTreatShort);			
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && voComTherapyTreatShort.getClinicalContact().getID_ClinicalContact().equals
				(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			form.gridTherapy().setValue(voComTherapyTreatShort);			
			expandParentNode(parRow);
		}
		
	}
	private void expandParentNode(gridTherapyRow selectedRow)
	{

		if (selectedRow.getValue() instanceof ComplementaryTherapyTreatmentShortVo == false ) return;
				
		form.getLocalContext().setSelectedParentInstance(getParentFromDomain((ComplementaryTherapyTreatmentShortVo) selectedRow.getValue()));		
		if (form.getLocalContext().getSelectedParentInstance() == null ) return; 				

		ComplementaryTherapyTreatmentVo voParentInstance = form.getLocalContext().getSelectedParentInstance();				
		if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
									(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
		{
			// If this is the Golden Node then we'll colour it golden (ok then beige).
			form.getLocalContext().setGoldenInstanceFound(new Boolean(true));
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
			selectedRow.setBackColor(Color.Beige);			
		}
		
		if (voParentInstance.getComplementaryTherapy() != null)  
		{
			selectedRow.setValue(voParentInstance);
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance.getComplementaryTherapy());
		}
		
		populateParentInstanceControls(voParentInstance);		
										
		
	}
	private void populateParentInstanceControls(ComplementaryTherapyTreatmentVo voComplementaryParent)
	{
		if(voComplementaryParent != null)
		{
			form.ctnTherapy().lyrTherapy().tabHeader().dtimAuthoringDateTime().setValue(voComplementaryParent.getAuthoringDateTime());
			if(voComplementaryParent.getAuthoringCPIsNotNull())
				form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().newRow(voComplementaryParent.getAuthoringCP(), voComplementaryParent.getAuthoringCP().toString());
			form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().setValue(voComplementaryParent.getAuthoringCP());
		}
		
	}
	private void populateChildNodes(gridTherapyRow parRow, ComplementaryTherapyDetailsVoCollection voComplementaryDetailsColl)
	{
		parRow.getRows().clear();
		
		if (voComplementaryDetailsColl == null || voComplementaryDetailsColl.size()<=0) return;		
		
		voComplementaryDetailsColl.sort();
		for(int i=0; i<voComplementaryDetailsColl.size(); i++)
		{
			if (parRow != null)
			{
				GenForm.gridTherapyRow childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voComplementaryDetailsColl.get(i));				
			}
		}
		//reselect parent
		parRow.setValue(form.getLocalContext().getSelectedParentInstance());
		form.gridTherapy().setValue(parRow.getValue());
		parRow.setExpanded(true);
	}
	private void populateChildNode(gridTherapyRow childRow, ComplementaryTherapyDetailsVo voComplementaryTherapyDetail)
	{
		if (voComplementaryTherapyDetail == null) return;		
		
		if(voComplementaryTherapyDetail.getComplementaryTherapy() != null)
			childRow.setColComplementary(voComplementaryTherapyDetail.getComplementaryTherapy().toString());
		if(voComplementaryTherapyDetail.getContraIndicationsChecked() != null)
			childRow.setColContraChecked(voComplementaryTherapyDetail.getContraIndicationsChecked().booleanValue());
		if(voComplementaryTherapyDetail.getTreatment() != null)
			childRow.setColTreatment(voComplementaryTherapyDetail.getTreatment());	
		childRow.setValue(voComplementaryTherapyDetail);
	
		//if not saved then set the colour
		if(voComplementaryTherapyDetail.getID_ComplementaryTherapyDetails() == null)
			childRow.setTextColor(Color.Red);
		
	}
	private ComplementaryTherapyTreatmentVo getParentFromDomain(ComplementaryTherapyTreatmentShortVo voComplementaryTherapyTreatShort)
	{
		return domain.getComplementaryTherapy(voComplementaryTherapyTreatShort);
	}
	private void reselectUpdatedNode()
	{
		//Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.gridTherapy().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
		
	}
	private void getSelectedInstance()
	{
		//In update mode we can select nodes without displaying anything but the context
		// menus can change based on what's selected so we need to update them
		if (form.getMode().equals(FormMode.EDIT)) 
		{
			updateContextMenusState();
			return;
		}		
		
		if(form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentVo)
		{	
			populateParentInstanceControls((ComplementaryTherapyTreatmentVo) form.gridTherapy().getValue());
		}
		else if(form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentShortVo)
		{									 
			form.getLocalContext().setSelectedParentInstance(getParentFromDomain((ComplementaryTherapyTreatmentShortVo) form.gridTherapy().getValue()));
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());
			populateChildNodes(form.gridTherapy().getSelectedRow(),form.getLocalContext().getSelectedParentInstance().getComplementaryTherapy());
			form.getLocalContext().setSelectedChildInstance(null);
			clearChildInstanceControls();
		}		
		else if(form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)
		{
			GenForm.gridTherapyRow parentRow = form.gridTherapy().getSelectedRow().getParentRow();
			populateParentInstanceControls((ComplementaryTherapyTreatmentVo) parentRow.getValue());
			form.getLocalContext().setSelectedParentInstance((ComplementaryTherapyTreatmentVo) parentRow.getValue());
			
			form.getLocalContext().setSelectedChildInstance((ComplementaryTherapyDetailsVo) form.gridTherapy().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();
		
	}
	private void populateChildInstanceControls(ComplementaryTherapyDetailsVo voComDetail)
	{
		if (voComDetail == null ) return;
		
		form.ctnTherapy().lyrTherapy().tabDetails().cmbComplementary().setValue(voComDetail.getComplementaryTherapy());
		form.ctnTherapy().lyrTherapy().tabDetails().chkContra().setValue(voComDetail.getContraIndicationsChecked().booleanValue());
		form.ctnTherapy().lyrTherapy().tabDetails().txtTreatment().setValue(voComDetail.getTreatment());
		form.getLocalContext().setSelectedChildInstance(voComDetail);
	}
	private void updateContextMenusState()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				// If the golden instance is currently selected we change the text of the update context menu
				// based on whether a parent or child node is selected in the grid.
				if (form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentShortVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);						
				else if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Complementary Detail");
				
				// If the golden node is selected we can now only add child nodes so set the menu text accordingly.
				form.getContextMenus().getGenericGridAddItem().setText("Add Complementary Detail");			
	
				// Only show the update menu if the user has selected an item to update.
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.gridTherapy().getSelectedRowIndex()>=0 && 
																			 form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo) ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo &&
																			 ((ComplementaryTherapyDetailsVo)form.gridTherapy().getValue()).getID_ComplementaryTherapyDetails() == null));																								
			}
			else
			{
				// If the golden instance has been found but NOT selected hide the context menu's 
				if (form.getLocalContext().getGoldenInstanceFound().booleanValue() == true)
				{
					form.getContextMenus().hideAllGenericGridMenuItems();
					return;
				}
				else
				{
					form.getContextMenus().getGenericGridAddItem().setText("New Complementary Therapy");
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);				
				}
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo &&
					 ((ComplementaryTherapyDetailsVo)form.gridTherapy().getValue()).getID_ComplementaryTherapyDetails() == null);
		}
		else
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
		
	}
	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setGoldenInstanceFound(new Boolean(false));
		form.getLocalContext().setUpdatingParent(new Boolean(false));
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setSelectedChildInstance(null);
	}
	protected void onFormModeChanged()
	{
		updateControlsState();	
	}
	private void updateControlsState()
	{
		//The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceFound().booleanValue() == false);

		// The collapsible container
		form.ctnTherapy().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		// The empty tab
		if (form.gridTherapy().getValue() == null)
			form.ctnTherapy().lyrTherapy().showtabempty();

		// The Parent tab
		setParentTabVisability();						

		// The details tab
		setDetailsTabVisibility();		

		// Pick a tab to show
		showHeaderOrDetailsTab();																				

		// The context menus
		updateContextMenusState();
		
	}
	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node 
			if (form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentShortVo)		
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else if(form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentVo)
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)
				form.ctnTherapy().lyrTherapy().showtabDetails();
			
			enableParentControls(false);
		}
		else
		{
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else
				form.ctnTherapy().lyrTherapy().showtabDetails();
			
			if (form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					(form.getLocalContext().getSelectedParentInstance().getID_ComplementaryTherapyTreatmentIsNotNull()))
				enableParentControls(false);		//on update
			else
				enableParentControls(true);			//new record
		}
		
	}
	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{	
			// In view mode, make the details tab visible if a detail instance is selected in the hierarchy grid.  
			form.ctnTherapy().lyrTherapy().tabDetails().setHeaderVisible(form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo);									
		}
		else
		{			
			// In edit mode, make the details tab visible if a hierarchy item has been selected and we're not
			// editing a parent.
			form.ctnTherapy().lyrTherapy().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			
			setAddApplyCaption();			
		}			

		enableDetailsButtons();	
		
	}
	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) &&
				  form.ctnTherapy().lyrTherapy().tabDetails().isHeaderVisible() &&
				  form.getLocalContext().getSelectedChildInstance() == null);

		form.ctnTherapy().lyrTherapy().tabDetails().btnOk().setVisible(boolVisible);
		form.ctnTherapy().lyrTherapy().tabDetails().btnCancelDetails().setVisible(boolVisible);
		
	}
	private void setAddApplyCaption()
	{
		form.ctnTherapy().lyrTherapy().tabDetails().btnOk().setText("Add");
		
		if (form.getLocalContext().getSelectedChildInstance() == null &&
			 (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo))
				form.ctnTherapy().lyrTherapy().tabDetails().btnOk().setText("Apply");
		
	}
	private void setParentTabVisability()
	{
		form.ctnTherapy().lyrTherapy().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());					
	}
	private void enableParentControls(boolean enable)
	{
		form.ctnTherapy().lyrTherapy().tabHeader().dtimAuthoringDateTime().setEnabled(enable);
		form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().setEnabled(enable);
	}
	private void clear()
	{
		form.gridTherapy().getRows().clear();
		clearChildInstanceControls();
	}
	private void clearChildInstanceControls()
	{
		form.ctnTherapy().lyrTherapy().tabDetails().cmbComplementary().setValue(null);
		form.ctnTherapy().lyrTherapy().tabDetails().chkContra().setValue(false);
		form.ctnTherapy().lyrTherapy().tabDetails().txtTreatment().setValue(null);
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException
	{
		setAuthoringCP(value);
	}
	private void setAuthoringCP(String value)
	{
		form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listMedics(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().newRow(med, med.toString());			
		}
		
		if (coll.size() == 1)
			form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().setValue(coll.get(0));
		else if (coll.size() > 1)
			form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().showOpened();
		
	}
	protected void onBtnCancelDetailsClick() throws PresentationLogicException
	{
		clearChildInstanceControls();
	}
	protected void onBtnOkClick() throws PresentationLogicException
	{
		addOrUpdateChild();
	}
	private boolean addOrUpdateChild()
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			if(!newParentNode(form.getLocalContext().getSelectedParentInstance()))
				return false;				
				
		ComplementaryTherapyDetailsVo voComplementaryTherapyDetail = form.getLocalContext().getSelectedChildInstance();
		
		if (voComplementaryTherapyDetail == null)
			voComplementaryTherapyDetail = new ComplementaryTherapyDetailsVo(); 

		populateChildInstanceData(voComplementaryTherapyDetail);

		if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo && form.getLocalContext().getSelectedChildInstanceIsNotNull())
		{
			promoteUpdatedChild(voComplementaryTherapyDetail);
			newChildInstance();
			updateControlsState();
		}
		else
		{
			newChildNode(voComplementaryTherapyDetail);	
			return true;
		}
		return false;
	}
	private void newChildNode(ComplementaryTherapyDetailsVo voComplementaryTherapyDetail)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return;
		
		if (voComplementaryTherapyDetail.countFieldsWithValue() > 1)
		{
			String strErrors[] = voComplementaryTherapyDetail.validate();
		
			if(strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return;
			}
	 				
			promoteChild(voComplementaryTherapyDetail);			
			clearChildInstanceControls();
		}
		
	}
	private void promoteChild(ComplementaryTherapyDetailsVo voComplementaryTherapyDetail)
	{
		if (voComplementaryTherapyDetail == null) return;
		GenForm.gridTherapyRow childRow = null; 
		form.gridTherapy().setValue(form.getLocalContext().getSelectedParentInstance());//maybe need new localcontext
		if(form.gridTherapy().getValue() != null)
		{
			if(form.gridTherapy().getSelectedRow().getValue() instanceof ComplementaryTherapyDetailsVo)
				childRow = form.gridTherapy().getSelectedRow().getParentRow().getRows().newRow();
			else
				childRow = form.gridTherapy().getSelectedRow().getRows().newRow();
		}
		populateChildNode(childRow, voComplementaryTherapyDetail);	
		
	}
	private void newChildInstance()
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		form.gridTherapy().setValue(form.gridTherapy().getSelectedRow().getParentRow().getValue());
	}
	private void promoteUpdatedChild(ComplementaryTherapyDetailsVo voComplementaryTherapyDetail)
	{
		if (voComplementaryTherapyDetail == null) return;
		form.gridTherapy().setValue(form.getLocalContext().getSelectedChildInstance());
		populateChildNode(form.gridTherapy().getSelectedRow(),voComplementaryTherapyDetail);	
	}
	private void populateChildInstanceData(ComplementaryTherapyDetailsVo voComplementaryTherapyDetail)
	{
		voComplementaryTherapyDetail.setComplementaryTherapy(form.ctnTherapy().lyrTherapy().tabDetails().cmbComplementary().getValue());
		voComplementaryTherapyDetail.setTreatment(form.ctnTherapy().lyrTherapy().tabDetails().txtTreatment().getValue());
		voComplementaryTherapyDetail.setContraIndicationsChecked(new Boolean(form.ctnTherapy().lyrTherapy().tabDetails().chkContra().getValue()));
		
	}
	private boolean newParentNode(ComplementaryTherapyTreatmentVo voNewParent)
	{
		if (voNewParent == null) return true;
		
		ComplementaryTherapyTreatmentShortVo voParentShort = new ComplementaryTherapyTreatmentShortVo();
		voParentShort.setAuthoringCP(form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().getValue());
		voParentShort.setAuthoringDateTime(form.ctnTherapy().lyrTherapy().tabHeader().dtimAuthoringDateTime().getValue());
		voParentShort.setClinicalContact(voNewParent.getClinicalContact());
		
		String[] errors = voParentShort.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		GenForm.gridTherapyRow parentRow = form.gridTherapy().getRows().newRow();			
		parentRow.setColComplementary(voParentShort.getAuthoringDateTime().toString()+ " - " + 
							   voParentShort.getAuthoringCP().toString());			
		parentRow.setValue(voParentShort);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.gridTherapy().setValue(voParentShort);	
		return true;
		
	}
	protected void onGridTherapySelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();
	}
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}
	private void newInstance()
	{
		//New instance has been invoked for a parent instance with no current selection made OR
		// with a parent that is not the Golden node..
		if (form.gridTherapy().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() 
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))))
		{
			newParentInstance();			
		}

		// New instance has been invoked with a child node selected.
		if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)
		{
			newChildInstance();
		}
		
		form.setMode(FormMode.EDIT);
	}
	private void newParentInstance()
	{
		ComplementaryTherapyTreatmentVo voNewParent = new ComplementaryTherapyTreatmentVo(); 
		Hcp voHcp = (Hcp) domain.getHcpUser();
		if(voHcp != null)
			voNewParent.setAuthoringCP(voHcp);

		voNewParent.setAuthoringDateTime(new DateTime());
		voNewParent.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voNewParent.setComplementaryTherapy(new ComplementaryTherapyDetailsVoCollection());
		populateParentInstanceControls(voNewParent);		
		form.getLocalContext().setSelectedParentInstance(voNewParent);	
		
	}
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}
	private boolean save()
	{
		checkForUnsavedChild();		
		ComplementaryTherapyTreatmentVo voComplementaryTherapy = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		if (voComplementaryTherapy.getClinicalContact() == null)
			voComplementaryTherapy.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
		String[] arrErrors =  voComplementaryTherapy.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.save(voComplementaryTherapy));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Complementary Therapy record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		
		setUpdatedChild();
		return true;		
	}
	private void setUpdatedChild()
	{
		//Straight child update - Select the currently being updated child as the one so show - post save
		if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)		
		{
			form.getLocalContext().setUpdatedChild((ComplementaryTherapyDetailsVo) form.gridTherapy().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getComplementaryTherapy().sort();
				form.getLocalContext().setUpdatedChild(
						form.getLocalContext().getSelectedParentInstance().getComplementaryTherapy().get(
								form.getLocalContext().getSelectedParentInstance().getComplementaryTherapy().size() - 1));
			}
			
		}
		
	}
	private String[] validateUIRules()
	{
		return null;
	}
	private ComplementaryTherapyTreatmentVo populateInstanceData(ComplementaryTherapyTreatmentVo voComplementaryTherapy)
	{
		if (voComplementaryTherapy == null)
			voComplementaryTherapy = new ComplementaryTherapyTreatmentVo();
				
		populateParentInstanceData(voComplementaryTherapy);						

		if (form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voComplementaryTherapy);			
		}
		else 		// Update child instance.
		{
			ComplementaryTherapyDetailsVo voComplementaryDetail = form.getLocalContext().getSelectedChildInstance();
			populateChildInstanceData(voComplementaryDetail);
			form.getLocalContext().setSelectedChildInstance(voComplementaryDetail);
			
			for (int i=0; i < voComplementaryTherapy.getComplementaryTherapy().size(); i++)
			{
				if (voComplementaryTherapy.getComplementaryTherapy().get(i).getID_ComplementaryTherapyDetails() == 
					form.getLocalContext().getSelectedChildInstance().getID_ComplementaryTherapyDetails())
				{						
					voComplementaryTherapy.getComplementaryTherapy().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}								
		}
		return voComplementaryTherapy;
	}
	private void populateChildCollectionFromGrid(ComplementaryTherapyTreatmentVo voComplementaryTherapy)
	{
		if (form.gridTherapy().getValue() == null) return;

		if (voComplementaryTherapy.getComplementaryTherapy() == null)
			voComplementaryTherapy.setComplementaryTherapy(new ComplementaryTherapyDetailsVoCollection());
		
		GenForm.gridTherapyRow parentRow = form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentShortVo || form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentVo ? 
										    form.gridTherapy().getSelectedRow() : form.gridTherapy().getSelectedRow().getParentRow();		
		
        if (parentRow.getRows().size() > 0 )
        	voComplementaryTherapy.getComplementaryTherapy().clear();
										    
		for (int i=0; i < parentRow.getRows().size(); i++)
        {
			voComplementaryTherapy.getComplementaryTherapy().add((ComplementaryTherapyDetailsVo) parentRow.getRows().get(i).getValue());
        }
		
	}
	private void populateParentInstanceData(ComplementaryTherapyTreatmentVo voComplementaryTherapy)
	{
		voComplementaryTherapy.setAuthoringCP(form.ctnTherapy().lyrTherapy().tabHeader().qmbAuthoringCP().getValue());
		voComplementaryTherapy.setAuthoringDateTime(form.ctnTherapy().lyrTherapy().tabHeader().dtimAuthoringDateTime().getValue());		
	}
	private void checkForUnsavedChild()
	{
		if (form.getLocalContext().getSelectedChildInstance() == null)
		{				
			addOrUpdateChild();
		}
	}
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeChild();
		}
	}
	private void removeChild()
	{
		ComplementaryTherapyTreatmentShortVo voParentShort = null;
		ComplementaryTherapyTreatmentVo voParent = null;
		
		if(form.gridTherapy().getSelectedRow().getParentRow().getValue() instanceof ComplementaryTherapyTreatmentShortVo)
		{
			voParentShort = (ComplementaryTherapyTreatmentShortVo) form.gridTherapy().getSelectedRow().getParentRow().getValue();
			form.gridTherapy().removeSelectedRow();
			form.gridTherapy().setValue(voParentShort);
		}
		else
		{
			voParent = (ComplementaryTherapyTreatmentVo) form.gridTherapy().getSelectedRow().getParentRow().getValue();
			form.gridTherapy().removeSelectedRow();
			form.gridTherapy().setValue(voParent);
		}
		
		updateContextMenusState();
		
	}
	private void updateInstance()
	{
		form.getLocalContext().setUpdatingParent(new Boolean(form.gridTherapy().getValue() instanceof ComplementaryTherapyTreatmentShortVo));
		form.setMode(FormMode.EDIT);
		if (form.gridTherapy().getValue() instanceof ComplementaryTherapyDetailsVo)			
		{
			ComplementaryTherapyDetailsVo voCachedChild =  (ComplementaryTherapyDetailsVo) form.gridTherapy().getValue(); 
			if ( voCachedChild.getID_ComplementaryTherapyDetails() == null)
			{
				populateChildInstanceControls(voCachedChild);
			}			
		}
	}

	}
