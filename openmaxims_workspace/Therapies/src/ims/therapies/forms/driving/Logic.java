//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.45 build 2257.23328)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.driving;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.DrivingAspectCollection;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.therapies.vo.DrivingAspectVo;
import ims.therapies.vo.DrivingAspectVoCollection;
import ims.therapies.vo.DrivingVo;
import ims.therapies.vo.DrivingVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open() {
		clearFields();
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setDrivingVo(null);
		form.qmbAuthoringCP().setEnabled(false);
		form.dtimAuthoring().setEnabled(false);
		
		DrivingVo voDriving = null;
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull()){
			DrivingVoCollection coll = domain.getDrivingByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(coll!=null && coll.size()>0 )
				voDriving = coll.get(0);
		}
		if(voDriving!=null){
			populateScreenFromData(voDriving);
			
			form.btnUpdate().setVisible(true);
			form.btnNew().setVisible(false);
		}
		else{
			LoadGrid();
			
			form.btnUpdate().setVisible(false);
			form.btnNew().setVisible(true);
		}
		
	}
	private void LoadGrid() {
		DrivingAspectCollection voCollDriving = LookupHelper.getDrivingAspect(domain.getLookupService());
		GenForm.grdDrivingRow rowDriving = null;
		for(int i=0; i<voCollDriving.size();i++)
		{
			rowDriving = form.grdDriving().getRows().newRow();
		
			rowDriving.setColDriving(voCollDriving.get(i));
			
		}
		
	}
	private void populateScreenFromData(DrivingVo voDriving) {
		form.getLocalContext().setDrivingVo(voDriving);
		
		if(voDriving.getAuthoringCPIsNotNull()){
			form.qmbAuthoringCP().newRow(voDriving.getAuthoringCP(), voDriving.getAuthoringCP().toString());
			form.qmbAuthoringCP().setValue(voDriving.getAuthoringCP());
		}
		
		if(voDriving.getAuthoringDateTimeIsNotNull())
			form.dtimAuthoring().setValue(voDriving.getAuthoringDateTime());
		
		GenForm.grdDrivingRow rowDriving = null;
		if(voDriving.getDrivingAspectIsNotNull())
			for (int i = 0; i< voDriving.getDrivingAspect().size(); i++)
			{
				DrivingAspectVo voDrivingAspect = voDriving.getDrivingAspect().get(i);
				
				rowDriving = form.grdDriving().getRows().newRow();
				rowDriving.setColDriving(voDrivingAspect.getAspect());
				if(voDrivingAspect.getStatusIsNotNull())
					rowDriving.setColStatus(voDrivingAspect.getStatus());
				if(voDrivingAspect.getCommentIsNotNull())
					rowDriving.setColComments(voDrivingAspect.getComment());
			}
		
		if(voDriving.getDrivingCommencedDateIsNotNull())
			form.pdtDrivingStart().setValue(voDriving.getDrivingCommencedDate());
		if(voDriving.getVehicleTypeIsNotNull())
			form.txtTypeOfVehicle().setValue(voDriving.getVehicleType());
		if(voDriving.getSpecialistInfoEquipIsNotNull())
			form.txtSpecialistInfo().setValue(voDriving.getSpecialistInfoEquip());
	}
	private void clearFields() {
		
		form.qmbAuthoringCP().setValue(null);
		form.dtimAuthoring().setValue(null);
		
		form.grdDriving().getRows().clear();
		
		form.pdtDrivingStart().setValue(null);
		form.txtTypeOfVehicle().setValue(null);
		form.txtSpecialistInfo().setValue(null);
		
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setDefaultValues();
		form.setMode(FormMode.EDIT);
		form.qmbAuthoringCP().setEnabled(true);
		form.dtimAuthoring().setEnabled(true);
	}
	private void setDefaultValues() {
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser!=null){
			form.qmbAuthoringCP().newRow(hcpUser, hcpUser.getName().toString());
			form.qmbAuthoringCP().setValue(hcpUser);
		}
		DateTime dateTime = new DateTime();
		form.dtimAuthoring().setValue(dateTime);	
		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		DrivingVo voDriving = form.getLocalContext().getDrivingVo();
		if (voDriving == null)
			voDriving = new DrivingVo();
		
		voDriving = populateDataFromScreem(voDriving);
		
		if(voDriving==null)
			return;
		
		String[] messages = voDriving.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return;
		}
	
		//save and update local context
		try {
			form.getLocalContext().setDrivingVo(domain.saveDriving(voDriving));
		} catch (StaleObjectException e) {
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
		}
		
		open(); 
	}
	private DrivingVo populateDataFromScreem(DrivingVo voDriving) 
	{
		if(voDriving.getCareContext() == null)
			voDriving.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voDriving.setAuthoringCP(form.qmbAuthoringCP().getValue());
		DateTime dateTime = form.dtimAuthoring().getValue();
		if(dateTime!=null){
			if(form.dtimAuthoring().getValue().getDate()==null){
				engine.showMessage("Please enter Date.");
				return null;
			}
			if(form.dtimAuthoring().getValue().getTime()==null){
				engine.showMessage("Please enter Time.");
				return null;
			}
		}
		voDriving.setAuthoringDateTime(dateTime);
		
		DrivingAspectVoCollection collDrivingAspectVo = new DrivingAspectVoCollection();
		GenForm.grdDrivingRow rowDriving = null;
		for (int i = 0; i< form.grdDriving().getRows().size(); i++)
		{
			rowDriving = form.grdDriving().getRows().get(i);
			DrivingAspectVo voDrivingAspect = new DrivingAspectVo();
			voDrivingAspect.setAspect(rowDriving.getColDriving());	
			
			voDrivingAspect.setStatus(rowDriving.getColStatus());
			voDrivingAspect.setComment(rowDriving.getColComments());
			
			collDrivingAspectVo.add(voDrivingAspect);
			
		}
		voDriving.setDrivingAspect(collDrivingAspectVo);
		voDriving.setDrivingCommencedDate(form.pdtDrivingStart().getValue());
		voDriving.setVehicleType(form.txtTypeOfVehicle().getValue());
		voDriving.setSpecialistInfoEquip(form.txtSpecialistInfo().getValue());
		
		return voDriving;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();	
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.qmbAuthoringCP().setEnabled(false);
		form.dtimAuthoring().setEnabled(false);
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws PresentationLogicException 
	{
		//wdev-4428
		if (form.qmbAuthoringCP().getEditedText().equals(""))
		{
			engine.showMessage("Please enter a HCP to search for.");
			return;
		}

		form.qmbAuthoringCP().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname(form.qmbAuthoringCP().getEditedText());
		filter.setQueryName(name);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.qmbAuthoringCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.qmbAuthoringCP().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.qmbAuthoringCP().showOpened();		
			}
		}
		
	}
}
