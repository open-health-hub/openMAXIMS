//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.45 build 2272.27859)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.contactaonsumm;

import ims.clinical.vo.AreaOfNeedsNotingDetailVo;
import ims.clinical.vo.AreaOfNeedsNotingDetailVoCollection;
import ims.clinical.vo.AreaOfNeedsNotingVo;
import ims.clinical.vo.AreaOfNeedsNotingVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalNoteStatusVo;
import ims.core.vo.ClinicalNoteStatusVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.AreaOfNeedCollection;
import ims.core.vo.lookups.ClinicalNotesStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.therapies.forms.contactaonsumm.GenForm.gridNotesRow;
import ims.core.vo.lookups.HcpDisType;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void open()
	{
		clear();
		resetContextVariables();
		
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			populateParentNodes(domain.list(form.getGlobalContext().Core.getCurrentClinicalContact()));
		else
			populateParentNodes(domain.listbyCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
		
		form.setMode(FormMode.VIEW);
		reselectUpdatedNode();
	}
	private void populateParentNodes(AreaOfNeedsNotingVoCollection voAreaOfNeedsColl)
	{
		if(voAreaOfNeedsColl == null) return;
		
		for(int i=0; i<voAreaOfNeedsColl.size(); i++)
		{
			populateParentNode(voAreaOfNeedsColl.get(i));			
		}
	}
	private void populateParentNode(AreaOfNeedsNotingVo voAreaOfNeed)
	{
		GenForm.gridNotesRow parRow = form.gridNotes().getRows().newRow();
		parRow.setColAreaofNeed(voAreaOfNeed.getClinicalContact().getStartDateTime().toString()+ " - " + voAreaOfNeed.getClinicalContact().getSeenBy().toString());
		
		parRow.setValue(voAreaOfNeed);			
		form.gridNotes().setValue(voAreaOfNeed);
		form.getLocalContext().setSelectedParentInstance(voAreaOfNeed);
		expandParentNode(parRow);
	}
	private void expandParentNode(gridNotesRow selectedRow)
	{				
		AreaOfNeedsNotingVo voParentInstance = form.getLocalContext().getSelectedParentInstance();
		
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(voParentInstance.getClinicalContact().getID_ClinicalContact().equals
										(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
			{
				// If this is the Golden Node then we'll colour it golden.
				form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
				selectedRow.setBackColor(Color.Beige);			
			}
		}
		
		if (voParentInstance.getNotingDetails() != null)  
		{
			selectedRow.setExpanded(true);
			populateChildNodes(selectedRow, voParentInstance.getNotingDetails());
		}
		
		populateParentInstanceControls(voParentInstance);
	}
	private void populateChildNodes(gridNotesRow parRow, AreaOfNeedsNotingDetailVoCollection voNotingDetailsColl)
	{
		if (voNotingDetailsColl == null || voNotingDetailsColl.size()<=0) return;		
		
		for(int i=0; i<voNotingDetailsColl.size(); i++)
		{
			if (parRow != null)
			{
				GenForm.gridNotesRow childRow = parRow.getRows().newRow();
				populateChildNode(childRow, voNotingDetailsColl.get(i));				
			}
		}
	}
	private void reselectUpdatedNode()
	{
		// Pattern demands that the last updated node is displayed
		if (form.getLocalContext().getUpdatedChildIsNotNull())
		{
			form.gridNotes().setValue(form.getLocalContext().getUpdatedChild());
			getSelectedInstance();
			form.getLocalContext().setUpdatedChild(null);
		}
	}
	private void resetContextVariables()
	{
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(false));
		form.getLocalContext().setSelectedChildInstance(null);
		form.getLocalContext().setSelectedParentInstance(null);
		form.getLocalContext().setUpdatingParent(new Boolean(false));
	}
	private void clear()
	{
		form.gridNotes().getRows().clear();
		clearChildInstanceControls();
	}
	private void initialize()
	{
		fillAreaOfNeedCombo();
		form.ctnTherapy().setCollapsed(true);
		form.ctnTherapy().lyrTherapy().tabEmpty().setHeaderVisible(false);
	}
	private void fillAreaOfNeedCombo()
	{
		AreaOfNeedCollection areaOfNeedColl = domain.getAreaOfNeeds(form.getGlobalContext().Core.getCurrentClinicalContact());
		if(areaOfNeedColl != null)
		{
			for(int i=0; i<areaOfNeedColl.size(); i++)
			{
				form.ctnTherapy().lyrTherapy().tabDetails().cmbAreaNeed().newRow(areaOfNeedColl.get(i), areaOfNeedColl.get(i).toString());
			}
		}
	}
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	private boolean save()
	{
		if(checkForUnsavedChild())
			return false;
			
		AreaOfNeedsNotingVo voAreaOfNeedsNoting = populateInstanceData(form.getLocalContext().getSelectedParentInstance());
		
		ClinicalNotesVo voClinicalNotes = populateClinicalNote();
		if(voClinicalNotes == null)
			return false;
		
		if (voClinicalNotes.getCareContext() ==  null)
			voClinicalNotes.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(voClinicalNotes.getClinicalContact() == null)
			voClinicalNotes.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voAreaOfNeedsNoting.setClinicalNote(voClinicalNotes);
		
		String[] errors = voAreaOfNeedsNoting.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			form.getLocalContext().setSelectedParentInstance(domain.save(voAreaOfNeedsNoting));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		setUpdatedChild();
		return true;	
	}
	private void setUpdatedChild()
	{
		// Straight child update - Select the currently being updated child as the one so show - post save
		if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)		
		{
			form.getLocalContext().setUpdatedChild((AreaOfNeedsNotingDetailVo) form.gridNotes().getValue());
		}
		else
		{
			// Find the most recently added child
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE))
			{
				form.getLocalContext().getSelectedParentInstance().getNotingDetails().sort();
				form.getLocalContext().setUpdatedChild(
						form.getLocalContext().getSelectedParentInstance().getNotingDetails().get(
								form.getLocalContext().getSelectedParentInstance().getNotingDetails().size() - 1));
			}
			
		}
	}
	private ClinicalNotesVo populateClinicalNote()
	{
		ClinicalNotesVo voClinicalNotes = form.getLocalContext().getSelectedParentInstance().getClinicalNote();
		
		if(voClinicalNotes == null)
			voClinicalNotes = new ClinicalNotesVo();
	
		String note = getNotes();
		if(note == null)
			return null;
		
		
		//get hcp from 
		if (form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().getValue() == null) 
			form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().initializeComponent();

		if(voClinicalNotes.getID_ClinicalNotes() == null)
		{
			voClinicalNotes.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
			if(voCareContext != null && voCareContext.getEpisodeOfCareIsNotNull())
			{				
				voClinicalNotes.setRecordingDateTime(voCareContext.getStartDateTime());
				if (voCareContext.getEpisodeOfCare().getResponsibleHCP() instanceof HcpLiteVo)
					voClinicalNotes.setRecordingUser(((HcpLiteVo)voCareContext.getEpisodeOfCare().getResponsibleHCP()).getMos());
			}			
		}
		//else this is an update so don't overwrite the recorded hcp and time
	
		voClinicalNotes.setAuthoringInfo(form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().getValue());
		voClinicalNotes.setWard(form.getGlobalContext().Core.getPatientShort().getWard());
		voClinicalNotes.setIsDerivedNote(new Boolean(true));
		//voClinicalNotes.setActiveStatus(ClinicalNotesStatus.DRAFT);
		voClinicalNotes.setDiscipline(HcpDisType.THERAPY);
		voClinicalNotes.setInHospitalReport(new Boolean(false));
//		voClinicalNotes.setIsActive(new Boolean(true));
		
		//WDEV-2290
		ClinicalNoteStatusVo voClinicalNotesStatus = new ClinicalNoteStatusVo();
		voClinicalNotesStatus.setStatus(ClinicalNotesStatus.ACTIVE);
		voClinicalNotesStatus.setMOS((MemberOfStaffLiteVo) domain.getMosUser());
		voClinicalNotesStatus.setDateTime(form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().getValue().getAuthoringDateTime());
		voClinicalNotesStatus.setClinicalNote(note);

		ClinicalNoteStatusVoCollection voClinicalNotesStatusColl = new ClinicalNoteStatusVoCollection();
		voClinicalNotesStatusColl.add(voClinicalNotesStatus);
		
		voClinicalNotes.setStatusHistory(voClinicalNotesStatusColl);
		voClinicalNotes.setCurrentStatus(voClinicalNotesStatus);
		
		voClinicalNotes.setClinicalNote(note);
		
		//voClinicalNotes.setRecordedOnBehalfOf();
		//voClinicalNotes.setDiscipline(); //come back
		
		return voClinicalNotes;
	}
	private String getNotes()
	{
		AreaOfNeedsNotingDetailVoCollection voAreaOfNeedsDetailColl = form.getLocalContext().getSelectedParentInstance().getNotingDetails();
		
		if(voAreaOfNeedsDetailColl == null) return null;
		
		boolean summaryNoteExists = false;
		
		java.lang.StringBuffer notes = new java.lang.StringBuffer("");
		notes.append(ims.framework.controls.RichTextControl.IdentityTag);

		for(int t=0; t<voAreaOfNeedsDetailColl.size(); t++)
		{
			AreaOfNeedsNotingDetailVo voAreaOfNeedDetail = voAreaOfNeedsDetailColl.get(t);
			//WDEV-2290 
			if(voAreaOfNeedDetail.getSummaryNoteIsNotNull() &&
					voAreaOfNeedDetail.getAreaofNeedIsNotNull())
			{
				notes.append("<font color=\"#FF0000\"><b>");
				notes.append(voAreaOfNeedDetail.getAreaofNeed().toString());
				notes.append("</b></font><br> ");
				notes.append(voAreaOfNeedDetail.getSummaryNote());
				notes.append("<br>");
				
				summaryNoteExists = true;
			}
		}
		if(!summaryNoteExists)
		{
			engine.showMessage("At least one Summary note must be entered. Please update a detail.");
			return null;
		}
		return notes.toString();
	}
	private boolean checkForUnsavedChild()
	{
		if(form.getLocalContext().getSelectedChildInstance() == null)
		{
			if(addOrUpdateChild())
				return true;
		}
		return false;
	}
	private AreaOfNeedsNotingVo populateInstanceData(AreaOfNeedsNotingVo voAreaOfNeedsNoting)
	{
		if(voAreaOfNeedsNoting == null)
			voAreaOfNeedsNoting = new AreaOfNeedsNotingVo();
		
		if(form.getLocalContext().getSelectedChildInstance() == null)
		{
			populateChildCollectionFromGrid(voAreaOfNeedsNoting);
		}
		else 	//update child instance
		{
			AreaOfNeedsNotingDetailVo voNotingDetail = form.getLocalContext().getSelectedChildInstance();
			populateChildInstanceData(voNotingDetail);
			form.getLocalContext().setSelectedChildInstance(voNotingDetail);
			
			for (int i=0; i < voAreaOfNeedsNoting.getNotingDetails().size(); i++)
			{
				if (voAreaOfNeedsNoting.getNotingDetails().get(i).getID_AreaofNeedsNotingDetail() == 
					form.getLocalContext().getSelectedChildInstance().getID_AreaofNeedsNotingDetail())
				{						
					voAreaOfNeedsNoting.getNotingDetails().set(i, form.getLocalContext().getSelectedChildInstance());
				}
			}		
		}
		form.getLocalContext().setSelectedParentInstance(voAreaOfNeedsNoting);
		
		return voAreaOfNeedsNoting;
	}
	private void populateChildCollectionFromGrid(AreaOfNeedsNotingVo voAreaOfNeedsNoting)
	{
		if(form.gridNotes().getValue() == null) return;
		
		if(voAreaOfNeedsNoting.getNotingDetails() == null)
			voAreaOfNeedsNoting.setNotingDetails(new AreaOfNeedsNotingDetailVoCollection());
		
		GenForm.gridNotesRow parentRow = form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo ? 
			    form.gridNotes().getSelectedRow() : form.gridNotes().getSelectedRow().getParentRow();		

		if (parentRow.getRows().size() > 0 )
			voAreaOfNeedsNoting.getNotingDetails().clear();
					    
		for (int i=0; i < parentRow.getRows().size(); i++)
		{
			voAreaOfNeedsNoting.getNotingDetails().add((AreaOfNeedsNotingDetailVo) parentRow.getRows().get(i).getValue());
		}
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBOkDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addOrUpdateChild();
	}
	private boolean addOrUpdateChild()
	{
		if (form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE))			
			newParentNode(form.getLocalContext().getSelectedParentInstance());	
		
		AreaOfNeedsNotingDetailVo voNotingDetail = form.getLocalContext().getSelectedChildInstance();
		
		if(voNotingDetail == null)
			voNotingDetail = new AreaOfNeedsNotingDetailVo();
			
		populateChildInstanceData(voNotingDetail);
		
		if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)
		{
			promoteUpdatedChild(voNotingDetail);
			newChildInstance();
			updateControlsState();
		}
		else
		{
			if(newChildNode(voNotingDetail))
				return true;
		}
		return false;
		
	}
	private void newParentNode(AreaOfNeedsNotingVo voNewParent)
	{
		if (voNewParent == null) 
			voNewParent = new AreaOfNeedsNotingVo();
		
		GenForm.gridNotesRow parentRow = form.gridNotes().getRows().newRow();			
		parentRow.setColAreaofNeed(voNewParent.getClinicalContact().getStartDateTime().toString()+ " - " + voNewParent.getClinicalContact().getSeenBy().toString());			
		parentRow.setValue(voNewParent);
		parentRow.setBackColor(Color.Beige);
		form.getLocalContext().setGoldenInstanceSelected(new Boolean(true));
		parentRow.setExpanded(true);
		form.gridNotes().setValue(voNewParent);	
	}
	private boolean newChildNode(AreaOfNeedsNotingDetailVo voNotingDetail)
	{
		if (form.getLocalContext().getSelectedChildInstance() != null) return false;
		
		if (voNotingDetail.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voNotingDetail.validate();
		
			if(strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return true;
			}
	 				
			promoteChild(voNotingDetail);			
			clearChildInstanceControls();
		}
		return false;
	}
	private void promoteChild(AreaOfNeedsNotingDetailVo voNotingDetail)
	{
		if (voNotingDetail == null) return;
		GenForm.gridNotesRow childRow = form.gridNotes().getSelectedRow().getRows().newRow();		
		populateChildNode(childRow, voNotingDetail);
	}
	private void populateChildNode(gridNotesRow childRow, AreaOfNeedsNotingDetailVo voNotingDetail)
	{
		if(voNotingDetail == null) return;
		
		if(voNotingDetail.getAreaofNeed() != null)
			childRow.setColAreaofNeed(voNotingDetail.getAreaofNeed().toString());
		
		if(voNotingDetail.getSummaryNote() != null && voNotingDetail.getTherapyNote() != null)
			childRow.setColNotes("Summary Note: " + voNotingDetail.getSummaryNote() + "\n" + "Therapy  Note: " + voNotingDetail.getTherapyNote());
		else if(voNotingDetail.getSummaryNote() != null && voNotingDetail.getTherapyNote() == null)
			childRow.setColNotes("Summary Note: " + voNotingDetail.getSummaryNote());
		else if(voNotingDetail.getTherapyNote() != null && voNotingDetail.getSummaryNote() == null)
			childRow.setColNotes("Therapy Note: " + voNotingDetail.getTherapyNote());
		childRow.setValue(voNotingDetail);

		if(voNotingDetail.getID_AreaofNeedsNotingDetail() == null)
			childRow.setTextColor(Color.Red);
		
	}
	private void newChildInstance()
	{
		clearChildInstanceControls();
		form.getLocalContext().setSelectedChildInstance(null);
		form.gridNotes().setValue(form.gridNotes().getSelectedRow().getParentRow().getValue());
	}
	private void promoteUpdatedChild(AreaOfNeedsNotingDetailVo voNotingDetail)
	{
		if(voNotingDetail == null) return;
		populateChildNode(form.gridNotes().getSelectedRow(), voNotingDetail);
	}
	private void populateChildInstanceData(AreaOfNeedsNotingDetailVo voNotingDetail)
	{
		voNotingDetail.setAreaofNeed(form.ctnTherapy().lyrTherapy().tabDetails().cmbAreaNeed().getValue());
		voNotingDetail.setSummaryNote(form.ctnTherapy().lyrTherapy().tabDetails().txtSummNote().getValue());
		voNotingDetail.setTherapyNote(form.ctnTherapy().lyrTherapy().tabDetails().txtTherapyNote().getValue());		
	}
	protected void onBCancelDetailsClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearChildInstanceControls();
	}
	private void clearChildInstanceControls()
	{
		form.ctnTherapy().lyrTherapy().tabDetails().cmbAreaNeed().setValue(null);
		form.ctnTherapy().lyrTherapy().tabDetails().txtSummNote().setValue(null);
		form.ctnTherapy().lyrTherapy().tabDetails().txtTherapyNote().setValue(null);		
	}
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	private void updateControlsState()
	{				
		//The new button
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && 
				form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getLocalContext().getGoldenInstanceSelected().booleanValue() == false);

		// The collapsible container
		form.ctnTherapy().setCollapsed(form.getLocalContext().getSelectedParentInstance() == null);						

		// The empty tab
		if (form.gridNotes().getValue() == null)
			form.ctnTherapy().lyrTherapy().showtabEmpty();

		// The Parent tab
		setParentTabVisability();						

		// The details tab
		setDetailsTabVisibility();		

		// Pick a tab to show
		showHeaderOrDetailsTab();																				

		// The context menus
		updateContextMenusState();		
	}
	private void showHeaderOrDetailsTab()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			// In view mode just show the selected node
			if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo)		
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo)		
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)
				form.ctnTherapy().lyrTherapy().showtabDetails();
			else
				form.ctnTherapy().lyrTherapy().showtabEmpty();
		}
		else
		{
			if (form.getLocalContext().getUpdatingParent().equals(Boolean.TRUE))
				form.ctnTherapy().lyrTherapy().showtabHeader();
			else
				form.ctnTherapy().lyrTherapy().showtabDetails();
		}		
	}

	private void setDetailsTabVisibility()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{	
			// In view mode, make the details tab visible if a detail instance is selected in the hierarchy grid.  
			form.ctnTherapy().lyrTherapy().tabDetails().setHeaderVisible(form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo);									
		}
		else
		{			
			// In edit mode, make the details tab visible if a hierarchy item has been selected and we're not
			// editing a parent.
			form.ctnTherapy().lyrTherapy().tabDetails().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull() && 
					form.getLocalContext().getUpdatingParent().equals(Boolean.FALSE));
			
			//fixCombo();
			setAddApplyCaption();			
		}			

		enableDetailsButtons();		
	}
	private void enableDetailsButtons()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean boolVisible = (form.ctnTherapy().lyrTherapy().tabDetails().isHeaderVisible() &&
				  form.getLocalContext().getSelectedChildInstance() == null);

			form.ctnTherapy().lyrTherapy().tabDetails().btnOkDetails().setVisible(boolVisible);
			form.ctnTherapy().lyrTherapy().tabDetails().btnCancelDetails().setVisible(boolVisible);
		}		
	}
	private void setParentTabVisability()
	{
		form.ctnTherapy().lyrTherapy().tabHeader().setHeaderVisible(form.getLocalContext().getSelectedParentInstanceIsNotNull());					
		enableParentControls();		
		
	}
	private void enableParentControls()
	{
		/*boolean boolEnabled = (form.getMode().equals(FormMode.EDIT) && (form.grdTreatments().getValue() instanceof MobilisationsVo ||
				  form.grdTreatments().getValue() instanceof MobilisationsShortVo));*/

		boolean boolEnabled = (form.getMode().equals(FormMode.EDIT));		
		form.ctnTherapy().lyrTherapy().tabHeader().setcustomControlAuthEnabled(boolEnabled);
		
	}
	private void setAddApplyCaption()
	{
		form.ctnTherapy().lyrTherapy().tabDetails().btnOkDetails().setText("Add");
		
		if (form.getLocalContext().getSelectedChildInstance() == null &&
			 (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo))
				form.ctnTherapy().lyrTherapy().tabDetails().btnOkDetails().setText("Apply");
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeChild();
		}
	}
	private void removeChild()
	{
		AreaOfNeedsNotingVo voParent = (AreaOfNeedsNotingVo) form.gridNotes().getSelectedRow().getParentRow().getValue();
		form.gridNotes().removeSelectedRow();
		form.gridNotes().setValue(voParent);
		updateContextMenusState();
	}
	private void updateInstance()
	{
		form.getLocalContext().setUpdatingParent(new Boolean(form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo));
		
		if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)			
		{
			AreaOfNeedsNotingDetailVo voCachedChild = (AreaOfNeedsNotingDetailVo) form.gridNotes().getValue(); 
			if ( voCachedChild.getID_AreaofNeedsNotingDetail() == null)
			{
				populateChildInstanceControls(voCachedChild);
			}			
		}
		form.setMode(FormMode.EDIT);
	}
	private void populateChildInstanceControls(AreaOfNeedsNotingDetailVo voAreaOfNeedsNotingDetail)
	{
		if (voAreaOfNeedsNotingDetail == null ) return;
		
		form.ctnTherapy().lyrTherapy().tabDetails().cmbAreaNeed().setValue(voAreaOfNeedsNotingDetail.getAreaofNeed());
		form.ctnTherapy().lyrTherapy().tabDetails().txtSummNote().setValue(voAreaOfNeedsNotingDetail.getSummaryNote());
		form.ctnTherapy().lyrTherapy().tabDetails().txtTherapyNote().setValue(voAreaOfNeedsNotingDetail.getTherapyNote());
		
	}
	private void newInstance()
	{
		// New instance has been invoked for a parent instance with no current selection made OR
		// with a parent that is not the Golden node..
		if (form.gridNotes().getValue() == null || ((form.getLocalContext().getSelectedParentInstanceIsNotNull() )
				&& form.getLocalContext().getGoldenInstanceSelected().equals(Boolean.FALSE)))
		{
			newParentInstance();
			form.setMode(FormMode.EDIT);
			return;
		}

		// New instance has been invoked with a child node selected.
		if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)
		{			
			newChildInstance();
			form.setMode(FormMode.EDIT);
			return;
		}
		if(form.gridNotes().getValue() != null && form.gridNotes().getSelectedRow() != null && form.getLocalContext().getSelectedParentInstanceIsNotNull())
		{
			clearChildInstanceControls();
			form.getLocalContext().setSelectedChildInstance(null);
			form.gridNotes().setValue(form.gridNotes().getSelectedRow().getValue());
			form.gridNotes().getSelectedRow().setExpanded(true);
			form.setMode(FormMode.EDIT);
			return;
		}
		
		
	}
	private void newParentInstance()
	{
		form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().initializeComponent();
		AreaOfNeedsNotingVo voAreaOfNeeds = new AreaOfNeedsNotingVo();
		voAreaOfNeeds.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voAreaOfNeeds.setNotingDetails(new AreaOfNeedsNotingDetailVoCollection());
		//populateParentInstanceControls(voAreaOfNeeds);
		form.getLocalContext().setSelectedParentInstance(voAreaOfNeeds);
		form.ctnTherapy().setCollapsed(false);
		enableParentControls();
	}
	private void populateParentInstanceControls(AreaOfNeedsNotingVo vo)
	{
		if(vo != null)
		{
			if (vo.getClinicalNoteIsNotNull())
				form.ctnTherapy().lyrTherapy().tabHeader().customControlAuth().setValue(vo.getClinicalNote().getAuthoringInfo());
		}
	}

	protected void onGridNotesSelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();
	}
	private void getSelectedInstance()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}
		
		if(form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo)
		{
			form.getLocalContext().setSelectedParentInstance((AreaOfNeedsNotingVo) form.gridNotes().getValue());
			populateParentInstanceControls(form.getLocalContext().getSelectedParentInstance());						
		}
		else if(form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)
		{
			form.getLocalContext().setSelectedChildInstance((AreaOfNeedsNotingDetailVo) form.gridNotes().getValue());
			populateChildInstanceControls(form.getLocalContext().getSelectedChildInstance());			
		}
 
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			form.getLocalContext().setGoldenInstanceSelected(new Boolean(form.getLocalContext().getSelectedParentInstance().getClinicalContact().getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact())));
		
		updateControlsState();
	}
	private void updateContextMenusState()
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getLocalContext().getGoldenInstanceSelected().booleanValue())
			{
				if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo)
					form.getContextMenus().getGenericGridUpdateItem().setText("Edit Area of Need Detail");
				
				form.getContextMenus().getGenericGridAddItem().setText("Add Area of Need Detail");			
	
				form.getContextMenus().getGenericGridUpdateItem().setVisible((form.getMode().equals(FormMode.VIEW)&& 
																			 form.gridNotes().getSelectedRowIndex()>=0) ||
																			 (form.getMode().equals(FormMode.EDIT) &&
																			 form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo &&
																			 ((AreaOfNeedsNotingDetailVo)form.gridNotes().getValue()).getID_AreaofNeedsNotingDetail() == null));																								
				
				if (form.gridNotes().getValue() instanceof AreaOfNeedsNotingVo)
					form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
			
			}
			else
			{
				form.getContextMenus().getGenericGridAddItem().setText("New Area of Need");
				form.getContextMenus().getGenericGridUpdateItem().setVisible(false);				
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) &&
					 form.gridNotes().getValue() instanceof AreaOfNeedsNotingDetailVo &&
					 ((AreaOfNeedsNotingDetailVo)form.gridNotes().getValue()).getID_AreaofNeedsNotingDetail() == null);
		}		
	}
	@Override
	protected void onRIEDialogClosed(DialogResult result) throws PresentationLogicException
	{
		if(DialogResult.OK.equals(result) || DialogResult.YES.equals(result))
		{
			if(!form.getLocalContext().getSelectedParentInstanceIsNotNull())
				return;
			
			ClinicalNotesVo clinicalNotes = form.getLocalContext().getSelectedParentInstance().getClinicalNote();
			
			if(clinicalNotes == null)
				return;
			
			clinicalNotes.setIsRIE(true);
			
			clinicalNotes.validate();
			
			Integer patientId=null, contactId=null, careContextId=null;
			
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				patientId = form.getGlobalContext().Core.getPatientShort().getID_Patient();
			if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				contactId = form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact();
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				careContextId = form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext();
			
			try 
			{
				domain.markAsRie(clinicalNotes, engine.getFormName(), patientId, contactId, careContextId, "");
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				onFormOpen();
				return;
			}
		}
	}
}
