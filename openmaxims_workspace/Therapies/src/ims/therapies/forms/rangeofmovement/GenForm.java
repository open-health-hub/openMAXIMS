//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.rangeofmovement;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabEmptyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 513, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No details to display - Please select a target from one of the grids", new Integer(1), null, new Integer(1)}));
			}

		}
		public static class tabHeaderContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbAuthoringCPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.Hcp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.Hcp value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.Hcp getValue()
				{
					return (ims.core.vo.Hcp)super.control.getValue();
				}
				public void setValue(ims.core.vo.Hcp value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 130, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 160, 56, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_qmbAuthoringCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbAuthoringCPTemp);
				qmbAuthoringCPComboBox qmbAuthoringCP = (qmbAuthoringCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthoringCPComboBox.class, m_qmbAuthoringCPTemp);
				super.addComboBox(qmbAuthoringCP);
			}

			public DateTimeControl dtimAuthoringDateTime()
			{
				return (DateTimeControl)super.getControl(2);
			}
			public qmbAuthoringCPComboBox qmbAuthoringCP()
			{
				return (qmbAuthoringCPComboBox)super.getComboBox(0);
			}
		}
		public static class tabCentralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbCentralActionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.RangeOfMovementAction getValue()
				{
					return (ims.spinalinjuries.vo.lookups.RangeOfMovementAction)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRangeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange getValue()
				{
					return (ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementQualitativeRange value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCentralMovementComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.MskJointsMovements getValue()
				{
					return (ims.spinalinjuries.vo.lookups.MskJointsMovements)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCentralAreaComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.generalmedical.vo.RangeOfMovementJointVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.generalmedical.vo.RangeOfMovementJointVo getValue()
				{
					return (ims.generalmedical.vo.RangeOfMovementJointVo)super.control.getValue();
				}
				public void setValue(ims.generalmedical.vo.RangeOfMovementJointVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCentralLimitedComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.RangeOfMovementLimited getValue()
				{
					return (ims.spinalinjuries.vo.lookups.RangeOfMovementLimited)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 90, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "EOR:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 408, 66, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "SOR:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Action:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 408, 42, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Range:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Movement:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Joint:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 408, 18, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Limited:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 680, 112, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add/Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 752, 112, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 96, 40, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbCentralActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCentralActionTemp);
				cmbCentralActionComboBox cmbCentralAction = (cmbCentralActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCentralActionComboBox.class, m_cmbCentralActionTemp);
				super.addComboBox(cmbCentralAction);
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 472, 40, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbRangeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRangeTemp);
				cmbRangeComboBox cmbRange = (cmbRangeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRangeComboBox.class, m_cmbRangeTemp);
				super.addComboBox(cmbRange);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 96, 64, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbCentralMovementTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCentralMovementTemp);
				cmbCentralMovementComboBox cmbCentralMovement = (cmbCentralMovementComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCentralMovementComboBox.class, m_cmbCentralMovementTemp);
				super.addComboBox(cmbCentralMovement);
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbCentralAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCentralAreaTemp);
				cmbCentralAreaComboBox cmbCentralArea = (cmbCentralAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCentralAreaComboBox.class, m_cmbCentralAreaTemp);
				super.addComboBox(cmbCentralArea);
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbCentralLimitedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCentralLimitedTemp);
				cmbCentralLimitedComboBox cmbCentralLimited = (cmbCentralLimitedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCentralLimitedComboBox.class, m_cmbCentralLimitedTemp);
				super.addComboBox(cmbCentralLimited);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 472, 88, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 472, 64, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public Button btnCentralAddApply()
			{
				return (Button)super.getControl(7);
			}
			public Button btnCentralClear()
			{
				return (Button)super.getControl(8);
			}
			public cmbCentralActionComboBox cmbCentralAction()
			{
				return (cmbCentralActionComboBox)super.getComboBox(0);
			}
			public cmbRangeComboBox cmbRange()
			{
				return (cmbRangeComboBox)super.getComboBox(1);
			}
			public cmbCentralMovementComboBox cmbCentralMovement()
			{
				return (cmbCentralMovementComboBox)super.getComboBox(2);
			}
			public cmbCentralAreaComboBox cmbCentralArea()
			{
				return (cmbCentralAreaComboBox)super.getComboBox(3);
			}
			public cmbCentralLimitedComboBox cmbCentralLimited()
			{
				return (cmbCentralLimitedComboBox)super.getComboBox(4);
			}
			public IntBox intEOR()
			{
				return (IntBox)super.getControl(14);
			}
			public IntBox intSOR()
			{
				return (IntBox)super.getControl(15);
			}
		}
		public static class tabPeripheralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPeripheralActionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.RangeOfMovementAction getValue()
				{
					return (ims.spinalinjuries.vo.lookups.RangeOfMovementAction)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementAction value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPeripheralMovementComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.MskJointsMovements getValue()
				{
					return (ims.spinalinjuries.vo.lookups.MskJointsMovements)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPeripheralAreaComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.generalmedical.vo.RangeOfMovementJointVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.generalmedical.vo.RangeOfMovementJointVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.generalmedical.vo.RangeOfMovementJointVo getValue()
				{
					return (ims.generalmedical.vo.RangeOfMovementJointVo)super.control.getValue();
				}
				public void setValue(ims.generalmedical.vo.RangeOfMovementJointVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPeripheralLimitedComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value)
				{
					return super.control.removeRow(value);
				}
				public ims.spinalinjuries.vo.lookups.RangeOfMovementLimited getValue()
				{
					return (ims.spinalinjuries.vo.lookups.RangeOfMovementLimited)super.control.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.RangeOfMovementLimited value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRonly value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRonly getValue()
				{
					return (ims.core.vo.lookups.LateralityLRonly)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRonly value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 78, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Action:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 408, 78, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "EOR:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 408, 49, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "SOR:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 107, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Movement:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 20, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Joint:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 408, 16, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Limited:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 49, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 680, 112, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add/Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 752, 112, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 472, 74, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 472, 45, 48, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 96, 74, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbPeripheralActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPeripheralActionTemp);
				cmbPeripheralActionComboBox cmbPeripheralAction = (cmbPeripheralActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralActionComboBox.class, m_cmbPeripheralActionTemp);
				super.addComboBox(cmbPeripheralAction);
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 96, 103, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbPeripheralMovementTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPeripheralMovementTemp);
				cmbPeripheralMovementComboBox cmbPeripheralMovement = (cmbPeripheralMovementComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralMovementComboBox.class, m_cmbPeripheralMovementTemp);
				super.addComboBox(cmbPeripheralMovement);
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbPeripheralAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbPeripheralAreaTemp);
				cmbPeripheralAreaComboBox cmbPeripheralArea = (cmbPeripheralAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralAreaComboBox.class, m_cmbPeripheralAreaTemp);
				super.addComboBox(cmbPeripheralArea);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 216, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbPeripheralLimitedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPeripheralLimitedTemp);
				cmbPeripheralLimitedComboBox cmbPeripheralLimited = (cmbPeripheralLimitedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPeripheralLimitedComboBox.class, m_cmbPeripheralLimitedTemp);
				super.addComboBox(cmbPeripheralLimited);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 96, 45, 232, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLateralityTemp);
				cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
				super.addComboBox(cmbLaterality);
			}

			public Button btnPeripheralAddApply()
			{
				return (Button)super.getControl(7);
			}
			public Button btnPeripheralClear()
			{
				return (Button)super.getControl(8);
			}
			public TextBox txtEOR()
			{
				return (TextBox)super.getControl(9);
			}
			public TextBox txtSOR()
			{
				return (TextBox)super.getControl(10);
			}
			public cmbPeripheralActionComboBox cmbPeripheralAction()
			{
				return (cmbPeripheralActionComboBox)super.getComboBox(0);
			}
			public cmbPeripheralMovementComboBox cmbPeripheralMovement()
			{
				return (cmbPeripheralMovementComboBox)super.getComboBox(1);
			}
			public cmbPeripheralAreaComboBox cmbPeripheralArea()
			{
				return (cmbPeripheralAreaComboBox)super.getComboBox(2);
			}
			public cmbPeripheralLimitedComboBox cmbPeripheralLimited()
			{
				return (cmbPeripheralLimitedComboBox)super.getComboBox(3);
			}
			public cmbLateralityComboBox cmbLaterality()
			{
				return (cmbLateralityComboBox)super.getComboBox(4);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 832, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabEmpty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Empty", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabEmptyContainer m_tabEmptyContainer = (tabEmptyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEmptyContainer.class, m_tabEmpty, factory);
			super.addContainer(m_tabEmpty, m_tabEmptyContainer);
			ims.framework.utils.SizeInfo m_tabEmptyDesignSize = new ims.framework.utils.SizeInfo(832, 168);
			ims.framework.utils.SizeInfo m_tabEmptyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabEmptyContainer.setContext(form, appForm, m_tabEmpty, loader, contextMenus, startControlID, m_tabEmptyDesignSize, m_tabEmptyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 832, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabHeader = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Header", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabHeaderContainer m_tabHeaderContainer = (tabHeaderContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHeaderContainer.class, m_tabHeader, factory);
			super.addContainer(m_tabHeader, m_tabHeaderContainer);
			ims.framework.utils.SizeInfo m_tabHeaderDesignSize = new ims.framework.utils.SizeInfo(832, 168);
			ims.framework.utils.SizeInfo m_tabHeaderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
			m_tabHeaderContainer.setContext(form, appForm, m_tabHeader, loader, contextMenus, startControlID, m_tabHeaderDesignSize, m_tabHeaderRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 832, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabCentral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Central", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabCentralContainer m_tabCentralContainer = (tabCentralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCentralContainer.class, m_tabCentral, factory);
			super.addContainer(m_tabCentral, m_tabCentralContainer);
			ims.framework.utils.SizeInfo m_tabCentralDesignSize = new ims.framework.utils.SizeInfo(832, 168);
			ims.framework.utils.SizeInfo m_tabCentralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_tabCentralContainer.setContext(form, appForm, m_tabCentral, loader, contextMenus, startControlID, m_tabCentralDesignSize, m_tabCentralRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 832, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabPeripheral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Peripheral", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPeripheralContainer m_tabPeripheralContainer = (tabPeripheralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPeripheralContainer.class, m_tabPeripheral, factory);
			super.addContainer(m_tabPeripheral, m_tabPeripheralContainer);
			ims.framework.utils.SizeInfo m_tabPeripheralDesignSize = new ims.framework.utils.SizeInfo(832, 168);
			ims.framework.utils.SizeInfo m_tabPeripheralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
			m_tabPeripheralContainer.setContext(form, appForm, m_tabPeripheral, loader, contextMenus, startControlID, m_tabPeripheralDesignSize, m_tabPeripheralRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabEmpty().setVisible(false);
			tabHeader().setVisible(false);
			tabCentral().setVisible(false);
			tabPeripheral().setVisible(false);
		}
		public void settabEmptyEnabled(boolean value)
		{
			tabEmpty().setEnabled(value);
		}
		public void settabHeaderEnabled(boolean value)
		{
			tabHeader().setEnabled(value);
		}
		public void settabCentralEnabled(boolean value)
		{
			tabCentral().setEnabled(value);
		}
		public void settabPeripheralEnabled(boolean value)
		{
			tabPeripheral().setEnabled(value);
		}
		public void showtabEmpty()
		{
			tabHeader().setVisible(false);
			tabCentral().setVisible(false);
			tabPeripheral().setVisible(false);
			tabEmpty().setVisible(true);
		}
		public void showtabHeader()
		{
			tabEmpty().setVisible(false);
			tabCentral().setVisible(false);
			tabPeripheral().setVisible(false);
			tabHeader().setVisible(true);
		}
		public void showtabCentral()
		{
			tabEmpty().setVisible(false);
			tabHeader().setVisible(false);
			tabPeripheral().setVisible(false);
			tabCentral().setVisible(true);
		}
		public void showtabPeripheral()
		{
			tabEmpty().setVisible(false);
			tabHeader().setVisible(false);
			tabCentral().setVisible(false);
			tabPeripheral().setVisible(true);
		}

		public tabEmptyContainer tabEmpty()
		{
			return (tabEmptyContainer)super.layers.get(0);
		}
		public tabHeaderContainer tabHeader()
		{
			return (tabHeaderContainer)super.layers.get(1);
		}
		public tabCentralContainer tabCentral()
		{
			return (tabCentralContainer)super.layers.get(2);
		}
		public tabPeripheralContainer tabPeripheral()
		{
			return (tabPeripheralContainer)super.layers.get(3);
		}
	}
	public static class recbr1RecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.generalmedical.vo.RangeOfMovementVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.generalmedical.vo.RangeOfMovementVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.generalmedical.vo.RangeOfMovementVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.generalmedical.vo.RangeOfMovementVo getValue()
		{
			return (ims.generalmedical.vo.RangeOfMovementVo)super.control.getValue();
		}
		public void setValue(ims.generalmedical.vo.RangeOfMovementVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdPeripheralRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPeripheralRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColTargetReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTargetReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTargetOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColTarget(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColTarget()
		{
			return (String)super.row.get(0);
		}
		public void setColTarget(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTargetTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColActionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColActionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColActionOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColAction(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColAction()
		{
			return (String)super.row.get(1);
		}
		public void setColAction(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColActionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColMovementReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColMovementReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColMovementOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColMovement(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColMovement()
		{
			return (String)super.row.get(2);
		}
		public void setColMovement(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColMovementTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColSORReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColSORReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColSOROpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColSOR(String value)
		{
			super.row.setTooltip(3, value);
		}
		public Integer getColSOR()
		{
			return (Integer)super.row.get(3);
		}
		public void setColSOR(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColSORTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColEORReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColEORReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColEOROpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColEOR(String value)
		{
			super.row.setTooltip(4, value);
		}
		public Integer getColEOR()
		{
			return (Integer)super.row.get(4);
		}
		public void setColEOR(Integer value)
		{
			super.row.set(4, value);
		}
		public void setCellColEORTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColLimitedReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColLimitedReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColLimitedOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColLimited(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColLimited()
		{
			return (String)super.row.get(5);
		}
		public void setColLimited(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColLimitedTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdPeripheralRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdPeripheralRow(super.row.getParent());
		}
		public grdPeripheralRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdPeripheralRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdPeripheralRowCollection collection;
	}
	public static class grdPeripheralRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPeripheralRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPeripheralRow get(int index)
		{
			return new grdPeripheralRow(super.collection.get(index));
		}
		public grdPeripheralRow newRow()
		{
			return new grdPeripheralRow(super.collection.newRow());
		}
		public grdPeripheralRow newRow(boolean autoSelect)
		{
			return new grdPeripheralRow(super.collection.newRow(autoSelect));
		}
		public grdPeripheralRow newRowAt(int index)
		{
			return new grdPeripheralRow(super.collection.newRowAt(index));
		}
		public grdPeripheralRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPeripheralRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPeripheralGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdPeripheralRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPeripheralRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdPeripheralRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPeripheralRow[] result = new GenForm.grdPeripheralRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPeripheralRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdPeripheralRow[] getAllRows(GenForm.grdPeripheralRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPeripheralRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdPeripheralRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdPeripheralRow[] result = new GenForm.grdPeripheralRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdPeripheralRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdPeripheralRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdPeripheralRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdPeripheralRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdPeripheralRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPeripheralRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPeripheralRowCollection getRows()
		{
			return new grdPeripheralRowCollection(super.grid.getRows());
		}
		public grdPeripheralRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPeripheralRow(row);
		}
		public void setColTargetHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTargetHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColMovementHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColMovementHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColSORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColSORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColEORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColEORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColLimitedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColLimitedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	public static class grdCentralRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCentralRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColTargetReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTargetReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTargetOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColTarget(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColTarget()
		{
			return (String)super.row.get(0);
		}
		public void setColTarget(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTargetTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColActionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColActionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColActionOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColAction(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColAction()
		{
			return (String)super.row.get(1);
		}
		public void setColAction(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColActionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolMovementReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolMovementReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolMovementOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolMovement(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolMovement()
		{
			return (String)super.row.get(2);
		}
		public void setcolMovement(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolMovementTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColRangeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColRangeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColRangeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColRange(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColRange()
		{
			return (String)super.row.get(3);
		}
		public void setColRange(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColRangeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColSORReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColSORReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColSOROpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColSOR(String value)
		{
			super.row.setTooltip(4, value);
		}
		public Integer getColSOR()
		{
			return (Integer)super.row.get(4);
		}
		public void setColSOR(Integer value)
		{
			super.row.set(4, value);
		}
		public void setCellColSORTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColEORReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColEORReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColEOROpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColEOR(String value)
		{
			super.row.setTooltip(5, value);
		}
		public Integer getColEOR()
		{
			return (Integer)super.row.get(5);
		}
		public void setColEOR(Integer value)
		{
			super.row.set(5, value);
		}
		public void setCellColEORTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColLimitedReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColLimitedReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColLimitedOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColLimited(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColLimited()
		{
			return (String)super.row.get(6);
		}
		public void setColLimited(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColLimitedTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdCentralRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdCentralRow(super.row.getParent());
		}
		public grdCentralRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdCentralRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdCentralRowCollection collection;
	}
	public static class grdCentralRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCentralRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCentralRow get(int index)
		{
			return new grdCentralRow(super.collection.get(index));
		}
		public grdCentralRow newRow()
		{
			return new grdCentralRow(super.collection.newRow());
		}
		public grdCentralRow newRow(boolean autoSelect)
		{
			return new grdCentralRow(super.collection.newRow(autoSelect));
		}
		public grdCentralRow newRowAt(int index)
		{
			return new grdCentralRow(super.collection.newRowAt(index));
		}
		public grdCentralRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCentralRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCentralGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdCentralRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdCentralRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdCentralRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdCentralRow[] result = new GenForm.grdCentralRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdCentralRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdCentralRow[] getAllRows(GenForm.grdCentralRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdCentralRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdCentralRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdCentralRow[] result = new GenForm.grdCentralRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdCentralRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdCentralRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdCentralRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdCentralRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdCentralRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCentralRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCentralRowCollection getRows()
		{
			return new grdCentralRowCollection(super.grid.getRows());
		}
		public grdCentralRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCentralRow(row);
		}
		public void setColTargetHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTargetHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColActionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColActionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolMovementHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolMovementHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColRangeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColRangeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColSORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColSORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColEORHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColEORHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColLimitedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColLimitedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedParentInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuRangeOfMovementPeripheral = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuRangeOfMovementPeripheralAddJointItem = factory.createMenuItem(startControlID.intValue() + 1, "New Joint", true, false, new Integer(102224), true, true);
		contextMenus.contextMenuRangeOfMovementPeripheral.add(contextMenus.contextMenuRangeOfMovementPeripheralAddJointItem);
		contextMenus.contextMenuRangeOfMovementPeripheralAddDetailItem = factory.createMenuItem(startControlID.intValue() + 2, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuRangeOfMovementPeripheral.add(contextMenus.contextMenuRangeOfMovementPeripheralAddDetailItem);
		contextMenus.contextMenuRangeOfMovementPeripheralEditItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuRangeOfMovementPeripheral.add(contextMenus.contextMenuRangeOfMovementPeripheralEditItem);
		contextMenus.contextMenuRangeOfMovementPeripheralREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuRangeOfMovementPeripheral.add(contextMenus.contextMenuRangeOfMovementPeripheralREMOVEItem);
		form.registerMenu(contextMenus.contextMenuRangeOfMovementPeripheral);
		contextMenus.contextMenuRangeOfMovementCentral = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuRangeOfMovementCentralADDJointItem = factory.createMenuItem(startControlID.intValue() + 5, "New Joint", true, false, new Integer(102224), true, true);
		contextMenus.contextMenuRangeOfMovementCentral.add(contextMenus.contextMenuRangeOfMovementCentralADDJointItem);
		contextMenus.contextMenuRangeOfMovementCentralADDdetailsItem = factory.createMenuItem(startControlID.intValue() + 6, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuRangeOfMovementCentral.add(contextMenus.contextMenuRangeOfMovementCentralADDdetailsItem);
		contextMenus.contextMenuRangeOfMovementCentralUpdateItem = factory.createMenuItem(startControlID.intValue() + 7, "EDIT", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuRangeOfMovementCentral.add(contextMenus.contextMenuRangeOfMovementCentralUpdateItem);
		contextMenus.contextMenuRangeOfMovementCentralREMOVEItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuRangeOfMovementCentral.add(contextMenus.contextMenuRangeOfMovementCentralREMOVEItem);
		form.registerMenu(contextMenus.contextMenuRangeOfMovementCentral);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 688, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 768, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbr1Temp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbr1Temp);
		recbr1RecordBrowser recbr1 = (recbr1RecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbr1RecordBrowser.class, m_recbr1Temp);
		super.addRecordBrowser(recbr1);

		// Grid Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 400, 352, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPeripheralTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuRangeOfMovementPeripheral, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdPeripheralTemp);
		grdPeripheralGrid grdPeripheral = (grdPeripheralGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPeripheralGrid.class, m_grdPeripheralTemp);
		grdPeripheral.addTreeColumn("Peripheral", 0, 110, false, true);
		grdPeripheral.addStringColumn("Action", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPeripheral.addStringColumn("Movement", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPeripheral.addIntColumn("SOR", 0, 0, 35, true, true, null, false, 0, true);
		grdPeripheral.addIntColumn("EOR", 0, 0, 35, true, true, null, false, 0, true);
		grdPeripheral.addStringColumn("Limited", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPeripheral);
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 424, 352, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdCentralTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuRangeOfMovementCentral, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdCentralTemp);
		grdCentralGrid grdCentral = (grdCentralGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCentralGrid.class, m_grdCentralTemp);
		grdCentral.addTreeColumn("Central", 0, 75, false, true);
		grdCentral.addStringColumn("Action", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCentral.addStringColumn("Movement", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCentral.addStringColumn("Range", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdCentral.addIntColumn("SOR", 0, 0, 35, true, true, null, false, 0, true);
		grdCentral.addIntColumn("EOR", 0, 0, 35, true, true, null, false, 0, true);
		grdCentral.addStringColumn("Limited", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdCentral);
	}


	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public recbr1RecordBrowser recbr1()
	{
		return (recbr1RecordBrowser)super.getRecordBrowser(0);
	}
	public grdPeripheralGrid grdPeripheral()
	{
		return (grdPeripheralGrid)super.getGrid(0);
	}
	public grdCentralGrid grdCentral()
	{
		return (grdCentralGrid)super.getGrid(1);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_JointTypeSelected = new ims.framework.ContextVariable("JointTypeSelected", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__JointTypeSelected_" + componentIdentifier + "");
			cxl_UpdatedChild = new ims.framework.ContextVariable("UpdatedChild", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier + "");
			cxl_SelectedMovement = new ims.framework.ContextVariable("SelectedMovement", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier + "");
			cxl_SelectedChildInstance = new ims.framework.ContextVariable("SelectedChildInstance", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedChildInstance_" + componentIdentifier + "");
			cxl_SelectedParentInstance = new ims.framework.ContextVariable("SelectedParentInstance", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedParentInstance_" + componentIdentifier + "");
			cxl_CurrentAction = new ims.framework.ContextVariable("CurrentAction", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__CurrentAction_" + componentIdentifier + "");
			cxl_GoldenInstanceSelected = new ims.framework.ContextVariable("GoldenInstanceSelected", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__GoldenInstanceSelected_" + componentIdentifier + "");
			cxl_GoldenInstanceExists = new ims.framework.ContextVariable("GoldenInstanceExists", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__GoldenInstanceExists_" + componentIdentifier + "");
			cxl_UpdatedChildType = new ims.framework.ContextVariable("UpdatedChildType", prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChildType_" + componentIdentifier + "");
		}
		
		public boolean getJointTypeSelectedIsNotNull()
		{
			return !cxl_JointTypeSelected.getValueIsNull(context);
		}
		public Integer getJointTypeSelected()
		{
			return (Integer)cxl_JointTypeSelected.getValue(context);
		}
		public void setJointTypeSelected(Integer value)
		{
			cxl_JointTypeSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_JointTypeSelected = null;
		public boolean getUpdatedChildIsNotNull()
		{
			return !cxl_UpdatedChild.getValueIsNull(context);
		}
		public ims.core.vo.MskJointMovementVo getUpdatedChild()
		{
			return (ims.core.vo.MskJointMovementVo)cxl_UpdatedChild.getValue(context);
		}
		public void setUpdatedChild(ims.core.vo.MskJointMovementVo value)
		{
			cxl_UpdatedChild.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChild = null;
		public boolean getSelectedMovementIsNotNull()
		{
			return !cxl_SelectedMovement.getValueIsNull(context);
		}
		public ims.core.vo.MskJointMovementVo getSelectedMovement()
		{
			return (ims.core.vo.MskJointMovementVo)cxl_SelectedMovement.getValue(context);
		}
		public void setSelectedMovement(ims.core.vo.MskJointMovementVo value)
		{
			cxl_SelectedMovement.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedMovement = null;
		public boolean getSelectedChildInstanceIsNotNull()
		{
			return !cxl_SelectedChildInstance.getValueIsNull(context);
		}
		public ims.generalmedical.vo.RangeOfMovementDetailVo getSelectedChildInstance()
		{
			return (ims.generalmedical.vo.RangeOfMovementDetailVo)cxl_SelectedChildInstance.getValue(context);
		}
		public void setSelectedChildInstance(ims.generalmedical.vo.RangeOfMovementDetailVo value)
		{
			cxl_SelectedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedChildInstance = null;
		public boolean getSelectedParentInstanceIsNotNull()
		{
			return !cxl_SelectedParentInstance.getValueIsNull(context);
		}
		public ims.generalmedical.vo.RangeOfMovementVo getSelectedParentInstance()
		{
			return (ims.generalmedical.vo.RangeOfMovementVo)cxl_SelectedParentInstance.getValue(context);
		}
		public void setSelectedParentInstance(ims.generalmedical.vo.RangeOfMovementVo value)
		{
			cxl_SelectedParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedParentInstance = null;
		public boolean getCurrentActionIsNotNull()
		{
			return !cxl_CurrentAction.getValueIsNull(context);
		}
		public Integer getCurrentAction()
		{
			return (Integer)cxl_CurrentAction.getValue(context);
		}
		public void setCurrentAction(Integer value)
		{
			cxl_CurrentAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentAction = null;
		public boolean getGoldenInstanceSelectedIsNotNull()
		{
			return !cxl_GoldenInstanceSelected.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceSelected()
		{
			return (Boolean)cxl_GoldenInstanceSelected.getValue(context);
		}
		public void setGoldenInstanceSelected(Boolean value)
		{
			cxl_GoldenInstanceSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceSelected = null;
		public boolean getGoldenInstanceExistsIsNotNull()
		{
			return !cxl_GoldenInstanceExists.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceExists()
		{
			return (Boolean)cxl_GoldenInstanceExists.getValue(context);
		}
		public void setGoldenInstanceExists(Boolean value)
		{
			cxl_GoldenInstanceExists.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceExists = null;
		public boolean getUpdatedChildTypeIsNotNull()
		{
			return !cxl_UpdatedChildType.getValueIsNull(context);
		}
		public Integer getUpdatedChildType()
		{
			return (Integer)cxl_UpdatedChildType.getValue(context);
		}
		public void setUpdatedChildType(Integer value)
		{
			cxl_UpdatedChildType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChildType = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class RangeOfMovementPeripheral implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddJoint = 1;
			public static final int AddDetail = 2;
			public static final int Edit = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllRangeOfMovementPeripheralMenuItems()
		{
			this.contextMenuRangeOfMovementPeripheralAddJointItem.setEnabled(false);
			this.contextMenuRangeOfMovementPeripheralAddDetailItem.setEnabled(false);
			this.contextMenuRangeOfMovementPeripheralEditItem.setEnabled(false);
			this.contextMenuRangeOfMovementPeripheralREMOVEItem.setEnabled(false);
		}
		public void hideAllRangeOfMovementPeripheralMenuItems()
		{
			this.contextMenuRangeOfMovementPeripheralAddJointItem.setVisible(false);
			this.contextMenuRangeOfMovementPeripheralAddDetailItem.setVisible(false);
			this.contextMenuRangeOfMovementPeripheralEditItem.setVisible(false);
			this.contextMenuRangeOfMovementPeripheralREMOVEItem.setVisible(false);
		}
		private Menu contextMenuRangeOfMovementPeripheral;
		public MenuItem getRangeOfMovementPeripheralAddJointItem()
		{
			return this.contextMenuRangeOfMovementPeripheralAddJointItem;
		}
		private MenuItem contextMenuRangeOfMovementPeripheralAddJointItem;
		public MenuItem getRangeOfMovementPeripheralAddDetailItem()
		{
			return this.contextMenuRangeOfMovementPeripheralAddDetailItem;
		}
		private MenuItem contextMenuRangeOfMovementPeripheralAddDetailItem;
		public MenuItem getRangeOfMovementPeripheralEditItem()
		{
			return this.contextMenuRangeOfMovementPeripheralEditItem;
		}
		private MenuItem contextMenuRangeOfMovementPeripheralEditItem;
		public MenuItem getRangeOfMovementPeripheralREMOVEItem()
		{
			return this.contextMenuRangeOfMovementPeripheralREMOVEItem;
		}
		private MenuItem contextMenuRangeOfMovementPeripheralREMOVEItem;
		public final class RangeOfMovementCentral implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDJoint = 5;
			public static final int ADDdetails = 6;
			public static final int Update = 7;
			public static final int REMOVE = 8;
		}
		public void disableAllRangeOfMovementCentralMenuItems()
		{
			this.contextMenuRangeOfMovementCentralADDJointItem.setEnabled(false);
			this.contextMenuRangeOfMovementCentralADDdetailsItem.setEnabled(false);
			this.contextMenuRangeOfMovementCentralUpdateItem.setEnabled(false);
			this.contextMenuRangeOfMovementCentralREMOVEItem.setEnabled(false);
		}
		public void hideAllRangeOfMovementCentralMenuItems()
		{
			this.contextMenuRangeOfMovementCentralADDJointItem.setVisible(false);
			this.contextMenuRangeOfMovementCentralADDdetailsItem.setVisible(false);
			this.contextMenuRangeOfMovementCentralUpdateItem.setVisible(false);
			this.contextMenuRangeOfMovementCentralREMOVEItem.setVisible(false);
		}
		private Menu contextMenuRangeOfMovementCentral;
		public MenuItem getRangeOfMovementCentralADDJointItem()
		{
			return this.contextMenuRangeOfMovementCentralADDJointItem;
		}
		private MenuItem contextMenuRangeOfMovementCentralADDJointItem;
		public MenuItem getRangeOfMovementCentralADDdetailsItem()
		{
			return this.contextMenuRangeOfMovementCentralADDdetailsItem;
		}
		private MenuItem contextMenuRangeOfMovementCentralADDdetailsItem;
		public MenuItem getRangeOfMovementCentralUpdateItem()
		{
			return this.contextMenuRangeOfMovementCentralUpdateItem;
		}
		private MenuItem contextMenuRangeOfMovementCentralUpdateItem;
		public MenuItem getRangeOfMovementCentralREMOVEItem()
		{
			return this.contextMenuRangeOfMovementCentralREMOVEItem;
		}
		private MenuItem contextMenuRangeOfMovementCentralREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[94];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-ID", "ID_MskJointMovement");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-MOVETYPE", "MoveType");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-MOVEFINDING", "MoveFinding");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-MOVSOR", "MovSOR");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-MOVEOR", "MovEOR");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-QUALITATIVERANGE", "QualitativeRange");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-LIMITED", "Limited");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1023100022-MOVEACTION", "MoveAction");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-ID", "ID_MskJointMovement");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-MOVETYPE", "MoveType");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-MOVEFINDING", "MoveFinding");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-MOVSOR", "MovSOR");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-MOVEOR", "MovEOR");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-QUALITATIVERANGE", "QualitativeRange");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-LIMITED", "Limited");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedMovement_" + componentIdentifier, "BO-1023100022-MOVEACTION", "MoveAction");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-ID", "ID_MSkExamJointBonesDetail");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-LATERALITY", "Laterality");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-ISJOINT", "IsJoint");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1031100003-ID", "ID_MskExamJointBones");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1031100003-CLINICALCONTACT", "ClinicalContact");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1031100003-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.RangeOfMovement.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1031100003-CARECONTEXT", "CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
