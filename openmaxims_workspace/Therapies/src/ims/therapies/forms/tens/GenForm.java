//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.tens;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrTENSLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabHeaderContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class qmbAuthoringCPComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.Hcp value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.Hcp value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.Hcp getValue()
					{
						return (ims.core.vo.Hcp)super.control.getValue();
					}
					public void setValue(ims.core.vo.Hcp value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
			
					// Date Time Controls
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 160, 48, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbAuthoringCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbAuthoringCPTemp);
					qmbAuthoringCPComboBox qmbAuthoringCP = (qmbAuthoringCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthoringCPComboBox.class, m_qmbAuthoringCPTemp);
					super.addComboBox(qmbAuthoringCP);
				}
	
				public DateTimeControl dtimAuthoring()
				{
					return (DateTimeControl)super.getControl(2);
				}
				public qmbAuthoringCPComboBox qmbAuthoringCP()
				{
					return (qmbAuthoringCPComboBox)super.getComboBox(0);
				}
			}
			public static class tabDetailsContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbModeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSMode value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSMode value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSMode value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSMode value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSMode value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSMode getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSMode)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSMode value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbUsageComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSDailyUsage value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSDailyUsage value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSDailyUsage value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSDailyUsage value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSDailyUsage value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSDailyUsage getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSDailyUsage)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSDailyUsage value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbElectrodesComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSElectrodes value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSElectrodes value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSElectrodes value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSElectrodes value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSElectrodes value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSElectrodes getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSElectrodes)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSElectrodes value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbSizeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSSize value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSSize value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSSize value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSSize value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSSize value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSSize getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSSize)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSSize value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbModelComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSModel value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSModel value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSModel value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSModel value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSModel value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSModel getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSModel)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSModel value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbAreaComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.spinalinjuries.vo.lookups.TENSArea value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSArea value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSArea value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.spinalinjuries.vo.lookups.TENSArea value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.spinalinjuries.vo.lookups.TENSArea value)
					{
						return super.control.removeRow(value);
					}
					public ims.spinalinjuries.vo.lookups.TENSArea getValue()
					{
						return (ims.spinalinjuries.vo.lookups.TENSArea)super.control.getValue();
					}
					public void setValue(ims.spinalinjuries.vo.lookups.TENSArea value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLateralityComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LateralityLRB getValue()
					{
						return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LateralityLRB value)
					{
						super.control.setValue(value);
					}
				}
			
				public static class ansProtocolAnswerBox extends AnswerBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void clear()
					{
						control.clear();
					}
					public java.util.ArrayList getValues()
					{
						return control.getValues();
					}
					public void addOption(ims.core.vo.lookups.YesNoUnknown option)
					{
						control.addOption(option);
					}
					public ims.core.vo.lookups.YesNoUnknown getValue()
					{
						return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNoUnknown value)
					{
						super.control.setValue(value);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 686, 56, 31, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "mins", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 686, 32, 21, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "ms", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 686, 8, 19, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Hz", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 438, 128, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Size:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 438, 104, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Electrodes:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 438, 8, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Pulse Rate:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 438, 32, 76, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Pulse Width:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 39, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Mode:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 8, 34, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Area:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Serial Number:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 43, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Model:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 438, 80, 75, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Daily Usage:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 438, 56, 58, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Protocol Followed:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 678, 160, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 606, 160, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 168, 80, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 168, 104, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					ComboBox m_cmbModeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbModeTemp);
					cmbModeComboBox cmbMode = (cmbModeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbModeComboBox.class, m_cmbModeTemp);
					super.addComboBox(cmbMode);
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 558, 80, 184, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					ComboBox m_cmbUsageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbUsageTemp);
					cmbUsageComboBox cmbUsage = (cmbUsageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUsageComboBox.class, m_cmbUsageTemp);
					super.addComboBox(cmbUsage);
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 558, 104, 184, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					ComboBox m_cmbElectrodesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbElectrodesTemp);
					cmbElectrodesComboBox cmbElectrodes = (cmbElectrodesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbElectrodesComboBox.class, m_cmbElectrodesTemp);
					super.addComboBox(cmbElectrodes);
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 558, 128, 184, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					ComboBox m_cmbSizeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbSizeTemp);
					cmbSizeComboBox cmbSize = (cmbSizeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSizeComboBox.class, m_cmbSizeTemp);
					super.addComboBox(cmbSize);
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 168, 56, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					ComboBox m_cmbModelTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbModelTemp);
					cmbModelComboBox cmbModel = (cmbModelComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbModelComboBox.class, m_cmbModelTemp);
					super.addComboBox(cmbModel);
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 168, 8, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					ComboBox m_cmbAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbAreaTemp);
					cmbAreaComboBox cmbArea = (cmbAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreaComboBox.class, m_cmbAreaTemp);
					super.addComboBox(cmbArea);
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 168, 32, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLateralityTemp);
					cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
					super.addComboBox(cmbLaterality);
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 558, 56, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, "Range must be between 0 and 300ms", null, Boolean.FALSE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 558, 32, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, "Range must be between 0 and 300ms", null, Boolean.FALSE, new Integer(9)}));
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 558, 8, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, "Range must be between 0 and 200Hz", null, Boolean.FALSE, new Integer(9)}));
			
					// AnswerBox Controls
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 166, 128, 24, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					AnswerBox tmpansProtocol = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
					super.addControl(tmpansProtocol);
					ansProtocolAnswerBox ansProtocol = (ansProtocolAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansProtocolAnswerBox.class, tmpansProtocol);
					super.addAnswerBox(ansProtocol);
				}
	
				public Button btnCancelDetails()
				{
					return (Button)super.getControl(15);
				}
				public Button btnOk()
				{
					return (Button)super.getControl(16);
				}
				public TextBox txtSerial()
				{
					return (TextBox)super.getControl(17);
				}
				public cmbModeComboBox cmbMode()
				{
					return (cmbModeComboBox)super.getComboBox(0);
				}
				public cmbUsageComboBox cmbUsage()
				{
					return (cmbUsageComboBox)super.getComboBox(1);
				}
				public cmbElectrodesComboBox cmbElectrodes()
				{
					return (cmbElectrodesComboBox)super.getComboBox(2);
				}
				public cmbSizeComboBox cmbSize()
				{
					return (cmbSizeComboBox)super.getComboBox(3);
				}
				public cmbModelComboBox cmbModel()
				{
					return (cmbModelComboBox)super.getComboBox(4);
				}
				public cmbAreaComboBox cmbArea()
				{
					return (cmbAreaComboBox)super.getComboBox(5);
				}
				public cmbLateralityComboBox cmbLaterality()
				{
					return (cmbLateralityComboBox)super.getComboBox(6);
				}
				public IntBox intDuration()
				{
					return (IntBox)super.getControl(25);
				}
				public IntBox intPulseWidth()
				{
					return (IntBox)super.getControl(26);
				}
				public IntBox intPulseRate()
				{
					return (IntBox)super.getControl(27);
				}
				public ansProtocolAnswerBox ansProtocol()
				{
					return (ansProtocolAnswerBox)super.getAnswerBox(0);
				}
			}
			public static class tabEmpty1Container extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
				}
	
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 784, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabHeader = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Transcutaneous Electrical Neural Stimulation - TENS", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabHeaderContainer m_tabHeaderContainer = (tabHeaderContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHeaderContainer.class, m_tabHeader, factory);
				super.addContainer(m_tabHeader, m_tabHeaderContainer);
				ims.framework.utils.SizeInfo m_tabHeaderDesignSize = new ims.framework.utils.SizeInfo(784, 224);
				ims.framework.utils.SizeInfo m_tabHeaderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper34.getWidth(), anchoringHelper34.getHeight());
				m_tabHeaderContainer.setContext(form, appForm, m_tabHeader, loader, contextMenus, startControlID, m_tabHeaderDesignSize, m_tabHeaderRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 784, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
				super.addContainer(m_tabDetails, m_tabDetailsContainer);
				ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(784, 224);
				ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper35.getWidth(), anchoringHelper35.getHeight());
				m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 784, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabEmpty1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Empty", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabEmpty1Container m_tabEmpty1Container = (tabEmpty1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEmpty1Container.class, m_tabEmpty1, factory);
				super.addContainer(m_tabEmpty1, m_tabEmpty1Container);
				ims.framework.utils.SizeInfo m_tabEmpty1DesignSize = new ims.framework.utils.SizeInfo(784, 224);
				ims.framework.utils.SizeInfo m_tabEmpty1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper36.getWidth(), anchoringHelper36.getHeight());
				m_tabEmpty1Container.setContext(form, appForm, m_tabEmpty1, loader, contextMenus, startControlID, m_tabEmpty1DesignSize, m_tabEmpty1RuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty1().setVisible(false);
			}
			public void settabHeaderEnabled(boolean value)
			{
				tabHeader().setEnabled(value);
			}
			public void settabDetailsEnabled(boolean value)
			{
				tabDetails().setEnabled(value);
			}
			public void settabEmpty1Enabled(boolean value)
			{
				tabEmpty1().setEnabled(value);
			}
			public void showtabHeader()
			{
				tabDetails().setVisible(false);
				tabEmpty1().setVisible(false);
				tabHeader().setVisible(true);
			}
			public void showtabDetails()
			{
				tabHeader().setVisible(false);
				tabEmpty1().setVisible(false);
				tabDetails().setVisible(true);
			}
			public void showtabEmpty1()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty1().setVisible(true);
			}
	
			public tabHeaderContainer tabHeader()
			{
				return (tabHeaderContainer)super.layers.get(0);
			}
			public tabDetailsContainer tabDetails()
			{
				return (tabDetailsContainer)super.layers.get(1);
			}
			public tabEmpty1Container tabEmpty1()
			{
				return (tabEmpty1Container)super.layers.get(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrTENSLayer m_lyrTENSLayer = (lyrTENSLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTENSLayer.class, this, factory);
			super.addLayer(m_lyrTENSLayer);
			m_lyrTENSLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrTENSLayer lyrTENS()
		{
			return (lyrTENSLayer)super.getLayer(0);
		}
	}
	public static class grdTENSRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTENSRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setcolAreaParentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolAreaParentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolAreaParentOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolAreaParent()
		{
			return (String)super.row.get(0);
		}
		public void setcolAreaParent(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolAreaParentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolLateralityChildReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolLateralityChildReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolLateralityChildOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolLateralityChild()
		{
			return (String)super.row.get(1);
		}
		public void setcolLateralityChild(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolLateralityChildTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolModelReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolModelReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolModelOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolModel()
		{
			return (String)super.row.get(2);
		}
		public void setcolModel(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolModelTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolModeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolModeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolModeOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolMode()
		{
			return (String)super.row.get(3);
		}
		public void setcolMode(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolModeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDurationReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDurationOpened()
		{
			super.row.showOpened(4);
		}
		public String getcolDuration()
		{
			return (String)super.row.get(4);
		}
		public void setcolDuration(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDurationTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdTENSRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdTENSRow(super.row.getParent());
		}
		public grdTENSRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdTENSRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdTENSRowCollection collection;
	}
	public static class grdTENSRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTENSRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTENSRow get(int index)
		{
			return new grdTENSRow(super.collection.get(index));
		}
		public grdTENSRow newRow()
		{
			return new grdTENSRow(super.collection.newRow());
		}
		public grdTENSRow newRow(boolean autoSelect)
		{
			return new grdTENSRow(super.collection.newRow(autoSelect));
		}
		public grdTENSRow newRowAt(int index)
		{
			return new grdTENSRow(super.collection.newRowAt(index));
		}
		public grdTENSRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTENSRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTENSGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdTENSRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdTENSRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdTENSRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdTENSRow[] result = new GenForm.grdTENSRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdTENSRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdTENSRow[] getAllRows(GenForm.grdTENSRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdTENSRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdTENSRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdTENSRow[] result = new GenForm.grdTENSRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdTENSRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdTENSRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdTENSRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdTENSRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdTENSRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTENSRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTENSRowCollection getRows()
		{
			return new grdTENSRowCollection(super.grid.getRows());
		}
		public grdTENSRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTENSRow(row);
		}
		public void setcolAreaParentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolAreaParentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolLateralityChildHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolLateralityChildHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolModelHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolModelHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolModeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolModeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}

	public static class ansWarningAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedParentInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Transcutaneous Electrical Neural Stimulation - TENS", new Integer(1), ""}));

		// Container Clasess
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 320, 816, 264, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 264);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Warning Given:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 756, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 816, 240, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdTENSTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdTENSTemp);
		grdTENSGrid grdTENS = (grdTENSGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTENSGrid.class, m_grdTENSTemp);
		grdTENS.addTreeColumn("Area", 0, 250, false, true);
		grdTENS.addStringColumn("Laterality", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTENS.addStringColumn("Model", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTENS.addStringColumn("Mode", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTENS.addStringColumn("Duration", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTENS);

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 128, 48, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansWarning = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.TRUE});
		super.addControl(tmpansWarning);
		ansWarningAnswerBox ansWarning = (ansWarningAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansWarningAnswerBox.class, tmpansWarning);
		super.addAnswerBox(ansWarning);
	}


	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Label lbl6()
	{
		return (Label)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public grdTENSGrid grdTENS()
	{
		return (grdTENSGrid)super.getGrid(0);
	}
	public ansWarningAnswerBox ansWarning()
	{
		return (ansWarningAnswerBox)super.getAnswerBox(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedParentInstance = new ims.framework.ContextVariable("SelectedParentInstance", prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedParentInstance_" + componentIdentifier + "");
			cxl_SelectedChildInstance = new ims.framework.ContextVariable("SelectedChildInstance", prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier + "");
			cxl_UpdatingParent = new ims.framework.ContextVariable("UpdatingParent", prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatingParent_" + componentIdentifier + "");
			cxl_UpdatedChild = new ims.framework.ContextVariable("UpdatedChild", prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier + "");
			cxl_GoldenInstanceSelected = new ims.framework.ContextVariable("GoldenInstanceSelected", prefix + "_lv_Therapies.TENS.__internal_x_context__GoldenInstanceSelected_" + componentIdentifier + "");
			cxl_setGoldenInstanceFound = new ims.framework.ContextVariable("setGoldenInstanceFound", prefix + "_lv_Therapies.TENS.__internal_x_context__setGoldenInstanceFound_" + componentIdentifier + "");
			cxl_GoldenInstanceFound = new ims.framework.ContextVariable("GoldenInstanceFound", prefix + "_lv_Therapies.TENS.__internal_x_context__GoldenInstanceFound_" + componentIdentifier + "");
			cxl_UpdatingParentInstance = new ims.framework.ContextVariable("UpdatingParentInstance", prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatingParentInstance_" + componentIdentifier + "");
		}
		
		public boolean getSelectedParentInstanceIsNotNull()
		{
			return !cxl_SelectedParentInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.ElectrotherapyTENSVo getSelectedParentInstance()
		{
			return (ims.therapies.vo.ElectrotherapyTENSVo)cxl_SelectedParentInstance.getValue(context);
		}
		public void setSelectedParentInstance(ims.therapies.vo.ElectrotherapyTENSVo value)
		{
			cxl_SelectedParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedParentInstance = null;
		public boolean getSelectedChildInstanceIsNotNull()
		{
			return !cxl_SelectedChildInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.ElectrotherapyTensTreatmentVo getSelectedChildInstance()
		{
			return (ims.therapies.vo.ElectrotherapyTensTreatmentVo)cxl_SelectedChildInstance.getValue(context);
		}
		public void setSelectedChildInstance(ims.therapies.vo.ElectrotherapyTensTreatmentVo value)
		{
			cxl_SelectedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedChildInstance = null;
		public boolean getUpdatingParentIsNotNull()
		{
			return !cxl_UpdatingParent.getValueIsNull(context);
		}
		public Boolean getUpdatingParent()
		{
			return (Boolean)cxl_UpdatingParent.getValue(context);
		}
		public void setUpdatingParent(Boolean value)
		{
			cxl_UpdatingParent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParent = null;
		public boolean getUpdatedChildIsNotNull()
		{
			return !cxl_UpdatedChild.getValueIsNull(context);
		}
		public ims.therapies.vo.ElectrotherapyTensTreatmentVo getUpdatedChild()
		{
			return (ims.therapies.vo.ElectrotherapyTensTreatmentVo)cxl_UpdatedChild.getValue(context);
		}
		public void setUpdatedChild(ims.therapies.vo.ElectrotherapyTensTreatmentVo value)
		{
			cxl_UpdatedChild.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChild = null;
		public boolean getGoldenInstanceSelectedIsNotNull()
		{
			return !cxl_GoldenInstanceSelected.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceSelected()
		{
			return (Boolean)cxl_GoldenInstanceSelected.getValue(context);
		}
		public void setGoldenInstanceSelected(Boolean value)
		{
			cxl_GoldenInstanceSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceSelected = null;
		public boolean getsetGoldenInstanceFoundIsNotNull()
		{
			return !cxl_setGoldenInstanceFound.getValueIsNull(context);
		}
		public Boolean getsetGoldenInstanceFound()
		{
			return (Boolean)cxl_setGoldenInstanceFound.getValue(context);
		}
		public void setsetGoldenInstanceFound(Boolean value)
		{
			cxl_setGoldenInstanceFound.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_setGoldenInstanceFound = null;
		public boolean getGoldenInstanceFoundIsNotNull()
		{
			return !cxl_GoldenInstanceFound.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceFound()
		{
			return (Boolean)cxl_GoldenInstanceFound.getValue(context);
		}
		public void setGoldenInstanceFound(Boolean value)
		{
			cxl_GoldenInstanceFound.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceFound = null;
		public boolean getUpdatingParentInstanceIsNotNull()
		{
			return !cxl_UpdatingParentInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.ElectrotherapyTENSVo getUpdatingParentInstance()
		{
			return (ims.therapies.vo.ElectrotherapyTENSVo)cxl_UpdatingParentInstance.getValue(context);
		}
		public void setUpdatingParentInstance(ims.therapies.vo.ElectrotherapyTENSVo value)
		{
			cxl_UpdatingParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParentInstance = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[103];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1044100006-ID", "ID_ElectrotherapyTENS");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1044100006-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1044100006-WARNINGGIVEN", "WarningGiven");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-ID", "ID_ElectrotherapyTensTreatment");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-AREA", "Area");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-LATERALITY", "Laterality");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-MODEL", "Model");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-SERIALNR", "SerialNr");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-PROTOCOLFOLLOWED", "ProtocolFollowed");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-MODE", "Mode");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-PULSERATE", "PulseRate");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-PULSEWIDTH", "PulseWidth");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-DURATION", "Duration");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-DAILYUSAGE", "DailyUsage");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-ELECTRODES", "Electrodes");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1019100017-SIZE", "Size");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-ID", "ID_ElectrotherapyTensTreatment");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-AREA", "Area");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-LATERALITY", "Laterality");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-MODEL", "Model");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-SERIALNR", "SerialNr");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-PROTOCOLFOLLOWED", "ProtocolFollowed");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-MODE", "Mode");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-PULSERATE", "PulseRate");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-PULSEWIDTH", "PulseWidth");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-DURATION", "Duration");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-DAILYUSAGE", "DailyUsage");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-ELECTRODES", "Electrodes");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1019100017-SIZE", "Size");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatingParentInstance_" + componentIdentifier, "BO-1044100006-ID", "ID_ElectrotherapyTENS");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatingParentInstance_" + componentIdentifier, "BO-1044100006-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.TENS.__internal_x_context__UpdatingParentInstance_" + componentIdentifier, "BO-1044100006-WARNINGGIVEN", "WarningGiven");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
