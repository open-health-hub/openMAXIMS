//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.wheelchairskills;

import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.WheelchairSkill;
import ims.spinalinjuries.vo.lookups.WheelchairSkillCollection;
import ims.therapies.vo.WheelchairSkillsShortVoCollection;
import ims.therapies.vo.WheelchairSkillsVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void initialize()
	{
		loadGrids();
	}
	private void open()
	{
		form.setMode(FormMode.VIEW);
		fillRecordBrowser();		
	}
	private void fillRecordBrowser()
	{
		WheelchairSkillsShortVoCollection voWheelChairSkillsColl = domain.listWheelchairSkillsByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		loadCareContext();
		boolean currentClinicalContactFound = false; 
		
		if(voWheelChairSkillsColl != null)
		{
			for(int i=0; i<voWheelChairSkillsColl.size(); i++)
			{
				ClinicalContactShortVo voClinicalContact = voWheelChairSkillsColl.get(i).getClinicalContact();
				
				if(voCurrentClinicalContact != null && voCurrentClinicalContact.getID_ClinicalContact().equals(voClinicalContact.getID_ClinicalContact()))
				{
					currentClinicalContactFound = true;
					loadClinicalContact(voClinicalContact,  Color.Green);	
				}
				else
				{
					loadClinicalContact(voClinicalContact, null);
				}
			}
		}
		
		if(!currentClinicalContactFound)
			loadClinicalContact(voCurrentClinicalContact, Color.Green);
		
		browseRecord();
	}
	private void loadClinicalContact(ClinicalContactShortVo voClinicalContact, Color active)
	{
		if(voClinicalContact != null)
		{
			form.recbrWheelSkills().newRow(voClinicalContact, "\t\t\t\tClinical Contact: " + voClinicalContact.getStartDateTime() + " - " + voClinicalContact.getSeenBy(), active);		
			if(active != null)
				form.recbrWheelSkills().setValue(voClinicalContact);
		}
	}
	private void loadCareContext()
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.recbrWheelSkills().newRow(voCareContext, voCareContext.getRecordBrowserText());
		}
		else
		{
			form.recbrWheelSkills().newRow(voCareContext, voCareContext.getRecordBrowserText(), Color.Green);
			form.recbrWheelSkills().setValue(voCareContext);
		}
		
	}
	private void browseRecord()
	{
		clearFields();
		
		if(form.recbrWheelSkills().getValue() != null)
		{
			if(form.recbrWheelSkills().getValue() instanceof ClinicalContactShortVo)
			{
				populateScreenFromData(domain.getWheelchairSkillsByClinicalContact((ClinicalContactRefVo) form.recbrWheelSkills().getValue()));
			}
		}
		isRecordEditable();
	}
	private void isRecordEditable()
	{
		if(form.recbrWheelSkills().getValue() != null)
		{
			if(form.recbrWheelSkills().getValue() instanceof ClinicalContactShortVo)
			{
				ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recbrWheelSkills().getValue();
				ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
				
				if(voCurrentClinicalContact != null && voClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
				{
					hideButtons(true);
					if(form.getLocalContext().getWheelchairSkillsVoIsNotNull())
					{					
						form.btnUpdate().setVisible(true);
						form.btnNew().setVisible(false);
					}
					else
					{
						form.btnUpdate().setVisible(false);
						form.btnNew().setVisible(true);
					}
				}
				else
					hideButtons(false);
			}
			
			if(form.recbrWheelSkills().getValue()instanceof CareContextShortVo)
				hideButtons(false);
		}
		
	}
	private void hideButtons(boolean visible)
	{
		form.btnNew().setVisible(visible);
		form.btnUpdate().setVisible(visible);
	}
	private void populateScreenFromData(WheelchairSkillsVo voWheelchairSkills) 
	{
		form.getLocalContext().setWheelchairSkillsVo(voWheelchairSkills);
		
		if(voWheelchairSkills != null)
		{
			if(voWheelchairSkills.getAuthoringCPIsNotNull())
			{
				form.qmbHCP().newRow(voWheelchairSkills.getAuthoringCP(), voWheelchairSkills.getAuthoringCP().toString());
				form.qmbHCP().setValue(voWheelchairSkills.getAuthoringCP());
			}
		
			form.dtimRecording().setValue(voWheelchairSkills.getAuthoringDateTime());
		
			boolean lkupFound;
			GenForm.grdSkillsRow rowSkills;
			if(voWheelchairSkills.getWheelchairSkillsIsNotNull())
				for (int i = 0; i< voWheelchairSkills.getWheelchairSkills().size(); i++)
				{
					WheelchairSkill lkupWheelchairSkill = voWheelchairSkills.getWheelchairSkills().get(i);
					
					lkupFound = false;
					for(int j=0; j<form.grdSkills().getRows().size(); j++){
						rowSkills = form.grdSkills().getRows().get(j);
						if(rowSkills.getValue().equals(lkupWheelchairSkill)){
							rowSkills.setColSelected(true);
							lkupFound = true;
						}
					}
					if(!lkupFound){				
						rowSkills = form.grdSkills().getRows().newRow();
						rowSkills.setColWheelchairSkills(lkupWheelchairSkill.getText());
						rowSkills.setValue(lkupWheelchairSkill);
						rowSkills.setColSelected(true);
					}
					
				}
			
			form.txtComments().setValue(voWheelchairSkills.getDetails());
		}
	}
	private void clearFields() 
	{
		GenForm.grdSkillsRow rowSkills;
		for(int j=0; j<form.grdSkills().getRows().size(); j++)
		{
			rowSkills = form.grdSkills().getRows().get(j);
			rowSkills.setColSelected(false);
		}
		form.dtimRecording().setValue(null);
		form.qmbHCP().clear();
		form.txtComments().setValue("");		
	}
	private void loadGrids() 
	{
		WheelchairSkillCollection voCollWheelchairSkills = LookupHelper.getWheelchairSkill(domain.getLookupService());
		GenForm.grdSkillsRow rowSkills = null;
		form.grdSkills().getRows().clear();
		for(int i=0; i<voCollWheelchairSkills.size();i++)
		{
			rowSkills = form.grdSkills().getRows().newRow();
		
			rowSkills.setColWheelchairSkills(voCollWheelchairSkills.get(i).getText());
			rowSkills.setValue(voCollWheelchairSkills.get(i));
		}
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setDefaultValues();
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(true);
	}
	private void setDefaultValues() 
	{
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser!=null)
		{
			form.qmbHCP().newRow(hcpUser, hcpUser.toString());
			form.qmbHCP().setValue(hcpUser);
		}
		form.dtimRecording().setValue(new DateTime());		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();	
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WheelchairSkillsVo voWheelchairSkills = form.getLocalContext().getWheelchairSkillsVo();
		if (voWheelchairSkills == null)
			voWheelchairSkills = new WheelchairSkillsVo();
		
		voWheelchairSkills = populateDataFromScreem(voWheelchairSkills);
		
		if(voWheelchairSkills==null)
			return;
		
		if (mandatoryItemToSelect(voWheelchairSkills))
		{
			engine.showMessage("Please select a Wheelchair Skill or enter a Comment.");
			return;
		}
				
		String[] messages = voWheelchairSkills.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return;
		}
	
		//save and update local context
		try 
		{
			form.getLocalContext().setWheelchairSkillsVo(domain.saveWheelchairSkills(voWheelchairSkills));
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		open(); 
	}
	private boolean mandatoryItemToSelect(WheelchairSkillsVo voWheelchairSkills) 
	{
		boolean bMandItemRequired = false;
		if (voWheelchairSkills.getWheelchairSkillsIsNotNull())
		{
			if (voWheelchairSkills.getWheelchairSkills().size() == 0)
				bMandItemRequired = true;
		}
		else if (voWheelchairSkills.getDetails() == null)
			bMandItemRequired = true;
		else
			bMandItemRequired = false;
		
		return bMandItemRequired;
	}
	private WheelchairSkillsVo populateDataFromScreem(WheelchairSkillsVo voWheelchairSkills) 
	{
		if(voWheelchairSkills.getClinicalContact()==null)
			voWheelchairSkills.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voWheelchairSkills.setAuthoringCP(form.qmbHCP().getValue());
		DateTime dateTime = form.dtimRecording().getValue();
		if(dateTime!=null)
		{
			if(form.dtimRecording().getValue().getDate()==null)
			{
				engine.showMessage("Please enter Date.");
				return null;
			}
			if(form.dtimRecording().getValue().getTime()==null)
			{
				engine.showMessage("Please enter Time.");
				return null;
			}
		}
		voWheelchairSkills.setAuthoringDateTime(form.dtimRecording().getValue());
		
		WheelchairSkillCollection collWheelchairSkill = new WheelchairSkillCollection();
		GenForm.grdSkillsRow rowSkills = null;
		for (int i = 0; i< form.grdSkills().getRows().size(); i++)
		{
			rowSkills = form.grdSkills().getRows().get(i);
			if(rowSkills.getColSelected()){
				WheelchairSkill lkupWheelchairSkill = rowSkills.getValue();	
				collWheelchairSkill.add(lkupWheelchairSkill);
			}
		}
		if(collWheelchairSkill.size()==0)
			collWheelchairSkill=null;
		voWheelchairSkills.setWheelchairSkills(collWheelchairSkill);
		
		voWheelchairSkills.setDetails(form.txtComments().getValue());
		
		return voWheelchairSkills;
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(false);
	}
	private void enableAuthoringControls(boolean enable)
	{
		form.qmbHCP().setEnabled(enable);
		form.dtimRecording().setEnabled(enable);
	}
	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbHCP().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
				form.qmbHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			if (voHCPColl.size() == 1)
				form.qmbHCP().setValue(voHCPColl.get(0));
			else if (voHCPColl.size() > 1)
				form.qmbHCP().showOpened();		
		}
		
	}
	protected void onRecbrWheelSkillsValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
}
