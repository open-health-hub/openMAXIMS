//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.pneumatic;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.therapies.domain.Pneumatic.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.therapies.domain.Pneumatic domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void onansWarningValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ansWarning().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansWarningLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansWarningLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ansWarning().addOption(instance);
		}
	}
	protected final void bindansWarningLookup()
	{
		this.form.ansWarning().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ansWarning().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansWarningLookupValue()
	{
		this.form.ansWarning().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbAreaValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticArea existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticArea)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAreaLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.PneumaticArea)
		{
			ims.spinalinjuries.vo.lookups.PneumaticArea instance = (ims.spinalinjuries.vo.lookups.PneumaticArea)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAreaLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticArea existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticArea)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAreaLookup()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().clear();
		ims.spinalinjuries.vo.lookups.PneumaticAreaCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticArea(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAreaLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.PneumaticArea instance = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticAreaInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().setValue(instance);
	}
	protected final void defaultcmbAreaLookupValue()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().setValue((ims.spinalinjuries.vo.lookups.PneumaticArea)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.PneumaticArea.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.PneumaticArea.TYPE_ID));
	}
	protected final void oncmbSplintsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticSplints existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticSplints)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSplintsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.PneumaticSplints)
		{
			ims.spinalinjuries.vo.lookups.PneumaticSplints instance = (ims.spinalinjuries.vo.lookups.PneumaticSplints)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSplintsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticSplints existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticSplints)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSplintsLookup()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().clear();
		ims.spinalinjuries.vo.lookups.PneumaticSplintsCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticSplints(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSplintsLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.PneumaticSplints instance = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticSplintsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().setValue(instance);
	}
	protected final void defaultcmbSplintsLookupValue()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().setValue((ims.spinalinjuries.vo.lookups.PneumaticSplints)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.PneumaticSplints.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.PneumaticSplints.TYPE_ID));
	}
	protected final void oncmbCycleValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticCycle existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticCycle)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCycleLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.PneumaticCycle)
		{
			ims.spinalinjuries.vo.lookups.PneumaticCycle instance = (ims.spinalinjuries.vo.lookups.PneumaticCycle)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCycleLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticCycle existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticCycle)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCycleLookup()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().clear();
		ims.spinalinjuries.vo.lookups.PneumaticCycleCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticCycle(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCycleLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.PneumaticCycle instance = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticCycleInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().setValue(instance);
	}
	protected final void defaultcmbCycleLookupValue()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().setValue((ims.spinalinjuries.vo.lookups.PneumaticCycle)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.PneumaticCycle.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.PneumaticCycle.TYPE_ID));
	}
	protected final void oncmbLateralityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLateralityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LateralityLRB)
		{
			ims.core.vo.lookups.LateralityLRB instance = (ims.core.vo.lookups.LateralityLRB)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLateralityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LateralityLRB existingInstance = (ims.core.vo.lookups.LateralityLRB)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLateralityLookup()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().clear();
		ims.core.vo.lookups.LateralityLRBCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLateralityLRB(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLateralityLookupValue(int id)
	{
		ims.core.vo.lookups.LateralityLRB instance = ims.core.vo.lookups.LookupHelper.getLateralityLRBInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().setValue(instance);
	}
	protected final void defaultcmbLateralityLookupValue()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().setValue((ims.core.vo.lookups.LateralityLRB)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LateralityLRB.class, engine.getFormName().getID(), ims.core.vo.lookups.LateralityLRB.TYPE_ID));
	}
	protected final void oncmbStartingPositionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticStartingPos existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticStartingPos)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStartingPositionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.PneumaticStartingPos)
		{
			ims.spinalinjuries.vo.lookups.PneumaticStartingPos instance = (ims.spinalinjuries.vo.lookups.PneumaticStartingPos)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStartingPositionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.PneumaticStartingPos existingInstance = (ims.spinalinjuries.vo.lookups.PneumaticStartingPos)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStartingPositionLookup()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().clear();
		ims.spinalinjuries.vo.lookups.PneumaticStartingPosCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticStartingPos(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStartingPositionLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.PneumaticStartingPos instance = ims.spinalinjuries.vo.lookups.LookupHelper.getPneumaticStartingPosInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().setValue(instance);
	}
	protected final void defaultcmbStartingPositionLookupValue()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().setValue((ims.spinalinjuries.vo.lookups.PneumaticStartingPos)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.PneumaticStartingPos.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.PneumaticStartingPos.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intRestTime().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intInflation().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMaxPressure().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMinPressure().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intPressure().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intDuration().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().setValue(null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbMachineUsed().setValue(null);
	}
	protected void populateScreenFromData(ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intRestTime().setValue(value.getRestTimeIsNotNull() ? value.getRestTime() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intInflation().setValue(value.getInflationIsNotNull() ? value.getInflation() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMaxPressure().setValue(value.getMaxPressureIsNotNull() ? value.getMaxPressure() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMinPressure().setValue(value.getMinPressureIsNotNull() ? value.getMinPressure() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intPressure().setValue(value.getPressureIsNotNull() ? value.getPressure() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().intDuration().setValue(value.getDurationIsNotNull() ? value.getDuration() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().setValue(value.getAreaIsNotNull() ? value.getArea() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().setValue(value.getSplintsIsNotNull() ? value.getSplints() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().setValue(value.getCycleIsNotNull() ? value.getCycle() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().setValue(value.getLateralityIsNotNull() ? value.getLaterality() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().setValue(value.getStartingPositionIsNotNull() ? value.getStartingPosition() : null);
		this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbMachineUsed().setValue(value.getMachineUsedIsNotNull() ? value.getMachineUsed() : null);
	}
	protected ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo populateDataFromScreen(ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo value)
	{
		if(value == null)
			value = new ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo();

		value.setRestTime(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intRestTime().getValue());
		value.setInflation(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intInflation().getValue());
		value.setMaxPressure(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMaxPressure().getValue());
		value.setMinPressure(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intMinPressure().getValue());
		value.setPressure(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intPressure().getValue());
		value.setDuration(this.form.ctnPneumatic().lyrPneumatic().tabDetails().intDuration().getValue());
		value.setArea(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbArea().getValue());
		value.setSplints(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbSplints().getValue());
		value.setCycle(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbCycle().getValue());
		value.setLaterality(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbLaterality().getValue());
		value.setStartingPosition(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbStartingPosition().getValue());
		value.setMachineUsed(this.form.ctnPneumatic().lyrPneumatic().tabDetails().cmbMachineUsed().getValue());

		return value;
	}
	protected ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.therapies.vo.ElectrotherapyPneumaticTreatmentVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.therapies.domain.Pneumatic domain;
}
