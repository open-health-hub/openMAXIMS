//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.39 build 2173.22508)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.homevisitrooms;

import ims.core.vo.ClinicalContactShortVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.therapies.forms.homevisitrooms.GenForm.gridRoomsRow;
import ims.therapies.vo.HomeDetailsVo;
import ims.therapies.vo.HomeVisitVo;
import ims.therapies.vo.RoomDetailsVo;
import ims.therapies.vo.RoomDetailsVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		form.getLocalContext().setRoomDetail(null);//	WDEV-13649
	}

	private void open()
	{
		clear();
		HomeVisitVo voHomeVisit = domain.getHomeVisit(form.getGlobalContext().Therapies.getHomeVisit());
		populateScreenFromData(voHomeVisit);
		resetUpdatedChild();
		if (voHomeVisit== null){
			engine.showMessage("Active Home Visit Access record is required to use this screen. ");
			form.bNew().setVisible(false);
		}
		else
			showButtonsForRecord();
		form.setMode(FormMode.VIEW);//WDEV-13649
	}

	private void resetUpdatedChild()
	{
		if (form.getLocalContext().getRoomDetailIsNotNull())
		{
			populateChildInstanceControls(form.getLocalContext().getRoomDetail());
			form.gridRooms().setValue(form.getLocalContext().getRoomDetail());
		}
	}

	private void showButtonsForRecord()
	{
		if (isRecordCurrent())
			form.bNew().setVisible(true);
		else
			form.bNew().setVisible(false);
	}

	private void populateScreenFromData(HomeVisitVo voHomeVisit)
	{
		if (voHomeVisit == null)
			return;

		if (voHomeVisit.getAuthoringInformationIsNotNull())
			form.customControlAuthoringInfo().setValue(voHomeVisit.getAuthoringInformation());

		if (voHomeVisit.getHouseDetailsIsNotNull() && voHomeVisit.getHouseDetails().getAddressIsNotNull())
			form.txtAddress().setValue(voHomeVisit.getHouseDetails().getAddress());

		populateChildNodes(domain.listRooms(voHomeVisit));//	WDEV-13649

		form.getLocalContext().setHomeVisitVo(voHomeVisit);
	}

	private void populateChildNodes(RoomDetailsVoCollection collRoomDetails)
	{
		if(collRoomDetails == null)//	WDEV-13649
			return;
		
		for (int i = 0; i < collRoomDetails.size(); i++)
		{
			if(collRoomDetails.get(i) == null)//	WDEV-13649
				continue;
			
			GenForm.gridRoomsRow row = form.gridRooms().getRows().newRow();
			populateChildNode(row, collRoomDetails.get(i));
			
			if(form.getLocalContext().getRoomDetail() != null && collRoomDetails.get(i).getID_RoomDetails().equals(form.getLocalContext().getRoomDetail().getID_RoomDetails()))//	WDEV-13649
			{
				form.getLocalContext().setRoomDetail(collRoomDetails.get(i));
			}
		}
	}

	private void clear()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.txtAddress().setValue(null);
		form.gridRooms().getRows().clear();

		clearInstanceControls();
	}

	private void clearInstanceControls()
	{
		form.ctnDetails().comboBoxLocation().setValue(null);
		form.ctnDetails().comboBoxType().setValue(null);
		form.ctnDetails().textBoxAccess().setValue(null);
		form.ctnDetails().intDoorWidth().setValue(null);
		form.ctnDetails().cmbUnit().setValue(null);
		form.ctnDetails().textBoxDetails().setValue(null);
	}

	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setRoomDetail(null);
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);
		form.gridRooms().setValue(null);
		clearInstanceControls();
	}

	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save()
	{
		// if we are not updating
		if (form.getLocalContext().getRoomDetail() == null)
		{
			if (childNotAdded())
			{
				if (!processChildNotAdded())
					return false;
			}
		}

		HomeVisitVo voHomeVisitVo = populateInstanceData(form.getLocalContext().getHomeVisitVo());

		String[] messages = voHomeVisitVo.validate();
		if (messages != null)
		{
			engine.showErrors("Validation Errors", messages);
			return false;
		}

		if (!widthAndUnitEntered(voHomeVisitVo))
		{
			engine.showErrors(new String[]{"Please enter a Door Width and Unit together"});
			return false;
		}

		try
		{
			form.getLocalContext().setHomeVisitVo(domain.saveHomeVisitAccess(voHomeVisitVo));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A meeting with the same criteria already exists.   " + e.getMessage());
			open();
			return false;
		}
		form.getGlobalContext().Therapies.setHomeVisit(form.getLocalContext().getHomeVisitVo());
		return true;
	}

	private boolean childNotAdded()
	{
		RoomDetailsVo voRoomDetails = new RoomDetailsVo();
		voRoomDetails = populateChildInstanceData(voRoomDetails);
		return voRoomDetails.countValueObjectFields() > 0;
	}

	// this method will call a method which will in turn validate the child to
	// be added
	private boolean processChildNotAdded()
	{
		if (form.getLocalContext().getRoomDetail() == null)
		{
			if (addOrUpdateChild())
				return true;
		}
		return false;
	}

	private HomeVisitVo populateInstanceData(HomeVisitVo voHomeVisitVo)
	{
		if (voHomeVisitVo == null)
			voHomeVisitVo = new HomeVisitVo();

		populateEnvironmentInstanceData(voHomeVisitVo);

		if (form.getLocalContext().getRoomDetail() == null)
		{
			populateChildCollectionFromGrid(voHomeVisitVo);
		}
		else
		// Update child instance.
		{
			RoomDetailsVo voRoomDetail = form.getLocalContext().getRoomDetail();
			populateChildInstanceData(voRoomDetail);
			form.getLocalContext().setRoomDetail(voRoomDetail);

			for (int i = 0; i < voHomeVisitVo.getRooms().size(); i++)
			{
				if (voHomeVisitVo.getRooms().get(i).getID_RoomDetails().equals(form.getLocalContext().getRoomDetail().getID_RoomDetails()))
				{
					voHomeVisitVo.getRooms().set(i, form.getLocalContext().getRoomDetail());
				}
			}
		}
		return voHomeVisitVo;
	}

	private void populateChildCollectionFromGrid(HomeVisitVo voHomeVisit)
	{
		if (voHomeVisit.getRooms() == null)
			voHomeVisit.setRooms(new RoomDetailsVoCollection());

		if (form.gridRooms().getRows().size() > 0)
			voHomeVisit.getRooms().clear();

		for (int i = 0; i < form.gridRooms().getRows().size(); i++)
		{
			voHomeVisit.getRooms().add(form.gridRooms().getRows().get(i).getValue());
		}
	}

	private void populateEnvironmentInstanceData(HomeVisitVo voHomeVisit)
	{
		voHomeVisit.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		HomeDetailsVo voHomeDetails = voHomeVisit.getHouseDetails();
		if (voHomeVisit.getHouseDetails() == null)
			voHomeDetails = new HomeDetailsVo();

		voHomeDetails.setAddress(form.txtAddress().getValue());
		voHomeVisit.setHouseDetails(voHomeDetails);

	}

	protected void onBCancelClick() throws PresentationLogicException
	{
		open();
	}

	private boolean addOrUpdateChild()
	{
		RoomDetailsVo voRoomDetails = form.getLocalContext().getRoomDetail();

		if (voRoomDetails == null)
			voRoomDetails = new RoomDetailsVo();

		populateChildInstanceData(voRoomDetails);
		if (widthAndUnitEntered(null))
		{
			if (form.getLocalContext().getRoomDetail() != null)
			{
				promoteUpdatedChild(voRoomDetails);
				newChildInstance();
				updateControlsState();
			}
			else
			{
				if (newChildNode(voRoomDetails))
					return true;
			}
		}
		else
			engine.showErrors(new String[]{"Please enter a Door Width and Unit together"});

		return false;
	}

	private boolean newChildNode(RoomDetailsVo voRoomDetails)
	{
		if (form.getLocalContext().getRoomDetail() != null)
			return false;

		if (voRoomDetails.countFieldsWithValue() >= 1)
		{
			String strErrors[] = voRoomDetails.validate();

			if (strErrors != null && strErrors.length > 0)
			{
				engine.showErrors(strErrors);
				return false;
			}

			promoteChild(voRoomDetails);
			clearInstanceControls();
		}

		return true;
	}

	private boolean promoteChild(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return false;

		GenForm.gridRoomsRow row = form.gridRooms().getRows().newRow();
		populateChildNode(row, voRoomDetails);

		return true;
	}

	private void populateChildNode(gridRoomsRow row, RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;

		row.setColLocation(voRoomDetails.getLocationIsNotNull() ? voRoomDetails.getLocation().getText() : null);//WDEV-13649
		
		row.setColType(voRoomDetails.getHomeVisitRoomTypeIsNotNull() ? voRoomDetails.getHomeVisitRoomType().getText() : null);//WDEV-13649
		
		row.setColDoorWidth(voRoomDetails.getDoorWidthIsNotNull() ? voRoomDetails.getDoorWidth().toString() : null);//WDEV-13649
		
		row.setColUnit(voRoomDetails.getUnitOfMeasureIsNotNull() ? voRoomDetails.getUnitOfMeasure().getText() : null);//WDEV-13649

		row.setColAccess(voRoomDetails.getAccess());
		row.setColDetails(voRoomDetails.getRoomDetails());
		row.setTooltipForColDetails(voRoomDetails.getRoomDetails());
		row.setValue(voRoomDetails);

		if (voRoomDetails.getID_RoomDetails() == null)
			row.setTextColor(Color.Red);

	}

	private void promoteUpdatedChild(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;
		GenForm.gridRoomsRow row = form.gridRooms().getSelectedRow();
		populateChildNode(row, voRoomDetails);
	}

	private RoomDetailsVo populateChildInstanceData(RoomDetailsVo voRoomDetails)
	{
		voRoomDetails.setLocation(form.ctnDetails().comboBoxLocation().getValue());
		voRoomDetails.setHomeVisitRoomType(form.ctnDetails().comboBoxType().getValue());
		voRoomDetails.setAccess(form.ctnDetails().textBoxAccess().getValue());
		voRoomDetails.setDoorWidth(form.ctnDetails().intDoorWidth().getValue());
		voRoomDetails.setUnitOfMeasure(form.ctnDetails().cmbUnit().getValue());
		voRoomDetails.setRoomDetails(form.ctnDetails().textBoxDetails().getValue());
		return voRoomDetails;
	}

	protected void onGridRoomsSelectionChanged() throws PresentationLogicException
	{
		getSelectedInstance();
	}

	private void getSelectedInstance()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateContextMenusState();
			return;
		}

		form.getLocalContext().setRoomDetail(form.gridRooms().getValue());
		populateChildInstanceControls(form.getLocalContext().getRoomDetail());

		updateControlsState();
	}

	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.EDIT))
			setAddApplyCaption();

		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.gridRooms().getValue() instanceof RoomDetailsVo);
		}
		
		enableDetailsButtons();

		updateContextMenusState();
	}

	private void enableDetailsButtons()
	{
		boolean boolVisible = (form.getMode().equals(FormMode.EDIT) && (form.getLocalContext().getRoomDetail() == null || form.getLocalContext().getRoomDetail() != null && form.getLocalContext().getRoomDetail().getID_RoomDetails() == null));

		form.ctnDetails().btnOK().setVisible(boolVisible);
		form.ctnDetails().btnCancelRoom().setVisible(boolVisible);
	}

	private void setAddApplyCaption()
	{
		form.ctnDetails().btnOK().setText("Add");

		if (form.getLocalContext().getRoomDetail() != null && form.getLocalContext().getRoomDetail().getID_RoomDetails() == null)
			form.ctnDetails().btnOK().setText("Apply");
	}

	private void populateChildInstanceControls(RoomDetailsVo voRoomDetails)
	{
		if (voRoomDetails == null)
			return;

		form.ctnDetails().comboBoxLocation().setValue(voRoomDetails.getLocation());
		form.ctnDetails().comboBoxType().setValue(voRoomDetails.getHomeVisitRoomType());
		form.ctnDetails().textBoxAccess().setValue(voRoomDetails.getAccess());
		form.ctnDetails().intDoorWidth().setValue(voRoomDetails.getDoorWidth());
		form.ctnDetails().cmbUnit().setValue(voRoomDetails.getUnitOfMeasure());
		form.ctnDetails().textBoxDetails().setValue(voRoomDetails.getRoomDetails());
	}

	private void updateContextMenusState()
	{
		if (!isRecordCurrent())
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
			return;
		}
		form.getContextMenus().getGenericGridAddItem().setText("New Home Visit Room Detail");
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.VIEW));

		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Home Visit Room Detail");
		if ((form.getMode().equals(FormMode.VIEW) && form.gridRooms().getSelectedRowIndex() >= 0))
			form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
		else
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);

		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Home Visit Room Detail");
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.gridRooms().getValue() != null && (form.gridRooms().getValue()).getID_RoomDetails() == null);

	}

	private boolean isRecordCurrent()
	{
		ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		HomeVisitVo voHomeVisit = form.getLocalContext().getHomeVisitVo();

		if(voHomeVisit==null)
			return false;
		
		if ((voHomeVisit.getClinicalContactIsNotNull() && voCurrentClinicalContact != null 
				&& voCurrentClinicalContact.getID_ClinicalContactIsNotNull() && voCurrentClinicalContact.getID_ClinicalContact().equals(voHomeVisit.getClinicalContact().getID_ClinicalContact()))
				|| (voHomeVisit.getClinicalContact() == null && voCurrentClinicalContact == null))
		{
			return true;
		}
		return false;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				newInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
				updateInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
				form.gridRooms().removeSelectedRow();
				//wdev-13805
				updateControlsState();
			break;
		}
	}

	private void newInstance()
	{
		newChildInstance();
		form.setMode(FormMode.EDIT);
	}

	private void newChildInstance()
	{
		clearInstanceControls();
		form.getLocalContext().setRoomDetail(null);
	}

	private void updateInstance()
	{
		// get selected row and disable all the others
		gridRoomsRow row = form.gridRooms().getSelectedRow();
		for (int i = 0; i < form.gridRooms().getRows().size(); i++)
			form.gridRooms().getRows().get(i).setSelectable(false);

		row.setSelectable(true);

		RoomDetailsVo voCachedChild = form.gridRooms().getValue();
		if (voCachedChild.getID_RoomDetails() == null)
		{
			populateChildInstanceControls(voCachedChild);
		}
		form.getLocalContext().setRoomDetail(voCachedChild);
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onBtnOKClick() throws PresentationLogicException
	{
		if (form.ctnDetails().comboBoxLocation().getValue() == null)
			engine.showMessage("Location is mandatory.");
		else
			addOrUpdateChild();
	}

	// if one value is entered then both values need to be entered
	private boolean widthAndUnitEntered(HomeVisitVo voHomeVisit)
	{
		// for add
		if (voHomeVisit == null)
		{
			if (form.ctnDetails().intDoorWidth().getValue() != null)
			{
				if (form.ctnDetails().cmbUnit().getValue() != null)
					return true;
				else
					return false;
			}
			else
			{
				if (form.ctnDetails().cmbUnit().getValue() != null)
					return false;
			}
		}
		// for save
		else
		{
			for (int i = 0; i < voHomeVisit.getRooms().size(); i++)
			{
				RoomDetailsVo room = voHomeVisit.getRooms().get(i);
				if (room.getDoorWidthIsNotNull())
				{
					if (room.getUnitOfMeasureIsNotNull())
						return true;
					else
						return false;
				}
				else
				{
					if (room.getUnitOfMeasureIsNotNull())
						return false;
				}
			}
		}
		return true;
	}

	protected void onBtnCancelRoomClick() throws PresentationLogicException
	{
		clearInstanceControls();

	}

	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();

	}
}
