//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.39 build 2173.29356)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.environmentalvisitsummary;

import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.therapies.vo.EnvironmentalVisitVo;
import ims.therapies.vo.HomeDetailsVo;
import ims.therapies.vo.VisitSummaryVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	private void open() 
	{
		clear();
		form.setMode(FormMode.VIEW);
		
		form.getLocalContext().setvoEnvironmentalVisit(domain.getEnvironmentalVisit(form.getGlobalContext().Therapies.getEnvironmentalVisit()));

		if(form.getLocalContext().getvoEnvironmentalVisitIsNotNull())
			form.getLocalContext().setVisitSummaryVo(form.getLocalContext().getvoEnvironmentalVisit().getVisitSummary());
		
		populateScreenFromData(form.getLocalContext().getvoEnvironmentalVisit());
			
		showButtons();
	}

	private void showButtons()
	{
		if(form.getLocalContext().getvoEnvironmentalVisitIsNotNull() && form.getLocalContext().getvoEnvironmentalVisit().getClinicalContactIsNotNull() && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()
				&& form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact().equals(form.getLocalContext().getvoEnvironmentalVisit().getClinicalContact().getID_ClinicalContact())
				|| (form.getLocalContext().getvoEnvironmentalVisitIsNotNull() && form.getLocalContext().getvoEnvironmentalVisit().getClinicalContact()== null && form.getGlobalContext().Core.getCurrentClinicalContact() == null))  //wdev-13567
			displayButtonsForRecord();
		else
			displayButtons(false, false);
	}
	private void displayButtonsForRecord()
	{
		if(form.getLocalContext().getvoEnvironmentalVisitIsNotNull() && 
				form.getLocalContext().getvoEnvironmentalVisit().getVisitSummaryIsNotNull())
			displayButtons(false, true);
		else
			displayButtons(true, false);
	}
	private void displayButtons(boolean newVisible, boolean updateVisible)
	{
		form.btnNew().setVisible(newVisible);
		form.btnUpdate().setVisible(updateVisible);
	}
	private void populateScreenFromData(EnvironmentalVisitVo voEnvironmentalVisit) 
	{
		if(voEnvironmentalVisit == null) return;
		
		form.qmbAuthoringHCP().clear();
		if (voEnvironmentalVisit.getAuthoringCPIsNotNull())
		{
			form.qmbAuthoringHCP().newRow(voEnvironmentalVisit.getAuthoringCP(), voEnvironmentalVisit.getAuthoringCP().toString());
			form.qmbAuthoringHCP().setValue(voEnvironmentalVisit.getAuthoringCP());			
		}
	
		form.dtimAuthoringDateTime().setValue(voEnvironmentalVisit.getAuthoringDateTime());
		form.cmbLocation().setValue(voEnvironmentalVisit.getLocation());
		
		if(voEnvironmentalVisit.getHouseDetailsIsNotNull() && voEnvironmentalVisit.getHouseDetails().getAddressIsNotNull())
			form.txtPlaceVisited().setValue(voEnvironmentalVisit.getHouseDetails().getAddress());
		
		if(voEnvironmentalVisit.getVisitSummaryIsNotNull())
		{
			form.txtProblems().setValue(voEnvironmentalVisit.getVisitSummary().getProblemsIdentified());
			form.txtRecommendations().setValue(voEnvironmentalVisit.getVisitSummary().getRecommendations());
			form.txtEquipment().setValue(voEnvironmentalVisit.getVisitSummary().getEquipment());
			form.txtConclusions().setValue(voEnvironmentalVisit.getVisitSummary().getConclusions());
		}
	}
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		EnvironmentalVisitVo voEnvironmentalVisit = populateInstanceData(form.getLocalContext().getvoEnvironmentalVisit());
		
		String[] arrErrors = voEnvironmentalVisit.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}		
		
		try
		{
			form.getLocalContext().setvoEnvironmentalVisit(domain.saveEnvironmentalVisit(voEnvironmentalVisit));
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A meeting with the same criteria already exists.   " + e.getMessage());
			return;
		}
		form.getGlobalContext().Therapies.setEnvironmentalVisit(form.getLocalContext().getvoEnvironmentalVisit());
		open();
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}
	private EnvironmentalVisitVo populateInstanceData(EnvironmentalVisitVo voEnvironmentalVisit)
	{
		if(voEnvironmentalVisit == null)
			voEnvironmentalVisit = new EnvironmentalVisitVo();
		
		voEnvironmentalVisit.setLocation(form.cmbLocation().getValue());

		HomeDetailsVo voHomeDetails = voEnvironmentalVisit.getHouseDetails();
		if(voHomeDetails == null)
			voHomeDetails = new HomeDetailsVo();
		
		voHomeDetails.setAddress(form.txtPlaceVisited().getValue());
		voEnvironmentalVisit.setHouseDetails(voHomeDetails);
		
		VisitSummaryVo voVisitSummary = voEnvironmentalVisit.getVisitSummary();
		if(voVisitSummary == null)
			voVisitSummary = new VisitSummaryVo();

		voEnvironmentalVisit.setAuthoringCP(form.qmbAuthoringHCP().getValue());
		voEnvironmentalVisit.setAuthoringDateTime(form.dtimAuthoringDateTime().getValue());
		
		voVisitSummary.setEquipment(form.txtEquipment().getValue());
		voVisitSummary.setProblemsIdentified(form.txtProblems().getValue());
		voVisitSummary.setRecommendations(form.txtRecommendations().getValue());
		voVisitSummary.setConclusions(form.txtConclusions().getValue());
		
		voEnvironmentalVisit.setVisitSummary(voVisitSummary);

		return voEnvironmentalVisit;
	}

	private void clear() 
	{
		form.cmbLocation().setValue(null);
		form.txtPlaceVisited().setValue(null);
		form.txtConclusions().setValue(null);
		form.txtEquipment().setValue(null);
		form.txtProblems().setValue(null);
		form.txtRecommendations().setValue(null);
	}
}
