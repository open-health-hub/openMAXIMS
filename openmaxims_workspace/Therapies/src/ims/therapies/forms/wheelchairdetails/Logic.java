//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.therapies.forms.wheelchairdetails;

import java.util.ArrayList;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.PersonName;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.therapies.vo.WheelchairDetailsVo;
import ims.therapies.vo.WheelchairDetailsVoCollection;
import ims.spinalinjuries.vo.lookups.WheelchairType;
import ims.spinalinjuries.vo.lookups.WheelchairTypeCollection;

public class Logic extends BaseLogic
{
	/*
	 * @see ims.therapies.forms.wheelchairdetails.Handlers#onFormOpen()
	 */
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		prepopulateControls();
		open();
	}
	/**
	 * prepopulates Type hierarchical lookup
	 * @return      void
	 */	
	private void prepopulateControls() {
		
		form.ctnDetails().cmbType().clear();
		WheelchairTypeCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getWheelchairType(domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			if(lookupCollection.get(x).getParent()==null)
				form.ctnDetails().cmbType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
		form.getLocalContext().setWheelchairDetailsVo(null);
	}
	/**
	 * called to populate the screen with List and Instance Data in the occurance of opening a form,canceling a new or update and staleobject exception.
	 * @return      void
	 */	
	private void open() {
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateListControl(domain.listByPatient(form.getGlobalContext().Core.getPatientShort().getID_Patient()));
		
		//set selection back
		if (form.getLocalContext().getWheelchairDetailsVoIsNotNull())
		{
			form.grdDetails().setValue(form.getLocalContext().getWheelchairDetailsVo());
			populateInstanceControl(form.grdDetails().getValue());
			updateControlsState();			
		}
		else
			form.ctnDetails().setCollapsed(true);
				
		form.setMode(FormMode.VIEW);	
	}
	/**
	 * populates the screen from data from specified WheelchairDetailsVoCollection
	 * @param collWheelchairDetailsVo 
	 * @return      void
	 */
	private void populateListControl(WheelchairDetailsVoCollection collWheelchairDetailsVo) {
		clear();
		
		if (collWheelchairDetailsVo != null)
		{
			GenForm.grdDetailsRow row;
			for (int i =0; i < collWheelchairDetailsVo.size();i++)
			{
				row = form.grdDetails().getRows().newRow();
				
				row.setValue(collWheelchairDetailsVo.get(i));	
				if(collWheelchairDetailsVo.get(i).getAuthoringDateTimeIsNotNull())
					row.setColDate(collWheelchairDetailsVo.get(i).getAuthoringDateTime().toString());
				if(collWheelchairDetailsVo.get(i).getAuthoringHCPIsNotNull())
					row.setColHCP(collWheelchairDetailsVo.get(i).getAuthoringHCP().toString());
				if(collWheelchairDetailsVo.get(i).getWheelchairTypeIsNotNull())
					row.setColType(collWheelchairDetailsVo.get(i).getWheelchairType().toString());
				if(collWheelchairDetailsVo.get(i).getWheelchairModelIsNotNull())
					row.setColModel(collWheelchairDetailsVo.get(i).getWheelchairModel().toString());
				if(collWheelchairDetailsVo.get(i).getWheelchairFrameIsNotNull())
					row.setColFrame(collWheelchairDetailsVo.get(i).getWheelchairFrame().toString());
				if(collWheelchairDetailsVo.get(i).getWheelchairFootplatesIsNotNull())
					row.setColFootplates(collWheelchairDetailsVo.get(i).getWheelchairFootplates().toString());
				if(collWheelchairDetailsVo.get(i).getTrialStartDateIsNotNull())
					row.setColDateStart(collWheelchairDetailsVo.get(i).getTrialStartDate().toString());
				if(collWheelchairDetailsVo.get(i).getTrialEndDateIsNotNull())
					row.setColDateEnd(collWheelchairDetailsVo.get(i).getTrialEndDate().toString());
			}
		}
		
	}
	/**
	 * clear list and instance controls
	 * @return void 
	 */	
	private void clear() {
		form.grdDetails().getRows().clear();
		clearInstanceControls();		
	}
	/*
	 * @see ims.therapies.forms.wheelchairdetails.Handlers#onBtnSaveClick()
	 */
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	private void newInstance() {
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setWheelchairDetailsVo(new WheelchairDetailsVo());
			clearInstanceControls();
			form.ctnDetails().setCollapsed(false);
			//set the form mode
			form.setMode(FormMode.EDIT);
			//set any control status specific this form		
			form.ctnDetails().dtimRecording().setEnabled(true);
			form.ctnDetails().qmbHCP().setEnabled(true);
			form.ctnDetails().cmbModel().setEnabled(false);
			setDefaultValues();
		}	
		
	}
	/**
	 * set default values on New
	 * @return void 
	 */	
	private void setDefaultValues() {
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser!=null){
			form.ctnDetails().qmbHCP().newRow(hcpUser, hcpUser.getName().toString());
			form.ctnDetails().qmbHCP().setValue(hcpUser);
		}
		DateTime dateTime = new DateTime();
		form.ctnDetails().dtimRecording().setValue(dateTime);		
	}
	private void clearInstanceControls() {
		form.ctnDetails().dtimRecording().setValue(null);
		form.ctnDetails().qmbHCP().setValue(null);
		form.ctnDetails().cmbFootplates().setValue(null);
		form.ctnDetails().cmbFrame().setValue(null);
		form.ctnDetails().cmbModel().setValue(null);
		form.ctnDetails().cmbType().setValue(null);
		form.ctnDetails().intOverallWidth().setValue(null);
		form.ctnDetails().intSeatDepth().setValue(null);
		form.ctnDetails().intSeatWidth().setValue(null);
		form.ctnDetails().txtAccessories().setValue(null);
		form.ctnDetails().txtComments().setValue(null);
		form.ctnDetails().dteStart().setValue(null);
		form.ctnDetails().dteEnd().setValue(null);		
	}
	private boolean allowNew() {
		// TODO Auto-generated method stub
		return true;
	}
	/*
	 * @see ims.therapies.forms.wheelchairdetails.Handlers#onBtnUpdateClick()
	 */
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	/**
	 * called from context menus and update button for initiating an update
	 * @return void 
	 */	
	private void updateInstance() {
		if (allowUpdate()){
			form.setMode(FormMode.EDIT);
			form.ctnDetails().dtimRecording().setEnabled(false);
			form.ctnDetails().qmbHCP().setEnabled(false);
			form.ctnDetails().setCollapsed(false);
		}
		
	}
	/**
	 * checks before allowing an update
	 * @return void 
	 */
	private boolean allowUpdate() {
		return (form.getLocalContext().getWheelchairDetailsVoIsNotNull());
	}
	/*
	 * @see ims.therapies.forms.wheelchairdetails.Handlers#onBtnSaveClick()
	 */
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();	
	}
	/**
	 * gather screen data into local context vo and save updating the local context vo
	 * returns true for successful save
	 * @return boolean
	 * @throws PresentationLogicException 
	 */	
	private boolean save() 
	{
		
		if (form.ctnDetails().dteStart()!=null)
		{
			if (form.ctnDetails().dteStart().getValue()!=null)
				if (form.ctnDetails().dteEnd()!=null)
					if (form.ctnDetails().dteEnd().getValue()!=null)
						if (form.ctnDetails().dteStart().getValue().compareTo(form.ctnDetails().dteEnd().getValue())>0)
						{
							ArrayList<String> errors=new ArrayList<String>();
							errors.add("Date End cannot be before Date Start");
							engine.showErrors(errors.toArray(new String [0]));
							return false;
						}
		}
		WheelchairDetailsVo voWheelchairDetails = populateInstanceData();
		
		//set clinical contact
		if (!voWheelchairDetails.getClinicalContactIsNotNull())
			voWheelchairDetails.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		//set Care Context
		if (!voWheelchairDetails.getCareContextIsNotNull())
			voWheelchairDetails.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				
		//validate Vo
		String[] arrErrors =  voWheelchairDetails.validate();	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setWheelchairDetailsVo(domain.save(voWheelchairDetails));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	/**
	 * gather screen data into local context vo and save updating the local context vo
	 * returns true for successful save
	 * @return boolean
	 * @throws PresentationLogicException 
	 */	
	private WheelchairDetailsVo populateInstanceData(){
		WheelchairDetailsVo voWheelchairDetails = form.getLocalContext().getWheelchairDetailsVo();
		
		if(voWheelchairDetails == null)
			voWheelchairDetails = new WheelchairDetailsVo();

		voWheelchairDetails.setAuthoringDateTime(form.ctnDetails().dtimRecording().getValue());
		voWheelchairDetails.setAuthoringHCP(form.ctnDetails().qmbHCP().getValue());
		voWheelchairDetails.setWheelchairFootplates(form.ctnDetails().cmbFootplates().getValue());
		voWheelchairDetails.setWheelchairFrame(form.ctnDetails().cmbFrame().getValue());
		voWheelchairDetails.setWheelchairModel(form.ctnDetails().cmbModel().getValue());
		voWheelchairDetails.setWheelchairType(form.ctnDetails().cmbType().getValue());
		voWheelchairDetails.setSeatOverallWidth(form.ctnDetails().intOverallWidth().getValue());
		voWheelchairDetails.setSeatDepth(form.ctnDetails().intSeatDepth().getValue());
		voWheelchairDetails.setSeatWidth(form.ctnDetails().intSeatWidth().getValue());
		voWheelchairDetails.setWheelchairAccessories(form.ctnDetails().txtAccessories().getValue());
		voWheelchairDetails.setWheelchairComments(form.ctnDetails().txtComments().getValue());
		voWheelchairDetails.setTrialStartDate(form.ctnDetails().dteStart().getValue());
		voWheelchairDetails.setTrialEndDate(form.ctnDetails().dteEnd().getValue());	
		
		return voWheelchairDetails;
	}
	/*
	 * @see ims.therapies.forms.wheelchairdetails.Handlers#onBtnCancelClick()
	 */
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	/*
	 * updates the context menus and other dependant screen controls
	 * @see ims.clinical.forms.familyhistory.Handlers#onFormModeChanged()
	 */
	protected void onFormModeChanged() 
	{
		updateControlsState(); 
		
		if(form.getMode().equals(FormMode.EDIT))
		{	
			if (engine.isDialog())
				form.btnClose().setVisible(false);
		}
		else if(form.getMode().equals(FormMode.VIEW))
		{
			if (engine.isDialog())
				form.btnClose().setVisible(true);
			else
				form.btnClose().setVisible(false);
		}
	}
	private void updateControlsState() {
		//TODO: will be set as default to New. remove the "New " when this is complete.
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			if(form.ctnDetails().cmbType().getValue()!=null)
				form.ctnDetails().cmbModel().setEnabled(true);				
		}
		else
		{
			if (form.grdDetails().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdDetails().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
		}
		
	}
	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException {
		//Display Panel and detail
		form.getLocalContext().setWheelchairDetailsVo(form.grdDetails().getValue());
		populateInstanceControl(form.grdDetails().getValue());
		updateControlsState();
		
	}
	/**
	 * displays the Wheelchair Details record specified by WheelchairDetailsVo
	 * @param voFamHist
	 */
	private void populateInstanceControl(WheelchairDetailsVo voWheelchairDetails) {
		clearInstanceControls();
		
		if(voWheelchairDetails!=null){
			
			form.getLocalContext().setWheelchairDetailsVo(voWheelchairDetails);
			
			if(voWheelchairDetails.getAuthoringDateTimeIsNotNull())
				form.ctnDetails().dtimRecording().setValue(voWheelchairDetails.getAuthoringDateTime());
			if(voWheelchairDetails.getAuthoringHCPIsNotNull()){
				form.ctnDetails().qmbHCP().newRow(voWheelchairDetails.getAuthoringHCP(), voWheelchairDetails.getAuthoringHCP().getName().toString());
				form.ctnDetails().qmbHCP().setValue(voWheelchairDetails.getAuthoringHCP());
			}
			if(voWheelchairDetails.getWheelchairTypeIsNotNull()){
				form.ctnDetails().cmbType().setValue(voWheelchairDetails.getWheelchairType());
				try {
					onCmbTypeValueChanged();
				} catch (PresentationLogicException e) {
					engine.showMessage("Failed to populate combo with child instances.");
				}
			}
			if(voWheelchairDetails.getWheelchairModelIsNotNull())
				form.ctnDetails().cmbModel().setValue(voWheelchairDetails.getWheelchairModel());
			if(voWheelchairDetails.getWheelchairFrameIsNotNull())
				form.ctnDetails().cmbFrame().setValue(voWheelchairDetails.getWheelchairFrame());
			if(voWheelchairDetails.getWheelchairFootplatesIsNotNull())
				form.ctnDetails().cmbFootplates().setValue(voWheelchairDetails.getWheelchairFootplates());
			if(voWheelchairDetails.getSeatWidthIsNotNull())
				form.ctnDetails().intSeatWidth().setValue(voWheelchairDetails.getSeatWidth());	
			if(voWheelchairDetails.getSeatDepthIsNotNull())
				form.ctnDetails().intSeatDepth().setValue(voWheelchairDetails.getSeatDepth());
			if(voWheelchairDetails.getSeatOverallWidthIsNotNull())
				form.ctnDetails().intOverallWidth().setValue(voWheelchairDetails.getSeatOverallWidth());
			if(voWheelchairDetails.getTrialStartDateIsNotNull())
				form.ctnDetails().dteStart().setValue(voWheelchairDetails.getTrialStartDate());
			if(voWheelchairDetails.getTrialEndDateIsNotNull())
				form.ctnDetails().dteEnd().setValue(voWheelchairDetails.getTrialEndDate());
			if(voWheelchairDetails.getWheelchairAccessoriesIsNotNull())
				form.ctnDetails().txtAccessories().setValue(voWheelchairDetails.getWheelchairAccessories());
			if(voWheelchairDetails.getWheelchairCommentsIsNotNull())
				form.ctnDetails().txtComments().setValue(voWheelchairDetails.getWheelchairComments());
			
			form.ctnDetails().setCollapsed(false);
		}
		
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException {
		if (menuItemID == form.getContextMenus().getLIPNewItem().getID())
			newInstance();
		else if (menuItemID == form.getContextMenus().getLIPUpdateItem().getID())
			updateInstance();
		
	}
	/**
	 * populates Model combo with child instances of selected Type 
	 * @return void
	 */
	protected void onCmbTypeValueChanged() throws PresentationLogicException {
		
		if(form.getMode().equals(FormMode.EDIT))
			form.ctnDetails().cmbModel().setEnabled(true);	
		form.ctnDetails().cmbModel().clear();
		
		if(form.ctnDetails().cmbType().getValue()!=null){
			
			WheelchairType lkupWheelchairType = form.ctnDetails().cmbType().getValue();
			ArrayList coll = lkupWheelchairType.getChildInstances();
			WheelchairType type = null;
			for(int i=0;i<coll.size();i++)
			{
				type = (WheelchairType)coll.get(i);
				if(type.isActive())
					form.ctnDetails().cmbModel().newRow((WheelchairType)coll.get(i), coll.get(i).toString());
			}
		}
	}
	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException {
		form.ctnDetails().qmbHCP().clear();
		Hcp filter = new Hcp();
		PersonName name = new PersonName();
		name.setSurname("%" + value + "%");
		filter.setQueryName(name);
		//filter.setHcpType(HcpDisType.MEDICAL);
		
		HcpCollection voHCPColl = domain.listHcps(filter);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.ctnDetails().qmbHCP().newRow(voHCPColl.get(i), voHCPColl.get(i).getName().toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.ctnDetails().qmbHCP().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.ctnDetails().qmbHCP().showOpened();		
			}
		}		
	}
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		if (engine.isDialog())
		{
			engine.close(DialogResult.OK);
			return;
		}
	}
}
