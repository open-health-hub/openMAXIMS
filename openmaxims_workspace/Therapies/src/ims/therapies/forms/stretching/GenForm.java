//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.forms.stretching;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnStretchingContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrStretchingLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabHeaderContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class qmbAuthoringHcpComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.Hcp value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.Hcp value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.Hcp getValue()
					{
						return (ims.core.vo.Hcp)super.control.getValue();
					}
					public void setValue(ims.core.vo.Hcp value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
			
					// Date Time Controls
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 160, 48, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_qmbAuthoringHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbAuthoringHcpTemp);
					qmbAuthoringHcpComboBox qmbAuthoringHcp = (qmbAuthoringHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthoringHcpComboBox.class, m_qmbAuthoringHcpTemp);
					super.addComboBox(qmbAuthoringHcp);
				}
	
				public DateTimeControl dtimAuthoring()
				{
					return (DateTimeControl)super.getControl(2);
				}
				public qmbAuthoringHcpComboBox qmbAuthoringHcp()
				{
					return (qmbAuthoringHcpComboBox)super.getComboBox(0);
				}
			}
			public static class tabDetailsContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbAreaComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.therapies.vo.lookups.StretchingArea value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.therapies.vo.lookups.StretchingArea value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.therapies.vo.lookups.StretchingArea value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.therapies.vo.lookups.StretchingArea value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.therapies.vo.lookups.StretchingArea value)
					{
						return super.control.removeRow(value);
					}
					public ims.therapies.vo.lookups.StretchingArea getValue()
					{
						return (ims.therapies.vo.lookups.StretchingArea)super.control.getValue();
					}
					public void setValue(ims.therapies.vo.lookups.StretchingArea value)
					{
						super.control.setValue(value);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 368, 16, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Area:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 680, 152, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 608, 152, 64, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 16, 304, 128, ims.framework.enumerations.ControlAnchoring.ALL);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbAreaTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbAreaTemp);
					cmbAreaComboBox cmbArea = (cmbAreaComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAreaComboBox.class, m_cmbAreaTemp);
					super.addComboBox(cmbArea);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 176, 48, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Passive", Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 80, 48, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.TRUE, null}));
				}
	
				public Button btnCancelDetails()
				{
					return (Button)super.getControl(2);
				}
				public Button btnOk()
				{
					return (Button)super.getControl(3);
				}
				public TextBox txtComment()
				{
					return (TextBox)super.getControl(4);
				}
				public cmbAreaComboBox cmbArea()
				{
					return (cmbAreaComboBox)super.getComboBox(0);
				}
				public CheckBox chkPassive()
				{
					return (CheckBox)super.getControl(6);
				}
				public CheckBox chkActive()
				{
					return (CheckBox)super.getControl(7);
				}
			}
			public static class tabEmptyContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 449, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No details to display - Please select an item from the grid", new Integer(1), null, new Integer(1)}));
				}
	
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabHeader = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Stretching", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabHeaderContainer m_tabHeaderContainer = (tabHeaderContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHeaderContainer.class, m_tabHeader, factory);
				super.addContainer(m_tabHeader, m_tabHeaderContainer);
				ims.framework.utils.SizeInfo m_tabHeaderDesignSize = new ims.framework.utils.SizeInfo(776, 216);
				ims.framework.utils.SizeInfo m_tabHeaderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
				m_tabHeaderContainer.setContext(form, appForm, m_tabHeader, loader, contextMenus, startControlID, m_tabHeaderDesignSize, m_tabHeaderRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
				super.addContainer(m_tabDetails, m_tabDetailsContainer);
				ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(776, 216);
				ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
				m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, contextMenus, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Container m_tabEmpty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Empty", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabEmptyContainer m_tabEmptyContainer = (tabEmptyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEmptyContainer.class, m_tabEmpty, factory);
				super.addContainer(m_tabEmpty, m_tabEmptyContainer);
				ims.framework.utils.SizeInfo m_tabEmptyDesignSize = new ims.framework.utils.SizeInfo(776, 216);
				ims.framework.utils.SizeInfo m_tabEmptyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
				m_tabEmptyContainer.setContext(form, appForm, m_tabEmpty, loader, contextMenus, startControlID, m_tabEmptyDesignSize, m_tabEmptyRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty().setVisible(false);
			}
			public void settabHeaderEnabled(boolean value)
			{
				tabHeader().setEnabled(value);
			}
			public void settabDetailsEnabled(boolean value)
			{
				tabDetails().setEnabled(value);
			}
			public void settabEmptyEnabled(boolean value)
			{
				tabEmpty().setEnabled(value);
			}
			public void showtabHeader()
			{
				tabDetails().setVisible(false);
				tabEmpty().setVisible(false);
				tabHeader().setVisible(true);
			}
			public void showtabDetails()
			{
				tabHeader().setVisible(false);
				tabEmpty().setVisible(false);
				tabDetails().setVisible(true);
			}
			public void showtabEmpty()
			{
				tabHeader().setVisible(false);
				tabDetails().setVisible(false);
				tabEmpty().setVisible(true);
			}
	
			public tabHeaderContainer tabHeader()
			{
				return (tabHeaderContainer)super.layers.get(0);
			}
			public tabDetailsContainer tabDetails()
			{
				return (tabDetailsContainer)super.layers.get(1);
			}
			public tabEmptyContainer tabEmpty()
			{
				return (tabEmptyContainer)super.layers.get(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrStretchingLayer m_lyrStretchingLayer = (lyrStretchingLayer)LayerFlyweightFactory.getInstance().createLayer(lyrStretchingLayer.class, this, factory);
			super.addLayer(m_lyrStretchingLayer);
			m_lyrStretchingLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrStretchingLayer lyrStretching()
		{
			return (lyrStretchingLayer)super.getLayer(0);
		}
	}
	public static class grdAreaRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAreaRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColAreaReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAreaReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAreaOpened()
		{
			super.row.showOpened(0);
		}
		public String getColArea()
		{
			return (String)super.row.get(0);
		}
		public void setColArea(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColAreaTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColActiveReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColActiveOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColActive()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColActive(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColActiveTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolPassiveReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolPassiveReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolPassiveOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getcolPassive()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setcolPassive(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellcolPassiveTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColCommentReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColCommentReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColCommentOpened()
		{
			super.row.showOpened(3);
		}
		public String getColComment()
		{
			return (String)super.row.get(3);
		}
		public void setColComment(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColCommentTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdAreaRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdAreaRow(super.row.getParent());
		}
		public grdAreaRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdAreaRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdAreaRowCollection collection;
	}
	public static class grdAreaRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAreaRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAreaRow get(int index)
		{
			return new grdAreaRow(super.collection.get(index));
		}
		public grdAreaRow newRow()
		{
			return new grdAreaRow(super.collection.newRow());
		}
		public grdAreaRow newRow(boolean autoSelect)
		{
			return new grdAreaRow(super.collection.newRow(autoSelect));
		}
		public grdAreaRow newRowAt(int index)
		{
			return new grdAreaRow(super.collection.newRowAt(index));
		}
		public grdAreaRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAreaRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAreaGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdAreaRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdAreaRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdAreaRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdAreaRow[] result = new GenForm.grdAreaRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdAreaRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdAreaRow[] getAllRows(GenForm.grdAreaRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdAreaRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdAreaRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdAreaRow[] result = new GenForm.grdAreaRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdAreaRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdAreaRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdAreaRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdAreaRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdAreaRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAreaRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAreaRowCollection getRows()
		{
			return new grdAreaRowCollection(super.grid.getRows());
		}
		public grdAreaRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAreaRow(row);
		}
		public void setColAreaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAreaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolPassiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolPassiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColCommentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColCommentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedParentInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Container Clasess
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 328, 808, 256, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnStretching = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnStretching);
		ctnStretchingContainer ctnStretching = (ctnStretchingContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnStretchingContainer.class, m_ctnStretching, factory);
		ims.framework.utils.SizeInfo m_ctnStretchingDesignSize = new ims.framework.utils.SizeInfo(808, 256);
		ims.framework.utils.SizeInfo m_ctnStretchingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
		ctnStretching.setContext(form, appForm, m_ctnStretching, loader, contextMenus, startControlID, m_ctnStretchingDesignSize, m_ctnStretchingRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnStretching);

		// Button Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 752, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 808, 304, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAreaTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdAreaTemp);
		grdAreaGrid grdArea = (grdAreaGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAreaGrid.class, m_grdAreaTemp);
		grdArea.addTreeColumn("Area", 0, 225, false, true);
		grdArea.addBoolColumn("Active", 1, 1, 60, false, false, 0, true);
		grdArea.addBoolColumn("Passive", 1, 1, 60, true, false, 0, true);
		grdArea.addStringColumn("Comment", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdArea);
	}


	public ctnStretchingContainer ctnStretching()
	{
		return (ctnStretchingContainer)super.getContainer(0);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdAreaGrid grdArea()
	{
		return (grdAreaGrid)super.getGrid(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedParentInstance = new ims.framework.ContextVariable("SelectedParentInstance", prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedParentInstance_" + componentIdentifier + "");
			cxl_SelectedChildInstance = new ims.framework.ContextVariable("SelectedChildInstance", prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier + "");
			cxl_UpdatingParent = new ims.framework.ContextVariable("UpdatingParent", prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatingParent_" + componentIdentifier + "");
			cxl_UpdatedChild = new ims.framework.ContextVariable("UpdatedChild", prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier + "");
			cxl_GoldenInstanceSelected = new ims.framework.ContextVariable("GoldenInstanceSelected", prefix + "_lv_Therapies.Stretching.__internal_x_context__GoldenInstanceSelected_" + componentIdentifier + "");
			cxl_GoldenInstanceFound = new ims.framework.ContextVariable("GoldenInstanceFound", prefix + "_lv_Therapies.Stretching.__internal_x_context__GoldenInstanceFound_" + componentIdentifier + "");
			cxl_setGoldenInstanceFound = new ims.framework.ContextVariable("setGoldenInstanceFound", prefix + "_lv_Therapies.Stretching.__internal_x_context__setGoldenInstanceFound_" + componentIdentifier + "");
			cxl_UpdatingParentInstance = new ims.framework.ContextVariable("UpdatingParentInstance", prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatingParentInstance_" + componentIdentifier + "");
		}
		
		public boolean getSelectedParentInstanceIsNotNull()
		{
			return !cxl_SelectedParentInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.StretchingVo getSelectedParentInstance()
		{
			return (ims.therapies.vo.StretchingVo)cxl_SelectedParentInstance.getValue(context);
		}
		public void setSelectedParentInstance(ims.therapies.vo.StretchingVo value)
		{
			cxl_SelectedParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedParentInstance = null;
		public boolean getSelectedChildInstanceIsNotNull()
		{
			return !cxl_SelectedChildInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.StretchingDetailsVo getSelectedChildInstance()
		{
			return (ims.therapies.vo.StretchingDetailsVo)cxl_SelectedChildInstance.getValue(context);
		}
		public void setSelectedChildInstance(ims.therapies.vo.StretchingDetailsVo value)
		{
			cxl_SelectedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedChildInstance = null;
		public boolean getUpdatingParentIsNotNull()
		{
			return !cxl_UpdatingParent.getValueIsNull(context);
		}
		public Boolean getUpdatingParent()
		{
			return (Boolean)cxl_UpdatingParent.getValue(context);
		}
		public void setUpdatingParent(Boolean value)
		{
			cxl_UpdatingParent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParent = null;
		public boolean getUpdatedChildIsNotNull()
		{
			return !cxl_UpdatedChild.getValueIsNull(context);
		}
		public ims.therapies.vo.StretchingDetailsVo getUpdatedChild()
		{
			return (ims.therapies.vo.StretchingDetailsVo)cxl_UpdatedChild.getValue(context);
		}
		public void setUpdatedChild(ims.therapies.vo.StretchingDetailsVo value)
		{
			cxl_UpdatedChild.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChild = null;
		public boolean getGoldenInstanceSelectedIsNotNull()
		{
			return !cxl_GoldenInstanceSelected.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceSelected()
		{
			return (Boolean)cxl_GoldenInstanceSelected.getValue(context);
		}
		public void setGoldenInstanceSelected(Boolean value)
		{
			cxl_GoldenInstanceSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceSelected = null;
		public boolean getGoldenInstanceFoundIsNotNull()
		{
			return !cxl_GoldenInstanceFound.getValueIsNull(context);
		}
		public Boolean getGoldenInstanceFound()
		{
			return (Boolean)cxl_GoldenInstanceFound.getValue(context);
		}
		public void setGoldenInstanceFound(Boolean value)
		{
			cxl_GoldenInstanceFound.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoldenInstanceFound = null;
		public boolean getsetGoldenInstanceFoundIsNotNull()
		{
			return !cxl_setGoldenInstanceFound.getValueIsNull(context);
		}
		public Boolean getsetGoldenInstanceFound()
		{
			return (Boolean)cxl_setGoldenInstanceFound.getValue(context);
		}
		public void setsetGoldenInstanceFound(Boolean value)
		{
			cxl_setGoldenInstanceFound.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_setGoldenInstanceFound = null;
		public boolean getUpdatingParentInstanceIsNotNull()
		{
			return !cxl_UpdatingParentInstance.getValueIsNull(context);
		}
		public ims.therapies.vo.StretchingVo getUpdatingParentInstance()
		{
			return (ims.therapies.vo.StretchingVo)cxl_UpdatingParentInstance.getValue(context);
		}
		public void setUpdatingParentInstance(ims.therapies.vo.StretchingVo value)
		{
			cxl_UpdatingParentInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingParentInstance = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[85];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1044100000-ID", "ID_Stretching");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedParentInstance_" + componentIdentifier, "BO-1044100000-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1044100001-ID", "ID_StretchingDetails");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1044100001-STRETCHINGAREA", "StretchingArea");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1044100001-ACTIVE", "Active");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1044100001-PASSIVE", "Passive");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1044100001-COMMENT", "Comment");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1044100001-ID", "ID_StretchingDetails");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1044100001-STRETCHINGAREA", "StretchingArea");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1044100001-ACTIVE", "Active");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1044100001-PASSIVE", "Passive");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatedChild_" + componentIdentifier, "BO-1044100001-COMMENT", "Comment");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatingParentInstance_" + componentIdentifier, "BO-1044100000-ID", "ID_Stretching");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Therapies.Stretching.__internal_x_context__UpdatingParentInstance_" + componentIdentifier, "BO-1044100000-AUTHORINGDATETIME", "AuthoringDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
