//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.clinicaladmin.domain.base.impl.BaseSelectPrognosticLocationImpl;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.configuration.domain.objects.PrognosticLocationConfig;
import ims.oncology.vo.domain.PrognosticLocationConfigVoAssembler;

public class SelectPrognosticLocationImpl extends BaseSelectPrognosticLocationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.PrognosticLocationConfigVoCollection listLocation()
	{
		return PrognosticLocationConfigVoAssembler.createPrognosticLocationConfigVoCollectionFromPrognosticLocationConfig(getDomainFactory().find("from PrognosticLocationConfig as plc where plc.isActive = 1 order by plc.locationName asc"));
	}

	public ims.oncology.vo.PrognosticLocationConfigVo getLocation(ims.oncology.configuration.vo.PrognosticLocationConfigRefVo location)
	{
		if(location == null || location.getID_PrognosticLocationConfig() == null)
			return null;
		
		return PrognosticLocationConfigVoAssembler.create((PrognosticLocationConfig) getDomainFactory().getDomainObject(PrognosticLocationConfig.class, location.getID_PrognosticLocationConfig()));
	}

	public ims.oncology.vo.PrognosticLocationConfigVo saveLocation(ims.oncology.vo.PrognosticLocationConfigVo location) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(location == null)
			throw new CodingRuntimeException("Can not save a null PrognosticLocationConfigVo");
		
		if(!location.isValidated())
			throw new CodingRuntimeException("PrognosticLocationConfigVo must be validated before save.");
		
		DomainFactory factory = getDomainFactory();
		PrognosticLocationConfig doRecord = PrognosticLocationConfigVoAssembler.extractPrognosticLocationConfig(factory, location);
		
		factory.save(doRecord);
		
		return PrognosticLocationConfigVoAssembler.create(doRecord);
	}
}
