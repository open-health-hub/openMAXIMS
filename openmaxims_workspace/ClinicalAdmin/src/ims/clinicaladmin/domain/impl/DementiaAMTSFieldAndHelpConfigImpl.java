//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4696.13908)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.clinicaladmin.domain.base.impl.BaseDementiaAMTSFieldAndHelpConfigImpl;
import ims.clinicaladmin.vo.DementiaTermConfigVo;
import ims.clinicaladmin.vo.DementiaTermConfigVoCollection;
import ims.clinicaladmin.vo.domain.DementiaTermConfigVoAssembler;
import ims.core.admin.vo.DementiaTermConfigRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class DementiaAMTSFieldAndHelpConfigImpl extends BaseDementiaAMTSFieldAndHelpConfigImpl
{

	private static final long serialVersionUID = 1L;

	public DementiaTermConfigVoCollection listAllDementiaTermConfig()
	{
		return DementiaTermConfigVoAssembler.createDementiaTermConfigVoCollectionFromDementiaTermConfig(getDomainFactory().find(" from DementiaTermConfig ")).sort();
	}

	public DementiaTermConfigVo getDementiaTermConfig(DementiaTermConfigRefVo dementiaTermConfigRef)
	{
		if (dementiaTermConfigRef == null || dementiaTermConfigRef.getID_DementiaTermConfig() == null)
		{
			throw new CodingRuntimeException("Cannot get DementiaTermConfig on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ims.core.admin.domain.objects.DementiaTermConfig domainDementiaTerm = (ims.core.admin.domain.objects.DementiaTermConfig) factory.getDomainObject(ims.core.admin.domain.objects.DementiaTermConfig.class, dementiaTermConfigRef.getID_DementiaTermConfig());

		return DementiaTermConfigVoAssembler.create(domainDementiaTerm);
	}

	public DementiaTermConfigVo save(DementiaTermConfigVo dementiaTermToSave) throws StaleObjectException
	{
		if (dementiaTermToSave == null)
			throw new CodingRuntimeException("Cannot save null DementiaTermConfigVo ");

		if (!dementiaTermToSave.isValidated())
			throw new DomainRuntimeException("DementiaTermConfigVo Not Validated.");

		DomainFactory factory = getDomainFactory();
		ims.core.admin.domain.objects.DementiaTermConfig domainDementiaTermToSave = DementiaTermConfigVoAssembler.extractDementiaTermConfig(factory, dementiaTermToSave);

		factory.save(domainDementiaTermToSave);

		return DementiaTermConfigVoAssembler.create(domainDementiaTermToSave);
	}
	
}
