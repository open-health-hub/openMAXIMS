//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Margaret Mc Carthy using IMS Development Environment (version 1.52 build 2497.19681)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.admin.helper.Keywords;
import ims.clinical.configuration.domain.objects.CancerImagingHotlist;
import ims.clinical.configuration.domain.objects.ClinicalProblem;
import ims.clinical.configuration.domain.objects.DiagnosisHotlist;
import ims.clinical.configuration.domain.objects.MedicationHotlist;
import ims.clinical.configuration.domain.objects.PresentingComplaint;
import ims.clinical.configuration.domain.objects.PresentingComplaintHotlist;
import ims.clinical.configuration.domain.objects.ProblemHotlist;
import ims.clinical.configuration.domain.objects.ProcedureHotlist;
import ims.clinical.vo.PresentingComplainHotlistVo;
import ims.clinical.vo.PresentingComplaintVo;
import ims.clinical.vo.ProblemConfigVo;
import ims.clinical.vo.domain.ClinicalProblemShortVoAssembler;
import ims.clinical.vo.domain.PresentingComplainHotlistVoAssembler;
import ims.clinical.vo.domain.PresentingComplaintVoAssembler;
import ims.clinical.vo.domain.ProblemConfigVoAssembler;
import ims.clinicaladmin.domain.base.impl.BaseCCIAdminImpl;
import ims.clinicaladmin.vo.CancerImagingHotlistShortVo;
import ims.clinicaladmin.vo.CancerImagingHotlistVo;
import ims.clinicaladmin.vo.DiagnosisHotListShortVo;
import ims.clinicaladmin.vo.DiagnosisHotListVo;
import ims.clinicaladmin.vo.MedicationHotlistShortVo;
import ims.clinicaladmin.vo.MedicationHotlistVo;
import ims.clinicaladmin.vo.ProblemHotlistShortVo;
import ims.clinicaladmin.vo.ProblemHotlistVo;
import ims.clinicaladmin.vo.ProcedureHotlistShortVo;
import ims.clinicaladmin.vo.ProcedureHotlistVo;
import ims.clinicaladmin.vo.TreatmentInterventionHotlistShortVo;
import ims.clinicaladmin.vo.TreatmentInterventionHotlistVo;
import ims.clinicaladmin.vo.TreatmentInterventionVo;
import ims.clinicaladmin.vo.domain.CancerImagingHotlistShortVoAssembler;
import ims.clinicaladmin.vo.domain.CancerImagingHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.DiagnosisHotListShortVoAssembler;
import ims.clinicaladmin.vo.domain.DiagnosisHotListVoAssembler;
import ims.clinicaladmin.vo.domain.MedicationHotlistShortVoAssembler;
import ims.clinicaladmin.vo.domain.MedicationHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.ProblemHotlistShortVoAssembler;
import ims.clinicaladmin.vo.domain.ProblemHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.ProcedureHotlistShortVoAssembler;
import ims.clinicaladmin.vo.domain.ProcedureHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.TreatmentInterventionHotlistShortVoAssembler;
import ims.clinicaladmin.vo.domain.TreatmentInterventionHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.TreatmentInterventionVoAssembler;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.clinical.domain.objects.Allergen;
import ims.core.clinical.domain.objects.CancerImagingEvent;
import ims.core.clinical.domain.objects.Diagnosis;
import ims.core.clinical.domain.objects.Medication;
import ims.core.clinical.domain.objects.Procedure;
import ims.core.clinical.domain.objects.TreatmentIntervention;
import ims.core.clinical.domain.objects.TreatmentInterventionHotlist;
import ims.core.clinical.domain.objects.Vaccine;
import ims.core.vo.AllergenDetails;
import ims.core.vo.CancerImagingEventVo;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.MedicationFullVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.VaccineVo;
import ims.core.vo.domain.AllergenDetailsAssembler;
import ims.core.vo.domain.AllergenVoAssembler;
import ims.core.vo.domain.CancerImagingEventLiteVoAssembler;
import ims.core.vo.domain.CancerImagingEventVoAssembler;
import ims.core.vo.domain.DiagLiteVoAssembler;
import ims.core.vo.domain.DiagnosisVoAssembler;
import ims.core.vo.domain.MedicationFullVoAssembler;
import ims.core.vo.domain.MedicationLiteVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ProcedureVoAssembler;
import ims.core.vo.domain.VaccineLiteVoAssembler;
import ims.core.vo.domain.VaccineVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.vo.LookupInstVo;
import ims.vo.interfaces.ICciFull;
import ims.vo.interfaces.IGenericItem;
import ims.vo.interfaces.IGenericItemInfo;
import ims.vo.interfaces.IHotlist;
import ims.vo.interfaces.IHotlistShort;

import java.util.ArrayList;
import java.util.List;


public class CCIAdminImpl extends BaseCCIAdminImpl 
{
	private static final long serialVersionUID = 1L;
	
	/**
	 * Runs a search based on the CciType, runs a search using the given String. Returns the
	 * results as a collection of IGenericItemInfo interfaces
	 * @param String
	 * @param CciType
	 * @param Boolean
	 * @return IGenericItemInfo[] 
	 * @author mmccarthy
	 */
	public IGenericItemInfo[] listCciLite(String filter, CciType cciType, Boolean activeOnly)
	{
		return listIGenericItems(filter, cciType, activeOnly);
	}

	/**
	 * Runs a search based on the CciType, runs a search using the given String. Returns the
	 * results as a List.
	 * @param String
	 * @param CciType
	 * @param boolean
	 * @return IGenericItemInfo[] 
	 * @author mmccarthy
	 */
	private List listDomIGenericItemInfo(String filter, CciType cciType, boolean activeOnly) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ");
		
		if (cciType.equals(CciType.ALLERGEN)) 
			hql.append("Allergen x ");
		else if (cciType.equals(CciType.MEDICATION)) 
			hql.append("Medication x ");
		else if (cciType.equals(CciType.DIAGNOSIS)) 
			hql.append("Diagnosis x ");
		else if (cciType.equals(CciType.PROBLEM)) 
			hql.append("ClinicalProblem x ");
		else if (cciType.equals(CciType.PROCEDURE)) 
			hql.append("Procedure x ");
		else if (cciType.equals(CciType.CANCERIMAGE)) 
			hql.append("CancerImagingEvent x ");
		else if (cciType.equals(CciType.VACCINE)) 
			hql.append("Vaccine x ");
		else if(cciType.equals(CciType.PRESENTING_ISSUE))
			hql.append("PresentingComplaint x");
		else if(cciType.equals(CciType.TREATMENT_INTERVENTION))//WDEV-17060
			hql.append("TreatmentIntervention x");
		else
			throw new DomainRuntimeException("Unknown CCI Type in 'listDomIGenericItemInfo' = " + cciType.toString());
		
		//WDEV-7938 
		String ret = "";
		if(filter!=null)
			ret = filter.replaceAll("%", "");
		if(ret.length()!=0)
			hql.append(" join x.keywords as kw");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (activeOnly)
		{
			hql.append(" where x.isActive = :isActive");
			names.add("isActive");
			values.add(Boolean.TRUE);	
		}
		
		return Keywords.searchByKeywords(factory, filter, hql.toString(), names, values);
	}

	/**
	 * Given an IGenericItemInfo interface, returns an ICciFull interface, based on the given CciType
	 * @param IGenericItemInfo
	 * @param CciType
	 * @return ICciFull
	 * @author mmccarthy
	 */
	public ICciFull getCci(IGenericItemInfo cci, CciType cciType) 
	{
		DomainFactory factory = getDomainFactory();
		
		if (cci.getIGenericItemInfoID()!=null)
		{
			if (cciType.equals(CciType.ALLERGEN)) 
			{
				return AllergenDetailsAssembler.create((Allergen)factory.getDomainObject(Allergen.class, cci.getIGenericItemInfoID()));
			}
			else if (cciType.equals(CciType.MEDICATION)) 
			{
				return MedicationFullVoAssembler.create((Medication)factory.getDomainObject(Medication.class, cci.getIGenericItemInfoID()));//WDEV-11921
			}
			else if (cciType.equals(CciType.DIAGNOSIS)) 
			{
				return DiagnosisVoAssembler.create((Diagnosis)factory.getDomainObject(Diagnosis.class, cci.getIGenericItemInfoID()));
			}
			else if (cciType.equals(CciType.PROBLEM)) 
			{
				return ProblemConfigVoAssembler.create((ClinicalProblem)factory.getDomainObject(ClinicalProblem.class, cci.getIGenericItemInfoID()));
			}
			else if (cciType.equals(CciType.PROCEDURE)) 
			{
				return ProcedureVoAssembler.create((Procedure)factory.getDomainObject(Procedure.class, cci.getIGenericItemInfoID()));
			}
			else if (cciType.equals(CciType.CANCERIMAGE)) 
			{
				return CancerImagingEventVoAssembler.create((CancerImagingEvent)factory.getDomainObject(CancerImagingEvent.class, cci.getIGenericItemInfoID()));
			}
			else if (cciType.equals(CciType.VACCINE)) 
			{
				return VaccineVoAssembler.create((Vaccine) factory.getDomainObject(Vaccine.class, cci.getIGenericItemInfoID()));
			}
			else if(cciType.equals(CciType.PRESENTING_ISSUE))
			{
				return PresentingComplaintVoAssembler.create((PresentingComplaint) factory.getDomainObject(PresentingComplaint.class, cci.getIGenericItemInfoID()));
			}
			else if(cciType.equals(CciType.TREATMENT_INTERVENTION)) //WDEV-17060
			{
				return TreatmentInterventionVoAssembler.create((TreatmentIntervention) factory.getDomainObject(TreatmentIntervention.class, cci.getIGenericItemInfoID()));
			}
			else
			{
				throw new DomainRuntimeException("Unknown CCI type in 'getCci' = " + cciType.toString());
			} 
		}
		else
			return null;
		
	}

	/**
	 * Attempts to save the given ICciFull based on the CciType. If successful, returns the saved
	 * ICciFull. If unsuccessful, returns null. 
	 * @param ICciFull
	 * @param CciType
	 * @return ICciFull
	 * @throws StaleObjectException 
	 * @throws UniqueKeyViolationException
	 * @author mmccarthy
	 */
	public ICciFull saveCci(ICciFull fullCci, CciType cciType) throws UniqueKeyViolationException, StaleObjectException, DomainInterfaceException
	{
		if (!fullCci.isValidatedCci().booleanValue())
		{
			throw new DomainRuntimeException("This CCI has not be validated.");
		}
		
		DomainFactory factory = getDomainFactory();	
		String methodName = null;
		
		fullCci.setIGenericItemName(fullCci.getIGenericItemInfoName().trim());//wdev-1336
		
		ICciFull savedCci = null;
		DomainObject domCci = null;
		try 
		{			
			if (cciType.equals(CciType.ALLERGEN)) 
			{
				methodName = "getAllergenName";	
				Allergen domAllergen = AllergenDetailsAssembler.extractAllergen(factory, (AllergenDetails)fullCci);	
				if ((fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0)&&domAllergen.getAllergenName()!=null) 
					domAllergen.setKeywords(Keywords.setupKeyWords(domAllergen.getKeywords(), domAllergen.getAllergenName()));
				domCci = domAllergen;
				if (domAllergen.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Allergen name.");
				factory.save(domAllergen);
				savedCci = AllergenDetailsAssembler.create(domAllergen);
			}
			else if (cciType.equals(CciType.MEDICATION)) 
			{
				methodName = "getMedicationName";
				Medication domMedication = MedicationFullVoAssembler.extractMedication(factory, (MedicationFullVo)fullCci);	//WDEV-11921
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domMedication.setKeywords(Keywords.setupKeyWords(domMedication.getKeywords(), domMedication.getMedicationName()));
				domCci = domMedication;
				if (domMedication.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Medication name.");
				factory.save(domMedication);
				savedCci = MedicationFullVoAssembler.create(domMedication);//WDEV-11921
			}
			else if (cciType.equals(CciType.PRESENTING_ISSUE)) 
			{
				methodName = "getPCName";
				PresentingComplaint domPresentingComplaint = PresentingComplaintVoAssembler.extractPresentingComplaint(factory, (PresentingComplaintVo) fullCci);	
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domPresentingComplaint.setKeywords(Keywords.setupKeyWords(domPresentingComplaint.getKeywords(), domPresentingComplaint.getPCName()));
				domCci = domPresentingComplaint;
				if (domPresentingComplaint.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Medication name.");
				factory.save(domPresentingComplaint);
				
				savedCci = PresentingComplaintVoAssembler.create(domPresentingComplaint);
			}
			else if (cciType.equals(CciType.DIAGNOSIS)) 
			{
				methodName = "getDiagnosisName";
				Diagnosis domDiagnosis = DiagnosisVoAssembler.extractDiagnosis(factory, (DiagnosisVo)fullCci);
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domDiagnosis.setKeywords(Keywords.setupKeyWords(domDiagnosis.getKeywords(), domDiagnosis.getDiagnosisName()));
				domCci = domDiagnosis;
				if (domDiagnosis.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Diagnosis name.");
				factory.save(domDiagnosis);
				savedCci = DiagnosisVoAssembler.create(domDiagnosis);
			}
			else if (cciType.equals(CciType.PROBLEM)) 
			{
				methodName = "getPCName";
				ClinicalProblem domProblem = ProblemConfigVoAssembler.extractClinicalProblem(factory, (ProblemConfigVo)fullCci);
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domProblem.setKeywords(Keywords.setupKeyWords(domProblem.getKeywords(), domProblem.getPCName()));
				domCci = domProblem;
				if (domProblem.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Problem name.");
				factory.save(domProblem);
				savedCci = ProblemConfigVoAssembler.create(domProblem);
			}
			else if (cciType.equals(CciType.PROCEDURE)) 
			{
				methodName = "getProcedureName";
				Procedure domProcedure = ProcedureVoAssembler.extractProcedure(factory, (ProcedureVo)fullCci);
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domProcedure.setKeywords(Keywords.setupKeyWords(domProcedure.getKeywords(), domProcedure.getProcedureName()));
				domCci = domProcedure;
				if (domProcedure.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Procedure name.");
				factory.save(domProcedure);
				savedCci = ProcedureVoAssembler.create(domProcedure);
			}
			else if (cciType.equals(CciType.CANCERIMAGE)) 
			{
				methodName = "getImagingEventName";
				CancerImagingEvent domCancerImagingEvent = CancerImagingEventVoAssembler.extractCancerImagingEvent(factory, (CancerImagingEventVo)fullCci);
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domCancerImagingEvent.setKeywords(Keywords.setupKeyWords(domCancerImagingEvent.getKeywords(), domCancerImagingEvent.getImagingEventName()));
				domCci = domCancerImagingEvent;
				if (domCancerImagingEvent.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Cancer Image name.");
				factory.save(domCancerImagingEvent);
				savedCci = CancerImagingEventVoAssembler.create(domCancerImagingEvent);
			}
			else if (cciType.equals(CciType.VACCINE)) 
			{
				methodName = "getVaccineName";
				Vaccine domVaccine = VaccineVoAssembler.extractVaccine(factory, (VaccineVo) fullCci);				
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domVaccine.setKeywords(Keywords.setupKeyWords(domVaccine.getKeywords(), domVaccine.getVaccineName()));
				domCci = domVaccine;
				if (domVaccine.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Vaccine name.");
				factory.save(domVaccine);
				savedCci = VaccineVoAssembler.create(domVaccine);
			}
			else if(cciType.equals(CciType.PRESENTING_ISSUE))
			{
				
				methodName ="getPCName";
				
				PresentingComplaint domComplaint = PresentingComplaintVoAssembler.extractPresentingComplaint(factory,(PresentingComplaintVo) fullCci );
				
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domComplaint.setKeywords(Keywords.setupKeyWords(domComplaint.getKeywords(),domComplaint.getPCName() )); 
				domCci =domComplaint;
				if (domComplaint.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Vaccine name.");
				factory.save(domComplaint);
			
				savedCci = PresentingComplaintVoAssembler.create(domComplaint);
			
			}
			//WDEV-17060
			else if (cciType.equals(CciType.TREATMENT_INTERVENTION)) 
			{
				methodName = "getTreatmentInterventionName";// 	WDEV-17398
				TreatmentIntervention domTreatIntervention = TreatmentInterventionVoAssembler.extractTreatmentIntervention(factory, (TreatmentInterventionVo)fullCci);
				if (fullCci.getCciKeywords() == null || fullCci.getCciKeywords().size() == 0) 
					domTreatIntervention.setKeywords(Keywords.setupKeyWords(domTreatIntervention.getKeywords(), domTreatIntervention.getTreatmentInterventionName()));
				domCci = domTreatIntervention;
				if (domTreatIntervention.getKeywords().size() <= 0)
					throw new DomainInterfaceException("No keywords were created. Please amend Treatment Intervention name.");// 	WDEV-17398
				factory.save(domTreatIntervention);
				savedCci = TreatmentInterventionVoAssembler.create(domTreatIntervention);
			}
			else
			{
				throw new DomainRuntimeException("Unknown CCI Type in 'saveCci' = " + cciType.toString());
			}
		} 
		catch(UnqViolationUncheckedException e)
		{		
			//check for taxonomy map duplication
			String dupMessage = Keywords.checkDuplicateTaxonomy(factory, domCci, fullCci.getCciMappings(), methodName);
			if(dupMessage != null)
				throw new UniqueKeyViolationException(dupMessage);
			
			//else is name duplication
			throw new UniqueKeyViolationException(cciType.toString() + " record called \"" + fullCci.getIGenericItemInfoName() + "\" already exists. Duplicates not allowed.", e);		
		}
		
		return savedCci;
	}

	/**
	* Lists the hotlist shorts associated with a given CCI id.
	* @param Integer
	* @param CciType
	* @return IHotlistShort[]
	* @author mmccarthy
	*/
	public IHotlistShort[] listIHotlistShortsByCCI(Integer cciID, CciType cciType) 
	{
		if (cciID == null)
			return null;
			
		DomainFactory factory = getDomainFactory();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (cciType.equals(CciType.PROBLEM))
		{
			String hql = " select h from ProblemHotlist h join h.hotlistItem as items where items.problem.id like :pcid ";
			markers.add("pcid");
			values.add(cciID);
			return ProblemHotlistShortVoAssembler.createProblemHotlistShortVoCollectionFromProblemHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			String hql = " select h from DiagnosisHotlist h join h.hotListItem as items where items.diagnosis.id like :did ";
			markers.add("did");
			values.add(cciID);
			return DiagnosisHotListShortVoAssembler.createDiagnosisHotListShortVoCollectionFromDiagnosisHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.PROCEDURE))
		{
			String hql = " select h from ProcedureHotlist h join h.hotlistItem as items where items.procedure.id like :pid ";
			markers.add("pid");
			values.add(cciID);
			return ProcedureHotlistShortVoAssembler.createProcedureHotlistShortVoCollectionFromProcedureHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{
			String hql = " select h from CancerImagingHotlist h join h.hotListItem as items where items.cancerImagingEvent.id like :cid ";
			markers.add("cid");
			values.add(cciID);
			return CancerImagingHotlistShortVoAssembler.createCancerImagingHotlistShortVoCollectionFromCancerImagingHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.MEDICATION))
		{
			String hql = " select h from MedicationHotlist h join h.hotListItem as items where items.medication.id like :mid and h.specialty is not null";//WDEV-11888
			markers.add("mid");
			values.add(cciID);
			return MedicationHotlistShortVoAssembler.createMedicationHotlistShortVoCollectionFromMedicationHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			String hql = " select h from PresentingComplaintHotlist h join h.hotListItem as items where items.presentingComplaint.id like :mid ";
			markers.add("mid");
			values.add(cciID);
			return PresentingComplainHotlistVoAssembler.createPresentingComplainHotlistVoCollectionFromPresentingComplaintHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		//WDEV-17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			String hql = " select h from TreatmentInterventionHotlist h join h.hotListItem as items where items.treatmentIntervention.id like :tid ";
			markers.add("tid");
			values.add(cciID);
			return TreatmentInterventionHotlistShortVoAssembler.createTreatmentInterventionHotlistShortVoCollectionFromTreatmentInterventionHotlist(factory.find(hql, markers, values)).sort().toIHotlistShortArray();
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'listIHotlistShortsByCCI' = " + cciType.toString());
		}
	}
	
	/**
	 * Removes a given cci object from a given hotlist and saves based on cci type
	 * @param Integer hotlistID
	 * @param Integer cciID
	 * @param CCiType
	 * @return IHotlistShort
	 * @author mmccarthy
	 */
	public void removeIGenericItemFromHotlist(Integer hotlistID, IGenericItemInfo cciItem, CciType cciType) throws StaleObjectException, ForeignKeyViolationException 
	{
		if (hotlistID == null || cciItem == null)
			return;
		
		DomainFactory factory = getDomainFactory();
		IHotlist iHotlist = null;
		
		if (cciType.equals(CciType.PROCEDURE))
		{
			iHotlist = ProcedureHotlistVoAssembler.create((ProcedureHotlist) factory.getDomainObject(ProcedureHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.PROBLEM))
		{
			iHotlist = ProblemHotlistVoAssembler.create((ProblemHotlist) factory.getDomainObject(ProblemHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			iHotlist = DiagnosisHotListVoAssembler.create((DiagnosisHotlist) factory.getDomainObject(DiagnosisHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{
			iHotlist = CancerImagingHotlistVoAssembler.create((CancerImagingHotlist) factory.getDomainObject(CancerImagingHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			iHotlist = PresentingComplainHotlistVoAssembler.create((PresentingComplaintHotlist) factory.getDomainObject(PresentingComplaintHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.MEDICATION))
		{ 
			iHotlist = MedicationHotlistVoAssembler.create((MedicationHotlist) factory.getDomainObject(MedicationHotlist.class, hotlistID));
		}
		//WDEV-17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			iHotlist = TreatmentInterventionHotlistVoAssembler.create((TreatmentInterventionHotlist) factory.getDomainObject(TreatmentInterventionHotlist.class, hotlistID));
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'removeIGenericItemFromHotlist' = " + cciType.toString());
		}
			
		// this code uses the interface to remove the IHotlistItem from the IHotlist
		if ( iHotlist != null && iHotlist.getIHotlistItems() != null)
		{
			for ( int i = 0; i < iHotlist.getIHotlistItems().length; i++ )
			{
				if (iHotlist.getIHotlistItems()[i].getIGenericItem().equals(cciItem))
				{
					iHotlist.removeIHotlistItem(iHotlist.getIHotlistItems()[i]);			
				}
			}
		}
		
		if (cciType.equals(CciType.PROCEDURE))
		{
			ProcedureHotlist domProcedureHotlist = ProcedureHotlistVoAssembler.extractProcedureHotlist(factory, (ProcedureHotlistVo)iHotlist);
			factory.save(domProcedureHotlist);
			return;
		}
		else if (cciType.equals(CciType.PROBLEM))
		{
			ProblemHotlist domProblemHotlist = ProblemHotlistVoAssembler.extractProblemHotlist(factory, (ProblemHotlistVo)iHotlist);
			factory.save(domProblemHotlist);
			return;
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			DiagnosisHotlist domDiagnosisHotlist = DiagnosisHotListVoAssembler.extractDiagnosisHotlist(factory, (DiagnosisHotListVo)iHotlist);
			factory.save(domDiagnosisHotlist);
			return;
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{
			CancerImagingHotlist domCancerImagingHotlist = CancerImagingHotlistVoAssembler.extractCancerImagingHotlist(factory, (CancerImagingHotlistVo)iHotlist);
			factory.save(domCancerImagingHotlist);
			return;
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			PresentingComplaintHotlist domPresentingComplaintHotlist = PresentingComplainHotlistVoAssembler.extractPresentingComplaintHotlist(factory,(PresentingComplainHotlistVo) iHotlist);
			factory.save(domPresentingComplaintHotlist);
			return;
		}
		else if (cciType.equals(CciType.MEDICATION))
		{ 
			MedicationHotlist domMedsHotlist = MedicationHotlistVoAssembler.extractMedicationHotlist(factory,(MedicationHotlistVo) iHotlist);
			factory.save(domMedsHotlist);
			return;
		}
		//WDEV-17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			TreatmentInterventionHotlist domTreatInterventionHotlist = TreatmentInterventionHotlistVoAssembler.extractTreatmentInterventionHotlist(factory, (TreatmentInterventionHotlistVo)iHotlist);
			factory.save(domTreatInterventionHotlist);
			return;
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'removeIGenericItemFromHotlist' = " + cciType.toString());
		}
	}
	
	/**
	* Lists the hotlist shorts associated with a given LookupInstVo (specialty)
	* @param Integer
	* @param CciType
	* @return IHotlistShort[]
	* @author mmccarthy
	*/
	public IHotlistShort[] listIHotlistShortsBySpecialty(LookupInstVo specialty, CciType cciType)
	{
		if ( specialty == null )
			return null;
			
		DomainFactory factory = getDomainFactory();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		markers.add("specialtyID");
		values.add(Integer.valueOf(specialty.getId()));
		
		if (cciType.equals(CciType.PROBLEM))
		{
			String hql = " from ProblemHotlist as h where h.specialty.id = :specialtyID ";
			return ProblemHotlistShortVoAssembler.createProblemHotlistShortVoCollectionFromProblemHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			String hql = " from DiagnosisHotlist as h where h.specialty.id = :specialtyID ";
			return DiagnosisHotListShortVoAssembler.createDiagnosisHotListShortVoCollectionFromDiagnosisHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.PROCEDURE))
		{
			String hql = " from ProcedureHotlist  as h where h.specialty.id = :specialtyID  ";
			return ProcedureHotlistShortVoAssembler.createProcedureHotlistShortVoCollectionFromProcedureHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{ 
			String hql = " from CancerImagingHotlist  as h where h.specialty.id = :specialtyID  ";
			return CancerImagingHotlistShortVoAssembler.createCancerImagingHotlistShortVoCollectionFromCancerImagingHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.MEDICATION))
		{ 
			String hql = " from MedicationHotlist  as h where h.specialty.id = :specialtyID  ";
			return MedicationHotlistShortVoAssembler.createMedicationHotlistShortVoCollectionFromMedicationHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			String hql = " from PresentingComplaintHotlist as h where h.specialty.id = :specialtyID ";
			return PresentingComplainHotlistVoAssembler.createPresentingComplainHotlistVoCollectionFromPresentingComplaintHotlist(factory.find(hql,markers,values)).toIHotlistShortArray();
		}
		//WDEV_17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			String hql = " from TreatmentInterventionHotlist as h where h.specialty.id = :specialtyID ";
			return TreatmentInterventionHotlistShortVoAssembler.createTreatmentInterventionHotlistShortVoCollectionFromTreatmentInterventionHotlist(factory.find(hql, markers, values)).toIHotlistShortArray();
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'listIHotlistShortsBySpecialty' = " + cciType.toString());
		}
	}
	
	/**
	 * Adds a given cci object to a given hotlist and saves based on cci type
	 * @param Integer hotlistID
	 * @param Integer cciID
	 * @param CCiType
	 * @return IHotlistShort
	 * @author mmccarthy
	 */
	public IHotlistShort addIGenericItemToHotlist(Integer hotlistID, IGenericItemInfo cciItem, CciType cciType) throws StaleObjectException, UniqueKeyViolationException
	{
		if (hotlistID == null || cciItem == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		IHotlist iHotlist = null;
		
		if (cciType.equals(CciType.PROCEDURE))
		{
			iHotlist = ProcedureHotlistVoAssembler.create((ProcedureHotlist) factory.getDomainObject(ProcedureHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.PROBLEM))
		{
			iHotlist = ProblemHotlistVoAssembler.create((ProblemHotlist) factory.getDomainObject(ProblemHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			iHotlist = DiagnosisHotListVoAssembler.create((DiagnosisHotlist) factory.getDomainObject(DiagnosisHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{
			iHotlist = CancerImagingHotlistVoAssembler.create((CancerImagingHotlist) factory.getDomainObject(CancerImagingHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.MEDICATION))
		{
			iHotlist = MedicationHotlistVoAssembler.create((MedicationHotlist) factory.getDomainObject(MedicationHotlist.class, hotlistID));
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			iHotlist = PresentingComplainHotlistVoAssembler.create((PresentingComplaintHotlist) factory.getDomainObject(PresentingComplaintHotlist.class, hotlistID));
		}
		//WDEV-17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			iHotlist =TreatmentInterventionHotlistVoAssembler.create((TreatmentInterventionHotlist) factory.getDomainObject(TreatmentInterventionHotlist.class, hotlistID));
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'addIGenericItemToHotlist' = " + cciType.toString());
		}
		
		if ( iHotlist != null )
		{
			iHotlist.addIHotlistItem(cciItem);			
		}
		
		if (cciType.equals(CciType.PROCEDURE))
		{
			ProcedureHotlist domProcedureHotlist = ProcedureHotlistVoAssembler.extractProcedureHotlist(factory, (ProcedureHotlistVo)iHotlist);
			factory.save(domProcedureHotlist);
			return ProcedureHotlistShortVoAssembler.create(domProcedureHotlist);
		}
		else if (cciType.equals(CciType.PROBLEM))
		{
			ProblemHotlist domProblemHotlist = ProblemHotlistVoAssembler.extractProblemHotlist(factory, (ProblemHotlistVo)iHotlist);
			factory.save(domProblemHotlist);
			return ProblemHotlistShortVoAssembler.create(domProblemHotlist);
		}
		else if (cciType.equals(CciType.DIAGNOSIS))
		{
			DiagnosisHotlist domDiagnosisHotlist = DiagnosisHotListVoAssembler.extractDiagnosisHotlist(factory, (DiagnosisHotListVo)iHotlist);
			factory.save(domDiagnosisHotlist);
			return DiagnosisHotListShortVoAssembler.create(domDiagnosisHotlist);
		}
		else if (cciType.equals(CciType.CANCERIMAGE))
		{
			CancerImagingHotlist domCancerImagingHotlist = CancerImagingHotlistVoAssembler.extractCancerImagingHotlist(factory, (CancerImagingHotlistVo)iHotlist);
			factory.save(domCancerImagingHotlist);
			return CancerImagingHotlistShortVoAssembler.create(domCancerImagingHotlist);
		}
		else if (cciType.equals(CciType.MEDICATION))
		{
			MedicationHotlist domMedicationHotlist = MedicationHotlistVoAssembler.extractMedicationHotlist(factory, (MedicationHotlistVo)iHotlist);
			factory.save(domMedicationHotlist);
			return MedicationHotlistShortVoAssembler.create(domMedicationHotlist);
		}
		else if (cciType.equals(CciType.PRESENTING_ISSUE))
		{
			PresentingComplaintHotlist domPresentingComplaintHotlist = PresentingComplainHotlistVoAssembler.extractPresentingComplaintHotlist(factory, (PresentingComplainHotlistVo) iHotlist);
			factory.save(domPresentingComplaintHotlist);
			return PresentingComplainHotlistVoAssembler.create(domPresentingComplaintHotlist);
		}
		//WDEV-17060
		else if (cciType.equals(CciType.TREATMENT_INTERVENTION))
		{
			TreatmentInterventionHotlist domTeatmentInterventionHotlist = TreatmentInterventionHotlistVoAssembler.extractTreatmentInterventionHotlist(factory, (TreatmentInterventionHotlistVo)iHotlist);
			factory.save(domTeatmentInterventionHotlist);
			return TreatmentInterventionHotlistShortVoAssembler.create(domTeatmentInterventionHotlist);
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'addIGenericItemToHotlist' = " + cciType.toString());
		}
	}
	
	/**
	 * Saves a given IHotlistShort based on its value object type
	 * @param IHotlistShort
	 * @return IHotlistShort
	 * @author mmccarthy
	 */
	public IHotlistShort saveIHotlistShort(IHotlistShort iHotlistShort) throws StaleObjectException 
	{
		if ( iHotlistShort == null )
		{
			throw new DomainRuntimeException ("Null parameter passed to 'saveIHotlistShort'");
		}
		
		DomainFactory factory = getDomainFactory();
		
		if ( iHotlistShort instanceof ProblemHotlistShortVo )
		{
			ProblemHotlist domProblemHotlist = ProblemHotlistShortVoAssembler.extractProblemHotlist(factory, (ProblemHotlistShortVo)iHotlistShort);
			factory.save(domProblemHotlist);
			return ProblemHotlistShortVoAssembler.create(domProblemHotlist);
		}
		else if ( iHotlistShort instanceof ProcedureHotlistShortVo )
		{
			ProcedureHotlist domProcedureHotlist = ProcedureHotlistShortVoAssembler.extractProcedureHotlist(factory, (ProcedureHotlistShortVo)iHotlistShort);
			factory.save(domProcedureHotlist);
			return ProcedureHotlistShortVoAssembler.create(domProcedureHotlist);
		}
		else if ( iHotlistShort instanceof DiagnosisHotListShortVo )
		{
			DiagnosisHotlist domDiagnosisHotlist = DiagnosisHotListShortVoAssembler.extractDiagnosisHotlist(factory, (DiagnosisHotListShortVo)iHotlistShort);
			factory.save(domDiagnosisHotlist);
			return DiagnosisHotListShortVoAssembler.create(domDiagnosisHotlist);
		}
		else if ( iHotlistShort instanceof CancerImagingHotlistShortVo )
		{
			CancerImagingHotlist domCancerImagingHotlist = CancerImagingHotlistShortVoAssembler.extractCancerImagingHotlist(factory, (CancerImagingHotlistShortVo)iHotlistShort);
			factory.save(domCancerImagingHotlist);
			return CancerImagingHotlistShortVoAssembler.create(domCancerImagingHotlist);
		}
		else if ( iHotlistShort instanceof MedicationHotlistShortVo )
		{
			MedicationHotlist domMedicationHotlist = MedicationHotlistShortVoAssembler.extractMedicationHotlist(factory, (MedicationHotlistShortVo)iHotlistShort);
			factory.save(domMedicationHotlist);
			return MedicationHotlistShortVoAssembler.create(domMedicationHotlist);
		}
		else if ( iHotlistShort instanceof PresentingComplainHotlistVo)
		{
			PresentingComplaintHotlist domPresentingComplainHotlist = PresentingComplainHotlistVoAssembler.extractPresentingComplaintHotlist(factory, (PresentingComplainHotlistVo) iHotlistShort);
			factory.save(domPresentingComplainHotlist);
			return PresentingComplainHotlistVoAssembler.create(domPresentingComplainHotlist);
		}
		//WDEV-17060
		else if ( iHotlistShort instanceof TreatmentInterventionHotlistShortVo)
		{
			TreatmentInterventionHotlist domTreatmentInterventionHotlist = TreatmentInterventionHotlistShortVoAssembler.extractTreatmentInterventionHotlist(factory, (TreatmentInterventionHotlistShortVo) iHotlistShort);
			factory.save(domTreatmentInterventionHotlist);
			return TreatmentInterventionHotlistShortVoAssembler.create(domTreatmentInterventionHotlist);
		}
		else
		{
			throw new DomainRuntimeException("Unknown CCI Type in 'saveIHotlistShort'");
		}
	}

	public IGenericItem[] listIGenericItems(String filter, CciType cciType, Boolean activeOnly)
	{
		List resultsList;
		
		try
		{
			resultsList = listDomIGenericItemInfo(filter, cciType, activeOnly.booleanValue());
		}
		catch (DomainInterfaceException e)
		{
			return null;
		}
		
		if (resultsList.size() > 0)
		{
			if (cciType.equals(CciType.ALLERGEN)) 
			{
				return AllergenVoAssembler.createAllergenVoCollectionFromAllergen(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.MEDICATION)) 
			{
				return MedicationLiteVoAssembler.createMedicationLiteVoCollectionFromMedication(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.DIAGNOSIS)) 
			{
				return DiagLiteVoAssembler.createDiagLiteVoCollectionFromDiagnosis(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.PROBLEM)) 
			{
				return ClinicalProblemShortVoAssembler.createClinicalProblemShortVoCollectionFromClinicalProblem(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.PROCEDURE)) 
			{
				return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.CANCERIMAGE)) 
			{
				return CancerImagingEventLiteVoAssembler.createCancerImagingEventLiteVoCollectionFromCancerImagingEvent(resultsList).toIGenericItemArray();
			}
			else if (cciType.equals(CciType.VACCINE)) 
			{
				return VaccineLiteVoAssembler.createVaccineLiteVoCollectionFromVaccine(resultsList).toIGenericItemArray();
			}
			else if(cciType.equals(CciType.PRESENTING_ISSUE))
			{
				
				return PresentingComplaintVoAssembler.createPresentingComplaintVoCollectionFromPresentingComplaint(resultsList).toICciFullArray();
				
			}
			else if(cciType.equals(CciType.TREATMENT_INTERVENTION))//WDEV-17060
			{	
				return TreatmentInterventionVoAssembler.createTreatmentInterventionVoCollectionFromTreatmentIntervention(resultsList).toICciFullArray();	
			}
			else
			{
				throw new DomainRuntimeException("Unknown CCI Type in 'listCciLite' = " + cciType.toString());
			}
		}
		return null;
	}
}
