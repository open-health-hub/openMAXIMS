//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.domain.impl;

import ims.clinicaladmin.domain.base.impl.BasePrognosticRiskConfigImpl;
import ims.clinicaladmin.vo.PrognosticRiskConfigVo;
import ims.clinicaladmin.vo.PrognosticRiskConfigVoCollection;
import ims.clinicaladmin.vo.domain.PrognosticRiskConfigVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.oncology.configuration.domain.objects.PrognosticRiskConfiguration;
import ims.oncology.configuration.vo.PrognosticRiskConfigurationRefVo;

public class PrognosticRiskConfigImpl extends BasePrognosticRiskConfigImpl
{

	private static final long serialVersionUID = 1L;

	public PrognosticRiskConfigVoCollection listPrognosticRisks() 
	{
		DomainFactory factory = getDomainFactory();	
		
		String query = "from PrognosticRiskConfiguration as prsk order by riskName";

		return PrognosticRiskConfigVoAssembler.createPrognosticRiskConfigVoCollectionFromPrognosticRiskConfiguration(factory.find(query));
	}

	public PrognosticRiskConfigVo getPrognosticRisk(PrognosticRiskConfigurationRefVo prognosticRiskRef) 
	{
		if(prognosticRiskRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();		
		
		return PrognosticRiskConfigVoAssembler.create((PrognosticRiskConfiguration) factory.getDomainObject(PrognosticRiskConfiguration.class, prognosticRiskRef.getID_PrognosticRiskConfiguration()));

	}

	public PrognosticRiskConfigVo savePrognosticRisk(PrognosticRiskConfigVo prognosticRiskVo) throws DomainInterfaceException, StaleObjectException 
	{
		if(prognosticRiskVo == null)
			throw new DomainRuntimeException("prognosticRiskVo parameter is null in method savePrognosticRisk");
		
		if(!prognosticRiskVo.isValidated())
			throw new DomainRuntimeException("This Prognostic Risk has not been validated");
		
		PrognosticRiskConfiguration prognosticRisk = PrognosticRiskConfigVoAssembler.extractPrognosticRiskConfiguration(getDomainFactory(), prognosticRiskVo);
		getDomainFactory().save(prognosticRisk);
		
		return PrognosticRiskConfigVoAssembler.create(prognosticRisk);
	}

}
