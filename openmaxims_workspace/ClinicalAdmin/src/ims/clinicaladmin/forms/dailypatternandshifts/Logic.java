//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2421.18554)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.dailypatternandshifts;

import ims.clinicaladmin.forms.dailypatternandshifts.GenForm.grdShiftsRow;
import ims.clinicaladmin.helper.DailyPatternAndShiftsHelper;
import ims.clinicaladmin.vo.DailyPatternConfigVo;
import ims.clinicaladmin.vo.DailyPatternShortConfigVo;
import ims.clinicaladmin.vo.DailyPatternShortConfigVoCollection;
import ims.clinicaladmin.vo.SignatoryPeriodConfigVo;
import ims.clinicaladmin.vo.SignatoryPeriodConfigVoCollection;
import ims.core.vo.lookups.DailyTimePeriods;
import ims.core.vo.lookups.DailyTimePeriodsCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.GridMutableComboBox;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();		
		open();
	}
	
	private void open() 
	{
		clearScreen();
		
		fillTypeGrid(domain.list());
		form.setMode(FormMode.VIEW);
	}
	
	private void updateControls() 
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(true);
			if (form.grdType().getRows() != null && form.grdType().getSelectedRow() != null)
				form.btnUpdate().setEnabled(form.grdType().getSelectedRow().getValue() != null);
			else
				form.btnUpdate().setEnabled(false);
		}
		
		form.cmbNumberOfShifts().setEnabled(form.getMode().equals(FormMode.EDIT) && Boolean.TRUE.equals(form.chkUsePeriods().getValue())); //WDEV-15339
	}

	private void fillTypeGrid(DailyPatternShortConfigVoCollection collection) 
	{
		if (collection != null && collection.size() > 0)
		{
			form.grdType().getRows().clear();
			
			for (int i = 0 ; i < collection.size() ; i++)
			{
				ims.clinicaladmin.forms.dailypatternandshifts.GenForm.grdTypeRow row = form.grdType().getRows().newRow();
				row.setColType(collection.get(i).getDailyPatternType().getText());
				row.setValue(collection.get(i));
			}
		}
	}

	private void initialize() 
	{
		form.getLocalContext().setPatternTypesCollection(ims.core.vo.lookups.LookupHelper.getDailyPatternType(domain.getLookupService()));

		for(int i = 1 ; i < 25 ; i++)
			form.cmbNumberOfShifts().newRow(new Integer(i), new Integer(i).toString());
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
			form.setMode(FormMode.VIEW);
		}
	}
	
	private boolean save() 
	{
		if (!validateTimePeriods())
			return false;
		
		populateDataFromScreen();
		
		DailyPatternConfigVo voPattern = form.getLocalContext().getSelectedDailyPatternConfigVo();
		
		String[] errors = voPattern.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			voPattern = domain.save(voPattern);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		return true;
	}

	private boolean validateTimePeriods() 
	{
		if (form.grdShifts().getRows().size() > 0)
		{
			DailyTimePeriodsCollection lookupCollection = form.getLocalContext().getCustomTimePeriodsCollection();

			if ( (form.grdShifts().getRows().size() > 0) && (form.chkUsePeriods().getValue() == false) )
			{
				engine.showMessage("Contains Signatory Periods needs to be checked.");
				return false;
			}
				
			for (int i = 0 ; i < form.grdShifts().getRows().size() ; i++)
			{
				if ( (form.grdShifts().getRows().get(i).getStartTime().getValue() == null)
					|| (form.grdShifts().getRows().get(i).getEndTime().getValue() == null) )
				{
					engine.showMessage("Both Start and End times are needed.");
					return false;
				}
				

				if (form.grdShifts().getRows().get(i).getStartTime().getValue() == form.grdShifts().getRows().get(i).getEndTime().getValue())
				{
					engine.showMessage("The Start time of a row is the same as its End time.");
					return false;
				}
				
				//Peek Forward to next row start time
				if (form.grdShifts().getRows().size() > i + 1)
				{
					if (form.grdShifts().getRows().get(i+1).getStartTime().getValue() == form.grdShifts().getRows().get(i).getEndTime().getValue())
					{
						engine.showMessage("The End time of a row and the start time of the next row should not be the same.");
						return false;
					}
				}
				//And they should be consecutive.
				if  ( (lookupCollection.size() > 0) && (form.grdShifts().getRows().size() > i + 1) )
				{
					for(int j = 0 ; j < lookupCollection.size() ; j++)
					{
						//Find the lookup that is equal to the next rows start time
						if ( lookupCollection.get(j).equals(form.grdShifts().getRows().get(i + 1).getStartTime().getValue()))
						{
							//Now see if the previous element in the collection is the same as this rows end time....if so they are consecutive
							if ( (j > 0) && (lookupCollection.get(j - 1) != form.grdShifts().getRows().get(i).getEndTime().getValue()) )
							{
								engine.showMessage("The Start time of a row is not the slot following the end time of the previous row.");
								return false;
							}
						}
					}
				}
			}
			
			if (form.grdShifts().getRows().get(form.grdShifts().getRows().size() - 1).getEndTime().getValue() == form.grdShifts().getRows().get(0).getStartTime().getValue())
			{
				engine.showMessage("The End time of the last row should not be the same as the Start time of the first row.");
				return false;
			}

			//Finally check the last end time is just before the satrt time
			if (lookupCollection.size() > 0)
			{
				if ( ! lookupCollection.get(0).equals(form.grdShifts().getRows().get(0).getStartTime().getValue()))
				{
					engine.showMessage("The Start time for the first shift should be the same as the first time slot available.");
					return false;
				}
				
				if ( ! lookupCollection.get(lookupCollection.size() - 1).equals(form.grdShifts().getRows().get(form.grdShifts().getRows().size() - 1).getEndTime().getValue()))
				{
					engine.showMessage("The End time for the last shift should be the same as the last time slot available.");
					return false;
				}
			}
		}
		else{
			if(form.chkUsePeriods().getValue()){
				engine.showMessage("Periods must be entered when 'Contains Signatory Periods' is selected.");
				return false;
			}
		}
		
		return true;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		
		open();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPatternTypesCollectionIsNotNull() && form.getLocalContext().getPatternTypesCollection().size() > 0)
		{
			form.setMode(FormMode.EDIT);
			clearScreen();
			form.cmbType().clear();
			form.getLocalContext().setSelectedDailyPatternConfigVo(null);
			for( int i = 0 ; i < form.getLocalContext().getPatternTypesCollection().size() ; i++)
			{
				//For any records in the PatternTypesCollection, check to see if there is a Pattern already saved. 
				//If so do not add it to the Daily Pattern Type Combo
				boolean bFound = false;
				
				for (int j = 0 ; j < form.grdType().getRows().size() ; j++)
				{
					if (form.grdType().getRows().get(j).getValue().getDailyPatternType().equals(form.getLocalContext().getPatternTypesCollection().get(i)))
						bFound = true;
				}
				if (!bFound)
					form.cmbType().newRow(form.getLocalContext().getPatternTypesCollection().get(i), form.getLocalContext().getPatternTypesCollection().get(i).getText());
			}
		}
		else
			engine.showMessage("There are no Pattern Types available to configure.");
	}
	
	private void clearScreen() 
	{
		form.cmbType().setValue(null);
		form.timStart().setValue(null);
		form.chkUsePeriods().setValue(false);
		form.cmbNumberOfShifts().setValue(null);
		form.grdShifts().getRows().clear();
		
	}

	protected void onGrdTypeSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdType().getValue() != null && form.grdType().getValue() instanceof DailyPatternShortConfigVo)
			populateScreenFromData(domain.get(form.grdType().getValue()));
		
		updateControls();
	}
	
	private void populateScreenFromData(DailyPatternConfigVo voPattern) 
	{
		clearScreen();
		
		if (voPattern != null)
		{
			form.cmbType().newRow(voPattern.getDailyPatternType(), voPattern.getDailyPatternType().getText());
			form.cmbType().setValue(voPattern.getDailyPatternTypeIsNotNull() ? voPattern.getDailyPatternType() : null);

			form.timStart().setValue(voPattern.getStartTimeIsNotNull() ? voPattern.getStartTime() : null);
			form.chkUsePeriods().setValue(voPattern.getUseSignatoryPeriodsIsNotNull() ? voPattern.getUseSignatoryPeriods().booleanValue() : false);
			form.cmbNumberOfShifts().setValue(voPattern.getSignatoryPeriodIsNotNull() ? new Integer(voPattern.getSignatoryPeriod().size()) : new Integer(0));
			
			loadCustomTimePeriodsIntoLocalContext();
			
			if (voPattern.getSignatoryPeriodIsNotNull())
			{
				for (int i = 0 ; i < voPattern.getSignatoryPeriod().size() ; i++)
				{
					ims.clinicaladmin.forms.dailypatternandshifts.GenForm.grdShiftsRow row = form.grdShifts().getRows().newRow();
					
					row.setDescription(voPattern.getSignatoryPeriod().get(i).getName());
					if (voPattern.getSignatoryPeriod().get(i).getTimePeriodsIsNotNull() 
						&& voPattern.getSignatoryPeriod().get(i).getTimePeriods().size() > 0)
					{
						loadCustomTimePeriodsIntoCombo(row.getStartTime());
						loadCustomTimePeriodsIntoCombo(row.getEndTime());

						row.getStartTime().setValue(voPattern.getSignatoryPeriod().get(i).getTimePeriods().get(0));
						row.getEndTime().setValue(voPattern.getSignatoryPeriod().get(i).getTimePeriods().get(voPattern.getSignatoryPeriod().get(i).getTimePeriods().size() - 1));
					}
					row.setValue(voPattern.getSignatoryPeriod().get(i));
				}
			}
			form.getLocalContext().setSelectedDailyPatternConfigVo(voPattern);
		}
		else
			form.getLocalContext().setSelectedDailyPatternConfigVo(null);

	}

	
	private void populateDataFromScreen() 
	{
		ims.clinicaladmin.vo.DailyPatternConfigVo voPattern = form.getLocalContext().getSelectedDailyPatternConfigVo();
		if (voPattern == null)
			voPattern = new ims.clinicaladmin.vo.DailyPatternConfigVo();
		
		voPattern.setDailyPatternType(form.cmbType().getValue());
		voPattern.setUseSignatoryPeriods(new Boolean(form.chkUsePeriods().getValue()));
		voPattern.setStartTime(form.timStart().getValue());
		voPattern.setIsActive(Boolean.TRUE);
		
		SignatoryPeriodConfigVoCollection voPeriodColl = new SignatoryPeriodConfigVoCollection();
		
		if (form.grdShifts().getRows().size() > 0)
		{
			for (int i = 0 ; i < form.grdShifts().getRows().size() ; i++)
			{
				SignatoryPeriodConfigVo voPeriod = new SignatoryPeriodConfigVo();
				voPeriod.setTimePeriods(new DailyTimePeriodsCollection());
				voPeriod.setName(form.grdShifts().getRows().get(i).getDescription());
				fillSignatoryPeriods(voPeriod, form.grdShifts().getRows().get(i));
				voPeriodColl.add(voPeriod);
			}
		}
		voPattern.setSignatoryPeriod(voPeriodColl);
		form.getLocalContext().setSelectedDailyPatternConfigVo(voPattern);
	}
	
	private void fillSignatoryPeriods(SignatoryPeriodConfigVo voPeriod, grdShiftsRow row) 
	{
		DailyTimePeriodsCollection lookupCollection = form.getLocalContext().getCustomTimePeriodsCollection();

		boolean bFinished = false;
		for (int i = 0 ; i < lookupCollection.size() ; i++)
		{
			if (lookupCollection.get(i).equals(row.getStartTime().getValue()))
			{
				DailyTimePeriods voLookup = (DailyTimePeriods)row.getStartTime().getValue();
				voLookup.setText(row.getStartTime().getEditedText());
				voPeriod.getTimePeriods().add(voLookup);
				
				for (int j = i + 1 ; j < lookupCollection.size() ; j++)
				{
					voPeriod.getTimePeriods().add(lookupCollection.get(j));
					if (lookupCollection.get(j).equals(row.getEndTime().getValue()))
					{
						bFinished = true;
						break;
					}
				}
				if (bFinished)
					break;
			}
		}
	}

	private void loadCustomTimePeriodsIntoLocalContext()
	{
		if (form.timStart().getValue() != null)
		{
			DailyTimePeriodsCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDailyTimePeriods(domain.getLookupService());
			DailyPatternAndShiftsHelper helper = new DailyPatternAndShiftsHelper();
			form.getLocalContext().setCustomTimePeriodsCollection(helper.configureCustomTimePeriods(form.timStart().getValue(), lookupCollection));
		}
	}

	protected void onTimStartValueChanged() throws PresentationLogicException 
	{

		if(form.cmbNumberOfShifts().getValue() == null)
		{
			loadCustomTimePeriodsIntoLocalContext();
			return;
		}
			
		else
		{
			loadCustomTimePeriodsIntoLocalContext();
			onCmbNumberOfShiftsValueChanged();

		}
	
	}

	private void loadCustomTimePeriodsIntoCombo(GridMutableComboBox cmbToFill) 
	{
		for (int i = 0 ; i < form.getLocalContext().getCustomTimePeriodsCollection().size() ; i++)
			cmbToFill.newRow(form.getLocalContext().getCustomTimePeriodsCollection().get(i), form.getLocalContext().getCustomTimePeriodsCollection().get(i).getText());
	}

	protected void onCmbNumberOfShiftsValueChanged() throws PresentationLogicException 
	{
		if (form.timStart().getValue() == null)
		{
			engine.showMessage("Please select a Shift Start time.");
			form.cmbNumberOfShifts().setValue(null);
			return;
		}
		
		form.grdShifts().getRows().clear();
		
		if (form.cmbNumberOfShifts().getValue() != null)
		{
			for (int i = 0 ; i < form.cmbNumberOfShifts().getValue().intValue() ; i ++)
			{
				ims.clinicaladmin.forms.dailypatternandshifts.GenForm.grdShiftsRow row = form.grdShifts().getRows().newRow();
				
				row.setDescription("Please change.");
				loadCustomTimePeriodsIntoCombo(row.getStartTime());
				loadCustomTimePeriodsIntoCombo(row.getEndTime());
				
				if (i == 0)
					row.getStartTime().setValue(form.getLocalContext().getCustomTimePeriodsCollection().get(0));
			}
		}
		
	}

	@Override //WDEV-15339
	protected void onChkUsePeriodsValueChanged() throws PresentationLogicException 
	{
		if (Boolean.FALSE.equals(form.chkUsePeriods().getValue()))
		{
			form.cmbNumberOfShifts().setValue(null);
			onCmbNumberOfShiftsValueChanged();
		}
		
		updateControls();
				
		
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControls();
	}
	
}
