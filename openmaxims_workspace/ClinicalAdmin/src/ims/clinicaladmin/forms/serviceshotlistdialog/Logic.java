//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.serviceshotlistdialog;

import ims.clinicaladmin.forms.serviceshotlistdialog.GenForm.grdHotlistRow;
import ims.core.vo.ServiceShortVoCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateServiceGrid();
		checkPresentServices();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ServiceShortVoCollection serviceCol = new ServiceShortVoCollection();
		
		for ( int i = 0; i < form.grdHotlist().getRows().size(); i++ )
		{
			if ( form.grdHotlist().getRows().get(i).getColPresent() )
			{
				serviceCol.add(form.grdHotlist().getRows().get(i).getValue());
			}
		}
				
		form.getGlobalContext().ClinicalAdmin.setServices(serviceCol);
		engine.close(DialogResult.OK);
	}
	private void populateServiceGrid()
	{
		form.grdHotlist().getRows().clear();
		ServiceShortVoCollection shortVoCol = domain.listServices();
		if(shortVoCol != null && shortVoCol.size() > 0)
		{
			for(int i = 0; i < shortVoCol.size();i++)
			{
				grdHotlistRow row = form.grdHotlist().getRows().newRow();
				row.setColHotlist(shortVoCol.get(i).getServiceNameIsNotNull()?shortVoCol.get(i).getServiceName():"");
				row.setValue(shortVoCol.get(i));
			}
		}
	}
	private void checkPresentServices()
	{
		if(form.getGlobalContext().ClinicalAdmin.getServicesIsNotNull())
		{
			ServiceShortVoCollection shortVoColl = domain.getServicesInList(form.getGlobalContext().ClinicalAdmin.getServices());
			ServiceShortVoCollection savedAndInactiveService = new ServiceShortVoCollection();
			if(shortVoColl != null)
			{
				for(int i = 0;i < shortVoColl.size();i++)
				{
					if(	Boolean.FALSE.equals(shortVoColl.get(i).getIsActive()))
					{
						savedAndInactiveService.add(shortVoColl.get(i));
						continue;
					}
					for(int j = 0;j < form.grdHotlist().getRows().size(); j++ )
					{
						if ( form.grdHotlist().getRows().get(j).getValue().equals(shortVoColl.get(i)))
						{
							form.grdHotlist().getRows().get(j).setColPresent(true);
						}
					}
				}
				if(savedAndInactiveService != null && savedAndInactiveService.size() > 0)
				{
					for(int i = 0; i < savedAndInactiveService.size();i++)
					{
						grdHotlistRow row = form.grdHotlist().getRows().newRow();
						row.setColHotlist(savedAndInactiveService.get(i).getServiceNameIsNotNull()?savedAndInactiveService.get(i).getServiceName():"");
						row.setValue(savedAndInactiveService.get(i));
						row.setColPresent(true);
					}
				}
			
			}
			
		}
	}
}
