//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3379.24044)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.motorchartareadetail;

import ims.core.vo.MotorChartAreaDetailVo;
import ims.core.vo.VertebrallevelVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	//----------------------------------------------------------------------------------------------------------------------------
	// EVENT HANDLERS region
	//----------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	
	//-----------------------------------------------------------------------------------------------------------------------------
	// FORM UI Functions
	//-----------------------------------------------------------------------------------------------------------------------------

	public void initialize() throws FormOpenException
	{
		if (form.getGlobalContext().ClinicalAdmin.getMotorChartDetails() == null)
			form.getGlobalContext().ClinicalAdmin.setMotorChartDetails(new MotorChartAreaDetailVo());
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		
		populateScreenFromData(form.getGlobalContext().ClinicalAdmin.getMotorChartDetails());
	}
	
	public void clearInstanceControls()
	{
		form.richMotorArea().setValue(null);
		form.chkUppLimb().setValue(null);
		form.chkLowLimb().setValue(null);
		form.chkActive().setValue(null);
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO: Add you code here.
	}
	
	public void updateInstance()
	{
		// TODO: Add you code here.
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		MotorChartAreaDetailVo tempValue = populateDataFromScreen((MotorChartAreaDetailVo) (form.getGlobalContext().ClinicalAdmin.getMotorChartDetails()).clone());
		
		String[] errors = tempValue.validate();
		
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getGlobalContext().ClinicalAdmin.setMotorChartDetails(tempValue);

		return true;
	}
	
	public void updateControlsState()
	{
		// TODO: Add you code here.
	}
	
	//----------------------------------------------------------------------------------------------------------------------------
	// Override data binding functions
	//----------------------------------------------------------------------------------------------------------------------------
	
	protected void populateScreenFromData(MotorChartAreaDetailVo motorChartAreaDetailVo)
	{
		clearInstanceControls();
		
		if (motorChartAreaDetailVo == null)
			return;
		
		form.richMotorArea().setValue(motorChartAreaDetailVo.getMotorAreaDescription());
		
		if (motorChartAreaDetailVo.getIsUpperLimbIsNotNull())
			form.chkUppLimb().setValue(motorChartAreaDetailVo.getIsUpperLimb());
		
		if (motorChartAreaDetailVo.getIsLowerLimbIsNotNull())
			form.chkLowLimb().setValue(motorChartAreaDetailVo.getIsLowerLimb());
		
		if (motorChartAreaDetailVo.getIsActiveIsNotNull())
			form.chkActive().setValue(motorChartAreaDetailVo.getIsActive());
	}
	
	protected MotorChartAreaDetailVo populateDataFromScreen()
	{
		return populateDataFromScreen(null);
	}
	
	protected MotorChartAreaDetailVo populateDataFromScreen(MotorChartAreaDetailVo motorChartAreaDetailVo)
	{
		if (motorChartAreaDetailVo == null)
			motorChartAreaDetailVo = new MotorChartAreaDetailVo();
		
		motorChartAreaDetailVo.setMotorAreaDescription(form.richMotorArea().getValue());
		motorChartAreaDetailVo.setIsUpperLimb(form.chkUppLimb().getValue());
		motorChartAreaDetailVo.setIsLowerLimb(form.chkLowLimb().getValue());
		motorChartAreaDetailVo.setIsActive(form.chkActive().getValue());
		
		return motorChartAreaDetailVo;
	}
}
