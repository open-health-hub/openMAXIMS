//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.tumourcategory;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(384, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuTumourCategory = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuTumourCategoryNewCategoryItem = factory.createMenuItem(startControlID.intValue() + 1, "New Category", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryNewCategoryItem);
		contextMenus.contextMenuTumourCategoryEditCategoryItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Category", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryEditCategoryItem);
		contextMenus.contextMenuTumourCategoryNewVersionItem = factory.createMenuItem(startControlID.intValue() + 3, "New Version", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryNewVersionItem);
		contextMenus.contextMenuTumourCategoryNewGroupItem = factory.createMenuItem(startControlID.intValue() + 4, "New Group", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryNewGroupItem);
		contextMenus.contextMenuTumourCategoryEditGroupItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Group", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryEditGroupItem);
		contextMenus.contextMenuTumourCategoryNewSiteItem = factory.createMenuItem(startControlID.intValue() + 6, "New Site", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryNewSiteItem);
		contextMenus.contextMenuTumourCategoryEditSiteItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit Site", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryEditSiteItem);
		contextMenus.contextMenuTumourCategoryOverallStagingItem = factory.createMenuItem(startControlID.intValue() + 8, "Overall Staging", true, false, new Integer(103111), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryOverallStagingItem);
		contextMenus.contextMenuTumourCategoryOverallPrognosticItem = factory.createMenuItem(startControlID.intValue() + 9, "Overall Prognostic", true, false, new Integer(103111), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryOverallPrognosticItem);
		contextMenus.contextMenuTumourCategoryADIItem = factory.createMenuItem(startControlID.intValue() + 10, "Aditional Data Items", true, false, new Integer(102258), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryADIItem);
		contextMenus.contextMenuTumourCategoryHDIItem = factory.createMenuItem(startControlID.intValue() + 11, "Aditional Histopathology Items", true, false, new Integer(102258), true, false);
		contextMenus.contextMenuTumourCategory.add(contextMenus.contextMenuTumourCategoryHDIItem);
		form.registerMenu(contextMenus.contextMenuTumourCategory);


		// CheckBox Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View Active Only", Boolean.TRUE, null}));

		// Tree Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 368, 608, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuTumourCategory, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(0);
	}
	public TreeView treCategoryGroupSite()
	{
		return (TreeView)super.getControl(1);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
			Clinical = new ClinicalImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(16), new Integer(16));
				OrgDisabled = new ImageHelper(103142, "Images/Admin/organisation_dis.png", new Integer(16), new Integer(16));
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				LocDisabled = new ImageHelper(103143, "Images/Admin/location_dis.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
				LocSiteDisabled = new ImageHelper(103144, "Images/Admin/location_site_dis.png", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image OrgDisabled;
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image LocDisabled;
			public final ims.framework.utils.Image LocationSite;
			public final ims.framework.utils.Image LocSiteDisabled;
			public final ims.framework.utils.Image Service;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClosedFolder;
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				BlueSphere = new ImageHelper(123101, "Images/Clinical/blue-sphere-1.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image BlueSphere;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
		public final ClinicalImages Clinical;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsContextMenuVisible = new ims.framework.ContextVariable("IsContextMenuVisible", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__IsContextMenuVisible_" + componentIdentifier + "");
			cxl_DisplayContextMenuFor = new ims.framework.ContextVariable("DisplayContextMenuFor", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__DisplayContextMenuFor_" + componentIdentifier + "");
			cxl_ContextMenuSelected = new ims.framework.ContextVariable("ContextMenuSelected", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__ContextMenuSelected_" + componentIdentifier + "");
			cxl_SelectedNode = new ims.framework.ContextVariable("SelectedNode", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__SelectedNode_" + componentIdentifier + "");
			cxl_ParentNode = new ims.framework.ContextVariable("ParentNode", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__ParentNode_" + componentIdentifier + "");
			cxl_CurrentValue = new ims.framework.ContextVariable("CurrentValue", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__CurrentValue_" + componentIdentifier + "");
			cxl_SelectedValue = new ims.framework.ContextVariable("SelectedValue", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__SelectedValue_" + componentIdentifier + "");
			cxl_ComponentMode = new ims.framework.ContextVariable("ComponentMode", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__ComponentMode_" + componentIdentifier + "");
			cxl_SendEvent = new ims.framework.ContextVariable("SendEvent", prefix + "_lv_ClinicalAdmin.TumourCategory.__internal_x_context__SendEvent_" + componentIdentifier + "");
		}
		
		public boolean getIsContextMenuVisibleIsNotNull()
		{
			return !cxl_IsContextMenuVisible.getValueIsNull(context);
		}
		public Boolean getIsContextMenuVisible()
		{
			return (Boolean)cxl_IsContextMenuVisible.getValue(context);
		}
		public void setIsContextMenuVisible(Boolean value)
		{
			cxl_IsContextMenuVisible.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsContextMenuVisible = null;
		public boolean getDisplayContextMenuForIsNotNull()
		{
			return !cxl_DisplayContextMenuFor.getValueIsNull(context);
		}
		public ims.oncology.vo.enums.TumourCategory getDisplayContextMenuFor()
		{
			return (ims.oncology.vo.enums.TumourCategory)cxl_DisplayContextMenuFor.getValue(context);
		}
		public void setDisplayContextMenuFor(ims.oncology.vo.enums.TumourCategory value)
		{
			cxl_DisplayContextMenuFor.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DisplayContextMenuFor = null;
		public boolean getContextMenuSelectedIsNotNull()
		{
			return !cxl_ContextMenuSelected.getValueIsNull(context);
		}
		public ims.oncology.vo.enums.TumourCategory getContextMenuSelected()
		{
			return (ims.oncology.vo.enums.TumourCategory)cxl_ContextMenuSelected.getValue(context);
		}
		public void setContextMenuSelected(ims.oncology.vo.enums.TumourCategory value)
		{
			cxl_ContextMenuSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ContextMenuSelected = null;
		public boolean getSelectedNodeIsNotNull()
		{
			return !cxl_SelectedNode.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedNode()
		{
			return (ims.vo.ValueObject)cxl_SelectedNode.getValue(context);
		}
		public void setSelectedNode(ims.vo.ValueObject value)
		{
			cxl_SelectedNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedNode = null;
		public boolean getParentNodeIsNotNull()
		{
			return !cxl_ParentNode.getValueIsNull(context);
		}
		public ims.vo.ValueObject getParentNode()
		{
			return (ims.vo.ValueObject)cxl_ParentNode.getValue(context);
		}
		public void setParentNode(ims.vo.ValueObject value)
		{
			cxl_ParentNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentNode = null;
		public boolean getCurrentValueIsNotNull()
		{
			return !cxl_CurrentValue.getValueIsNull(context);
		}
		public ims.vo.ValueObject getCurrentValue()
		{
			return (ims.vo.ValueObject)cxl_CurrentValue.getValue(context);
		}
		public void setCurrentValue(ims.vo.ValueObject value)
		{
			cxl_CurrentValue.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentValue = null;
		public boolean getSelectedValueIsNotNull()
		{
			return !cxl_SelectedValue.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedValue()
		{
			return (ims.vo.ValueObject)cxl_SelectedValue.getValue(context);
		}
		public void setSelectedValue(ims.vo.ValueObject value)
		{
			cxl_SelectedValue.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedValue = null;
		public boolean getComponentModeIsNotNull()
		{
			return !cxl_ComponentMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getComponentMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_ComponentMode.getValue(context);
		}
		public void setComponentMode(ims.framework.enumerations.FormMode value)
		{
			cxl_ComponentMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ComponentMode = null;
		public boolean getSendEventIsNotNull()
		{
			return !cxl_SendEvent.getValueIsNull(context);
		}
		public Boolean getSendEvent()
		{
			return (Boolean)cxl_SendEvent.getValue(context);
		}
		public void setSendEvent(Boolean value)
		{
			cxl_SendEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SendEvent = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class TumourCategory implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NewCategory = 1;
			public static final int EditCategory = 2;
			public static final int NewVersion = 3;
			public static final int NewGroup = 4;
			public static final int EditGroup = 5;
			public static final int NewSite = 6;
			public static final int EditSite = 7;
			public static final int OverallStaging = 8;
			public static final int OverallPrognostic = 9;
			public static final int ADI = 10;
			public static final int HDI = 11;
		}
		public void disableAllTumourCategoryMenuItems()
		{
			this.contextMenuTumourCategoryNewCategoryItem.setEnabled(false);
			this.contextMenuTumourCategoryEditCategoryItem.setEnabled(false);
			this.contextMenuTumourCategoryNewVersionItem.setEnabled(false);
			this.contextMenuTumourCategoryNewGroupItem.setEnabled(false);
			this.contextMenuTumourCategoryEditGroupItem.setEnabled(false);
			this.contextMenuTumourCategoryNewSiteItem.setEnabled(false);
			this.contextMenuTumourCategoryEditSiteItem.setEnabled(false);
			this.contextMenuTumourCategoryOverallStagingItem.setEnabled(false);
			this.contextMenuTumourCategoryOverallPrognosticItem.setEnabled(false);
			this.contextMenuTumourCategoryADIItem.setEnabled(false);
			this.contextMenuTumourCategoryHDIItem.setEnabled(false);
		}
		public void hideAllTumourCategoryMenuItems()
		{
			this.contextMenuTumourCategoryNewCategoryItem.setVisible(false);
			this.contextMenuTumourCategoryEditCategoryItem.setVisible(false);
			this.contextMenuTumourCategoryNewVersionItem.setVisible(false);
			this.contextMenuTumourCategoryNewGroupItem.setVisible(false);
			this.contextMenuTumourCategoryEditGroupItem.setVisible(false);
			this.contextMenuTumourCategoryNewSiteItem.setVisible(false);
			this.contextMenuTumourCategoryEditSiteItem.setVisible(false);
			this.contextMenuTumourCategoryOverallStagingItem.setVisible(false);
			this.contextMenuTumourCategoryOverallPrognosticItem.setVisible(false);
			this.contextMenuTumourCategoryADIItem.setVisible(false);
			this.contextMenuTumourCategoryHDIItem.setVisible(false);
		}
		private Menu contextMenuTumourCategory;
		public MenuItem getTumourCategoryNewCategoryItem()
		{
			return this.contextMenuTumourCategoryNewCategoryItem;
		}
		private MenuItem contextMenuTumourCategoryNewCategoryItem;
		public MenuItem getTumourCategoryEditCategoryItem()
		{
			return this.contextMenuTumourCategoryEditCategoryItem;
		}
		private MenuItem contextMenuTumourCategoryEditCategoryItem;
		public MenuItem getTumourCategoryNewVersionItem()
		{
			return this.contextMenuTumourCategoryNewVersionItem;
		}
		private MenuItem contextMenuTumourCategoryNewVersionItem;
		public MenuItem getTumourCategoryNewGroupItem()
		{
			return this.contextMenuTumourCategoryNewGroupItem;
		}
		private MenuItem contextMenuTumourCategoryNewGroupItem;
		public MenuItem getTumourCategoryEditGroupItem()
		{
			return this.contextMenuTumourCategoryEditGroupItem;
		}
		private MenuItem contextMenuTumourCategoryEditGroupItem;
		public MenuItem getTumourCategoryNewSiteItem()
		{
			return this.contextMenuTumourCategoryNewSiteItem;
		}
		private MenuItem contextMenuTumourCategoryNewSiteItem;
		public MenuItem getTumourCategoryEditSiteItem()
		{
			return this.contextMenuTumourCategoryEditSiteItem;
		}
		private MenuItem contextMenuTumourCategoryEditSiteItem;
		public MenuItem getTumourCategoryOverallStagingItem()
		{
			return this.contextMenuTumourCategoryOverallStagingItem;
		}
		private MenuItem contextMenuTumourCategoryOverallStagingItem;
		public MenuItem getTumourCategoryOverallPrognosticItem()
		{
			return this.contextMenuTumourCategoryOverallPrognosticItem;
		}
		private MenuItem contextMenuTumourCategoryOverallPrognosticItem;
		public MenuItem getTumourCategoryADIItem()
		{
			return this.contextMenuTumourCategoryADIItem;
		}
		private MenuItem contextMenuTumourCategoryADIItem;
		public MenuItem getTumourCategoryHDIItem()
		{
			return this.contextMenuTumourCategoryHDIItem;
		}
		private MenuItem contextMenuTumourCategoryHDIItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
