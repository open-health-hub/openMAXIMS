//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.cciadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabMappingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdMappingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMappingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolExtCodeTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolExtCodeTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolExtCodeTypeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
				{
					return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
				}
				public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolExtCodeTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolCodeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolCodeOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolCode()
				{
					return (String)super.row.get(1);
				}
				public void setcolCode(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolCodeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColLaunchDialogReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColLaunchDialogReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColLaunchDialogOpened()
				{
					super.row.showOpened(2);
				}
				public ims.framework.utils.Image getColLaunchDialog()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setColLaunchDialog(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellColLaunchDialogTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.row.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMappingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMappingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMappingsRow get(int index)
				{
					return new grdMappingsRow(super.collection.get(index));
				}
				public grdMappingsRow newRow()
				{
					return new grdMappingsRow(super.collection.newRow());
				}
				public grdMappingsRow newRow(boolean autoSelect)
				{
					return new grdMappingsRow(super.collection.newRow(autoSelect));
				}
				public grdMappingsRow newRowAt(int index)
				{
					return new grdMappingsRow(super.collection.newRowAt(index));
				}
				public grdMappingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMappingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMappingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
				}
				public ims.core.vo.TaxonomyMap[] getValues()
				{
					ims.core.vo.TaxonomyMap[] listOfValues = new ims.core.vo.TaxonomyMap[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.grid.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.grid.setValue(value);
				}
				public grdMappingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMappingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMappingsRowCollection getRows()
				{
					return new grdMappingsRowCollection(super.grid.getRows());
				}
				public grdMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMappingsRow(row);
				}
				public void setcolExtCodeTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolExtCodeTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colExtCodeTypeComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColLaunchDialogHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColLaunchDialogHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuTaxonomyGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMappingsTemp);
				grdMappingsGrid grdMappings = (grdMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMappingsGrid.class, m_grdMappingsTemp);
				grdMappings.addComboBoxColumn("External Code Type", 0, 0, 220, false, true, false, false, true, -1);
				grdMappings.addStringColumn("External Code", 0, 0, 100, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMappings.addButtonColumn(" ", 0, 0, -1, false, true);
				super.addGrid(grdMappings);
			}

			public grdMappingsGrid grdMappings()
			{
				return (grdMappingsGrid)super.getGrid(0);
			}
		}
		public static class tabKeywordsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdKeywordsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdKeywordsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setKeywordReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isKeywordReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showKeywordOpened()
				{
					super.row.showOpened(0);
				}
				public String getKeyword()
				{
					return (String)super.row.get(0);
				}
				public void setKeyword(String value)
				{
					super.row.set(0, value);
				}
				public void setCellKeywordTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.KeywordVo getValue()
				{
					return (ims.core.vo.KeywordVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.KeywordVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdKeywordsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdKeywordsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdKeywordsRow get(int index)
				{
					return new grdKeywordsRow(super.collection.get(index));
				}
				public grdKeywordsRow newRow()
				{
					return new grdKeywordsRow(super.collection.newRow());
				}
				public grdKeywordsRow newRow(boolean autoSelect)
				{
					return new grdKeywordsRow(super.collection.newRow(autoSelect));
				}
				public grdKeywordsRow newRowAt(int index)
				{
					return new grdKeywordsRow(super.collection.newRowAt(index));
				}
				public grdKeywordsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdKeywordsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdKeywordsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.KeywordVoCollection getValues()
				{
					ims.core.vo.KeywordVoCollection listOfValues = new ims.core.vo.KeywordVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.KeywordVo getValue()
				{
					return (ims.core.vo.KeywordVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.KeywordVo value)
				{
					super.grid.setValue(value);
				}
				public grdKeywordsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdKeywordsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdKeywordsRowCollection getRows()
				{
					return new grdKeywordsRowCollection(super.grid.getRows());
				}
				public grdKeywordsRow getRowByValue(ims.core.vo.KeywordVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdKeywordsRow(row);
				}
				public void setKeywordHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getKeywordHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdKeywordsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuKeywordAdmin, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdKeywordsTemp);
				grdKeywordsGrid grdKeywords = (grdKeywordsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdKeywordsGrid.class, m_grdKeywordsTemp);
				grdKeywords.addStringColumn("Keyword", 0, 0, -1, false, false, 0, 10, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdKeywords);
			}

			public grdKeywordsGrid grdKeywords()
			{
				return (grdKeywordsGrid)super.getGrid(0);
			}
		}
		public static class tabHotlistsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuCciHotlist, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public TreeView treHotlists()
			{
				return (TreeView)super.getControl(0);
			}
		}
		public static class tabFRUContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 360, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdFRU()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabDefaultValuesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbFrequencyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MedicationFrequency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MedicationFrequency value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MedicationFrequency getValue()
				{
					return (ims.core.vo.lookups.MedicationFrequency)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MedicationFrequency value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 50, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. Days Supply:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 26, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 144, 24, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFrequencyTemp);
				cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
				super.addComboBox(cmbFrequency);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 144, 48, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(4)}));
			}

			public cmbFrequencyComboBox cmbFrequency()
			{
				return (cmbFrequencyComboBox)super.getComboBox(0);
			}
			public IntBox intDays()
			{
				return (IntBox)super.getControl(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 432, 245, 384, 320, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabMappings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabMappingsContainer m_tabMappingsContainer = (tabMappingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMappingsContainer.class, m_tabMappings, factory);
			super.addContainer(m_tabMappings, m_tabMappingsContainer);
			ims.framework.utils.SizeInfo m_tabMappingsDesignSize = new ims.framework.utils.SizeInfo(384, 320);
			ims.framework.utils.SizeInfo m_tabMappingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabMappingsContainer.setContext(form, appForm, m_tabMappings, loader, contextMenus, startControlID, m_tabMappingsDesignSize, m_tabMappingsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 432, 245, 384, 320, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabKeywords = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Keywords", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabKeywordsContainer m_tabKeywordsContainer = (tabKeywordsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabKeywordsContainer.class, m_tabKeywords, factory);
			super.addContainer(m_tabKeywords, m_tabKeywordsContainer);
			ims.framework.utils.SizeInfo m_tabKeywordsDesignSize = new ims.framework.utils.SizeInfo(384, 320);
			ims.framework.utils.SizeInfo m_tabKeywordsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabKeywordsContainer.setContext(form, appForm, m_tabKeywords, loader, contextMenus, startControlID, m_tabKeywordsDesignSize, m_tabKeywordsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 432, 245, 384, 320, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHotlists = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Hotlists", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabHotlistsContainer m_tabHotlistsContainer = (tabHotlistsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHotlistsContainer.class, m_tabHotlists, factory);
			super.addContainer(m_tabHotlists, m_tabHotlistsContainer);
			ims.framework.utils.SizeInfo m_tabHotlistsDesignSize = new ims.framework.utils.SizeInfo(384, 320);
			ims.framework.utils.SizeInfo m_tabHotlistsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper11.getWidth(), anchoringHelper11.getHeight());
			m_tabHotlistsContainer.setContext(form, appForm, m_tabHotlists, loader, contextMenus, startControlID, m_tabHotlistsDesignSize, m_tabHotlistsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 432, 245, 384, 320, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabFRU = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Form/Route/Units", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabFRUContainer m_tabFRUContainer = (tabFRUContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFRUContainer.class, m_tabFRU, factory);
			super.addContainer(m_tabFRU, m_tabFRUContainer);
			ims.framework.utils.SizeInfo m_tabFRUDesignSize = new ims.framework.utils.SizeInfo(384, 320);
			ims.framework.utils.SizeInfo m_tabFRURuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabFRUContainer.setContext(form, appForm, m_tabFRU, loader, contextMenus, startControlID, m_tabFRUDesignSize, m_tabFRURuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 432, 245, 384, 320, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDefaultValues = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Defaults", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDefaultValuesContainer m_tabDefaultValuesContainer = (tabDefaultValuesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDefaultValuesContainer.class, m_tabDefaultValues, factory);
			super.addContainer(m_tabDefaultValues, m_tabDefaultValuesContainer);
			ims.framework.utils.SizeInfo m_tabDefaultValuesDesignSize = new ims.framework.utils.SizeInfo(384, 320);
			ims.framework.utils.SizeInfo m_tabDefaultValuesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabDefaultValuesContainer.setContext(form, appForm, m_tabDefaultValues, loader, contextMenus, startControlID, m_tabDefaultValuesDesignSize, m_tabDefaultValuesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabMappings().setVisible(false);
			tabKeywords().setVisible(false);
			tabHotlists().setVisible(false);
			tabFRU().setVisible(false);
			tabDefaultValues().setVisible(false);
		}
		public void settabMappingsEnabled(boolean value)
		{
			tabMappings().setEnabled(value);
		}
		public void settabKeywordsEnabled(boolean value)
		{
			tabKeywords().setEnabled(value);
		}
		public void settabHotlistsEnabled(boolean value)
		{
			tabHotlists().setEnabled(value);
		}
		public void settabFRUEnabled(boolean value)
		{
			tabFRU().setEnabled(value);
		}
		public void settabDefaultValuesEnabled(boolean value)
		{
			tabDefaultValues().setEnabled(value);
		}
		public void showtabMappings()
		{
			tabKeywords().setVisible(false);
			tabHotlists().setVisible(false);
			tabFRU().setVisible(false);
			tabDefaultValues().setVisible(false);
			tabMappings().setVisible(true);
		}
		public void showtabKeywords()
		{
			tabMappings().setVisible(false);
			tabHotlists().setVisible(false);
			tabFRU().setVisible(false);
			tabDefaultValues().setVisible(false);
			tabKeywords().setVisible(true);
		}
		public void showtabHotlists()
		{
			tabMappings().setVisible(false);
			tabKeywords().setVisible(false);
			tabFRU().setVisible(false);
			tabDefaultValues().setVisible(false);
			tabHotlists().setVisible(true);
		}
		public void showtabFRU()
		{
			tabMappings().setVisible(false);
			tabKeywords().setVisible(false);
			tabHotlists().setVisible(false);
			tabDefaultValues().setVisible(false);
			tabFRU().setVisible(true);
		}
		public void showtabDefaultValues()
		{
			tabMappings().setVisible(false);
			tabKeywords().setVisible(false);
			tabHotlists().setVisible(false);
			tabFRU().setVisible(false);
			tabDefaultValues().setVisible(true);
		}

		public tabMappingsContainer tabMappings()
		{
			return (tabMappingsContainer)super.layers.get(0);
		}
		public tabKeywordsContainer tabKeywords()
		{
			return (tabKeywordsContainer)super.layers.get(1);
		}
		public tabHotlistsContainer tabHotlists()
		{
			return (tabHotlistsContainer)super.layers.get(2);
		}
		public tabFRUContainer tabFRU()
		{
			return (tabFRUContainer)super.layers.get(3);
		}
		public tabDefaultValuesContainer tabDefaultValues()
		{
			return (tabDefaultValuesContainer)super.layers.get(4);
		}
	}
	public static class cmbHospitalCatComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinicaladmin.vo.lookups.CaseTypeProcedure getValue()
		{
			return (ims.clinicaladmin.vo.lookups.CaseTypeProcedure)super.control.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSurgeonCatComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinicaladmin.vo.lookups.CaseTypeProcedure getValue()
		{
			return (ims.clinicaladmin.vo.lookups.CaseTypeProcedure)super.control.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTreatInterventionTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.TreatmentInterventionType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.TreatmentInterventionType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.TreatmentInterventionType getValue()
		{
			return (ims.clinical.vo.lookups.TreatmentInterventionType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.TreatmentInterventionType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAlgTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.AllergenType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.AllergenType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.AllergenType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.AllergenType getValue()
		{
			return (ims.core.vo.lookups.AllergenType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.AllergenType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAnaesthetistCatComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinicaladmin.vo.lookups.CaseTypeProcedure getValue()
		{
			return (ims.clinicaladmin.vo.lookups.CaseTypeProcedure)super.control.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.lookups.CaseTypeProcedure value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdItemsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdItemsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setCCINameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isCCINameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showCCINameOpened()
		{
			super.row.showOpened(0);
		}
		public String getCCIName()
		{
			return (String)super.row.get(0);
		}
		public void setCCIName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellCCINameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.vo.interfaces.IGenericItemInfo getValue()
		{
			return (ims.vo.interfaces.IGenericItemInfo)super.row.getValue();
		}
		public void setValue(ims.vo.interfaces.IGenericItemInfo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdItemsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdItemsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdItemsRow get(int index)
		{
			return new grdItemsRow(super.collection.get(index));
		}
		public grdItemsRow newRow()
		{
			return new grdItemsRow(super.collection.newRow());
		}
		public grdItemsRow newRow(boolean autoSelect)
		{
			return new grdItemsRow(super.collection.newRow(autoSelect));
		}
		public grdItemsRow newRowAt(int index)
		{
			return new grdItemsRow(super.collection.newRowAt(index));
		}
		public grdItemsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdItemsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdItemsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setCCINameCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.interfaces.IGenericItemInfo[] getValues()
		{
			ims.vo.interfaces.IGenericItemInfo[] listOfValues = new ims.vo.interfaces.IGenericItemInfo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.interfaces.IGenericItemInfo getValue()
		{
			return (ims.vo.interfaces.IGenericItemInfo)super.grid.getValue();
		}
		public void setValue(ims.vo.interfaces.IGenericItemInfo value)
		{
			super.grid.setValue(value);
		}
		public grdItemsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdItemsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdItemsRowCollection getRows()
		{
			return new grdItemsRowCollection(super.grid.getRows());
		}
		public grdItemsRow getRowByValue(ims.vo.interfaces.IGenericItemInfo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdItemsRow(row);
		}
		public void setCCINameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getCCINameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class rdoGrpRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 616, 16, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Treatment/<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Intervention", startTabIndex.intValue() + 9);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 380, 16, 76, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "Presenting<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Issue", startTabIndex.intValue() + 5);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 552, 16, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Vaccine", startTabIndex.intValue() + 7);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 709, 16, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(3, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Cancer Imaging", startTabIndex.intValue() + 8);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 464, 16, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(4, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "Procedures", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 222, 16, 74, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(5, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "Diagnoses", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 56, 16, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(6, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "Allergens", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 305, 16, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(7, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "Problems", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 131, 16, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(8, anchoringHelper22.getX(), anchoringHelper22.getY(), anchoringHelper22.getWidth(), "Medications", startTabIndex.intValue() + 2);
		}
		public void setText(rdoGrpEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public rdoGrpEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return rdoGrpEnumeration.None;
				case 0: return rdoGrpEnumeration.rdoTreatmentIntervention;
				case 1: return rdoGrpEnumeration.rdoPresentingIssue;
				case 2: return rdoGrpEnumeration.rdoVaccine;
				case 3: return rdoGrpEnumeration.rdoCancerImaging;
				case 4: return rdoGrpEnumeration.rdoProcedures;
				case 5: return rdoGrpEnumeration.rdoDiagnoses;
				case 6: return rdoGrpEnumeration.rdoAllergy;
				case 7: return rdoGrpEnumeration.rdoProblems;
				case 8: return rdoGrpEnumeration.rdoMedications;
			}
			return null;
		}
		public void setValue(rdoGrpEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(rdoGrpEnumeration.None.id);
		}
		public boolean isEnabled(rdoGrpEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(rdoGrpEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(rdoGrpEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(rdoGrpEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class rdoGrpEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static rdoGrpEnumeration None = new rdoGrpEnumeration(-1);
		public static rdoGrpEnumeration rdoTreatmentIntervention = new rdoGrpEnumeration(0);
		public static rdoGrpEnumeration rdoPresentingIssue = new rdoGrpEnumeration(1);
		public static rdoGrpEnumeration rdoVaccine = new rdoGrpEnumeration(2);
		public static rdoGrpEnumeration rdoCancerImaging = new rdoGrpEnumeration(3);
		public static rdoGrpEnumeration rdoProcedures = new rdoGrpEnumeration(4);
		public static rdoGrpEnumeration rdoDiagnoses = new rdoGrpEnumeration(5);
		public static rdoGrpEnumeration rdoAllergy = new rdoGrpEnumeration(6);
		public static rdoGrpEnumeration rdoProblems = new rdoGrpEnumeration(7);
		public static rdoGrpEnumeration rdoMedications = new rdoGrpEnumeration(8);
		private rdoGrpEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((rdoGrpEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuKeywordAdmin = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuKeywordAdminAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminAddItem);
		contextMenus.contextMenuKeywordAdminRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminRemoveItem);
		contextMenus.contextMenuKeywordAdminRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove All", true, false, new Integer(102249), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminRemoveAllItem);
		contextMenus.contextMenuKeywordAdminMoveUpItem = factory.createMenuItem(startControlID.intValue() + 4, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminMoveUpItem);
		contextMenus.contextMenuKeywordAdminMoveDownItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminMoveDownItem);
		contextMenus.contextMenuKeywordAdminRestoreItem = factory.createMenuItem(startControlID.intValue() + 6, "Restore Defaults", true, false, new Integer(103108), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminRestoreItem);
		contextMenus.contextMenuKeywordAdminSnomedKeywordsItem = factory.createMenuItem(startControlID.intValue() + 7, "Get Snomed Keywords", true, false, new Integer(103111), true, false);
		contextMenus.contextMenuKeywordAdmin.add(contextMenus.contextMenuKeywordAdminSnomedKeywordsItem);
		form.registerMenu(contextMenus.contextMenuKeywordAdmin);
		contextMenus.contextMenuCciHotlist = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuCciHotlistUpdateItem = factory.createMenuItem(startControlID.intValue() + 8, "Update Hotlist", true, false, new Integer(116145), true, true);
		contextMenus.contextMenuCciHotlist.add(contextMenus.contextMenuCciHotlistUpdateItem);
		form.registerMenu(contextMenus.contextMenuCciHotlist);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 9, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 10, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 12, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 14, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 15, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 16, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 17, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDFORMItem = factory.createMenuItem(startControlID.intValue() + 18, "Add Form", true, false, new Integer(104118), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910001)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDFORMItem);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEFORMItem = factory.createMenuItem(startControlID.intValue() + 19, "Remove Form", true, false, new Integer(104119), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910002)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEFORMItem);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDROUTEItem = factory.createMenuItem(startControlID.intValue() + 20, "Add Route", true, false, new Integer(104120), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910003)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDROUTEItem);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEROUTEItem = factory.createMenuItem(startControlID.intValue() + 21, "Remove Route", true, false, new Integer(104121), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910004)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEROUTEItem);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDUNITSItem = factory.createMenuItem(startControlID.intValue() + 22, "Add Units", true, false, new Integer(104122), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910005)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuADDUNITSItem);
		contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEUNITSItem = factory.createMenuItem(startControlID.intValue() + 23, "Remove Units", true, false, new Integer(104123), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3910006)))
			contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu.add(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenuREMOVEUNITSItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuMedicationFRUMenu);
		contextMenus.Admin.contextMenuTaxonomyGrid = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.Admin.contextMenuTaxonomyGridAddTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 24, "Add Taxonomy", true, false, new Integer(102179), true, true);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridAddTaxonomyItem);
		contextMenus.Admin.contextMenuTaxonomyGridUpdateTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 25, "Update Taxonomy", true, false, new Integer(102150), true, false);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridUpdateTaxonomyItem);
		contextMenus.Admin.contextMenuTaxonomyGridRemoveTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 26, "Remove Taxonomy", true, false, new Integer(102148), true, false);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridRemoveTaxonomyItem);
		form.registerMenu(contextMenus.Admin.contextMenuTaxonomyGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 416, 48, 416, 536, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Allergen Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 392, 536, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Search Allergen List", new Integer(2), ""}));

		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Display:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 432, 224, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 432, 200, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetist's Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 432, 176, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surgeon's Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 681, 154, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mins", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 432, 154, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI lag time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 432, 154, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Controlled Drug:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 432, 130, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Length of Stay:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 681, 130, 28, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Days", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 432, 106, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 432, 83, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allergen Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 88, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 336, 80, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 609, 81, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 80, 80, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 608, 224, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalCatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalCatTemp);
		cmbHospitalCatComboBox cmbHospitalCat = (cmbHospitalCatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalCatComboBox.class, m_cmbHospitalCatTemp);
		super.addComboBox(cmbHospitalCat);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 608, 176, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSurgeonCatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSurgeonCatTemp);
		cmbSurgeonCatComboBox cmbSurgeonCat = (cmbSurgeonCatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSurgeonCatComboBox.class, m_cmbSurgeonCatTemp);
		super.addComboBox(cmbSurgeonCat);
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 609, 104, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTreatInterventionTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTreatInterventionTypeTemp);
		cmbTreatInterventionTypeComboBox cmbTreatInterventionType = (cmbTreatInterventionTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTreatInterventionTypeComboBox.class, m_cmbTreatInterventionTypeTemp);
		super.addComboBox(cmbTreatInterventionType);
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 609, 104, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAlgTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAlgTypeTemp);
		cmbAlgTypeComboBox cmbAlgType = (cmbAlgTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAlgTypeComboBox.class, m_cmbAlgTypeTemp);
		super.addComboBox(cmbAlgType);
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 608, 200, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbAnaesthetistCatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAnaesthetistCatTemp);
		cmbAnaesthetistCatComboBox cmbAnaesthetistCat = (cmbAnaesthetistCatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaesthetistCatComboBox.class, m_cmbAnaesthetistCatTemp);
		super.addComboBox(cmbAnaesthetistCat);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 609, 154, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 760, 106, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 24, 178, 360, 390, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdItemsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdItemsTemp);
		grdItemsGrid grdItems = (grdItemsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdItemsGrid.class, m_grdItemsTemp);
		grdItems.addStringColumn("Allergen Name", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdItems);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 609, 152, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 609, 128, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(2)}));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 609, 104, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(3)}));

		// RadioButton Controls
		RadioButton tmprdoGrp = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmprdoGrp);
		rdoGrpRadioButton rdoGrp = (rdoGrpRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(rdoGrpRadioButton.class, tmprdoGrp);
		rdoGrp.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(rdoGrp);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Panel pnlDetails()
	{
		return (Panel)super.getControl(0);
	}
	public Panel pnlSearch()
	{
		return (Panel)super.getControl(1);
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Label lblHospitalCat()
	{
		return (Label)super.getControl(8);
	}
	public Label lblAnaesthetistCat()
	{
		return (Label)super.getControl(9);
	}
	public Label lblSurgeonCat()
	{
		return (Label)super.getControl(10);
	}
	public Label lblMins()
	{
		return (Label)super.getControl(11);
	}
	public Label lblTCILagTime()
	{
		return (Label)super.getControl(12);
	}
	public Label lblControlledDrug()
	{
		return (Label)super.getControl(13);
	}
	public Label lblLOS()
	{
		return (Label)super.getControl(14);
	}
	public Label lblDays()
	{
		return (Label)super.getControl(15);
	}
	public Label lblAlgType()
	{
		return (Label)super.getControl(16);
	}
	public Label lblCciName()
	{
		return (Label)super.getControl(17);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(19);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(20);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(21);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(22);
	}
	public Button btnSearch()
	{
		return (Button)super.getControl(23);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(24);
	}
	public TextBox txtSearch()
	{
		return (TextBox)super.getControl(25);
	}
	public cmbHospitalCatComboBox cmbHospitalCat()
	{
		return (cmbHospitalCatComboBox)super.getComboBox(0);
	}
	public cmbSurgeonCatComboBox cmbSurgeonCat()
	{
		return (cmbSurgeonCatComboBox)super.getComboBox(1);
	}
	public cmbTreatInterventionTypeComboBox cmbTreatInterventionType()
	{
		return (cmbTreatInterventionTypeComboBox)super.getComboBox(2);
	}
	public cmbAlgTypeComboBox cmbAlgType()
	{
		return (cmbAlgTypeComboBox)super.getComboBox(3);
	}
	public cmbAnaesthetistCatComboBox cmbAnaesthetistCat()
	{
		return (cmbAnaesthetistCatComboBox)super.getComboBox(4);
	}
	public CheckBox chkControlledDrug()
	{
		return (CheckBox)super.getControl(31);
	}
	public CheckBox chkIsActive()
	{
		return (CheckBox)super.getControl(32);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(33);
	}
	public grdItemsGrid grdItems()
	{
		return (grdItemsGrid)super.getGrid(0);
	}
	public IntBox intTCILag()
	{
		return (IntBox)super.getControl(35);
	}
	public IntBox intLOS()
	{
		return (IntBox)super.getControl(36);
	}
	public IntBox intProcDuration()
	{
		return (IntBox)super.getControl(37);
	}
	public rdoGrpRadioButton rdoGrp()
	{
		return (rdoGrpRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			ClinicalAdmin = new ClinicalAdminForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName TaxonomySearch;
			public final FormName YesNoDialog;
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				HotlistDialog = new LocalFormName(104117);
			}
			public final FormName HotlistDialog;
		}

		public CoreForms Core;
		public ClinicalAdminForms ClinicalAdmin;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedItem = new ims.framework.ContextVariable("SelectedItem", prefix + "_lv_ClinicalAdmin.CCIAdmin.__internal_x_context__SelectedItem_" + componentIdentifier + "");
			cxl_currentCciType = new ims.framework.ContextVariable("currentCciType", prefix + "_lv_ClinicalAdmin.CCIAdmin.__internal_x_context__currentCciType_" + componentIdentifier + "");
			cxl_IHotlistShorts = new ims.framework.ContextVariable("IHotlistShorts", prefix + "_lv_ClinicalAdmin.CCIAdmin.__internal_x_context__IHotlistShorts_" + componentIdentifier + "");
			cxl_IsLastActionSearch = new ims.framework.ContextVariable("IsLastActionSearch", prefix + "_lv_ClinicalAdmin.CCIAdmin.__internal_x_context__IsLastActionSearch_" + componentIdentifier + "");
			cxl_IsSearchReturnResults = new ims.framework.ContextVariable("IsSearchReturnResults", prefix + "_lv_ClinicalAdmin.CCIAdmin.__internal_x_context__IsSearchReturnResults_" + componentIdentifier + "");
		}
		
		public boolean getSelectedItemIsNotNull()
		{
			return !cxl_SelectedItem.getValueIsNull(context);
		}
		public ims.vo.interfaces.ICciFull getSelectedItem()
		{
			return (ims.vo.interfaces.ICciFull)cxl_SelectedItem.getValue(context);
		}
		public void setSelectedItem(ims.vo.interfaces.ICciFull value)
		{
			cxl_SelectedItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedItem = null;
		public boolean getcurrentCciTypeIsNotNull()
		{
			return !cxl_currentCciType.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.enums.CciType getcurrentCciType()
		{
			return (ims.clinicaladmin.vo.enums.CciType)cxl_currentCciType.getValue(context);
		}
		public void setcurrentCciType(ims.clinicaladmin.vo.enums.CciType value)
		{
			cxl_currentCciType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentCciType = null;
		public boolean getIHotlistShortsIsNotNull()
		{
			return !cxl_IHotlistShorts.getValueIsNull(context);
		}
		public ims.vo.interfaces.IHotlistShort[] getIHotlistShorts()
		{
			return (ims.vo.interfaces.IHotlistShort[])cxl_IHotlistShorts.getValue(context);
		}
		public void setIHotlistShorts(ims.vo.interfaces.IHotlistShort[] value)
		{
			cxl_IHotlistShorts.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IHotlistShorts = null;
		public boolean getIsLastActionSearchIsNotNull()
		{
			return !cxl_IsLastActionSearch.getValueIsNull(context);
		}
		public Boolean getIsLastActionSearch()
		{
			return (Boolean)cxl_IsLastActionSearch.getValue(context);
		}
		public void setIsLastActionSearch(Boolean value)
		{
			cxl_IsLastActionSearch.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsLastActionSearch = null;
		public boolean getIsSearchReturnResultsIsNotNull()
		{
			return !cxl_IsSearchReturnResults.getValueIsNull(context);
		}
		public Boolean getIsSearchReturnResults()
		{
			return (Boolean)cxl_IsSearchReturnResults.getValue(context);
		}
		public void setIsSearchReturnResults(Boolean value)
		{
			cxl_IsSearchReturnResults.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsSearchReturnResults = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalAdminNamespace ClinicalAdmin = new ClinicalAdminNamespace();
		public AdminNamespace Admin = new AdminNamespace();
		public final class KeywordAdmin implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Remove = 2;
			public static final int RemoveAll = 3;
			public static final int MoveUp = 4;
			public static final int MoveDown = 5;
			public static final int Restore = 6;
			public static final int SnomedKeywords = 7;
		}
		public void disableAllKeywordAdminMenuItems()
		{
			this.contextMenuKeywordAdminAddItem.setEnabled(false);
			this.contextMenuKeywordAdminRemoveItem.setEnabled(false);
			this.contextMenuKeywordAdminRemoveAllItem.setEnabled(false);
			this.contextMenuKeywordAdminMoveUpItem.setEnabled(false);
			this.contextMenuKeywordAdminMoveDownItem.setEnabled(false);
			this.contextMenuKeywordAdminRestoreItem.setEnabled(false);
			this.contextMenuKeywordAdminSnomedKeywordsItem.setEnabled(false);
		}
		public void hideAllKeywordAdminMenuItems()
		{
			this.contextMenuKeywordAdminAddItem.setVisible(false);
			this.contextMenuKeywordAdminRemoveItem.setVisible(false);
			this.contextMenuKeywordAdminRemoveAllItem.setVisible(false);
			this.contextMenuKeywordAdminMoveUpItem.setVisible(false);
			this.contextMenuKeywordAdminMoveDownItem.setVisible(false);
			this.contextMenuKeywordAdminRestoreItem.setVisible(false);
			this.contextMenuKeywordAdminSnomedKeywordsItem.setVisible(false);
		}
		private Menu contextMenuKeywordAdmin;
		public MenuItem getKeywordAdminAddItem()
		{
			return this.contextMenuKeywordAdminAddItem;
		}
		private MenuItem contextMenuKeywordAdminAddItem;
		public MenuItem getKeywordAdminRemoveItem()
		{
			return this.contextMenuKeywordAdminRemoveItem;
		}
		private MenuItem contextMenuKeywordAdminRemoveItem;
		public MenuItem getKeywordAdminRemoveAllItem()
		{
			return this.contextMenuKeywordAdminRemoveAllItem;
		}
		private MenuItem contextMenuKeywordAdminRemoveAllItem;
		public MenuItem getKeywordAdminMoveUpItem()
		{
			return this.contextMenuKeywordAdminMoveUpItem;
		}
		private MenuItem contextMenuKeywordAdminMoveUpItem;
		public MenuItem getKeywordAdminMoveDownItem()
		{
			return this.contextMenuKeywordAdminMoveDownItem;
		}
		private MenuItem contextMenuKeywordAdminMoveDownItem;
		public MenuItem getKeywordAdminRestoreItem()
		{
			return this.contextMenuKeywordAdminRestoreItem;
		}
		private MenuItem contextMenuKeywordAdminRestoreItem;
		public MenuItem getKeywordAdminSnomedKeywordsItem()
		{
			return this.contextMenuKeywordAdminSnomedKeywordsItem;
		}
		private MenuItem contextMenuKeywordAdminSnomedKeywordsItem;
		public final class CciHotlist implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Update = 8;
		}
		public void disableAllCciHotlistMenuItems()
		{
			this.contextMenuCciHotlistUpdateItem.setEnabled(false);
		}
		public void hideAllCciHotlistMenuItems()
		{
			this.contextMenuCciHotlistUpdateItem.setVisible(false);
		}
		private Menu contextMenuCciHotlist;
		public ReadOnlyMenuItem getCciHotlistUpdateItem()
		{
			return this.contextMenuCciHotlistUpdateItem;
		}
		private MenuItem contextMenuCciHotlistUpdateItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 9;
			public static final int Update = 10;
			public static final int Remove = 11;
			public static final int View = 12;
			public static final int MoveUp = 13;
			public static final int MoveDown = 14;
			public static final int Replace = 15;
			public static final int Confirm = 16;
			public static final int EDIT_VIEW_ICP_ACTIONS = 17;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class ClinicalAdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class MedicationFRUMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDFORM = 18;
				public static final int REMOVEFORM = 19;
				public static final int ADDROUTE = 20;
				public static final int REMOVEROUTE = 21;
				public static final int ADDUNITS = 22;
				public static final int REMOVEUNITS = 23;
			}
			public void disableAllMedicationFRUMenuMenuItems()
			{
				this.contextMenuMedicationFRUMenuADDFORMItem.setEnabled(false);
				this.contextMenuMedicationFRUMenuREMOVEFORMItem.setEnabled(false);
				this.contextMenuMedicationFRUMenuADDROUTEItem.setEnabled(false);
				this.contextMenuMedicationFRUMenuREMOVEROUTEItem.setEnabled(false);
				this.contextMenuMedicationFRUMenuADDUNITSItem.setEnabled(false);
				this.contextMenuMedicationFRUMenuREMOVEUNITSItem.setEnabled(false);
			}
			public void hideAllMedicationFRUMenuMenuItems()
			{
				this.contextMenuMedicationFRUMenuADDFORMItem.setVisible(false);
				this.contextMenuMedicationFRUMenuREMOVEFORMItem.setVisible(false);
				this.contextMenuMedicationFRUMenuADDROUTEItem.setVisible(false);
				this.contextMenuMedicationFRUMenuREMOVEROUTEItem.setVisible(false);
				this.contextMenuMedicationFRUMenuADDUNITSItem.setVisible(false);
				this.contextMenuMedicationFRUMenuREMOVEUNITSItem.setVisible(false);
			}
			private Menu contextMenuMedicationFRUMenu;
			public ReadOnlyMenuItem getMedicationFRUMenuADDFORMItem()
			{
				return this.contextMenuMedicationFRUMenuADDFORMItem;
			}
			private MenuItem contextMenuMedicationFRUMenuADDFORMItem;
			public ReadOnlyMenuItem getMedicationFRUMenuREMOVEFORMItem()
			{
				return this.contextMenuMedicationFRUMenuREMOVEFORMItem;
			}
			private MenuItem contextMenuMedicationFRUMenuREMOVEFORMItem;
			public ReadOnlyMenuItem getMedicationFRUMenuADDROUTEItem()
			{
				return this.contextMenuMedicationFRUMenuADDROUTEItem;
			}
			private MenuItem contextMenuMedicationFRUMenuADDROUTEItem;
			public ReadOnlyMenuItem getMedicationFRUMenuREMOVEROUTEItem()
			{
				return this.contextMenuMedicationFRUMenuREMOVEROUTEItem;
			}
			private MenuItem contextMenuMedicationFRUMenuREMOVEROUTEItem;
			public ReadOnlyMenuItem getMedicationFRUMenuADDUNITSItem()
			{
				return this.contextMenuMedicationFRUMenuADDUNITSItem;
			}
			private MenuItem contextMenuMedicationFRUMenuADDUNITSItem;
			public ReadOnlyMenuItem getMedicationFRUMenuREMOVEUNITSItem()
			{
				return this.contextMenuMedicationFRUMenuREMOVEUNITSItem;
			}
			private MenuItem contextMenuMedicationFRUMenuREMOVEUNITSItem;
		}
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TaxonomyGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddTaxonomy = 24;
				public static final int UpdateTaxonomy = 25;
				public static final int RemoveTaxonomy = 26;
			}
			public void disableAllTaxonomyGridMenuItems()
			{
				this.contextMenuTaxonomyGridAddTaxonomyItem.setEnabled(false);
				this.contextMenuTaxonomyGridUpdateTaxonomyItem.setEnabled(false);
				this.contextMenuTaxonomyGridRemoveTaxonomyItem.setEnabled(false);
			}
			public void hideAllTaxonomyGridMenuItems()
			{
				this.contextMenuTaxonomyGridAddTaxonomyItem.setVisible(false);
				this.contextMenuTaxonomyGridUpdateTaxonomyItem.setVisible(false);
				this.contextMenuTaxonomyGridRemoveTaxonomyItem.setVisible(false);
			}
			private Menu contextMenuTaxonomyGrid;
			public MenuItem getTaxonomyGridAddTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridAddTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridAddTaxonomyItem;
			public MenuItem getTaxonomyGridUpdateTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridUpdateTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridUpdateTaxonomyItem;
			public MenuItem getTaxonomyGridRemoveTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridRemoveTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridRemoveTaxonomyItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[74];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
