//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.selecthistopathologicgrade;


import ims.clinicaladmin.forms.selecthistopathologicgrade.GenForm.grdHistologyGradeRow;
import ims.clinicaladmin.forms.selecttumourhistology.GenForm;
import ims.clinicaladmin.vo.HistopathologicGradeVo;
import ims.clinicaladmin.vo.HistopathologicGradeVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		open();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().ClinicalAdmin.setTumourDifferentiaion(form.grdHistologyGrade().getValue());
		
		if (!form.getGlobalContext().ClinicalAdmin.getTumourDifferentiaionIsNotNull())
			throw new CodingRuntimeException("ERROR - nothing is selected");
		
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	@Override
	protected void onGrdHistologyGradeSelectionChanged()
	{
		// Update local context
		form.getLocalContext().setSelectedRecord(domain.getHistopathologicGrade(form.grdHistologyGrade().getValue()));
		// Populate instance controls
		populateInstanceControls(form.getLocalContext().getSelectedRecord());
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onGrdHistologyGradeSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear local context selection
		form.getLocalContext().setSelectedRecord(null);
		// Populate instance controls
		populateInstanceControls(form.getLocalContext().getSelectedRecord());
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
				
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
		}
	}
	
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	public void initialize() throws FormOpenException
	{
		// Clear global context
		form.getGlobalContext().ClinicalAdmin.setTumourDifferentiaion(null);
		
		// Clear local context
		form.getLocalContext().setSelectedRecord(null);
		
		// Hide all context menu options && set text for context menu options
		form.getContextMenus().hideAllGenericGridMenuItems();
		
		form.getContextMenus().getGenericGridAddItem().setText("New");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit");
	}
	
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clearScreen();

		// List histologies
		populateHistologyGrades(domain.listHistopathologicGrade());

		// Reselect histology edited or created
		form.grdHistologyGrade().setValue(form.getLocalContext().getSelectedRecord());
		form.getLocalContext().setSelectedRecord(domain.getHistopathologicGrade(form.grdHistologyGrade().getValue()));

		// Populate instance controls with selected histology
		populateInstanceControls(form.getLocalContext().getSelectedRecord());
		
		// Set form in VIEW mode
		form.setMode(FormMode.VIEW);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear grid selection
		form.grdHistologyGrade().setValue(null);
		// Clear selected local context
		form.getLocalContext().setSelectedRecord(null);
		// Clear instance controls
		clearInstanceControls();
		
		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Get data from screen
			form.getLocalContext().setSelectedRecord(populateDataFromInstanceControls(form.getLocalContext().getSelectedRecord()));

			// Validate data
			String[] errors = form.getLocalContext().getSelectedRecord().validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to save data
			form.getLocalContext().setSelectedRecord(domain.saveHistopathologicGrade(form.getLocalContext().getSelectedRecord()));

			return true;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException e)
		{
			e.printStackTrace();
			engine.showMessage("Taxonomy Mapping is registered to another record");
			return false;
		}
	}
	
	public void clearScreen()
	{
		form.grdHistologyGrade().getRows().clear();
		
		clearInstanceControls();
	}
	
	public void clearInstanceControls()
	{
		form.ctnDetails().txtGrade().setValue(null);
		form.ctnDetails().txtDescription().setValue(null);
	}
	
	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnSelect().setVisible(true);
			form.btnSelect().setEnabled(form.grdHistologyGrade().getValue() != null);
		}
		
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().getGenericGridUpdateItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdHistologyGrade().getValue() instanceof HistopathologicGradeVo);
	}


	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions
	// ---------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void populateHistologyGrades(HistopathologicGradeVoCollection list)
	{
		// Clear grid
		form.grdHistologyGrade().getRows().clear();

		// Check collection for null
		if (list == null)
			return;

		// Populate grid
		for (HistopathologicGradeVo histologyGrade : list)
		{
			if (histologyGrade == null)
				continue;

			grdHistologyGradeRow newRow = form.grdHistologyGrade().getRows().newRow();

			newRow.setColGrade(histologyGrade.getGrade());
			newRow.setColDescription(histologyGrade.getTumourDifferentation());
			newRow.setColDefaultValue(Boolean.TRUE.equals(histologyGrade.getIsDefault()));

			newRow.setValue(histologyGrade);
		}
	}

	private void populateInstanceControls(HistopathologicGradeVo histologyGrade)
	{
		// Clear instance controls
		clearInstanceControls();

		// Check parameter for null value
		if (histologyGrade == null)
			return;

		form.ctnDetails().txtGrade().setValue(histologyGrade.getGrade());
		form.ctnDetails().txtDescription().setValue(histologyGrade.getTumourDifferentation());
	}

	private HistopathologicGradeVo populateDataFromInstanceControls(HistopathologicGradeVo histologyGrade)
	{
		if (histologyGrade == null)
		{
			histologyGrade = new HistopathologicGradeVo();
			histologyGrade.setIsActive(Boolean.TRUE);
		}
		
		histologyGrade.setGrade(form.ctnDetails().txtGrade().getValue());
		histologyGrade.setTumourDifferentation(form.ctnDetails().txtDescription().getValue());

		return histologyGrade;
	}
}
