//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.proceduresperformedbyhcp;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbServicesPanelComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServicesComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ServiceLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ServiceLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ServiceLiteVo getValue()
		{
			return (ims.core.vo.ServiceLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ServiceLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbHCPpanelComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(50);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Clinical.contextMenuProcedureGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Clinical.contextMenuProcedureGridADDPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Procedure", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuProcedureGrid.add(contextMenus.Clinical.contextMenuProcedureGridADDPROCEDUREItem);
		contextMenus.Clinical.contextMenuProcedureGridREMOVEPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Procedure", true, false, new Integer(102148), true, false);
		contextMenus.Clinical.contextMenuProcedureGrid.add(contextMenus.Clinical.contextMenuProcedureGridREMOVEPROCEDUREItem);
		form.registerMenu(contextMenus.Clinical.contextMenuProcedureGrid);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Clinical.contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem = factory.createMenuItem(startControlID.intValue() + 3, "New Service and Procedures Performed by HCP", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP.add(contextMenus.Clinical.contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem);
		contextMenus.Clinical.contextMenuProcedurePerformedHCPEDITHCPItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Procedures Performed by this HCP", true, false, new Integer(102150), true, false);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP.add(contextMenus.Clinical.contextMenuProcedurePerformedHCPEDITHCPItem);
		contextMenus.Clinical.contextMenuProcedurePerformedHCPADDSERVICEItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Service", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP.add(contextMenus.Clinical.contextMenuProcedurePerformedHCPADDSERVICEItem);
		contextMenus.Clinical.contextMenuProcedurePerformedHCPADDPROCEDURESItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Procedures", true, false, new Integer(102179), true, false);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP.add(contextMenus.Clinical.contextMenuProcedurePerformedHCPADDPROCEDURESItem);
		contextMenus.Clinical.contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove all Services and Procedures performed by this HCP", true, false, new Integer(102148), true, false);
		contextMenus.Clinical.contextMenuProcedurePerformedHCP.add(contextMenus.Clinical.contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem);
		form.registerMenu(contextMenus.Clinical.contextMenuProcedurePerformedHCP);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 368, 816, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 48, 432, 76, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service Name:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 48, 400, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HCP Name:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 352, 19, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 19, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 640, 576, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 728, 576, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 168, 432, 264, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbServicesPanelTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbServicesPanelTemp);
		cmbServicesPanelComboBox cmbServicesPanel = (cmbServicesPanelComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServicesPanelComboBox.class, m_cmbServicesPanelTemp);
		super.addComboBox(cmbServicesPanel);
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 448, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServicesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbServicesTemp);
		cmbServicesComboBox cmbServices = (cmbServicesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServicesComboBox.class, m_cmbServicesTemp);
		super.addComboBox(cmbServices);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 168, 400, 264, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_qmbHCPpanelTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbHCPpanelTemp);
		qmbHCPpanelComboBox qmbHCPpanel = (qmbHCPpanelComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHCPpanelComboBox.class, m_qmbHCPpanelTemp);
		super.addComboBox(qmbHCPpanel);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbHCPTemp);
		qmbHCPComboBox qmbHCP = (qmbHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHCPComboBox.class, m_qmbHCPTemp);
		super.addComboBox(qmbHCP);

		// Tree Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 816, 296, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.Clinical.contextMenuProcedurePerformedHCP, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 464, 400, 344, 152, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, contextMenus.Clinical.contextMenuProcedureGrid, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 792, 11, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 752, 11, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public cmbServicesPanelComboBox cmbServicesPanel()
	{
		return (cmbServicesPanelComboBox)super.getComboBox(0);
	}
	public cmbServicesComboBox cmbServices()
	{
		return (cmbServicesComboBox)super.getComboBox(1);
	}
	public qmbHCPpanelComboBox qmbHCPpanel()
	{
		return (qmbHCPpanelComboBox)super.getComboBox(2);
	}
	public qmbHCPComboBox qmbHCP()
	{
		return (qmbHCPComboBox)super.getComboBox(3);
	}
	public TreeView treProcedures()
	{
		return (TreeView)super.getControl(11);
	}
	public DynamicGrid dyngrdProcedures()
	{
		return (DynamicGrid)super.getControl(12);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(14);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image BlueSquare;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Service;
			public final ims.framework.utils.Image MemberOfStaff;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsNewNode = new ims.framework.ContextVariable("IsNewNode", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__IsNewNode_" + componentIdentifier + "");
			cxl_HcpList = new ims.framework.ContextVariable("HcpList", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__HcpList_" + componentIdentifier + "");
			cxl_IsNewService = new ims.framework.ContextVariable("IsNewService", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__IsNewService_" + componentIdentifier + "");
			cxl_IsNewProcedure = new ims.framework.ContextVariable("IsNewProcedure", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__IsNewProcedure_" + componentIdentifier + "");
			cxl_SelectedNode = new ims.framework.ContextVariable("SelectedNode", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedNode_" + componentIdentifier + "");
			cxl_ServiceList = new ims.framework.ContextVariable("ServiceList", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__ServiceList_" + componentIdentifier + "");
			cxl_AvailableServiceList = new ims.framework.ContextVariable("AvailableServiceList", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__AvailableServiceList_" + componentIdentifier + "");
			cxl_SelectedHcp = new ims.framework.ContextVariable("SelectedHcp", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier + "");
			cxl_SelectedProcedurePerf = new ims.framework.ContextVariable("SelectedProcedurePerf", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedProcedurePerf_" + componentIdentifier + "");
			cxl_editHcp = new ims.framework.ContextVariable("editHcp", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__editHcp_" + componentIdentifier + "");
			cxl_AreServicesAvailable = new ims.framework.ContextVariable("AreServicesAvailable", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__AreServicesAvailable_" + componentIdentifier + "");
			cxl_AreHcpsAvailable = new ims.framework.ContextVariable("AreHcpsAvailable", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__AreHcpsAvailable_" + componentIdentifier + "");
			cxl_MessageBox = new ims.framework.ContextVariable("MessageBox", prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__MessageBox_" + componentIdentifier + "");
		}
		
		public boolean getIsNewNodeIsNotNull()
		{
			return !cxl_IsNewNode.getValueIsNull(context);
		}
		public Boolean getIsNewNode()
		{
			return (Boolean)cxl_IsNewNode.getValue(context);
		}
		public void setIsNewNode(Boolean value)
		{
			cxl_IsNewNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewNode = null;
		public boolean getHcpListIsNotNull()
		{
			return !cxl_HcpList.getValueIsNull(context);
		}
		public ims.clinical.vo.ProceduresPerformedByHCPVoCollection getHcpList()
		{
			return (ims.clinical.vo.ProceduresPerformedByHCPVoCollection)cxl_HcpList.getValue(context);
		}
		public void setHcpList(ims.clinical.vo.ProceduresPerformedByHCPVoCollection value)
		{
			cxl_HcpList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpList = null;
		public boolean getIsNewServiceIsNotNull()
		{
			return !cxl_IsNewService.getValueIsNull(context);
		}
		public Boolean getIsNewService()
		{
			return (Boolean)cxl_IsNewService.getValue(context);
		}
		public void setIsNewService(Boolean value)
		{
			cxl_IsNewService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewService = null;
		public boolean getIsNewProcedureIsNotNull()
		{
			return !cxl_IsNewProcedure.getValueIsNull(context);
		}
		public Boolean getIsNewProcedure()
		{
			return (Boolean)cxl_IsNewProcedure.getValue(context);
		}
		public void setIsNewProcedure(Boolean value)
		{
			cxl_IsNewProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewProcedure = null;
		public boolean getSelectedNodeIsNotNull()
		{
			return !cxl_SelectedNode.getValueIsNull(context);
		}
		public String getSelectedNode()
		{
			return (String)cxl_SelectedNode.getValue(context);
		}
		public void setSelectedNode(String value)
		{
			cxl_SelectedNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedNode = null;
		public boolean getServiceListIsNotNull()
		{
			return !cxl_ServiceList.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVoCollection getServiceList()
		{
			return (ims.core.vo.ServiceLiteVoCollection)cxl_ServiceList.getValue(context);
		}
		public void setServiceList(ims.core.vo.ServiceLiteVoCollection value)
		{
			cxl_ServiceList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServiceList = null;
		public boolean getAvailableServiceListIsNotNull()
		{
			return !cxl_AvailableServiceList.getValueIsNull(context);
		}
		public ims.core.vo.ServiceLiteVoCollection getAvailableServiceList()
		{
			return (ims.core.vo.ServiceLiteVoCollection)cxl_AvailableServiceList.getValue(context);
		}
		public void setAvailableServiceList(ims.core.vo.ServiceLiteVoCollection value)
		{
			cxl_AvailableServiceList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AvailableServiceList = null;
		public boolean getSelectedHcpIsNotNull()
		{
			return !cxl_SelectedHcp.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getSelectedHcp()
		{
			return (ims.core.vo.HcpLiteVo)cxl_SelectedHcp.getValue(context);
		}
		public void setSelectedHcp(ims.core.vo.HcpLiteVo value)
		{
			cxl_SelectedHcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHcp = null;
		public boolean getSelectedProcedurePerfIsNotNull()
		{
			return !cxl_SelectedProcedurePerf.getValueIsNull(context);
		}
		public ims.clinical.vo.ProceduresPerformedByHCPVo getSelectedProcedurePerf()
		{
			return (ims.clinical.vo.ProceduresPerformedByHCPVo)cxl_SelectedProcedurePerf.getValue(context);
		}
		public void setSelectedProcedurePerf(ims.clinical.vo.ProceduresPerformedByHCPVo value)
		{
			cxl_SelectedProcedurePerf.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedProcedurePerf = null;
		public boolean geteditHcpIsNotNull()
		{
			return !cxl_editHcp.getValueIsNull(context);
		}
		public Boolean geteditHcp()
		{
			return (Boolean)cxl_editHcp.getValue(context);
		}
		public void seteditHcp(Boolean value)
		{
			cxl_editHcp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_editHcp = null;
		public boolean getAreServicesAvailableIsNotNull()
		{
			return !cxl_AreServicesAvailable.getValueIsNull(context);
		}
		public Boolean getAreServicesAvailable()
		{
			return (Boolean)cxl_AreServicesAvailable.getValue(context);
		}
		public void setAreServicesAvailable(Boolean value)
		{
			cxl_AreServicesAvailable.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AreServicesAvailable = null;
		public boolean getAreHcpsAvailableIsNotNull()
		{
			return !cxl_AreHcpsAvailable.getValueIsNull(context);
		}
		public Boolean getAreHcpsAvailable()
		{
			return (Boolean)cxl_AreHcpsAvailable.getValue(context);
		}
		public void setAreHcpsAvailable(Boolean value)
		{
			cxl_AreHcpsAvailable.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AreHcpsAvailable = null;
		public boolean getMessageBoxIsNotNull()
		{
			return !cxl_MessageBox.getValueIsNull(context);
		}
		public Integer getMessageBox()
		{
			return (Integer)cxl_MessageBox.getValue(context);
		}
		public void setMessageBox(Integer value)
		{
			cxl_MessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBox = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalNamespace Clinical = new ClinicalNamespace();
		public final class ClinicalNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ProcedureGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDPROCEDURE = 1;
				public static final int REMOVEPROCEDURE = 2;
			}
			public void disableAllProcedureGridMenuItems()
			{
				this.contextMenuProcedureGridADDPROCEDUREItem.setEnabled(false);
				this.contextMenuProcedureGridREMOVEPROCEDUREItem.setEnabled(false);
			}
			public void hideAllProcedureGridMenuItems()
			{
				this.contextMenuProcedureGridADDPROCEDUREItem.setVisible(false);
				this.contextMenuProcedureGridREMOVEPROCEDUREItem.setVisible(false);
			}
			private Menu contextMenuProcedureGrid;
			public ReadOnlyMenuItem getProcedureGridADDPROCEDUREItem()
			{
				return this.contextMenuProcedureGridADDPROCEDUREItem;
			}
			private MenuItem contextMenuProcedureGridADDPROCEDUREItem;
			public ReadOnlyMenuItem getProcedureGridREMOVEPROCEDUREItem()
			{
				return this.contextMenuProcedureGridREMOVEPROCEDUREItem;
			}
			private MenuItem contextMenuProcedureGridREMOVEPROCEDUREItem;
			public final class ProcedurePerformedHCP implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NewserviceandproceduresperformedbyHCP = 3;
				public static final int EDITHCP = 4;
				public static final int ADDSERVICE = 5;
				public static final int ADDPROCEDURES = 6;
				public static final int REMOVEPROCEDURE = 7;
			}
			public void disableAllProcedurePerformedHCPMenuItems()
			{
				this.contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem.setEnabled(false);
				this.contextMenuProcedurePerformedHCPEDITHCPItem.setEnabled(false);
				this.contextMenuProcedurePerformedHCPADDSERVICEItem.setEnabled(false);
				this.contextMenuProcedurePerformedHCPADDPROCEDURESItem.setEnabled(false);
				this.contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem.setEnabled(false);
			}
			public void hideAllProcedurePerformedHCPMenuItems()
			{
				this.contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem.setVisible(false);
				this.contextMenuProcedurePerformedHCPEDITHCPItem.setVisible(false);
				this.contextMenuProcedurePerformedHCPADDSERVICEItem.setVisible(false);
				this.contextMenuProcedurePerformedHCPADDPROCEDURESItem.setVisible(false);
				this.contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem.setVisible(false);
			}
			private Menu contextMenuProcedurePerformedHCP;
			public ReadOnlyMenuItem getProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem()
			{
				return this.contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem;
			}
			private MenuItem contextMenuProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem;
			public ReadOnlyMenuItem getProcedurePerformedHCPEDITHCPItem()
			{
				return this.contextMenuProcedurePerformedHCPEDITHCPItem;
			}
			private MenuItem contextMenuProcedurePerformedHCPEDITHCPItem;
			public ReadOnlyMenuItem getProcedurePerformedHCPADDSERVICEItem()
			{
				return this.contextMenuProcedurePerformedHCPADDSERVICEItem;
			}
			private MenuItem contextMenuProcedurePerformedHCPADDSERVICEItem;
			public ReadOnlyMenuItem getProcedurePerformedHCPADDPROCEDURESItem()
			{
				return this.contextMenuProcedurePerformedHCPADDPROCEDURESItem;
			}
			private MenuItem contextMenuProcedurePerformedHCPADDPROCEDURESItem;
			public ReadOnlyMenuItem getProcedurePerformedHCPREMOVEPROCEDUREItem()
			{
				return this.contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem;
			}
			private MenuItem contextMenuProcedurePerformedHCPREMOVEPROCEDUREItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedHcp_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.ProceduresPerformedByHCP.__internal_x_context__SelectedProcedurePerf_" + componentIdentifier, "BO-1003100100-ID", "ID_ProceduresPerformedByHCP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
