//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.70 build 3392.14041)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.proceduresperformedbyhcp;

import ims.clinical.vo.ProceduresPerformedByHCPVo;
import ims.clinical.vo.ProceduresPerformedByHCPVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Vector;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	COLUMN_PROC			= "1";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		initialize();	
	}

	private void initialize()
	{
		form.getLocalContext().seteditHcp(false);
		
		form.getLocalContext().setServiceList(domain.listActiveServices());
		populateServiceCombo(form.getLocalContext().getServiceList());

		initializeDynamicGrid();
		disablePanel();
		form.getLocalContext().setAreHcpsAvailable(domain.getAvailableHCPs(null) != null ? true : false);

		form.getLocalContext().setSelectedNode(null);
	
		updateContextMenuStatus();
	}

	private void updateContextMenuStatus()
	{
		form.getContextMenus().Clinical.hideAllProcedureGridMenuItems();
		form.getContextMenus().Clinical.hideAllProcedurePerformedHCPMenuItems();
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().Clinical.getProcedurePerformedHCPNewserviceandproceduresperformedbyHCPItem().setVisible(true);
			if (form.getLocalContext().getSelectedNodeIsNotNull())
			{
				if (form.getLocalContext().getSelectedNode().equals("HCP"))
				{
					form.getContextMenus().Clinical.getProcedurePerformedHCPADDSERVICEItem().setVisible(true);
					form.getContextMenus().Clinical.getProcedurePerformedHCPREMOVEPROCEDUREItem().setVisible(true);
				}
				else if (form.getLocalContext().getSelectedNode().equals("Service"))
				{
					form.getContextMenus().Clinical.getProcedurePerformedHCPADDPROCEDURESItem().setVisible(true);
					form.getContextMenus().Clinical.getProcedurePerformedHCPEDITHCPItem().setVisible(true);
				}
			}
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.dyngrdProcedures().getValue() != null)
				form.getContextMenus().Clinical.getProcedureGridREMOVEPROCEDUREItem().setVisible(true);
			form.getContextMenus().Clinical.getProcedureGridADDPROCEDUREItem().setVisible(true);

			if (form.getLocalContext().getIsNewNodeIsNotNull() && form.getLocalContext().getIsNewNode())
			{
				form.qmbHCPpanel().setEnabled(true);
				form.cmbServicesPanel().setEnabled(true);
			}
			if (form.getLocalContext().getIsNewServiceIsNotNull() && form.getLocalContext().getIsNewService())
			{
				form.qmbHCPpanel().setEnabled(false);
				form.cmbServicesPanel().setEnabled(true);
			}
			if (form.getLocalContext().getIsNewProcedureIsNotNull() && form.getLocalContext().getIsNewProcedure())
			{
				form.qmbHCPpanel().setEnabled(false);
				form.cmbServicesPanel().setEnabled(false);
			}
			if (form.getLocalContext().geteditHcpIsNotNull() && form.getLocalContext().geteditHcp())
			{
				form.qmbHCPpanel().setEnabled(false);
				form.cmbServicesPanel().setEnabled(false);
			}
			if (form.dyngrdProcedures().getSelectedRow() != null)
			{
				form.getContextMenus().Clinical.getProcedureGridREMOVEPROCEDUREItem().setVisible(true);
			}
		}
	}

	private void open()
	{
		clearControls();
	}

	private void clearControls()
	{
		form.cmbServices().setValue(null);
		form.qmbHCP().setValue(null);
		form.treProcedures().clear();
		form.getLocalContext().setSelectedNode(null);
		clearPanel();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearControls();
		updateContextMenuStatus();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ProceduresPerformedByHCPVoCollection procs = domain.listProceduresPerformedByHCP(form.qmbHCP().getValue(), form.cmbServices().getValue());
		if (procs != null)
			populateTree(procs);
		else
		{
			form.treProcedures().clear();
			clearPanel(); //WDEV-17694
			engine.showMessage("No results found", "Message", MessageButtons.OK);
		}
		
		form.getLocalContext().setSelectedNode(null);
		updateContextMenuStatus();
	}

	@Override
	protected void onQmbHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateHCPcombo(domain.listHCP(value));
	}

	private void populateHCPcombo(HcpLiteVoCollection listHCP)
	{
		form.qmbHCP().clear();
		if (listHCP != null)
			for (HcpLiteVo item : listHCP)
			{
				form.qmbHCP().newRow(item, item.getIHcpName());
			}
		form.qmbHCP().showOpened();

	}

	private void populateHCPPanelcombo(HcpLiteVoCollection listHCP)
	{
		form.qmbHCPpanel().clear();
		if (listHCP != null)
			for (HcpLiteVo item : listHCP)
			{
				form.qmbHCPpanel().newRow(item, item.getIHcpName());
			}
		form.qmbHCPpanel().showOpened();

	}

	private void populateServiceCombo(ServiceLiteVoCollection listActiveServices)
	{
		if (listActiveServices != null)
			for (ServiceLiteVo item : listActiveServices)
			{
				form.cmbServices().newRow(item, item.getServiceName());
			}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		DynamicGridRow row;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalNamespace.ProcedurePerformedHCP.NewserviceandproceduresperformedbyHCP :
				clearPanel();
				if (form.getLocalContext().getAreHcpsAvailableIsNotNull() && !form.getLocalContext().getAreHcpsAvailable())
				{
					engine.showMessage("All the available HCP and Services are already in use or none exist", "Message", MessageButtons.OK);
					break;
				}

				form.setMode(FormMode.EDIT);
				form.getLocalContext().setIsNewNode(true);
				form.getLocalContext().setIsNewProcedure(false);
				form.getLocalContext().setIsNewService(false);
				populateServicePanelCombo(form.getLocalContext().getServiceList());
				form.treProcedures().setValue(null);
				form.getLocalContext().setSelectedProcedurePerf(new ProceduresPerformedByHCPVo());
				updateContextMenuStatus();
			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedurePerformedHCP.ADDSERVICE :

				if (form.getLocalContext().getAreServicesAvailableIsNotNull() && !form.getLocalContext().getAreServicesAvailable())
				{
					engine.showMessage("There are no more available Services for this HCP", "Message", MessageButtons.OK);
					break;
				}
				form.setMode(FormMode.EDIT);
				form.getLocalContext().setIsNewNode(false);
				form.getLocalContext().setIsNewProcedure(false);
				form.getLocalContext().setIsNewService(true);
				form.getLocalContext().setAvailableServiceList(domain.getAvailableServices(form.getLocalContext().getSelectedHcp().toHcpRefVo()));
				form.cmbServicesPanel().setEnabled(true);
				populatePanel(form.treProcedures().getSelectedNode());
				updateContextMenuStatus();
				form.dyngrdProcedures().getRows().clear();
			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedurePerformedHCP.ADDPROCEDURES :

				form.setMode(FormMode.EDIT);
				form.getLocalContext().setIsNewNode(false);
				form.getLocalContext().setIsNewProcedure(true);
				form.getLocalContext().setIsNewService(false);
				populatePanel(form.treProcedures().getSelectedNode());
				updateContextMenuStatus();
			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedurePerformedHCP.EDITHCP :

				form.setMode(FormMode.EDIT);
				form.getLocalContext().seteditHcp(true);
				form.getLocalContext().setAvailableServiceList(domain.listActiveServices());
				populatePanel(form.treProcedures().getSelectedNode());
				updateContextMenuStatus();

			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedurePerformedHCP.REMOVEPROCEDURE :
				form.getLocalContext().setMessageBox(engine.showMessage("Are you sure you want to remove this Procedure Performed by HCP?", "Message", MessageButtons.YESNO));
			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedureGrid.ADDPROCEDURE :

				row = form.dyngrdProcedures().getRows().newRow();
				DynamicGridCell cell = row.getCells().newCell(form.dyngrdProcedures().getColumns().getByIdentifier(COLUMN_PROC), DynamicCellType.QUERYCOMBOBOX);
				cell.setAutoPostBack(true);
				form.dyngrdProcedures().getRows();
			break;

			case GenForm.ContextMenus.ClinicalNamespace.ProcedureGrid.REMOVEPROCEDURE :

				form.dyngrdProcedures().getRows().remove(form.dyngrdProcedures().getSelectedRow());
				updateContextMenuStatus();
			break;
		}
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdProcedures().clear();
		form.dyngrdProcedures().controlCanFire(true);
		DynamicGridColumn cabColumn = form.dyngrdProcedures().getColumns().newColumn(COLUMN_PROC);
		cabColumn.setCaption("Procedure");
		cabColumn.setIdentifier(COLUMN_PROC);
		cabColumn.setWidth(-1);
		cabColumn.setVisible(true);
	}

	protected void onDyngrdProceduresCellTextSubmited(DynamicGridCell cell)
	{
		//WDEV-10772 - starts here
		String availableProcedures = "";
		DynamicGridRow row = null;
		
		for (int i = 0; i < form.dyngrdProcedures().getRows().size(); i++)
		{
			row = form.dyngrdProcedures().getRows().get(i);
			
			if(row.getValue() instanceof ProcedureLiteVo)
				availableProcedures += (availableProcedures.length() == 0 ? "" : ", ") + ((ProcedureLiteVo) row.getValue()).getID_Procedure(); 	
		}
		//WDEV-10772 - ends here
		
		cell.getItems().clear();
		
		ProcedureLiteVoCollection procedures = domain.getAvailableProcedures(availableProcedures, cell.getTypedText());
		if (procedures != null && procedures.size() > 0)
		{
			for (int i = 0; i < procedures.size(); i++)
			{
				cell.getItems().newItem(procedures.get(i), procedures.get(i).getProcedureName());
			}
			if (procedures.size() == 1)
			{
				cell.setValue(procedures.get(0));
				onDyngrdProceduresCellValueChanged(cell);
			}
			else if (procedures.size() > 1)
				cell.showOpened();
		}
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		initialize();
		treeSelectionChanged(form.treProcedures().getSelectedNode());
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		ProceduresPerformedByHCPVo proc = null;

		if (form.getLocalContext().getIsNewNodeIsNotNull() && form.getLocalContext().getIsNewNode() || form.getLocalContext().getIsNewServiceIsNotNull() && form.getLocalContext().getIsNewService())// &&form.getLocalContext().getIsNewProcedureIsNotNull()&&form.getLocalContext().getIsNewProcedure())
			proc = new ProceduresPerformedByHCPVo();
		else if (form.getLocalContext().getSelectedProcedurePerfIsNotNull())
			proc = form.getLocalContext().getSelectedProcedurePerf();

		ProcedureLiteVoCollection procedures = new ProcedureLiteVoCollection();
		if (form.qmbHCPpanel().getValue() != null)
			proc.setPerformingHCP(form.qmbHCPpanel().getValue());
		if (form.cmbServicesPanel().getValue() != null)
			proc.setService(form.cmbServicesPanel().getValue());

		if (form.dyngrdProcedures().getRows().size() != 0)
		{
			for (int i = 0; i < form.dyngrdProcedures().getRows().size(); i++)
			{
				DynamicGridRow row = form.dyngrdProcedures().getRows().get(i);
				DynamicGridColumn column = form.dyngrdProcedures().getColumns().getByIdentifier(COLUMN_PROC);
				DynamicGridCell cell = row.getCells().get(column);
				
				//WDEV-17779
				if (cell.getValue() == null && cell.getTypedText() != null)
				{
					engine.showMessage("Please select a Procedure. '" + cell.getTypedText() + "' is not valid.");
					return;
				}
				
				procedures.add((ProcedureLiteVo) cell.getValue());
			}
		}
		else
			procedures = null;

		proc.setProcedures(procedures);

		try
		{
			String[] errors = proc.validate();
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}
			else
				try
				{
					domain.saveProcedurePerformedByHCP(proc);
				}
				catch (DomainInterfaceException e)
				{
					e.printStackTrace();
					engine.showMessage("Error saving Procedure" + e.toString());
					return;
				}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		form.setMode(FormMode.VIEW);

		ProceduresPerformedByHCPVoCollection hcpProcedures = domain.listProceduresPerformedByHCP(form.qmbHCP().getValue(), form.cmbServices().getValue());
		populateTree(hcpProcedures);
		initialize();
	}

	private void populateTree(ProceduresPerformedByHCPVoCollection hcpProcedures)
	{
		form.treProcedures().clear();
		clearPanel(); //WDEV-17694
		
		Vector<HcpLiteVo> hcps = new Vector<HcpLiteVo>();
		if (hcpProcedures != null)
			for (ProceduresPerformedByHCPVo item : hcpProcedures)
			{
				TreeNode hcp = null;
				TreeNode service = null;
				TreeNode procedure = null;
				if (item.getPerformingHCPIsNotNull())
				{
					if (!hcps.contains(item.getPerformingHCP()))
					{
						if (item.getPerformingHCP().getName() != null)
							hcp = form.treProcedures().getNodes().add(item.getPerformingHCP(), item.getPerformingHCP().getName().toString());
						hcp.setExpandedImage(form.getImages().Admin.MemberOfStaff);
						hcp.setSelectedImage(form.getImages().Admin.MemberOfStaff);
						hcp.setCollapsedImage(form.getImages().Admin.MemberOfStaff);
						hcp.setIdentifier(item);
						hcps.add(item.getPerformingHCP());
					}
					else
					{
						for (int k = 0; k < form.treProcedures().getNodes().size(); k++)
						{
							HcpLiteVo existingHcp = (HcpLiteVo) form.treProcedures().getNodes().get(k).getValue();
							if (existingHcp.equals(item.getPerformingHCP()))
								hcp = form.treProcedures().getNodes().get(k);
						}
					}
				}
				if (item.getServiceIsNotNull())
				{
					service = hcp.getNodes().add(item, item.getService().getServiceName());
					service.setExpandedImage(form.getImages().Admin.Service);
					service.setSelectedImage(form.getImages().Admin.Service);
					service.setCollapsedImage(form.getImages().Admin.Service);
				}

				if (item.getProceduresIsNotNull())
				{
					for (int k = 0; k < item.getProcedures().size(); k++)
					{
						procedure = service.getNodes().add(item.getProcedures().get(k), item.getProcedures().get(k).getProcedureName());
						procedure.setExpandedImage(form.getImages().Core.BlueSquare);
						procedure.setSelectedImage(form.getImages().Core.BlueSquare);
						procedure.setCollapsedImage(form.getImages().Core.BlueSquare);
					}
				}

			}
		form.treProcedures().expandAll();
		form.getLocalContext().setSelectedNode(null);
	}

	@Override
	protected void onQmbHCPpanelTextSubmited(String value) throws PresentationLogicException
	{

		populateHCPPanelcombo(domain.getAvailableHCPs(value));
	}

	private void populateServicePanelCombo(ServiceLiteVoCollection listActiveServices)
	{
		form.cmbServicesPanel().clear();
		if (listActiveServices != null)
			for (ServiceLiteVo item : listActiveServices)
			{
				form.cmbServicesPanel().newRow(item, item.getServiceName());
			}
	}

	private void disablePanel()
	{
		clearPanel();
		form.getLocalContext().setIsNewNode(null);
		form.getLocalContext().setAvailableServiceList(null);
		form.getLocalContext().setIsNewProcedure(null);
		form.getLocalContext().setIsNewService(null);
	}

	private void clearPanel()
	{
		form.cmbServicesPanel().clear();
		form.qmbHCPpanel().clear();
		form.dyngrdProcedures().getRows().clear();
	}

	@Override
	protected void onTreProceduresTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		treeSelectionChanged(node);
	}

	private void treeSelectionChanged(TreeNode node)
	{
		if (node != null && node.getValue() != null)
		{
			if (node.getValue() instanceof HcpLiteVo)
			{
				form.getLocalContext().setSelectedNode("HCP");
				form.getLocalContext().setSelectedHcp((HcpLiteVo) node.getValue());
				form.getLocalContext().setSelectedProcedurePerf((ProceduresPerformedByHCPVo) node.getNodes().get(0).getValue());
				if (domain.getAvailableServices(form.getLocalContext().getSelectedHcp().toHcpRefVo()) != null)
					form.getLocalContext().setAreServicesAvailable(true);
				else
					form.getLocalContext().setAreServicesAvailable(false);
			}
			else if (node.getValue() instanceof ProceduresPerformedByHCPVo)
			{
				form.getLocalContext().setSelectedNode("Service");
				form.getLocalContext().setSelectedProcedurePerf((ProceduresPerformedByHCPVo) node.getValue());
			}
			else if (node.getValue() instanceof ProcedureLiteVo)
			{
				form.getLocalContext().setSelectedNode("Procedure");
				form.getLocalContext().setSelectedProcedurePerf((ProceduresPerformedByHCPVo) node.getParent().getValue());
			}
			else
				form.getLocalContext().setSelectedNode(null);
		}
		else
			form.getLocalContext().setSelectedProcedurePerf(null);
			
		populatePanel(form.getLocalContext().getSelectedProcedurePerf());
		updateContextMenuStatus();
	}

	private void populatePanel(ProceduresPerformedByHCPVo pphcp)
	{
		clearPanel();
		if(pphcp == null)
			return;
		
		if (pphcp.getPerformingHCPIsNotNull())
		{
			form.qmbHCPpanel().newRow(pphcp.getPerformingHCP(), pphcp.getPerformingHCP().getIHcpName());
			form.qmbHCPpanel().setValue(pphcp.getPerformingHCP());

		}
		if (pphcp.getServiceIsNotNull())
		{
			form.cmbServicesPanel().newRow(pphcp.getService(), pphcp.getService().getServiceName());
			form.cmbServicesPanel().setValue(pphcp.getService());
		}
		if (pphcp.getProceduresIsNotNull())
			for (int i = 0; i < pphcp.getProcedures().size(); i++)
			{
				DynamicGridRow row = form.dyngrdProcedures().getRows().newRow();
				DynamicGridColumn col = form.dyngrdProcedures().getColumns().get(0);
				DynamicGridCell cell = row.getCells().newCell(col, DynamicCellType.QUERYCOMBOBOX);
				cell.getItems().newItem(pphcp.getProcedures().get(i));
				cell.setValue(pphcp.getProcedures().get(i));
			}
	}

	private void populatePanel(TreeNode node)
	{
		ProceduresPerformedByHCPVo proc = null;
		HcpLiteVo hcp = null;
		if (node != null)
			if (node.getValue() instanceof ProceduresPerformedByHCPVo)
			{
				proc = (ProceduresPerformedByHCPVo) node.getValue();
				hcp = proc.getPerformingHCP();
			}
			else if (node.getValue() instanceof HcpLiteVo)
			{
				hcp = (HcpLiteVo) node.getValue();
				if (node.getNodes().size() > 0)
					proc = (ProceduresPerformedByHCPVo) node.getNodes().get(0).getValue();

			}
		if (hcp != null)
		{
			form.qmbHCPpanel().newRow(hcp, hcp.getIHcpName());
			form.qmbHCPpanel().setEnabled(false);
			form.qmbHCPpanel().setValue(hcp);
			form.cmbServicesPanel().setEnabled(true);
			populateServicePanelCombo(form.getLocalContext().getAvailableServiceList());

			form.getContextMenus().Clinical.getProcedureGridADDPROCEDUREItem().setVisible(true);

		}
		if (proc != null)
		{
			if (proc.getPerformingHCPIsNotNull())
			{
				form.qmbHCPpanel().setValue(proc.getPerformingHCP());
				form.qmbHCPpanel().newRow(proc.getPerformingHCP(), proc.getPerformingHCP().getIHcpName());
			}
			if (proc.getServiceIsNotNull())
				form.cmbServicesPanel().setValue(proc.getService());
			if (proc.getProceduresIsNotNull() && proc.getProcedures().size() > 0)
			{
				form.dyngrdProcedures().getRows().clear();
				for (int i = 0; i < proc.getProcedures().size(); i++)
				{
					DynamicGridRow row = form.dyngrdProcedures().getRows().newRow();
					DynamicGridColumn col = form.dyngrdProcedures().getColumns().get(0);
					DynamicGridCell cell = row.getCells().newCell(col, DynamicCellType.QUERYCOMBOBOX);
					cell.getItems().newItem(proc.getProcedures().get(i));
					cell.setValue(proc.getProcedures().get(i));

					row.setValue(proc.getProcedures().get(i));	//WDEV-10772
				}
			}
		}
		if (form.getLocalContext().getIsNewProcedureIsNotNull() && form.getLocalContext().getIsNewProcedure())
		{
			if (hcp != null)
			{
				form.qmbHCPpanel().newRow(hcp, hcp.getIHcpName());
				form.qmbHCPpanel().setValue(hcp);
				form.qmbHCPpanel().setEnabled(false);

			}
			if (proc != null)
			{
				form.cmbServicesPanel().newRow(proc.getService(), proc.getService().getServiceName());
				form.cmbServicesPanel().setValue(proc.getService());
				form.cmbServicesPanel().setEnabled(false);
				form.qmbHCPpanel().newRow(hcp, proc.getPerformingHCP().getIHcpName());
				form.qmbHCPpanel().setValue(proc.getPerformingHCP());
				form.qmbHCPpanel().setEnabled(false);
			}
		}
		if (form.getMode().equals(FormMode.EDIT))
		{
			for (int i = 0; i < form.dyngrdProcedures().getRows().size(); i++)
			{
				DynamicGridRow row = form.dyngrdProcedures().getRows().get(i);
				DynamicGridCell cell = null;
				for (int j = 0; j < row.getCellArray().length; j++)
					if (row.getCellArray()[j] != null)
						cell = row.getCellArray()[j];
				if (cell != null)
					cell.setAutoPostBack(true);
			}
		}
	}

	@Override
	protected void onDyngrdProceduresCellValueChanged(DynamicGridCell cell)
	{
		//WDEV-10772 - starts here
		cell.getRow().setValue(cell.getValue());	
		form.dyngrdProcedures().setValue(null);
		form.dyngrdProcedures().setValue(cell.getValue());
		//WDEV-10772 - ends here
		
		updateContextMenuStatus();
	}

	@Override
	protected void onDyngrdProceduresRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenuStatus();
	}

	@Override
	protected void onQmbHCPpanelValueChanged() throws PresentationLogicException
	{
		if (form.qmbHCPpanel() != null && form.qmbHCPpanel().getValue() != null)
			populateServicePanelCombo(domain.getAvailableServices(form.qmbHCPpanel().getValue()));
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getMessageBoxIsNotNull())
			if (messageBoxId == form.getLocalContext().getMessageBox() && result.equals(DialogResult.YES))
			{
				if (form.treProcedures().getSelectedNode() != null && form.treProcedures().getSelectedNode().getIdentifier() != null && form.treProcedures().getSelectedNode().getIdentifier() instanceof ProceduresPerformedByHCPVo)
					try
					{
						domain.removeProcedure((ProceduresPerformedByHCPVo) form.treProcedures().getSelectedNode().getIdentifier());
						populateTree(domain.listProceduresPerformedByHCP(form.qmbHCP().getValue(), form.cmbServices().getValue()));
					}
					catch (ForeignKeyViolationException e)
					{
						e.printStackTrace();
					}
				initialize();
			}
	}

}
