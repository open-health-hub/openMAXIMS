//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2287.24499)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.presproblemchecklistconfig;

import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.clinical.vo.ProblemListVo;
import ims.clinical.vo.ProblemListVoCollection;
import ims.clinicaladmin.vo.PresProblemChecklistConfigShortVo;
import ims.clinicaladmin.vo.PresProblemChecklistConfigShortVoCollection;
import ims.clinicaladmin.vo.PresProblemChecklistConfigVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result == DialogResult.CANCEL)
			return;

		PresProblemChecklistConfigVo voPresProblemChecklistConfig = form.getLocalContext().getCurrentConfig();
		if (voPresProblemChecklistConfig == null)
			voPresProblemChecklistConfig = new PresProblemChecklistConfigVo();

		if (voPresProblemChecklistConfig.getPresentingProblems() == null)
			voPresProblemChecklistConfig.setPresentingProblems(new ProblemListVoCollection());

		// Get the problems returned by the dialog.
		ClinicalProblemShortVoCollection probList = form.getGlobalContext().Clinical.getSelectedProblems();
		int y = -1;

		if (probList != null)
		{
			// Check them against the existing problems.
			for (int i = 0; i < probList.size(); i++)
			{
				boolean bFound = false;
				for (int j = 0; j < voPresProblemChecklistConfig.getPresentingProblems().size(); j++)
				{
					if (probList.get(i).getID_ClinicalProblem().intValue() == voPresProblemChecklistConfig.getPresentingProblems().get(j).getPresentingProblem().getID_ClinicalProblem().intValue())
					{
						bFound = true;
						break;
					}
				}

				if (bFound == false)
				{
					ProblemListVo vo = new ProblemListVo();
					vo.setPresentingProblem(probList.get(i));
					voPresProblemChecklistConfig.getPresentingProblems().add(vo);
				}
			}
		}

		if (voPresProblemChecklistConfig.getPresentingProblems() != null)
			displayConfigItem(voPresProblemChecklistConfig.getPresentingProblems().sort(SortOrder.DESCENDING));

		form.getLocalContext().setCurrentConfig(voPresProblemChecklistConfig);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();

	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.treConfig().setEnabled(true);
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.cmbSpecialty().setEnabled(true);
			form.btnAddSpecialty().setEnabled(true);
		}

		updateInstance();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);

		form.getLocalContext().setCurrentConfig(new PresProblemChecklistConfigVo());
		form.treConfig().setValue(null);
		form.cmbSpecialty().setVisible(true);
		form.btnAddSpecialty().setVisible(true);
		form.cmbSpecialty().setEnabled(true);
		form.btnAddSpecialty().setEnabled(true);
		updateControlsState();
		form.treConfig().setEnabled(false);
		showSpecialtyControls(true);
	}

	protected void onTreConfigTreeViewNodeExpandCollapse(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		selectionChanged();
	}

	protected void onTreConfigTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		selectionChanged();
		updateControlsState();
	}

	protected void onCmbSpecialtyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnAddSpecialty().setEnabled(form.cmbSpecialty().getValue() != null);
		updateControlsState();
	}

	protected void onBtnAddSpecialtyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbSpecialty().getValue() != null)
		{
			form.cmbSpecialty().setEnabled(false);
			form.btnAddSpecialty().setEnabled(false);

			addSpecialty();
			updateControlsState();
			form.treConfig().setEnabled(true);
			showSpecialtyControls(false);
		}
		else
		{
			engine.showMessage("Select a Specialty");
		}
	}

	private void addSpecialty()
	{
		if (specialtyNotConfigured())
		{
			newInstance();
		}
	}

	private boolean specialtyNotConfigured()
	{
		for (int i = 0; i < form.treConfig().getNodes().size(); i++)
		{
			Object obj = form.treConfig().getNodes().get(i).getValue();
			if ((obj != null) && (obj instanceof PresProblemChecklistConfigShortVo))
			{
				PresProblemChecklistConfigShortVo configVo = (PresProblemChecklistConfigShortVo) obj;
				if ((configVo.getSpecialtyIsNotNull()) && (configVo.getSpecialty().equals(form.cmbSpecialty().getValue())))
				{
					engine.showMessage("This Specialty is already configured.");
					return false;
				}
			}
		}

		return true;

	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PresProblemChecklistConfig.ADD :
				addProblem();
			break;
			case GenForm.ContextMenus.PresProblemChecklistConfig.REMOVE :
				removeProblem();
			break;
		}

	}

	private void removeProblem()
	{

		

		if (form.treConfig().getSelectedNode().getValue() instanceof ProblemListVo)
		{
			ProblemListVo probList = null;
			probList = (ProblemListVo) form.treConfig().getSelectedNode().getValue();
			form.getLocalContext().getCurrentConfig().getPresentingProblems().remove(probList);
		}
		form.treConfig().getNodes().remove(form.treConfig().getSelectedNode());
		updateControlsState();

	}

	private void addProblem()
	{
		ClinicalProblemShortVoCollection clinProblemVoColl = new ClinicalProblemShortVoCollection();

		ClinicalProblemShortVo clinproblem = null;

		if (form.getLocalContext().getCurrentConfig().getPresentingProblems() != null)
		{
			ProblemListVoCollection problems = form.getLocalContext().getCurrentConfig().getPresentingProblems();
			for (int i = 0; i < problems.size(); i++)
			{
				clinproblem = new ClinicalProblemShortVo();
				clinproblem.setID_ClinicalProblem(problems.get(i).getPresentingProblem().getBoId());
				clinproblem.setPCName(problems.get(i).getPresentingProblem().getIItemText());
				clinProblemVoColl.add(clinproblem);

			}
		}

		form.getGlobalContext().Clinical.setSelectedProblems(clinProblemVoColl);
		form.getGlobalContext().Clinical.setPMHConfigSearchType("PR");
		engine.open(form.getForms().Core.DiagnosisProcedureProblemSearch, "Search Problem");

	}

	private void open()
	{
		resetContextVariables();
		displayConfigList(domain.listPresProblemCheckListShort());
		listAvailableSpecialties();
		form.setMode(FormMode.VIEW);
	}

	private void resetContextVariables()
	{
		form.getLocalContext().setCurrentConfig(null);
		form.getGlobalContext().Clinical.setSelectedProblems(null);
	}

	private void updateControlsState()
	{
		form.btnUpdate().setVisible(true);
		form.treConfig().setVisible(true);

		boolean bView = form.getMode().equals(FormMode.VIEW);
		form.btnUpdate().setEnabled(bView && form.treConfig().getSelectedNode() != null);

		if (bView == false)
		{
			enableSelectedNodes();
			form.btnUpdate().setVisible(false);
		}

		updateMenuControlsState(bView);
	}

	private void updateMenuControlsState(boolean bView)
	{
		if (form.treConfig().getSelectedNode() == null)
		{
			form.getContextMenus().hideAllPresProblemChecklistConfigMenuItems();
			return;
		}

		boolean bAddMenuVisible = (bView == false) && (form.treConfig().getSelectedNode().isEnabled()) && (form.treConfig().getSelectedNode().getValue() instanceof PresProblemChecklistConfigShortVo);

		boolean bRemoveMenuVisible = (bView == false) && (form.treConfig().getSelectedNode() != null) && (form.treConfig().getSelectedNode().isEnabled()) && (form.treConfig().getSelectedNode().getValue() instanceof PresProblemChecklistConfigShortVo == false);

		form.getContextMenus().getPresProblemChecklistConfigADDItem().setVisible(bAddMenuVisible);
		form.getContextMenus().getPresProblemChecklistConfigREMOVEItem().setVisible(bRemoveMenuVisible);
	}

	private void enableSelectedNodes()
	{
		if (form.treConfig().getSelectedNode() == null)
			return;

		TreeNode node = null;
		if (form.treConfig().getSelectedNode().getParent() == null)
			node = form.treConfig().getSelectedNode();
		else
			node = form.treConfig().getSelectedNode().getParent();

		for (int i = 0; i < form.treConfig().getNodes().size(); i++)
		{
			boolean bEnabled = node.equals(form.treConfig().getNodes().get(i));
			form.treConfig().getNodes().get(i).setEnabled(bEnabled);
			for (int j = 0; j < form.treConfig().getNodes().get(i).getNodes().size(); j++)
				form.treConfig().getNodes().get(i).getNodes().get(j).setEnabled(bEnabled);
		}
	}

	private boolean save()
	{
		PresProblemChecklistConfigVo item = form.getLocalContext().getCurrentConfig();

		if (item == null || item.getSpecialty()==null)
		{
			engine.showMessage("Please choose a Specialty to Save.");
			return false;
		}

		populateInstanceData(item);

		String[] arrErrors = item.validate(validateUIRules());
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			item = domain.savePresProblemCheckListConfig(item);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		form.getLocalContext().setCurrentConfig(item);
		return true;

	}

	private String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();

		if (form.getLocalContext().getCurrentConfig().getPresentingProblems() == null)
		{
			listOfErrors.add("You must enter at least 1 problem against a specialty before saving.");
		}

		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}

		String[] result = new String[errorCount];
		listOfErrors.toArray(result);

		return result;
	}

	private PresProblemChecklistConfigVo populateInstanceData(PresProblemChecklistConfigVo voPresProblemChecklistConfig)
	{
		if (voPresProblemChecklistConfig.getPresentingProblems() != null)
			voPresProblemChecklistConfig.getPresentingProblems().clear();
		else
			voPresProblemChecklistConfig.setPresentingProblems(new ProblemListVoCollection());

		TreeNode node = findEnabledNode();

		if (node == null)
		{
			return voPresProblemChecklistConfig;
		}

		for (int i = 0; i < node.getNodes().size(); i++)
			voPresProblemChecklistConfig.getPresentingProblems().add((ProblemListVo) node.getNodes().get(i).getValue());

		return voPresProblemChecklistConfig;

	}

	private TreeNode findEnabledNode()
	{
		if (form.treConfig().getSelectedNode() != null)
		{
			if(form.treConfig().getSelectedNode().getValue() instanceof PresProblemChecklistConfigShortVo)
				return form.treConfig().getSelectedNode();
			
			return form.treConfig().getSelectedNode().getParent();
		}
		else
		{
			for (int i = 0; i < form.treConfig().getNodes().size(); i++)
			{
				if (form.treConfig().getNodes().get(i).isEnabled() == true)
					return form.treConfig().getNodes().get(i);
			}

		}

		return null;
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	private void newInstance()
	{
		PresProblemChecklistConfigVo config = form.getLocalContext().getCurrentConfig();
		config.setSpecialty(form.cmbSpecialty().getValue());
		form.getLocalContext().setCurrentConfig(config);

		PresProblemChecklistConfigShortVo voPresProblemChecklistConfigShort = new PresProblemChecklistConfigShortVo();
		voPresProblemChecklistConfigShort.setSpecialty(form.cmbSpecialty().getValue());
		TreeNode node = form.treConfig().getNodes().add(voPresProblemChecklistConfigShort, voPresProblemChecklistConfigShort.getSpecialty().getText());

		node.setExpandedImage(form.getImages().Core.RedSqaure);
		node.setCollapsedImage(form.getImages().Core.RedSqaure);
		node.setSelectedImage(form.getImages().Core.RedSqaure);

		form.treConfig().setValue(voPresProblemChecklistConfigShort);
		form.treConfig().setEnabled(true);

		showSpecialtyControls(true);
	}

	protected void showSpecialtyControls(boolean bShow)
	{
		form.lblSpecialty().setVisible(bShow);
		form.cmbSpecialty().setEnabled(bShow);
		form.cmbSpecialty().setVisible(bShow);
		form.cmbSpecialty().setValue(null);
		form.btnAddSpecialty().setEnabled(!bShow);
		form.btnAddSpecialty().setVisible(bShow);
	}

	private void displayConfigList(PresProblemChecklistConfigShortVoCollection configColl)
	{
		form.treConfig().clear();
		configColl.sort();
		if (configColl != null)
		{
			configColl.sort();
			for (int i = 0; i < configColl.size(); i++)
			{
				TreeNode node = form.treConfig().getNodes().add(configColl.get(i), configColl.get(i).getSpecialtyIsNotNull() ? configColl.get(i).getSpecialty().getText() : "No Specialty coded");
				node.setExpandedImage(form.getImages().Core.RedSqaure);
				node.setCollapsedImage(form.getImages().Core.RedSqaure);
				node.setSelectedImage(form.getImages().Core.RedSqaure);
				node.setExpanded(true);
			}
		}
	}

	private void displayConfigItem(ProblemListVoCollection voCollProblems)
	{
		if (voCollProblems == null)
			return;

		TreeNode nodeToUse = form.treConfig().getSelectedNode();
		if (nodeToUse == null)
			return;

		while (nodeToUse.getParent() != null)
			nodeToUse = nodeToUse.getParent();

		nodeToUse.getNodes().clear();

		for (int i = 0; i < voCollProblems.size(); i++)
		{
			TreeNode nodeProblem = null;
			nodeProblem = nodeToUse.getNodes().add(voCollProblems.get(i), voCollProblems.get(i).getPresentingProblem().getPCName());
			nodeProblem.setExpandedImage(form.getImages().Core.BlueSquare);
			nodeProblem.setCollapsedImage(form.getImages().Core.BlueSquare);
			nodeProblem.setSelectedImage(form.getImages().Core.BlueSquare);
		}

		nodeToUse.setExpanded(true);
	}

	private void selectionChanged()
	{
		TreeNode node = form.treConfig().getSelectedNode();
		Object value = node.getValue();
		if (form.getMode().equals(FormMode.VIEW))
		{
			if (value instanceof PresProblemChecklistConfigShortVo) // Top node
			{
				getPresProblemChecklistConfig((PresProblemChecklistConfigShortVo) value);
			}

			else if (node.getParent().getValue() instanceof PresProblemChecklistConfigShortVo)
			{
				getPresProblemChecklistConfig((PresProblemChecklistConfigShortVo) node.getParent().getValue());
			}

			updateControlsState();
		}

	}

	private void getPresProblemChecklistConfig(PresProblemChecklistConfigShortVo vo)
	{
		PresProblemChecklistConfigVo config = domain.getPresProblemCheckListConfig(vo);
		if (config != null)
		{
			form.getLocalContext().setCurrentConfig(config);
			if (config.getPresentingProblems() != null)
				displayConfigItem(config.getPresentingProblems().sort(SortOrder.DESCENDING));
		}
	}

	private void listAvailableSpecialties()
	{
		form.cmbSpecialty().clear();
		SpecialtyCollection coll = LookupHelper.getSpecialty(domain.getLookupService());
		for (int i = 0; i < coll.size(); i++)
		{
			if (isAlreadyConfigured(coll.get(i)) == false)
				form.cmbSpecialty().newRow(coll.get(i), coll.get(i).toString());
		}
	}

	private boolean isAlreadyConfigured(Specialty specialty)
	{
		boolean bIsAlreadyConfigured = false;
		for (int i = 0; i < form.treConfig().getNodes().size(); i++)
		{
			PresProblemChecklistConfigShortVo vo = (PresProblemChecklistConfigShortVo) form.treConfig().getNodes().get(i).getValue();

			if (vo.getSpecialty().equals(specialty))
			{
				bIsAlreadyConfigured = true;
				break;
			}
		}

		return bIsAlreadyConfigured;
	}

}
