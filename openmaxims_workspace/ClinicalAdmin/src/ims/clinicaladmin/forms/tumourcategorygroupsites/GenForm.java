//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.tumourcategorygroupsites;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrConfigLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabTCategoryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 576, 384, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
				//ims.framework.Control m_customMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(160), new Integer(576), new Integer(384), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4), m_customMappingsForm, instance1 } );
				ims.framework.Control m_customMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4), m_customMappingsForm, instance1, Boolean.FALSE } );
				super.addControl(m_customMappingsControl);
				Menu[] menus1 = m_customMappingsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Taxonomy Mappings:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Category:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 448, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 448, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 128, 104, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			}

			public ims.admin.forms.taxonomymappings.IComponent customMappings()
			{
				return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomMappingsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomMappingsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomMappingsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomMappingsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public TextBox txtCatDescription()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtCatName()
			{
				return (TextBox)super.getControl(6);
			}
			public CheckBox chkCatActive()
			{
				return (CheckBox)super.getControl(7);
			}
		}
		public static class tabTVersionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbVersionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 560, 200, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 224, 90, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 32, 90, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 32, 128, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Version:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 152, 528, 77, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 248, 88, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 112, 88, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 72, 16, 504, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbVersionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbVersionTemp);
				cmbVersionComboBox cmbVersion = (cmbVersionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVersionComboBox.class, m_cmbVersionTemp);
				super.addComboBox(cmbVersion);
			}

			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(5);
			}
			public DateControl dteActiveTo()
			{
				return (DateControl)super.getControl(6);
			}
			public DateControl dteActiveFrom()
			{
				return (DateControl)super.getControl(7);
			}
			public cmbVersionComboBox cmbVersion()
			{
				return (cmbVersionComboBox)super.getComboBox(0);
			}
		}
		public static class tabTGroupContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrGroupDetailsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageGroupDetailsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class qmbLinkedAssessmentComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.assessment.vo.UserAssessmentLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.assessment.vo.UserAssessmentLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.assessment.vo.UserAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.assessment.vo.UserAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.assessment.vo.UserAssessmentLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.assessment.vo.UserAssessmentLiteVo getValue()
						{
							return (ims.assessment.vo.UserAssessmentLiteVo)super.control.getValue();
						}
						public void setValue(ims.assessment.vo.UserAssessmentLiteVo value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 90, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked Assessment:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 265, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group Supports Other Staging Classifications:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 206, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group Supports TNM Classification:", new Integer(1), null, new Integer(0)}));
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 128, 88, 432, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_qmbLinkedAssessmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbLinkedAssessmentTemp);
						qmbLinkedAssessmentComboBox qmbLinkedAssessment = (qmbLinkedAssessmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbLinkedAssessmentComboBox.class, m_qmbLinkedAssessmentTemp);
						super.addComboBox(qmbLinkedAssessment);
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 272, 40, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 272, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					}
		
					public qmbLinkedAssessmentComboBox qmbLinkedAssessment()
					{
						return (qmbLinkedAssessmentComboBox)super.getComboBox(0);
					}
					public CheckBox chkOtherClassifications()
					{
						return (CheckBox)super.getControl(4);
					}
					public CheckBox chkHasTNM()
					{
						return (CheckBox)super.getControl(5);
					}
				}
				public static class tabGroupTNMContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 229, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TNM Staging Requires Histology Grade:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 222, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TNM Staging Requires Histology Type:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 224, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TNM Staging Requires Serum Markers:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 312, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TNM Staging Requires Age (relative to 45y old) Value:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 217, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group Supports Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 240, 48, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 336, 144, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 240, 80, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 240, 112, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					}
		
					public CheckBox chkReqSerumMarkers()
					{
						return (CheckBox)super.getControl(5);
					}
					public CheckBox chkReqHistology()
					{
						return (CheckBox)super.getControl(6);
					}
					public CheckBox chkReqO45()
					{
						return (CheckBox)super.getControl(7);
					}
					public CheckBox chkReqDiff()
					{
						return (CheckBox)super.getControl(8);
					}
					public CheckBox chkPrognosticGrouping()
					{
						return (CheckBox)super.getControl(9);
					}
				}
				public static class tabClassificationContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 157, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other Classification", new Integer(1), null, new Integer(1)}));
				
						// Tree Controls
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 552, 344, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.Oncology.contextMenuTumourGroupOtherClassification, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public TreeView treOtherClassification()
					{
						return (TreeView)super.getControl(1);
					}
				}
				public static class tabPrognosticGroupingContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Uses M Values:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Uses N Values:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Uses T Values:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 245, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gleason pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 222, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "PSA pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 278, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Risk Category pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 112, 303, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histological Grade pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 295, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Location pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 297, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histological Type pertinent to Prognostic Grouping:", new Integer(1), null, new Integer(0)}));
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 320, 64, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 320, 40, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 320, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 320, 208, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1053), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 320, 184, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1052), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 320, 160, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1051), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 320, 136, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1050), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 320, 112, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1048), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 320, 88, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1046), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
					}
		
					public CheckBox chkUsesMValues()
					{
						return (CheckBox)super.getControl(9);
					}
					public CheckBox chkUsesNValues()
					{
						return (CheckBox)super.getControl(10);
					}
					public CheckBox chkUsesTValues()
					{
						return (CheckBox)super.getControl(11);
					}
					public CheckBox chkGleasonPrognosticGrouping()
					{
						return (CheckBox)super.getControl(12);
					}
					public CheckBox chkPSAPrognosticGrouping()
					{
						return (CheckBox)super.getControl(13);
					}
					public CheckBox chkRiskCategoryPrognosticGrouping()
					{
						return (CheckBox)super.getControl(14);
					}
					public CheckBox chkTumourLocationPrognosticGrouping()
					{
						return (CheckBox)super.getControl(15);
					}
					public CheckBox chkHistologicalGradePrognosticGrouping()
					{
						return (CheckBox)super.getControl(16);
					}
					public CheckBox chkHistologyTypePrognosticGrouping()
					{
						return (CheckBox)super.getControl(17);
					}
				}
				public static class tabPageTumourLocationContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdPrognosticLocationRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdPrognosticLocationRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColTumourLocationReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColTumourLocationReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColTumourLocationOpened()
						{
							super.row.showOpened(0);
						}
						public String getColTumourLocation()
						{
							return (String)super.row.get(0);
						}
						public void setColTumourLocation(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColTumourLocationTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.oncology.vo.PrognosticLocationConfigVo getValue()
						{
							return (ims.oncology.vo.PrognosticLocationConfigVo)super.row.getValue();
						}
						public void setValue(ims.oncology.vo.PrognosticLocationConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdPrognosticLocationRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdPrognosticLocationRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdPrognosticLocationRow get(int index)
						{
							return new grdPrognosticLocationRow(super.collection.get(index));
						}
						public grdPrognosticLocationRow newRow()
						{
							return new grdPrognosticLocationRow(super.collection.newRow());
						}
						public grdPrognosticLocationRow newRow(boolean autoSelect)
						{
							return new grdPrognosticLocationRow(super.collection.newRow(autoSelect));
						}
						public grdPrognosticLocationRow newRowAt(int index)
						{
							return new grdPrognosticLocationRow(super.collection.newRowAt(index));
						}
						public grdPrognosticLocationRow newRowAt(int index, boolean autoSelect)
						{
							return new grdPrognosticLocationRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdPrognosticLocationGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.oncology.vo.PrognosticLocationConfigVoCollection getValues()
						{
							ims.oncology.vo.PrognosticLocationConfigVoCollection listOfValues = new ims.oncology.vo.PrognosticLocationConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.oncology.vo.PrognosticLocationConfigVo getValue()
						{
							return (ims.oncology.vo.PrognosticLocationConfigVo)super.grid.getValue();
						}
						public void setValue(ims.oncology.vo.PrognosticLocationConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdPrognosticLocationRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdPrognosticLocationRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdPrognosticLocationRowCollection getRows()
						{
							return new grdPrognosticLocationRowCollection(super.grid.getRows());
						}
						public grdPrognosticLocationRow getRowByValue(ims.oncology.vo.PrognosticLocationConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdPrognosticLocationRow(row);
						}
						public void setColTumourLocationHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColTumourLocationHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdPrognosticLocationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1055), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocation, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdPrognosticLocationTemp);
						grdPrognosticLocationGrid grdPrognosticLocation = (grdPrognosticLocationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPrognosticLocationGrid.class, m_grdPrognosticLocationTemp);
						grdPrognosticLocation.addStringColumn("Tumour Location", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdPrognosticLocation);
					}
		
					public grdPrognosticLocationGrid grdPrognosticLocation()
					{
						return (grdPrognosticLocationGrid)super.getGrid(0);
					}
				}
				public static class tabPageRiskCategoryContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdRiskCategoryRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdRiskCategoryRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColRiskCategoryReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColRiskCategoryReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColRiskCategoryOpened()
						{
							super.row.showOpened(0);
						}
						public String getColRiskCategory()
						{
							return (String)super.row.get(0);
						}
						public void setColRiskCategory(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColRiskCategoryTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.clinicaladmin.vo.PrognosticRiskConfigVo getValue()
						{
							return (ims.clinicaladmin.vo.PrognosticRiskConfigVo)super.row.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.PrognosticRiskConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdRiskCategoryRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdRiskCategoryRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdRiskCategoryRow get(int index)
						{
							return new grdRiskCategoryRow(super.collection.get(index));
						}
						public grdRiskCategoryRow newRow()
						{
							return new grdRiskCategoryRow(super.collection.newRow());
						}
						public grdRiskCategoryRow newRow(boolean autoSelect)
						{
							return new grdRiskCategoryRow(super.collection.newRow(autoSelect));
						}
						public grdRiskCategoryRow newRowAt(int index)
						{
							return new grdRiskCategoryRow(super.collection.newRowAt(index));
						}
						public grdRiskCategoryRow newRowAt(int index, boolean autoSelect)
						{
							return new grdRiskCategoryRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdRiskCategoryGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.clinicaladmin.vo.PrognosticRiskConfigVoCollection getValues()
						{
							ims.clinicaladmin.vo.PrognosticRiskConfigVoCollection listOfValues = new ims.clinicaladmin.vo.PrognosticRiskConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.clinicaladmin.vo.PrognosticRiskConfigVo getValue()
						{
							return (ims.clinicaladmin.vo.PrognosticRiskConfigVo)super.grid.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.PrognosticRiskConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdRiskCategoryRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdRiskCategoryRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdRiskCategoryRowCollection getRows()
						{
							return new grdRiskCategoryRowCollection(super.grid.getRows());
						}
						public grdRiskCategoryRow getRowByValue(ims.clinicaladmin.vo.PrognosticRiskConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdRiskCategoryRow(row);
						}
						public void setColRiskCategoryHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColRiskCategoryHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdRiskCategoryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1057), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRisk, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdRiskCategoryTemp);
						grdRiskCategoryGrid grdRiskCategory = (grdRiskCategoryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRiskCategoryGrid.class, m_grdRiskCategoryTemp);
						grdRiskCategory.addStringColumn("Risk Category", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdRiskCategory);
					}
		
					public grdRiskCategoryGrid grdRiskCategory()
					{
						return (grdRiskCategoryGrid)super.getGrid(0);
					}
				}
				public static class tabPagePSAContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdPSARow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdPSARow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColPSAReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColPSAReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColPSAOpened()
						{
							super.row.showOpened(0);
						}
						public String getColPSA()
						{
							return (String)super.row.get(0);
						}
						public void setColPSA(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColPSATooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.clinicaladmin.vo.PSAConfigVo getValue()
						{
							return (ims.clinicaladmin.vo.PSAConfigVo)super.row.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.PSAConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdPSARowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdPSARowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdPSARow get(int index)
						{
							return new grdPSARow(super.collection.get(index));
						}
						public grdPSARow newRow()
						{
							return new grdPSARow(super.collection.newRow());
						}
						public grdPSARow newRow(boolean autoSelect)
						{
							return new grdPSARow(super.collection.newRow(autoSelect));
						}
						public grdPSARow newRowAt(int index)
						{
							return new grdPSARow(super.collection.newRowAt(index));
						}
						public grdPSARow newRowAt(int index, boolean autoSelect)
						{
							return new grdPSARow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdPSAGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.clinicaladmin.vo.PSAConfigVoCollection getValues()
						{
							ims.clinicaladmin.vo.PSAConfigVoCollection listOfValues = new ims.clinicaladmin.vo.PSAConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.clinicaladmin.vo.PSAConfigVo getValue()
						{
							return (ims.clinicaladmin.vo.PSAConfigVo)super.grid.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.PSAConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdPSARow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdPSARow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdPSARowCollection getRows()
						{
							return new grdPSARowCollection(super.grid.getRows());
						}
						public grdPSARow getRowByValue(ims.clinicaladmin.vo.PSAConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdPSARow(row);
						}
						public void setColPSAHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColPSAHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdPSATemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1059), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSA, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdPSATemp);
						grdPSAGrid grdPSA = (grdPSAGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPSAGrid.class, m_grdPSATemp);
						grdPSA.addStringColumn("PSA", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdPSA);
					}
		
					public grdPSAGrid grdPSA()
					{
						return (grdPSAGrid)super.getGrid(0);
					}
				}
				public static class tabPageGleasonContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdGleasonRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdGleasonRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColGleasonReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColGleasonReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColGleasonOpened()
						{
							super.row.showOpened(0);
						}
						public String getColGleason()
						{
							return (String)super.row.get(0);
						}
						public void setColGleason(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColGleasonTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.clinicaladmin.vo.GleasonConfigLiteVo getValue()
						{
							return (ims.clinicaladmin.vo.GleasonConfigLiteVo)super.row.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.GleasonConfigLiteVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdGleasonRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdGleasonRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdGleasonRow get(int index)
						{
							return new grdGleasonRow(super.collection.get(index));
						}
						public grdGleasonRow newRow()
						{
							return new grdGleasonRow(super.collection.newRow());
						}
						public grdGleasonRow newRow(boolean autoSelect)
						{
							return new grdGleasonRow(super.collection.newRow(autoSelect));
						}
						public grdGleasonRow newRowAt(int index)
						{
							return new grdGleasonRow(super.collection.newRowAt(index));
						}
						public grdGleasonRow newRowAt(int index, boolean autoSelect)
						{
							return new grdGleasonRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdGleasonGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.clinicaladmin.vo.GleasonConfigLiteVoCollection getValues()
						{
							ims.clinicaladmin.vo.GleasonConfigLiteVoCollection listOfValues = new ims.clinicaladmin.vo.GleasonConfigLiteVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.clinicaladmin.vo.GleasonConfigLiteVo getValue()
						{
							return (ims.clinicaladmin.vo.GleasonConfigLiteVo)super.grid.getValue();
						}
						public void setValue(ims.clinicaladmin.vo.GleasonConfigLiteVo value)
						{
							super.grid.setValue(value);
						}
						public grdGleasonRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdGleasonRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdGleasonRowCollection getRows()
						{
							return new grdGleasonRowCollection(super.grid.getRows());
						}
						public grdGleasonRow getRowByValue(ims.clinicaladmin.vo.GleasonConfigLiteVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdGleasonRow(row);
						}
						public void setColGleasonHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColGleasonHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 552, 368, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdGleasonTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 1061), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleason, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdGleasonTemp);
						grdGleasonGrid grdGleason = (grdGleasonGrid)GridFlyweightFactory.getInstance().createGridBridge(grdGleasonGrid.class, m_grdGleasonTemp);
						grdGleason.addStringColumn("Gleason", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdGleason);
					}
		
					public grdGleasonGrid grdGleason()
					{
						return (grdGleasonGrid)super.getGrid(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageGroupDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageGroupDetailsContainer m_tabPageGroupDetailsContainer = (tabPageGroupDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageGroupDetailsContainer.class, m_tabPageGroupDetails, factory);
					super.addContainer(m_tabPageGroupDetails, m_tabPageGroupDetailsContainer);
					ims.framework.utils.SizeInfo m_tabPageGroupDetailsDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPageGroupDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
					m_tabPageGroupDetailsContainer.setContext(form, appForm, m_tabPageGroupDetails, loader, form_images_local, contextMenus, startControlID, m_tabPageGroupDetailsDesignSize, m_tabPageGroupDetailsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabGroupTNM = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TNM", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabGroupTNMContainer m_tabGroupTNMContainer = (tabGroupTNMContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGroupTNMContainer.class, m_tabGroupTNM, factory);
					super.addContainer(m_tabGroupTNM, m_tabGroupTNMContainer);
					ims.framework.utils.SizeInfo m_tabGroupTNMDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabGroupTNMRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
					m_tabGroupTNMContainer.setContext(form, appForm, m_tabGroupTNM, loader, form_images_local, contextMenus, startControlID, m_tabGroupTNMDesignSize, m_tabGroupTNMRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabClassification = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Classification", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabClassificationContainer m_tabClassificationContainer = (tabClassificationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClassificationContainer.class, m_tabClassification, factory);
					super.addContainer(m_tabClassification, m_tabClassificationContainer);
					ims.framework.utils.SizeInfo m_tabClassificationDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabClassificationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
					m_tabClassificationContainer.setContext(form, appForm, m_tabClassification, loader, form_images_local, contextMenus, startControlID, m_tabClassificationDesignSize, m_tabClassificationRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPrognosticGrouping = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Prognostic", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPrognosticGroupingContainer m_tabPrognosticGroupingContainer = (tabPrognosticGroupingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPrognosticGroupingContainer.class, m_tabPrognosticGrouping, factory);
					super.addContainer(m_tabPrognosticGrouping, m_tabPrognosticGroupingContainer);
					ims.framework.utils.SizeInfo m_tabPrognosticGroupingDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPrognosticGroupingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
					m_tabPrognosticGroupingContainer.setContext(form, appForm, m_tabPrognosticGrouping, loader, form_images_local, contextMenus, startControlID, m_tabPrognosticGroupingDesignSize, m_tabPrognosticGroupingRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageTumourLocation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageTumourLocationContainer m_tabPageTumourLocationContainer = (tabPageTumourLocationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageTumourLocationContainer.class, m_tabPageTumourLocation, factory);
					super.addContainer(m_tabPageTumourLocation, m_tabPageTumourLocationContainer);
					ims.framework.utils.SizeInfo m_tabPageTumourLocationDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPageTumourLocationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
					m_tabPageTumourLocationContainer.setContext(form, appForm, m_tabPageTumourLocation, loader, form_images_local, contextMenus, startControlID, m_tabPageTumourLocationDesignSize, m_tabPageTumourLocationRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageRiskCategory = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Risk", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageRiskCategoryContainer m_tabPageRiskCategoryContainer = (tabPageRiskCategoryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageRiskCategoryContainer.class, m_tabPageRiskCategory, factory);
					super.addContainer(m_tabPageRiskCategory, m_tabPageRiskCategoryContainer);
					ims.framework.utils.SizeInfo m_tabPageRiskCategoryDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPageRiskCategoryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper63.getWidth(), anchoringHelper63.getHeight());
					m_tabPageRiskCategoryContainer.setContext(form, appForm, m_tabPageRiskCategory, loader, form_images_local, contextMenus, startControlID, m_tabPageRiskCategoryDesignSize, m_tabPageRiskCategoryRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPagePSA = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"PSA", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPagePSAContainer m_tabPagePSAContainer = (tabPagePSAContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePSAContainer.class, m_tabPagePSA, factory);
					super.addContainer(m_tabPagePSA, m_tabPagePSAContainer);
					ims.framework.utils.SizeInfo m_tabPagePSADesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPagePSARuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
					m_tabPagePSAContainer.setContext(form, appForm, m_tabPagePSA, loader, form_images_local, contextMenus, startControlID, m_tabPagePSADesignSize, m_tabPagePSARuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 8, 128, 576, 408, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageGleason = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Gleason", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPageGleasonContainer m_tabPageGleasonContainer = (tabPageGleasonContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageGleasonContainer.class, m_tabPageGleason, factory);
					super.addContainer(m_tabPageGleason, m_tabPageGleasonContainer);
					ims.framework.utils.SizeInfo m_tabPageGleasonDesignSize = new ims.framework.utils.SizeInfo(576, 408);
					ims.framework.utils.SizeInfo m_tabPageGleasonRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper65.getWidth(), anchoringHelper65.getHeight());
					m_tabPageGleasonContainer.setContext(form, appForm, m_tabPageGleason, loader, form_images_local, contextMenus, startControlID, m_tabPageGleasonDesignSize, m_tabPageGleasonRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
				}
				public void settabPageGroupDetailsEnabled(boolean value)
				{
					tabPageGroupDetails().setEnabled(value);
				}
				public void settabGroupTNMEnabled(boolean value)
				{
					tabGroupTNM().setEnabled(value);
				}
				public void settabClassificationEnabled(boolean value)
				{
					tabClassification().setEnabled(value);
				}
				public void settabPrognosticGroupingEnabled(boolean value)
				{
					tabPrognosticGrouping().setEnabled(value);
				}
				public void settabPageTumourLocationEnabled(boolean value)
				{
					tabPageTumourLocation().setEnabled(value);
				}
				public void settabPageRiskCategoryEnabled(boolean value)
				{
					tabPageRiskCategory().setEnabled(value);
				}
				public void settabPagePSAEnabled(boolean value)
				{
					tabPagePSA().setEnabled(value);
				}
				public void settabPageGleasonEnabled(boolean value)
				{
					tabPageGleason().setEnabled(value);
				}
				public void showtabPageGroupDetails()
				{
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabPageGroupDetails().setVisible(true);
				}
				public void showtabGroupTNM()
				{
					tabPageGroupDetails().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabGroupTNM().setVisible(true);
				}
				public void showtabClassification()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabClassification().setVisible(true);
				}
				public void showtabPrognosticGrouping()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabPrognosticGrouping().setVisible(true);
				}
				public void showtabPageTumourLocation()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabPageTumourLocation().setVisible(true);
				}
				public void showtabPageRiskCategory()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(false);
					tabPageRiskCategory().setVisible(true);
				}
				public void showtabPagePSA()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPageGleason().setVisible(false);
					tabPagePSA().setVisible(true);
				}
				public void showtabPageGleason()
				{
					tabPageGroupDetails().setVisible(false);
					tabGroupTNM().setVisible(false);
					tabClassification().setVisible(false);
					tabPrognosticGrouping().setVisible(false);
					tabPageTumourLocation().setVisible(false);
					tabPageRiskCategory().setVisible(false);
					tabPagePSA().setVisible(false);
					tabPageGleason().setVisible(true);
				}
		
				public tabPageGroupDetailsContainer tabPageGroupDetails()
				{
					return (tabPageGroupDetailsContainer)super.layers.get(0);
				}
				public tabGroupTNMContainer tabGroupTNM()
				{
					return (tabGroupTNMContainer)super.layers.get(1);
				}
				public tabClassificationContainer tabClassification()
				{
					return (tabClassificationContainer)super.layers.get(2);
				}
				public tabPrognosticGroupingContainer tabPrognosticGrouping()
				{
					return (tabPrognosticGroupingContainer)super.layers.get(3);
				}
				public tabPageTumourLocationContainer tabPageTumourLocation()
				{
					return (tabPageTumourLocationContainer)super.layers.get(4);
				}
				public tabPageRiskCategoryContainer tabPageRiskCategory()
				{
					return (tabPageRiskCategoryContainer)super.layers.get(5);
				}
				public tabPagePSAContainer tabPagePSA()
				{
					return (tabPagePSAContainer)super.layers.get(6);
				}
				public tabPageGleasonContainer tabPageGleason()
				{
					return (tabPageGleasonContainer)super.layers.get(7);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrGroupDetailsLayer m_lyrGroupDetailsLayer = (lyrGroupDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrGroupDetailsLayer.class, this, factory);
				super.addLayer(m_lyrGroupDetailsLayer);
				m_lyrGroupDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Group:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 128, 32, 456, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 456, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 128, 104, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			}

			public lyrGroupDetailsLayer lyrGroupDetails()
			{
				return (lyrGroupDetailsLayer)super.getLayer(0);
			}
			public TextBox txtGroupDescription()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtGroupName()
			{
				return (TextBox)super.getControl(12);
			}
			public CheckBox chkGroupActive()
			{
				return (CheckBox)super.getControl(13);
			}
		}
		public static class tabTSiteContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 576, 328, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customSiteMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 2000, anchoringHelper72.getSize(), instance1, startTabIndex.intValue() + 1070, skipContextValidation);
				//ims.framework.Control m_customSiteMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(8), new Integer(216), new Integer(576), new Integer(328), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1070), m_customSiteMappingsForm, instance1 } );
				ims.framework.Control m_customSiteMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1073),  new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1070), m_customSiteMappingsForm, instance1, Boolean.FALSE } );
				super.addControl(m_customSiteMappingsControl);
				Menu[] menus1 = m_customSiteMappingsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 274, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site requires a specific Histology configuration:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 247, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site requires a specific TNM Configuration:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 8, 192, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Taxonomy Mappings:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Site:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 448, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 1065), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 128, 8, 448, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 1063), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 288, 160, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 1068), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 288, 136, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 1067), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 128, 104, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 1066), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
			}

			public ims.admin.forms.taxonomymappings.IComponent customSiteMappings()
			{
				return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomSiteMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomSiteMappingsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomSiteMappingsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomSiteMappingsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomSiteMappingsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public TextBox txtSiteDescription()
			{
				return (TextBox)super.getControl(7);
			}
			public TextBox txtSiteName()
			{
				return (TextBox)super.getControl(8);
			}
			public CheckBox chkSiteSpecificHistology()
			{
				return (CheckBox)super.getControl(9);
			}
			public CheckBox chkSiteSpecificTNM()
			{
				return (CheckBox)super.getControl(10);
			}
			public CheckBox chkSiteActive()
			{
				return (CheckBox)super.getControl(11);
			}
		}
		public static class tabTNMContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTNMLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabTNMValuesContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 544, 432, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 2081), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuTumourCategoryTNM, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dynTNM()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
				public static class tabTNMMappingsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 544, 360, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_customTNMMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 3000, anchoringHelper85.getSize(), instance1, startTabIndex.intValue() + 2084, skipContextValidation);
						//ims.framework.Control m_customTNMMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(8), new Integer(80), new Integer(544), new Integer(360), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2084), m_customTNMMappingsForm, instance1 } );
						ims.framework.Control m_customTNMMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1087),  new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2084), m_customTNMMappingsForm, instance1, Boolean.FALSE } );
						super.addControl(m_customTNMMappingsControl);
						Menu[] menus1 = m_customTNMMappingsForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Value:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 2082), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 96, 48, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 2083), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					}
		
					public ims.admin.forms.taxonomymappings.IComponent customTNMMappings()
					{
						return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setcustomTNMMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setcustomTNMMappingsVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean iscustomTNMMappingsVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setcustomTNMMappingsEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean iscustomTNMMappingsEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public TextBox txtTNMValue()
					{
						return (TextBox)super.getControl(3);
					}
					public TextBox txtTNMDescription()
					{
						return (TextBox)super.getControl(4);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 568, 472, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabTNMValues = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TNM Values", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabTNMValuesContainer m_tabTNMValuesContainer = (tabTNMValuesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTNMValuesContainer.class, m_tabTNMValues, factory);
					super.addContainer(m_tabTNMValues, m_tabTNMValuesContainer);
					ims.framework.utils.SizeInfo m_tabTNMValuesDesignSize = new ims.framework.utils.SizeInfo(568, 472);
					ims.framework.utils.SizeInfo m_tabTNMValuesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper90.getWidth(), anchoringHelper90.getHeight());
					m_tabTNMValuesContainer.setContext(form, appForm, m_tabTNMValues, loader, form_images_local, contextMenus, startControlID, m_tabTNMValuesDesignSize, m_tabTNMValuesRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 568, 472, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabTNMMappings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabTNMMappingsContainer m_tabTNMMappingsContainer = (tabTNMMappingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTNMMappingsContainer.class, m_tabTNMMappings, factory);
					super.addContainer(m_tabTNMMappings, m_tabTNMMappingsContainer);
					ims.framework.utils.SizeInfo m_tabTNMMappingsDesignSize = new ims.framework.utils.SizeInfo(568, 472);
					ims.framework.utils.SizeInfo m_tabTNMMappingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper91.getWidth(), anchoringHelper91.getHeight());
					m_tabTNMMappingsContainer.setContext(form, appForm, m_tabTNMMappings, loader, form_images_local, contextMenus, startControlID, m_tabTNMMappingsDesignSize, m_tabTNMMappingsRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabTNMValues().setVisible(false);
					tabTNMMappings().setVisible(false);
				}
				public void settabTNMValuesEnabled(boolean value)
				{
					tabTNMValues().setEnabled(value);
				}
				public void settabTNMMappingsEnabled(boolean value)
				{
					tabTNMMappings().setEnabled(value);
				}
				public void showtabTNMValues()
				{
					tabTNMMappings().setVisible(false);
					tabTNMValues().setVisible(true);
				}
				public void showtabTNMMappings()
				{
					tabTNMValues().setVisible(false);
					tabTNMMappings().setVisible(true);
				}
		
				public tabTNMValuesContainer tabTNMValues()
				{
					return (tabTNMValuesContainer)super.layers.get(0);
				}
				public tabTNMMappingsContainer tabTNMMappings()
				{
					return (tabTNMMappingsContainer)super.layers.get(1);
				}
			}
		
			public static class GroupTNMValuesRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 32, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper92.getX(), anchoringHelper92.getY(), anchoringHelper92.getWidth(), "All", startTabIndex.intValue() + 2072);
					RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 296, 32, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper93.getX(), anchoringHelper93.getY(), anchoringHelper93.getWidth(), "M Values Only", startTabIndex.intValue() + 2078);
					RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 184, 32, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper94.getX(), anchoringHelper94.getY(), anchoringHelper94.getWidth(), "N Values Only", startTabIndex.intValue() + 2076);
					RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 72, 32, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(3, anchoringHelper95.getX(), anchoringHelper95.getY(), anchoringHelper95.getWidth(), "T Values Only", startTabIndex.intValue() + 2074);
				}
				public void setText(GroupTNMValuesEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupTNMValuesEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupTNMValuesEnumeration.None;
						case 0: return GroupTNMValuesEnumeration.rdoAll;
						case 1: return GroupTNMValuesEnumeration.rdoMOnly;
						case 2: return GroupTNMValuesEnumeration.rdoNOnly;
						case 3: return GroupTNMValuesEnumeration.rdoTOnly;
					}
					return null;
				}
				public void setValue(GroupTNMValuesEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupTNMValuesEnumeration.None.id);
				}
				public boolean isEnabled(GroupTNMValuesEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupTNMValuesEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupTNMValuesEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupTNMValuesEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupTNMValuesEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupTNMValuesEnumeration None = new GroupTNMValuesEnumeration(-1);
				public static GroupTNMValuesEnumeration rdoAll = new GroupTNMValuesEnumeration(0);
				public static GroupTNMValuesEnumeration rdoMOnly = new GroupTNMValuesEnumeration(1);
				public static GroupTNMValuesEnumeration rdoNOnly = new GroupTNMValuesEnumeration(2);
				public static GroupTNMValuesEnumeration rdoTOnly = new GroupTNMValuesEnumeration(3);
				private GroupTNMValuesEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupTNMValuesEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTNMLayer m_lyrTNMLayer = (lyrTNMLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTNMLayer.class, this, factory);
				super.addLayer(m_lyrTNMLayer);
				m_lyrTNMLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 496, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To be populated with the text of the Tumour group and site selected", new Integer(1), null, new Integer(0)}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 400, 32, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 2079), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.TRUE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupTNMValues = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(0), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroupTNMValues);
				GroupTNMValuesRadioButton GroupTNMValues = (GroupTNMValuesRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTNMValuesRadioButton.class, tmpGroupTNMValues);
				GroupTNMValues.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupTNMValues);
			}

			public lyrTNMLayer lyrTNM()
			{
				return (lyrTNMLayer)super.getLayer(0);
			}
			public Label lblTitle()
			{
				return (Label)super.getControl(2);
			}
			public CheckBox chkActiveTNM()
			{
				return (CheckBox)super.getControl(3);
			}
			public GroupTNMValuesRadioButton GroupTNMValues()
			{
				return (GroupTNMValuesRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabHistologyTypeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHistologyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHistologyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColHistologyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColHistologyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColHistologyOpened()
				{
					super.row.showOpened(0);
				}
				public String getColHistology()
				{
					return (String)super.row.get(0);
				}
				public void setColHistology(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColHistologyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.clinicaladmin.vo.TumourGroupHistologyVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupHistologyVo)super.row.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupHistologyVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHistologyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHistologyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHistologyRow get(int index)
				{
					return new grdHistologyRow(super.collection.get(index));
				}
				public grdHistologyRow newRow()
				{
					return new grdHistologyRow(super.collection.newRow());
				}
				public grdHistologyRow newRow(boolean autoSelect)
				{
					return new grdHistologyRow(super.collection.newRow(autoSelect));
				}
				public grdHistologyRow newRowAt(int index)
				{
					return new grdHistologyRow(super.collection.newRowAt(index));
				}
				public grdHistologyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHistologyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHistologyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinicaladmin.vo.TumourGroupHistologyVoCollection getValues()
				{
					ims.clinicaladmin.vo.TumourGroupHistologyVoCollection listOfValues = new ims.clinicaladmin.vo.TumourGroupHistologyVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinicaladmin.vo.TumourGroupHistologyVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupHistologyVo)super.grid.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupHistologyVo value)
				{
					super.grid.setValue(value);
				}
				public grdHistologyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHistologyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHistologyRowCollection getRows()
				{
					return new grdHistologyRowCollection(super.grid.getRows());
				}
				public grdHistologyRow getRowByValue(ims.clinicaladmin.vo.TumourGroupHistologyVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHistologyRow(row);
				}
				public void setColHistologyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColHistologyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 120, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology Type", new Integer(1), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 472, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "This label To be populated with the text of the Tumour group and site selected", new Integer(0), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 576, 480, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHistologyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 3086), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuTumourHistologyLayer, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHistologyTemp);
				grdHistologyGrid grdHistology = (grdHistologyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHistologyGrid.class, m_grdHistologyTemp);
				grdHistology.addStringColumn("Histology Values", 0, 0, -1, false, false, 0, 100, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHistology);
			}

			public Label lblTitleHistology()
			{
				return (Label)super.getControl(1);
			}
			public grdHistologyGrid grdHistology()
			{
				return (grdHistologyGrid)super.getGrid(0);
			}
		}
		public static class tabHistologyGradeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology Grade", new Integer(1), null, new Integer(1)}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 576, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 3089), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdDifferentation()
			{
				return (DynamicGrid)super.getControl(1);
			}
		}
		public static class tabSpecialtiesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 576, 520, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 3090), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public TreeView treSpecialty()
			{
				return (TreeView)super.getControl(0);
			}
		}
		public static class tabSerumMarkerContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSerumMarkersRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSerumMarkersRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColValueReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColValueReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColValueOpened()
				{
					super.row.showOpened(0);
				}
				public String getColValue()
				{
					return (String)super.row.get(0);
				}
				public void setColValue(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColValueTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDescriptionReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDescriptionOpened()
				{
					super.row.showOpened(1);
				}
				public String getColDescription()
				{
					return (String)super.row.get(1);
				}
				public void setColDescription(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDescriptionTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinicaladmin.vo.TumourSerumMarkersLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourSerumMarkersLiteVo)super.row.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSerumMarkersRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSerumMarkersRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSerumMarkersRow get(int index)
				{
					return new grdSerumMarkersRow(super.collection.get(index));
				}
				public grdSerumMarkersRow newRow()
				{
					return new grdSerumMarkersRow(super.collection.newRow());
				}
				public grdSerumMarkersRow newRow(boolean autoSelect)
				{
					return new grdSerumMarkersRow(super.collection.newRow(autoSelect));
				}
				public grdSerumMarkersRow newRowAt(int index)
				{
					return new grdSerumMarkersRow(super.collection.newRowAt(index));
				}
				public grdSerumMarkersRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSerumMarkersRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSerumMarkersGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection getValues()
				{
					ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection listOfValues = new ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinicaladmin.vo.TumourSerumMarkersLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourSerumMarkersLiteVo)super.grid.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdSerumMarkersRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSerumMarkersRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSerumMarkersRowCollection getRows()
				{
					return new grdSerumMarkersRowCollection(super.grid.getRows());
				}
				public grdSerumMarkersRow getRowByValue(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSerumMarkersRow(row);
				}
				public void setColValueHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColValueHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 472, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "this label To be populated with the text of the Tumour group and site selected", new Integer(0), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 576, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSerumMarkersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 3091), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuTumourSerumMarkers, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSerumMarkersTemp);
				grdSerumMarkersGrid grdSerumMarkers = (grdSerumMarkersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSerumMarkersGrid.class, m_grdSerumMarkersTemp);
				grdSerumMarkers.addStringColumn("Value", 0, 0, 100, false, false, 0, 10, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSerumMarkers.addStringColumn("Description", 0, 0, -1, false, false, 0, 150, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSerumMarkers);
			}

			public Label lblTitleSerum()
			{
				return (Label)super.getControl(0);
			}
			public grdSerumMarkersGrid grdSerumMarkers()
			{
				return (grdSerumMarkersGrid)super.getGrid(0);
			}
		}
		public static class tabPagTaxonomyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 576, 536, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customGroupMappingForm = loader.loadComponent(104124, appForm, startControlID * 10 + 4000, anchoringHelper106.getSize(), instance1, startTabIndex.intValue() + 3093, skipContextValidation);
				//ims.framework.Control m_customGroupMappingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(8), new Integer(8), new Integer(576), new Integer(536), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3093), m_customGroupMappingForm, instance1 } );
				ims.framework.Control m_customGroupMappingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1106),  new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3093), m_customGroupMappingForm, instance1, Boolean.FALSE } );
				super.addControl(m_customGroupMappingControl);
				Menu[] menus1 = m_customGroupMappingForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.admin.forms.taxonomymappings.IComponent customGroupMapping()
			{
				return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomGroupMappingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomGroupMappingVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomGroupMappingVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomGroupMappingEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomGroupMappingEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabNoDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 208, 224, 105, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No details", new Integer(1), null, new Integer(2)}));
			}

		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTCategory = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Category", new Integer(startControlID.intValue() + 2), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTCategoryContainer m_tabTCategoryContainer = (tabTCategoryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTCategoryContainer.class, m_tabTCategory, factory);
			super.addContainer(m_tabTCategory, m_tabTCategoryContainer);
			ims.framework.utils.SizeInfo m_tabTCategoryDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabTCategoryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper108.getWidth(), anchoringHelper108.getHeight());
			m_tabTCategoryContainer.setContext(form, appForm, m_tabTCategory, loader, form_images_local, contextMenus, startControlID, m_tabTCategoryDesignSize, m_tabTCategoryRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTVersion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Version", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTVersionContainer m_tabTVersionContainer = (tabTVersionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTVersionContainer.class, m_tabTVersion, factory);
			super.addContainer(m_tabTVersion, m_tabTVersionContainer);
			ims.framework.utils.SizeInfo m_tabTVersionDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabTVersionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper109.getWidth(), anchoringHelper109.getHeight());
			m_tabTVersionContainer.setContext(form, appForm, m_tabTVersion, loader, form_images_local, contextMenus, startControlID, m_tabTVersionDesignSize, m_tabTVersionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTGroup = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Group", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTGroupContainer m_tabTGroupContainer = (tabTGroupContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTGroupContainer.class, m_tabTGroup, factory);
			super.addContainer(m_tabTGroup, m_tabTGroupContainer);
			ims.framework.utils.SizeInfo m_tabTGroupDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabTGroupRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper110.getWidth(), anchoringHelper110.getHeight());
			m_tabTGroupContainer.setContext(form, appForm, m_tabTGroup, loader, form_images_local, contextMenus, startControlID, m_tabTGroupDesignSize, m_tabTGroupRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTSite = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Sites", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTSiteContainer m_tabTSiteContainer = (tabTSiteContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTSiteContainer.class, m_tabTSite, factory);
			super.addContainer(m_tabTSite, m_tabTSiteContainer);
			ims.framework.utils.SizeInfo m_tabTSiteDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabTSiteRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper111.getWidth(), anchoringHelper111.getHeight());
			m_tabTSiteContainer.setContext(form, appForm, m_tabTSite, loader, form_images_local, contextMenus, startControlID, m_tabTSiteDesignSize, m_tabTSiteRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTNM = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"TNM", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTNMContainer m_tabTNMContainer = (tabTNMContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTNMContainer.class, m_tabTNM, factory);
			super.addContainer(m_tabTNM, m_tabTNMContainer);
			ims.framework.utils.SizeInfo m_tabTNMDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabTNMRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper112.getWidth(), anchoringHelper112.getHeight());
			m_tabTNMContainer.setContext(form, appForm, m_tabTNM, loader, form_images_local, contextMenus, startControlID, m_tabTNMDesignSize, m_tabTNMRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHistologyType = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Hist. Type", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHistologyTypeContainer m_tabHistologyTypeContainer = (tabHistologyTypeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHistologyTypeContainer.class, m_tabHistologyType, factory);
			super.addContainer(m_tabHistologyType, m_tabHistologyTypeContainer);
			ims.framework.utils.SizeInfo m_tabHistologyTypeDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabHistologyTypeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper113.getWidth(), anchoringHelper113.getHeight());
			m_tabHistologyTypeContainer.setContext(form, appForm, m_tabHistologyType, loader, form_images_local, contextMenus, startControlID, m_tabHistologyTypeDesignSize, m_tabHistologyTypeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHistologyGrade = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Hist. Grade", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHistologyGradeContainer m_tabHistologyGradeContainer = (tabHistologyGradeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHistologyGradeContainer.class, m_tabHistologyGrade, factory);
			super.addContainer(m_tabHistologyGrade, m_tabHistologyGradeContainer);
			ims.framework.utils.SizeInfo m_tabHistologyGradeDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabHistologyGradeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper114.getWidth(), anchoringHelper114.getHeight());
			m_tabHistologyGradeContainer.setContext(form, appForm, m_tabHistologyGrade, loader, form_images_local, contextMenus, startControlID, m_tabHistologyGradeDesignSize, m_tabHistologyGradeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSpecialties = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specialty", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecialtiesContainer m_tabSpecialtiesContainer = (tabSpecialtiesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecialtiesContainer.class, m_tabSpecialties, factory);
			super.addContainer(m_tabSpecialties, m_tabSpecialtiesContainer);
			ims.framework.utils.SizeInfo m_tabSpecialtiesDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabSpecialtiesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper115.getWidth(), anchoringHelper115.getHeight());
			m_tabSpecialtiesContainer.setContext(form, appForm, m_tabSpecialties, loader, form_images_local, contextMenus, startControlID, m_tabSpecialtiesDesignSize, m_tabSpecialtiesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSerumMarker = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Serum Marker", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSerumMarkerContainer m_tabSerumMarkerContainer = (tabSerumMarkerContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSerumMarkerContainer.class, m_tabSerumMarker, factory);
			super.addContainer(m_tabSerumMarker, m_tabSerumMarkerContainer);
			ims.framework.utils.SizeInfo m_tabSerumMarkerDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabSerumMarkerRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper116.getWidth(), anchoringHelper116.getHeight());
			m_tabSerumMarkerContainer.setContext(form, appForm, m_tabSerumMarker, loader, form_images_local, contextMenus, startControlID, m_tabSerumMarkerDesignSize, m_tabSerumMarkerRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagTaxonomy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Taxonomy", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagTaxonomyContainer m_tabPagTaxonomyContainer = (tabPagTaxonomyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagTaxonomyContainer.class, m_tabPagTaxonomy, factory);
			super.addContainer(m_tabPagTaxonomy, m_tabPagTaxonomyContainer);
			ims.framework.utils.SizeInfo m_tabPagTaxonomyDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabPagTaxonomyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper117.getWidth(), anchoringHelper117.getHeight());
			m_tabPagTaxonomyContainer.setContext(form, appForm, m_tabPagTaxonomy, loader, form_images_local, contextMenus, startControlID, m_tabPagTaxonomyDesignSize, m_tabPagTaxonomyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 240, 16, 600, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNoDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"No details", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNoDetailsContainer m_tabNoDetailsContainer = (tabNoDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNoDetailsContainer.class, m_tabNoDetails, factory);
			super.addContainer(m_tabNoDetails, m_tabNoDetailsContainer);
			ims.framework.utils.SizeInfo m_tabNoDetailsDesignSize = new ims.framework.utils.SizeInfo(600, 576);
			ims.framework.utils.SizeInfo m_tabNoDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper118.getWidth(), anchoringHelper118.getHeight());
			m_tabNoDetailsContainer.setContext(form, appForm, m_tabNoDetails, loader, form_images_local, contextMenus, startControlID, m_tabNoDetailsDesignSize, m_tabNoDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
		}
		public void settabTCategoryEnabled(boolean value)
		{
			tabTCategory().setEnabled(value);
		}
		public void settabTVersionEnabled(boolean value)
		{
			tabTVersion().setEnabled(value);
		}
		public void settabTGroupEnabled(boolean value)
		{
			tabTGroup().setEnabled(value);
		}
		public void settabTSiteEnabled(boolean value)
		{
			tabTSite().setEnabled(value);
		}
		public void settabTNMEnabled(boolean value)
		{
			tabTNM().setEnabled(value);
		}
		public void settabHistologyTypeEnabled(boolean value)
		{
			tabHistologyType().setEnabled(value);
		}
		public void settabHistologyGradeEnabled(boolean value)
		{
			tabHistologyGrade().setEnabled(value);
		}
		public void settabSpecialtiesEnabled(boolean value)
		{
			tabSpecialties().setEnabled(value);
		}
		public void settabSerumMarkerEnabled(boolean value)
		{
			tabSerumMarker().setEnabled(value);
		}
		public void settabPagTaxonomyEnabled(boolean value)
		{
			tabPagTaxonomy().setEnabled(value);
		}
		public void settabNoDetailsEnabled(boolean value)
		{
			tabNoDetails().setEnabled(value);
		}
		public void showtabTCategory()
		{
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabTCategory().setVisible(true);
		}
		public void showtabTVersion()
		{
			tabTCategory().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabTVersion().setVisible(true);
		}
		public void showtabTGroup()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabTGroup().setVisible(true);
		}
		public void showtabTSite()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabTSite().setVisible(true);
		}
		public void showtabTNM()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabTNM().setVisible(true);
		}
		public void showtabHistologyType()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabHistologyType().setVisible(true);
		}
		public void showtabHistologyGrade()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabHistologyGrade().setVisible(true);
		}
		public void showtabSpecialties()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabSpecialties().setVisible(true);
		}
		public void showtabSerumMarker()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(false);
			tabSerumMarker().setVisible(true);
		}
		public void showtabPagTaxonomy()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabNoDetails().setVisible(false);
			tabPagTaxonomy().setVisible(true);
		}
		public void showtabNoDetails()
		{
			tabTCategory().setVisible(false);
			tabTVersion().setVisible(false);
			tabTGroup().setVisible(false);
			tabTSite().setVisible(false);
			tabTNM().setVisible(false);
			tabHistologyType().setVisible(false);
			tabHistologyGrade().setVisible(false);
			tabSpecialties().setVisible(false);
			tabSerumMarker().setVisible(false);
			tabPagTaxonomy().setVisible(false);
			tabNoDetails().setVisible(true);
		}

		public tabTCategoryContainer tabTCategory()
		{
			return (tabTCategoryContainer)super.layers.get(0);
		}
		public tabTVersionContainer tabTVersion()
		{
			return (tabTVersionContainer)super.layers.get(1);
		}
		public tabTGroupContainer tabTGroup()
		{
			return (tabTGroupContainer)super.layers.get(2);
		}
		public tabTSiteContainer tabTSite()
		{
			return (tabTSiteContainer)super.layers.get(3);
		}
		public tabTNMContainer tabTNM()
		{
			return (tabTNMContainer)super.layers.get(4);
		}
		public tabHistologyTypeContainer tabHistologyType()
		{
			return (tabHistologyTypeContainer)super.layers.get(5);
		}
		public tabHistologyGradeContainer tabHistologyGrade()
		{
			return (tabHistologyGradeContainer)super.layers.get(6);
		}
		public tabSpecialtiesContainer tabSpecialties()
		{
			return (tabSpecialtiesContainer)super.layers.get(7);
		}
		public tabSerumMarkerContainer tabSerumMarker()
		{
			return (tabSerumMarkerContainer)super.layers.get(8);
		}
		public tabPagTaxonomyContainer tabPagTaxonomy()
		{
			return (tabPagTaxonomyContainer)super.layers.get(9);
		}
		public tabNoDetailsContainer tabNoDetails()
		{
			return (tabNoDetailsContainer)super.layers.get(10);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuTumourCategoryTNM = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuTumourCategoryTNMAddTNMItem = factory.createMenuItem(startControlID.intValue() + 1, "Add TNM", true, false, null, true, false);
		contextMenus.contextMenuTumourCategoryTNM.add(contextMenus.contextMenuTumourCategoryTNMAddTNMItem);
		contextMenus.contextMenuTumourCategoryTNMInactivateTNMItem = factory.createMenuItem(startControlID.intValue() + 2, "Inactivate TNM", true, false, null, true, false);
		contextMenus.contextMenuTumourCategoryTNM.add(contextMenus.contextMenuTumourCategoryTNMInactivateTNMItem);
		contextMenus.contextMenuTumourCategoryTNMActivateTNMItem = factory.createMenuItem(startControlID.intValue() + 3, "Activate TNM", true, false, null, true, false);
		contextMenus.contextMenuTumourCategoryTNM.add(contextMenus.contextMenuTumourCategoryTNMActivateTNMItem);
		form.registerMenu(contextMenus.contextMenuTumourCategoryTNM);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 4, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 7, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 10, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 11, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocation = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocationADDItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Location", true, false, new Integer(102179), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocation.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocationADDItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocationREMOVEItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove Location", true, false, new Integer(102300), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocation.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocationREMOVEItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticLocation);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRisk = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRiskADDItem = factory.createMenuItem(startControlID.intValue() + 15, "Add Risk Category", true, false, new Integer(102179), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRisk.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRiskADDItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRiskREMOVEItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove Risk Category", true, false, new Integer(102300), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRisk.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRiskREMOVEItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticRisk);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSA = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSAADDItem = factory.createMenuItem(startControlID.intValue() + 17, "Add PSA", true, false, new Integer(102179), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSA.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSAADDItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSAREMOVEItem = factory.createMenuItem(startControlID.intValue() + 18, "Remove PSA", true, false, new Integer(102300), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSA.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSAREMOVEItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticPSA);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleason = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleasonADDItem = factory.createMenuItem(startControlID.intValue() + 19, "Add Gleason", true, false, new Integer(102179), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleason.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleasonADDItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleasonREMOVEItem = factory.createMenuItem(startControlID.intValue() + 20, "Remove Gleason", true, false, new Integer(102300), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleason.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleasonREMOVEItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuTumourGroupPrognosticGleason);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeADDItem = factory.createMenuItem(startControlID.intValue() + 21, "Add Histology Grade", true, false, new Integer(102179), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeADDItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeINACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 22, "Inactivate Histology Grade", true, false, new Integer(102300), true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeINACTIVATEItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeREACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 23, "Reactivate Histology Grade", true, false, null, true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeREACTIVATEItem);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem = factory.createMenuItem(startControlID.intValue() + 24, "Load default Histology Grade records", true, false, null, true, false);
		contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade.add(contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem);
		form.registerMenu(contextMenus.ClinicalAdmin.contextMenuTumourGroupHistologyGrade);
		contextMenus.Oncology.contextMenuTumourGroupOtherClassification = factory.createMenu(startControlID.intValue() + 8);
		contextMenus.Oncology.contextMenuTumourGroupOtherClassificationUpdateClassificationItem = factory.createMenuItem(startControlID.intValue() + 25, "Update Classification", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuTumourGroupOtherClassification.add(contextMenus.Oncology.contextMenuTumourGroupOtherClassificationUpdateClassificationItem);
		contextMenus.Oncology.contextMenuTumourGroupOtherClassificationRemoveClassificationItem = factory.createMenuItem(startControlID.intValue() + 26, "Remove Classification", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuTumourGroupOtherClassification.add(contextMenus.Oncology.contextMenuTumourGroupOtherClassificationRemoveClassificationItem);
		form.registerMenu(contextMenus.Oncology.contextMenuTumourGroupOtherClassification);
		contextMenus.Oncology.contextMenuTumourHistologyLayer = factory.createMenu(startControlID.intValue() + 9);
		contextMenus.Oncology.contextMenuTumourHistologyLayerADDItem = factory.createMenuItem(startControlID.intValue() + 27, "Add Histology", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuTumourHistologyLayer.add(contextMenus.Oncology.contextMenuTumourHistologyLayerADDItem);
		contextMenus.Oncology.contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem = factory.createMenuItem(startControlID.intValue() + 28, "Select Histology from taxonomy", true, false, new Integer(102223), true, false);
		contextMenus.Oncology.contextMenuTumourHistologyLayer.add(contextMenus.Oncology.contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem);
		contextMenus.Oncology.contextMenuTumourHistologyLayerREMOVEItem = factory.createMenuItem(startControlID.intValue() + 29, "Remove Histology", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuTumourHistologyLayer.add(contextMenus.Oncology.contextMenuTumourHistologyLayerREMOVEItem);
		contextMenus.Oncology.contextMenuTumourHistologyLayerREACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 30, "Reactivate Histology", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1750001)))
			contextMenus.Oncology.contextMenuTumourHistologyLayer.add(contextMenus.Oncology.contextMenuTumourHistologyLayerREACTIVATEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuTumourHistologyLayer);
		contextMenus.Oncology.contextMenuTumourSerumMarkers = factory.createMenu(startControlID.intValue() + 10);
		contextMenus.Oncology.contextMenuTumourSerumMarkersADDItem = factory.createMenuItem(startControlID.intValue() + 31, "AddSerumMarkers", true, false, new Integer(102149), true, false);
		contextMenus.Oncology.contextMenuTumourSerumMarkers.add(contextMenus.Oncology.contextMenuTumourSerumMarkersADDItem);
		contextMenus.Oncology.contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem = factory.createMenuItem(startControlID.intValue() + 32, "SelectSerumMarkersfromTaxonomy", true, false, new Integer(102223), true, false);
		contextMenus.Oncology.contextMenuTumourSerumMarkers.add(contextMenus.Oncology.contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem);
		contextMenus.Oncology.contextMenuTumourSerumMarkersREMOVEItem = factory.createMenuItem(startControlID.intValue() + 33, "RemoveSerumMarkers", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuTumourSerumMarkers.add(contextMenus.Oncology.contextMenuTumourSerumMarkersREMOVEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuTumourSerumMarkers);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 0, 16, 240, 576, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		ims.framework.FormUiLogic m_customTreeForm = loader.loadComponent(104123, appForm, startControlID * 10 + 5000, anchoringHelper119.getSize(), instance1, startTabIndex.intValue() + 4096, skipContextValidation);
		//ims.framework.Control m_customTreeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(0), new Integer(16), new Integer(240), new Integer(576), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(startTabIndex.intValue() + 4096), m_customTreeForm, instance1 } );
		ims.framework.Control m_customTreeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1120),  new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT, new Integer(startTabIndex.intValue() + 4096), m_customTreeForm, instance1, Boolean.FALSE } );
		super.addControl(m_customTreeControl);
		Menu[] menus1 = m_customTreeForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrConfigLayer m_lyrConfigLayer = (lyrConfigLayer)LayerFlyweightFactory.getInstance().createLayer(lyrConfigLayer.class, this, factory);
		super.addLayer(m_lyrConfigLayer);
		m_lyrConfigLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 4095), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 664, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 4094), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.clinicaladmin.forms.tumourcategory.IComponent customTree()
	{
		return (ims.clinicaladmin.forms.tumourcategory.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomTreeValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomTreeVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomTreeVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomTreeEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomTreeEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public lyrConfigLayer lyrConfig()
	{
		return (lyrConfigLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(12);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(13);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ClinicalAdmin = new ClinicalAdminForms();
			Core = new CoreForms();
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				HotlistDialog = new LocalFormName(104117);
				TumourOverallStaging = new LocalFormName(104119);
				TumourOtherClassification = new LocalFormName(104125);
				SelectTumourHistology = new LocalFormName(104110);
				SelectHistopathologicGrade = new LocalFormName(104142);
				SelectSerumMarker = new LocalFormName(104144);
				SelecPrognosticPSA = new LocalFormName(104147);
				SelectPrognosticGleason = new LocalFormName(104148);
				SelectPrognosticLocation = new LocalFormName(104145);
				SelectPrognosticRiskAssessment = new LocalFormName(104146);
				TumourGroupOverallPrognostic = new LocalFormName(104150);
				TumourGroupOverallStaging = new LocalFormName(104149);
				TumourSiteOverallStaging = new LocalFormName(104152);
			}
			public final FormName HotlistDialog;
			public final FormName TumourOverallStaging;
			public final FormName TumourOtherClassification;
			public final FormName SelectTumourHistology;
			public final FormName SelectHistopathologicGrade;
			public final FormName SelectSerumMarker;
			public final FormName SelecPrognosticPSA;
			public final FormName SelectPrognosticGleason;
			public final FormName SelectPrognosticLocation;
			public final FormName SelectPrognosticRiskAssessment;
			public final FormName TumourGroupOverallPrognostic;
			public final FormName TumourGroupOverallStaging;
			public final FormName TumourSiteOverallStaging;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName TaxonomySearch;
		}

		public ClinicalAdminForms ClinicalAdmin;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Clinical = new ClinicalImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image ClosedFolder;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				BlueSphere = new ImageHelper(123101, "Images/Clinical/blue-sphere-1.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image BlueSphere;
		}
		public final CoreImages Core;
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedNode = new ims.framework.ContextVariable("SelectedNode", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedNode_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_ParentCategory = new ims.framework.ContextVariable("ParentCategory", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentCategory_" + componentIdentifier + "");
			cxl_ParentGroup = new ims.framework.ContextVariable("ParentGroup", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier + "");
			cxl_SpecialtyCollection = new ims.framework.ContextVariable("SpecialtyCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SpecialtyCollection_" + componentIdentifier + "");
			cxl_DifferentationSavedCollection = new ims.framework.ContextVariable("DifferentationSavedCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__DifferentationSavedCollection_" + componentIdentifier + "");
			cxl_DifferentationCollection = new ims.framework.ContextVariable("DifferentationCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__DifferentationCollection_" + componentIdentifier + "");
			cxl_SelectedHistologyRecord = new ims.framework.ContextVariable("SelectedHistologyRecord", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedHistologyRecord_" + componentIdentifier + "");
			cxl_CurrentSelectedTab = new ims.framework.ContextVariable("CurrentSelectedTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__CurrentSelectedTab_" + componentIdentifier + "");
			cxl_SelectedHistologyCollection = new ims.framework.ContextVariable("SelectedHistologyCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedHistologyCollection_" + componentIdentifier + "");
			cxl_SelectedTNMCollection = new ims.framework.ContextVariable("SelectedTNMCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMCollection_" + componentIdentifier + "");
			cxl_SelectedTNMRecord = new ims.framework.ContextVariable("SelectedTNMRecord", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier + "");
			cxl_OriginalRecord = new ims.framework.ContextVariable("OriginalRecord", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__OriginalRecord_" + componentIdentifier + "");
			cxl_SelectedSerumRecord = new ims.framework.ContextVariable("SelectedSerumRecord", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumRecord_" + componentIdentifier + "");
			cxl_SelectedSerumCollection = new ims.framework.ContextVariable("SelectedSerumCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumCollection_" + componentIdentifier + "");
			cxl_HasOverall = new ims.framework.ContextVariable("HasOverall", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__HasOverall_" + componentIdentifier + "");
			cxl_InactivateOverallStaging = new ims.framework.ContextVariable("InactivateOverallStaging", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__InactivateOverallStaging_" + componentIdentifier + "");
			cxl_bDifferentationForGroupLoaded = new ims.framework.ContextVariable("bDifferentationForGroupLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bDifferentationForGroupLoaded_" + componentIdentifier + "");
			cxl_bTumourGroupSiteTNMValueVoLoaded = new ims.framework.ContextVariable("bTumourGroupSiteTNMValueVoLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bTumourGroupSiteTNMValueVoLoaded_" + componentIdentifier + "");
			cxl_bTumourHistologyVoLoaded = new ims.framework.ContextVariable("bTumourHistologyVoLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bTumourHistologyVoLoaded_" + componentIdentifier + "");
			cxl_bTumourGroupSpecialtyLoaded = new ims.framework.ContextVariable("bTumourGroupSpecialtyLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bTumourGroupSpecialtyLoaded_" + componentIdentifier + "");
			cxl_bTumourGroupTaxonomyMappingsLoaded = new ims.framework.ContextVariable("bTumourGroupTaxonomyMappingsLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bTumourGroupTaxonomyMappingsLoaded_" + componentIdentifier + "");
			cxl_bTumourStagingClassificationVoLoaded = new ims.framework.ContextVariable("bTumourStagingClassificationVoLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bTumourStagingClassificationVoLoaded_" + componentIdentifier + "");
			cxl_bSerumMarkerLoaded = new ims.framework.ContextVariable("bSerumMarkerLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bSerumMarkerLoaded_" + componentIdentifier + "");
			cxl_bOverallStageLoaded = new ims.framework.ContextVariable("bOverallStageLoaded", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__bOverallStageLoaded_" + componentIdentifier + "");
			cxl_PreviousTopLevelTab = new ims.framework.ContextVariable("PreviousTopLevelTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__PreviousTopLevelTab_" + componentIdentifier + "");
			cxl_SpecialtiesSavedCollection = new ims.framework.ContextVariable("SpecialtiesSavedCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SpecialtiesSavedCollection_" + componentIdentifier + "");
			cxl_OtherClassificationSavedCollection = new ims.framework.ContextVariable("OtherClassificationSavedCollection", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__OtherClassificationSavedCollection_" + componentIdentifier + "");
			cxl_RefreshHistologyTypeTab = new ims.framework.ContextVariable("RefreshHistologyTypeTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshHistologyTypeTab_" + componentIdentifier + "");
			cxl_RefreshHistologyTypeRecords = new ims.framework.ContextVariable("RefreshHistologyTypeRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshHistologyTypeRecords_" + componentIdentifier + "");
			cxl_RefreshHistologicGradeTab = new ims.framework.ContextVariable("RefreshHistologicGradeTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshHistologicGradeTab_" + componentIdentifier + "");
			cxl_RefreshHistologicGradeRecords = new ims.framework.ContextVariable("RefreshHistologicGradeRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshHistologicGradeRecords_" + componentIdentifier + "");
			cxl_RefreshSpecialtyTab = new ims.framework.ContextVariable("RefreshSpecialtyTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshSpecialtyTab_" + componentIdentifier + "");
			cxl_RefreshSpecialtyRecords = new ims.framework.ContextVariable("RefreshSpecialtyRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshSpecialtyRecords_" + componentIdentifier + "");
			cxl_RefreshSerumMarkerTab = new ims.framework.ContextVariable("RefreshSerumMarkerTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshSerumMarkerTab_" + componentIdentifier + "");
			cxl_RefreshSerumMarkerRecords = new ims.framework.ContextVariable("RefreshSerumMarkerRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshSerumMarkerRecords_" + componentIdentifier + "");
			cxl_RefreshTumourLocationTab = new ims.framework.ContextVariable("RefreshTumourLocationTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshTumourLocationTab_" + componentIdentifier + "");
			cxl_RefreshTumourLocationRecords = new ims.framework.ContextVariable("RefreshTumourLocationRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshTumourLocationRecords_" + componentIdentifier + "");
			cxl_RefreshRiskCategoryTab = new ims.framework.ContextVariable("RefreshRiskCategoryTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshRiskCategoryTab_" + componentIdentifier + "");
			cxl_RefreshRiskCategoryRecords = new ims.framework.ContextVariable("RefreshRiskCategoryRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshRiskCategoryRecords_" + componentIdentifier + "");
			cxl_RefreshPSATab = new ims.framework.ContextVariable("RefreshPSATab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshPSATab_" + componentIdentifier + "");
			cxl_RefreshPSARecords = new ims.framework.ContextVariable("RefreshPSARecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshPSARecords_" + componentIdentifier + "");
			cxl_RefreshGleasonTab = new ims.framework.ContextVariable("RefreshGleasonTab", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshGleasonTab_" + componentIdentifier + "");
			cxl_RefreshGleasonRecords = new ims.framework.ContextVariable("RefreshGleasonRecords", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__RefreshGleasonRecords_" + componentIdentifier + "");
			cxl_HasPrognosticGrouping = new ims.framework.ContextVariable("HasPrognosticGrouping", prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__HasPrognosticGrouping_" + componentIdentifier + "");
		}
		
		public boolean getSelectedNodeIsNotNull()
		{
			return !cxl_SelectedNode.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedNode()
		{
			return (ims.vo.ValueObject)cxl_SelectedNode.getValue(context);
		}
		public void setSelectedNode(ims.vo.ValueObject value)
		{
			cxl_SelectedNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedNode = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedRecord()
		{
			return (ims.vo.ValueObject)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.vo.ValueObject value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getParentCategoryIsNotNull()
		{
			return !cxl_ParentCategory.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourCategoryListVo getParentCategory()
		{
			return (ims.clinicaladmin.vo.TumourCategoryListVo)cxl_ParentCategory.getValue(context);
		}
		public void setParentCategory(ims.clinicaladmin.vo.TumourCategoryListVo value)
		{
			cxl_ParentCategory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentCategory = null;
		public boolean getParentGroupIsNotNull()
		{
			return !cxl_ParentGroup.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupListVo getParentGroup()
		{
			return (ims.clinicaladmin.vo.TumourGroupListVo)cxl_ParentGroup.getValue(context);
		}
		public void setParentGroup(ims.clinicaladmin.vo.TumourGroupListVo value)
		{
			cxl_ParentGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentGroup = null;
		public boolean getSpecialtyCollectionIsNotNull()
		{
			return !cxl_SpecialtyCollection.getValueIsNull(context);
		}
		public ims.core.vo.lookups.SpecialtyCollection getSpecialtyCollection()
		{
			return (ims.core.vo.lookups.SpecialtyCollection)cxl_SpecialtyCollection.getValue(context);
		}
		public void setSpecialtyCollection(ims.core.vo.lookups.SpecialtyCollection value)
		{
			cxl_SpecialtyCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SpecialtyCollection = null;
		public boolean getDifferentationSavedCollectionIsNotNull()
		{
			return !cxl_DifferentationSavedCollection.getValueIsNull(context);
		}
		public ims.oncology.vo.TumourGroupDifferentationVoCollection getDifferentationSavedCollection()
		{
			return (ims.oncology.vo.TumourGroupDifferentationVoCollection)cxl_DifferentationSavedCollection.getValue(context);
		}
		public void setDifferentationSavedCollection(ims.oncology.vo.TumourGroupDifferentationVoCollection value)
		{
			cxl_DifferentationSavedCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DifferentationSavedCollection = null;
		public boolean getDifferentationCollectionIsNotNull()
		{
			return !cxl_DifferentationCollection.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.HistopathologicGradeVoCollection getDifferentationCollection()
		{
			return (ims.clinicaladmin.vo.HistopathologicGradeVoCollection)cxl_DifferentationCollection.getValue(context);
		}
		public void setDifferentationCollection(ims.clinicaladmin.vo.HistopathologicGradeVoCollection value)
		{
			cxl_DifferentationCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DifferentationCollection = null;
		public boolean getSelectedHistologyRecordIsNotNull()
		{
			return !cxl_SelectedHistologyRecord.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupHistologyVo getSelectedHistologyRecord()
		{
			return (ims.clinicaladmin.vo.TumourGroupHistologyVo)cxl_SelectedHistologyRecord.getValue(context);
		}
		public void setSelectedHistologyRecord(ims.clinicaladmin.vo.TumourGroupHistologyVo value)
		{
			cxl_SelectedHistologyRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHistologyRecord = null;
		public boolean getCurrentSelectedTabIsNotNull()
		{
			return !cxl_CurrentSelectedTab.getValueIsNull(context);
		}
		public ims.oncology.vo.enums.TumourCategoryGroupSiteSelectedTab getCurrentSelectedTab()
		{
			return (ims.oncology.vo.enums.TumourCategoryGroupSiteSelectedTab)cxl_CurrentSelectedTab.getValue(context);
		}
		public void setCurrentSelectedTab(ims.oncology.vo.enums.TumourCategoryGroupSiteSelectedTab value)
		{
			cxl_CurrentSelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSelectedTab = null;
		public boolean getSelectedHistologyCollectionIsNotNull()
		{
			return !cxl_SelectedHistologyCollection.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupHistologyVoCollection getSelectedHistologyCollection()
		{
			return (ims.clinicaladmin.vo.TumourGroupHistologyVoCollection)cxl_SelectedHistologyCollection.getValue(context);
		}
		public void setSelectedHistologyCollection(ims.clinicaladmin.vo.TumourGroupHistologyVoCollection value)
		{
			cxl_SelectedHistologyCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedHistologyCollection = null;
		public boolean getSelectedTNMCollectionIsNotNull()
		{
			return !cxl_SelectedTNMCollection.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupSiteTNMValueVoCollection getSelectedTNMCollection()
		{
			return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueVoCollection)cxl_SelectedTNMCollection.getValue(context);
		}
		public void setSelectedTNMCollection(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVoCollection value)
		{
			cxl_SelectedTNMCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTNMCollection = null;
		public boolean getSelectedTNMRecordIsNotNull()
		{
			return !cxl_SelectedTNMRecord.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo getSelectedTNMRecord()
		{
			return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo)cxl_SelectedTNMRecord.getValue(context);
		}
		public void setSelectedTNMRecord(ims.clinicaladmin.vo.TumourGroupSiteTNMValueVo value)
		{
			cxl_SelectedTNMRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTNMRecord = null;
		public boolean getOriginalRecordIsNotNull()
		{
			return !cxl_OriginalRecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getOriginalRecord()
		{
			return (ims.vo.ValueObject)cxl_OriginalRecord.getValue(context);
		}
		public void setOriginalRecord(ims.vo.ValueObject value)
		{
			cxl_OriginalRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OriginalRecord = null;
		public boolean getSelectedSerumRecordIsNotNull()
		{
			return !cxl_SelectedSerumRecord.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourSerumMarkersLiteVo getSelectedSerumRecord()
		{
			return (ims.clinicaladmin.vo.TumourSerumMarkersLiteVo)cxl_SelectedSerumRecord.getValue(context);
		}
		public void setSelectedSerumRecord(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
		{
			cxl_SelectedSerumRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSerumRecord = null;
		public boolean getSelectedSerumCollectionIsNotNull()
		{
			return !cxl_SelectedSerumCollection.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection getSelectedSerumCollection()
		{
			return (ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection)cxl_SelectedSerumCollection.getValue(context);
		}
		public void setSelectedSerumCollection(ims.clinicaladmin.vo.TumourSerumMarkersLiteVoCollection value)
		{
			cxl_SelectedSerumCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSerumCollection = null;
		public boolean getHasOverallIsNotNull()
		{
			return !cxl_HasOverall.getValueIsNull(context);
		}
		public Boolean getHasOverall()
		{
			return (Boolean)cxl_HasOverall.getValue(context);
		}
		public void setHasOverall(Boolean value)
		{
			cxl_HasOverall.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasOverall = null;
		public boolean getInactivateOverallStagingIsNotNull()
		{
			return !cxl_InactivateOverallStaging.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVoCollection getInactivateOverallStaging()
		{
			return (ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVoCollection)cxl_InactivateOverallStaging.getValue(context);
		}
		public void setInactivateOverallStaging(ims.clinicaladmin.vo.TumourGroupSiteOverallStagingVoCollection value)
		{
			cxl_InactivateOverallStaging.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InactivateOverallStaging = null;
		public boolean getbDifferentationForGroupLoadedIsNotNull()
		{
			return !cxl_bDifferentationForGroupLoaded.getValueIsNull(context);
		}
		public Boolean getbDifferentationForGroupLoaded()
		{
			return (Boolean)cxl_bDifferentationForGroupLoaded.getValue(context);
		}
		public void setbDifferentationForGroupLoaded(Boolean value)
		{
			cxl_bDifferentationForGroupLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDifferentationForGroupLoaded = null;
		public boolean getbTumourGroupSiteTNMValueVoLoadedIsNotNull()
		{
			return !cxl_bTumourGroupSiteTNMValueVoLoaded.getValueIsNull(context);
		}
		public Boolean getbTumourGroupSiteTNMValueVoLoaded()
		{
			return (Boolean)cxl_bTumourGroupSiteTNMValueVoLoaded.getValue(context);
		}
		public void setbTumourGroupSiteTNMValueVoLoaded(Boolean value)
		{
			cxl_bTumourGroupSiteTNMValueVoLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bTumourGroupSiteTNMValueVoLoaded = null;
		public boolean getbTumourHistologyVoLoadedIsNotNull()
		{
			return !cxl_bTumourHistologyVoLoaded.getValueIsNull(context);
		}
		public Boolean getbTumourHistologyVoLoaded()
		{
			return (Boolean)cxl_bTumourHistologyVoLoaded.getValue(context);
		}
		public void setbTumourHistologyVoLoaded(Boolean value)
		{
			cxl_bTumourHistologyVoLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bTumourHistologyVoLoaded = null;
		public boolean getbTumourGroupSpecialtyLoadedIsNotNull()
		{
			return !cxl_bTumourGroupSpecialtyLoaded.getValueIsNull(context);
		}
		public Boolean getbTumourGroupSpecialtyLoaded()
		{
			return (Boolean)cxl_bTumourGroupSpecialtyLoaded.getValue(context);
		}
		public void setbTumourGroupSpecialtyLoaded(Boolean value)
		{
			cxl_bTumourGroupSpecialtyLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bTumourGroupSpecialtyLoaded = null;
		public boolean getbTumourGroupTaxonomyMappingsLoadedIsNotNull()
		{
			return !cxl_bTumourGroupTaxonomyMappingsLoaded.getValueIsNull(context);
		}
		public Boolean getbTumourGroupTaxonomyMappingsLoaded()
		{
			return (Boolean)cxl_bTumourGroupTaxonomyMappingsLoaded.getValue(context);
		}
		public void setbTumourGroupTaxonomyMappingsLoaded(Boolean value)
		{
			cxl_bTumourGroupTaxonomyMappingsLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bTumourGroupTaxonomyMappingsLoaded = null;
		public boolean getbTumourStagingClassificationVoLoadedIsNotNull()
		{
			return !cxl_bTumourStagingClassificationVoLoaded.getValueIsNull(context);
		}
		public Boolean getbTumourStagingClassificationVoLoaded()
		{
			return (Boolean)cxl_bTumourStagingClassificationVoLoaded.getValue(context);
		}
		public void setbTumourStagingClassificationVoLoaded(Boolean value)
		{
			cxl_bTumourStagingClassificationVoLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bTumourStagingClassificationVoLoaded = null;
		public boolean getbSerumMarkerLoadedIsNotNull()
		{
			return !cxl_bSerumMarkerLoaded.getValueIsNull(context);
		}
		public Boolean getbSerumMarkerLoaded()
		{
			return (Boolean)cxl_bSerumMarkerLoaded.getValue(context);
		}
		public void setbSerumMarkerLoaded(Boolean value)
		{
			cxl_bSerumMarkerLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bSerumMarkerLoaded = null;
		public boolean getbOverallStageLoadedIsNotNull()
		{
			return !cxl_bOverallStageLoaded.getValueIsNull(context);
		}
		public Boolean getbOverallStageLoaded()
		{
			return (Boolean)cxl_bOverallStageLoaded.getValue(context);
		}
		public void setbOverallStageLoaded(Boolean value)
		{
			cxl_bOverallStageLoaded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bOverallStageLoaded = null;
		public boolean getPreviousTopLevelTabIsNotNull()
		{
			return !cxl_PreviousTopLevelTab.getValueIsNull(context);
		}
		public ims.framework.LayerBridge getPreviousTopLevelTab()
		{
			return (ims.framework.LayerBridge)cxl_PreviousTopLevelTab.getValue(context);
		}
		public void setPreviousTopLevelTab(ims.framework.LayerBridge value)
		{
			cxl_PreviousTopLevelTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousTopLevelTab = null;
		public boolean getSpecialtiesSavedCollectionIsNotNull()
		{
			return !cxl_SpecialtiesSavedCollection.getValueIsNull(context);
		}
		public ims.oncology.vo.TumourGroupSpecialtyVoCollection getSpecialtiesSavedCollection()
		{
			return (ims.oncology.vo.TumourGroupSpecialtyVoCollection)cxl_SpecialtiesSavedCollection.getValue(context);
		}
		public void setSpecialtiesSavedCollection(ims.oncology.vo.TumourGroupSpecialtyVoCollection value)
		{
			cxl_SpecialtiesSavedCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SpecialtiesSavedCollection = null;
		public boolean getOtherClassificationSavedCollectionIsNotNull()
		{
			return !cxl_OtherClassificationSavedCollection.getValueIsNull(context);
		}
		public ims.oncology.vo.TumourGroupClassificationVoCollection getOtherClassificationSavedCollection()
		{
			return (ims.oncology.vo.TumourGroupClassificationVoCollection)cxl_OtherClassificationSavedCollection.getValue(context);
		}
		public void setOtherClassificationSavedCollection(ims.oncology.vo.TumourGroupClassificationVoCollection value)
		{
			cxl_OtherClassificationSavedCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OtherClassificationSavedCollection = null;
		public boolean getRefreshHistologyTypeTabIsNotNull()
		{
			return !cxl_RefreshHistologyTypeTab.getValueIsNull(context);
		}
		public Boolean getRefreshHistologyTypeTab()
		{
			return (Boolean)cxl_RefreshHistologyTypeTab.getValue(context);
		}
		public void setRefreshHistologyTypeTab(Boolean value)
		{
			cxl_RefreshHistologyTypeTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshHistologyTypeTab = null;
		public boolean getRefreshHistologyTypeRecordsIsNotNull()
		{
			return !cxl_RefreshHistologyTypeRecords.getValueIsNull(context);
		}
		public Boolean getRefreshHistologyTypeRecords()
		{
			return (Boolean)cxl_RefreshHistologyTypeRecords.getValue(context);
		}
		public void setRefreshHistologyTypeRecords(Boolean value)
		{
			cxl_RefreshHistologyTypeRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshHistologyTypeRecords = null;
		public boolean getRefreshHistologicGradeTabIsNotNull()
		{
			return !cxl_RefreshHistologicGradeTab.getValueIsNull(context);
		}
		public Boolean getRefreshHistologicGradeTab()
		{
			return (Boolean)cxl_RefreshHistologicGradeTab.getValue(context);
		}
		public void setRefreshHistologicGradeTab(Boolean value)
		{
			cxl_RefreshHistologicGradeTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshHistologicGradeTab = null;
		public boolean getRefreshHistologicGradeRecordsIsNotNull()
		{
			return !cxl_RefreshHistologicGradeRecords.getValueIsNull(context);
		}
		public Boolean getRefreshHistologicGradeRecords()
		{
			return (Boolean)cxl_RefreshHistologicGradeRecords.getValue(context);
		}
		public void setRefreshHistologicGradeRecords(Boolean value)
		{
			cxl_RefreshHistologicGradeRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshHistologicGradeRecords = null;
		public boolean getRefreshSpecialtyTabIsNotNull()
		{
			return !cxl_RefreshSpecialtyTab.getValueIsNull(context);
		}
		public Boolean getRefreshSpecialtyTab()
		{
			return (Boolean)cxl_RefreshSpecialtyTab.getValue(context);
		}
		public void setRefreshSpecialtyTab(Boolean value)
		{
			cxl_RefreshSpecialtyTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshSpecialtyTab = null;
		public boolean getRefreshSpecialtyRecordsIsNotNull()
		{
			return !cxl_RefreshSpecialtyRecords.getValueIsNull(context);
		}
		public Boolean getRefreshSpecialtyRecords()
		{
			return (Boolean)cxl_RefreshSpecialtyRecords.getValue(context);
		}
		public void setRefreshSpecialtyRecords(Boolean value)
		{
			cxl_RefreshSpecialtyRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshSpecialtyRecords = null;
		public boolean getRefreshSerumMarkerTabIsNotNull()
		{
			return !cxl_RefreshSerumMarkerTab.getValueIsNull(context);
		}
		public Boolean getRefreshSerumMarkerTab()
		{
			return (Boolean)cxl_RefreshSerumMarkerTab.getValue(context);
		}
		public void setRefreshSerumMarkerTab(Boolean value)
		{
			cxl_RefreshSerumMarkerTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshSerumMarkerTab = null;
		public boolean getRefreshSerumMarkerRecordsIsNotNull()
		{
			return !cxl_RefreshSerumMarkerRecords.getValueIsNull(context);
		}
		public Boolean getRefreshSerumMarkerRecords()
		{
			return (Boolean)cxl_RefreshSerumMarkerRecords.getValue(context);
		}
		public void setRefreshSerumMarkerRecords(Boolean value)
		{
			cxl_RefreshSerumMarkerRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshSerumMarkerRecords = null;
		public boolean getRefreshTumourLocationTabIsNotNull()
		{
			return !cxl_RefreshTumourLocationTab.getValueIsNull(context);
		}
		public Boolean getRefreshTumourLocationTab()
		{
			return (Boolean)cxl_RefreshTumourLocationTab.getValue(context);
		}
		public void setRefreshTumourLocationTab(Boolean value)
		{
			cxl_RefreshTumourLocationTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshTumourLocationTab = null;
		public boolean getRefreshTumourLocationRecordsIsNotNull()
		{
			return !cxl_RefreshTumourLocationRecords.getValueIsNull(context);
		}
		public Boolean getRefreshTumourLocationRecords()
		{
			return (Boolean)cxl_RefreshTumourLocationRecords.getValue(context);
		}
		public void setRefreshTumourLocationRecords(Boolean value)
		{
			cxl_RefreshTumourLocationRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshTumourLocationRecords = null;
		public boolean getRefreshRiskCategoryTabIsNotNull()
		{
			return !cxl_RefreshRiskCategoryTab.getValueIsNull(context);
		}
		public Boolean getRefreshRiskCategoryTab()
		{
			return (Boolean)cxl_RefreshRiskCategoryTab.getValue(context);
		}
		public void setRefreshRiskCategoryTab(Boolean value)
		{
			cxl_RefreshRiskCategoryTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshRiskCategoryTab = null;
		public boolean getRefreshRiskCategoryRecordsIsNotNull()
		{
			return !cxl_RefreshRiskCategoryRecords.getValueIsNull(context);
		}
		public Boolean getRefreshRiskCategoryRecords()
		{
			return (Boolean)cxl_RefreshRiskCategoryRecords.getValue(context);
		}
		public void setRefreshRiskCategoryRecords(Boolean value)
		{
			cxl_RefreshRiskCategoryRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshRiskCategoryRecords = null;
		public boolean getRefreshPSATabIsNotNull()
		{
			return !cxl_RefreshPSATab.getValueIsNull(context);
		}
		public Boolean getRefreshPSATab()
		{
			return (Boolean)cxl_RefreshPSATab.getValue(context);
		}
		public void setRefreshPSATab(Boolean value)
		{
			cxl_RefreshPSATab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshPSATab = null;
		public boolean getRefreshPSARecordsIsNotNull()
		{
			return !cxl_RefreshPSARecords.getValueIsNull(context);
		}
		public Boolean getRefreshPSARecords()
		{
			return (Boolean)cxl_RefreshPSARecords.getValue(context);
		}
		public void setRefreshPSARecords(Boolean value)
		{
			cxl_RefreshPSARecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshPSARecords = null;
		public boolean getRefreshGleasonTabIsNotNull()
		{
			return !cxl_RefreshGleasonTab.getValueIsNull(context);
		}
		public Boolean getRefreshGleasonTab()
		{
			return (Boolean)cxl_RefreshGleasonTab.getValue(context);
		}
		public void setRefreshGleasonTab(Boolean value)
		{
			cxl_RefreshGleasonTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshGleasonTab = null;
		public boolean getRefreshGleasonRecordsIsNotNull()
		{
			return !cxl_RefreshGleasonRecords.getValueIsNull(context);
		}
		public Boolean getRefreshGleasonRecords()
		{
			return (Boolean)cxl_RefreshGleasonRecords.getValue(context);
		}
		public void setRefreshGleasonRecords(Boolean value)
		{
			cxl_RefreshGleasonRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RefreshGleasonRecords = null;
		public boolean getHasPrognosticGroupingIsNotNull()
		{
			return !cxl_HasPrognosticGrouping.getValueIsNull(context);
		}
		public Boolean getHasPrognosticGrouping()
		{
			return (Boolean)cxl_HasPrognosticGrouping.getValue(context);
		}
		public void setHasPrognosticGrouping(Boolean value)
		{
			cxl_HasPrognosticGrouping.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasPrognosticGrouping = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ClinicalAdminNamespace ClinicalAdmin = new ClinicalAdminNamespace();
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class TumourCategoryTNM implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddTNM = 1;
			public static final int InactivateTNM = 2;
			public static final int ActivateTNM = 3;
		}
		public void disableAllTumourCategoryTNMMenuItems()
		{
			this.contextMenuTumourCategoryTNMAddTNMItem.setEnabled(false);
			this.contextMenuTumourCategoryTNMInactivateTNMItem.setEnabled(false);
			this.contextMenuTumourCategoryTNMActivateTNMItem.setEnabled(false);
		}
		public void hideAllTumourCategoryTNMMenuItems()
		{
			this.contextMenuTumourCategoryTNMAddTNMItem.setVisible(false);
			this.contextMenuTumourCategoryTNMInactivateTNMItem.setVisible(false);
			this.contextMenuTumourCategoryTNMActivateTNMItem.setVisible(false);
		}
		private Menu contextMenuTumourCategoryTNM;
		public MenuItem getTumourCategoryTNMAddTNMItem()
		{
			return this.contextMenuTumourCategoryTNMAddTNMItem;
		}
		private MenuItem contextMenuTumourCategoryTNMAddTNMItem;
		public MenuItem getTumourCategoryTNMInactivateTNMItem()
		{
			return this.contextMenuTumourCategoryTNMInactivateTNMItem;
		}
		private MenuItem contextMenuTumourCategoryTNMInactivateTNMItem;
		public MenuItem getTumourCategoryTNMActivateTNMItem()
		{
			return this.contextMenuTumourCategoryTNMActivateTNMItem;
		}
		private MenuItem contextMenuTumourCategoryTNMActivateTNMItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 4;
			public static final int Update = 5;
			public static final int Remove = 6;
			public static final int View = 7;
			public static final int MoveUp = 8;
			public static final int MoveDown = 9;
			public static final int Replace = 10;
			public static final int Confirm = 11;
			public static final int EDIT_VIEW_ICP_ACTIONS = 12;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class ClinicalAdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TumourGroupPrognosticLocation implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 13;
				public static final int REMOVE = 14;
			}
			public void disableAllTumourGroupPrognosticLocationMenuItems()
			{
				this.contextMenuTumourGroupPrognosticLocationADDItem.setEnabled(false);
				this.contextMenuTumourGroupPrognosticLocationREMOVEItem.setEnabled(false);
			}
			public void hideAllTumourGroupPrognosticLocationMenuItems()
			{
				this.contextMenuTumourGroupPrognosticLocationADDItem.setVisible(false);
				this.contextMenuTumourGroupPrognosticLocationREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupPrognosticLocation;
			public MenuItem getTumourGroupPrognosticLocationADDItem()
			{
				return this.contextMenuTumourGroupPrognosticLocationADDItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticLocationADDItem;
			public MenuItem getTumourGroupPrognosticLocationREMOVEItem()
			{
				return this.contextMenuTumourGroupPrognosticLocationREMOVEItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticLocationREMOVEItem;
			public final class TumourGroupPrognosticRisk implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 15;
				public static final int REMOVE = 16;
			}
			public void disableAllTumourGroupPrognosticRiskMenuItems()
			{
				this.contextMenuTumourGroupPrognosticRiskADDItem.setEnabled(false);
				this.contextMenuTumourGroupPrognosticRiskREMOVEItem.setEnabled(false);
			}
			public void hideAllTumourGroupPrognosticRiskMenuItems()
			{
				this.contextMenuTumourGroupPrognosticRiskADDItem.setVisible(false);
				this.contextMenuTumourGroupPrognosticRiskREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupPrognosticRisk;
			public MenuItem getTumourGroupPrognosticRiskADDItem()
			{
				return this.contextMenuTumourGroupPrognosticRiskADDItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticRiskADDItem;
			public MenuItem getTumourGroupPrognosticRiskREMOVEItem()
			{
				return this.contextMenuTumourGroupPrognosticRiskREMOVEItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticRiskREMOVEItem;
			public final class TumourGroupPrognosticPSA implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 17;
				public static final int REMOVE = 18;
			}
			public void disableAllTumourGroupPrognosticPSAMenuItems()
			{
				this.contextMenuTumourGroupPrognosticPSAADDItem.setEnabled(false);
				this.contextMenuTumourGroupPrognosticPSAREMOVEItem.setEnabled(false);
			}
			public void hideAllTumourGroupPrognosticPSAMenuItems()
			{
				this.contextMenuTumourGroupPrognosticPSAADDItem.setVisible(false);
				this.contextMenuTumourGroupPrognosticPSAREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupPrognosticPSA;
			public MenuItem getTumourGroupPrognosticPSAADDItem()
			{
				return this.contextMenuTumourGroupPrognosticPSAADDItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticPSAADDItem;
			public MenuItem getTumourGroupPrognosticPSAREMOVEItem()
			{
				return this.contextMenuTumourGroupPrognosticPSAREMOVEItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticPSAREMOVEItem;
			public final class TumourGroupPrognosticGleason implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 19;
				public static final int REMOVE = 20;
			}
			public void disableAllTumourGroupPrognosticGleasonMenuItems()
			{
				this.contextMenuTumourGroupPrognosticGleasonADDItem.setEnabled(false);
				this.contextMenuTumourGroupPrognosticGleasonREMOVEItem.setEnabled(false);
			}
			public void hideAllTumourGroupPrognosticGleasonMenuItems()
			{
				this.contextMenuTumourGroupPrognosticGleasonADDItem.setVisible(false);
				this.contextMenuTumourGroupPrognosticGleasonREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupPrognosticGleason;
			public MenuItem getTumourGroupPrognosticGleasonADDItem()
			{
				return this.contextMenuTumourGroupPrognosticGleasonADDItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticGleasonADDItem;
			public MenuItem getTumourGroupPrognosticGleasonREMOVEItem()
			{
				return this.contextMenuTumourGroupPrognosticGleasonREMOVEItem;
			}
			private MenuItem contextMenuTumourGroupPrognosticGleasonREMOVEItem;
			public final class TumourGroupHistologyGrade implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 21;
				public static final int INACTIVATE = 22;
				public static final int REACTIVATE = 23;
				public static final int LOAD_DEFAULTS = 24;
			}
			public void disableAllTumourGroupHistologyGradeMenuItems()
			{
				this.contextMenuTumourGroupHistologyGradeADDItem.setEnabled(false);
				this.contextMenuTumourGroupHistologyGradeINACTIVATEItem.setEnabled(false);
				this.contextMenuTumourGroupHistologyGradeREACTIVATEItem.setEnabled(false);
				this.contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem.setEnabled(false);
			}
			public void hideAllTumourGroupHistologyGradeMenuItems()
			{
				this.contextMenuTumourGroupHistologyGradeADDItem.setVisible(false);
				this.contextMenuTumourGroupHistologyGradeINACTIVATEItem.setVisible(false);
				this.contextMenuTumourGroupHistologyGradeREACTIVATEItem.setVisible(false);
				this.contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupHistologyGrade;
			public MenuItem getTumourGroupHistologyGradeADDItem()
			{
				return this.contextMenuTumourGroupHistologyGradeADDItem;
			}
			private MenuItem contextMenuTumourGroupHistologyGradeADDItem;
			public MenuItem getTumourGroupHistologyGradeINACTIVATEItem()
			{
				return this.contextMenuTumourGroupHistologyGradeINACTIVATEItem;
			}
			private MenuItem contextMenuTumourGroupHistologyGradeINACTIVATEItem;
			public MenuItem getTumourGroupHistologyGradeREACTIVATEItem()
			{
				return this.contextMenuTumourGroupHistologyGradeREACTIVATEItem;
			}
			private MenuItem contextMenuTumourGroupHistologyGradeREACTIVATEItem;
			public MenuItem getTumourGroupHistologyGradeLOAD_DEFAULTSItem()
			{
				return this.contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem;
			}
			private MenuItem contextMenuTumourGroupHistologyGradeLOAD_DEFAULTSItem;
		}
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TumourGroupOtherClassification implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int UpdateClassification = 25;
				public static final int RemoveClassification = 26;
			}
			public void disableAllTumourGroupOtherClassificationMenuItems()
			{
				this.contextMenuTumourGroupOtherClassificationUpdateClassificationItem.setEnabled(false);
				this.contextMenuTumourGroupOtherClassificationRemoveClassificationItem.setEnabled(false);
			}
			public void hideAllTumourGroupOtherClassificationMenuItems()
			{
				this.contextMenuTumourGroupOtherClassificationUpdateClassificationItem.setVisible(false);
				this.contextMenuTumourGroupOtherClassificationRemoveClassificationItem.setVisible(false);
			}
			private Menu contextMenuTumourGroupOtherClassification;
			public ReadOnlyMenuItem getTumourGroupOtherClassificationUpdateClassificationItem()
			{
				return this.contextMenuTumourGroupOtherClassificationUpdateClassificationItem;
			}
			private MenuItem contextMenuTumourGroupOtherClassificationUpdateClassificationItem;
			public ReadOnlyMenuItem getTumourGroupOtherClassificationRemoveClassificationItem()
			{
				return this.contextMenuTumourGroupOtherClassificationRemoveClassificationItem;
			}
			private MenuItem contextMenuTumourGroupOtherClassificationRemoveClassificationItem;
			public final class TumourHistologyLayer implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 27;
				public static final int SELECTFROMTAXONOMY = 28;
				public static final int REMOVE = 29;
				public static final int REACTIVATE = 30;
			}
			public void disableAllTumourHistologyLayerMenuItems()
			{
				this.contextMenuTumourHistologyLayerADDItem.setEnabled(false);
				this.contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem.setEnabled(false);
				this.contextMenuTumourHistologyLayerREMOVEItem.setEnabled(false);
				this.contextMenuTumourHistologyLayerREACTIVATEItem.setEnabled(false);
			}
			public void hideAllTumourHistologyLayerMenuItems()
			{
				this.contextMenuTumourHistologyLayerADDItem.setVisible(false);
				this.contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem.setVisible(false);
				this.contextMenuTumourHistologyLayerREMOVEItem.setVisible(false);
				this.contextMenuTumourHistologyLayerREACTIVATEItem.setVisible(false);
			}
			private Menu contextMenuTumourHistologyLayer;
			public MenuItem getTumourHistologyLayerADDItem()
			{
				return this.contextMenuTumourHistologyLayerADDItem;
			}
			private MenuItem contextMenuTumourHistologyLayerADDItem;
			public MenuItem getTumourHistologyLayerSELECTFROMTAXONOMYItem()
			{
				return this.contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem;
			}
			private MenuItem contextMenuTumourHistologyLayerSELECTFROMTAXONOMYItem;
			public MenuItem getTumourHistologyLayerREMOVEItem()
			{
				return this.contextMenuTumourHistologyLayerREMOVEItem;
			}
			private MenuItem contextMenuTumourHistologyLayerREMOVEItem;
			public ReadOnlyMenuItem getTumourHistologyLayerREACTIVATEItem()
			{
				return this.contextMenuTumourHistologyLayerREACTIVATEItem;
			}
			private MenuItem contextMenuTumourHistologyLayerREACTIVATEItem;
			public final class TumourSerumMarkers implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 31;
				public static final int SLECTFROMTAXONOMY = 32;
				public static final int REMOVE = 33;
			}
			public void disableAllTumourSerumMarkersMenuItems()
			{
				this.contextMenuTumourSerumMarkersADDItem.setEnabled(false);
				this.contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem.setEnabled(false);
				this.contextMenuTumourSerumMarkersREMOVEItem.setEnabled(false);
			}
			public void hideAllTumourSerumMarkersMenuItems()
			{
				this.contextMenuTumourSerumMarkersADDItem.setVisible(false);
				this.contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem.setVisible(false);
				this.contextMenuTumourSerumMarkersREMOVEItem.setVisible(false);
			}
			private Menu contextMenuTumourSerumMarkers;
			public MenuItem getTumourSerumMarkersADDItem()
			{
				return this.contextMenuTumourSerumMarkersADDItem;
			}
			private MenuItem contextMenuTumourSerumMarkersADDItem;
			public MenuItem getTumourSerumMarkersSLECTFROMTAXONOMYItem()
			{
				return this.contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem;
			}
			private MenuItem contextMenuTumourSerumMarkersSLECTFROMTAXONOMYItem;
			public MenuItem getTumourSerumMarkersREMOVEItem()
			{
				return this.contextMenuTumourSerumMarkersREMOVEItem;
			}
			private MenuItem contextMenuTumourSerumMarkersREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[148];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourHistology", "BO-1074100012-ID", "ID_TumourHistology");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourHistology", "BO-1074100012-HISTOLOGYDESCRIPTION", "HistologyDescription");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourHistology", "BO-1074100012-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourDifferentiaion", "BO-1075100006-ID", "ID_HistopathologicGrade");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourDifferentiaion", "BO-1075100006-TUMOURDIFFERENTATION", "TumourDifferentation");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourDifferentiaion", "BO-1075100006-ISDEFAULT", "IsDefault");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourDifferentiaion", "BO-1075100006-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourDifferentiaion", "BO-1075100006-GRADE", "Grade");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSerumMarker", "BO-1075100005-ID", "ID_TumourSerumMarker");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSerumMarker", "BO-1075100005-SERUMMARKERVALUE", "SerumMarkerValue");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSerumMarker", "BO-1075100005-SERUMMARKERDESCRIPTION", "SerumMarkerDescription");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSerumMarker", "BO-1075100005-ISACTIVE", "IsActive");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticLocation", "BO-1075100017-ID", "ID_PrognosticLocationConfig");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticLocation", "BO-1075100017-LOCATIONNAME", "LocationName");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticLocation", "BO-1075100017-LOCATIONDESCRIPTION", "LocationDescription");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticLocation", "BO-1075100017-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticRiskAssessment", "BO-1075100018-ID", "ID_PrognosticRiskConfiguration");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticRiskAssessment", "BO-1075100018-RISKNAME", "RiskName");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticRiskAssessment", "BO-1075100018-RISKDESCRIPTION", "RiskDescription");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticRiskAssessment", "BO-1075100018-ISACTIVE", "IsActive");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticPSA", "BO-1075100015-ID", "ID_PSAConfig");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticPSA", "BO-1075100015-PSANAME", "PSAName");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticPSA", "BO-1075100015-PSADESCRIPTION", "PSADescription");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticPSA", "BO-1075100015-ISACTIVE", "IsActive");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticGleason", "BO-1075100016-ID", "ID_GleasonConfig");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticGleason", "BO-1075100016-GLEASONNAME", "GleasonName");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticGleason", "BO-1075100016-GLEASONDESCRIPTION", "GleasonDescription");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.SelectedPrognosticGleason", "BO-1075100016-ISACTIVE", "IsActive");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-ID", "ID_TumourGroup");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-GROUPNAME", "GroupName");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-ISACTIVE", "IsActive");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-HASTNM", "HasTNM");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-ISPROGNOSTICGROUPINGRELEVANT", "IsPrognosticGroupingRelevant");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-GROUPDESCRIPTION", "GroupDescription");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-HASOTHERCLASSIFICATIONS", "HasOtherClassifications");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-TNMREQUIRESDIFF", "TnmRequiresDiff");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-TNMREQUIRESOVER45", "TnmRequiresOver45");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-TNMREQUIRESHISTO", "TnmRequiresHisto");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-TNMREQUIRESSMARKERS", "TnmRequiresSMarkers");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourGroup", "BO-1074100009-TNMVERSION", "TNMVersion");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-ID", "ID_TumourSite");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-NAME", "Name");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-ISACTIVE", "IsActive");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-HASSITESPECIFICTNM", "HasSiteSpecificTNM");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-HASSITESPECIFICHISTOLOGY", "HasSiteSpecificHistology");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-DESCRIPTION", "Description");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_ClinicalAdmin.TumourSite", "BO-1074100010-TNMVERSION", "TNMVersion");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentCategory_" + componentIdentifier, "BO-1074100008-ID", "ID_TumourCategory");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentCategory_" + componentIdentifier, "BO-1074100008-CATEGORYNAME", "CategoryName");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentCategory_" + componentIdentifier, "BO-1074100008-CATEGORYDESCRIPTION", "CategoryDescription");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentCategory_" + componentIdentifier, "BO-1074100008-ISACTIVE", "IsActive");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-ID", "ID_TumourGroup");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-GROUPNAME", "GroupName");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-ISACTIVE", "IsActive");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-HASTNM", "HasTNM");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-ISPROGNOSTICGROUPINGRELEVANT", "IsPrognosticGroupingRelevant");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-GROUPDESCRIPTION", "GroupDescription");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-HASOTHERCLASSIFICATIONS", "HasOtherClassifications");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESDIFF", "TnmRequiresDiff");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESOVER45", "TnmRequiresOver45");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESHISTO", "TnmRequiresHisto");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__ParentGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESSMARKERS", "TnmRequiresSMarkers");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedHistologyRecord_" + componentIdentifier, "BO-1075100011-ID", "ID_TumourGroupHistology");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedHistologyRecord_" + componentIdentifier, "BO-1075100011-ISACTIVE", "IsActive");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-ID", "ID_TumourGroupSiteTNMValue");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-TNMTYPE", "TNMType");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-TNMVALUE", "TNMValue");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-TNMDESCRIPTION", "TNMDescription");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-CLINICALPATHOLOGICAL", "ClinicalPathological");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedTNMRecord_" + componentIdentifier, "BO-1074100011-ISACTIVE", "IsActive");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumRecord_" + componentIdentifier, "BO-1075100005-ID", "ID_TumourSerumMarker");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumRecord_" + componentIdentifier, "BO-1075100005-SERUMMARKERVALUE", "SerumMarkerValue");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumRecord_" + componentIdentifier, "BO-1075100005-SERUMMARKERDESCRIPTION", "SerumMarkerDescription");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.TumourCategoryGroupSites.__internal_x_context__SelectedSerumRecord_" + componentIdentifier, "BO-1075100005-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
