//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.cancerstagingclassifications;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrValuesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabClassificationValuesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdValuesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdValuesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColActiveReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColActiveOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getColActive()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setColActive(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellColActiveTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColValuesReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColValuesReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColValuesOpened()
				{
					super.row.showOpened(1);
				}
				public String getColValues()
				{
					return (String)super.row.get(1);
				}
				public void setColValues(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColValuesTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.clinicaladmin.vo.OtherClassificationValueVo getValue()
				{
					return (ims.clinicaladmin.vo.OtherClassificationValueVo)super.row.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.OtherClassificationValueVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdValuesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdValuesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdValuesRow get(int index)
				{
					return new grdValuesRow(super.collection.get(index));
				}
				public grdValuesRow newRow()
				{
					return new grdValuesRow(super.collection.newRow());
				}
				public grdValuesRow newRow(boolean autoSelect)
				{
					return new grdValuesRow(super.collection.newRow(autoSelect));
				}
				public grdValuesRow newRowAt(int index)
				{
					return new grdValuesRow(super.collection.newRowAt(index));
				}
				public grdValuesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdValuesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdValuesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.clinicaladmin.vo.OtherClassificationValueVoCollection getValues()
				{
					ims.clinicaladmin.vo.OtherClassificationValueVoCollection listOfValues = new ims.clinicaladmin.vo.OtherClassificationValueVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinicaladmin.vo.OtherClassificationValueVo getValue()
				{
					return (ims.clinicaladmin.vo.OtherClassificationValueVo)super.grid.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.OtherClassificationValueVo value)
				{
					super.grid.setValue(value);
				}
				public grdValuesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdValuesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdValuesRowCollection getRows()
				{
					return new grdValuesRowCollection(super.grid.getRows());
				}
				public grdValuesRow getRowByValue(ims.clinicaladmin.vo.OtherClassificationValueVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdValuesRow(row);
				}
				public void setColActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColValuesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColValuesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View Active Only", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 464, 152, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdValuesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuStagingClassification, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdValuesTemp);
				grdValuesGrid grdValues = (grdValuesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdValuesGrid.class, m_grdValuesTemp);
				grdValues.addImageColumn(" ", 0, 0, 30, true, 0);
				grdValues.addStringColumn("Classification Values", 0, 0, -1, false, false, 0, 100, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdValues);
			}

			public CheckBox chkActiveValueOnly()
			{
				return (CheckBox)super.getControl(0);
			}
			public grdValuesGrid grdValues()
			{
				return (grdValuesGrid)super.getGrid(0);
			}
		}
		public static class tabValueMappingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTaxonomyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTaxonomyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColExternalCodeTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColExternalCodeTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColExternalCodeTypeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.core.vo.lookups.TaxonomyType getColExternalCodeType()
				{
					return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
				}
				public void setColExternalCodeType(ims.core.vo.lookups.TaxonomyType value)
				{
					super.row.set(0, value);
				}
				public void setCellColExternalCodeTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColValueReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColValueReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColValueOpened()
				{
					super.row.showOpened(1);
				}
				public String getColValue()
				{
					return (String)super.row.get(1);
				}
				public void setColValue(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColValueTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.row.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTaxonomyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTaxonomyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTaxonomyRow get(int index)
				{
					return new grdTaxonomyRow(super.collection.get(index));
				}
				public grdTaxonomyRow newRow()
				{
					return new grdTaxonomyRow(super.collection.newRow());
				}
				public grdTaxonomyRow newRow(boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRow(autoSelect));
				}
				public grdTaxonomyRow newRowAt(int index)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index));
				}
				public grdTaxonomyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTaxonomyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.TaxonomyMapCollection getValues()
				{
					ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.grid.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.grid.setValue(value);
				}
				public grdTaxonomyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTaxonomyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTaxonomyRowCollection getRows()
				{
					return new grdTaxonomyRowCollection(super.grid.getRows());
				}
				public grdTaxonomyRow getRowByValue(ims.core.vo.TaxonomyMap value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTaxonomyRow(row);
				}
				public void setColExternalCodeTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColExternalCodeTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColValueHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColValueHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Value:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 368, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 464, 136, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTaxonomyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuTumourFinding, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTaxonomyTemp);
				grdTaxonomyGrid grdTaxonomy = (grdTaxonomyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTaxonomyGrid.class, m_grdTaxonomyTemp);
				grdTaxonomy.addStringColumn("External Code Type", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTaxonomy.addStringColumn("External Value", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTaxonomy);
			}

			public TextBox txtValue()
			{
				return (TextBox)super.getControl(1);
			}
			public grdTaxonomyGrid grdTaxonomy()
			{
				return (grdTaxonomyGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 312, 119, 504, 224, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClassificationValues = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Classification Values", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClassificationValuesContainer m_tabClassificationValuesContainer = (tabClassificationValuesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClassificationValuesContainer.class, m_tabClassificationValues, factory);
			super.addContainer(m_tabClassificationValues, m_tabClassificationValuesContainer);
			ims.framework.utils.SizeInfo m_tabClassificationValuesDesignSize = new ims.framework.utils.SizeInfo(504, 224);
			ims.framework.utils.SizeInfo m_tabClassificationValuesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabClassificationValuesContainer.setContext(form, appForm, m_tabClassificationValues, loader, form_images_local, contextMenus, startControlID, m_tabClassificationValuesDesignSize, m_tabClassificationValuesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 312, 119, 504, 224, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabValueMappings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabValueMappingsContainer m_tabValueMappingsContainer = (tabValueMappingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabValueMappingsContainer.class, m_tabValueMappings, factory);
			super.addContainer(m_tabValueMappings, m_tabValueMappingsContainer);
			ims.framework.utils.SizeInfo m_tabValueMappingsDesignSize = new ims.framework.utils.SizeInfo(504, 224);
			ims.framework.utils.SizeInfo m_tabValueMappingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabValueMappingsContainer.setContext(form, appForm, m_tabValueMappings, loader, form_images_local, contextMenus, startControlID, m_tabValueMappingsDesignSize, m_tabValueMappingsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabClassificationValues().setVisible(false);
			tabValueMappings().setVisible(false);
		}
		public void settabClassificationValuesEnabled(boolean value)
		{
			tabClassificationValues().setEnabled(value);
		}
		public void settabValueMappingsEnabled(boolean value)
		{
			tabValueMappings().setEnabled(value);
		}
		public void showtabClassificationValues()
		{
			tabValueMappings().setVisible(false);
			tabClassificationValues().setVisible(true);
		}
		public void showtabValueMappings()
		{
			tabClassificationValues().setVisible(false);
			tabValueMappings().setVisible(true);
		}

		public tabClassificationValuesContainer tabClassificationValues()
		{
			return (tabClassificationValuesContainer)super.layers.get(0);
		}
		public tabValueMappingsContainer tabValueMappings()
		{
			return (tabValueMappingsContainer)super.layers.get(1);
		}
	}
	public static class grdClassificationRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClassificationRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColActiveReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColActiveOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getColActive()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setColActive(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellColActiveTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getColName()
		{
			return (String)super.row.get(1);
		}
		public void setColName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.clinicaladmin.vo.StagingClassificationVo getValue()
		{
			return (ims.clinicaladmin.vo.StagingClassificationVo)super.row.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.StagingClassificationVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClassificationRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClassificationRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClassificationRow get(int index)
		{
			return new grdClassificationRow(super.collection.get(index));
		}
		public grdClassificationRow newRow()
		{
			return new grdClassificationRow(super.collection.newRow());
		}
		public grdClassificationRow newRow(boolean autoSelect)
		{
			return new grdClassificationRow(super.collection.newRow(autoSelect));
		}
		public grdClassificationRow newRowAt(int index)
		{
			return new grdClassificationRow(super.collection.newRowAt(index));
		}
		public grdClassificationRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClassificationRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClassificationGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinicaladmin.vo.StagingClassificationVoCollection getValues()
		{
			ims.clinicaladmin.vo.StagingClassificationVoCollection listOfValues = new ims.clinicaladmin.vo.StagingClassificationVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinicaladmin.vo.StagingClassificationVo getValue()
		{
			return (ims.clinicaladmin.vo.StagingClassificationVo)super.grid.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.StagingClassificationVo value)
		{
			super.grid.setValue(value);
		}
		public grdClassificationRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClassificationRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClassificationRowCollection getRows()
		{
			return new grdClassificationRowCollection(super.grid.getRows());
		}
		public grdClassificationRow getRowByValue(ims.clinicaladmin.vo.StagingClassificationVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClassificationRow(row);
		}
		public void setColActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdTumourGroupsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTumourGroupsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColValuesReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColValuesReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColValuesOpened()
		{
			super.row.showOpened(0);
		}
		public String getColValues()
		{
			return (String)super.row.get(0);
		}
		public void setColValues(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColValuesTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.clinicaladmin.vo.TumourGroupListVo getValue()
		{
			return (ims.clinicaladmin.vo.TumourGroupListVo)super.row.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.TumourGroupListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTumourGroupsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTumourGroupsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTumourGroupsRow get(int index)
		{
			return new grdTumourGroupsRow(super.collection.get(index));
		}
		public grdTumourGroupsRow newRow()
		{
			return new grdTumourGroupsRow(super.collection.newRow());
		}
		public grdTumourGroupsRow newRow(boolean autoSelect)
		{
			return new grdTumourGroupsRow(super.collection.newRow(autoSelect));
		}
		public grdTumourGroupsRow newRowAt(int index)
		{
			return new grdTumourGroupsRow(super.collection.newRowAt(index));
		}
		public grdTumourGroupsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTumourGroupsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTumourGroupsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinicaladmin.vo.TumourGroupListVoCollection getValues()
		{
			ims.clinicaladmin.vo.TumourGroupListVoCollection listOfValues = new ims.clinicaladmin.vo.TumourGroupListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinicaladmin.vo.TumourGroupListVo getValue()
		{
			return (ims.clinicaladmin.vo.TumourGroupListVo)super.grid.getValue();
		}
		public void setValue(ims.clinicaladmin.vo.TumourGroupListVo value)
		{
			super.grid.setValue(value);
		}
		public grdTumourGroupsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTumourGroupsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTumourGroupsRowCollection getRows()
		{
			return new grdTumourGroupsRowCollection(super.grid.getRows());
		}
		public grdTumourGroupsRow getRowByValue(ims.clinicaladmin.vo.TumourGroupListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTumourGroupsRow(row);
		}
		public void setColValuesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColValuesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectStagingClassification();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuAddContact = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuAddContactNewContactItem = factory.createMenuItem(startControlID.intValue() + 10, "New Clinical Contact", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuAddContact.add(contextMenus.contextMenuAddContactNewContactItem);
		contextMenus.contextMenuAddContactViewContactItem = factory.createMenuItem(startControlID.intValue() + 11, "View Clinical Contact", true, false, new Integer(102182), true, false);
		contextMenus.contextMenuAddContact.add(contextMenus.contextMenuAddContactViewContactItem);
		form.registerMenu(contextMenus.contextMenuAddContact);
		contextMenus.Oncology.contextMenuStagingClassification = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Oncology.contextMenuStagingClassificationAddFindingItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuStagingClassification.add(contextMenus.Oncology.contextMenuStagingClassificationAddFindingItem);
		contextMenus.Oncology.contextMenuStagingClassificationSelectFindingItem = factory.createMenuItem(startControlID.intValue() + 13, "Select Finding from Taxonomy", true, false, new Integer(102120), true, false);
		contextMenus.Oncology.contextMenuStagingClassification.add(contextMenus.Oncology.contextMenuStagingClassificationSelectFindingItem);
		contextMenus.Oncology.contextMenuStagingClassificationRemoveFindingItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove Finding", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuStagingClassification.add(contextMenus.Oncology.contextMenuStagingClassificationRemoveFindingItem);
		contextMenus.Oncology.contextMenuStagingClassificationREACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 15, "Re-activate Finding", true, false, new Integer(102169), true, false);
		contextMenus.Oncology.contextMenuStagingClassification.add(contextMenus.Oncology.contextMenuStagingClassificationREACTIVATEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuStagingClassification);
		contextMenus.Oncology.contextMenuTumourFinding = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Oncology.contextMenuTumourFindingADDItem = factory.createMenuItem(startControlID.intValue() + 16, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingADDItem);
		contextMenus.Oncology.contextMenuTumourFindingRemoveItem = factory.createMenuItem(startControlID.intValue() + 17, "Remove Finding", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingRemoveItem);
		contextMenus.Oncology.contextMenuTumourFindingSelectItem = factory.createMenuItem(startControlID.intValue() + 18, "Select Finding", true, false, new Integer(102120), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingSelectItem);
		contextMenus.Oncology.contextMenuTumourFindingMoveUpItem = factory.createMenuItem(startControlID.intValue() + 19, "Move Up", true, false, new Integer(102197), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingMoveUpItem);
		contextMenus.Oncology.contextMenuTumourFindingMoveDownItem = factory.createMenuItem(startControlID.intValue() + 20, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingMoveDownItem);
		contextMenus.Oncology.contextMenuTumourFindingREACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 21, "Re Activate finding", true, false, new Integer(102170), true, false);
		contextMenus.Oncology.contextMenuTumourFinding.add(contextMenus.Oncology.contextMenuTumourFindingREACTIVATEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuTumourFinding);


		// Panel Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 296, 32, 536, 552, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));

		// Layer Clasess
		lyrValuesLayer m_lyrValuesLayer = (lyrValuesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrValuesLayer.class, this, factory);
		super.addLayer(m_lyrValuesLayer);
		m_lyrValuesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 64, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Classification Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 312, 96, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Classification Values:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 752, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 664, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 440, 64, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View Active Only", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 264, 552, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdClassificationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdClassificationTemp);
		grdClassificationGrid grdClassification = (grdClassificationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClassificationGrid.class, m_grdClassificationTemp);
		grdClassification.addImageColumn(" ", 0, 0, 30, true, 0);
		grdClassification.addStringColumn("Name", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdClassification);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 312, 360, 504, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdTumourGroupsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAddContact, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTumourGroupsTemp);
		grdTumourGroupsGrid grdTumourGroups = (grdTumourGroupsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTumourGroupsGrid.class, m_grdTumourGroupsTemp);
		grdTumourGroups.addStringColumn("Associated Tumour Groups", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTumourGroups);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrValuesLayer lyrValues()
	{
		return (lyrValuesLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public TextBox txtClassificationName()
	{
		return (TextBox)super.getControl(7);
	}
	public CheckBox chkActiveClassOnly()
	{
		return (CheckBox)super.getControl(8);
	}
	public grdClassificationGrid grdClassification()
	{
		return (grdClassificationGrid)super.getGrid(0);
	}
	public grdTumourGroupsGrid grdTumourGroups()
	{
		return (grdTumourGroupsGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ClinicalAdmin = new ClinicalAdminForms();
			Core = new CoreForms();
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				TumourGroupSelect = new LocalFormName(104121);
			}
			public final FormName TumourGroupSelect;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName TaxonomySearch;
		}

		public ClinicalAdminForms ClinicalAdmin;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectStagingClassification = new ims.framework.ContextVariable("SelectStagingClassification", prefix + "_lv_ClinicalAdmin.CancerStagingClassifications.__internal_x_context__SelectStagingClassification_" + componentIdentifier + "");
			cxl_IsTgEdited = new ims.framework.ContextVariable("IsTgEdited", prefix + "_lv_ClinicalAdmin.CancerStagingClassifications.__internal_x_context__IsTgEdited_" + componentIdentifier + "");
		}
		
		public boolean getSelectStagingClassificationIsNotNull()
		{
			return !cxl_SelectStagingClassification.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.StagingClassificationVo getSelectStagingClassification()
		{
			return (ims.clinicaladmin.vo.StagingClassificationVo)cxl_SelectStagingClassification.getValue(context);
		}
		public void setSelectStagingClassification(ims.clinicaladmin.vo.StagingClassificationVo value)
		{
			cxl_SelectStagingClassification.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectStagingClassification = null;
		public boolean getIsTgEditedIsNotNull()
		{
			return !cxl_IsTgEdited.getValueIsNull(context);
		}
		public Boolean getIsTgEdited()
		{
			return (Boolean)cxl_IsTgEdited.getValue(context);
		}
		public void setIsTgEdited(Boolean value)
		{
			cxl_IsTgEdited.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsTgEdited = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class AddContact implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NewContact = 10;
			public static final int ViewContact = 11;
		}
		public void disableAllAddContactMenuItems()
		{
			this.contextMenuAddContactNewContactItem.setEnabled(false);
			this.contextMenuAddContactViewContactItem.setEnabled(false);
		}
		public void hideAllAddContactMenuItems()
		{
			this.contextMenuAddContactNewContactItem.setVisible(false);
			this.contextMenuAddContactViewContactItem.setVisible(false);
		}
		private Menu contextMenuAddContact;
		public MenuItem getAddContactNewContactItem()
		{
			return this.contextMenuAddContactNewContactItem;
		}
		private MenuItem contextMenuAddContactNewContactItem;
		public MenuItem getAddContactViewContactItem()
		{
			return this.contextMenuAddContactViewContactItem;
		}
		private MenuItem contextMenuAddContactViewContactItem;
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class StagingClassification implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddFinding = 12;
				public static final int SelectFinding = 13;
				public static final int RemoveFinding = 14;
				public static final int REACTIVATE = 15;
			}
			public void disableAllStagingClassificationMenuItems()
			{
				this.contextMenuStagingClassificationAddFindingItem.setEnabled(false);
				this.contextMenuStagingClassificationSelectFindingItem.setEnabled(false);
				this.contextMenuStagingClassificationRemoveFindingItem.setEnabled(false);
				this.contextMenuStagingClassificationREACTIVATEItem.setEnabled(false);
			}
			public void hideAllStagingClassificationMenuItems()
			{
				this.contextMenuStagingClassificationAddFindingItem.setVisible(false);
				this.contextMenuStagingClassificationSelectFindingItem.setVisible(false);
				this.contextMenuStagingClassificationRemoveFindingItem.setVisible(false);
				this.contextMenuStagingClassificationREACTIVATEItem.setVisible(false);
			}
			private Menu contextMenuStagingClassification;
			public MenuItem getStagingClassificationAddFindingItem()
			{
				return this.contextMenuStagingClassificationAddFindingItem;
			}
			private MenuItem contextMenuStagingClassificationAddFindingItem;
			public MenuItem getStagingClassificationSelectFindingItem()
			{
				return this.contextMenuStagingClassificationSelectFindingItem;
			}
			private MenuItem contextMenuStagingClassificationSelectFindingItem;
			public MenuItem getStagingClassificationRemoveFindingItem()
			{
				return this.contextMenuStagingClassificationRemoveFindingItem;
			}
			private MenuItem contextMenuStagingClassificationRemoveFindingItem;
			public ReadOnlyMenuItem getStagingClassificationREACTIVATEItem()
			{
				return this.contextMenuStagingClassificationREACTIVATEItem;
			}
			private MenuItem contextMenuStagingClassificationREACTIVATEItem;
			public final class TumourFinding implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 16;
				public static final int Remove = 17;
				public static final int Select = 18;
				public static final int MoveUp = 19;
				public static final int MoveDown = 20;
				public static final int REACTIVATE = 21;
			}
			public void disableAllTumourFindingMenuItems()
			{
				this.contextMenuTumourFindingADDItem.setEnabled(false);
				this.contextMenuTumourFindingRemoveItem.setEnabled(false);
				this.contextMenuTumourFindingSelectItem.setEnabled(false);
				this.contextMenuTumourFindingMoveUpItem.setEnabled(false);
				this.contextMenuTumourFindingMoveDownItem.setEnabled(false);
				this.contextMenuTumourFindingREACTIVATEItem.setEnabled(false);
			}
			public void hideAllTumourFindingMenuItems()
			{
				this.contextMenuTumourFindingADDItem.setVisible(false);
				this.contextMenuTumourFindingRemoveItem.setVisible(false);
				this.contextMenuTumourFindingSelectItem.setVisible(false);
				this.contextMenuTumourFindingMoveUpItem.setVisible(false);
				this.contextMenuTumourFindingMoveDownItem.setVisible(false);
				this.contextMenuTumourFindingREACTIVATEItem.setVisible(false);
			}
			private Menu contextMenuTumourFinding;
			public MenuItem getTumourFindingADDItem()
			{
				return this.contextMenuTumourFindingADDItem;
			}
			private MenuItem contextMenuTumourFindingADDItem;
			public MenuItem getTumourFindingRemoveItem()
			{
				return this.contextMenuTumourFindingRemoveItem;
			}
			private MenuItem contextMenuTumourFindingRemoveItem;
			public MenuItem getTumourFindingSelectItem()
			{
				return this.contextMenuTumourFindingSelectItem;
			}
			private MenuItem contextMenuTumourFindingSelectItem;
			public MenuItem getTumourFindingMoveUpItem()
			{
				return this.contextMenuTumourFindingMoveUpItem;
			}
			private MenuItem contextMenuTumourFindingMoveUpItem;
			public MenuItem getTumourFindingMoveDownItem()
			{
				return this.contextMenuTumourFindingMoveDownItem;
			}
			private MenuItem contextMenuTumourFindingMoveDownItem;
			public ReadOnlyMenuItem getTumourFindingREACTIVATEItem()
			{
				return this.contextMenuTumourFindingREACTIVATEItem;
			}
			private MenuItem contextMenuTumourFindingREACTIVATEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[80];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_SelectedStagingClassificationVo", "BO-1075100000-ID", "ID_StagingClassification");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_SelectedStagingClassificationVo", "BO-1075100000-NAME", "Name");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_SelectedStagingClassificationVo", "BO-1075100000-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.CancerStagingClassifications.__internal_x_context__SelectStagingClassification_" + componentIdentifier, "BO-1075100000-ID", "ID_StagingClassification");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.CancerStagingClassifications.__internal_x_context__SelectStagingClassification_" + componentIdentifier, "BO-1075100000-NAME", "Name");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.CancerStagingClassifications.__internal_x_context__SelectStagingClassification_" + componentIdentifier, "BO-1075100000-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
