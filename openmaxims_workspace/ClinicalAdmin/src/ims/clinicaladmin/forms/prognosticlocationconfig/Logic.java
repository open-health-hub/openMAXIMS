//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.prognosticlocationconfig;

import ims.clinicaladmin.forms.prognosticlocationconfig.GenForm.grdPrognosticLocationRow;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.vo.PrognosticLocationConfigVo;
import ims.oncology.vo.PrognosticLocationConfigVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		open();
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	@Override
	protected void onGrdPrognosticLocationSelectionChanged()
	{
		selectionChanged();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.ClinicalAdminNamespace.PrognosticLocationConfigMenu.NEW:
				newInstance();
			break;
			case GenForm.ContextMenus.ClinicalAdminNamespace.PrognosticLocationConfigMenu.EDIT:
				updateInstance();
			break;
		}
	}
	
	private void selectionChanged() 
	{
		form.getLocalContext().setCurrentRecord(domain.get(form.grdPrognosticLocation().getValue()));
		
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		updateControlsState();
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		populateGrid(domain.list());
		
		form.getLocalContext().setCurrentRecord(domain.get(form.grdPrognosticLocation().getValue()));
		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		
		form.setMode(FormMode.VIEW);
	}
	
	private void populateGrid(PrognosticLocationConfigVoCollection list) 
	{
		if(list == null || list.size() == 0)
			return;
		
		form.grdPrognosticLocation().getRows().clear();
		
		for(int i=0; i<list.size(); i++)
		{
			addRow(list.get(i));
		}
	}

	private void addRow(PrognosticLocationConfigVo prognosticLocationConfigVo) 
	{
		if(prognosticLocationConfigVo == null)
			return;
		
		grdPrognosticLocationRow row = form.grdPrognosticLocation().getRows().newRow(prognosticLocationConfigVo.equals(form.getLocalContext().getCurrentRecord()));
		
		row.setColName(prognosticLocationConfigVo.getLocationName());
		row.setColDescription(prognosticLocationConfigVo.getLocationDescription());
		row.setColActive(prognosticLocationConfigVo.getIsActive());
		
		if(!prognosticLocationConfigVo.getIsActive())
			row.setTextColor(Color.Gray);
		
		row.setValue(prognosticLocationConfigVo);
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().chkActive().setValue(false);
		form.ctnDetails().txtDescription().setValue(null);
		form.ctnDetails().txtName().setValue(null);
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentRecord(null);
		form.grdPrognosticLocation().setValue(null);
		
		clearInstanceControls();
		form.ctnDetails().chkActive().setValue(true);
		
		form.setMode(FormMode.EDIT);
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		PrognosticLocationConfigVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentRecord(domain.save(record));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	
	public void updateControlsState()
	{
		form.ctnDetails().setCollapsed(FormMode.VIEW.equals(form.getMode()) && !(form.grdPrognosticLocation().getValue() instanceof PrognosticLocationConfigVo));
		
		form.getContextMenus().ClinicalAdmin.getPrognosticLocationConfigMenuNEWItem().setVisible(true);
		form.getContextMenus().ClinicalAdmin.getPrognosticLocationConfigMenuEDITItem().setVisible(form.grdPrognosticLocation().getValue() instanceof PrognosticLocationConfigVo);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.grdPrognosticLocation().getValue() instanceof PrognosticLocationConfigVo);
		}
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
}
