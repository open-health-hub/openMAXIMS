//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3379.24044)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.clinicaladmin.forms.motorchartconfiguration;

import java.util.Comparator;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MotorChartAreaDetailVo;
import ims.core.vo.MotorChartAreaDetailVoCollection;
import ims.core.vo.VertebrallevelVo;
import ims.core.vo.VertebrallevelVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ----------------------------------------------------------------------------------------------------------------------------
	// DYNAMIC GRID (COLUMN IDENTIFIERS)
	// ----------------------------------------------------------------------------------------------------------------------------
	private static int COL_MOTOR_AREA_DESCRIPTION = 1;
	private static int COL_MOTOR_AREA_UPPER_LIMB = 2;
	private static int COL_MOTOR_AREA_LOWER_LIMB = 3;
	private static int COL_MOTOR_AREA_ACTIVE = 4;

	// ----------------------------------------------------------------------------------------------------------------------------
	// EVENT HANDLERS region
	// ----------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Call initialize function
		initialize();

		// Call open function
		open();
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getForms().ClinicalAdmin.MotorChartAreaDetail.equals(formName) && DialogResult.OK.equals(result))
		{
			// Get selected row
			DynamicGridRow row = null;

			if (form.getLocalContext().getTempSelectionIsNotNull())
			{
				row = form.dyngrdMotorArea().getSelectedRow();
			}
			
			// Update local context
			form.getLocalContext().setTempSelection(form.getGlobalContext().ClinicalAdmin.getMotorChartDetails());

			if (row == null)
			{
				row = form.dyngrdMotorArea().getRows().newRow();
			}

			// Update row value
			setMotorChartDetailsRow(row, form.getLocalContext().getTempSelection());

			form.dyngrdMotorArea().setValue(form.getLocalContext().getTempSelection());

			// Discard global context
			form.getGlobalContext().ClinicalAdmin.setMotorChartDetails(null);
		}

		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onDyngrdMotorAreaRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		// Update local context
		form.getLocalContext().setTempSelection((MotorChartAreaDetailVo) form.dyngrdMotorArea().getValue());

		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onDyngrdMotorAreaRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear local context
		form.getLocalContext().setTempSelection(null);

		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ClinicalAdminNamespace.MotorAreaMenu.ADD:
			{
				// Clear local context
				form.getLocalContext().setTempSelection(null);

				motorChartDetail();
				break;
			}

			case GenForm.ContextMenus.ClinicalAdminNamespace.MotorAreaMenu.EDIT:
			{
				motorChartDetail();

				break;
			}

			case GenForm.ContextMenus.ClinicalAdminNamespace.MotorAreaMenu.REMOVE:
			{
				// TODO Add remove option logic if required by client

				break;
			}

			case GenForm.ContextMenus.ClinicalAdminNamespace.MotorAreaMenu.MOVE_DOWN:
			{
				moveRowDown(form.dyngrdMotorArea().getSelectedRow());
				break;
			}

			case GenForm.ContextMenus.ClinicalAdminNamespace.MotorAreaMenu.MOVE_UP:
			{
				moveRowUp(form.dyngrdMotorArea().getSelectedRow());
				break;
			}
		}

		updateControlsState();
	}

	private void moveRowDown(DynamicGridRow selectedRow)
	{
		int index = form.dyngrdMotorArea().getRows().indexOf(selectedRow);
		
		if (index == form.dyngrdMotorArea().getRows().size() - 1)
			return;
		
		DynamicGridRow targetRow = form.dyngrdMotorArea().getRows().get(index + 1);
		
		if (!(targetRow.getValue() instanceof MotorChartAreaDetailVo) || !(selectedRow.getValue() instanceof MotorChartAreaDetailVo))
		{
			throw new CodingRuntimeException("Logical Error - the dynamic grid rows are supposed to keep only MotorChartAreaDetailVo as value");
		}
			
		MotorChartAreaDetailVo tempValue = (MotorChartAreaDetailVo) ((MotorChartAreaDetailVo) targetRow.getValue()).clone();
		MotorChartAreaDetailVo value = (MotorChartAreaDetailVo) selectedRow.getValue();
		
		setMotorChartDetailsRow(targetRow, value);
		setMotorChartDetailsRow(selectedRow, tempValue);
		
		form.dyngrdMotorArea().setValue(value);
	}

	private void moveRowUp(DynamicGridRow selectedRow)
	{
		int index = form.dyngrdMotorArea().getRows().indexOf(selectedRow);
		
		if (index == 0)
			return;
		
		DynamicGridRow targetRow = form.dyngrdMotorArea().getRows().get(index - 1);
		
		if (!(targetRow.getValue() instanceof MotorChartAreaDetailVo) || !(selectedRow.getValue() instanceof MotorChartAreaDetailVo))
		{
			throw new CodingRuntimeException("Logical Error - the dynamic grid rows are supposed to keep only MotorChartAreaDetailVo as value");
		}
			
		MotorChartAreaDetailVo tempValue = (MotorChartAreaDetailVo) ((MotorChartAreaDetailVo) targetRow.getValue()).clone();
		MotorChartAreaDetailVo value = (MotorChartAreaDetailVo) selectedRow.getValue();
		
		setMotorChartDetailsRow(targetRow, value);
		setMotorChartDetailsRow(selectedRow, tempValue);
		
		form.dyngrdMotorArea().setValue(value);
	}

	private void motorChartDetail()
	{
		// Set global context
		form.getGlobalContext().ClinicalAdmin.setMotorChartDetails(form.getLocalContext().getTempSelection());

		engine.open(form.getForms().ClinicalAdmin.MotorChartAreaDetail);
	}

	// ------------------------------------------------------------------------------------------------------------------------------
	// FORM UI FUNCTIONS region
	// ------------------------------------------------------------------------------------------------------------------------------

	public void initialize() throws FormOpenException
	{
		super.initialize();

		// Clear selection
		form.getLocalContext().setTempSelection(null);

		// Initialize the dynamic grid
		initializeDynamicGrid();
	}

	private void initializeDynamicGrid()
	{
		// Initialize the dynamic grid
		DynamicGridColumn column;
		column = form.dyngrdMotorArea().getColumns().newColumn("Motor Area", COL_MOTOR_AREA_DESCRIPTION);
		column.setWidth(350);
		column.setCanGrow(true);

		column = form.dyngrdMotorArea().getColumns().newColumn("Upper Limb", COL_MOTOR_AREA_UPPER_LIMB);
		column.setWidth(100);
		column.setCanGrow(false);

		column = form.dyngrdMotorArea().getColumns().newColumn("Lower Limb", COL_MOTOR_AREA_LOWER_LIMB);
		column.setWidth(100);
		column.setCanGrow(false);
		
		column = form.dyngrdMotorArea().getColumns().newColumn("Active", COL_MOTOR_AREA_ACTIVE);
		column.setWidth(100);
		column.setCanGrow(false);
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Get updated selection
			form.getLocalContext().setTempSelection(domain.getMotorChartArea(form.getLocalContext().getTempSelection()));

			// List motor char from global context
			setMotorChartArea(domain.listConfiguration());

			// Reselect
			form.dyngrdMotorArea().setValue(form.getLocalContext().getTempSelection());

			// Set form mode to VIEW
			form.setMode(FormMode.VIEW);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "Spinal Injuries");
		}
	}

	public void clearInstanceControls()
	{
		form.dyngrdMotorArea().getRows().clear();
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			MotorChartAreaDetailVoCollection configuration = getMotorChartAreaValue();

			String[] errors = configuration.validate();

			if (errors != null && errors.length != 0)
			{
				engine.showErrors(errors);
				return false;
			}

			configuration = domain.saveConfiguration(configuration);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "Spinal Injuries");
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Spinal Injuries");
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Spinal Injuries");
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Spinal Injuries");
			return false;
		}

		return true;
	}

	public void updateControlsState()
	{
		// Update the context menus
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().ClinicalAdmin.getMotorAreaMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().ClinicalAdmin.getMotorAreaMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.dyngrdMotorArea().getValue() != null);

		form.getContextMenus().ClinicalAdmin.getMotorAreaMenuMOVE_UPItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.dyngrdMotorArea().getValue() != null && form.dyngrdMotorArea().getSelectedRow().canMoveUp());
		form.getContextMenus().ClinicalAdmin.getMotorAreaMenuMOVE_DOWNItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.dyngrdMotorArea().getValue() != null && form.dyngrdMotorArea().getSelectedRow().canMoveDown());
	}

	// ----------------------------------------------------------------------------------------------------------------------------
	// MOTOR CHART AREA functions
	// ----------------------------------------------------------------------------------------------------------------------------
	private MotorChartAreaDetailVoCollection getMotorChartAreaValue()
	{
		MotorChartAreaDetailVoCollection tempCollection = new MotorChartAreaDetailVoCollection();

		for (int i = 0; i < form.dyngrdMotorArea().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMotorArea().getRows().get(i);

			if (row == null || row.getValue() == null)
				continue;

			MotorChartAreaDetailVo rowValue = (MotorChartAreaDetailVo) row.getValue();
			rowValue.setOrderNo(i);

			tempCollection.add(rowValue);
		}

		return tempCollection;
	}

	private void setMotorChartArea(MotorChartAreaDetailVoCollection motorChartAreaDetailVoCollection)
	{
		// Clear Motor Area
		form.dyngrdMotorArea().getRows().clear();
		
		// Sort collection by order
		motorChartAreaDetailVoCollection.sort(new MotorChartComparator());

		// Check for null
		if (motorChartAreaDetailVoCollection == null)
			return;

		// Iterate through the collection
		for (int i = 0; i < motorChartAreaDetailVoCollection.size(); i++)
		{
			MotorChartAreaDetailVo motorChartDetails = motorChartAreaDetailVoCollection.get(i);

			// Add non-null variables to grid
			if (motorChartDetails != null)
			{
				setMotorChartDetailsRow(form.dyngrdMotorArea().getRows().newRow(), motorChartDetails);
			}
		}
	}

	private void setMotorChartDetailsRow(DynamicGridRow row, MotorChartAreaDetailVo motorChartDetails)
	{
		if (motorChartDetails == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not populate a null row with value");

		// Set the row (setup the cells and cells values)
		DynamicGridColumn column;
		DynamicGridCell cell;

		// Create the first cell (stage)
		column = form.dyngrdMotorArea().getColumns().getByIdentifier(COL_MOTOR_AREA_DESCRIPTION);
		cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue(motorChartDetails.getMotorAreaDescription());

		// Create the second cell
		column = form.dyngrdMotorArea().getColumns().getByIdentifier(COL_MOTOR_AREA_UPPER_LIMB);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(motorChartDetails.getIsUpperLimb());

		// Create the third cell
		column = form.dyngrdMotorArea().getColumns().getByIdentifier(COL_MOTOR_AREA_LOWER_LIMB);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(motorChartDetails.getIsLowerLimb());
		
		//Create the fourth cell
		column = form.dyngrdMotorArea().getColumns().getByIdentifier(COL_MOTOR_AREA_ACTIVE);
		cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(motorChartDetails.getIsActive());

		// Set row value
		row.setValue(motorChartDetails);
	}
	
	
	public class MotorChartComparator implements Comparator
	{
		public int compare(Object arg0, Object arg1)
		{
			if (arg0 instanceof MotorChartAreaDetailVo && arg1 instanceof MotorChartAreaDetailVo)
			{
				return (((MotorChartAreaDetailVo) arg0).getOrderNo().compareTo(((MotorChartAreaDetailVo) arg1).getOrderNo()));
			}
			
			return 0;
		}
		
	}
}
