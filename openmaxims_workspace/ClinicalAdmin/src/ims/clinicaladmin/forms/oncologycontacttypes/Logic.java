//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.clinicaladmin.forms.oncologycontacttypes;

import ims.clinicaladmin.forms.oncologycontacttypes.GenForm.GroupFilterEnumeration;
import ims.clinicaladmin.forms.oncologycontacttypes.GenForm.ctnDetailsContainer.Group1Enumeration;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.oncology.vo.ContactTypesByDisciplineItemRefVo;
import ims.oncology.vo.ContactTypesByDisciplineItemVo;
import ims.oncology.vo.ContactTypesByDisciplineItemVoCollection;
import ims.oncology.vo.ContactTypesByDisciplineVo;
import ims.oncology.vo.ContactTypesByDisciplineVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open(false);
	}
	
	private void initialise() 
	{
		clearInstanceControls();
		
		form.GroupFilter().setValue(GroupFilterEnumeration.rdoFilterActive);

		updateContextMenuState();
	}
	
	@Override
	protected void onTreListTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		selectionChanged();
	}
	
	private void selectionChanged() 
	{
		findRootNode();

		if (form.treList().getSelectedNode() != null
			&& form.treList().getSelectedNode().getValue() instanceof ContactTypesByDisciplineItemVo)
		{
			populateInstanceControls((ContactTypesByDisciplineItemVo) form.treList().getSelectedNode().getValue());
			form.getLocalContext().setSelectedItem((ContactTypesByDisciplineItemVo) form.treList().getSelectedNode().getValue());
		}
		else
		{
			clearInstanceControls();
			form.getLocalContext().setSelectedItem(null);
		}
		updateContextMenuState();
	}
	
	private void findRootNode()
	{
		TreeNode treeNode = null;
		treeNode = form.treList().getSelectedNode(); 
		if (treeNode != null)
		{
			while ( treeNode.getValue() instanceof ContactTypesByDisciplineItemVo)
			{
				treeNode = treeNode.getParent();
			}
		}

		form.getLocalContext().setSelectedRecord(treeNode != null ? ((ContactTypesByDisciplineVo)treeNode.getValue()) : null);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSave();
	}
	
	private void doSave() throws PresentationLogicException 
	{
		if (save())
			reOpen();
	}

	private void reOpen() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open(true);
		if (form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoFilterActive)
			&&form.getLocalContext().getSelectedItem().getActiveIsNotNull()
			&& ! form.getLocalContext().getSelectedItem().getActive())
			clearInstanceControls();
		else
		{
			populateInstanceControls(form.getLocalContext().getSelectedItem());
			form.treList().setValue(form.getLocalContext().getSelectedItem());
		}
		
		updateContextMenuState();
	}

	private void populateInstanceControls(ContactTypesByDisciplineItemVo selectedRecord) 
	{
		if (selectedRecord != null)
		{
			form.ctnDetails().cmbDiscipline().setValue(form.getLocalContext().getSelectedRecord().getDiscipline());
			form.ctnDetails().txtContactType().setValue(selectedRecord.getContactType());
			form.ctnDetails().Group1().setValue(selectedRecord.getActive() ? Group1Enumeration.rdoActive : Group1Enumeration.rdoInActive);
			if (selectedRecord.getParentIsNotNull())
			{
				form.ctnDetails().lblParent().setValue(form.treList().getNodeByValue(selectedRecord.getParent()).getText());
				form.getLocalContext().setParentNode(form.treList().getNodeByValue(selectedRecord.getParent()));
			}
			else
				form.ctnDetails().lblParent().setValue(form.treList().getNodeByValue(selectedRecord) != null 
					&& form.treList().getNodeByValue(selectedRecord) != null
					&& form.treList().getNodeByValue(selectedRecord).getParent() != null ? form.treList().getNodeByValue(selectedRecord).getParent().getText() : "");
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		selectionChanged();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.NEW_DISCP_TYPES :
			newDisciplineAndContactType();
			break;
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.NEW_CHILD :
			newContact();
			break;
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.NEW_CHILD_CONTACT :
			newChildContact();
			break;
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.EDIT_CONTACT :
			editContact();
			break;
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.MOVE_UP :
			moveUp();
			break;
		case GenForm.ContextMenus.OncologyNamespace.OncologyContactTypes.MOVE_DOWN :
			moveDown();
			break;
		default :
			break;
		}

	}
	
	private void updateContextMenuState()
	{
		boolean bView = form.getMode().equals(FormMode.VIEW);
		boolean bRootNode = false;
		boolean bChildNode = false;
		
		if (form.treList().getSelectedNode() == null)
		{
			form.getContextMenus().Oncology.hideAllOncologyContactTypesMenuItems();

			form.getContextMenus().Oncology.getOncologyContactTypesNEW_DISCP_TYPESItem().setVisible(bView);
			return;
		}
		if (form.treList().getSelectedNode().getValue() instanceof ContactTypesByDisciplineVo)
			bRootNode = true;
		
		if (form.treList().getSelectedNode().getValue() instanceof ContactTypesByDisciplineItemVo)
			bChildNode = true;
		
		form.getContextMenus().Oncology.getOncologyContactTypesEDIT_CONTACTItem().setVisible(bView && form.treList().getSelectedNode() != null && !bRootNode);
		form.getContextMenus().Oncology.getOncologyContactTypesNEW_CHILD_CONTACTItem().setVisible(bView && form.treList().getSelectedNode() != null && !bRootNode);
		form.getContextMenus().Oncology.getOncologyContactTypesNEW_CHILDItem().setVisible(bView && form.treList().getSelectedNode() != null && !bChildNode);
		form.getContextMenus().Oncology.getOncologyContactTypesMOVE_UPItem().setVisible(bView && form.treList().canMoveCurrentUp() && !bRootNode);
		form.getContextMenus().Oncology.getOncologyContactTypesMOVE_DOWNItem().setVisible(bView && form.treList().canMoveCurrentDown() && !bRootNode);
	}

	private void newContact()
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);

		clearInstanceControls();
		form.ctnDetails().Group1().setValue(Group1Enumeration.rdoActive);

		form.ctnDetails().cmbDiscipline().setValue(form.getLocalContext().getSelectedRecord().getDiscipline());
		form.ctnDetails().cmbDiscipline().setEnabled(false);
		
		if (form.treList().getSelectedNode().getValue() != null && form.treList().getSelectedNode().getValue() instanceof ContactTypesByDisciplineItemVo)
			form.ctnDetails().lblParent().setValue(form.treList().getSelectedNode().getParent().getText());
		else
			form.ctnDetails().lblParent().setValue(form.treList().getSelectedNode().getText());
			
		form.getLocalContext().setParentNode(form.treList().getSelectedNode().getParent());
		form.getLocalContext().setSelectedItem(null);
	}
	
	private void newChildContact() 
	{
		//wdev-11273
		if (form.getLocalContext().getSelectedItemIsNotNull() && form.getLocalContext().getSelectedItem().getActiveIsNotNull() && !form.getLocalContext().getSelectedItem().getActive())
		{
			engine.showErrors(new String[]{"You cannot add a child to an inactive Contact Type."});
			return;
		}
		//
		
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);

		clearInstanceControls();
		form.ctnDetails().Group1().setValue(Group1Enumeration.rdoActive);

		form.ctnDetails().cmbDiscipline().setValue(form.getLocalContext().getSelectedRecord().getDiscipline());
		form.ctnDetails().cmbDiscipline().setEnabled(false);
		
		form.ctnDetails().lblParent().setValue(form.treList().getSelectedNode().getText());
		form.getLocalContext().setParentNode(form.treList().getSelectedNode());
		form.getLocalContext().setSelectedItem(null);
	}
	
	private void editContact() 
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);

		form.getLocalContext().setParentNode(null);
		populateInstanceControls((ContactTypesByDisciplineItemVo) form.treList().getSelectedNode().getValue());
		form.ctnDetails().cmbDiscipline().setEnabled(false);
		form.getLocalContext().setSelectedItem((ContactTypesByDisciplineItemVo) form.treList().getSelectedNode().getValue());
	}
	
	private void moveUp() throws PresentationLogicException 
	{
		if (form.treList().canMoveCurrentUp())
		{
			form.treList().moveUp();
			reSaveOrder();
			clearInstanceControls();
			updateContextMenuState();
		}
	}

	private void reSaveOrder() throws PresentationLogicException 
	{
		ContactTypesByDisciplineVo voContact = form.getLocalContext().getSelectedRecord();
		voContact.setDiscipline(form.ctnDetails().cmbDiscipline().getValue());
		
		//ContactTypesByDisciplineItemVoCollection voColl = new ContactTypesByDisciplineItemVoCollection();
		ContactTypesByDisciplineItemVoCollection voColl = voContact.getContactTypes(); //wdev-15707
		ContactTypesByDisciplineItemVoCollection voColl1 = new ContactTypesByDisciplineItemVoCollection(); //wdev-15707
		TreeNode treeBranch = form.treList().getNodeByValue(voContact);
		/*for (int i = 0 ; i < treeBranch.getNodes().size() ; i++)
		{
			addChildNodes(voColl, treeBranch.getNodes().get(i));
		}*/
		//wdev-15707
		for (int i = 0 ; i < treeBranch.getNodes().size() ; i++)
		{
			addChildNodes(voColl1, treeBranch.getNodes().get(i));
		}
		for(int j = 0; j < voColl1.size();j++)
		{
			if( voColl.contains(voColl1.get(j)))
				voColl.remove(voColl1.get(j));
		}
		for(int k = 0; k < voColl1.size();k++)
		{
			
			voColl.add(voColl1.get(k));
		}
		voContact.setContactTypes(voColl);
		
		//validate Vo
		String[] arrErrors = voContact.validate(validateUIRules());
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveContactTypeByDiscipline(voContact));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		} 
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
		}
		open(true);
		return;
	}

	private void addChildNodes(ContactTypesByDisciplineItemVoCollection voColl, TreeNode node) 
	{
		voColl.add((ContactTypesByDisciplineItemVo)node.getValue());
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				addChildNodes(voColl, node.getNodes().get(i));
			}
		}
	}

	private void moveDown() throws PresentationLogicException 
	{
		if (form.treList().canMoveCurrentDown())
		{
			form.treList().moveDown();
			reSaveOrder();
			clearInstanceControls();
			updateContextMenuState();
		}
	}
	
	private void newDisciplineAndContactType() 
	{
		form.setMode(FormMode.EDIT);
		form.ctnDetails().setCollapsed(false);

		form.ctnDetails().Group1().setValue(Group1Enumeration.rdoActive);
		ContactTypesByDisciplineVo voContact = new ContactTypesByDisciplineVo();
		form.getLocalContext().setSelectedRecord(voContact);
		form.getLocalContext().setSelectedItem(null);
		form.getLocalContext().setParentNode(null);
		clearInstanceControls();
		form.ctnDetails().Group1().setValue(Group1Enumeration.rdoActive);
		loadHcpDisciplines();
	}
	
	private void loadHcpDisciplines()
	{
		form.ctnDetails().cmbDiscipline().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() != null)
				form.ctnDetails().cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}


	public void open(boolean bExpand) 
	{
		ContactTypesByDisciplineVoCollection voColl = domain.listContactTypesByDiscipline();
		
		form.treList().clear();
		for ( int  i = 0 ; voColl != null &&  i < voColl.size() ; i++)
		{
			if (voColl.get(i).getDisciplineIsNotNull()
				&& voColl.get(i).getDiscipline().isActive())
			{
				TreeNode parentNode = form.treList().getNodes().add(voColl.get(i), voColl.get(i).getDiscipline().getText());
				
				for (int j = 0 ; voColl.get(i).getContactTypesIsNotNull() && j < voColl.get(i).getContactTypes().size() ; j++)
				{
					if ( (form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoFilterActive)
						&& voColl.get(i).getContactTypes().get(j).getActiveIsNotNull()
						&& voColl.get(i).getContactTypes().get(j).getActive())
						|| (form.GroupFilter().getValue().equals(GroupFilterEnumeration.rdoFilterAll)) )
						addChildNode(parentNode, voColl.get(i).getContactTypes().get(j), bExpand);
				}
				parentNode.setExpanded(bExpand);
			}
		}
	}
	
	private TreeNode addChildNode(TreeNode parentNode, ContactTypesByDisciplineItemVo vo, boolean bExpand) 
	{
		TreeNode childNode = null;
		if (vo.getParentIsNotNull())
		{
			if (form.treList().getNodes().getNodeByValue(vo.getParent()) != null)
				childNode = form.treList().getNodes().getNodeByValue(vo.getParent()).getNodes().add(vo, vo.getContactType());
		}
		else
			childNode = parentNode.getNodes().add(vo, vo.getContactType());
		
		if (childNode == null)
			return null;
		
		if( vo.getActive().equals(Boolean.FALSE))
			childNode.setTextColor(Color.Red);
		
		childNode.setExpanded(bExpand);

		return childNode;
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().cmbDiscipline().setValue(null);
		form.ctnDetails().txtContactType().setValue(null);
		form.ctnDetails().Group1().setValue(null);
		form.ctnDetails().lblParent().setValue(null);
	}
	
	private boolean validateUI() 
	{
		StringBuffer screenErrors = new StringBuffer();
		
		if(form.ctnDetails().cmbDiscipline().getValue() == null)
			screenErrors.append("Please enter a Discipline.");

		if(form.ctnDetails().txtContactType().getValue() == null)
		{
			if (screenErrors.length() > 0)
				screenErrors.append("\n\n");
			
			screenErrors.append("Please enter a value for Contact Type.");
		}
		
		if (form.getLocalContext().getSelectedRecord().getID_ContactTypesByDiscipline() == null)
		{
			for(int i = 0 ; form.ctnDetails().cmbDiscipline().getValue() != null && i < form.treList().getNodes().size() ; i++)
			{
				if (form.treList().getNodes().get(i).getValue() instanceof ContactTypesByDisciplineVo)
				{
					if ( ((ContactTypesByDisciplineVo)form.treList().getNodes().get(i).getValue()).getDiscipline().equals(form.ctnDetails().cmbDiscipline().getValue()))
					{
						if (screenErrors.length() > 0)
							screenErrors.append("\n\n");
						
						screenErrors.append("The Discipline type : " + form.ctnDetails().cmbDiscipline().getValue().getText() + " is already configured.");
					}
				}
			}
		}
		if (form.getLocalContext().getSelectedItemIsNotNull()
			&& form.getLocalContext().getSelectedItem().getID_ContactTypesByDisciplineItemIsNotNull())
		{
			form.getLocalContext().setActiveNodeFound(false);
						
			if (form.getLocalContext().getSelectedItem().getActiveIsNotNull()
				&& form.ctnDetails().Group1().getValue().equals(Group1Enumeration.rdoInActive)
				&& form.getLocalContext().getSelectedItem().getActive())
			{
				//Node has been marked as inactive, check child nodes to see they are all Inactive too.
				TreeNode selectedTreeNode = form.treList().getNodeByValue(form.getLocalContext().getSelectedItem());
				for (int i = 0 ; i < selectedTreeNode.getNodes().size() ; i++)
				{
					findActiveNodes(selectedTreeNode.getNodes().get(i));
				}
			}
			
			if (form.getLocalContext().getActiveNodeFoundIsNotNull()
				&& form.getLocalContext().getActiveNodeFound()	)
			{
				if (screenErrors.length() > 0)
					screenErrors.append("\n\n");
				
				screenErrors.append("You cannot make this Contact Type Inactive because one of its child Types is active."); //WDEV-17674
			}
			//wdev-11273
			
			if(form.getLocalContext().getSelectedItem() instanceof ContactTypesByDisciplineItemVo)
			{
				if (form.getLocalContext().getSelectedItem().getActiveIsNotNull()&& form.ctnDetails().Group1().getValue().equals(Group1Enumeration.rdoActive)&& !form.getLocalContext().getSelectedItem().getActive())
				{
					TreeNode selectedTreeNode = form.treList().getNodeByValue(form.getLocalContext().getSelectedItem());
					if(selectedTreeNode.getParent() != null && selectedTreeNode.getParent().getValue() instanceof ContactTypesByDisciplineItemVo  && ((ContactTypesByDisciplineItemVo)selectedTreeNode.getParent().getValue()).getActiveIsNotNull() && !((ContactTypesByDisciplineItemVo)selectedTreeNode.getParent().getValue()).getActive())
					{
						if (screenErrors.length() > 0)
						screenErrors.append("\n\n");
					
						screenErrors.append("You cannot make this Contact Type Active because its parent Contact Type is inactive.");
					}
				}
			}
			//------------
			
		}
		if(screenErrors.length()> 0)
		{
			engine.showMessage(screenErrors.toString(), "Errors");
			return false;
		}
		return true;
	}

	private void findActiveNodes(TreeNode node) 
	{
		if ( ((ContactTypesByDisciplineItemVo)node.getValue()).getActiveIsNotNull()
			&& ((ContactTypesByDisciplineItemVo)node.getValue()).getActive())	
			form.getLocalContext().setActiveNodeFound(true);
		
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				findActiveNodes(node.getNodes().get(i));
			}
		}
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ContactTypesByDisciplineVo voContact = form.getLocalContext().getSelectedRecord();

		if ( !validateUI())
			return false;
		
		voContact.setDiscipline(form.ctnDetails().cmbDiscipline().getValue());
		
		ContactTypesByDisciplineItemVo voContactItem = populateInstanceData();
		if (voContact.getContactTypes() == null)
			voContact.setContactTypes(new ContactTypesByDisciplineItemVoCollection());
		
		//wdev-13120
		if(voContact.getContactTypes().contains(voContactItem))
		{
			int index = voContact.getContactTypes().indexOf(voContactItem);
			populateItemFromCollection(voContact.getContactTypes().get(index), voContactItem);
		}
		else
			voContact.getContactTypes().add(voContactItem);
		
		form.getLocalContext().setSelectedItem(voContactItem);
		//validate Vo
		String[] arrErrors = voContact.validate();
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			updateContextMenuState();
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveContactTypeByDiscipline(voContact));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(true);
			updateContextMenuState();
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			updateContextMenuState();
			return false;
		}

		updateContextMenuState();
		return true;
	}
	private void populateItemFromCollection(ContactTypesByDisciplineItemVo dest, ContactTypesByDisciplineItemVo src)
	{
		if(dest == null || src == null )
			return;
		dest.setContactType(src.getContactType());
		dest.setActive(src.getActive());
		dest.setParent(src.getParent());
		
	}
	
	private ContactTypesByDisciplineItemVo populateInstanceData() 
	{
		ContactTypesByDisciplineItemVo voItem = form.getLocalContext().getSelectedItem();
		if (voItem == null)
			voItem = new ContactTypesByDisciplineItemVo();
		
		voItem.setContactType(form.ctnDetails().txtContactType().getValue());
		voItem.setActive(form.ctnDetails().Group1().getValue().equals(Group1Enumeration.rdoActive) ? Boolean.TRUE : Boolean.FALSE);
		if (form.getLocalContext().getParentNodeIsNotNull()
			&& form.getLocalContext().getParentNode().getValue() instanceof ContactTypesByDisciplineItemVo)
			voItem.setParent((ContactTypesByDisciplineItemRefVo)form.getLocalContext().getParentNode().getValue());
		
		return voItem;
	}
	
	@Override
	protected void onFormModeChanged() 
	{
		formModeChanged();
	}
	
	private void formModeChanged()
	{
		form.ctnDetails().cmbDiscipline().setEnabled(false);
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.ctnDetails().cmbDiscipline().setEnabled(true);
		}
	}
	
	public void newInstance() throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}

	public void updateInstance() {
		// TODO Auto-generated method stub
		
	}

	public void updateControlsState() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onRadioButtonGroupFilterValueChanged() throws PresentationLogicException 
	{
		clearInstanceControls();
		open(true);
		updateContextMenuState();
	}

	public void open() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

}
