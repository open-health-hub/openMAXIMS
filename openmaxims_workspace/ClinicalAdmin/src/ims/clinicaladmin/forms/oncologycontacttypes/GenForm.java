//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.forms.oncologycontacttypes;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbDisciplineComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.HcpDisType getValue()
			{
				return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.HcpDisType value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class Group1RadioButton extends RadioButtonBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
			{
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 224, 96, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Inactive", startTabIndex.intValue() + 7);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 104, 96, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Active", startTabIndex.intValue() + 6);
			}
			public void setText(Group1Enumeration option, String value)
			{
				if(option != null && option.id >= 0 && value != null)
					control.setText(option.id, value);
			}
			public Group1Enumeration getValue()
			{
				switch (super.control.getValue())
				{
					case -1: return Group1Enumeration.None;
					case 0: return Group1Enumeration.rdoInActive;
					case 1: return Group1Enumeration.rdoActive;
				}
				return null;
			}
			public void setValue(Group1Enumeration value)
			{
				if(value != null)
					super.control.setValue(value.id);
				else
					super.control.setValue(Group1Enumeration.None.id);
			}
			public boolean isEnabled(Group1Enumeration option)
			{
				return super.control.isEnabled(option.id);
			}
			public void setEnabled(Group1Enumeration option, boolean value)
			{
				super.control.setEnabled(option.id, value);
			}
			public boolean isVisible(Group1Enumeration option)
			{
				return super.control.isVisible(option.id);
			}
			public void setVisible(Group1Enumeration option, boolean value)
			{
				super.control.setVisible(option.id, value);
			}
			public void setVisible(boolean value)
			{
				super.control.setVisible(value);
			}
			public void setEnabled(boolean value)
			{
				super.control.setEnabled(value);
			}
		}
		public static class Group1Enumeration implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static Group1Enumeration None = new Group1Enumeration(-1);
			public static Group1Enumeration rdoInActive = new Group1Enumeration(0);
			public static Group1Enumeration rdoActive = new Group1Enumeration(1);
			private Group1Enumeration(int id)
			{
				this.id = id;
			}
			public boolean equals(Object o)
			{
				return this.id == ((Group1Enumeration)o).id;
			}
			private int id;
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 104, 128, 25, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lbl5", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Parent :", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active :", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact Type :", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discipline :", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 104, 56, 664, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbDisciplineTemp);
			cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
			super.addComboBox(cmbDiscipline);
	
			// RadioButton Controls
			RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
			super.addControl(tmpGroup1);
			Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
			Group1.setContext(startTabIndex, designSize, runtimeSize);
			super.addRadioButton(Group1);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lblParent()
		{
			return (Label)super.getControl(0);
		}
		public TextBox txtContactType()
		{
			return (TextBox)super.getControl(5);
		}
		public cmbDisciplineComboBox cmbDiscipline()
		{
			return (cmbDisciplineComboBox)super.getComboBox(0);
		}
		public Group1RadioButton Group1()
		{
			return (Group1RadioButton)super.getRadioButton(0);
		}
	}

	public static class GroupFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 784, 8, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "All", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 712, 8, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Active", startTabIndex.intValue() + 1);
		}
		public void setText(GroupFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupFilterEnumeration.None;
				case 0: return GroupFilterEnumeration.rdoFilterAll;
				case 1: return GroupFilterEnumeration.rdoFilterActive;
			}
			return null;
		}
		public void setValue(GroupFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupFilterEnumeration.None.id);
		}
		public boolean isEnabled(GroupFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupFilterEnumeration None = new GroupFilterEnumeration(-1);
		public static GroupFilterEnumeration rdoFilterAll = new GroupFilterEnumeration(0);
		public static GroupFilterEnumeration rdoFilterActive = new GroupFilterEnumeration(1);
		private GroupFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Oncology.contextMenuOncologyContactTypes = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Oncology.contextMenuOncologyContactTypesNEW_DISCP_TYPESItem = factory.createMenuItem(startControlID.intValue() + 1, "New Discipline and Contact Type", true, false, new Integer(102332), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530001)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesNEW_DISCP_TYPESItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesNEW_CHILDItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Contact Type", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530002)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesNEW_CHILDItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Child Contact Type", true, false, new Integer(102222), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530003)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 4, "Move Contact Up", true, false, new Integer(102114), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530004)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesMOVE_UPItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Contact Down", true, false, new Integer(102108), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530005)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesMOVE_DOWNItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesEDIT_CONTACTItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Contact Type", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530006)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesEDIT_CONTACTItem);
		contextMenus.Oncology.contextMenuOncologyContactTypesEDIT_DISCIPLINEItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit Discipline", true, false, new Integer(102333), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3530007)))
			contextMenus.Oncology.contextMenuOncologyContactTypes.add(contextMenus.Oncology.contextMenuOncologyContactTypesEDIT_DISCIPLINEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuOncologyContactTypes);


		// Container Clasess
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 816, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 168);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 756, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Tree Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 376, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.Oncology.contextMenuOncologyContactTypes, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// RadioButton Controls
		RadioButton tmpGroupFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
		super.addControl(tmpGroupFilter);
		GroupFilterRadioButton GroupFilter = (GroupFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterRadioButton.class, tmpGroupFilter);
		GroupFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupFilter);
	}


	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(1);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(2);
	}
	public TreeView treList()
	{
		return (TreeView)super.getControl(3);
	}
	public GroupFilterRadioButton GroupFilter()
	{
		return (GroupFilterRadioButton)super.getRadioButton(0);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_SelectedItem = new ims.framework.ContextVariable("SelectedItem", prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedItem_" + componentIdentifier + "");
			cxl_ParentNode = new ims.framework.ContextVariable("ParentNode", prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__ParentNode_" + componentIdentifier + "");
			cxl_ActiveNodeFound = new ims.framework.ContextVariable("ActiveNodeFound", prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__ActiveNodeFound_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.ContactTypesByDisciplineVo getSelectedRecord()
		{
			return (ims.oncology.vo.ContactTypesByDisciplineVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.oncology.vo.ContactTypesByDisciplineVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getSelectedItemIsNotNull()
		{
			return !cxl_SelectedItem.getValueIsNull(context);
		}
		public ims.oncology.vo.ContactTypesByDisciplineItemVo getSelectedItem()
		{
			return (ims.oncology.vo.ContactTypesByDisciplineItemVo)cxl_SelectedItem.getValue(context);
		}
		public void setSelectedItem(ims.oncology.vo.ContactTypesByDisciplineItemVo value)
		{
			cxl_SelectedItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedItem = null;
		public boolean getParentNodeIsNotNull()
		{
			return !cxl_ParentNode.getValueIsNull(context);
		}
		public ims.framework.controls.TreeNode getParentNode()
		{
			return (ims.framework.controls.TreeNode)cxl_ParentNode.getValue(context);
		}
		public void setParentNode(ims.framework.controls.TreeNode value)
		{
			cxl_ParentNode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentNode = null;
		public boolean getActiveNodeFoundIsNotNull()
		{
			return !cxl_ActiveNodeFound.getValueIsNull(context);
		}
		public Boolean getActiveNodeFound()
		{
			return (Boolean)cxl_ActiveNodeFound.getValue(context);
		}
		public void setActiveNodeFound(Boolean value)
		{
			cxl_ActiveNodeFound.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveNodeFound = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class OncologyContactTypes implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW_DISCP_TYPES = 1;
				public static final int NEW_CHILD = 2;
				public static final int NEW_CHILD_CONTACT = 3;
				public static final int MOVE_UP = 4;
				public static final int MOVE_DOWN = 5;
				public static final int EDIT_CONTACT = 6;
				public static final int EDIT_DISCIPLINE = 7;
			}
			public void disableAllOncologyContactTypesMenuItems()
			{
				this.contextMenuOncologyContactTypesNEW_DISCP_TYPESItem.setEnabled(false);
				this.contextMenuOncologyContactTypesNEW_CHILDItem.setEnabled(false);
				this.contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem.setEnabled(false);
				this.contextMenuOncologyContactTypesMOVE_UPItem.setEnabled(false);
				this.contextMenuOncologyContactTypesMOVE_DOWNItem.setEnabled(false);
				this.contextMenuOncologyContactTypesEDIT_CONTACTItem.setEnabled(false);
				this.contextMenuOncologyContactTypesEDIT_DISCIPLINEItem.setEnabled(false);
			}
			public void hideAllOncologyContactTypesMenuItems()
			{
				this.contextMenuOncologyContactTypesNEW_DISCP_TYPESItem.setVisible(false);
				this.contextMenuOncologyContactTypesNEW_CHILDItem.setVisible(false);
				this.contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem.setVisible(false);
				this.contextMenuOncologyContactTypesMOVE_UPItem.setVisible(false);
				this.contextMenuOncologyContactTypesMOVE_DOWNItem.setVisible(false);
				this.contextMenuOncologyContactTypesEDIT_CONTACTItem.setVisible(false);
				this.contextMenuOncologyContactTypesEDIT_DISCIPLINEItem.setVisible(false);
			}
			private Menu contextMenuOncologyContactTypes;
			public ReadOnlyMenuItem getOncologyContactTypesNEW_DISCP_TYPESItem()
			{
				return this.contextMenuOncologyContactTypesNEW_DISCP_TYPESItem;
			}
			private MenuItem contextMenuOncologyContactTypesNEW_DISCP_TYPESItem;
			public ReadOnlyMenuItem getOncologyContactTypesNEW_CHILDItem()
			{
				return this.contextMenuOncologyContactTypesNEW_CHILDItem;
			}
			private MenuItem contextMenuOncologyContactTypesNEW_CHILDItem;
			public ReadOnlyMenuItem getOncologyContactTypesNEW_CHILD_CONTACTItem()
			{
				return this.contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem;
			}
			private MenuItem contextMenuOncologyContactTypesNEW_CHILD_CONTACTItem;
			public ReadOnlyMenuItem getOncologyContactTypesMOVE_UPItem()
			{
				return this.contextMenuOncologyContactTypesMOVE_UPItem;
			}
			private MenuItem contextMenuOncologyContactTypesMOVE_UPItem;
			public ReadOnlyMenuItem getOncologyContactTypesMOVE_DOWNItem()
			{
				return this.contextMenuOncologyContactTypesMOVE_DOWNItem;
			}
			private MenuItem contextMenuOncologyContactTypesMOVE_DOWNItem;
			public ReadOnlyMenuItem getOncologyContactTypesEDIT_CONTACTItem()
			{
				return this.contextMenuOncologyContactTypesEDIT_CONTACTItem;
			}
			private MenuItem contextMenuOncologyContactTypesEDIT_CONTACTItem;
			public ReadOnlyMenuItem getOncologyContactTypesEDIT_DISCIPLINEItem()
			{
				return this.contextMenuOncologyContactTypesEDIT_DISCIPLINEItem;
			}
			private MenuItem contextMenuOncologyContactTypesEDIT_DISCIPLINEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100039-ID", "ID_ContactTypesByDiscipline");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100039-DISCIPLINE", "Discipline");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1074100040-ID", "ID_ContactTypesByDisciplineItem");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1074100040-CONTACTTYPE", "ContactType");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1074100040-ACTIVE", "Active");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_ClinicalAdmin.OncologyContactTypes.__internal_x_context__SelectedItem_" + componentIdentifier, "BO-1074100040-PARENT", "Parent");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
