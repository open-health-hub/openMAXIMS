//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.lookups.ContactType;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.generalmedical.vo.InvPlanVo;
import ims.generalmedical.vo.InvPlanVoCollection;
import ims.generalmedical.vo.domain.InvPlanVoAssembler;
import ims.domain.DomainFactory;
import ims.medical.domain.objects.InvAndPlan;
import ims.domain.exceptions.DomainRuntimeException;

public class MedInvPlanImpl extends DomainImpl implements ims.spinalinjuries.domain.MedInvPlan, ims.domain.impl.Transactional
{
	public InvPlanVo saveInvPlanVo(InvPlanVo voInvPlan, ClinicalContactShortVo contact) throws StaleObjectException 
	{
		// Ensure the value object has been validated
		if (!voInvPlan.isValidated())
			throw new DomainRuntimeException("Investigations Planned Details has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		//wdev-10674
		if(voInvPlan != null && voInvPlan.getID_InvAndPlan() == null && voInvPlan.getClinicalContactIsNotNull())
		{
			StringBuffer hql = new StringBuffer();
			hql.append("from InvAndPlan as i1_1 where i1_1.clinicalContact.id = :CCID and i1_1.isRIE is null");   

			java.util.List list = getDomainFactory().find(hql.toString(), "CCID",voInvPlan.getClinicalContact().getID_ClinicalContact());
			if (list == null || list.size() > 0)
				throw new StaleObjectException(null);
		}
		//------------
		ClinicalContact doClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, contact.getID_ClinicalContact());
		
		InvAndPlan doInvAndPlan = InvPlanVoAssembler.extractInvAndPlan(factory, voInvPlan);
		if(doInvAndPlan.getClinicalContact()==null)
			doInvAndPlan.setClinicalContact(doClinicalContact);
		try {
			factory.save(doInvAndPlan);
		}
		catch(StaleObjectException e)				//wdev-10674
		{
			throw new StaleObjectException(null);
		}
		catch (DomainException e) 
		{
			throw new DomainRuntimeException("Error saving Admission Injury Details" + e.getMessage(),e);	
		} 	
			
		return InvPlanVoAssembler.create(doInvAndPlan);
		
	}

	public InvPlanVo getInvPlanVoByClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		DomainFactory factory = getDomainFactory();	
		
		InvPlanVoCollection voCollInvPlan = new InvPlanVoCollection();
		
		String hql = " from InvAndPlan invAndPlan "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		condStr.append(andStr + " invAndPlan.clinicalContact.id = :id_ClinicalContact"); 
		markers.add("id_ClinicalContact");
		values.add(voClinicalContactRef.getID_ClinicalContact());
		andStr = " and ";
				
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		voCollInvPlan = InvPlanVoAssembler.createInvPlanVoCollectionFromInvAndPlan(factory.find(hql, markers, values));
		if(voCollInvPlan.size()>0)
			return voCollInvPlan.get(0);
		else
			return null;
	}

	

	public InvPlanVo getInvPlanByCareContext(CareContextRefVo voCareContextRef)
	{
		if(voCareContextRef == null)
			throw new CodingRuntimeException("Care Context not Provided");
		
		DomainFactory factory = getDomainFactory();
	
		List plan =   factory.find(" from InvAndPlan plan where plan.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare)",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});

		InvPlanVoCollection voCollInvPlan = InvPlanVoAssembler.createInvPlanVoCollectionFromInvAndPlan(plan);
		
		if(voCollInvPlan.size()>0)
			return voCollInvPlan.get(0);
		else 
			return null;
	}
	
}
