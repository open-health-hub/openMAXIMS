//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50107.1111)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.clinicaladmin.domain.Vertebrallevels;
import ims.clinicaladmin.domain.impl.VertebrallevelsImpl;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.NeuroMotorExaminationVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsVo;
import ims.generalmedical.vo.NeuroMotorFindingsVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.NeuroMotorFindingsShortVoAssembler;
import ims.generalmedical.vo.domain.NeuroMotorFindingsVoAssembler;
import ims.medical.domain.objects.NeuExamMotor;


public class MedNeuroMotorImpl extends DomainImpl implements ims.spinalinjuries.domain.MedNeuroMotor, ims.domain.impl.Transactional
{
	/**
	* Gets the NeuroMotorExamination record for the current Episode
	*/
	public NeuroMotorExaminationVo getNeuroMotorRecord(ClinicalContactShortVo contact, NeuroMotorFindingsShortVo voMotorFindingsShort)
	{
		if(contact == null)
			throw new CodingRuntimeException("No ClinicalContact available");
		
		DomainFactory factory = getDomainFactory();

		NeuroMotorExaminationVo voNeuroMotorExamination = new NeuroMotorExaminationVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(contact != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(contact.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Motor");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		if(collMedicalProbOnAdmis.size()>0)
			voNeuroMotorExamination.setProblem(collMedicalProbOnAdmis.get(0));
		
		if (voMotorFindingsShort != null)
		{
			voNeuroMotorExamination.setNeuroMotor(get(voMotorFindingsShort));
			
			return voNeuroMotorExamination;
		}
		else
		{
	
			NeuroMotorFindingsVoCollection collNeuroMotorFindings = new NeuroMotorFindingsVoCollection();
			hql = " from NeuExamMotor neuExamMotor"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(contact.getID_ClinicalContactIsNotNull())
			{
				condStr.append(andStr + " neuExamMotor.clinicalContact.id = :id_ClinicalContact"); 
				markers.add("id_ClinicalContact");
				values.add(contact.getID_ClinicalContact());
				andStr = " and ";
			}	
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(factory.find(hql, markers, values));
			
			if(collNeuroMotorFindings.size()>0)
			{
				collNeuroMotorFindings.sort(SortOrder.DESCENDING);
				voNeuroMotorExamination.setNeuroMotor(collNeuroMotorFindings.get(0));
			}
		}
		
		return voNeuroMotorExamination;
	}
	private NeuroMotorFindingsVo get(NeuroMotorFindingsShortVo record)
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid need neuro - motor record to get");

		return NeuroMotorFindingsVoAssembler.create((NeuExamMotor) getDomainFactory().getDomainObject(NeuExamMotor.class,record.getID_NeuExamMotor()));
	}
	//wdev-13419
	private NeuroMotorFindingsVoCollection getCollection(NeuroMotorFindingsShortVo record)
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid need neuro - motor record to get");
		DomainFactory factory = getDomainFactory();

		
		
		String hql ; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		NeuroMotorFindingsVoCollection collNeuroMotorFindings = new NeuroMotorFindingsVoCollection();
		hql = " from NeuExamMotor neuExamMotor"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(record.getID_NeuExamMotorIsNotNull())
		{
			condStr.append(andStr + " neuExamMotor.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(record.getID_NeuExamMotor());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		return collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(factory.find(hql, markers, values));
		
	}
	

	/**
	* Saves the given NeuroMotor Record to the database
	*/
	public NeuroMotorExaminationVo saveNeuroMotorRecord(NeuroMotorExaminationVo exam) throws StaleObjectException
	{
		if (!exam.isValidated())
			throw new DomainRuntimeException("Motor Exam has not been validated");

		DomainFactory factory = getDomainFactory();
		
		if(exam.getNeuroMotorIsNotNull())
		{
			if (exam.getNeuroMotor().getID_NeuExamMotor() == null && exam.getNeuroMotor().getClinicalContactIsNotNull())//Inserting a record
			{
				StringBuffer hql = new StringBuffer();
				hql.append("from NeuExamMotor as n1_1 left join n1_1.clinicalContact as c1_1	where c1_1.id = :CCID and n1_1.isRIE is null");   
 
				java.util.List list = getDomainFactory().find(hql.toString(), "CCID",exam.getNeuroMotor().getClinicalContact().getID_ClinicalContact());
				if (list == null || list.size() > 0)
					throw new StaleObjectException(null);
			}
			
			NeuExamMotor doNeuExamMotor = NeuroMotorFindingsVoAssembler.extractNeuExamMotor(factory, exam.getNeuroMotor());
			
			factory.save(doNeuExamMotor);
			
			exam.setNeuroMotor(NeuroMotorFindingsVoAssembler.create(doNeuExamMotor));
		}
		
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		if(exam.getProblemIsNotNull())
		{
			PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, exam.getProblem());
			
			factory.save(doMedicalProbOnAdmis);	
				
			collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
		}
						
		return exam;
	}

	public ims.core.vo.VertebrallevelVoCollection listActiveVertebralLevel()
	{
		Vertebrallevels impl = (Vertebrallevels) getDomainImpl(VertebrallevelsImpl.class);
		return impl.listVertebralLevel(Boolean.TRUE);
	}


	public NeuroMotorFindingsShortVoCollection listByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from NeuExamMotor nem ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContext != null)
		{
			hql.append(andStr + " nem.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		List neuros = factory.find(query,markers,values);
		NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsShortColl = NeuroMotorFindingsShortVoAssembler.createNeuroMotorFindingsShortVoCollectionFromNeuExamMotor(neuros);
		if(voNeuroMotorFindingsShortColl != null && voNeuroMotorFindingsShortColl.size()>0)
			return voNeuroMotorFindingsShortColl.sort(SortOrder.DESCENDING);
		else	
			return null;
	}
	public HcpLiteVoCollection listHCPs(String strHcpName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHcpLiteByName(strHcpName);
	}
	
	public NeuroMotorExaminationVo getNeuroMotorByCareContext(CareContextRefVo voCareContext, NeuroMotorFindingsShortVo voMotorFindings)
	{
		DomainFactory factory = getDomainFactory();

		NeuroMotorExaminationVo voNeuroMotorExamination = new NeuroMotorExaminationVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(voCareContext != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id"); 
			markers.add("id");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Motor");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		if(collMedicalProbOnAdmis.size()>0)
			voNeuroMotorExamination.setProblem(collMedicalProbOnAdmis.get(0));
		
		if (voMotorFindings != null)
		{
			voNeuroMotorExamination.setNeuroMotor(get(voMotorFindings));
			return voNeuroMotorExamination;
		}
		else
		{
	
			NeuroMotorFindingsVoCollection collNeuroMotorFindings = new NeuroMotorFindingsVoCollection();
			hql = " from NeuExamMotor neuExamMotor"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(voCareContext.getID_CareContextIsNotNull())
			{
				condStr.append(andStr + " neuExamMotor.careContext.id = :id"); 
				markers.add("id");
				values.add(voCareContext.getID_CareContext());
				andStr = " and ";
			}	
			
			condStr.append(andStr + " neuExamMotor.clinicalContact.id is null"); 
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(factory.find(hql, markers, values));
			if(collNeuroMotorFindings.size()>0)
			{
				collNeuroMotorFindings.sort(SortOrder.DESCENDING);
				voNeuroMotorExamination.setNeuroMotor(collNeuroMotorFindings.get(0));
			}
		}
		
		return voNeuroMotorExamination;
	}
	public NeuroMotorExaminationVo getSpinalMedicalAdmissionMotorByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();

		NeuroMotorExaminationVo voNeuroMotorExamination = new NeuroMotorExaminationVo();
	
		List motor =   factory.find(" from NeuExamMotor motor where motor.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare)",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});

		NeuroMotorFindingsVoCollection collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(motor);
		if(collNeuroMotorFindings != null && collNeuroMotorFindings.size()>0)
		{
			voNeuroMotorExamination.setNeuroMotor(collNeuroMotorFindings.get(0));
			return voNeuroMotorExamination;
		}
		else
			return null;
		
	}
	//wdev-13419
	public NeuroMotorFindingsVoCollection getNeuroMotorRecordCol(ClinicalContactShortVo voVlinicalContact,NeuroMotorFindingsShortVo voMotorFinding) 
	{
		if(voVlinicalContact == null && voMotorFinding == null)
			throw new CodingRuntimeException("No ClinicalContact available");
		
		DomainFactory factory = getDomainFactory();

		
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		NeuroMotorFindingsVoCollection collNeuroMotorFindings = new NeuroMotorFindingsVoCollection();
		
		if (voMotorFinding != null)
		{
			
			return getCollection(voMotorFinding);	
			
		}
		else
		{
	
			
			hql = " from NeuExamMotor neuExamMotor"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(voVlinicalContact.getID_ClinicalContactIsNotNull())
			{
				condStr.append(andStr + " neuExamMotor.clinicalContact.id = :id_ClinicalContact"); 
				markers.add("id_ClinicalContact");
				values.add(voVlinicalContact.getID_ClinicalContact());
				andStr = " and ";
			}	
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			hql += " order by neuExamMotor.systemInformation.creationDateTime desc";
			collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(factory.find(hql, markers, values));
			
		}
		
		return collNeuroMotorFindings;

	}
	//wdev-13419
	public MedicalProbOnAdmisVo getPatientProblem(ClinicalContactShortVo voClinContact) 
	{
		if(voClinContact == null)
			throw new CodingRuntimeException("No ClinicalContact available");
		
		DomainFactory factory = getDomainFactory();

		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(voClinContact != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinContact.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Motor");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		if(collMedicalProbOnAdmis.size()>0)
			return collMedicalProbOnAdmis.get(0);
		
		
		return null;

	}
	//wdev-13419
	public NeuroMotorFindingsVoCollection getSpinalMedicalAdmissionMotorByCareContextCollection(CareContextRefVo voCareContextRef) 
	{
		DomainFactory factory = getDomainFactory();

		if (voCareContextRef == null || (voCareContextRef != null && voCareContextRef.getID_CareContext() == null))
			return null;
		
		List motor =   factory.find(" from NeuExamMotor motor where motor.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare) order by motor.systemInformation.creationDateTime desc",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});

		NeuroMotorFindingsVoCollection collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(motor);
		return collNeuroMotorFindings;
	}
	//wdev-13419
	public MedicalProbOnAdmisVo getPatientProblemByCareContext(	CareContextRefVo voCareContext) 
	{
		DomainFactory factory = getDomainFactory();

				
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(voCareContext != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id"); 
			markers.add("id");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Motor");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		if(collMedicalProbOnAdmis.size()>0)
			return collMedicalProbOnAdmis.get(0);
		
		return null;
	}
	//wdev-13419
	public NeuroMotorFindingsVoCollection getNeuroMotorCollByCareContext(CareContextRefVo voCareContext,NeuroMotorFindingsShortVo voMotorFindings) 
	{
		DomainFactory factory = getDomainFactory();
		String hql; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
				
		if (voMotorFindings != null)
		{
			return getCollection(voMotorFindings);
			
		}
		else
		{
	
			NeuroMotorFindingsVoCollection collNeuroMotorFindings = new NeuroMotorFindingsVoCollection();
			hql = " from NeuExamMotor neuExamMotor"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(voCareContext.getID_CareContextIsNotNull())
			{
				condStr.append(andStr + " neuExamMotor.careContext.id = :id"); 
				markers.add("id");
				values.add(voCareContext.getID_CareContext());
				andStr = " and ";
			}	
			
			condStr.append(andStr + " neuExamMotor.clinicalContact.id is null"); 
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			hql += " order by neuExamMotor.systemInformation.creationDateTime desc";
			collNeuroMotorFindings = NeuroMotorFindingsVoAssembler.createNeuroMotorFindingsVoCollectionFromNeuExamMotor(factory.find(hql, markers, values));
			return collNeuroMotorFindings;
		}
		
		

	}
}
