//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.45 build 2257.28884)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.clinical.domain.objects.RespiratoryTreatment;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.RespiratoryTreatmentVoCollection;
import ims.core.vo.domain.RespiratoryTreatmentVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.spinalinjuries.domain.base.impl.BaseRespiratoryTreatmentImpl;
import ims.core.vo.RespiratoryTreatmentVo;
public class RespiratoryTreatmentImpl extends BaseRespiratoryTreatmentImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* list Medics
	*/
	public ims.core.vo.HcpCollection listHCPs(ims.core.vo.HcpFilter voHcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(voHcpFilter);
	}

	/**
	* get Respiratory Treatment
	*/
	public ims.core.vo.RespiratoryTreatmentVo getRespiratoryTreatment(ims.core.vo.ClinicalContactShortVo voClinicalContact)
	{
		if (voClinicalContact == null)
			throw new RuntimeException("Cannot get RespiratoryTreatmentVo for null ClinicalContactShortVo");

		StringBuffer hql = new StringBuffer("from RespiratoryTreatment as r1_1 where r1_1.sOAPClinicalContact.id = :CCID and r1_1.isRIE is null order by r1_1.systemInformation.creationDateTime desc");
		List list = getDomainFactory().find(hql.toString(), "CCID", voClinicalContact.getID_ClinicalContact());
		
		if (list == null || list.size() == 0)
			return null;
		
		RespiratoryTreatmentVoCollection voList = RespiratoryTreatmentVoAssembler.createRespiratoryTreatmentVoCollectionFromRespiratoryTreatment(list);;
		if (voList.size() > 0)
			return voList.get(0);

		return null;
	}

	/**
	 * save Respiratory Treatment
	 */
	public RespiratoryTreatmentVo saveRespiratoryTreatment(ims.core.vo.RespiratoryTreatmentVo voRespiratoryTreatment) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(!voRespiratoryTreatment.isValidated())
			throw new DomainRuntimeException("This Respiratory Treatment has not been validated");
	
		//if a new RespiratoryTreatmentVo record must be save check if already exist a RespiratoryTreatmentVo record for selected clinical contact
		if(voRespiratoryTreatment != null && voRespiratoryTreatment.getID_RespiratoryTreatment() == null)
		{			
			if(voRespiratoryTreatment.getSOAPClinicalContactIsNotNull())
			{
				RespiratoryTreatmentVo tempVo = getRespiratoryTreatment(voRespiratoryTreatment.getSOAPClinicalContact());
				if(tempVo != null)
					throw new DomainRuntimeException("A Respiratory Treatment record already exists for this SOAP clinical contact");
			}
		}
		DomainFactory factory = getDomainFactory();
		RespiratoryTreatment doRespiratoryTreatment = RespiratoryTreatmentVoAssembler.extractRespiratoryTreatment(factory, voRespiratoryTreatment);
		factory.save(doRespiratoryTreatment);	
		return RespiratoryTreatmentVoAssembler.create(doRespiratoryTreatment);
	}

	public ClinicalContactShortVoCollection listRespTreatContacts(Integer idCareContext) 
	{
	
		if (idCareContext != null)
		{
			DomainFactory factory = getDomainFactory();
			List RespTrList  = factory.find(" from RespiratoryTreatment rt where rt.sOAPClinicalContact.careContext.id = :ccId  and rt.isRIE is null order by rt.authoringDateTime",
					new String[]{"ccId"},
					new Object[]{idCareContext});
	
			ClinicalContactShortVoCollection voCareContactList = new ClinicalContactShortVoCollection();
			for (int x = 0; x < RespTrList.size(); x++)
			{
				RespiratoryTreatment domRespTr = (RespiratoryTreatment) RespTrList.get(x);
	
				RespiratoryTreatmentVo voRespTreat = RespiratoryTreatmentVoAssembler.create(domRespTr);
				
				//TODO: check that SOAP clinical contact is the correct vo to handle here.
				voCareContactList.add(voRespTreat.getSOAPClinicalContact());
			}
	
			return voCareContactList;
		}
		
		return null;
		
	}

	//wdev-13585
	public RespiratoryTreatmentVoCollection getRespiratoryTreatmentCollection(ClinicalContactShortVo voClinicalContact) 
	{
		if (voClinicalContact == null)
			throw new RuntimeException("Cannot get RespiratoryTreatmentVo for null ClinicalContactShortVo");

		StringBuffer hql = new StringBuffer("from RespiratoryTreatment as r1_1 where r1_1.sOAPClinicalContact.id = :CCID order by r1_1.systemInformation.creationDateTime desc");
		List list = getDomainFactory().find(hql.toString(), "CCID", voClinicalContact.getID_ClinicalContact());
		
		if (list == null || list.size() == 0)
			return null;
		
		RespiratoryTreatmentVoCollection voList = RespiratoryTreatmentVoAssembler.createRespiratoryTreatmentVoCollectionFromRespiratoryTreatment(list);;
		
		return voList;
		
	}

}
