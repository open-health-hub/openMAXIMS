//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50118.1100)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import ims.domain.exceptions.DomainException;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;

public class PatientProblemListImpl extends DomainImpl implements ims.spinalinjuries.domain.PatientProblemList, ims.domain.impl.Transactional
{
	/**
	* Lists all PatientProblems for the given Admission Contact
	*/
	public MedicalProbOnAdmisVoCollection listPatientProblems(CareContextRefVo careContext) 
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(careContext.getID_CareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(careContext.getID_CareContext());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		return MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values)).sort();
	}

	/**
	* Saves the given Patient Problem
	*/
	public MedicalProbOnAdmisVoCollection savePatientProblems(MedicalProbOnAdmisVoCollection problems) throws StaleObjectException
	{
		if(!problems.isValidated())
			throw new DomainRuntimeException("MedicalProbOnAdmis ValueObject Collection is not validated");
		
		DomainFactory factory = getDomainFactory();
		
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		for(int i=0; i<problems.size(); i++){
			PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, problems.get(i));
			
			factory.save(doMedicalProbOnAdmis);
			
			collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
		}
		
		return collMedicalProbOnAdmis;
	}

	
}
