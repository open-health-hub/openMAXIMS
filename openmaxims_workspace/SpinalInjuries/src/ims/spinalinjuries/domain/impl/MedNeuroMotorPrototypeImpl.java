//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3636.29236)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.vo.MotorChartAreaDetailVoCollection;
import ims.core.vo.VertebrallevelVoCollection;
import ims.core.vo.domain.MotorChartAreaDetailVoAssembler;
import ims.core.vo.domain.VertebrallevelVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsVo;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.NeuroMotorFindingsShortVoAssembler;
import ims.generalmedical.vo.domain.NeuroMotorFindingsVoAssembler;
import ims.medical.domain.objects.NeuExamMotor;
import ims.spinalinjuries.domain.base.impl.BaseNeurologicalExaminationMotorImpl;

public class MedNeuroMotorPrototypeImpl extends BaseNeurologicalExaminationMotorImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* list all NeuroMotor records for the CareContext
	*/
	public NeuroMotorFindingsShortVoCollection listFindings(CareContextRefVo careContext, ClinicalContactRefVo clinicalContact)
	{
		if (careContext == null || !careContext.getID_CareContextIsNotNull())
			throw new DomainRuntimeException("Logical error - Can not search without a provided care context");
		
		StringBuilder query = new StringBuilder();
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("from NeuExamMotor as neuExam where neuExam.careContext.id = :ContextID");
		
		paramNames.add("ContextID");
		paramValues.add(careContext.getID_CareContext());
		
		if (clinicalContact != null && clinicalContact.getID_ClinicalContactIsNotNull())
		{
			query.append(" and neuExam.clinicalContact.id = :ContactID");
			
			paramNames.add("ContactID");
			paramValues.add(clinicalContact.getID_ClinicalContact());
		}
		
		return NeuroMotorFindingsShortVoAssembler.createNeuroMotorFindingsShortVoCollectionFromNeuExamMotor(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	/**
	* Returns the NeuroMotorFindingsVo
	*/
	public ims.generalmedical.vo.NeuroMotorFindingsVo getFinding(ims.medical.vo.NeuExamMotorRefVo examRef)
	{
		if (examRef == null || !examRef.getID_NeuExamMotorIsNotNull())
			return null;
		
		return NeuroMotorFindingsVoAssembler.create((NeuExamMotor) getDomainFactory().getDomainObject(NeuExamMotor.class, examRef.getID_NeuExamMotor()));
	}

	public MotorChartAreaDetailVoCollection listMotorCharAreaDetail()
	{
		String hqlString = "from MotorChartAreaDetail";
		
		return MotorChartAreaDetailVoAssembler.createMotorChartAreaDetailVoCollectionFromMotorChartAreaDetail(getDomainFactory().find(hqlString));
	}

	public NeuroMotorFindingsVo saveFinding(NeuroMotorFindingsVo finding) throws DomainInterfaceException, StaleObjectException, ForeignKeyViolationException, UniqueKeyViolationException
	{
		if (finding == null)
			throw new DomainInterfaceException("Can not save empty finding");
		
		
		if (!finding.isValidated())
			throw new DomainInterfaceException("Finding is not validated");
		
		
		DomainFactory domainFactory = getDomainFactory();
		
		NeuExamMotor doFinding = NeuroMotorFindingsVoAssembler.extractNeuExamMotor(domainFactory, finding);
		
		domainFactory.save(doFinding);

		return NeuroMotorFindingsVoAssembler.create(doFinding);
	}

	public VertebrallevelVoCollection listVertebralLevels()
	{
		String hqlString = "from VertebralLevels as v where v.isActive = 1";
		return VertebrallevelVoAssembler.createVertebrallevelVoCollectionFromVertebralLevels(getDomainFactory().find(hqlString)).sort(); //wdev-14015
	}

	//wdev-12491
	public NeuroMotorFindingsVo saveFindingAndProblem(NeuroMotorFindingsVo finding, MedicalProbOnAdmisVo problem)	throws DomainInterfaceException, StaleObjectException,ForeignKeyViolationException, UniqueKeyViolationException 
	{
		if (finding == null)
			throw new DomainInterfaceException("Can not save empty finding");
		
		if (!finding.isValidated())
			throw new DomainInterfaceException("Finding is not validated");
		
		
		DomainFactory domainFactory = getDomainFactory();

		NeuExamMotor doFinding = NeuroMotorFindingsVoAssembler.extractNeuExamMotor(domainFactory, finding);
		
		if (finding.getClinicalContact() != null)
		{

			StringBuilder query = new StringBuilder("SELECT COUNT(finding.id) FROM NeuExamMotor AS finding WHERE finding.careContext.id = :CARE_CONTEXT AND finding.isRIE is null");

			ArrayList<String> paramNames = new ArrayList<String>();
			ArrayList<Object> paramValues = new ArrayList<Object>();

			paramNames.add("CARE_CONTEXT");
			paramValues.add(finding.getCareContext().getID_CareContext());

			
			query.append(" AND finding.clinicalContact.id = :CLINICAL_CONTACT");

			paramNames.add("CLINICAL_CONTACT");
			paramValues.add(finding.getClinicalContact().getID_ClinicalContact());

			long recordsFound = domainFactory.countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray());

			if (recordsFound > 0 && finding.getID_NeuExamMotor() == null)
				throw new StaleObjectException(doFinding);
		}
		
		domainFactory.save(doFinding);

		if(problem != null)
		{
			PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(domainFactory, problem);
	
			domainFactory.save(doMedicalProbOnAdmis);	
		}
		
		return NeuroMotorFindingsVoAssembler.create(doFinding);
	}
}
