//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50202.1231)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.opdvisitdetails;

import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.generalmedical.vo.OPDVisitDetailsVo;
import ims.generalmedical.vo.OPDVisitHcpPresentVo;
import ims.generalmedical.vo.OPDVisitHcpPresentVoCollection;
import ims.generalmedical.vo.OPDVisitRelPresVo;
import ims.generalmedical.vo.OPDVisitRelPresVoCollection;
import ims.spinalinjuries.forms.opdvisitdetails.GenForm.grdOtherHcpRow;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setvoOPDVisitDetails(null);
		open();
	}
	private void open() 
	{
		initialiseScreen();
		
		CareContextShortVo voCareContextShort = form.getGlobalContext().Core.getCurrentCareContext();
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		{
			//form.getLocalContext().setClinicalContact(voClinicalContactShort);
			
			if (voCareContextShort.getEpisodeOfCare().getResponsibleHCPIsNotNull())
			{
				form.qmbRecordingHCP().clear();
				form.qmbRecordingHCP().newRow(voCareContextShort.getEpisodeOfCare().getResponsibleHCP(), voCareContextShort.getEpisodeOfCare().getResponsibleHCP().toString());
				form.qmbRecordingHCP().setValue(voCareContextShort.getEpisodeOfCare().getResponsibleHCP());			
			}
			
			if (voCareContextShort.getStartDateTimeIsNotNull())
				form.dtimRecording().setValue(voCareContextShort.getStartDateTime());

			if (voCareContextShort.getEpisodeOfCare().getResponsibleHCPIsNotNull())
			{
				form.qmbSeenBy().clear();
				form.qmbSeenBy().newRow(voCareContextShort.getEpisodeOfCare().getResponsibleHCP(), voCareContextShort.getEpisodeOfCare().getResponsibleHCP().toString());
				form.qmbSeenBy().setValue(voCareContextShort.getEpisodeOfCare().getResponsibleHCP());			
			}
		
			if (voCareContextShort.getStartDateTimeIsNotNull())
				form.dtimSeen().setValue(voCareContextShort.getStartDateTime());
			
			//form.getLocalContext().setClinicalContact(voClinicalContactShort);
			
			OPDVisitDetailsVo voOPDVisitDetail = new OPDVisitDetailsVo();
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				voOPDVisitDetail.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				voOPDVisitDetail = domain.getOPDVisitDetails(form.getGlobalContext().Core.getCurrentClinicalContact());
			else
				voOPDVisitDetail = domain.getOPDVisitDetailsByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
			if (voOPDVisitDetail == null)
			{
				enableNewButton(true);
			}
			else
			{
				enableNewButton(false);
				form.getLocalContext().setvoOPDVisitDetails(voOPDVisitDetail);
				
				//Other Hcps
				if (voOPDVisitDetail.getOtherHcpsPresent() != null)
				{
					GenForm.grdOtherHcpRow rowHCP;
					for(int i = 0 ; i < voOPDVisitDetail.getOtherHcpsPresent().size() ; i++)
					{
						//TODO If we are going to maintain active we need to store inactive ones in memory and re-save them
						if (voOPDVisitDetail.getOtherHcpsPresent().get(i).getIsActiveIsNotNull() && voOPDVisitDetail.getOtherHcpsPresent().get(i).getIsActive().booleanValue())
						{	
							rowHCP = form.grdOtherHcp().getRows().newRow();
							rowHCP.getcolHcps().setValue(voOPDVisitDetail.getOtherHcpsPresent().get(i).getHCP());
							if (rowHCP.getcolHcps().getValue() == null)
							{
								rowHCP.getcolHcps().newRow(voOPDVisitDetail.getOtherHcpsPresent().get(i).getHCP(), voOPDVisitDetail.getOtherHcpsPresent().get(i).getHCP().getName().toString());
								rowHCP.getcolHcps().setValue(voOPDVisitDetail.getOtherHcpsPresent().get(i).getHCP());
							}
							rowHCP.setValue(voOPDVisitDetail.getOtherHcpsPresent().get(i));
						}
					}
				}
				if (voOPDVisitDetail.getRelPresent() != null)
				{
					GenForm.grdRelFamPresRow row;
					for (int j = 0; j < voOPDVisitDetail.getRelPresent().size(); j++)
					{
						OPDVisitRelPresVo voOPDVisitRelPres = new OPDVisitRelPresVo();
						voOPDVisitRelPres = voOPDVisitDetail.getRelPresent().get(j);
						
						row = form.grdRelFamPres().getRows().newRow();
						
						row.setcolRelationship(voOPDVisitRelPres.getRelRelationship());
						row.setcolName(voOPDVisitRelPres.getRelName());
		
						row.setValue(voOPDVisitRelPres);
					}
				}
			}
			form.getLocalContext().setvoHcpColl(domain.listHcpLite());
			setRemoveMenuVisibility();
		}
	}

	private void initialiseScreen()
	{
		clearScreen();
		enableButtons(false);
		enableContextMenus(false);
		form.btnNew().setVisible(false);
		form.btnNew().setEnabled(false);
		form.btnUpdate().setVisible(false);
		form.btnUpdate().setEnabled(false);
	}
	private void enableNewButton(boolean bEnabled)
	{
		form.btnNew().setVisible(bEnabled);
		form.btnNew().setEnabled(bEnabled);
		form.btnUpdate().setVisible(!bEnabled);
		form.btnUpdate().setEnabled(!bEnabled);
	}
	private void setRemoveMenuVisibility()
	{
		setRemoveHcpMenuVisibility();
		setRemoveRelativeMenuVisibility();
	}
	private void setRemoveRelativeMenuVisibility()
	{
		boolean bVisible = form.grdRelFamPres().getSelectedRowIndex() != - 1 &&
		form.getMode().equals(FormMode.EDIT);

			form.getContextMenus().getEpisodeCreateLocalRelativeDELETEItem().setVisible(bVisible);

	}
	private void setRemoveHcpMenuVisibility()
	{
		boolean bVisible = form.grdOtherHcp().getSelectedRowIndex() != -1 &&
			form.getMode().equals(FormMode.EDIT);
				
		form.getContextMenus().getEpisodeCreateLocalHcpUpdateItem().setVisible(bVisible);

	}
	private void clearScreen() 
	{
		form.qmbRecordingHCP().setValue(null);
		form.dtimRecording().setValue(null);
		form.dtimSeen().setValue(null);
		form.qmbSeenBy().setValue(null);

		form.grdOtherHcp().setValue(null);
		form.grdOtherHcp().getRows().clear();;
		
		form.grdRelFamPres().setValue(null);
		form.grdRelFamPres().getRows().clear();
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		enableButtons(true);

		if (sender.equals(form.grdOtherHcp()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.EpisodeCreateLocalHcp.Add:
				{
					newHcp();
					break;
				}
				case GenForm.ContextMenus.EpisodeCreateLocalHcp.Update:
				{
					removeHcp();
					setRemoveHcpMenuVisibility();
					break;
				}
			}
		}
		else if (sender.equals(form.grdRelFamPres()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.EpisodeCreateLocalRelative.ADD:
				{
					newRelative();
					break;
				}
				case GenForm.ContextMenus.EpisodeCreateLocalRelative.DELETE:
					removeRelative();
					setRemoveRelativeMenuVisibility();
					break;
			}
		}
	}
	private void removeRelative()
	{
		GenForm.grdRelFamPresRowCollection colRelFamPres = form.grdRelFamPres().getRows();
	
		for (int i=0; i<colRelFamPres.size(); i++)
		{
			if (colRelFamPres.get(i).getValue().equals(form.grdRelFamPres().getValue()))
			{
				colRelFamPres.remove(i);
				break;
			}
		}
	}
	private void newRelative()
	{
		GenForm.grdRelFamPresRow row = form.grdRelFamPres().getRows().newRow();
		row.setValue(new OPDVisitRelPresVo());
	}
	private void removeHcp()
	{
		if(form.grdOtherHcp().getSelectedRowIndex() > -1)
			form.grdOtherHcp().getRows().remove(form.grdOtherHcp().getSelectedRowIndex());
	}
	private void newHcp()
	{
		GenForm.grdOtherHcpRow row = form.grdOtherHcp().getRows().newRow();
		loadHcpsIntoGridColumnCombo(row);
		row.setValue(new OPDVisitHcpPresentVo());
	}
	private void loadHcpsIntoGridColumnCombo(grdOtherHcpRow row)
	{
		HcpLiteVoCollection collHcps = form.getLocalContext().getvoHcpColl();

		if(collHcps == null)
			return;

		for(int i=0;i<collHcps.size();i++)
		{
			//WDEV-193 Don't include the Responsible Medical Officer in the list of 'other' HCP's  
			if (form.qmbRecordingHCP().getValue() != null)
			//{
			//	if (collHcps.get(i).getID_Hcp().equals(form.qmbRecordingHCP().getValue().getID_Hcp()))
			//		continue;
			//}
				row.getcolHcps().newRow(collHcps.get(i), collHcps.get(i).toString());
			
			//for(int i=0;i<collHcps.size();i++)
			//	row.getColHcp().newRow(collHcps.get(i),collHcps.get(i).toString());					

			
		}
	}
	protected void onGrdOtherHcpSelectionChanged() throws PresentationLogicException
	{
		setRemoveHcpMenuVisibility();		
	}
	protected void onGrdRelFamPresSelectionChanged() throws PresentationLogicException
	{
		setRemoveRelativeMenuVisibility();
	}
	protected void onFormModeChanged()
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().getEpisodeCreateLocalHcpAddItem().setVisible(bVisible);
		form.getContextMenus().getEpisodeCreateLocalRelativeADDItem().setVisible(bVisible);

	}
	private void enableButtons(boolean bEnabled)
	{
		form.btnCancel().setVisible(bEnabled);
		form.btnCancel().setEnabled(bEnabled);
		form.btnSave().setVisible(bEnabled);
		form.btnSave().setEnabled(bEnabled);
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (ims.configuration.gen.ConfigFlag.DOM.EPIS_REQ_HCP.getValue() && form.qmbRecordingHCP().getValue() == null)
		{
			engine.showMessage("Please enter a 'Responsible Medical Officer'");
			form.qmbRecordingHCP().setFocus();
			return;
		}

		if (form.dtimRecording().getValue() == null)
		{
			engine.showMessage("Please enter a Recorded Date and Time");
			form.dtimRecording().setFocus();
			return;
		}

		if (form.qmbSeenBy().getValue() == null)
		{
			engine.showMessage("Please enter a Seen By");
			form.qmbSeenBy().setFocus();
			return;
		}
		
		if (form.dtimSeen().getValue() == null)
		{
			engine.showMessage("Please enter a Seen Date and Time");
			form.dtimSeen().setFocus();
			return;
		}
		
		for (int i = 0; i < form.grdRelFamPres().getRows().size(); i++)
		{
			if (form.grdRelFamPres().getRows().get(i).getcolName() == null || form.grdRelFamPres().getRows().get(i).getcolRelationship() == null)
			{
				if (form.grdRelFamPres().getRows().get(i).getcolRelationship() == null)
				{
					engine.showMessage("Please enter a Relationship");
				}
				else if (form.grdRelFamPres().getRows().get(i).getcolName() == null)
				{
					engine.showMessage("Please enter a Family/Relative Name");
				}
				form.grdRelFamPres().setFocus();
				return;
				
			}
		}
		//Now save the OPD Visit details record including the just created RootClinicalContact
		OPDVisitDetailsVo voOPDVisitDetails = form.getLocalContext().getvoOPDVisitDetails();
		if (voOPDVisitDetails == null)
			voOPDVisitDetails = new OPDVisitDetailsVo();
		
		//Other Hcps
		OPDVisitHcpPresentVoCollection colOPDVisitHcpPres = new OPDVisitHcpPresentVoCollection();
		for(int i=0;i<form.grdOtherHcp().getRows().size();i++)
		{
			if (form.grdOtherHcp().getRows().get(i).getcolHcps().getValue() != null)
			{
				OPDVisitHcpPresentVo voOPDVisitHCPPres = new OPDVisitHcpPresentVo();
				
				voOPDVisitHCPPres = form.grdOtherHcp().getRows().get(i).getValue();
				
				voOPDVisitHCPPres.setHCP((HcpLiteVo)form.grdOtherHcp().getRows().get(i).getcolHcps().getValue());
				voOPDVisitHCPPres.setIsActive(Boolean.TRUE);
	
				voOPDVisitHCPPres.setOPDVisitDetails(voOPDVisitDetails);
				colOPDVisitHcpPres.add(voOPDVisitHCPPres);
			}
		}

		voOPDVisitDetails.setOtherHcpsPresent(colOPDVisitHcpPres);
		
		OPDVisitRelPresVoCollection colOPDVisitRelPres = new OPDVisitRelPresVoCollection();
		for (int i = 0; i < form.grdRelFamPres().getRows().size(); i++)
		{
			OPDVisitRelPresVo voOPDVisitRelPres = new OPDVisitRelPresVo();
			
			//if (form.lyr1().tabOP().grdRelFamPres().getRows().get(i).getValue().getID_OPDRelPresIsNotNull())
			voOPDVisitRelPres = form.grdRelFamPres().getRows().get(i).getValue();
			
			if (form.grdRelFamPres().getRows().get(i).getcolName() != null)
				voOPDVisitRelPres.setRelName(form.grdRelFamPres().getRows().get(i).getcolName().toString());
			
			if (form.grdRelFamPres().getRows().get(i).getcolRelationship() != null)
				voOPDVisitRelPres.setRelRelationship(form.grdRelFamPres().getRows().get(i).getcolRelationship());

			colOPDVisitRelPres.add(voOPDVisitRelPres); 	
		}
		if (colOPDVisitRelPres != null)
			voOPDVisitDetails.setRelPresent(colOPDVisitRelPres);
		
		
		voOPDVisitDetails.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voOPDVisitDetails.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voOPDVisitDetails.setAuthoringDateTime(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime());
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP() instanceof HcpLiteVo)
			voOPDVisitDetails.setAuthoringCP((HcpLiteVo)form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP());
		
		String[] errors = voOPDVisitDetails.validate();
		if (errors != null)
		{
			engine.showErrors("Visit Details Validation Errors", errors);
			return;
		}
		try
		{
			form.getLocalContext().setvoOPDVisitDetails(domain.saveOPDVisitDetails(voOPDVisitDetails));
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;				
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		form.setMode(FormMode.VIEW);
		open();
	}
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		setRemoveMenuVisibility();
		form.setMode(FormMode.VIEW);
		open();
	}
	protected void onQmbRecordingHCPTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbRecordingHCP().clear();
			
		HcpLiteVoCollection coll = domain.listHcpLiteByName(value);
		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo med = coll.get(i);
			form.qmbRecordingHCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.qmbRecordingHCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbRecordingHCP().showOpened();		
		}				
	
	}
	protected void onQmbSeenByTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbSeenBy().clear();
			
		HcpLiteVoCollection coll = domain.listHcpLiteByName(value);
		for (int i = 0; i < coll.size(); i++)
		{
			HcpLiteVo med = coll.get(i);
			form.qmbSeenBy().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.qmbSeenBy().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbSeenBy().showOpened();		
		}				
	}
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableContextMenus(true);
		form.btnUpdate().setVisible(false);
		enableButtons(true);
		
	}
	private void enableContextMenus(boolean bEnabled)
	{
		form.getContextMenus().getEpisodeCreateLocalHcpAddItem().setVisible(bEnabled);
		form.getContextMenus().getEpisodeCreateLocalHcpUpdateItem().setEnabled(bEnabled);
		form.getContextMenus().getEpisodeCreateLocalHcpUpdateItem().setText("Delete");//Wdev-1829
		form.getContextMenus().getEpisodeCreateLocalHcpUpdateItem().setIcon(form.getImages().Core.Delete);
		form.getContextMenus().getEpisodeCreateLocalRelativeADDItem().setVisible(bEnabled);
		form.getContextMenus().getEpisodeCreateLocalRelativeDELETEItem().setEnabled(bEnabled);
	}
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableContextMenus(true);
		form.btnNew().setVisible(false);
		enableButtons(true);
	}
}
