//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50119.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.medadmissumm;

import java.util.Comparator;

import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.MotorChartAreaDetailVo;
import ims.core.vo.lookups.ContactType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.generalmedical.vo.AdmisSummary;
import ims.generalmedical.vo.NeuroMotorAreaFindingVo;
import ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsVo;
import ims.generalmedical.vo.NeuroMotorRootValueVo;
import ims.generalmedical.vo.NeuroMotorRootValueVoCollection;


public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{		
		AdmisSummary summary = null;
		NeuroMotorFindingsVo neurofinding = null;
		ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		if(voClinicalContact != null  && voClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
		{
						
			summary = domain.getAdmissionSummaryByClinicalContact(voClinicalContact);
			neurofinding = domain.getNeuroMotorFinding(voClinicalContact);
			
		}
		else
		{
			summary = domain.getAdmissionSummaryByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			neurofinding = domain.getNeuroMotorFindingByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		
		
		if (summary != null)
			populateForm(summary,neurofinding);
	}
	
	private void populateForm(AdmisSummary summary,NeuroMotorFindingsVo neurofinding)
	{
		super.populateScreenFromData(summary);
		
		GenForm.grdNeuroLevelRow row = form.grdNeuroLevel().getRows().newRow();
		row.setcolNeuroLevel("Motor");
		if(neurofinding != null)
		{
			if (neurofinding.getRootFindingIsNotNull() && neurofinding.getRootFinding().size() > 0)
			{
				populateAsiaScoreRootFindings(neurofinding.getRootFinding());
			}
			else
			{
				populateAsiaScoreMotorAreaFindings(neurofinding.getMotorAreaFindings());
			}
		
			
			if(neurofinding.getLeftMotorLevel() != null)
				row.setcolLeft(neurofinding.getLeftMotorLevel().getName());
			else
				row.setcolLeft(null);
			
			if(neurofinding.getRightMotorLevel() != null)
				row.setcolRight(neurofinding.getRightMotorLevel().getName());
			else
				row.setcolRight(null);
			
			
		}
		else
		{
			row.setcolLeft(null);
			row.setcolRight(null);
			form.txtAsiaGrade().setValue("");
			form.txtASIAUpperScore().setValue("");
			form.txtAsiaScore().setValue("");
			form.txtASIALowerScore().setValue("");
			form.txtASIAOverallScore().setValue("");
		}
		
		row = form.grdNeuroLevel().getRows().newRow();
		row.setcolNeuroLevel("Sensory");
		row.setcolLeft(summary.getSensoryLeft());
		row.setcolRight(summary.getSensoryRight());
		
	}
	private void populateAsiaScoreMotorAreaFindings(NeuroMotorAreaFindingVoCollection motorcol)
	{
		int scoreUpperRight = 0;
		int scoreUpperLeft = 0;

		int scoreLowerRight = 0;
		int scoreLowerLeft = 0;

					
		if(motorcol != null)
		{
			motorcol.sort(new FindingsAndMotorChartComparator());
			// Calculate scores
			for (int i = 0; i < motorcol.size(); i++)
			{
										
				NeuroMotorAreaFindingVo motorAreaFinding =  motorcol.get(i);
				
				if(motorAreaFinding == null)
					continue;
				
				if(motorAreaFinding.getLeftFindingIsNotNull())
				{
					int score = motorAreaFinding.getLeftFinding();
					
					if (score < 0 || score > 5)
						score = 0;
	
					if (motorAreaFinding.getMotorArea().getIsLowerLimb())
						scoreLowerLeft += score;
					
					if (motorAreaFinding.getMotorArea().getIsUpperLimb())
						scoreUpperLeft += score;
				}	
				
				if(motorAreaFinding.getRightFindingIsNotNull())
				{
					int score = motorAreaFinding.getRightFinding();
							
					if (score < 0 || score > 5)
						score = 0;
	
					if (motorAreaFinding.getMotorArea().getIsLowerLimb())
						scoreLowerRight += score;
					
					if (motorAreaFinding.getMotorArea().getIsUpperLimb())
						scoreUpperRight += score;
				}
				
			}
		
		}
		displayAsiaScores(scoreUpperRight,scoreUpperLeft,scoreLowerRight, scoreLowerLeft );
		
	}
	private void populateAsiaScoreRootFindings(NeuroMotorRootValueVoCollection rootcol)
	{
		int scoreUpperRight = 0;
		int scoreUpperLeft = 0;

		int scoreLowerRight = 0;
		int scoreLowerLeft = 0;
		
		
		// Calculate scores
		if(rootcol != null)
		{
			rootcol.sort(new FindingsAndMotorChartComparator()); //sort collection like in neurologicalexaminationmotor form , compute of score is like in neurologicalexaminationmotor form
			for (int i = 0; i < rootcol.size(); i++)
			{
				NeuroMotorRootValueVo motorFinding = rootcol.get(i);
				
				if(motorFinding == null)
					continue;
	
					
				if (motorFinding.getLeftFindingIsNotNull() )
				{
					int score = motorFinding.getLeftFinding();
						
					if (score < 0 || score > 5)
						score = 0;

					if (motorFinding.getRootValue().getIsLLAsiaScore())
						scoreLowerLeft += score;
						
					if (motorFinding.getRootValue().getIsULAsiaScore())
						scoreUpperLeft += score;
					
				}
							
				
				if (motorFinding.getRightFindingIsNotNull())
				{
					
					int score = motorFinding.getRightFinding();
					
					if (score < 0 || score > 5)
						score = 0;
					
					if (motorFinding.getRootValue().getIsLLAsiaScore())
						scoreLowerRight += score;
					
					if (motorFinding.getRootValue().getIsULAsiaScore())
						scoreUpperRight += score;
					
					
				}
			}
		}
		displayAsiaScores(scoreUpperRight,scoreUpperLeft,scoreLowerRight, scoreLowerLeft );
		
		
		
		
	}
	private void displayAsiaScores(int scoreUpperRight,int scoreUpperLeft,int scoreLowerRight, int scoreLowerLeft )
	{
		form.txtAsiaGrade().setValue(String.valueOf(scoreUpperLeft));
		form.txtASIAUpperScore().setValue(String.valueOf(scoreUpperRight));
		
		form.txtAsiaScore().setValue(String.valueOf(scoreLowerLeft));
		form.txtASIALowerScore().setValue(String.valueOf(scoreLowerRight));
		
		form.txtASIAOverallScore().setValue(String.valueOf(scoreUpperLeft + scoreUpperRight + scoreLowerLeft + scoreLowerRight));
	}
	private class FindingsAndMotorChartComparator implements Comparator<Object>
	{
		public int compare(Object arg0, Object arg1)
		{
			if (arg0 instanceof NeuroMotorRootValueVo && arg1 instanceof NeuroMotorRootValueVo)
			{
				if (!((NeuroMotorRootValueVo) arg0).getRootValueIsNotNull() || !((NeuroMotorRootValueVo)arg1).getRootValueIsNotNull())
					return 0;
				
				if (!((NeuroMotorRootValueVo) arg0).getRootValue().getOrderNoIsNotNull() || !((NeuroMotorRootValueVo) arg1).getRootValueIsNotNull())
					return 0;
				
				return ((NeuroMotorRootValueVo)arg0).getRootValue().getOrderNo().compareTo(((NeuroMotorRootValueVo)arg1).getRootValue().getOrderNo());
			}
			
			if (arg0 instanceof NeuroMotorAreaFindingVo && arg1 instanceof NeuroMotorAreaFindingVo)
			{
				if (!((NeuroMotorAreaFindingVo) arg0).getMotorAreaIsNotNull() || !((NeuroMotorAreaFindingVo) arg1).getMotorAreaIsNotNull())
					return 0;
				
				if (!((NeuroMotorAreaFindingVo) arg0).getMotorArea().getOrderNoIsNotNull() || !((NeuroMotorAreaFindingVo) arg1).getMotorArea().getOrderNoIsNotNull())
					return 0;
				
				return ((NeuroMotorAreaFindingVo) arg0).getMotorArea().getOrderNo().compareTo(((NeuroMotorAreaFindingVo) arg1).getMotorArea().getOrderNo());
			}
			
			if (arg0 instanceof MotorChartAreaDetailVo && arg1 instanceof MotorChartAreaDetailVo)
			{
				if (!((MotorChartAreaDetailVo) arg0).getOrderNoIsNotNull() || !((MotorChartAreaDetailVo) arg1).getOrderNoIsNotNull())
					return 0;
				
				return ((MotorChartAreaDetailVo) arg0).getOrderNo().compareTo(((MotorChartAreaDetailVo)arg1).getOrderNo());
			}
			
			return 0;
		}	
	}


}
