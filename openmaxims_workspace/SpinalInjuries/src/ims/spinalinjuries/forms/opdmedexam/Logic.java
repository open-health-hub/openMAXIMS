//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.35 build 2104.19580)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.opdmedexam;

import java.util.ArrayList;

import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.VSMetricsCollection;
import ims.core.vo.VSPulse;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.lookups.VSType;
import ims.core.vo.lookups.VSTypeCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.generalmedical.vo.MedExamGeneralVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.setMode(FormMode.VIEW);
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		if (voPatShort == null) 
			throw new FormOpenException("Error: Patient not selected.");

		form.getLocalContext().setSelectedCareContextShort(form.getGlobalContext().Core.getCurrentCareContext());
		open();
	}

	private void open() 
	{
		clearScreen();
		form.setMode(FormMode.VIEW);

		fillRecordBrowser();
	}
	
	private void fillRecordBrowser()
	{
		form.recbrOPDMedExam().clear();
		
		CareContextShortVoCollection voCareContextShortColl = domain.listOPDMedExamByCareContextShort(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		loadCareContextRecords(voCareContextShortColl);
		
		setRecordBrowser();
		browseRecord();
	}

	private void loadCareContextRecords(CareContextShortVoCollection voCareContextShortColl)
	{
		CareContextShortVo voSelectedCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		boolean selectedCareContextFound = false;
		
		for(int i=0; i<voCareContextShortColl.size(); i++)
		{
			CareContextShortVo voCareContextShort = voCareContextShortColl.get(i);
			if(voCareContextShort.getID_CareContext().equals(voSelectedCareContext.getID_CareContext()))
			{
				selectedCareContextFound = true;
				break;
			}
		}
		if(!selectedCareContextFound)
		{
			form.recbrOPDMedExam().newRow(voSelectedCareContext, voSelectedCareContext.getRecordBrowserText(), Color.Green); // "Care Context: " + voSelectedCareContext.getStartDateTime() + " - " + voSelectedCareContext.getEpisodeOfCare().getResponsibleHCP() + " Contact Type: " + voSelectedCareContext.getContext(), Color.Green);
			form.recbrOPDMedExam().setValue(voSelectedCareContext);
		}
		for(int i=0; i<voCareContextShortColl.size(); i++)
		{
			CareContextShortVo voCareContextShort = voCareContextShortColl.get(i);
			if(voCareContextShort.getID_CareContext().equals(voSelectedCareContext.getID_CareContext()))
			{
				selectedCareContextFound = true;
				loadCareContextIntoRecordBrowser(voCareContextShort, Color.Green);
				form.recbrOPDMedExam().setValue(voCareContextShort);
			}
			else
			{
				loadCareContextIntoRecordBrowser(voCareContextShort, null);
			}
		}
	}

	private void loadCareContextIntoRecordBrowser(CareContextShortVo voCareContextShort, Color activeColor)
	{
		//loads the CareContext records
		if(voCareContextShort != null)
		{
			form.recbrOPDMedExam().newRow(voCareContextShort, voCareContextShort.getRecordBrowserText(), activeColor); //      "Care Context: " + voCareContextShort.getStartDateTime() + " - " + voCareContextShort.getEpisodeOfCare().getResponsibleHCP() + " Contact Type: " + voCareContextShort.getContext(), activeColor);
		}
	}

	private void browseRecord()
	{
		updateBrowseInformation();

		if(form.recbrOPDMedExam().getValue() != null)
		{			
			form.getLocalContext().setvoMedExamGeneral(domain.getMedExamGeneralVoByCareContext((CareContextLiteVo) form.recbrOPDMedExam().getValue()));
			form.getLocalContext().setvoVitals(domain.getVitalsVoByCareContext((CareContextLiteVo) form.recbrOPDMedExam().getValue()));

			populateScreenFromData();
		}
		checkRecordIsEditable();
	}

	private void checkRecordIsEditable()
	{
		if(form.recbrOPDMedExam().getValue() != null)
		{
			if(form.recbrOPDMedExam().getValue() instanceof CareContextShortVo)
			{
				CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrOPDMedExam().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()))
				{
					if(form.getLocalContext().getvoVitalsIsNotNull() || form.getLocalContext().getvoMedExamGeneralIsNotNull())
					{
						form.btnNew().setVisible(true);
						form.btnNew().setEnabled(false);
						form.btnUpdate().setVisible(true);
						form.btnUpdate().setEnabled(true);
					}
					else
					{
						form.btnNew().setVisible(true);
						form.btnNew().setEnabled(true);
						form.btnUpdate().setVisible(true);
						form.btnUpdate().setEnabled(false);
					}
				}
				else
				{
					form.btnNew().setVisible(false);
					form.btnNew().setEnabled(false);
					form.btnUpdate().setVisible(false);
					form.btnUpdate().setEnabled(false);
				}
			}
		}
	}

	private void updateBrowseInformation()
	{
		form.lblBrowser().setValue(form.recbrOPDMedExam().getRecordState("Assessment", "Assessments"));
	}

	private void setRecordBrowser()
	{
		//after an update need to set the record browser to display the updated record
		if(form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			form.recbrOPDMedExam().setValue(form.getLocalContext().getUpdatedInstance());
	
			browseRecord();
		}
	}

	private boolean populateDataFromScreen()
	{
		MedExamGeneralVo voMedExamGeneral = form.getLocalContext().getvoMedExamGeneral();
		VitalSignsVo voVitalSign = form.getLocalContext().getvoVitals();
			
		if (voMedExamGeneral == null)
			voMedExamGeneral = new MedExamGeneralVo();
	
		if (voVitalSign == null)
			voVitalSign = new VitalSignsVo();

		VSTypeCollection recordedSignsColl = new VSTypeCollection();

		VSBloodPressure voBP;
		if (!voVitalSign.getBloodPressureIsNotNull())
			voBP = new VSBloodPressure();
		else
			voBP = voVitalSign.getBloodPressure();
		
		if((form.decDiastolicBp().getValue() != null && form.decSystolicBP().getValue() != null) )
		{
			voBP.setBPSittingDias(form.decDiastolicBp().getValue() != null ? form.decDiastolicBp().getValue() : null);
			voBP.setBPSittingSys(form.decSystolicBP().getValue() != null ? form.decSystolicBP().getValue() : null);
			voVitalSign.setBloodPressure(voBP);

			recordedSignsColl.add(VSType.BP);
		}
		else if((form.decDiastolicBp().getValue() != null || form.decSystolicBP().getValue() != null) )
		{
			engine.showMessage("Please enter both Blood Pressure values.");
			return false;
		}
		else if((form.decDiastolicBp().getValue() == null && form.decSystolicBP().getValue() == null))
		{
			voVitalSign.setBloodPressure(null);
		}
		
		if(form.intHeartRate().getValue() != null)
		{
			VSPulse voPulse;
			if (!voVitalSign.getPulseIsNotNull())
				voPulse = new VSPulse();
			else
				voPulse = voVitalSign.getPulse();
			
			voPulse.setPulseRateRadial(form.intHeartRate().getValue() != null ? form.intHeartRate().getValue() : null);
			voVitalSign.setPulse(voPulse);

			recordedSignsColl.add(VSType.PULSE);
		}
		else if(form.decTemp().getValue() == null)
			voVitalSign.setPulse(null);
		
	
		if(form.decTemp().getValue() != null)
		{
			VSTemperature voTemperature;
			if (!voVitalSign.getTemperatureIsNotNull())
				voTemperature = new VSTemperature();
			else
				voTemperature = voVitalSign.getTemperature();
	
			voTemperature.setTemperature(form.decTemp().getValue() != null ? form.decTemp().getValue() : null);
			voVitalSign.setTemperature(voTemperature);

			recordedSignsColl.add(VSType.TEMP);
		}
		else if(form.decTemp().getValue() == null)
			voVitalSign.setTemperature(null);
	
		if(form.intRespRate().getValue() != null)
		{
			VSRespirations voResp;
			if (!voVitalSign.getRespiratoryIsNotNull())
				voResp = new VSRespirations();
			else
				voResp = voVitalSign.getRespiratory();

			voResp.setRespRate(form.intRespRate().getValue() != null ? form.intRespRate().getValue() : null);
			voVitalSign.setRespiratory(voResp);

			recordedSignsColl.add(VSType.RESPIRATION);
		}
		else if(form.intRespRate().getValue() == null)
			voVitalSign.setRespiratory(null);

		if(form.decHeight().getValue() != null || form.decWeight().getValue() != null)
		{
			if(form.decHeight().getValue() == null || form.decWeight().getValue() == null)
			{
				engine.showMessage("Please enter both Height and Weight for Metrics.");
				return false;
			}
			else
			{
				VSMetrics voMetrics;
				if (!voVitalSign.getMetricsIsNotNull())
					voMetrics = new VSMetrics();
				else
					voMetrics = voVitalSign.getMetrics();

				voMetrics.setHeightValue(form.decHeight().getValue());
				voMetrics.setWeightValue(form.decWeight().getValue());
				voMetrics.setBMI(bodyMassIndex(form.decHeight().getValue().floatValue(), form.decWeight().getValue().floatValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.decHeight().getValue().floatValue(), form.decWeight().getValue().floatValue()));
				voMetrics.setHeightEstimatedMeasured(Boolean.TRUE); //default to measured
				voMetrics.setWeightEstimatedMeasured(Boolean.TRUE); //default to measured
				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort().toPatientRefVo());
					
				voVitalSign.setMetrics(voMetrics);

				recordedSignsColl.add(VSType.METRICS);
			}
		}
		else if(form.decHeight().getValue() == null && form.decWeight().getValue() == null)
			voVitalSign.setMetrics(null);

		if(form.intTidalVol().getValue() != null || form.decVitalCapacity().getValue() != null)
		{
			VSLungFunctionTestVo voLFT;
			if (!voVitalSign.getLungFunctionTestIsNotNull())
				voLFT = new VSLungFunctionTestVo();
			else
				voLFT = voVitalSign.getLungFunctionTest();

			voLFT.setTidalVolume(form.intTidalVol().getValue() != null ? form.intTidalVol().getValue() : null);
			voLFT.setVitalCapacity(form.decVitalCapacity().getValue() != null ? form.decVitalCapacity().getValue() : null);
			voVitalSign.setLungFunctionTest(voLFT);

			recordedSignsColl.add(VSType.VITALCAPACITY);
		}
		else if(form.intTidalVol().getValue() == null && form.decVitalCapacity().getValue() == null)
			voVitalSign.setLungFunctionTest(null);

		voVitalSign.setRecordedSigns(recordedSignsColl);
		if(voVitalSign.getAuthoringInformation() == null)
			voVitalSign.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		voVitalSign.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voVitalSign.setVitalsTakenDateTime(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime());
		
		voMedExamGeneral.setGeneralExamNotes(form.txtNotes().getValue() != null ? form.txtNotes().getValue() : null);
		voMedExamGeneral.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voMedExamGeneral.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(voMedExamGeneral.getAuthoringInformation() == null)
			voMedExamGeneral.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		form.getLocalContext().setvoVitals(voVitalSign);
		form.getLocalContext().setvoMedExamGeneral(voMedExamGeneral);
		
		return true;
	}

	private Float bodySurfaceArea(float height/*cm*/, float weight/*kg*/)
	{
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(0.20247 * Math.pow(height / 100.0, 0.725) * Math.pow(weight, 0.425)));
	}
	private Float bodyMassIndex(float height/*cm*/, float weight/*kg*/)
	{
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(weight / (height / 100.0 * height / 100.0)));
	}

	private void populateScreenFromData() 
	{
		clearScreen();
		//if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
		//{
		//	if(form.getLocalContext().getvoVitalsIsNotNull() || form.getLocalContext().getvoMedExamGeneralIsNotNull())
		//	{
		//		form.dateRecorded().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate());
		//		form.tmeRecorded().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getTime());
		//
		//		form.cmbRecordingHcp().newRow(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP().toString());
		//		form.cmbRecordingHcp().setValue(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP());
		//	}
		//}
		if(form.getLocalContext().getvoVitalsIsNotNull())
		{
			VitalSignsVo voVitalSign = form.getLocalContext().getvoVitals();
			if (voVitalSign.getBloodPressureIsNotNull())
			{
				form.decDiastolicBp().setValue(voVitalSign.getBloodPressure().getBPSittingDias());
				form.decSystolicBP().setValue(voVitalSign.getBloodPressure().getBPSittingSys());
			}

			if (voVitalSign.getPulseIsNotNull())
				form.intHeartRate().setValue(voVitalSign.getPulse().getPulseRateRadial());
			
			if (voVitalSign.getTemperatureIsNotNull())
				form.decTemp().setValue(voVitalSign.getTemperature().getTemperature());
				
			if (voVitalSign.getRespiratoryIsNotNull())
				form.intRespRate().setValue(voVitalSign.getRespiratory().getRespRate());
				
			if (voVitalSign.getMetricsIsNotNull())
			{
				form.decHeight().setValue(voVitalSign.getMetrics().getHeightValueIsNotNull() ? voVitalSign.getMetrics().getHeightValue() : null);
				form.decWeight().setValue(voVitalSign.getMetrics().getWeightValueIsNotNull() ? voVitalSign.getMetrics().getWeightValue() : null);
				form.intBMI().setValue(voVitalSign.getMetrics().getBMIIsNotNull() ? new Integer(voVitalSign.getMetrics().getBMI().intValue()) : null);
			}

			if (voVitalSign.getLungFunctionTestIsNotNull())
			{
				form.intTidalVol().setValue(voVitalSign.getLungFunctionTest().getTidalVolume());
				form.decVitalCapacity().setValue(voVitalSign.getLungFunctionTest().getVitalCapacity());
			}
		}

		if(form.getLocalContext().getvoMedExamGeneralIsNotNull())
		{
			form.txtNotes().setValue(form.getLocalContext().getvoMedExamGeneral().getGeneralExamNotes());
			if(form.getLocalContext().getvoMedExamGeneral().getAuthoringInformationIsNotNull())
				form.customControlAuthoringInfo().setValue(form.getLocalContext().getvoMedExamGeneral().getAuthoringInformation());
		}
	}
	protected void onRecbrOPDMedExamValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}

	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setvoMedExamGeneral(null);
		form.getLocalContext().setvoVitals(null);
		
		open();
		form.setMode(FormMode.VIEW);
	}
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!populateDataFromScreen())
			return;
		
		MedExamGeneralVo voMedExamGeneral = form.getLocalContext().getvoMedExamGeneral();
		VitalSignsVo voVitals = form.getLocalContext().getvoVitals();
		try
		{
			String[] messages = validateUIRules(); 
			messages = voVitals.validate(messages);
			if (messages != null)
			{
				engine.showErrors("Validation Errors for VitalSignsVo", messages);
				if(voMedExamGeneral.getID_ExamGen()==null)
					form.getLocalContext().setvoMedExamGeneral(null);
				return;
			}
			domain.saveVitalsVo(voVitals);

			messages = voMedExamGeneral.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors for MedExamGeneralVo", messages);
				return;
			}
			domain.saveMedExamGeneralVo(voMedExamGeneral);

		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;				
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		open();
		form.setMode(FormMode.VIEW);
		
	}
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.decHeight().getValue() != null || form.decWeight().getValue() != null)
		{
			if (form.decHeight().getValue() == null || form.decWeight().getValue() == null)
			{
				errors.add("Please enter both Heigth and Weight");
			}
			
			if (form.decHeight().getValue() != null && form.decHeight().getValue() < 1)
			{
				errors.add("Height value needs to be greater than 1");
			}
			
			if (form.decWeight().getValue() != null && form.decWeight().getValue() < 1)
			{
				errors.add("Weight value needs to be greater than 1");
			}
		}
		
		int errorCount = errors.size();
		
		if (errorCount == 0)
			return null;

		String[] result = new String[errorCount];
		
		for (int i = 0; i < errorCount; i++)
		{
			result[i] = errors.get(i);
		}
		
		return result;
	}

	protected void onBUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnUpdate().setEnabled(false);
		form.btnUpdate().setVisible(false);
		form.setMode(FormMode.EDIT);	
		form.setcustomControlAuthoringInfoEnabled(false);
	}
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.btnUpdate().setEnabled(false);
		form.btnUpdate().setVisible(false);
		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(true);
		setDefaultValues();
		populateHeightWeightFields();
	}
	private void populateHeightWeightFields()
	{
		VSMetricsCollection voMetricsColl = new VSMetricsCollection();
		voMetricsColl = domain.listMetricsData(form.getGlobalContext().Core.getPatientShort());
		if(voMetricsColl.size()<= 0)
			return;
		else
		{
			VSMetrics voMetrics = voMetricsColl.get(0);
			form.decHeight().setValue(voMetrics.getHeightValue());
			form.decWeight().setValue(voMetrics.getWeightValue());
		}
	}

	private void setDefaultValues()
	{
		form.customControlAuthoringInfo().initializeComponent();
	}

	private void clearScreen() 
	{
		form.customControlAuthoringInfo().setValue(null);
		
		form.decDiastolicBp().setValue(null);
		form.decSystolicBP().setValue(null);
		form.intHeartRate().setValue(null);
		form.decTemp().setValue(null);
		form.intRespRate().setValue(null);
		form.decHeight().setValue(null);
		form.decWeight().setValue(null);
		form.intBMI().setValue(null);
		form.intTidalVol().setValue(null);
		form.decVitalCapacity().setValue(null);
		
		form.txtNotes().setValue(null);
	}
}
