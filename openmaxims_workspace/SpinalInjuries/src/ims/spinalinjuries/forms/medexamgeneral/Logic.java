//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.medexamgeneral;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.PatientShort;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSGlasgowComaScale;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VSMetrics;
import ims.core.vo.VSOxygenSaturation;
import ims.core.vo.VSPulse;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.lookups.ContactType;
import ims.core.vo.lookups.VSType;
import ims.core.vo.lookups.VSTypeCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.AdmisExamGeneralVo;
import ims.generalmedical.vo.MedExamGeneralVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.spinalinjuries.forms.medexamgeneral.GenForm.grdProblemsRow;
public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{		
		StringBuffer tooltip = new StringBuffer();
		tooltip.append("<b>Eyes open</b>");
		tooltip.append("<br>Spontaneously&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>To speech&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3");
		tooltip.append("<br>To pain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2");
		tooltip.append("<br>None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
		tooltip.append("<br><br><b>Verbal response</b>");
		tooltip.append("<br>Orientated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5");
		tooltip.append("<br>Confused&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>Inappropriate words&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3");
		tooltip.append("<br>Incomprehensible sound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2");
		tooltip.append("<br>None&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
		tooltip.append("<br><br><b>Motor response</b>");
		tooltip.append("<br>Obey commands;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6");
		tooltip.append("<br>Localises pain&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5");
		tooltip.append("<br>Normal flexion (Withdraws)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4");
		tooltip.append("<br>Abnormal flexion (Decorticate)&nbsp; 3");
		tooltip.append("<br>Extension Decerebrate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2");
		tooltip.append("<br>None (Flaccid)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1");
        form.lblGCS().setTooltip(tooltip.toString());

        form.intBPStandingDiastolic().setEnabled(false);
		form.intBPStandingSystolic().setEnabled(false);
        
		initialize();
		open();		
	}
	
	public void initialize()
	{
		if(!ConfigFlag.UI.MEDEXAMGEN_DISPLAY_PROBLEMS_GRID.getValue())
			form.grdProblems().setVisible(false);
		else
			form.grdProblems().setReadOnly(true);
		
		for(int i=1;i<6;i++)
			form.cmbVerbalGCS().newRow(new Integer(i),String.valueOf(i));
	
		for(int i=1;i<5;i++)
			form.cmbEyesGCS().newRow(new Integer(i),String.valueOf(i));

		for(int i=1;i<7;i++)
			form.cmbMotorGCS().newRow(new Integer(i),String.valueOf(i));		
	}
	/**
	 * rules for visablility and accessability of controls for View and Edit
	 */			
	public void updateControlsState()
	{

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.grdProblems().setEnabled(false);
	        form.intBPStandingDiastolic().setEnabled(false);
			form.intBPStandingSystolic().setEnabled(false);

			//view mode rules for controls
			
			//10/03/2005 - If the current user is not hcp, then disable New/Update buttons
			if(domain.getHcpLiteUser() == null)
			{
				form.btnNew().setVisible(false);
				form.btnUpdate().setVisible(false);				
				return;
			}
			else
			{
				form.btnNew().setVisible(true);
				form.btnUpdate().setVisible(true);
				if(form.getLocalContext().getSelectedRecord().getGenExaminationDet() == null)
				{
					form.btnNew().setEnabled(true);
					form.btnUpdate().setEnabled(false);
				}
				else
				{
					form.btnNew().setEnabled(false);
					form.btnUpdate().setEnabled(true);
				}
			}
			
			if(isMedExamgeneralDefaultForm() == false)
			{
				if(!isMedicalAdmission())
				{
					form.btnNew().setVisible(false);
					form.btnUpdate().setVisible(false);
				}
			}			
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			//Edit mode rules for controls
			if (form.GroupBP().getValue().equals(GenForm.GroupBPEnumeration.rdoBPLyingStanding))
			{
		        form.intBPStandingDiastolic().setEnabled(true);
				form.intBPStandingSystolic().setEnabled(true);
			}
		
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getGenericGridRemoveItem().setText("Remove");
			form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
			
			form.getContextMenus().getMedInjuryDetailsAssociatedFactorsADDItem().setText("Add to Problem List");
			form.getContextMenus().getMedInjuryDetailsAssociatedFactorsADDItem().setVisible(true);
			
			if(!ConfigFlag.UI.MEDEXAMGEN_DISPLAY_PROBLEMS_GRID.getValue())
				form.grdProblems().setVisible(false);
			else
			{
				form.grdProblems().setVisible(true);
				form.grdProblems().setReadOnly(false);
				
				//wdev-12392
				form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
				if(form.grdProblems().getSelectedRowIndex() != -1)
				{	
				
					MedicalProbOnAdmisVo voMedicalProb = form.grdProblems().getRows().get(form.grdProblems().getSelectedRowIndex()).getValue();
					boolean bVisible = 	form.grdProblems().getSelectedRowIndex() != -1 && 
										form.getMode().equals(FormMode.EDIT);
							
					
					if(voMedicalProb.getID_PatientProblem() == null)
						form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);
				}
				//---------
				
				
				
			}
			
		}
	}
	
	private void getLatestMetrics()
	{
		VSMetrics voMetrics = domain.getMetricsFromPatient(form.getGlobalContext().Core.getPatientShort());
		if(voMetrics != null)
		{
			form.decHeight().setValue(voMetrics.getHeightValue());
			form.decWeight().setValue(voMetrics.getWeightValue());
			form.decBmi().setValue(voMetrics.getBMI()); //WDEV-15761
		}
		
	}

	private void populateContactInfo(ClinicalContactShortVo voClinicalContactShort) 
	{
		if(voClinicalContactShort != null)
		{
			AuthoringInformationVo voAuthoringInfo = new AuthoringInformationVo();
			voAuthoringInfo.setAuthoringDateTime(voClinicalContactShort.getStartDateTime());
			
			
			if(voClinicalContactShort.getSeenByIsNotNull())
			{
				voAuthoringInfo.setAuthoringHcp(voClinicalContactShort.getSeenBy());
			}
			
			form.customControlAuthoring().setValue(voAuthoringInfo);
		}		
	}
	
	private void loadProblemsGrid(MedicalProbOnAdmisVoCollection voProbColl) 
	{
		form.grdProblems().getRows().clear();
		GenForm.grdProblemsRow row = null;
		for(int i=0;i<voProbColl.size();i++)
		{
			if(voProbColl.get(i).getPatientProblem() != null){
				row = form.grdProblems().getRows().newRow();
				row.setcolProblem(voProbColl.get(i).getPatientProblem());
				row.setTooltipForcolProblem(voProbColl.get(i).getPatientProblem());
				
				row.setcolProblemButton(voProbColl.get(i).getPatientProblem());
				row.setcolActive(voProbColl.get(i).getIsActive().booleanValue());
				row.setValue(voProbColl.get(i));
			}
		}
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.GroupBP().setValue(GenForm.GroupBPEnumeration.rdoBPSitting);
		onRadioButtonGroupBPValueChanged();
		newInstance();
	}
	
	public void newInstance()
	{		
		populateContactInfo(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		form.getLocalContext().setSelectedRecord(new AdmisExamGeneralVo());
		
		form.setMode(FormMode.EDIT);
	}
	protected void onCmbEyesGCSValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.intTotalGCS().setValue(null);
		
		if(form.cmbEyesGCS().getValue() == null)
			return;
		
		if(form.cmbMotorGCS().getValue() == null)
			return;
			
		if(form.cmbVerbalGCS().getValue() == null)
			return;
		 	
		form.intTotalGCS().setValue(new Integer(form.cmbEyesGCS().getValue().intValue() + form.cmbMotorGCS().getValue().intValue() + form.cmbVerbalGCS().getValue().intValue()));		
	}
	
	protected void onCmbVerbalGCSValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		onCmbEyesGCSValueChanged();
	}
	
	protected void onCmbMotorGCSValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		onCmbEyesGCSValueChanged();
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	/**
	 * check UI business logic rules and returns errors as String[]
	 * @param  arrErrorsUI
	 * @return String[]
	 */		
	public String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();		
		
		AdmisExamGeneralVo voAdmisExamGeneral = form.getLocalContext().getSelectedRecord();
		
		if (voAdmisExamGeneral.getVitalssignsrecorded().getRecordedSigns().size() == 0)
			listOfErrors.add("No Vital Signs values entered");	

		if(form.cmbVerbalGCS().getValue() != null || form.cmbMotorGCS().getValue() != null || form.cmbEyesGCS().getValue() != null)
		{
			if(form.cmbVerbalGCS().getValue() == null || form.cmbMotorGCS().getValue() == null || form.cmbEyesGCS().getValue() == null)
			{
				listOfErrors.add("Please enter all values for Glasgow Coma Scale.");
				
			}
		}	
		//WDEV-15761
	/*	if (form.decHeight().getValue() != null || form.decWeight().getValue() != null) 
		{
			if (form.decHeight().getValue() == null )
			{
				listOfErrors.add("Please enter a Height value - Required for BMI calcualtion");
				form.decHeight().setFocus();
			}
			if (form.decWeight().getValue() == null)
			{
				listOfErrors.add("Please enter a Weight value - Required for BMI calcualtion");
				form.decWeight().setFocus();
			}
		}*/ 
		
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		
		return result;
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	public boolean save()
	{
		AdmisExamGeneralVo voAdmisExamGeneral = form.getLocalContext().getSelectedRecord();
		
		if (populateDataFromScreen(voAdmisExamGeneral) == null)
			return false;

		String[] arrErrors = voAdmisExamGeneral.validate(validateUIRules());
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try 
		{
			PatientShort patient = domain.saveAdmisExamGeneral(voAdmisExamGeneral, form.getGlobalContext().Core.getCurrentClinicalContact());
			if (patient != null)
				form.getGlobalContext().Core.setPatientShort(patient);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	
		return true;
		
	}
	private MedicalProbOnAdmisVoCollection populateProblemsOnAdmissionDataFromScreen() 
	{
		MedicalProbOnAdmisVoCollection voCollProblems = new MedicalProbOnAdmisVoCollection();
		MedicalProbOnAdmisVo item = null;
		for(int i=0;i<form.grdProblems().getRows().size();i++)
		{
			item = form.grdProblems().getRows().get(i).getValue();
			item.setPatientProblem(form.grdProblems().getRows().get(i).getcolProblemButton());
			item.setIsActive(new Boolean(form.grdProblems().getRows().get(i).getcolActive()));
			item.setCareContext(form.getGlobalContext().Core.getCurrentClinicalContact().getCareContext());
			item.setProblemContext("Exam General");
			voCollProblems.add(item);	
		}
		
		return voCollProblems;
	}

	public void open() 
	{
		clearScreen();
		AdmisExamGeneralVo voAdmisExamGeneral = null;
		boolean medicalAdmissionSelected = isMedicalAdmission();

		//WDEV-1201
		if(isMedExamgeneralDefaultForm())
		{
			//WDEV-1940 
			//TODO but needs to be coded in long term with record browser
			if(medicalAdmissionSelected)
				voAdmisExamGeneral = domain.getAdmisExamGeneral(form.getGlobalContext().Core.getCurrentClinicalContact());
			else
				voAdmisExamGeneral = domain.getAdmisExamGeneralByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		else
		{
			if(medicalAdmissionSelected)
				voAdmisExamGeneral = domain.getAdmisExamGeneral(form.getGlobalContext().Core.getCurrentClinicalContact());
			else
				voAdmisExamGeneral = domain.getAdmisExamGeneralByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		form.getLocalContext().setSelectedRecord(voAdmisExamGeneral);
		form.getLocalContext().setSelectedMedExamGeneralVo(voAdmisExamGeneral.getGenExaminationDet());
		
		if (voAdmisExamGeneral.getGenExaminationDetIsNotNull())
		{
			populateScreenFromData();
			populateContactInfo(voAdmisExamGeneral.getGenExaminationDet().getClinicalContact());			
		}
		
		getLatestMetrics();
		
		form.setMode(FormMode.VIEW);
	}
	private boolean isMedicalAdmission()
	{
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			ClinicalContactShortVo voCurrentClinical = form.getGlobalContext().Core.getCurrentClinicalContact();
			if(voCurrentClinical.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
				return true;
			else
				return false;
		}
		else
		{
			return false;					//ClinicalContact may be null, CareContext has been selected
		}
	}

	private void populateScreenFromData() 
	{
		AdmisExamGeneralVo voAdmisExamGeneral = form.getLocalContext().getSelectedRecord();
		
		loadProblemsGrid(voAdmisExamGeneral.getProblemsOnAdmission());
		
		if(voAdmisExamGeneral.getGenExaminationDet() == null)
			return;
		
		MedExamGeneralVo voExamGeneral = voAdmisExamGeneral.getGenExaminationDet();
		
		if(voExamGeneral == null)
			return;
		
		form.txtNotes().setValue(voExamGeneral.getGeneralExamNotes());
		form.intNeckCircum().setValue(voExamGeneral.getNeckCircumferance());
		
		VitalSignsVo voVitals = voAdmisExamGeneral.getVitalssignsrecorded();
		if(voVitals != null)
		{
			if(voVitals.getBloodPressure() != null)
			{
				//form.decDiastolicBP().setValue(voVitals.getBloodPressure().getBPSittingDias());
				//form.decSystolicBP().setValue(voVitals.getBloodPressure().getBPSittingSys());
				//Siting
				if (voVitals.getBloodPressure().getBPSittingSysIsNotNull())
				{
					form.GroupBP().setValue(GenForm.GroupBPEnumeration.rdoBPSitting);
					try
					{
						onRadioButtonGroupBPValueChanged();
					}
					catch (PresentationLogicException e)
					{
						e.printStackTrace();
					}

					form.intBPSittingLyingDiastolic().setValue(voVitals.getBloodPressure().getBPSittingDiasIsNotNull() ? new Integer(voVitals.getBloodPressure().getBPSittingDias().intValue()):null); //wdev-13577
					form.intBPSittingLyingSystolic().setValue(new Integer(voVitals.getBloodPressure().getBPSittingSys().intValue()));
				}
				else
				{

					form.GroupBP().setValue(GenForm.GroupBPEnumeration.rdoBPLyingStanding);
					try
					{
						onRadioButtonGroupBPValueChanged();
					}
					catch (PresentationLogicException e)
					{
						e.printStackTrace();
					}

					// Standing
					if (voVitals.getBloodPressure().getBPStandingDias() != null)
						form.intBPStandingDiastolic().setValue(new Integer(voVitals.getBloodPressure().getBPStandingDias().intValue()));
					if (voVitals.getBloodPressure().getBPStandingSys() != null)
						form.intBPStandingSystolic().setValue(new Integer(voVitals.getBloodPressure().getBPStandingSys().intValue()));

					// Lying
					if (voVitals.getBloodPressure().getBPLyingDias() != null)
						form.intBPSittingLyingDiastolic().setValue(new Integer(voVitals.getBloodPressure().getBPLyingDias().intValue()));
					if (voVitals.getBloodPressure().getBPLyingSys() != null)
						form.intBPSittingLyingSystolic().setValue(new Integer(voVitals.getBloodPressure().getBPLyingSys().intValue()));
				}
				
			}
			if(voVitals.getPulse() != null)
			{
				if(voVitals.getPulse().getPulseRateRadial() != null)
				{
					form.intHeartRate().setValue(voVitals.getPulse().getPulseRateRadial());
				}
				if(voVitals.getPulse().getPulseRateApex() != null)
				{
					form.intHeartRate().setValue(voVitals.getPulse().getPulseRateApex());
				}
			}
			if(voVitals.getTemperature() != null)
			{
				form.decTemperature().setValue(voVitals.getTemperature().getTemperature());
			}
			if(voVitals.getRespiratory() != null)
			{
				form.intRespRate().setValue(voVitals.getRespiratory().getRespRate());
			}
			if(voVitals.getOxygenSaturation() != null)
			{
				form.intOxygenSat().setValue(voVitals.getOxygenSaturation().getOxygenSaturationLevel());
			}
			if(voVitals.getLungFunctionTest() != null)
			{
				form.intTidalVol().setValue(voVitals.getLungFunctionTest().getTidalVolume());
				form.decVitalCapacity().setValue(voVitals.getLungFunctionTest().getVitalCapacity());
			}
			if(voVitals.getMetrics() != null)
			{
				form.decHeight().setValue(voVitals.getMetrics().getHeightValueIsNotNull() ? voVitals.getMetrics().getHeightValue() : null);
				form.decWeight().setValue(voVitals.getMetrics().getWeightValueIsNotNull() ? voVitals.getMetrics().getWeightValue() : null);
				form.decBmi().setValue(voVitals.getMetrics().getBMI());
			}
			if(voVitals.getGlasgowComaScale() != null)
			{
				form.cmbEyesGCS().setValue(voVitals.getGlasgowComaScale().getEyeOpening());
				form.cmbMotorGCS().setValue(voVitals.getGlasgowComaScale().getMotorResponse());
				form.cmbVerbalGCS().setValue(voVitals.getGlasgowComaScale().getVerbalResponse());
				form.intTotalGCS().setValue(voVitals.getGlasgowComaScale().getTotalGlasgowComaScale());
			}

		}
	}

	private void clearScreen() 
	{
		form.cmbEyesGCS().setValue(null);
		form.cmbMotorGCS().setValue(null);
		form.cmbVerbalGCS().setValue(null);
		form.intBPSittingLyingSystolic().setValue(null);
		form.intBPSittingLyingDiastolic().setValue(null);
		form.intBPStandingSystolic().setValue(null);
		form.intBPStandingDiastolic().setValue(null);
		form.intHeartRate().setValue(null);
		form.intOxygenSat().setValue(null);
		form.intRespRate().setValue(null);
		form.decTemperature().setValue(null);
		form.intTidalVol().setValue(null);
		form.decVitalCapacity().setValue(null);
		form.decHeight().setValue(null);
		form.decWeight().setValue(null);
		form.txtNotes().setValue(null);
		form.intNeckCircum().setValue(null);
		form.decBmi().setValue(null);
		form.intTotalGCS().setValue(null);
		form.grdProblems().getRows().clear();
	}

	private AdmisExamGeneralVo populateDataFromScreen(AdmisExamGeneralVo voAdmisExamGeneral) 
	{
		MedExamGeneralVo voMedExamGeneral = voAdmisExamGeneral.getGenExaminationDet();
		if(voMedExamGeneral == null)
			voMedExamGeneral = new MedExamGeneralVo();
		

		
		voMedExamGeneral.setAuthoringInformation(form.customControlAuthoring().getValue());
		
		VitalSignsVo voVitals = voAdmisExamGeneral.getVitalssignsrecorded();
		if(voVitals == null && isVitalDataEntered(null))
			voVitals = new VitalSignsVo();
		
		voVitals.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voVitals.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		voVitals.setAuthoringInformation(form.customControlAuthoring().getValue());
				
		VSTypeCollection recordedSignsColl = new VSTypeCollection();
		
		//BP	
		VSBloodPressure voBP = voVitals.getBloodPressure();
		if(voBP == null && isVitalDataEntered(VSType.BP))
			voBP = new VSBloodPressure();
		else if(!isVitalDataEntered(VSType.BP))
			voBP = null;

		/*
		if((form.decDiastolicBP().getValue() != null && form.decSystolicBP().getValue() != null) )
		{
			voBP.setBPSittingSys(form.decDiastolicBP().getValue() != null ? form.decDiastolicBP().getValue() : null);
			voBP.setBPSittingDias(form.decSystolicBP().getValue() != null ? form.decSystolicBP().getValue() : null);

			voVitals.setBloodPressure(voBP);

			recordedSignsColl.add(VSType.BP);
		}
		else if((form.decDiastolicBP().getValue() != null || form.decSystolicBP().getValue() != null) )
		{
			engine.showMessage("Please enter both Blood Pressure values.");
			return null;
		}
		else if((form.decDiastolicBP().getValue() == null && form.decSystolicBP().getValue() == null) )
			voVitals.setBloodPressure(null);
		*/
		if ( (form.intBPSittingLyingDiastolic().getValue() != null) || 
				 (form.intBPSittingLyingSystolic().getValue() != null) ||
				 (form.intBPStandingDiastolic().getValue() != null) ||
				 (form.intBPStandingSystolic().getValue() != null) )
			{
				voBP = new VSBloodPressure();
				if((form.intBPSittingLyingDiastolic().getValue() != null && form.intBPSittingLyingSystolic().getValue() == null) || (form.intBPSittingLyingDiastolic().getValue() == null && form.intBPSittingLyingSystolic().getValue() != null))
				{
					if(form.GroupBP().getValue().equals(GenForm.GroupBPEnumeration.rdoBPSitting))
						engine.showMessage("Please enter both Blood Pressure values for Sitting.");
					else
						engine.showMessage("Please enter both Blood Pressure values for Lying.");
					
					return null;
				}
				else
				{
					
					if(form.GroupBP().getValue().equals(GenForm.GroupBPEnumeration.rdoBPSitting)){
						voBP.setBPSittingDias(new Float(form.intBPSittingLyingDiastolic().getValue().intValue()));
						voBP.setBPSittingSys(new Float(form.intBPSittingLyingSystolic().getValue().intValue()));
					}
					else{
						if(form.intBPSittingLyingDiastolic().getValue()!=null)
							voBP.setBPLyingDias(new Float(form.intBPSittingLyingDiastolic().getValue().intValue()));
						if(form.intBPSittingLyingSystolic().getValue()!=null)
							voBP.setBPLyingSys(new Float(form.intBPSittingLyingSystolic().getValue().intValue()));
					}
				}
				
				if ((form.intBPStandingDiastolic().getValue() != null && form.intBPStandingSystolic().getValue() == null) || (form.intBPStandingDiastolic().getValue() == null && form.intBPStandingSystolic().getValue() != null) )
				{
					engine.showMessage("Please enter both Blood Pressure values for Standing.");
					return null;
				}
				else
				{
					if(form.intBPStandingDiastolic().getValue()!=null)
						voBP.setBPStandingDias(new Float(form.intBPStandingDiastolic().getValue().intValue()));
					if(form.intBPStandingSystolic().getValue()!=null)
						voBP.setBPStandingSys(new Float(form.intBPStandingSystolic().getValue().intValue()));
				}

				voVitals.setBloodPressure(voBP);
				recordedSignsColl.add(VSType.BP);
			}
			else if ( (form.intBPSittingLyingDiastolic().getValue() == null) && 
					 (form.intBPSittingLyingSystolic().getValue() == null) &&
					 (form.intBPStandingDiastolic().getValue() == null) &&
					 (form.intBPStandingSystolic().getValue() == null) )
				voVitals.setBloodPressure(null);		
		
		//Pulse
		if(form.intHeartRate().getValue() != null)
		{
			VSPulse voPulse;
			if (!voVitals.getPulseIsNotNull())
				voPulse = new VSPulse();
			else
				voPulse = voVitals.getPulse();
			
			voPulse.setPulseRateRadial(form.intHeartRate().getValue() != null ? form.intHeartRate().getValue() : null);
			voVitals.setPulse(voPulse);

			recordedSignsColl.add(VSType.PULSE);
		}
		else if(form.intHeartRate().getValue() == null)
			voVitals.setPulse(null);

		//Temperature
		if(form.decTemperature().getValue() != null)
		{
			VSTemperature voTemperature;
			if (!voVitals.getTemperatureIsNotNull())
				voTemperature = new VSTemperature();
			else
				voTemperature = voVitals.getTemperature();
	
			voTemperature.setTemperature(form.decTemperature().getValue() != null ? form.decTemperature().getValue() : null);
			voVitals.setTemperature(voTemperature);

			recordedSignsColl.add(VSType.TEMP);
		}
		else if(form.decTemperature().getValue() == null)
			voVitals.setTemperature(null);

		//Resp
		if(form.intRespRate().getValue() != null)
		{
			VSRespirations voResp;
			if (!voVitals.getRespiratoryIsNotNull())
				voResp = new VSRespirations();
			else
				voResp = voVitals.getRespiratory();
	
			voResp.setRespRate(form.intRespRate().getValue() != null ? form.intRespRate().getValue() : null);
			voVitals.setRespiratory(voResp);

			recordedSignsColl.add(VSType.RESPIRATION);
		}
		else if(form.intRespRate().getValue() == null)
			voVitals.setRespiratory(null);

		//Oxygen
		if(form.intOxygenSat().getValue() != null)
		{
			VSOxygenSaturation voOxygen;
			if (!voVitals.getOxygenSaturationIsNotNull())
				voOxygen = new VSOxygenSaturation();
			else
				voOxygen = voVitals.getOxygenSaturation();
	
			voOxygen.setOxygenSaturationLevel(form.intOxygenSat().getValue() != null ? form.intOxygenSat().getValue() : null);
			voVitals.setOxygenSaturation(voOxygen);

			recordedSignsColl.add(VSType.OXYGEN);
		}
		else if(form.intOxygenSat().getValue() == null)
			voVitals.setOxygenSaturation(null);
				
		//VitalCapacity
		if(form.intTidalVol().getValue() != null || form.decVitalCapacity().getValue() != null)
		{
			VSLungFunctionTestVo voLungFunction;
			if (!voVitals.getLungFunctionTestIsNotNull())
				voLungFunction = new VSLungFunctionTestVo();
			else
				voLungFunction = voVitals.getLungFunctionTest();
	
			voLungFunction.setTidalVolume(form.intTidalVol().getValue() != null ? form.intTidalVol().getValue() : null);
			voLungFunction.setVitalCapacity(form.decVitalCapacity().getValue() != null ? form.decVitalCapacity().getValue() : null);
			voVitals.setLungFunctionTest(voLungFunction);

			recordedSignsColl.add(VSType.VITALCAPACITY);
		}
		else if(form.intTidalVol().getValue() == null && form.decVitalCapacity().getValue() == null)
			voVitals.setLungFunctionTest(null);

		
		//Metrics
		
		if((form.decHeight().getValue() == null) && (form.decWeight().getValue() == null))//WDEV-15761
		{
			voVitals.setMetrics(null);
		}
		else
		{
			if ((form.decHeight().getValue() != null && form.decHeight().getValue() < 1) || (form.decWeight().getValue() != null && form.decWeight().getValue() < 1))
			{
				engine.showErrors(new String[] {"Height and Weight values can not be less than 1."});
				return null;
			}
			else
			{
				VSMetrics voMetrics = new VSMetrics();

				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());
				voMetrics.setHeightValue(form.decHeight().getValue());
				voMetrics.setWeightValue(form.decWeight().getValue());
				voMetrics.setBMI(bodyMassIndex(form.decHeight().getValue(), form.decWeight().getValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.decHeight().getValue(), form.decWeight().getValue()));//WDEV-15761
				voMetrics.setHeightEstimatedMeasured(Boolean.TRUE); //default to measured
				voMetrics.setWeightEstimatedMeasured(Boolean.TRUE); //default to measured
				voVitals.setMetrics(voMetrics);

				recordedSignsColl.add(VSType.METRICS);
			}
		}

		//GCS
		if(form.cmbEyesGCS().getValue() != null || form.cmbMotorGCS().getValue() != null || form.cmbVerbalGCS().getValue() != null || form.intTotalGCS().getValue() != null)
		{
			VSGlasgowComaScale voGCS;
			if (!voVitals.getGlasgowComaScaleIsNotNull())
				voGCS = new VSGlasgowComaScale();
			else
				voGCS = voVitals.getGlasgowComaScale();
	
			voGCS.setEyeOpening(form.cmbEyesGCS().getValue() != null ? form.cmbEyesGCS().getValue() : null);
			voGCS.setMotorResponse(form.cmbMotorGCS().getValue() != null ? form.cmbMotorGCS().getValue() : null);
			voGCS.setVerbalResponse(form.cmbVerbalGCS().getValue() != null ? form.cmbVerbalGCS().getValue() : null);
			voGCS.setTotalGlasgowComaScale(form.intTotalGCS().getValue() != null ? form.intTotalGCS().getValue() : null);

			voVitals.setGlasgowComaScale(voGCS);

			recordedSignsColl.add(VSType.GLASGOWCOMASCALE);
		}
		else if(form.cmbEyesGCS().getValue() == null && form.cmbMotorGCS().getValue() == null && form.cmbVerbalGCS().getValue() == null && form.intTotalGCS().getValue() == null)
			voVitals.setGlasgowComaScale(null);

		voVitals.setRecordedSigns(recordedSignsColl);
		voVitals.setVitalsTakenDateTime(new DateTime());
		voVitals.setAuthoringInformation(form.customControlAuthoring().getValue());
		
		voAdmisExamGeneral.setVitalssignsrecorded(voVitals);	
		voMedExamGeneral.setGeneralExamNotes(form.txtNotes().getValue());
		voMedExamGeneral.setNeckCircumferance(form.intNeckCircum().getValue());
		voMedExamGeneral.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voMedExamGeneral.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voAdmisExamGeneral.setProblemsOnAdmission(populateProblemsOnAdmissionDataFromScreen());
		voAdmisExamGeneral.setGenExaminationDet(voMedExamGeneral);
		
		return voAdmisExamGeneral;
	}

	//WDEV-15761
	private Float bodySurfaceArea(Float height/*cm*/, Float weight/*kg*/)
	{
		if (height == null || weight  == null)
			return null;
		
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(0.20247 * Math.pow(height.floatValue() / 100.0, 0.725) * Math.pow(weight.floatValue(), 0.425)));
	}

	private boolean isVitalDataEntered(VSType type) 
	{
		if(type == null)
		{
			if(form.cmbEyesGCS().getValue() != null || form.cmbMotorGCS().getValue() != null || form.cmbVerbalGCS().getValue() != null
			 || form.intBPSittingLyingDiastolic().getValue() != null || form.intBPSittingLyingSystolic() != null 
			 || form.intBPStandingDiastolic().getValue() != null || form.intBPStandingSystolic() != null 
			 || form.intHeartRate().getValue() != null || form.intOxygenSat().getValue() != null || form.intRespRate().getValue() != null || form.decTemperature().getValue() != null || form.intTidalVol().getValue() != null || form.decVitalCapacity().getValue() != null
			 || form.decHeight().getValue() != null || form.decWeight().getValue() != null)
			{
				return true;
			}
		}
		
		if(type == VSType.BP)
		{
			 if(form.intBPSittingLyingDiastolic().getValue() != null || form.intBPSittingLyingSystolic() != null 
			 || form.intBPStandingDiastolic().getValue() != null || form.intBPStandingSystolic() != null) 
				return true;
		}
		else if(type == VSType.PULSE)
		{
			if(form.intHeartRate().getValue() != null)
				return true;
		}
		else if(type == VSType.TEMP)
		{
			if(form.decTemperature().getValue() != null)
				return true;
		}
		else if(type == VSType.RESPIRATION)
		{
			if(form.intRespRate().getValue() != null)
				return true;	
		}
		else if(type == VSType.OXYGEN)
		{
			if(form.intOxygenSat().getValue() != null)
				return true;	
		}
		else if(type == VSType.VITALCAPACITY) //lung function tests
		{
			if(form.intTidalVol().getValue() != null || form.decVitalCapacity().getValue() != null)
				return true;		
		}
		else if(type == VSType.METRICS)
		{
			if(form.decHeight().getValue() != null || form.decWeight().getValue() != null)
				return true;
		}
		else if(type == VSType.GLASGOWCOMASCALE)
		{
			if(form.cmbEyesGCS().getValue() != null || form.cmbMotorGCS().getValue() != null || form.cmbVerbalGCS().getValue() != null)
				return true;
		}

		return false;
	}

	private Float bodyMassIndex(Float height/*cm*/, Float weight/*kg*/)
	{
		if (height == null || weight  == null) //WDEV-15761
			return null;
		
		//we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float)(weight.floatValue() / (height.floatValue() / 100.0 * height.floatValue() / 100.0)));
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void removeProblem() 
	{
		if(form.grdProblems().getSelectedRowIndex() != -1)
		{
			form.grdProblems().getRows().remove(form.grdProblems().getSelectedRowIndex());			//wdev-12392
			try {
				onGrdProblemsSelectionChanged();
			} catch (PresentationLogicException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	protected void onGrdProblemsGridCommentChanged(int column, grdProblemsRow row) throws PresentationLogicException 
	{
		row.setcolProblem(row.getcolProblemButton());	
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdProblems()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					newProblem();
					break;
				case GenForm.ContextMenus.GenericGrid.Remove:
					removeProblem();
					setRemoveMenuVisibility();
					break;
			}
		}
		if(sender.equals(form.txtNotes()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.MedInjuryDetailsAssociatedFactors.ADD:
					newProblemFromNotes();
					break;
			}
		}
		
	}
	
	private void newProblem() 
	{
		GenForm.grdProblemsRow row = form.grdProblems().getRows().newRow();
		row.showcolProblemButtonOpened();
		row.setcolActive(true);
		row.setValue(new MedicalProbOnAdmisVo());
	}

	private void newProblemFromNotes()
	{
		//add selected text to problem grid
		if (form.txtNotes().getSelectedText() != "")
		{
			GenForm.grdProblemsRow grdProbRow = form.grdProblems().getRows().newRow();
			grdProbRow.setValue(new MedicalProbOnAdmisVo());
			grdProbRow.setcolActive(true);
			grdProbRow.setcolProblem(form.txtNotes().getSelectedText());
			grdProbRow.setcolProblemButton(form.txtNotes().getSelectedText());
		}
		else
		{
			engine.showMessage("Please select text to be added.");
			return;
		}
	}

	private void setRemoveMenuVisibility()
	{
		
	}

	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	
	//WDEV-1201 
	boolean isMedExamgeneralDefaultForm()
	{
		return engine.getFormName().equals(form.getForms().SpinalInjuries.MedExamDefaultGeneral);
	}

	protected void onRadioButtonGroupBPValueChanged() throws PresentationLogicException
	{
		if (form.GroupBP().getValue().equals(GenForm.GroupBPEnumeration.rdoBPSitting))
		{
			form.intBPStandingDiastolic().setVisible(false);
			form.intBPStandingSystolic().setVisible(false);
			form.lblBPErectSlash().setVisible(false);
			form.lblBPSupine().setValue("Sitting:");//WDEV-16014
			form.lblBPErect().setVisible(false);

		}
		else
		{
			form.intBPStandingDiastolic().setVisible(true);
			form.intBPStandingSystolic().setVisible(true);
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.intBPStandingDiastolic().setEnabled(true);
				form.intBPStandingSystolic().setEnabled(true);
			}
			else
			{
				form.intBPStandingDiastolic().setEnabled(false);
				form.intBPStandingSystolic().setEnabled(false);
			}
			form.lblBPErectSlash().setVisible(true);
			form.lblBPSupine().setValue("Lying:");//WDEV-16014
			form.lblBPErect().setVisible(true);
		}

		form.intBPSittingLyingDiastolic().setValue(new Integer(0));
		form.intBPSittingLyingDiastolic().setValue(null);
		form.intBPSittingLyingSystolic().setValue(new Integer(0));
		form.intBPSittingLyingSystolic().setValue(null);
		form.intBPStandingDiastolic().setValue(new Integer(0));
		form.intBPStandingDiastolic().setValue(null);
		form.intBPStandingSystolic().setValue(new Integer(0));
		form.intBPStandingSystolic().setValue(null);		
	}

	
	protected void onGrdProblemsSelectionChanged()
			throws PresentationLogicException {
		updateControlsState();
		
	}

	protected void onGrdProblemsGridCheckBoxClicked(int column,	grdProblemsRow row, boolean isChecked) throws PresentationLogicException {
		updateControlsState();
		
	}
}
