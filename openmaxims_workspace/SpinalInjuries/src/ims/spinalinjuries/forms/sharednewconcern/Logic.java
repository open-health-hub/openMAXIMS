//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50211.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//23/05/2005 - AU - Bug fixed - Hcp loaded from MedicalAdmissionContact as default
package ims.spinalinjuries.forms.sharednewconcern;

import java.util.ArrayList;

import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PatientCurrentConcernVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientConcernStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.spinalinjuries.helper.SysInfoUtil;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		prepareForm();
		loadHcpTypes();
		open();
	}


	private void prepareForm()
	{
		if(engine.getPreviousNonDialogFormName().equals(form.getForms().SpinalInjuries.MedConcernOnAdmisEpis))
			form.grdAssocProblem().setVisible(false);
			
		else
		{
			form.grdAssocProblem().setVisible(true);
			loadProblemsOnAdmission();
		}
	}


	private void loadProblemsOnAdmission() 
	{
		MedicalProbOnAdmisVoCollection voProbColl = domain.listProbsOnAdmission(form.getGlobalContext().Core.getCurrentCareContext());
		form.grdAssocProblem().getRows().clear();
		GenForm.grdAssocProblemRow row = null;
		for(int i=0;voProbColl!=null && i<voProbColl.size();i++)
		{
			row = form.grdAssocProblem().getRows().newRow();
			row.setColAssocProb(voProbColl.get(i).getPatientProblem());
			row.setValue(voProbColl.get(i));
		}
	}

	private void loadHcpTypes() 
	{
		form.cmbAllocToTeam().clear();
		form.cmbIdByTeam().clear();
		
		HcpDisTypeCollection coll = LookupHelper.getHcpDisType(domain.getLookupService());
		TreeNode[] rootNodes = coll.getRootNodes();
		for (int i = 0; i < rootNodes.length; i++)
		{
			HcpDisType lk = (HcpDisType)rootNodes[i];	
			form.cmbAllocToTeam().newRow(lk, lk.getText());
			form.cmbIdByTeam().newRow(lk, lk.getText());
		}		
	}

	private void open() 
	{
		setFormMode();
		
		PatientCurrentConcernVo voConcern = form.getGlobalContext().SpinalInjuries.getPatientConcern();
		
		if(voConcern == null) //we will use the global context variable instead of creating a local context variable
		{
			form.getGlobalContext().SpinalInjuries.setPatientConcern(new PatientCurrentConcernVo());
			
			Hcp hcp = getCurrentHcp();
			if(hcp != null)
			{
				form.cmbRecordingHcp().newRow(hcp, hcp.toString());
				form.cmbRecordingHcp().setValue(hcp);
			}
			
			form.dteRecorded().setValue(new Date());
			form.tmeRecorded().setValue(new Time());
			form.dteIdentified().setValue(new Date());
			form.tmeIdentified().setValue(new Time());
			form.cmbStatus().setValue(PatientConcernStatus.ACTIVE);
			enableIdentifiedByCombos(true);
		}
		else
		{
			this.populateScreenFromData(voConcern);
			//30/11/2005 - Replace Recording/Updating date/time with SystemInformation
			form.dteRecorded().setValue(SysInfoUtil.getCreationDate(voConcern.getSysInfo()));
			form.tmeRecorded().setValue(SysInfoUtil.getCreationTime(voConcern.getSysInfo()));
			if(voConcern.getRecordingHCP() != null)
			{
				form.cmbRecordingHcp().newRow(voConcern.getRecordingHCP(), voConcern.getRecordingHCP().toString());
				form.cmbRecordingHcp().setValue(voConcern.getRecordingHCP());
			}

			if(voConcern.getUpdatingHCP() == null)
			{
				Hcp hcp = getCurrentHcp();
				if(hcp != null)
				{
					form.cmbUpdatingHcp().newRow(hcp, hcp.toString());
					form.cmbUpdatingHcp().setValue(hcp);
				}
				form.dteUpdated().setValue(new Date());
				form.tmeUpdated().setValue(new Time());
			}
			else
			{
				form.cmbUpdatingHcp().newRow(voConcern.getUpdatingHCP(), voConcern.getUpdatingHCP().toString());
				form.cmbUpdatingHcp().setValue(voConcern.getUpdatingHCP());
				Date updatedDate = SysInfoUtil.getLastUpdatedDate(voConcern.getSysInfo());
				Time updatedTime = SysInfoUtil.getLastUpdatedTime(voConcern.getSysInfo());
				form.dteUpdated().setValue(updatedDate != null?updatedDate:new Date());
				form.tmeUpdated().setValue(updatedTime != null?updatedTime:new Time());
			}
			
			if(voConcern.getConcernStatus() != null)
			{
				if(voConcern.getConcernStatus().equals(PatientConcernStatus.RESOLVED))
				{
					if(!form.getGlobalContext().SpinalInjuries.getViewRecord().booleanValue())
					{
						form.setMode(FormMode.VIEW);
						activateControls(true);
					}
				}
			}
			enableIdentifiedByCombos(false);
		}
	}

	private void setFormMode()
	{
		if(form.getGlobalContext().SpinalInjuries.getViewRecordIsNotNull())
		{
			if(form.getGlobalContext().SpinalInjuries.getViewRecord().booleanValue())
			{
				form.setMode(FormMode.VIEW);
				activateControls(false);
			}
			else
			{
				form.setMode(FormMode.EDIT);
				activateControls(true);
			}
		}
	}


	private void activateControls(boolean active)
	{
		form.btnSave().setVisible(active);
		form.txtAssocNote().setEnabled(active);
	}


	private void enableIdentifiedByCombos(boolean enable)
	{
		form.cmbIdByMember().setEnabled(enable);
		form.cmbIdByTeam().setEnabled(enable);
		form.txtConcernAction().setEnabled(enable);
	}


	protected void onCmbIdByTeamValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbIdByMember().clear();
		
		if(form.cmbIdByTeam().getValue() == null)
			return;
			
		HcpFilter filter = new HcpFilter();
		filter.setHcpType(form.cmbIdByTeam().getValue());
		
		HcpCollection voCollHcps = domain.listHcps(filter);
		for(int i=0;i<voCollHcps.size();i++)
		{
			form.cmbIdByMember().newRow(voCollHcps.get(i), voCollHcps.get(i).toString());
		}
	}
	
	protected void onCmbAllocToTeamValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbAllocToMember().clear();
		
		if(form.cmbAllocToTeam().getValue() == null)
			return;
			
		HcpFilter filter = new HcpFilter();
		filter.setHcpType(form.cmbAllocToTeam().getValue());
		
		HcpCollection voCollHcps = domain.listHcps(filter);
		for(int i=0;i<voCollHcps.size();i++)
		{
			form.cmbAllocToMember().newRow(voCollHcps.get(i), voCollHcps.get(i).toString());
		}
		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openPreviousForm();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dteAllocated()!=null)
			if (form.dteIdentified()!=null)
				if (form.dteAllocated().getValue()!=null&&form.dteIdentified().getValue()!=null)
					if (form.dteAllocated().getValue().compareTo(form.dteIdentified().getValue())<0)
					{
						ArrayList <String> errors=new ArrayList<String>();
						errors.add("Date Identified cannot be after Date Allocated");
						engine.showErrors(errors.toArray(new String [0]));
						return;
					}
					
		PatientCurrentConcernVo voConcern = form.getGlobalContext().SpinalInjuries.getPatientConcern();
		voConcern = this.populateDataFromScreen(voConcern);
		if(voConcern.getID_PatientConcern() == null)
			voConcern.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if(voConcern.getID_PatientConcern() != null)
		{
			Hcp hcp = (Hcp) domain.getHcpUser();
			if(hcp != null)
			{
				voConcern.setUpdatingHCP(hcp);
			}			
		}
		
		String[] arrErrors = voConcern.validate(getUIErrors());//WDEV-16017
		if( arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try {
			domain.saveConcern(voConcern, form.getGlobalContext().Core.getPatientShort());
		} catch (StaleObjectException e) {
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().SpinalInjuries.setPatientConcern(domain.getConcern(voConcern));
			open();
			return;
		}	
		
		openPreviousForm();
	}
	
	//WDEV-16017
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.dteIdentified().getValue()==null)
		{
			errors.add("'Date Identified' is mandatory!");
		}
		
		if (form.tmeIdentified().getValue()==null)
		{
			errors.add("'Time Identified' is mandatory!");
		}
	
		if (form.dteAllocated().getValue()==null)
		{
			errors.add("'Date Allocated' is mandatory!");
		}
		
		if (form.tmeAllocated().getValue()==null)
		{
			errors.add("'Time Allocated' is mandatory!");
		}	
		
		if (new DateTime(form.dteIdentified().getValue(), form.tmeIdentified().getValue()).isGreaterThan(new DateTime()))
		{
			errors.add("'Date/Time Identified' can not be in the future");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}


	private void openPreviousForm()
	{
		if(engine.getPreviousNonDialogFormName().equals(form.getForms().SpinalInjuries.MedConcernOnAdmisEpis))
			engine.open(form.getForms().SpinalInjuries.MedConcernOnAdmisEpis);
		else
			engine.open(form.getForms().SpinalInjuries.MedConcernOnAdmis);
	}


	protected void clearScreen() 
	{
		super.clearScreen();
		loadHcpTypes();
		for(int i=0;i<form.grdAssocProblem().getRows().size();i++)
		{
			GenForm.grdAssocProblemRow row = form.grdAssocProblem().getRows().get(i);
			row.setColSelect(false);
		}	
	}

	protected PatientCurrentConcernVo populateDataFromScreen(PatientCurrentConcernVo value) 
	{	
		value = super.populateDataFromScreen(value);
		
		MedicalProbOnAdmisVoCollection voCollProbs = new MedicalProbOnAdmisVoCollection();
		for(int i=0;i<form.grdAssocProblem().getRows().size();i++)
		{
			GenForm.grdAssocProblemRow row = form.grdAssocProblem().getRows().get(i);
			if(row.getColSelect() == true)
			{
				voCollProbs.add(row.getValue());
			}
		}
		
		value.setAssocProblem(voCollProbs);
		return value;
	}

	protected void populateScreenFromData(PatientCurrentConcernVo value) 
	{
		super.populateScreenFromData(value);
		
		MedicalProbOnAdmisVoCollection voCollProbs = value.getAssocProblem();
		MedicalProbOnAdmisVo voProb;
		GenForm.grdAssocProblemRow row = null;
		
		for(int i=0;i<voCollProbs.size();i++)
		{
			voProb = voCollProbs.get(i);
			for(int j=0;j<form.grdAssocProblem().getRows().size();j++)
			{
				row = form.grdAssocProblem().getRows().get(j);
				if(row.getValue().equals(voProb))
					row.setColSelect(true);
			}
		}
		
		try {
			onCmbAllocToTeamValueChanged();
			onCmbIdByTeamValueChanged();
		} catch (PresentationLogicException e){}
		
		form.cmbIdByMember().setValue(value.getMemberIdentified());
		form.cmbAllocToMember().setValue(value.getAllocToTeamMember());
	
	}
	
	private Hcp getCurrentHcp()
	{
		/*if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			if(form.getGlobalContext().Core.getCurrentClinicalContact().getSeenByIsNotNull())
				return form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy();
		}
		else
		{
			if(domain.getHcpUser() != null)
				return domain.getHcpUser() instanceof Hcp?(Hcp)domain.getHcpUser():null;
		}*/
		if(domain.getHcpUser() != null)
			return domain.getHcpUser() instanceof Hcp?(Hcp)domain.getHcpUser():null;
		
		return null;
	}


	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		//check the logged on user, Only a HCP from the Team that created the problem can resolve a problem
		if(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientConcernStatus.RESOLVED))
		{
			Hcp voHcp = (Hcp) domain.getHcpUser();
			HcpDisType identifiedByTeamType = form.cmbIdByTeam().getValue();
			if(identifiedByTeamType != null)
			{			
				if(voHcp != null && (!voHcp.getHcpType().equals(identifiedByTeamType)))
				{
					form.cmbStatus().setValue(null);
					engine.showMessage("You are not a member of the team that created the concern and therefore cannot resolve it");
					return;
				}
			}
		}
		
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
			form.grdAssocProblem().setReadOnly(false);
		else
			form.grdAssocProblem().setReadOnly(true);
	}
}
