//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Charlotte Murphy using IMS Development Environment (version 1.45 build 2257.28884)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.respiratorytreatment;

import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.PersonName;
import ims.core.vo.RespiratoryTreatmentDetailVo;
import ims.core.vo.RespiratoryTreatmentDetailVoCollection;
import ims.core.vo.RespiratoryTreatmentVo;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.RespiratoryTreatment;
import ims.spinalinjuries.vo.lookups.RespiratoryTreatmentCollection;
import ims.core.vo.ClinicalContactShortVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void loadCareContext()
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(form.getGlobalContext().Core.getCurrentClinicalContact() == null)
		{
			form.recbrContact().newRow(voCareContext, voCareContext.getRecordBrowserText(), Color.Green);
			form.recbrContact().setValue(voCareContext);
		}
		else
			form.recbrContact().newRow(voCareContext, voCareContext.getRecordBrowserText());
		
	}
	private void open()
	{	
		form.setMode(FormMode.VIEW);
		form.recbrContact().clear();
		fillRecordBrowser();		
	}
	
	private void fillRecordBrowser()
	{
		Color textColour = null;
		boolean clinicalContactFound = false;
		Integer currentContactId = null;
		loadCareContext();
		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			currentContactId = form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact();
		
		ClinicalContactShortVoCollection voCareContactList = domain.listRespTreatContacts(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext());
		
		if (voCareContactList != null && voCareContactList.size() > 0)
		{			
			for (int i=0;i<voCareContactList.size();i++)
			{
				if(voCareContactList.get(i).getID_ClinicalContact().equals(currentContactId))
				{
					textColour = Color.Green;
					clinicalContactFound = true;
				}
				else
				{
					textColour = null;
				}
				form.recbrContact().newRow(voCareContactList.get(i), "\t\t\t\t\tClinical Contact: " + voCareContactList.get(i).getStartDateTime() + " - " + voCareContactList.get(i).getSeenBy(), textColour);		
				if(textColour != null)
					form.recbrContact().setValue(voCareContactList.get(i));
			}
		}
		if(!clinicalContactFound && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			form.recbrContact().newRow(form.getGlobalContext().Core.getCurrentClinicalContact(), "\t\t\t\t\tClinical Contact: " + form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() + " - " + form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy(), Color.Green);
			form.recbrContact().setValue(form.getGlobalContext().Core.getCurrentClinicalContact());
		}
		browseRecord();
	}
	private void prePopulateTreatmentGrd() throws PresentationLogicException
	{
		RespiratoryTreatmentCollection respiratoryTreatColl = LookupHelper.getRespiratoryTreatment(domain.getLookupService());
		if(respiratoryTreatColl == null || respiratoryTreatColl.size() == 0)
			throw new PresentationLogicException("Please configure RespiratoryTreatment lookup");

		respiratoryTreatColl.sort();
		
		GenForm.grdTreatmentRow row = null;
		form.grdTreatment().getRows().clear();

		for (int i = 0; i < respiratoryTreatColl.size(); i++)
		{
			RespiratoryTreatment respiratoryTreat = respiratoryTreatColl.get(i);
			row = form.grdTreatment().getRows().newRow();
			row.setColTreatment(respiratoryTreat);
		}	
	}
	private void clearControls()
	{
		form.grdTreatment().getRows().clear();
		super.clearScreen();
	}
	private void populateInstanceControls()
	{
		clearControls();
		
		if(form.getLocalContext().getRespiratoryTreatment() == null) return;
		
		RespiratoryTreatmentVo voRespiratoryTreat = form.getLocalContext().getRespiratoryTreatment();
		
		form.qmbAuthoringCP().newRow(voRespiratoryTreat.getAuthoringCP(),voRespiratoryTreat.getAuthoringCP().toString());
		super.populateScreenFromData(voRespiratoryTreat);
		populateTreatmentGrd(voRespiratoryTreat.getTreatments().sort());
	}
	private void populateInstanceControlsUpdate()  throws PresentationLogicException
	{
		if(form.getLocalContext().getRespiratoryTreatment() == null) return;
		
		RespiratoryTreatmentVo voRespiratoryTreat = form.getLocalContext().getRespiratoryTreatment();
		
		prePopulateTreatmentGrd();		
		populateTreatmentGrd(voRespiratoryTreat.getTreatments());
	}
	
	private void populateTreatmentGrd(RespiratoryTreatmentDetailVoCollection voResTreatDetailColl)
	{
		if(voResTreatDetailColl == null) return;
		
		GenForm.grdTreatmentRow row;
		if(voResTreatDetailColl != null)
		{
			for (int i=0; i<voResTreatDetailColl.size(); i++)
			{
				RespiratoryTreatmentDetailVo voTreatmentDetail = voResTreatDetailColl.get(i);
				// We have to find the row on the grid
				int j = 0;
				for (j=0; j<form.grdTreatment().getRows().size(); j++)
				{
					row = form.grdTreatment().getRows().get(j);
					if (row.getColTreatment().equals(voTreatmentDetail.getTreatment()))
					{
						row.setValue(voTreatmentDetail);
						row.setColComments(voTreatmentDetail.getDetails());
						row.setColSelected(voTreatmentDetail.getStatus());
						break;
					}
				}	
				if(j == form.grdTreatment().getRows().size())
				{
					row = form.grdTreatment().getRows().newRow();
					row.setColTreatment(voTreatmentDetail.getTreatment());
					row.setColComments(voTreatmentDetail.getDetails());
					row.setColSelected(voTreatmentDetail.getStatus());
					row.setValue(voTreatmentDetail);
				}
			}
		}
		
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	private boolean save()
	{
		RespiratoryTreatmentVo voRespiratoryTreat = form.getLocalContext().getRespiratoryTreatment();
		voRespiratoryTreat = super.populateDataFromScreen(voRespiratoryTreat);
		
		if (voRespiratoryTreat.getTreatments() != null)
			voRespiratoryTreat.getTreatments().clear();
		
		voRespiratoryTreat.setTreatments(populateTreatmentDetailData());
		
		if (voRespiratoryTreat.getSOAPClinicalContact() == null)
			voRespiratoryTreat.setSOAPClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
						
		String[] arrErrors =  voRespiratoryTreat.validate();	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{			
			form.getLocalContext().setRespiratoryTreatment(domain.saveRespiratoryTreatment(voRespiratoryTreat));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage("A Respiratory Treatment record already exists for this SOAP clinical contact. " + e.getMessage());
			open();
			return false;
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		return true;		
	}
	private RespiratoryTreatmentDetailVoCollection populateTreatmentDetailData()
	{
		RespiratoryTreatmentDetailVoCollection voRespiratoryTreatmentDetailColl = new RespiratoryTreatmentDetailVoCollection();
		GenForm.grdTreatmentRow row;	
		for (int i=0; i<form.grdTreatment().getRows().size(); i++)
		{
			row = form.grdTreatment().getRows().get(i);
			RespiratoryTreatmentDetailVo voTreatmentDetail = row.getValue();
			if (voTreatmentDetail == null)
				voTreatmentDetail = new RespiratoryTreatmentDetailVo();
			
			voTreatmentDetail.setTreatment(row.getColTreatment());
			voTreatmentDetail.setDetails(row.getColComments());
			voTreatmentDetail.setStatus(row.getColSelected());
			if(row.getColSelected()!= null || row.getColComments() != null)
				voRespiratoryTreatmentDetailColl.add(voTreatmentDetail);
		}
		if(voRespiratoryTreatmentDetailColl.size()>0)
			return voRespiratoryTreatmentDetailColl;
		else
			return null;							//want to keep control of count in VO
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateInstanceControlsUpdate();		
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	private void newInstance()  throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		setDefaultValues();
		prePopulateTreatmentGrd();
	}
	private void setDefaultValues()
	{
		Hcp hcpUser = (Hcp)domain.getHcpUser();
		if(hcpUser != null)
		{
			form.qmbAuthoringCP().newRow(hcpUser, hcpUser.getName().toString());
			form.qmbAuthoringCP().setValue(hcpUser);
		}
		form.dtimAuthoring().setValue(new DateTime());		
	}
	protected void onQmbAuthoringCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		setAuthoringCP(value);
	}
	private void setAuthoringCP(String value)
	{
		form.qmbAuthoringCP().clear();
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHCPs(filter);
		if(coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				Hcp med = coll.get(i);
				form.qmbAuthoringCP().newRow(med, med.toString());			
			}
			
			if (coll.size() == 1)
				form.qmbAuthoringCP().setValue(coll.get(0));
			else if (coll.size() > 1)
				form.qmbAuthoringCP().showOpened();
		}
	}
	
	protected void onRecbrContactValueChanged() throws PresentationLogicException 
	{
		browseRecord();			
	}
	private void updateBrowseInformation()
	{
		form.lblBrowserStatus().setValue(form.recbrContact().getRecordState("Assessment", "Assessments"));
	}
	private void browseRecord()
	{
		clearControls();
		updateBrowseInformation();
		if(form.recbrContact().getValue() instanceof ClinicalContactShortVo)
		{
			form.getLocalContext().setRespiratoryTreatment(domain.getRespiratoryTreatment((ClinicalContactShortVo) form.recbrContact().getValue()));			
			populateInstanceControls();
		}
		
		isRecordEditable();
	}
	private void isRecordEditable()
	{
		if(form.recbrContact().getValue() instanceof ClinicalContactShortVo)
		{
			ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recbrContact().getValue();
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && voClinicalContact.getID_ClinicalContact().equals(form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact()))
				displayButtonsForRecord();
			else
				displayButtons(false, false);
		}
		else
		{
			displayButtons(false, false);
		}
		
	}
	private void displayButtonsForRecord()
	{
		if(form.getLocalContext().getRespiratoryTreatment() == null)
			displayButtons(true, false);
		else
			displayButtons(false, true);
		
	}
	private void displayButtons(boolean newVisible, boolean updateVisible)
	{
		form.btnNew().setVisible(newVisible);
		form.btnUpdate().setVisible(updateVisible);
	}
}
