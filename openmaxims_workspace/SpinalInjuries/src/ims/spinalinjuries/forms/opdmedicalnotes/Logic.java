//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.36 build 2109.20214)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.opdmedicalnotes;

import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.generalmedical.vo.OPDGenNotesShortVo;
import ims.generalmedical.vo.OPDGenNotesShortVoCollection;
import ims.generalmedical.vo.OPDGenNotesVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		if (voPatShort == null) 
			throw new FormOpenException("Error: Patient not selected.");

		form.getLocalContext().setSelectedCareContextShort(form.getGlobalContext().Core.getCurrentCareContext());
		
		open();
	}

	private void open() 
	{
		clearScreen();
		form.recbrOPDMedicalNotes().setEnabled(true);
		form.setMode(FormMode.VIEW);	
	
		fillRecordBrowser();
	}
	
	private void fillRecordBrowser()
	{
		form.recbrOPDMedicalNotes().clear();
		
		OPDGenNotesShortVoCollection voGenNotesColl = domain.listOPDGenNotesByEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
	
		voGenNotesColl = isCareContextPresent(voGenNotesColl);
		if(voGenNotesColl != null)
		{
			for(int i=0; i< voGenNotesColl.size(); i++)
			{
				OPDGenNotesShortVo voOPDGenNotes = voGenNotesColl.get(i);
				CareContextShortVo voCareContext = voOPDGenNotes.getCareContext();
				loadCareContextDetails(voCareContext);
			}
		}
		
		browseRecord();
	}

	private OPDGenNotesShortVoCollection isCareContextPresent(OPDGenNotesShortVoCollection voGenNotesColl)
	{
		boolean currentCareContextFound = false;
		if(voGenNotesColl != null)
		{
			for(int i=0; i< voGenNotesColl.size(); i++)
			{
				CareContextShortVo voNotesCareContext = voGenNotesColl.get(i).getCareContext();
				if(voNotesCareContext.getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
					currentCareContextFound = true;
			}
		}
		
		if(!currentCareContextFound)
		{
			OPDGenNotesShortVo voOPDGenNotesShortVo = new OPDGenNotesShortVo();
			voOPDGenNotesShortVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if(voGenNotesColl == null)
				voGenNotesColl = new OPDGenNotesShortVoCollection();
			voGenNotesColl.add(voOPDGenNotesShortVo);
			voGenNotesColl.sort(SortOrder.DESCENDING);
		}
		return voGenNotesColl;
	}

	private boolean loadCareContextDetails(CareContextShortVo voCareContext)
	{
		if(voCareContext.getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
		{
			form.recbrOPDMedicalNotes().newRow(voCareContext, voCareContext.getRecordBrowserText(), Color.Green);
			form.recbrOPDMedicalNotes().setValue(voCareContext);
			return true;
		}
		else
		{
			form.recbrOPDMedicalNotes().newRow(voCareContext, voCareContext.getRecordBrowserText());
		}
		return false;
	}

	private void browseRecord()
	{
		clearScreen();
		updateBrowseInformation();

		if(form.recbrOPDMedicalNotes().getValue() != null)
		{			
			if(form.recbrOPDMedicalNotes().getValue() instanceof CareContextShortVo)
				form.getLocalContext().setvoOPDGenNotes(domain.getOPDGenNotesByCareContext((CareContextLiteVo) form.recbrOPDMedicalNotes().getValue()));

			populateScreenFromData();
		}
		checkRecordIsEditable();
	}

	private void updateBrowseInformation()
	{
		form.lblBrowser().setValue(form.recbrOPDMedicalNotes().getRecordState("Assessment", "Assessments"));
	}

	private void checkRecordIsEditable()
	{		
		if(form.recbrOPDMedicalNotes().getValue() != null)
		{
			if(form.recbrOPDMedicalNotes().getValue() instanceof CareContextShortVo)
			{
				CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrOPDMedicalNotes().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()))
				{
					activateButtons(true);
					showButtons();
				}
				else
					activateButtons(false);
			}
		}
	}

	private void showButtons()
	{
		if (form.getLocalContext().getSelectedCareContextShort().equals(form.getGlobalContext().Core.getCurrentCareContext()))
		{
			if (form.getLocalContext().getvoOPDGenNotesIsNotNull())
			{
				form.btnNew().setVisible(false);
				form.btnNew().setEnabled(false);
				form.btnUpdate().setVisible(true);
				form.btnUpdate().setEnabled(true);
			}
			else
			{
				form.btnUpdate().setVisible(false);
				form.btnUpdate().setEnabled(false);
				form.btnNew().setVisible(true);
				form.btnNew().setEnabled(true);
			}
		}
	}
	
	private void populateDataFromScreen()
	{
		OPDGenNotesVo voOPDGenNotes = form.getLocalContext().getvoOPDGenNotes();
			
		if (voOPDGenNotes == null)
			voOPDGenNotes = new OPDGenNotesVo();
		
		voOPDGenNotes.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		
		voOPDGenNotes.setAutonomicDysreflexia(form.cmbAutoDysreflexia().getValue() != null ? form.cmbAutoDysreflexia().getValue() : null);
		voOPDGenNotes.setModAshworth(form.txtModAshScale().getValue() != null ? form.txtModAshScale().getValue() : null);
		voOPDGenNotes.setSpasType(form.txtSpasType().getValue() != null ? form.txtSpasType().getValue() : null);
		voOPDGenNotes.setPainScale(form.txtPainScale().getValue() != null ? form.txtPainScale().getValue() : null);
		voOPDGenNotes.setGenNotes(form.txtNotes().getValue() != null ? form.txtNotes().getValue() : null);
		voOPDGenNotes.setEvidenceSyringomyelia(form.txtEvidSyringo().getValue() != null ? form.txtEvidSyringo().getValue() : null);
		voOPDGenNotes.setPlanAction(form.txtRemarks().getValue() != null ? form.txtRemarks().getValue() : null);
		voOPDGenNotes.setOPDNext(form.intNxtOpdVal().getValue() != null ? form.intNxtOpdVal().getValue() : null);
		voOPDGenNotes.setOpdNextUnits(form.cmbNxtOpdUnit().getValue() != null ? form.cmbNxtOpdUnit().getValue() : null);
			
		if (voOPDGenNotes.getCareContext() == null)
			voOPDGenNotes.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setvoOPDGenNotes(voOPDGenNotes);
	}

	private void populateScreenFromData() 
	{		
		OPDGenNotesVo voOPDGenNotes = form.getLocalContext().getvoOPDGenNotes();
		
		if (voOPDGenNotes != null)
		{
			if(voOPDGenNotes.getAuthoringInformationIsNotNull())
				form.customControlAuthoringInfo().setValue(voOPDGenNotes.getAuthoringInformation());

			if(voOPDGenNotes.getAutonomicDysreflexia() != null)
				form.cmbAutoDysreflexia().setValue(voOPDGenNotes.getAutonomicDysreflexia());
			
			if(voOPDGenNotes.getModAshworth() != null)
				form.txtModAshScale().setValue(voOPDGenNotes.getModAshworth());
			
			if(voOPDGenNotes.getSpasType() != null)
				form.txtSpasType().setValue(voOPDGenNotes.getSpasType());
			
			if(voOPDGenNotes.getPainScale() != null)
				form.txtPainScale().setValue(voOPDGenNotes.getPainScale());
			
			if(voOPDGenNotes.getGenNotes() != null)
				form.txtNotes().setValue(voOPDGenNotes.getGenNotes());
			
			if(voOPDGenNotes.getEvidenceSyringomyelia() != null)
				form.txtEvidSyringo().setValue(voOPDGenNotes.getEvidenceSyringomyelia());

			if (voOPDGenNotes.getPlanAction() != null)		
				form.txtRemarks().setValue(voOPDGenNotes.getPlanAction());
				
			if (voOPDGenNotes.getOPDNext()!= null)		
				form.intNxtOpdVal().setValue(voOPDGenNotes.getOPDNext());
				
			if (voOPDGenNotes.getOpdNextUnits() != null)		
				form.cmbNxtOpdUnit().setValue(voOPDGenNotes.getOpdNextUnits());
		}
	}
	
	private void clearScreen() 
	{
		form.customControlAuthoringInfo().setValue(null);
		
		form.cmbAutoDysreflexia().setValue(null);
		form.txtModAshScale().setValue(null);
		form.txtSpasType().setValue(null);
		form.txtPainScale().setValue(null);
		form.txtNotes().setValue(null);
		form.txtEvidSyringo().setValue(null);

		form.txtRemarks().setValue(null);
		form.intNxtOpdVal().setValue(null);
		form.cmbNxtOpdUnit().setValue(null);
	}

	protected void onFormClosing(ims.framework.delegates.CancelArgs args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	protected void onBMusculoskeletalInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().SpinalInjuries.MedMskJointsBonesDialog);
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.recbrOPDMedicalNotes().setEnabled(false);
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(false);
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDataFromScreen();
		
		OPDGenNotesVo voOPDGenNotes = form.getLocalContext().getvoOPDGenNotes();
		try
		{
			String[] messages = voOPDGenNotes.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			domain.saveOPDGenNotesVo(voOPDGenNotes);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;				
		}
		
		open();
	}
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.customControlAuthoringInfo().initializeComponent();

		form.btnUpdate().setEnabled(false);
		form.recbrOPDMedicalNotes().setEnabled(false);
		form.setMode(FormMode.EDIT);
		enableAuthoringControls(true);
	}

	private void enableAuthoringControls(boolean enable)
	{
		form.setcustomControlAuthoringInfoEnabled(enable);
	}

	protected void onRecbrOPDMedicalNotesValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
	
	private void activateButtons(boolean visible)
	{
		form.btnNew().setVisible(visible);
		form.btnNew().setEnabled(visible);
		form.btnUpdate().setVisible(visible);
		form.btnUpdate().setEnabled(visible);
	}

	protected void onBtnWheelChairClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Therapies.WheelchairDetailsDialog);
	}

	protected void onBtnMusculoskeletalInfoClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().SpinalInjuries.MedMskJointsBonesDialog);
	}
}
