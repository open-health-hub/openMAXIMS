//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.nurassessmentbreathing;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnBreathingContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbTracheostomyAccessoriesComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.TracheostomyAccessories value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyAccessories value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyAccessories value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyAccessories value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.TracheostomyAccessories value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.TracheostomyAccessories getValue()
			{
				return (ims.core.vo.lookups.TracheostomyAccessories)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.TracheostomyAccessories value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbTracheostomyTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.TracheostomyType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.TracheostomyType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.TracheostomyType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.TracheostomyType getValue()
			{
				return (ims.core.vo.lookups.TracheostomyType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.TracheostomyType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbVentilationModeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.VentilationMode value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.VentilationMode value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.VentilationMode value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.VentilationMode value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.VentilationMode value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.VentilationMode getValue()
			{
				return (ims.core.vo.lookups.VentilationMode)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.VentilationMode value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbVentilatorTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.VentilatorType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.VentilatorType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.VentilatorType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.VentilatorType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.VentilatorType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.VentilatorType getValue()
			{
				return (ims.core.vo.lookups.VentilatorType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.VentilatorType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbDysAcuteChronicComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.nursing.vo.lookups.BreathingAcuteChronic value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.nursing.vo.lookups.BreathingAcuteChronic value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.nursing.vo.lookups.BreathingAcuteChronic value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.nursing.vo.lookups.BreathingAcuteChronic value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.nursing.vo.lookups.BreathingAcuteChronic value)
			{
				return super.control.removeRow(value);
			}
			public ims.nursing.vo.lookups.BreathingAcuteChronic getValue()
			{
				return (ims.nursing.vo.lookups.BreathingAcuteChronic)super.control.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.BreathingAcuteChronic value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSmokingStatusComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.SmokingStatus value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.SmokingStatus value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.SmokingStatus getValue()
			{
				return (ims.core.vo.lookups.SmokingStatus)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.SmokingStatus value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdDyspnoeaRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDyspnoeaRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColDyspnoeaReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColDyspnoeaReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColDyspnoeaOpened()
			{
				super.row.showOpened(0);
			}
			public String getColDyspnoea()
			{
				return (String)super.row.get(0);
			}
			public void setColDyspnoea(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColDyspnoeaTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getColSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setColSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.lookups.BreathingDyspnoea getValue()
			{
				return (ims.nursing.vo.lookups.BreathingDyspnoea)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.BreathingDyspnoea value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDyspnoeaRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDyspnoeaRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDyspnoeaRow get(int index)
			{
				return new grdDyspnoeaRow(super.collection.get(index));
			}
			public grdDyspnoeaRow newRow()
			{
				return new grdDyspnoeaRow(super.collection.newRow());
			}
			public grdDyspnoeaRow newRow(boolean autoSelect)
			{
				return new grdDyspnoeaRow(super.collection.newRow(autoSelect));
			}
			public grdDyspnoeaRow newRowAt(int index)
			{
				return new grdDyspnoeaRow(super.collection.newRowAt(index));
			}
			public grdDyspnoeaRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDyspnoeaRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDyspnoeaGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.lookups.BreathingDyspnoea[] getValues()
			{
				ims.nursing.vo.lookups.BreathingDyspnoea[] listOfValues = new ims.nursing.vo.lookups.BreathingDyspnoea[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.lookups.BreathingDyspnoea getValue()
			{
				return (ims.nursing.vo.lookups.BreathingDyspnoea)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.BreathingDyspnoea value)
			{
				super.grid.setValue(value);
			}
			public grdDyspnoeaRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDyspnoeaRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDyspnoeaRowCollection getRows()
			{
				return new grdDyspnoeaRowCollection(super.grid.getRows());
			}
			public grdDyspnoeaRow getRowByValue(ims.nursing.vo.lookups.BreathingDyspnoea value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDyspnoeaRow(row);
			}
			public void setColDyspnoeaHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColDyspnoeaHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdSmokingRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSmokingRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColStatusReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColStatusOpened()
			{
				super.row.showOpened(0);
			}
			public ims.core.vo.lookups.SmokingCurrentHistoric getColStatus()
			{
				return (ims.core.vo.lookups.SmokingCurrentHistoric)super.row.get(0);
			}
			public void setColStatus(ims.core.vo.lookups.SmokingCurrentHistoric value)
			{
				super.row.set(0, value, true);
			}
			public void setCellColStatusTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColWhatReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColWhatReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColWhatOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.SmokingWhat getColWhat()
			{
				return (ims.core.vo.lookups.SmokingWhat)super.row.get(1);
			}
			public void setColWhat(ims.core.vo.lookups.SmokingWhat value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColWhatTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColAmtReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColAmtReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColAmtOpened()
			{
				super.row.showOpened(2);
			}
			public Integer getColAmt()
			{
				return (Integer)super.row.get(2);
			}
			public void setColAmt(Integer value)
			{
				super.row.set(2, value);
			}
			public void setCellColAmtTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColNrYrsReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColNrYrsReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColNrYrsOpened()
			{
				super.row.showOpened(3);
			}
			public Integer getColNrYrs()
			{
				return (Integer)super.row.get(3);
			}
			public void setColNrYrs(Integer value)
			{
				super.row.set(3, value);
			}
			public void setCellColNrYrsTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColWhenStoppedReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColWhenStoppedReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void showColWhenStoppedOpened()
			{
				super.row.showOpened(4);
			}
			public ims.framework.utils.PartialDate getColWhenStopped()
			{
				return (ims.framework.utils.PartialDate)super.row.get(4);
			}
			public void setColWhenStopped(ims.framework.utils.PartialDate value)
			{
				super.row.set(4, value);
			}
			public void setCellColWhenStoppedTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public ims.core.vo.SmokingDetails getValue()
			{
				return (ims.core.vo.SmokingDetails)super.row.getValue();
			}
			public void setValue(ims.core.vo.SmokingDetails value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSmokingRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSmokingRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSmokingRow get(int index)
			{
				return new grdSmokingRow(super.collection.get(index));
			}
			public grdSmokingRow newRow()
			{
				return new grdSmokingRow(super.collection.newRow());
			}
			public grdSmokingRow newRow(boolean autoSelect)
			{
				return new grdSmokingRow(super.collection.newRow(autoSelect));
			}
			public grdSmokingRow newRowAt(int index)
			{
				return new grdSmokingRow(super.collection.newRowAt(index));
			}
			public grdSmokingRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSmokingRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSmokingGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.core.vo.SmokingDetails[] getValues()
			{
				ims.core.vo.SmokingDetails[] listOfValues = new ims.core.vo.SmokingDetails[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.core.vo.SmokingDetails getValue()
			{
				return (ims.core.vo.SmokingDetails)super.grid.getValue();
			}
			public void setValue(ims.core.vo.SmokingDetails value)
			{
				super.grid.setValue(value);
			}
			public grdSmokingRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSmokingRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSmokingRowCollection getRows()
			{
				return new grdSmokingRowCollection(super.grid.getRows());
			}
			public grdSmokingRow getRowByValue(ims.core.vo.SmokingDetails value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSmokingRow(row);
			}
			public void setColStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox ColStatusComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setColWhatHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColWhatHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColWhatComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
			public void setColAmtHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColAmtHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColNrYrsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColNrYrsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColWhenStoppedHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColWhenStoppedHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
		}
		public static class grdPhysioTreatmentRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdPhysioTreatmentRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColPhysiotherapyReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColPhysiotherapyReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColPhysiotherapyOpened()
			{
				super.row.showOpened(0);
			}
			public String getColPhysiotherapy()
			{
				return (String)super.row.get(0);
			}
			public void setColPhysiotherapy(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColPhysiotherapyTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getColSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setColSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.lookups.BreathingTreatment getValue()
			{
				return (ims.nursing.vo.lookups.BreathingTreatment)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.BreathingTreatment value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdPhysioTreatmentRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdPhysioTreatmentRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdPhysioTreatmentRow get(int index)
			{
				return new grdPhysioTreatmentRow(super.collection.get(index));
			}
			public grdPhysioTreatmentRow newRow()
			{
				return new grdPhysioTreatmentRow(super.collection.newRow());
			}
			public grdPhysioTreatmentRow newRow(boolean autoSelect)
			{
				return new grdPhysioTreatmentRow(super.collection.newRow(autoSelect));
			}
			public grdPhysioTreatmentRow newRowAt(int index)
			{
				return new grdPhysioTreatmentRow(super.collection.newRowAt(index));
			}
			public grdPhysioTreatmentRow newRowAt(int index, boolean autoSelect)
			{
				return new grdPhysioTreatmentRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdPhysioTreatmentGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.lookups.BreathingTreatment[] getValues()
			{
				ims.nursing.vo.lookups.BreathingTreatment[] listOfValues = new ims.nursing.vo.lookups.BreathingTreatment[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.lookups.BreathingTreatment getValue()
			{
				return (ims.nursing.vo.lookups.BreathingTreatment)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.lookups.BreathingTreatment value)
			{
				super.grid.setValue(value);
			}
			public grdPhysioTreatmentRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdPhysioTreatmentRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdPhysioTreatmentRowCollection getRows()
			{
				return new grdPhysioTreatmentRowCollection(super.grid.getRows());
			}
			public grdPhysioTreatmentRow getRowByValue(ims.nursing.vo.lookups.BreathingTreatment value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdPhysioTreatmentRow(row);
			}
			public void setColPhysiotherapyHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColPhysiotherapyHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdCarePlanRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdCarePlanRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolCarePlansReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolCarePlansReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolCarePlansOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolCarePlans()
			{
				return (String)super.row.get(0);
			}
			public void setcolCarePlans(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolCarePlansTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.row.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdCarePlanRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdCarePlanRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdCarePlanRow get(int index)
			{
				return new grdCarePlanRow(super.collection.get(index));
			}
			public grdCarePlanRow newRow()
			{
				return new grdCarePlanRow(super.collection.newRow());
			}
			public grdCarePlanRow newRow(boolean autoSelect)
			{
				return new grdCarePlanRow(super.collection.newRow(autoSelect));
			}
			public grdCarePlanRow newRowAt(int index)
			{
				return new grdCarePlanRow(super.collection.newRowAt(index));
			}
			public grdCarePlanRow newRowAt(int index, boolean autoSelect)
			{
				return new grdCarePlanRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdCarePlanGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.nursing.vo.CarePlanTemplateTitle[] getValues()
			{
				ims.nursing.vo.CarePlanTemplateTitle[] listOfValues = new ims.nursing.vo.CarePlanTemplateTitle[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.nursing.vo.CarePlanTemplateTitle getValue()
			{
				return (ims.nursing.vo.CarePlanTemplateTitle)super.grid.getValue();
			}
			public void setValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				super.grid.setValue(value);
			}
			public grdCarePlanRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdCarePlanRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdCarePlanRowCollection getRows()
			{
				return new grdCarePlanRowCollection(super.grid.getRows());
			}
			public grdCarePlanRow getRowByValue(ims.nursing.vo.CarePlanTemplateTitle value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdCarePlanRow(row);
			}
			public void setcolCarePlansHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolCarePlansHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdMedicationRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdMedicationRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColMedicationReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColMedicationReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColMedicationOpened()
			{
				super.row.showOpened(0);
			}
			public ims.framework.controls.GridMutableComboBox getColMedication()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 0);
			}
			public void setCellColMedicationTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColRouteReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColRouteReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColRouteOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.MedicationRoute getColRoute()
			{
				return (ims.core.vo.lookups.MedicationRoute)super.row.get(1);
			}
			public void setColRoute(ims.core.vo.lookups.MedicationRoute value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColRouteTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColDoseReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColDoseReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColDoseOpened()
			{
				super.row.showOpened(2);
			}
			public String getColDose()
			{
				return (String)super.row.get(2);
			}
			public void setColDose(String value)
			{
				super.row.set(2, value);
			}
			public void setCellColDoseTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColFrequencyReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColFrequencyReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void showColFrequencyOpened()
			{
				super.row.showOpened(3);
			}
			public ims.core.vo.lookups.MedicationFrequency getColFrequency()
			{
				return (ims.core.vo.lookups.MedicationFrequency)super.row.get(3);
			}
			public void setColFrequency(ims.core.vo.lookups.MedicationFrequency value)
			{
				super.row.set(3, value, true);
			}
			public void setCellColFrequencyTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public ims.core.vo.PatientMedicationVo getValue()
			{
				return (ims.core.vo.PatientMedicationVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.PatientMedicationVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdMedicationRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdMedicationRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdMedicationRow get(int index)
			{
				return new grdMedicationRow(super.collection.get(index));
			}
			public grdMedicationRow newRow()
			{
				return new grdMedicationRow(super.collection.newRow());
			}
			public grdMedicationRow newRow(boolean autoSelect)
			{
				return new grdMedicationRow(super.collection.newRow(autoSelect));
			}
			public grdMedicationRow newRowAt(int index)
			{
				return new grdMedicationRow(super.collection.newRowAt(index));
			}
			public grdMedicationRow newRowAt(int index, boolean autoSelect)
			{
				return new grdMedicationRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdMedicationGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.core.vo.PatientMedicationVo[] getValues()
			{
				ims.core.vo.PatientMedicationVo[] listOfValues = new ims.core.vo.PatientMedicationVo[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.core.vo.PatientMedicationVo getValue()
			{
				return (ims.core.vo.PatientMedicationVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.PatientMedicationVo value)
			{
				super.grid.setValue(value);
			}
			public grdMedicationRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdMedicationRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdMedicationRowCollection getRows()
			{
				return new grdMedicationRowCollection(super.grid.getRows());
			}
			public grdMedicationRow getRowByValue(ims.core.vo.PatientMedicationVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdMedicationRow(row);
			}
			public void setColMedicationHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColMedicationHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColRouteHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColRouteHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColRouteComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
			public void setColDoseHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColDoseHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColFrequencyHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColFrequencyHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public GridComboBox ColFrequencyComboBox()
			{
				return new GridComboBox(super.grid, 3);
			}
		}
	
		public static class ansRequiresTrachyAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansPatientVentilatedAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansBreathsSpontaneouslyAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansPatientIntubatedAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
	
		public static class ansDifficultyBreathingAnswerBox extends AnswerBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void clear()
			{
				control.clear();
			}
			public java.util.ArrayList getValues()
			{
				return control.getValues();
			}
			public void addOption(ims.core.vo.lookups.YesNoUnknown option)
			{
				control.addOption(option);
			}
			public ims.core.vo.lookups.YesNoUnknown getValue()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 793, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Ventilation / Tracheostomy", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 9, 16, 341, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Dyspnoea", new Integer(2), ""}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 536, 432, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Smoking", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 414, 483, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date removed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 414, 456, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date next change:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 48, 483, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date last change:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 48, 456, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date inserted:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 390, 264, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tracheostomy:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 414, 288, 150, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requires a tracheostomy:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 414, 312, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 414, 336, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accessories:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 414, 360, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Size of CPAP Valve (cm):", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 414, 385, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Size of tracheostomy:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 24, 264, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ventilation:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 48, 288, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Breaths spontaneously:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 48, 312, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient intubated:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 48, 336, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient ventilated:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 48, 360, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type of ventilator:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 208, 312, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "via", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 48, 408, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notes:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 48, 385, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mode of ventilation:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 665, 832, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Section Complete?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 25, 186, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is This:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 25, 48, 280, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Does the patient experience any  difficulty when", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 25, 64, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, " breathing?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 24, 568, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Smoking Status:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 721, 848, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 641, 848, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 598, 358, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 232, 310, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(22), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 184, 408, 606, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 598, 383, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 598, 481, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 598, 454, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 184, 481, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 184, 454, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 598, 334, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_cmbTracheostomyAccessoriesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbTracheostomyAccessoriesTemp);
			cmbTracheostomyAccessoriesComboBox cmbTracheostomyAccessories = (cmbTracheostomyAccessoriesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTracheostomyAccessoriesComboBox.class, m_cmbTracheostomyAccessoriesTemp);
			super.addComboBox(cmbTracheostomyAccessories);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 598, 310, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			ComboBox m_cmbTracheostomyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbTracheostomyTypeTemp);
			cmbTracheostomyTypeComboBox cmbTracheostomyType = (cmbTracheostomyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTracheostomyTypeComboBox.class, m_cmbTracheostomyTypeTemp);
			super.addComboBox(cmbTracheostomyType);
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 184, 383, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbVentilationModeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbVentilationModeTemp);
			cmbVentilationModeComboBox cmbVentilationMode = (cmbVentilationModeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVentilationModeComboBox.class, m_cmbVentilationModeTemp);
			super.addComboBox(cmbVentilationMode);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 184, 358, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbVentilatorTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbVentilatorTypeTemp);
			cmbVentilatorTypeComboBox cmbVentilatorType = (cmbVentilatorTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVentilatorTypeComboBox.class, m_cmbVentilatorTypeTemp);
			super.addComboBox(cmbVentilatorType);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 81, 184, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbDysAcuteChronicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbDysAcuteChronicTemp);
			cmbDysAcuteChronicComboBox cmbDysAcuteChronic = (cmbDysAcuteChronicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDysAcuteChronicComboBox.class, m_cmbDysAcuteChronicTemp);
			super.addComboBox(cmbDysAcuteChronic);
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 136, 568, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSmokingStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSmokingStatusTemp);
			cmbSmokingStatusComboBox cmbSmokingStatus = (cmbSmokingStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSmokingStatusComboBox.class, m_cmbSmokingStatusTemp);
			super.addComboBox(cmbSmokingStatus);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 777, 832, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 25, 88, 312, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdDyspnoeaTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDyspnoeaTemp);
			grdDyspnoeaGrid grdDyspnoea = (grdDyspnoeaGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDyspnoeaGrid.class, m_grdDyspnoeaTemp);
			grdDyspnoea.addStringColumn("Dyspnoea", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdDyspnoea.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdDyspnoea);
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 24, 600, 400, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdSmokingTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuSmokingGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSmokingTemp);
			grdSmokingGrid grdSmoking = (grdSmokingGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSmokingGrid.class, m_grdSmokingTemp);
			grdSmoking.addComboBoxColumn("Status", 0, 0, 75, false, true, true, false, true, -1);
			grdSmoking.addComboBoxColumn("What", 0, 0, 110, false, true, false, false, true, -1);
			grdSmoking.addIntColumn("Nr/Day", 0, 0, 60, false, true, null, false, 0, true);
			grdSmoking.addIntColumn("Nr of Yrs", 0, 0, 55, false, true, null, false, 0, true);
			grdSmoking.addPartialDateColumn("When Stopped", 1, 0, -1, false, true, null, false, 0, true);
			super.addGrid(grdSmoking);
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 456, 544, 345, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdPhysioTreatmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdPhysioTreatmentTemp);
			grdPhysioTreatmentGrid grdPhysioTreatment = (grdPhysioTreatmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhysioTreatmentGrid.class, m_grdPhysioTreatmentTemp);
			grdPhysioTreatment.addStringColumn("Physiotherapy Treatment", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdPhysioTreatment.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdPhysioTreatment);
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 712, 793, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdCarePlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdCarePlanTemp);
			grdCarePlanGrid grdCarePlan = (grdCarePlanGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCarePlanGrid.class, m_grdCarePlanTemp);
			grdCarePlan.addStringColumn("Care Plans", 0, 0, 700, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdCarePlan.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdCarePlan);
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 360, 16, 440, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdMedicationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMedicationGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdMedicationTemp);
			grdMedicationGrid grdMedication = (grdMedicationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationGrid.class, m_grdMedicationTemp);
			grdMedication.addMutableComboBoxColumn("Medication", 0, 0, 200, false, true, true, false, true, true, -1);
			grdMedication.addComboBoxColumn("Route", 0, 0, 90, false, true, false, false, true, -1);
			grdMedication.addStringColumn("Dose", 0, 0, 50, false, false, 0, 7, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdMedication.addComboBoxColumn("Frequency", 0, 0, -1, false, true, false, false, true, -1);
			super.addGrid(grdMedication);
	
			// AnswerBox Controls
			RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 598, 288, 25, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			AnswerBox tmpansRequiresTrachy = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansRequiresTrachy);
			ansRequiresTrachyAnswerBox ansRequiresTrachy = (ansRequiresTrachyAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansRequiresTrachyAnswerBox.class, tmpansRequiresTrachy);
			super.addAnswerBox(ansRequiresTrachy);
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 184, 336, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansPatientVentilated = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansPatientVentilated);
			ansPatientVentilatedAnswerBox ansPatientVentilated = (ansPatientVentilatedAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansPatientVentilatedAnswerBox.class, tmpansPatientVentilated);
			super.addAnswerBox(ansPatientVentilated);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 184, 288, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansBreathsSpontaneously = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansBreathsSpontaneously);
			ansBreathsSpontaneouslyAnswerBox ansBreathsSpontaneously = (ansBreathsSpontaneouslyAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansBreathsSpontaneouslyAnswerBox.class, tmpansBreathsSpontaneously);
			super.addAnswerBox(ansBreathsSpontaneously);
			RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 184, 312, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansPatientIntubated = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansPatientIntubated);
			ansPatientIntubatedAnswerBox ansPatientIntubated = (ansPatientIntubatedAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansPatientIntubatedAnswerBox.class, tmpansPatientIntubated);
			super.addAnswerBox(ansPatientIntubated);
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 313, 48, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			AnswerBox tmpansDifficultyBreathing = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
			super.addControl(tmpansDifficultyBreathing);
			ansDifficultyBreathingAnswerBox ansDifficultyBreathing = (ansDifficultyBreathingAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansDifficultyBreathingAnswerBox.class, tmpansDifficultyBreathing);
			super.addAnswerBox(ansDifficultyBreathing);
		}
		public Button btnCancel()
		{
			return (Button)super.getControl(26);
		}
		public Button btnSave()
		{
			return (Button)super.getControl(27);
		}
		public TextBox txtCPAP()
		{
			return (TextBox)super.getControl(28);
		}
		public TextBox txtIntubatedVia()
		{
			return (TextBox)super.getControl(29);
		}
		public TextBox txtNotes()
		{
			return (TextBox)super.getControl(30);
		}
		public TextBox txtTracheostomy()
		{
			return (TextBox)super.getControl(31);
		}
		public DateControl dteRemoved()
		{
			return (DateControl)super.getControl(32);
		}
		public DateControl dteNextChange()
		{
			return (DateControl)super.getControl(33);
		}
		public DateControl dteLastChange()
		{
			return (DateControl)super.getControl(34);
		}
		public DateControl dteInserted()
		{
			return (DateControl)super.getControl(35);
		}
		public cmbTracheostomyAccessoriesComboBox cmbTracheostomyAccessories()
		{
			return (cmbTracheostomyAccessoriesComboBox)super.getComboBox(0);
		}
		public cmbTracheostomyTypeComboBox cmbTracheostomyType()
		{
			return (cmbTracheostomyTypeComboBox)super.getComboBox(1);
		}
		public cmbVentilationModeComboBox cmbVentilationMode()
		{
			return (cmbVentilationModeComboBox)super.getComboBox(2);
		}
		public cmbVentilatorTypeComboBox cmbVentilatorType()
		{
			return (cmbVentilatorTypeComboBox)super.getComboBox(3);
		}
		public cmbDysAcuteChronicComboBox cmbDysAcuteChronic()
		{
			return (cmbDysAcuteChronicComboBox)super.getComboBox(4);
		}
		public cmbSmokingStatusComboBox cmbSmokingStatus()
		{
			return (cmbSmokingStatusComboBox)super.getComboBox(5);
		}
		public CheckBox chkSectionComplete()
		{
			return (CheckBox)super.getControl(42);
		}
		public grdDyspnoeaGrid grdDyspnoea()
		{
			return (grdDyspnoeaGrid)super.getGrid(0);
		}
		public grdSmokingGrid grdSmoking()
		{
			return (grdSmokingGrid)super.getGrid(1);
		}
		public grdPhysioTreatmentGrid grdPhysioTreatment()
		{
			return (grdPhysioTreatmentGrid)super.getGrid(2);
		}
		public grdCarePlanGrid grdCarePlan()
		{
			return (grdCarePlanGrid)super.getGrid(3);
		}
		public grdMedicationGrid grdMedication()
		{
			return (grdMedicationGrid)super.getGrid(4);
		}
		public ansRequiresTrachyAnswerBox ansRequiresTrachy()
		{
			return (ansRequiresTrachyAnswerBox)super.getAnswerBox(0);
		}
		public ansPatientVentilatedAnswerBox ansPatientVentilated()
		{
			return (ansPatientVentilatedAnswerBox)super.getAnswerBox(1);
		}
		public ansBreathsSpontaneouslyAnswerBox ansBreathsSpontaneously()
		{
			return (ansBreathsSpontaneouslyAnswerBox)super.getAnswerBox(2);
		}
		public ansPatientIntubatedAnswerBox ansPatientIntubated()
		{
			return (ansPatientIntubatedAnswerBox)super.getAnswerBox(3);
		}
		public ansDifficultyBreathingAnswerBox ansDifficultyBreathing()
		{
			return (ansDifficultyBreathingAnswerBox)super.getAnswerBox(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuSmokingGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuSmokingGridADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuSmokingGrid.add(contextMenus.contextMenuSmokingGridADDItem);
		contextMenus.contextMenuSmokingGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuSmokingGrid.add(contextMenus.contextMenuSmokingGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuSmokingGrid);
		contextMenus.contextMenuMedicationGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuMedicationGridADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedicationGrid.add(contextMenus.contextMenuMedicationGridADDItem);
		contextMenus.contextMenuMedicationGridREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove ", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMedicationGrid.add(contextMenus.contextMenuMedicationGridREMOVEItem);
		form.registerMenu(contextMenus.contextMenuMedicationGrid);


		// Container Clasess
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 830, 580, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnBreathing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnBreathing);
		ctnBreathingContainer ctnBreathing = (ctnBreathingContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnBreathingContainer.class, m_ctnBreathing, factory);
		ims.framework.utils.SizeInfo m_ctnBreathingDesignSize = new ims.framework.utils.SizeInfo(830, 580);
		ims.framework.utils.SizeInfo m_ctnBreathingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper54.getWidth(), anchoringHelper54.getHeight());
		ctnBreathing.setContext(form, appForm, m_ctnBreathing, loader, this.getImages(), contextMenus, startControlID, m_ctnBreathingDesignSize, m_ctnBreathingRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnBreathing);

		// Label Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 24, 472, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 17, 15, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Copy previous assessment", Boolean.TRUE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 792, 16, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Info", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnBreathingContainer ctnBreathing()
	{
		return (ctnBreathingContainer)super.getContainer(0);
	}
	public CheckBox chkCopy()
	{
		return (CheckBox)super.getControl(2);
	}
	public Link lnkInfo()
	{
		return (Link)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				AdmissionAssessOverview = new LocalFormName(101100);
				CarePlanStep2 = new LocalFormName(101129);
				AssessmentInfo = new LocalFormName(101117);
			}
			public final FormName AdmissionAssessOverview;
			public final FormName CarePlanStep2;
			public final FormName AssessmentInfo;
		}

		public NursingForms Nursing;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Unknown = new ImageHelper(102102, "Images/Core/AnswerBox_Unknown.gif", new Integer(10), new Integer(10));
				AnswerBox_Clear = new ImageHelper(102104, "Images/Core/AnswerBox_Clear.jpg", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Unknown;
			public final ims.framework.utils.Image AnswerBox_Clear;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Assessment = new ims.framework.ContextVariable("Assessment", prefix + "_lv_SpinalInjuries.NurAssessmentBreathing.__internal_x_context__Assessment_" + componentIdentifier + "");
			cxl_AssessBreathing = new ims.framework.ContextVariable("AssessBreathing", prefix + "_lv_SpinalInjuries.NurAssessmentBreathing.__internal_x_context__AssessBreathing_" + componentIdentifier + "");
			cxl_PreviousAssBreath = new ims.framework.ContextVariable("PreviousAssBreath", prefix + "_lv_SpinalInjuries.NurAssessmentBreathing.__internal_x_context__PreviousAssBreath_" + componentIdentifier + "");
		}
		
		public boolean getAssessmentIsNotNull()
		{
			return !cxl_Assessment.getValueIsNull(context);
		}
		public ims.nursing.vo.AssessmentHeaderInfo getAssessment()
		{
			return (ims.nursing.vo.AssessmentHeaderInfo)cxl_Assessment.getValue(context);
		}
		public void setAssessment(ims.nursing.vo.AssessmentHeaderInfo value)
		{
			cxl_Assessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Assessment = null;
		public boolean getAssessBreathingIsNotNull()
		{
			return !cxl_AssessBreathing.getValueIsNull(context);
		}
		public ims.spinalinjuries.vo.NurAssessmentBreathingVo getAssessBreathing()
		{
			return (ims.spinalinjuries.vo.NurAssessmentBreathingVo)cxl_AssessBreathing.getValue(context);
		}
		public void setAssessBreathing(ims.spinalinjuries.vo.NurAssessmentBreathingVo value)
		{
			cxl_AssessBreathing.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssessBreathing = null;
		public boolean getPreviousAssBreathIsNotNull()
		{
			return !cxl_PreviousAssBreath.getValueIsNull(context);
		}
		public ims.spinalinjuries.vo.NurAssessmentBreathingVo getPreviousAssBreath()
		{
			return (ims.spinalinjuries.vo.NurAssessmentBreathingVo)cxl_PreviousAssBreath.getValue(context);
		}
		public void setPreviousAssBreath(ims.spinalinjuries.vo.NurAssessmentBreathingVo value)
		{
			cxl_PreviousAssBreath.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousAssBreath = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class SmokingGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int REMOVE = 2;
		}
		public void disableAllSmokingGridMenuItems()
		{
			this.contextMenuSmokingGridADDItem.setEnabled(false);
			this.contextMenuSmokingGridREMOVEItem.setEnabled(false);
		}
		public void hideAllSmokingGridMenuItems()
		{
			this.contextMenuSmokingGridADDItem.setVisible(false);
			this.contextMenuSmokingGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuSmokingGrid;
		public MenuItem getSmokingGridADDItem()
		{
			return this.contextMenuSmokingGridADDItem;
		}
		private MenuItem contextMenuSmokingGridADDItem;
		public MenuItem getSmokingGridREMOVEItem()
		{
			return this.contextMenuSmokingGridREMOVEItem;
		}
		private MenuItem contextMenuSmokingGridREMOVEItem;
		public final class MedicationGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllMedicationGridMenuItems()
		{
			this.contextMenuMedicationGridADDItem.setEnabled(false);
			this.contextMenuMedicationGridREMOVEItem.setEnabled(false);
		}
		public void hideAllMedicationGridMenuItems()
		{
			this.contextMenuMedicationGridADDItem.setVisible(false);
			this.contextMenuMedicationGridREMOVEItem.setVisible(false);
		}
		private Menu contextMenuMedicationGrid;
		public MenuItem getMedicationGridADDItem()
		{
			return this.contextMenuMedicationGridADDItem;
		}
		private MenuItem contextMenuMedicationGridADDItem;
		public MenuItem getMedicationGridREMOVEItem()
		{
			return this.contextMenuMedicationGridREMOVEItem;
		}
		private MenuItem contextMenuMedicationGridREMOVEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[78];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-ID", "ID_Assessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTTYPE", "AssessmentType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-ASSESSMENTSTATUS", "AssessmentStatus");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Nursing.AssessmentHeaderInfo", "BO-1015100000-DATETIMECOMPLETE", "DateTimeComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
