//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.medmskspinepath;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbModeofInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTypeOfInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMechanismofInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLevelofInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.VertebrallevelVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.VertebrallevelVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.VertebrallevelVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.VertebrallevelVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.VertebrallevelVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.VertebrallevelVo getValue()
		{
			return (ims.core.vo.VertebrallevelVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.VertebrallevelVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrPathologyRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdIndexRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIndexRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolLevelofInjuryReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolLevelofInjuryReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolLevelofInjuryOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolLevelofInjury()
		{
			return (String)super.row.get(0);
		}
		public void setcolLevelofInjury(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolLevelofInjuryTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolModeofInjuryReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolModeofInjuryReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolModeofInjuryOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolModeofInjury()
		{
			return (String)super.row.get(1);
		}
		public void setcolModeofInjury(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolModeofInjuryTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolTypeofInjuryReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolTypeofInjuryReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolTypeofInjuryOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolTypeofInjury()
		{
			return (String)super.row.get(2);
		}
		public void setcolTypeofInjury(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolTypeofInjuryTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolMechanismofInjuryReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolMechanismofInjuryReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolMechanismofInjuryOpened()
		{
			super.row.showOpened(3);
		}
		public String getcolMechanismofInjury()
		{
			return (String)super.row.get(3);
		}
		public void setcolMechanismofInjury(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolMechanismofInjuryTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolisPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolisPrimaryReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolisPrimaryOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.Image getcolisPrimary()
		{
			return (ims.framework.utils.Image)super.row.get(4);
		}
		public void setcolisPrimary(ims.framework.utils.Image value)
		{
			super.row.set(4, value);
		}
		public void setCellcolisPrimaryTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.generalmedical.vo.MSKSpinePathologyFindingVo getValue()
		{
			return (ims.generalmedical.vo.MSKSpinePathologyFindingVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.MSKSpinePathologyFindingVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIndexRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIndexRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIndexRow get(int index)
		{
			return new grdIndexRow(super.collection.get(index));
		}
		public grdIndexRow newRow()
		{
			return new grdIndexRow(super.collection.newRow());
		}
		public grdIndexRow newRow(boolean autoSelect)
		{
			return new grdIndexRow(super.collection.newRow(autoSelect));
		}
		public grdIndexRow newRowAt(int index)
		{
			return new grdIndexRow(super.collection.newRowAt(index));
		}
		public grdIndexRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIndexRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIndexGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.generalmedical.vo.MSKSpinePathologyFindingVo[] getValues()
		{
			ims.generalmedical.vo.MSKSpinePathologyFindingVo[] listOfValues = new ims.generalmedical.vo.MSKSpinePathologyFindingVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.MSKSpinePathologyFindingVo getValue()
		{
			return (ims.generalmedical.vo.MSKSpinePathologyFindingVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.MSKSpinePathologyFindingVo value)
		{
			super.grid.setValue(value);
		}
		public grdIndexRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIndexRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIndexRowCollection getRows()
		{
			return new grdIndexRowCollection(super.grid.getRows());
		}
		public grdIndexRow getRowByValue(ims.generalmedical.vo.MSKSpinePathologyFindingVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIndexRow(row);
		}
		public void setcolLevelofInjuryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolLevelofInjuryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolModeofInjuryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolModeofInjuryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolTypeofInjuryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolTypeofInjuryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolMechanismofInjuryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolMechanismofInjuryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolisPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolisPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getfinding();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 416, 816, 168, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 440, 392, 63, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(24), new Integer(440), new Integer(392), new Integer(63), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 4), m_ccAuthoringForm, instance1 } );
		ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 4), m_ccAuthoringForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAuthoringControl);
		Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 728, 40, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 32, 512, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Mode of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 32, 544, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 432, 448, 126, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Mechanism of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 432, 480, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Level of Injury:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 752, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 664, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 104, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 161, 512, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbModeofInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbModeofInjuryTemp);
		cmbModeofInjuryComboBox cmbModeofInjury = (cmbModeofInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbModeofInjuryComboBox.class, m_cmbModeofInjuryTemp);
		super.addComboBox(cmbModeofInjury);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 161, 544, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbTypeOfInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTypeOfInjuryTemp);
		cmbTypeOfInjuryComboBox cmbTypeOfInjury = (cmbTypeOfInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeOfInjuryComboBox.class, m_cmbTypeOfInjuryTemp);
		super.addComboBox(cmbTypeOfInjury);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 568, 448, 232, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbMechanismofInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbMechanismofInjuryTemp);
		cmbMechanismofInjuryComboBox cmbMechanismofInjury = (cmbMechanismofInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMechanismofInjuryComboBox.class, m_cmbMechanismofInjuryTemp);
		super.addComboBox(cmbMechanismofInjury);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 568, 480, 232, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbLevelofInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbLevelofInjuryTemp);
		cmbLevelofInjuryComboBox cmbLevelofInjury = (cmbLevelofInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLevelofInjuryComboBox.class, m_cmbLevelofInjuryTemp);
		super.addComboBox(cmbLevelofInjury);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrPathologyTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrPathologyTemp);
		recbrPathologyRecordBrowser recbrPathology = (recbrPathologyRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrPathologyRecordBrowser.class, m_recbrPathologyTemp);
		super.addRecordBrowser(recbrPathology);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 432, 536, 136, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Active", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 432, 512, 136, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Primary Pathology", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 432, 560, 136, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Add to Problems", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 816, 336, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdIndexTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdIndexTemp);
		grdIndexGrid grdIndex = (grdIndexGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIndexGrid.class, m_grdIndexTemp);
		grdIndex.addStringColumn("Level of Injury", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdIndex.addStringColumn("Mode of Injury", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdIndex.addStringColumn("Type of Injury", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdIndex.addStringColumn("Mechanism of Injury", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdIndex.addImageColumn("Primary", 0, 0, -1, true, 0);
		super.addGrid(grdIndex);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlPathology()
	{
		return (Panel)super.getControl(1);
	}
	public ims.core.forms.authoringinfo.IComponent ccAuthoring()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccAuthoringVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccAuthoringVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccAuthoringEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccAuthoringEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Label lblBrowser()
	{
		return (Label)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(11);
	}
	public cmbModeofInjuryComboBox cmbModeofInjury()
	{
		return (cmbModeofInjuryComboBox)super.getComboBox(0);
	}
	public cmbTypeOfInjuryComboBox cmbTypeOfInjury()
	{
		return (cmbTypeOfInjuryComboBox)super.getComboBox(1);
	}
	public cmbMechanismofInjuryComboBox cmbMechanismofInjury()
	{
		return (cmbMechanismofInjuryComboBox)super.getComboBox(2);
	}
	public cmbLevelofInjuryComboBox cmbLevelofInjury()
	{
		return (cmbLevelofInjuryComboBox)super.getComboBox(3);
	}
	public recbrPathologyRecordBrowser recbrPathology()
	{
		return (recbrPathologyRecordBrowser)super.getRecordBrowser(0);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(17);
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(18);
	}
	public CheckBox chkPrimPathology()
	{
		return (CheckBox)super.getControl(19);
	}
	public CheckBox chkProblem()
	{
		return (CheckBox)super.getControl(20);
	}
	public grdIndexGrid grdIndex()
	{
		return (grdIndexGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			SpinalInjuries = new SpinalInjuriesForms();
		}
		public final class SpinalInjuriesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SpinalInjuriesForms()
			{
				MedMskSpinePathInpatient = new LocalFormName(105162);
				MedMskSpinePath = new LocalFormName(105105);
			}
			public final FormName MedMskSpinePathInpatient;
			public final FormName MedMskSpinePath;
		}

		public SpinalInjuriesForms SpinalInjuries;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_Yes;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_finding = new ims.framework.ContextVariable("finding", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier + "");
			cxl_SpinePathologyFindingColl = new ims.framework.ContextVariable("SpinePathologyFindingColl", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__SpinePathologyFindingColl_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
			cxl_IsMedicalInpatientForm = new ims.framework.ContextVariable("IsMedicalInpatientForm", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__IsMedicalInpatientForm_" + componentIdentifier + "");
			cxl_IsMedicalAdmissionSelected = new ims.framework.ContextVariable("IsMedicalAdmissionSelected", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__IsMedicalAdmissionSelected_" + componentIdentifier + "");
			cxl_WriteConditionsApply = new ims.framework.ContextVariable("WriteConditionsApply", prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__WriteConditionsApply_" + componentIdentifier + "");
		}
		
		public boolean getfindingIsNotNull()
		{
			return !cxl_finding.getValueIsNull(context);
		}
		public ims.generalmedical.vo.MSKSpinePathologyFindingVo getfinding()
		{
			return (ims.generalmedical.vo.MSKSpinePathologyFindingVo)cxl_finding.getValue(context);
		}
		public void setfinding(ims.generalmedical.vo.MSKSpinePathologyFindingVo value)
		{
			cxl_finding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_finding = null;
		public boolean getSpinePathologyFindingCollIsNotNull()
		{
			return !cxl_SpinePathologyFindingColl.getValueIsNull(context);
		}
		public ims.generalmedical.vo.MSKSpinePathologyFindingVoCollection getSpinePathologyFindingColl()
		{
			return (ims.generalmedical.vo.MSKSpinePathologyFindingVoCollection)cxl_SpinePathologyFindingColl.getValue(context);
		}
		public void setSpinePathologyFindingColl(ims.generalmedical.vo.MSKSpinePathologyFindingVoCollection value)
		{
			cxl_SpinePathologyFindingColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SpinePathologyFindingColl = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
		public boolean getIsMedicalInpatientFormIsNotNull()
		{
			return !cxl_IsMedicalInpatientForm.getValueIsNull(context);
		}
		public Boolean getIsMedicalInpatientForm()
		{
			return (Boolean)cxl_IsMedicalInpatientForm.getValue(context);
		}
		public void setIsMedicalInpatientForm(Boolean value)
		{
			cxl_IsMedicalInpatientForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsMedicalInpatientForm = null;
		public boolean getIsMedicalAdmissionSelectedIsNotNull()
		{
			return !cxl_IsMedicalAdmissionSelected.getValueIsNull(context);
		}
		public Boolean getIsMedicalAdmissionSelected()
		{
			return (Boolean)cxl_IsMedicalAdmissionSelected.getValue(context);
		}
		public void setIsMedicalAdmissionSelected(Boolean value)
		{
			cxl_IsMedicalAdmissionSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsMedicalAdmissionSelected = null;
		public boolean getWriteConditionsApplyIsNotNull()
		{
			return !cxl_WriteConditionsApply.getValueIsNull(context);
		}
		public Boolean getWriteConditionsApply()
		{
			return (Boolean)cxl_WriteConditionsApply.getValue(context);
		}
		public void setWriteConditionsApply(Boolean value)
		{
			cxl_WriteConditionsApply.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WriteConditionsApply = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[79];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-ID", "ID_MskSpinePath");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-MODEOFINJURY", "ModeOfInjury");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-TYPEOFINJURY", "TypeOfInjury");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-MECHANISMOFINJURY", "MechanismOfInjury");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-ISPRIMARYPATHOLOGY", "IsPrimaryPathology");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-ISPROBLEM", "IsProblem");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-ISACTIVE", "IsActive");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskSpinePath.__internal_x_context__finding_" + componentIdentifier, "BO-1023100008-AUTHORINGDATETIME", "AuthoringDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
