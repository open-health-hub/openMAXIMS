//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.35 build 2103.16649)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.opdsocialstatus;


import ims.core.vo.AuthoringInformationVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.spinalinjuries.forms.opdsocialstatus.GenForm;
import ims.spinalinjuries.vo.SocialStatusVo;
public class Logic extends BaseLogic
{
	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}
	/**
	 * 
	 * @return void 
	 */	
	public void initialize() throws FormOpenException
	{
		if (ims.spinalinjuries.vo.lookups.LookupHelper.getSocialStatusModality(domain.getLookupService()).size() == 0)
			throw new FormOpenException("The Social Status Modality lookup must first be populated before this form can be used. ");	
		
		form.getLocalContext().setSelectedRecord(null);	
	}
	/**
	 * 
	 */
	public void open() throws PresentationLogicException
	{	
		clearInstanceControls();
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			populateListControl(domain.listSocialStatusByEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort()));
		
		//set selection back
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdModalityIndexRow row = form.grdModalityIndex().getRowByValue(form.getLocalContext().getSelectedRecord());
			if (row != null && row.getValue() != null)
			{
				form.getLocalContext().setSelectedRecord(row.getValue());
				form.grdModalityIndex().setValue(form.getLocalContext().getSelectedRecord());
				populateInstanceControl(form.grdModalityIndex().getValue());
			}
			else
				clearInstanceControls();
			updateControlsState();			
		}
		else		
			form.ctnSocialStatus().setCollapsed(true);

		form.setMode(FormMode.VIEW);
	}

	private void populateListControl(ims.spinalinjuries.vo.SocialStatusVoCollection voSocialStatusColl)
	{
		form.grdModalityIndex().getRows().clear();
		
		if (voSocialStatusColl == null)
			return;
		
		form.grdModalityIndex().getRows().clear();
		
		for(int i=0; i<voSocialStatusColl.size(); i++)
		{
			SocialStatusVo voSocialStatus = voSocialStatusColl.get(i);			
			
			if(voSocialStatus.getModalityIsNotNull())
			{
				boolean l_found = false;
				//check if modality is already added
				GenForm.grdModalityIndexRow rowcheck;
				for(int j=0;j<form.grdModalityIndex().getRows().size();j++)
				{
					rowcheck = form.grdModalityIndex().getRows().get(j);
					if (rowcheck.getValue().getModality().getId() == voSocialStatus.getModality().getId())
					{
						GenForm.grdModalityIndexRow rowchild;
						//add new record to this parent
						rowchild = rowcheck.getRows().newRow();
						if(voSocialStatus.getAssessDateIsNotNull())
							rowchild.setcolActivity(voSocialStatus.getAssessDate().toString());
						if(voSocialStatus.getDetailsIsNotNull())
							rowchild.setcolDetails(voSocialStatus.getDetails());
						rowchild.setTooltip(getTooltip(voSocialStatus));
						rowchild.setValue(voSocialStatus);						
						l_found = true;
					}
				}			
			
				if (!l_found)
				{
					//new modality to add
					GenForm.grdModalityIndexRow row = form.grdModalityIndex().getRows().newRow();
					GenForm.grdModalityIndexRow rowchild = row.getRows().newRow();
					row.setcolActivity(voSocialStatus.getModality().toString());
					if(voSocialStatus.getAssessDateIsNotNull())
						rowchild.setcolActivity(voSocialStatus.getAssessDate().toString());
					if(voSocialStatus.getDetailsIsNotNull())
						rowchild.setcolDetails(voSocialStatus.getDetails());	
					rowchild.setTooltip(getTooltip(voSocialStatus));
					rowchild.setValue(voSocialStatus);
					SocialStatusVo voSocialStatusParent = new SocialStatusVo();
					voSocialStatusParent.setModality(voSocialStatus.getModality());//only interested in the modality at the parent level
					row.setValue(voSocialStatusParent);
					row.setExpanded(true);
					row.setReadOnly(true);
					row.setSelectable(false);
				}			
			}				
		}
	}
	private String getTooltip(SocialStatusVo voSocialStatus)
	{
		String tooltip = "";
		if(voSocialStatus.getAuthoringCPIsNotNull())
			tooltip = "<b>Authoring HCP: </b>" + voSocialStatus.getAuthoringCP().toString();
		if(voSocialStatus.getAuthoringDateTimeIsNotNull())
			tooltip +="<b> Authoring Date/Time: </b>" +voSocialStatus.getAuthoringDateTime().toString();
		
		return tooltip;
	}
	/**
	 * 
	 */
	private void populateInstanceControl(SocialStatusVo voSocialStatus)
	{				 
		if(voSocialStatus.getModalityIsNotNull())
			form.ctnSocialStatus().cmbModality().setValue(voSocialStatus.getModality());
		else
			form.ctnSocialStatus().cmbModality().setValue(null);
		
		form.ctnSocialStatus().customControlAuthor().setValue(getAuthoringInfo(voSocialStatus));
						
		form.ctnSocialStatus().dteDateOPD().setValue(voSocialStatus.getAssessDate());				
		form.ctnSocialStatus().txtDetails().setValue(voSocialStatus.getDetails());
		
		if(voSocialStatus.getIsPreDischargeIsNotNull())
		{
			if(voSocialStatus.getIsPreDischarge().booleanValue())
				form.ctnSocialStatus().Group1().setValue(GenForm.ctnSocialStatusContainer.Group1Enumeration.rdoPreDischarge);
			else
				form.ctnSocialStatus().Group1().setValue(GenForm.ctnSocialStatusContainer.Group1Enumeration.rdoPostDischarge);
		}
		else
			form.ctnSocialStatus().Group1().setValue(null);
			
		form.getLocalContext().setSelectedRecord(voSocialStatus);	
		
		form.ctnSocialStatus().setCollapsed(false);
		
	}
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{			
			open();
		}
	}	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	protected void onGrdModalityIndexSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//Display Panel and detail
		form.getLocalContext().setSelectedRecord(form.grdModalityIndex().getValue());
		populateInstanceControl(form.grdModalityIndex().getValue());
		updateControlsState();	
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (menuItemID == form.getContextMenus().getLIPNewItem().getID())
			newInstance();
		else if (menuItemID == form.getContextMenus().getLIPUpdateItem().getID())
			updateInstance();		
	}
	public void clearInstanceControls()
	{
		form.ctnSocialStatus().cmbModality().setValue(null);
		form.ctnSocialStatus().dteDateOPD().setValue(null);
		form.ctnSocialStatus().customControlAuthor().setValue(null);
		form.ctnSocialStatus().txtDetails().setValue(null);
		form.ctnSocialStatus().Group1().setValue(null);		
	}
	public void newInstance() throws PresentationLogicException
	{
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setSelectedRecord(new SocialStatusVo());
			clearInstanceControls();
			form.ctnSocialStatus().customControlAuthor().initializeComponent();
			form.ctnSocialStatus().dteDateOPD().setValue(new Date());
			form.ctnSocialStatus().setCollapsed(false);
			//set the form mode
			form.grdModalityIndex().setValue(null);//wdev-2041
			form.setMode(FormMode.EDIT);
			//set any control status specific this form
			//form.ctnSocialStatus().setcustomControlAuthorEnabled(true);
		}	
	}
	public boolean save() throws PresentationLogicException
	{
		SocialStatusVo voSocialStatus = populateInstanceData();
		
		//set clinical contact
		if (!voSocialStatus.getClinicalContactIsNotNull())
			voSocialStatus.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voSocialStatus.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		try
		{
			String[] messages = voSocialStatus.validate(validateUIRules());
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return false;
			}
			
			//save and update local context
			form.getLocalContext().setSelectedRecord(domain.saveSocialStatus(voSocialStatus));
			
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;				
		}
		
		return true;
	}
	/**
	 * populates the data to be stored from the screen into local context selected record
	 * @return      void
	 */
	public SocialStatusVo populateInstanceData()
	{
		SocialStatusVo voSocialStatus = form.getLocalContext().getSelectedRecord();
		
		voSocialStatus.setModality(form.ctnSocialStatus().cmbModality().getValue());
		voSocialStatus.setAuthoringCP(form.ctnSocialStatus().customControlAuthor().getValue().getAuthoringHcp());
		voSocialStatus.setAssessDate(form.ctnSocialStatus().dteDateOPD().getValue());
		voSocialStatus.setAuthoringDateTime(form.ctnSocialStatus().customControlAuthor().getValue().getAuthoringDateTime());
		voSocialStatus.setDetails(form.ctnSocialStatus().txtDetails().getValue());
		
		if(form.ctnSocialStatus().Group1().getValue().equals(GenForm.ctnSocialStatusContainer.Group1Enumeration.rdoPreDischarge))
			voSocialStatus.setIsPreDischarge(Boolean.TRUE);
		else
			voSocialStatus.setIsPreDischarge(Boolean.FALSE);
		
		return voSocialStatus;		
	}
	public void updateControlsState()
	{
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			form.btnUpdate().setVisible(false);			
			//wdev-2041
			if (form.grdModalityIndex().getSelectedRowIndex()>=0)
				form.ctnSocialStatus().cmbModality().setEnabled(false);
			else
				form.ctnSocialStatus().cmbModality().setEnabled(true);
		}
		else
		{
			if (form.grdModalityIndex().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdModalityIndex().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
		}
	}
	public void updateInstance()
	{
		if (allowUpdate())
		{
			populateInstanceControl(form.grdModalityIndex().getValue());
			form.setMode(FormMode.EDIT);
			//set any control status specific this form
			//form.ctnSocialStatus().setcustomControlAuthorEnabled(false);
		}		
	}
	private AuthoringInformationVo getAuthoringInfo(SocialStatusVo voSelectedInstance)
	{
		AuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();
		voAuthoringInformation.setAuthoringDateTime(voSelectedInstance.getAuthoringDateTime());
		voAuthoringInformation.setAuthoringHcp(voSelectedInstance.getAuthoringCP());
		return voAuthoringInformation;
	}
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

}
