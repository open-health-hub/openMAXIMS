//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.22 build 41124.1200)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmentsafeenvironement;

import ims.nursing.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.SafetyLevelVo;
import ims.nursing.vo.SafetyLevelVoCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.SafetyLevelCollection;
import ims.spinalinjuries.vo.NurAssessmentSafeEnvironmentVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	
	private void open() 
	{
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false )
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);
		form.chkCopy().setEnabled(false);

		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);

		NurAssessmentSafeEnvironmentVo voEnvironment = null;
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			voEnvironment = (NurAssessmentSafeEnvironmentVo)domain.getComponent(assmnt.getCurrentComponent());
			form.getLocalContext().setAssessmentSafeEnvironment(voEnvironment);
		}

		//Safety Level
		GenForm.gridSafetyRow row = null;
		form.gridSafety().getRows().clear();
		SafetyLevelCollection sColl = LookupHelper.getSafetyLevel(domain.getLookupService());
		for (int i = 0; i < sColl.size(); i++)
		{
			ims.nursing.vo.lookups.SafetyLevel safetyLevel = sColl.get(i);
			row = form.gridSafety().getRows().newRow();
			row.setColSafetyLevel(safetyLevel);		
		}
		
		// Care Plans
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPINAL_SAFE_ENVIRONMENT);
		if (tempColl != null)
		{
			form.gridCarePlan().getRows().clear();
			GenForm.gridCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.gridCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setColCarePlan(template.getTitle());
			}
		}		
		
		checkForPreviousAssessent();
		
		if(voEnvironment != null)
			populateScreenFromData(voEnvironment);
		
	}
	
	protected void checkForPreviousAssessent()
	{
		NurAssessmentSafeEnvironmentVo assessAccSafe = (NurAssessmentSafeEnvironmentVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_SAFE_ENVIRONMENT);

		if (assessAccSafe == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPreviousAssSafe(assessAccSafe);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}
		
	protected void populateScreenFromData(NurAssessmentSafeEnvironmentVo voEnvironment) 
	{
		super.populateScreenFromData(voEnvironment);
		
		if (voEnvironment.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
		}
		form.chkCopy().setEnabled(false);
				
		//Safety Level Details
		SafetyLevelVoCollection collSafetyLevel = voEnvironment.getSafetyLevel();
		if(collSafetyLevel != null)
		{		
			GenForm.gridSafetyRow rowSafetyLevel;
			for (int j=0; j<collSafetyLevel.size(); j++)
			{
				SafetyLevelVo safetyLevel = collSafetyLevel.get(j);
				int i=0;
				for (i=0; i<form.gridSafety().getRows().size(); i++)
				{
					rowSafetyLevel = form.gridSafety().getRows().get(i);
					if (rowSafetyLevel.getColSafetyLevel().equals(safetyLevel.getSafetyLevel()))
					{
						rowSafetyLevel.setColSelect(safetyLevel.getStatus());
						rowSafetyLevel.setColDetails(safetyLevel.getDetails());
						break;
					}
			   }
			   if(i == form.gridSafety().getRows().size())
			   {
				rowSafetyLevel = form.gridSafety().getRows().newRow();
				rowSafetyLevel.setValue(safetyLevel);
				rowSafetyLevel.setColSafetyLevel(safetyLevel.getSafetyLevel());
				rowSafetyLevel.setColSelect(safetyLevel.getStatus());
				rowSafetyLevel.setColDetails(safetyLevel.getDetails());
			   }
		   }
		 
		}	
		//Care Plans
		if (voEnvironment.getCarePlanTemplate() != null && voEnvironment.getCarePlanTemplate().size() > 0)
		{
			GenForm.gridCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = voEnvironment.getCarePlanTemplate(); 
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.gridCarePlan().getRows().size(); j++)
			{
				cpRow = form.gridCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setColSelect(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
		
	}


	protected void onChkCopyValueChanged() throws PresentationLogicException 
	{
		if(form.getLocalContext().getPreviousAssSafeIsNotNull())
		{
			NurAssessmentSafeEnvironmentVo previousAssSafeVo = new NurAssessmentSafeEnvironmentVo();
			previousAssSafeVo = form.getLocalContext().getPreviousAssSafe();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);
			previousAssSafeVo.setIsComplete(Boolean.FALSE);
			previousAssSafeVo.setCopy(Boolean.TRUE);
			previousAssSafeVo.setCarePlanTemplate(null);
			populateScreenFromData(previousAssSafeVo);
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}
		
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException 
	{ 
		NurAssessmentSafeEnvironmentVo voSafeEnvironment = populateDataFromScreen();
		
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}
		
		//wdev-12519
		if(form.getLocalContext().getAssessment() == null)
		{
			engine.showErrors(new String[]{"Please select an assessment."});
			return;
		}
		//----------
		String[] arrErrors = voSafeEnvironment.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		try
		{
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(form.getLocalContext().getAssessment(), voSafeEnvironment);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				 AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				 if (assmnt != null && assmnt.getCurrentComponent() == null)
				 {
					 ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					 comp.setID_AssessmentComponent(e.getStaleObject().getId());
					 assmnt.setCurrentComponent(comp);
					 form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				 }
			}
			open();
			return;								
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_SAFE_ENVIRONMENT));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}

		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.gridCarePlan().getReadOnly() == false)
		{
			 CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			 GenForm.gridCarePlanRow cpRow;
			 for (int i=0; i<form.gridCarePlan().getRows().size(); i++)
			 {
				 cpRow = form.gridCarePlan().getRows().get(i);
				 if (cpRow.getColSelect() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			 }
			 if (templList.size() > 0)
			 {
				 form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				 engine.open(form.getForms().Nursing.CarePlanStep2);
			 }
			 else
				 engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			 engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
		
	}

	
	protected NurAssessmentSafeEnvironmentVo populateDataFromScreen() 
	{
		NurAssessmentSafeEnvironmentVo voSafeEnvironment = form.getLocalContext().getAssessmentSafeEnvironment();
		if (voSafeEnvironment == null)
			voSafeEnvironment = new NurAssessmentSafeEnvironmentVo();
			
		voSafeEnvironment = super.populateDataFromScreen(voSafeEnvironment);
				
		SafetyLevelVoCollection collSafetyLevel = new ims.nursing.vo.SafetyLevelVoCollection();
		GenForm.gridSafetyRow row = null;	
		for (int i=0; i<form.gridSafety().getRows().size(); i++)
		{
			row = form.gridSafety().getRows().get(i);
			ims.nursing.vo.SafetyLevelVo safetyLevel = row.getValue();
			if (safetyLevel == null)
				safetyLevel = new ims.nursing.vo.SafetyLevelVo();
		
			safetyLevel.setDetails(row.getColDetails());
			safetyLevel.setSafetyLevel(row.getColSafetyLevel());
			safetyLevel.setStatus(row.getColSelect());						
			collSafetyLevel.add(safetyLevel);
		}
		
		voSafeEnvironment.setSafetyLevel(collSafetyLevel);
		return voSafeEnvironment;
	}

	protected void onLnkInfoClick() throws PresentationLogicException 
	{
		if (form.getLocalContext().getAssessmentSafeEnvironment() != null && form.getLocalContext().getAssessmentSafeEnvironment().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessmentSafeEnvironment().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}		
	}
}
