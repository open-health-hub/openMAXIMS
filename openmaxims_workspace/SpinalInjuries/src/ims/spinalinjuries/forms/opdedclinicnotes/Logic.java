//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50204.1700)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.opdedclinicnotes;

import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.SocialHistoryMaritalStatusVo;
import ims.core.vo.SocialHistoryVo;
import ims.core.vo.lookups.AdviceLeaflets;
import ims.core.vo.lookups.AdviceLeafletsCollection;
import ims.core.vo.lookups.MaritalStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.OPDErectDysTreatmentsVo;
import ims.generalmedical.vo.OPDErectDysTreatmentsVoCollection;
import ims.generalmedical.vo.OPDErectDysfxnVo;
import ims.generalmedical.vo.OPDErectDysfxnVoCollection;
import ims.spinalinjuries.forms.opdedclinicnotes.GenForm;
import ims.spinalinjuries.forms.opdedclinicnotes.GenForm.grdTreatmentRow;
import ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven;
import ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGivenCollection;
import ims.spinalinjuries.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen()
	{
		initialize();
		open();
	}

	protected void onGrdTreatmentGridComboBoxSelectionChanged(int column, grdTreatmentRow row, Object value) throws PresentationLogicException
	{
		// Modify column index for tried if the grid gets changed
		final int COL_TRIED_INDEX = 1;
		
		if ((column == COL_TRIED_INDEX && value == null) || (value != null && (value.equals(YesNoUnknown.NO) || value.equals(YesNoUnknown.UNKNOWN))))
		{
			row.setcolScore(null);
		}
		
		if (column == COL_TRIED_INDEX && value == null)
		{
			row.setcolDetails(null);
		}
		
		row.setcolScoreReadOnly((value != null && (value.equals(YesNoUnknown.NO) || value.equals(YesNoUnknown.UNKNOWN))) || (column == COL_TRIED_INDEX && value == null));
		row.setcolDetailsReadOnly(column == COL_TRIED_INDEX && value == null);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			for (int i = 0; i < form.grdTreatment().getRows().size(); i++)
			{
				grdTreatmentRow row = form.grdTreatment().getRows().get(i);
				
				row.setcolScoreReadOnly(!YesNoUnknown.YES.equals(row.getcolTried()));
				row.setcolDetailsReadOnly(row.getcolTried() == null);
			}
		}
	}

	private void initialize()
	{
		form.setMode(FormMode.VIEW);
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		if (voPatShort == null)
		{
			try
			{
				throw new FormOpenException("Error: Patient not selected.");
			}
			catch (FormOpenException e)
			{
				e.printStackTrace();
			}
		}

		CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		form.getLocalContext().setSelectedCareContextShort(currentCareContext);

		if (currentCareContext != null)
			form.getLocalContext().setCurrentCareContextId(currentCareContext.getID_CareContext());

		loadLookupsIntoGrid();
	}

	private void open()
	{
		clearScreen();
		form.cmbMaritalStatus().setValue(null);
		form.pdtMYear().setValue(null);
		form.dteClinic().setValue(null);
		form.grdLeafletsGiven().setReadOnly(true);

		form.setMode(FormMode.VIEW);
		loadLookupsIntoGrid();

		fillRecordBrowser();

		if (form.getLocalContext().getSelectedCareContextShortIsNotNull())
		{
			form.recbrOPDEDClinicNotes().setValue(form.getLocalContext().getSelectedCareContextShort());

		}
		else
		{
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
		}

		if (form.recbrOPDEDClinicNotes().size() > 0)
		{
			try
			{
				onRecbrOPDEDClinicNotesValueChanged();
			}
			catch (PresentationLogicException e)
			{
				engine.showMessage("Failed to display selected record.");
			}
		}
	}

	private void fillRecordBrowser()
	{
		form.recbrOPDEDClinicNotes().clear();

		Integer currentCareContextId = form.getLocalContext().getCurrentCareContextId();

		CareContextShortVoCollection collCareContextShortVo = domain.listOPEDCareContextsByEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());

		collCareContextShortVo = addCurrentContextToCollection(currentCareContextId, collCareContextShortVo);
		for (int i = 0; i < collCareContextShortVo.size(); i++)
		{
			CareContextShortVo voCareContextShort = collCareContextShortVo.get(i);
			if (voCareContextShort.getID_CareContext().equals(currentCareContextId))
			{
				form.recbrOPDEDClinicNotes().newRow(voCareContextShort, voCareContextShort.getRecordBrowserText(), Color.Green);
			}
			else
				form.recbrOPDEDClinicNotes().newRow(voCareContextShort, voCareContextShort.getRecordBrowserText());
		}

	}

	private CareContextShortVoCollection addCurrentContextToCollection(Integer currentCareContextId, CareContextShortVoCollection collCareContextShort)
	{
		boolean bRecordExistsForCurrent = false;
		for (int i = 0; i < collCareContextShort.size(); i++)
		{
			CareContextShortVo voCareContextShort = collCareContextShort.get(i);
			if (voCareContextShort.getID_CareContext().equals(currentCareContextId))
			{
				bRecordExistsForCurrent = true;
			}
		}

		if (!bRecordExistsForCurrent)
		{
			collCareContextShort.add(form.getGlobalContext().Core.getCurrentCareContext());
			collCareContextShort.sort(SortOrder.DESCENDING);
		}

		return collCareContextShort;
	}

	private void updateBrowseInformation()
	{
		form.lblBrowser().setValue(form.recbrOPDEDClinicNotes().getRecordState("Assessment", "Assessments"));
	}

	private void browseRecord()
	{
		updateBrowseInformation();
		if (form.recbrOPDEDClinicNotes().getValue() != null)
		{
			CareContextShortVo voCareContextShort = (CareContextShortVo) form.recbrOPDEDClinicNotes().getValue();

			OPDErectDysfxnVoCollection coll = domain.getOPDErectDysfxnByCareContext((CareContextLiteVo) form.recbrOPDEDClinicNotes().getValue());
			OPDErectDysfxnVo voOPDErectDysfxnVo = null;
			if(coll!=null && coll.size()>0)
				voOPDErectDysfxnVo = coll.get(0);
			form.getLocalContext().setvoOPDErectDysfxn(voOPDErectDysfxnVo);
			form.getLocalContext().setMedSocialHistory(domain.getMedSocialHistoryByCareContext((CareContextLiteVo) form.recbrOPDEDClinicNotes().getValue()));

			populateScreenFromData();

			populateSocialHistoryScreenFromData();

			checkRecordIsEditable(voOPDErectDysfxnVo, voCareContextShort);
		}
	}

	private void checkRecordIsEditable(OPDErectDysfxnVo voOPDErectDysfxnVo, CareContextShortVo voCareContextShort)
	{
		Integer currentCareContextId = form.getLocalContext().getCurrentCareContextId();

		if (voOPDErectDysfxnVo != null)
		{

			if (voCareContextShort.getID_CareContext().equals(currentCareContextId))
				form.btnUpdate().setVisible(true);
			else
				form.btnUpdate().setVisible(false);

			form.btnNew().setVisible(false);

		}
		else
		{

			form.getLocalContext().setvoOPDErectDysfxn(null);

			if (voCareContextShort.getID_CareContext().equals(currentCareContextId))
				form.btnNew().setVisible(true);
			else
				form.btnNew().setVisible(false);

			form.btnUpdate().setVisible(false);
		}
	}

	private void loadLookupsIntoGrid()
	{
		form.grdLeafletsGiven().setValue(null);
		form.grdLeafletsGiven().getRows().clear();
		// Leaflets Given...
		GenForm.grdLeafletsGivenRow rowLeafletsGiven = null;
		AdviceLeafletsCollection colLeafletsGiven = ims.core.vo.lookups.LookupHelper.getAdviceLeaflets(domain.getLookupService());
		for (int i = 0; i < colLeafletsGiven.size(); i++)
		{
			AdviceLeaflets bAdviceLeaflets = colLeafletsGiven.get(i);
			rowLeafletsGiven = form.grdLeafletsGiven().getRows().newRow();
			rowLeafletsGiven.setValue(bAdviceLeaflets);
			rowLeafletsGiven.setcolLeaflets(bAdviceLeaflets);
		}

		// Treatment Discussed....
		form.grdTxDiscussed().setValue(null);
		form.grdTxDiscussed().getRows().clear();
		GenForm.grdTxDiscussedRow rowTxDiscussed = null;
		ErectDysTreatmentsGivenCollection colErectDysTreatDiscussed = LookupHelper.getErectDysTreatmentsGiven(domain.getLookupService());
		for (int i = 0; i < colErectDysTreatDiscussed.size(); i++)
		{
			ErectDysTreatmentsGiven bErectDysTreatDiscussed = colErectDysTreatDiscussed.get(i);
			rowTxDiscussed = form.grdTxDiscussed().getRows().newRow();
			rowTxDiscussed.setValue(bErectDysTreatDiscussed);
			rowTxDiscussed.setcolTxDiscussed(bErectDysTreatDiscussed);
		}
		// Treatment History....
		form.grdTreatment().setValue(null);
		form.grdTreatment().getRows().clear();
		GenForm.grdTreatmentRow rowTreatment = null;
		ErectDysTreatmentsGivenCollection colDysTreatGiven = LookupHelper.getErectDysTreatmentsGiven(domain.getLookupService());
		for (int i = 0; i < colDysTreatGiven.size(); i++)
		{
			ErectDysTreatmentsGiven bErectDysTreat = colDysTreatGiven.get(i);
			rowTreatment = form.grdTreatment().getRows().newRow();
			rowTreatment.setcolTreatment(bErectDysTreat);
		}
	}

	private void populateDataFromScreen()
	{
		OPDErectDysfxnVo voOPDErectDysfxn = form.getLocalContext().getvoOPDErectDysfxn();
		if (voOPDErectDysfxn == null)
			voOPDErectDysfxn = new OPDErectDysfxnVo();

		SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();
		if (voSocHist == null)
		{
			voSocHist = new SocialHistoryVo();
			voSocHist.setMaritalStatus(new SocialHistoryMaritalStatusVo());
		}
		else if (!voSocHist.getMaritalStatusIsNotNull())
			voSocHist.setMaritalStatus(new SocialHistoryMaritalStatusVo());

		voSocHist.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (voSocHist.getAuthoringInformation() == null)
			voSocHist.setAuthoringInformation(new AuthoringInformationVo());

		if (voSocHist.getAuthoringInformation().getAuthoringDateTime() == null)
			voSocHist.getAuthoringInformation().setAuthoringDateTime(new DateTime());
		if (voSocHist.getAuthoringInformation().getAuthoringHcp() == null)
		{
			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP() instanceof HcpLiteVo)
				voSocHist.getAuthoringInformation().setAuthoringHcp((HcpLiteVo) form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP());
		}

		voSocHist.getMaritalStatus().setMaritalStatus(form.cmbMaritalStatus().getValue() != null ? form.cmbMaritalStatus().getValue() : null);
		voSocHist.getMaritalStatus().setStatusDate(form.pdtMYear().getValue() != null ? form.pdtMYear().getValue() : null);

		if (!voSocHist.getClinicalContactIsNotNull())
			voSocHist.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		form.getLocalContext().setMedSocialHistory(voSocHist);

		voOPDErectDysfxn.setErectionQual(form.cmbErection().getValue() != null ? form.cmbErection().getValue() : null);
		voOPDErectDysfxn.setConsetnFormSigned(form.cmbConsentSgn().getValue() != null ? form.cmbConsentSgn().getValue() : null);
		voOPDErectDysfxn.setTreatDiscussed(form.cmbTxOptionsDisc().getValue() != null ? form.cmbTxOptionsDisc().getValue() : null);
		voOPDErectDysfxn.setAdvLeafletGiven(form.cmbAdviceLitGiven().getValue() != null ? form.cmbAdviceLitGiven().getValue() : null);

		if (voOPDErectDysfxn.getCareContext() == null)
			voOPDErectDysfxn.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if (voOPDErectDysfxn.getAuthoringInformation() == null)
			voOPDErectDysfxn.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		// Leaflets Given...
		AdviceLeafletsCollection colLeaflets = new AdviceLeafletsCollection();
		GenForm.grdLeafletsGivenRow rowGivenLeaflets;
		for (int i = 0; i < form.grdLeafletsGiven().getRows().size(); i++)
		{
			rowGivenLeaflets = form.grdLeafletsGiven().getRows().get(i);
			if (rowGivenLeaflets.getcolSelect())
				colLeaflets.add(rowGivenLeaflets.getValue());
		}
		voOPDErectDysfxn.setActualLeafletsGiven(colLeaflets);

		// Treatment Discussed....
		ErectDysTreatmentsGivenCollection colTreatmentsDiscussed = new ErectDysTreatmentsGivenCollection();
		GenForm.grdTxDiscussedRow rowTreatmentDiscussed;
		for (int i = 0; i < form.grdTxDiscussed().getRows().size(); i++)
		{
			rowTreatmentDiscussed = form.grdTxDiscussed().getRows().get(i);
			if (rowTreatmentDiscussed.getcolSelect())
				colTreatmentsDiscussed.add(rowTreatmentDiscussed.getValue());
		}
		voOPDErectDysfxn.setActualTreatmentDiscussed(colTreatmentsDiscussed);

		// Treatments History....
		OPDErectDysTreatmentsVoCollection colDysTreatGiven = new OPDErectDysTreatmentsVoCollection();
		GenForm.grdTreatmentRow rowTreatment;
		for (int i = 0; i < form.grdTreatment().getRows().size(); i++)
		{
			rowTreatment = form.grdTreatment().getRows().get(i);

			if (rowTreatment.getcolTried() != null)
			{
				OPDErectDysTreatmentsVo voTreatments = new OPDErectDysTreatmentsVo();
				voTreatments.setTried(rowTreatment.getcolTried());
				voTreatments.setTreatScore(rowTreatment.getcolScore() != null ? rowTreatment.getcolScore() : null);
				voTreatments.setTreatDetails(rowTreatment.getcolDetails() != null ? rowTreatment.getcolDetails() : null);
				voTreatments.setTreatment(rowTreatment.getcolTreatment() != null ? rowTreatment.getcolTreatment() : null);

				colDysTreatGiven.add(voTreatments);
			}
		}
		voOPDErectDysfxn.setTreatmentHistory(colDysTreatGiven);

		form.getLocalContext().setvoOPDErectDysfxn(voOPDErectDysfxn);
	}

	private void populateSocialHistoryScreenFromData()
	{
		clearSocialHistoryControls();

		if (form.getLocalContext().getMedSocialHistoryIsNotNull())
		{
			SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();

			if ((voSocHist.getMaritalStatusIsNotNull()) && (voSocHist.getMaritalStatus().getMaritalStatusIsNotNull()))
				form.cmbMaritalStatus().setValue(voSocHist.getMaritalStatus().getMaritalStatus());

			if ((voSocHist.getMaritalStatusIsNotNull()) && (voSocHist.getMaritalStatus().getStatusDateIsNotNull()))
				form.pdtMYear().setValue(voSocHist.getMaritalStatus().getStatusDate());
		}
	}

	private void populateScreenFromData()
	{
		clearScreen();

		OPDErectDysfxnVo voOPDErectDysfxn = form.getLocalContext().getvoOPDErectDysfxn();

		if (voOPDErectDysfxn != null)
		{
			if (voOPDErectDysfxn.getAuthoringInformationIsNotNull() && voOPDErectDysfxn.getAuthoringInformation().getAuthoringHcpIsNotNull())
				form.customControlAuthoringInfo().setValue(voOPDErectDysfxn.getAuthoringInformation());
			if (voOPDErectDysfxn != null)
			{
				// If data exists for combo and text boxes then populate....
				if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
					form.dteClinic().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate());
				if (voOPDErectDysfxn.getErectionQual() != null)
					form.cmbErection().setValue(voOPDErectDysfxn.getErectionQual());
				if (voOPDErectDysfxn.getConsetnFormSigned() != null)
					form.cmbConsentSgn().setValue(voOPDErectDysfxn.getConsetnFormSigned());
				if (voOPDErectDysfxn.getTreatDiscussed() != null)
					form.cmbTxOptionsDisc().setValue(voOPDErectDysfxn.getTreatDiscussed());
				if (voOPDErectDysfxn.getAdvLeafletGiven() != null)
					form.cmbAdviceLitGiven().setValue(voOPDErectDysfxn.getAdvLeafletGiven());

				// Leaflets Given...
				AdviceLeafletsCollection colLeafletsGiven = voOPDErectDysfxn.getActualLeafletsGiven();
				GenForm.grdLeafletsGivenRow rowGivenLeaflets;
				for (int j = 0; j < colLeafletsGiven.size(); j++)
				{
					AdviceLeaflets adviceLeaflets = colLeafletsGiven.get(j);
					int i = 0;
					for (i = 0; i < form.grdLeafletsGiven().getRows().size(); i++)
					{
						rowGivenLeaflets = form.grdLeafletsGiven().getRows().get(i);
						if (rowGivenLeaflets.getValue().getId() == adviceLeaflets.getId())
						{
							rowGivenLeaflets.setcolSelect(true);
							break;
						}
					}
					if (i == form.grdLeafletsGiven().getRows().size())
					{
						rowGivenLeaflets = form.grdLeafletsGiven().getRows().newRow();
						rowGivenLeaflets.setValue(adviceLeaflets);
						rowGivenLeaflets.setcolLeaflets(adviceLeaflets);
						rowGivenLeaflets.setcolSelect(true);
					}
				}

				// Treatment Discussed....
				ErectDysTreatmentsGivenCollection colErectDysTreatDiscussed = voOPDErectDysfxn.getActualTreatmentDiscussed();
				GenForm.grdTxDiscussedRow rowTxDiscussed;
				for (int k = 0; k < colErectDysTreatDiscussed.size(); k++)
				{
					ErectDysTreatmentsGiven voErectDysTreatDiscussed = colErectDysTreatDiscussed.get(k);
					int l = 0;
					for (l = 0; l < form.grdTxDiscussed().getRows().size(); l++)
					{
						rowTxDiscussed = form.grdTxDiscussed().getRows().get(l);

						if (rowTxDiscussed.getValue().getId() == voErectDysTreatDiscussed.getId())
						{
							rowTxDiscussed.setcolSelect(true);
							break;
						}
					}
					if (l == form.grdTxDiscussed().getRows().size())
					{
						rowTxDiscussed = form.grdTxDiscussed().getRows().newRow();
						rowTxDiscussed.setValue(voErectDysTreatDiscussed);
						rowTxDiscussed.setcolTxDiscussed(voErectDysTreatDiscussed);
						rowTxDiscussed.setcolSelect(true);
					}
				}

				// Treatment History....
				OPDErectDysTreatmentsVoCollection colDysTreatGiven = voOPDErectDysfxn.getTreatmentHistory();
				GenForm.grdTreatmentRow rowTreatment;
				for (int m = 0; m < colDysTreatGiven.size(); m++)
				{
					OPDErectDysTreatmentsVo voErectDysTreat = colDysTreatGiven.get(m);
					int n = 0;
					for (n = 0; n < form.grdTreatment().getRows().size(); n++)
					{
						rowTreatment = form.grdTreatment().getRows().get(n);

						if (voErectDysTreat.getTreatment() != null)
						{
							if (rowTreatment.getcolTreatment().getId() == voErectDysTreat.getTreatment().getId())
							{
								rowTreatment.setcolTried(voErectDysTreat.getTried());
								rowTreatment.setcolScore(voErectDysTreat.getTreatScore());
								rowTreatment.setcolDetails(voErectDysTreat.getTreatDetails());
								rowTreatment.setTooltipForcolDetails(voErectDysTreat.getTreatDetails());
								break;
							}
						}
					}
					if (n == form.grdTreatment().getRows().size())
					{
						rowTreatment = form.grdTreatment().getRows().newRow();
						rowTreatment.setValue(voErectDysTreat);
						rowTreatment.setcolTried(voErectDysTreat.getTried());
						rowTreatment.setcolScore(voErectDysTreat.getTreatScore());
						rowTreatment.setcolDetails(voErectDysTreat.getTreatDetails());
						rowTreatment.setTooltipForcolDetails(voErectDysTreat.getTreatDetails());
						rowTreatment.setcolTreatment(voErectDysTreat.getTreatment());
					}
				}
			}
		}
	}

	private void clearSocialHistoryControls()
	{
		form.cmbMaritalStatus().setValue(null);
		form.pdtMYear().setValue(null);
	}

	private void clearScreen()
	{
		form.customControlAuthoringInfo().setValue(null);
		form.dteClinic().setValue(null);
		form.cmbErection().setValue(null);
		form.cmbConsentSgn().setValue(null);
		form.cmbTxOptionsDisc().setValue(null);
		form.cmbAdviceLitGiven().setValue(null);

		for (int j = 0; j < form.grdTreatment().getRows().size(); j++)
		{
			form.grdTreatment().getRows().get(j).setcolDetails("");
			form.grdTreatment().getRows().get(j).setcolScore(null);
			form.grdTreatment().getRows().get(j).setcolTried(null);
		}
		for (int j = 0; j < form.grdLeafletsGiven().getRows().size(); j++)
		{
			form.grdLeafletsGiven().getRows().get(j).setcolSelect(false);
		}
		for (int j = 0; j < form.grdTxDiscussed().getRows().size(); j++)
		{
			form.grdTxDiscussed().getRows().get(j).setcolSelect(false);
		}

	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		loadLookupsIntoGrid();
		form.setMode(FormMode.EDIT);
		form.setcustomControlAuthoringInfoEnabled(true);
		//wdev-13067
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		//---------
		setDefaultValues();
		form.dteClinic().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate());

		SocialHistoryVo socialVo = domain.getSocialHistoryByPatient(form.getGlobalContext().Core.getPatientShort());
		if (socialVo != null)
		{
			socialVo.setID_SocialHistory(null);
			socialVo.setCareContext(null);
			socialVo.setAuthoringInformation(null);
			socialVo.setClinicalContact(null);

			form.getLocalContext().setMedSocialHistory(socialVo);
		}
		else
			form.getLocalContext().setMedSocialHistory(null);

		populateSocialHistoryScreenFromData();

	}

	private void setDefaultValues()
	{
		form.customControlAuthoringInfo().initializeComponent();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateDataFromScreen();
		//wdev-13067
		if(form.customControlAuthoringInfo().getValue() == null)
		{
			engine.showErrors(new String[]{"Authoring HCP and Authoring Date/Time are mandatory."});
			return;
		}
		
		//------------
		OPDErectDysfxnVo voOPDED = form.getLocalContext().getvoOPDErectDysfxn();
		try
		{
			String[] messages = voOPDED.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			domain.saveOPDEDVo(voOPDED);
			
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;
		} catch (UniqueKeyViolationException e) {
			engine.showMessage("An ED record already exists for this clinical contact. " + e.getMessage());
			open();
			return;
		}

		SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();
		try
		{
			String[] messages = voSocHist.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			domain.saveMedSocialHistory(voSocHist);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;
		}
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		onCmbAdviceLitGivenValueChanged();
	}

	protected void onCmbAdviceLitGivenValueChanged() throws PresentationLogicException
	{
		if (form.cmbAdviceLitGiven().getValue() != null)
		{
			if (form.cmbAdviceLitGiven().getValue().equals(YesNoUnknown.YES))
				form.grdLeafletsGiven().setReadOnly(!form.getMode().equals(FormMode.EDIT));
			else
			{
				clearLeafletsGrid();
				form.grdLeafletsGiven().setReadOnly(true);
			}
		}
		else
		{
			clearLeafletsGrid();
			form.grdLeafletsGiven().setReadOnly(true);
		}
	}

	private void clearLeafletsGrid()
	{
		form.grdLeafletsGiven().setValue(null);
		form.grdLeafletsGiven().getRows().clear();
		// Leaflets Given...
		GenForm.grdLeafletsGivenRow rowLeafletsGiven = null;
		AdviceLeafletsCollection colLeafletsGiven = ims.core.vo.lookups.LookupHelper.getAdviceLeaflets(domain.getLookupService());
		for (int i = 0; i < colLeafletsGiven.size(); i++)
		{
			AdviceLeaflets bAdviceLeaflets = colLeafletsGiven.get(i);
			rowLeafletsGiven = form.grdLeafletsGiven().getRows().newRow();
			rowLeafletsGiven.setValue(bAdviceLeaflets);
			rowLeafletsGiven.setcolLeaflets(bAdviceLeaflets);
		}
	}

	protected void onRecbrOPDEDClinicNotesValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}

	protected void onCmbMaritalStatusValueChanged() throws PresentationLogicException
	{
		setupMaritalControls();
	}

	private void setupMaritalControls()
	{
		// Setup Marital Controls
		if (form.cmbMaritalStatus().getValue() == null)
		{
			disableMaritalStatusControls();
			return;
		}
		if (form.cmbMaritalStatus().getValue().getId() != MaritalStatus.SINGLE.getId())
			form.pdtMYear().setEnabled(true);
		else
		{
			disableMaritalStatusControls();
		}
	}

	private void disableMaritalStatusControls()
	{
		form.pdtMYear().setValue(null);
		form.pdtMYear().setEnabled(false);
	}
}
