//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdedclinicnotes;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbMaritalStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MaritalStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MaritalStatus getValue()
		{
			return (ims.core.vo.lookups.MaritalStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MaritalStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbErectionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual getValue()
		{
			return (ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.ErectDysfxnErectQual value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbConsentSgnComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTxOptionsDiscComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAdviceLitGivenComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrOPDEDClinicNotesRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdTreatmentRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTreatmentRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTreatmentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTreatmentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTreatmentOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolTreatment(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven getcolTreatment()
		{
			return (ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven)super.row.get(0);
		}
		public void setcolTreatment(ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTreatmentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolTriedReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolTriedReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolTriedOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolTried(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.lookups.YesNoUnknown getcolTried()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
		}
		public void setcolTried(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.row.set(1, value, true);
		}
		public void setCellcolTriedTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolScoreReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolScoreReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolScoreOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolScore(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.core.vo.lookups.ErectDysTreatScore getcolScore()
		{
			return (ims.core.vo.lookups.ErectDysTreatScore)super.row.get(2);
		}
		public void setcolScore(ims.core.vo.lookups.ErectDysTreatScore value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolScoreTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolDetailsReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolDetailsOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolDetails(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolDetails()
		{
			return (String)super.row.get(3);
		}
		public void setcolDetails(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolDetailsTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.generalmedical.vo.OPDErectDysTreatmentsVo getValue()
		{
			return (ims.generalmedical.vo.OPDErectDysTreatmentsVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDErectDysTreatmentsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTreatmentRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTreatmentRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTreatmentRow get(int index)
		{
			return new grdTreatmentRow(super.collection.get(index));
		}
		public grdTreatmentRow newRow()
		{
			return new grdTreatmentRow(super.collection.newRow());
		}
		public grdTreatmentRow newRow(boolean autoSelect)
		{
			return new grdTreatmentRow(super.collection.newRow(autoSelect));
		}
		public grdTreatmentRow newRowAt(int index)
		{
			return new grdTreatmentRow(super.collection.newRowAt(index));
		}
		public grdTreatmentRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTreatmentRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTreatmentGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.generalmedical.vo.OPDErectDysTreatmentsVo[] getValues()
		{
			ims.generalmedical.vo.OPDErectDysTreatmentsVo[] listOfValues = new ims.generalmedical.vo.OPDErectDysTreatmentsVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.OPDErectDysTreatmentsVo getValue()
		{
			return (ims.generalmedical.vo.OPDErectDysTreatmentsVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDErectDysTreatmentsVo value)
		{
			super.grid.setValue(value);
		}
		public grdTreatmentRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTreatmentRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTreatmentRowCollection getRows()
		{
			return new grdTreatmentRowCollection(super.grid.getRows());
		}
		public grdTreatmentRow getRowByValue(ims.generalmedical.vo.OPDErectDysTreatmentsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTreatmentRow(row);
		}
		public void setcolTreatmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTreatmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolTriedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolTriedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox colTriedComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setcolScoreHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolScoreHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colScoreComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
		public void setcolDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	public static class grdTxDiscussedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTxDiscussedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTxDiscussedReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTxDiscussedReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTxDiscussedOpened()
		{
			super.row.showOpened(0);
		}
		public ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven getcolTxDiscussed()
		{
			return (ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven)super.row.get(0);
		}
		public void setcolTxDiscussed(ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTxDiscussedTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven getValue()
		{
			return (ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven)super.row.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTxDiscussedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTxDiscussedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTxDiscussedRow get(int index)
		{
			return new grdTxDiscussedRow(super.collection.get(index));
		}
		public grdTxDiscussedRow newRow()
		{
			return new grdTxDiscussedRow(super.collection.newRow());
		}
		public grdTxDiscussedRow newRow(boolean autoSelect)
		{
			return new grdTxDiscussedRow(super.collection.newRow(autoSelect));
		}
		public grdTxDiscussedRow newRowAt(int index)
		{
			return new grdTxDiscussedRow(super.collection.newRowAt(index));
		}
		public grdTxDiscussedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTxDiscussedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTxDiscussedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven[] getValues()
		{
			ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven[] listOfValues = new ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven getValue()
		{
			return (ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven)super.grid.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven value)
		{
			super.grid.setValue(value);
		}
		public grdTxDiscussedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTxDiscussedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTxDiscussedRowCollection getRows()
		{
			return new grdTxDiscussedRowCollection(super.grid.getRows());
		}
		public grdTxDiscussedRow getRowByValue(ims.spinalinjuries.vo.lookups.ErectDysTreatmentsGiven value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTxDiscussedRow(row);
		}
		public void setcolTxDiscussedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTxDiscussedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdLeafletsGivenRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdLeafletsGivenRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolLeafletsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolLeafletsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolLeafletsOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.AdviceLeaflets getcolLeaflets()
		{
			return (ims.core.vo.lookups.AdviceLeaflets)super.row.get(0);
		}
		public void setcolLeaflets(ims.core.vo.lookups.AdviceLeaflets value)
		{
			super.row.set(0, value);
		}
		public void setCellcolLeafletsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getcolSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setcolSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellcolSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.lookups.AdviceLeaflets getValue()
		{
			return (ims.core.vo.lookups.AdviceLeaflets)super.row.getValue();
		}
		public void setValue(ims.core.vo.lookups.AdviceLeaflets value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdLeafletsGivenRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdLeafletsGivenRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdLeafletsGivenRow get(int index)
		{
			return new grdLeafletsGivenRow(super.collection.get(index));
		}
		public grdLeafletsGivenRow newRow()
		{
			return new grdLeafletsGivenRow(super.collection.newRow());
		}
		public grdLeafletsGivenRow newRow(boolean autoSelect)
		{
			return new grdLeafletsGivenRow(super.collection.newRow(autoSelect));
		}
		public grdLeafletsGivenRow newRowAt(int index)
		{
			return new grdLeafletsGivenRow(super.collection.newRowAt(index));
		}
		public grdLeafletsGivenRow newRowAt(int index, boolean autoSelect)
		{
			return new grdLeafletsGivenRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdLeafletsGivenGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.lookups.AdviceLeaflets[] getValues()
		{
			ims.core.vo.lookups.AdviceLeaflets[] listOfValues = new ims.core.vo.lookups.AdviceLeaflets[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.lookups.AdviceLeaflets getValue()
		{
			return (ims.core.vo.lookups.AdviceLeaflets)super.grid.getValue();
		}
		public void setValue(ims.core.vo.lookups.AdviceLeaflets value)
		{
			super.grid.setValue(value);
		}
		public grdLeafletsGivenRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdLeafletsGivenRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdLeafletsGivenRowCollection getRows()
		{
			return new grdLeafletsGivenRowCollection(super.grid.getRows());
		}
		public grdLeafletsGivenRow getRowByValue(ims.core.vo.lookups.AdviceLeaflets value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdLeafletsGivenRow(row);
		}
		public void setcolLeafletsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolLeafletsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getvoOPDErectDysfxn();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 416, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(56), new Integer(416), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 728, 32, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 600, 568, 235, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "0 = No erection, 10 = As good as you can get", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 720, 58, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Year:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 58, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Marital Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Erection:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consent Form Signed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 200, 175, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Options Discussed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 90, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Advice and Literature Given:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 752, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 192, 120, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 752, 56, 80, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 605, 56, 107, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbMaritalStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbMaritalStatusTemp);
		cmbMaritalStatusComboBox cmbMaritalStatus = (cmbMaritalStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMaritalStatusComboBox.class, m_cmbMaritalStatusTemp);
		super.addComboBox(cmbMaritalStatus);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 192, 144, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbErectionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbErectionTemp);
		cmbErectionComboBox cmbErection = (cmbErectionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbErectionComboBox.class, m_cmbErectionTemp);
		super.addComboBox(cmbErection);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 192, 176, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbConsentSgnTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbConsentSgnTemp);
		cmbConsentSgnComboBox cmbConsentSgn = (cmbConsentSgnComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsentSgnComboBox.class, m_cmbConsentSgnTemp);
		super.addComboBox(cmbConsentSgn);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 192, 200, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTxOptionsDiscTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTxOptionsDiscTemp);
		cmbTxOptionsDiscComboBox cmbTxOptionsDisc = (cmbTxOptionsDiscComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTxOptionsDiscComboBox.class, m_cmbTxOptionsDiscTemp);
		super.addComboBox(cmbTxOptionsDisc);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 605, 88, 227, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAdviceLitGivenTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAdviceLitGivenTemp);
		cmbAdviceLitGivenComboBox cmbAdviceLitGiven = (cmbAdviceLitGivenComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdviceLitGivenComboBox.class, m_cmbAdviceLitGivenTemp);
		super.addComboBox(cmbAdviceLitGiven);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrOPDEDClinicNotesTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrOPDEDClinicNotesTemp);
		recbrOPDEDClinicNotesRecordBrowser recbrOPDEDClinicNotes = (recbrOPDEDClinicNotesRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrOPDEDClinicNotesRecordBrowser.class, m_recbrOPDEDClinicNotesTemp);
		super.addRecordBrowser(recbrOPDEDClinicNotes);

		// Grid Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 816, 168, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdTreatmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTreatmentTemp);
		grdTreatmentGrid grdTreatment = (grdTreatmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTreatmentGrid.class, m_grdTreatmentTemp);
		grdTreatment.addStringColumn("Treatment", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTreatment.addComboBoxColumn("Tried", 1, 1, 100, false, true, true, false, true, -1);
		grdTreatment.addComboBoxColumn("Score", 0, 0, 130, false, true, false, false, true, -1);
		grdTreatment.addStringColumn("Details", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTreatment);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 392, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdTxDiscussedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTxDiscussedTemp);
		grdTxDiscussedGrid grdTxDiscussed = (grdTxDiscussedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTxDiscussedGrid.class, m_grdTxDiscussedTemp);
		grdTxDiscussed.addStringColumn("Treatment Discussed", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTxDiscussed.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
		super.addGrid(grdTxDiscussed);
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 440, 120, 392, 264, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdLeafletsGivenTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdLeafletsGivenTemp);
		grdLeafletsGivenGrid grdLeafletsGiven = (grdLeafletsGivenGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLeafletsGivenGrid.class, m_grdLeafletsGivenTemp);
		grdLeafletsGiven.addStringColumn("Leaflets Given", 0, 0, 290, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdLeafletsGiven.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
		super.addGrid(grdLeafletsGiven);
	}


	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblBrowser()
	{
		return (Label)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(11);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(12);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(13);
	}
	public DateControl dteClinic()
	{
		return (DateControl)super.getControl(14);
	}
	public PartialDateBox pdtMYear()
	{
		return (PartialDateBox)super.getControl(15);
	}
	public cmbMaritalStatusComboBox cmbMaritalStatus()
	{
		return (cmbMaritalStatusComboBox)super.getComboBox(0);
	}
	public cmbErectionComboBox cmbErection()
	{
		return (cmbErectionComboBox)super.getComboBox(1);
	}
	public cmbConsentSgnComboBox cmbConsentSgn()
	{
		return (cmbConsentSgnComboBox)super.getComboBox(2);
	}
	public cmbTxOptionsDiscComboBox cmbTxOptionsDisc()
	{
		return (cmbTxOptionsDiscComboBox)super.getComboBox(3);
	}
	public cmbAdviceLitGivenComboBox cmbAdviceLitGiven()
	{
		return (cmbAdviceLitGivenComboBox)super.getComboBox(4);
	}
	public recbrOPDEDClinicNotesRecordBrowser recbrOPDEDClinicNotes()
	{
		return (recbrOPDEDClinicNotesRecordBrowser)super.getRecordBrowser(0);
	}
	public grdTreatmentGrid grdTreatment()
	{
		return (grdTreatmentGrid)super.getGrid(0);
	}
	public grdTxDiscussedGrid grdTxDiscussed()
	{
		return (grdTxDiscussedGrid)super.getGrid(1);
	}
	public grdLeafletsGivenGrid grdLeafletsGiven()
	{
		return (grdLeafletsGivenGrid)super.getGrid(2);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voOPDErectDysfxn = new ims.framework.ContextVariable("voOPDErectDysfxn", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier + "");
			cxl_voOPDErectDysTreatments = new ims.framework.ContextVariable("voOPDErectDysTreatments", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysTreatments_" + componentIdentifier + "");
			cxl_voAdviceLeaflets = new ims.framework.ContextVariable("voAdviceLeaflets", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voAdviceLeaflets_" + componentIdentifier + "");
			cxl_SelectedCareContextShort = new ims.framework.ContextVariable("SelectedCareContextShort", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier + "");
			cxl_MedSocialHistory = new ims.framework.ContextVariable("MedSocialHistory", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
			cxl_voOPDErectDysfxnColl = new ims.framework.ContextVariable("voOPDErectDysfxnColl", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxnColl_" + componentIdentifier + "");
			cxl_CurrentCareContextId = new ims.framework.ContextVariable("CurrentCareContextId", prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__CurrentCareContextId_" + componentIdentifier + "");
		}
		
		public boolean getvoOPDErectDysfxnIsNotNull()
		{
			return !cxl_voOPDErectDysfxn.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDErectDysfxnVo getvoOPDErectDysfxn()
		{
			return (ims.generalmedical.vo.OPDErectDysfxnVo)cxl_voOPDErectDysfxn.getValue(context);
		}
		public void setvoOPDErectDysfxn(ims.generalmedical.vo.OPDErectDysfxnVo value)
		{
			cxl_voOPDErectDysfxn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDErectDysfxn = null;
		public boolean getvoOPDErectDysTreatmentsIsNotNull()
		{
			return !cxl_voOPDErectDysTreatments.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDErectDysTreatmentsVo getvoOPDErectDysTreatments()
		{
			return (ims.generalmedical.vo.OPDErectDysTreatmentsVo)cxl_voOPDErectDysTreatments.getValue(context);
		}
		public void setvoOPDErectDysTreatments(ims.generalmedical.vo.OPDErectDysTreatmentsVo value)
		{
			cxl_voOPDErectDysTreatments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDErectDysTreatments = null;
		public boolean getvoAdviceLeafletsIsNotNull()
		{
			return !cxl_voAdviceLeaflets.getValueIsNull(context);
		}
		public ims.core.vo.AdviceLeafletsVo getvoAdviceLeaflets()
		{
			return (ims.core.vo.AdviceLeafletsVo)cxl_voAdviceLeaflets.getValue(context);
		}
		public void setvoAdviceLeaflets(ims.core.vo.AdviceLeafletsVo value)
		{
			cxl_voAdviceLeaflets.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voAdviceLeaflets = null;
		public boolean getSelectedCareContextShortIsNotNull()
		{
			return !cxl_SelectedCareContextShort.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getSelectedCareContextShort()
		{
			return (ims.core.vo.CareContextShortVo)cxl_SelectedCareContextShort.getValue(context);
		}
		public void setSelectedCareContextShort(ims.core.vo.CareContextShortVo value)
		{
			cxl_SelectedCareContextShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCareContextShort = null;
		public boolean getMedSocialHistoryIsNotNull()
		{
			return !cxl_MedSocialHistory.getValueIsNull(context);
		}
		public ims.core.vo.SocialHistoryVo getMedSocialHistory()
		{
			return (ims.core.vo.SocialHistoryVo)cxl_MedSocialHistory.getValue(context);
		}
		public void setMedSocialHistory(ims.core.vo.SocialHistoryVo value)
		{
			cxl_MedSocialHistory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MedSocialHistory = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
		public boolean getvoOPDErectDysfxnCollIsNotNull()
		{
			return !cxl_voOPDErectDysfxnColl.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDErectDysfxnVoCollection getvoOPDErectDysfxnColl()
		{
			return (ims.generalmedical.vo.OPDErectDysfxnVoCollection)cxl_voOPDErectDysfxnColl.getValue(context);
		}
		public void setvoOPDErectDysfxnColl(ims.generalmedical.vo.OPDErectDysfxnVoCollection value)
		{
			cxl_voOPDErectDysfxnColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDErectDysfxnColl = null;
		public boolean getCurrentCareContextIdIsNotNull()
		{
			return !cxl_CurrentCareContextId.getValueIsNull(context);
		}
		public Integer getCurrentCareContextId()
		{
			return (Integer)cxl_CurrentCareContextId.getValue(context);
		}
		public void setCurrentCareContextId(Integer value)
		{
			cxl_CurrentCareContextId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCareContextId = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[97];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier, "BO-1031100008-ID", "ID_OPDErectDysfxn");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier, "BO-1031100008-ERECTIONQUAL", "ErectionQual");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier, "BO-1031100008-CONSETNFORMSIGNED", "ConsetnFormSigned");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier, "BO-1031100008-TREATDISCUSSED", "TreatDiscussed");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__voOPDErectDysfxn_" + componentIdentifier, "BO-1031100008-ADVLEAFLETGIVEN", "AdvLeafletGiven");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-ID", "ID_SocialHistory");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-CARECONTEXT", "CareContext");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-SMOKINGSTATUS", "SmokingStatus");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-ILLICITDRUGS", "IllicitDrugs");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATION", "Occupation");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-LIVESWITH", "LivesWith");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOCAREFORPATIENT", "FitToCareForPatient");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOTAKEHOME", "FitToTakeHome");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONTEXT", "OccupationText");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-SOCIALHISTORYNOTES", "SocialHistoryNotes");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-MOBILITYINDEPENDENCE", "MobilityIndependence");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONSTATUS", "OccupationStatus");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDEDClinicNotes.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-DIET", "Diet");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
