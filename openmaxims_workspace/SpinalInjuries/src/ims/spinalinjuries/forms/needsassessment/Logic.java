//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.42 build 2209.33993)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.needsassessment;

import ims.assessment.vo.PatientAssessmentDataListVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectListVo;
import ims.assessment.vo.UserDefinedObjectComponentListVo;
import ims.assessment.vo.UserDefinedObjectListVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.NeedsAssessmentEditVo;
import ims.core.vo.NeedsAssessmentListVo;
import ims.core.vo.NeedsAssessmentListVoCollection;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.AdmisSummary;

import java.util.ArrayList;
public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	protected void onGrdComponentsSelectionChanged() throws PresentationLogicException
	{
		selectComponent();		
	}	
	protected void onQmbHCPTextSubmited(String value) throws PresentationLogicException 
	{
		searchForAuthoringHcp(value);
	}	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{				
		open();
	}
	protected void onRecbrAssessmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		browseRecord();
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.NeedsAssessment.ADD:
				newComponent();
				break;
			case GenForm.ContextMenus.NeedsAssessment.UPDATE:
				updateComponent();
				break;
			case GenForm.ContextMenus.NeedsAssessment.VIEW:
				viewComponent();
				break;
		}
	}
	public void initialize() throws FormOpenException
	{		
		populateSummaryInformation();
	}	
	public void open() throws PresentationLogicException
	{		
		form.getLocalContext().setSelectedInstance(null);		
		form.qmbHCP().setEnabled(false);
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setCurrentUserDefinedObject(null);
		
		populateListControl(domain.list(form.getGlobalContext().Core.getCurrentCareContext()));		
	}	
	public void populateListControl(NeedsAssessmentListVoCollection collection) throws PresentationLogicException 
	{		
		clear();
		
		if(collection != null)
		{
			for(int x = 0; x < collection.size(); x++)
			{
				if(collection.get(x) != null)
				{
					form.recbrAssessment().newRow(collection.get(x), buildHeaderTitle(collection.get(x)));
				}
			}
		}
		
		if(form.getGlobalContext().SpinalInjuries.NeedsAssessment.getSelectedAssessmentIsNotNull())
		{
			form.recbrAssessment().setValue(form.getGlobalContext().SpinalInjuries.NeedsAssessment.getSelectedAssessment());			
		}		
		if(form.getGlobalContext().SpinalInjuries.NeedsAssessment.getSelectedAssessmentIsNotNull() && form.recbrAssessment().getValue() != null)
		{
			form.getGlobalContext().SpinalInjuries.NeedsAssessment.setSelectedAssessment(null);
			
			if(form.getGlobalContext().SpinalInjuries.NeedsAssessment.getAssessmentWasEditedIsNotNull() && form.getGlobalContext().SpinalInjuries.NeedsAssessment.getAssessmentWasEdited().booleanValue())
				form.setMode(FormMode.EDIT);
		}
		else
		{
			if(form.getLocalContext().getSelectedInstanceIsNotNull())
				form.recbrAssessment().setValue(form.getLocalContext().getSelectedInstance());
			else if(collection != null && collection.size() > 0)
				form.recbrAssessment().setValue(collection.get(collection.size() - 1));
		}
					
		browseRecord();		
	}
	String buildHeaderTitle(NeedsAssessmentListVo record) 
	{
		if(record == null)
			return "Unknown needs assessment";
		
		String result = "";
		result += "Started on ";
		result += record.getDateStartedIsNotNull() ? record.getDateStarted().toString() : "<unknown>";
		result += " by ";	
		result += getHCPName(record.getAuthoringHCP());
		
		return result;
	}
	private String getHCPName(Hcp authoringHCP) 
	{
		if(authoringHCP == null || authoringHCP.getName() == null)
			return "<unknown>";
		return authoringHCP.getName().toString();
	}
	void browseRecord() throws PresentationLogicException
	{
		updateBrowseInformation();
		
		if(form.recbrAssessment().getValue() != null)
			populateInstanceControls(domain.get(form.recbrAssessment().getValue()));
		else
			clearInstanceControls();
		
		updateControlsState();
	}
	void updateBrowseInformation() 
	{
		form.lblBrowseStatus().setValue(form.recbrAssessment().getRecordState("Assessment", "Assessments"));		
	}
	public void updateControlsState()
	{
		if(form.getMode() == FormMode.EDIT)
		{						
			form.grdComponents().setReadOnly(form.getLocalContext().getSelectedInstance() == null);			
		}
		else
		{			
			form.btnUpdate().setVisible(form.getLocalContext().getSelectedInstanceIsNotNull());	
		}	
		
		updateContextMenusState();
	}
	private void updateContextMenusState()
	{
		boolean patientAssessmentIsNew = selectedPatientAssessmentIsNew();		
		boolean selected = form.grdComponents().getValue() != null;
		
		if(form.getMode() == FormMode.EDIT && form.getLocalContext().getSelectedInstanceIsNotNull())
		{			
			boolean componentIsCompleted = patientAssessmentIsNew ? false : selectedComponentIsCompleted();
			
			form.getContextMenus().getNeedsAssessmentADDItem().setVisible(selected && patientAssessmentIsNew);
			form.getContextMenus().getNeedsAssessmentUPDATEItem().setVisible(selected && !patientAssessmentIsNew && !componentIsCompleted);						
		}
		else
		{
			form.getContextMenus().hideAllNeedsAssessmentMenuItems();
		}
		
		form.getContextMenus().getNeedsAssessmentVIEWItem().setVisible(selected && !patientAssessmentIsNew);
	}		
	public String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>(); 
		if(form.dteStarted().getValue() == null || form.dteStarted().getValue().getDate() == null)
		{
			errors.add("Date/Time Started is mandatory.");
		}
		else
		{
			if(form.dteStarted().getValue().getDate().isGreaterThan(new Date()))
				errors.add("Date started cannot be greater than today");
		}
		
		if(errors.size() == 0)
			return null;
		
		String[] result = new String[errors.size()];
		for(int x = 0; x < errors.size(); x++)
		{
			result[x] = (String)errors.get(x);
		}		
		return result;
	}
	public boolean save() throws PresentationLogicException
	{
		NeedsAssessmentEditVo currentInstance = populateInstanceData(form.getLocalContext().getSelectedInstance());
		
		String[] errors = currentInstance.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedInstance(domain.save(currentInstance));
		} 
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}		
		
		return true;
	}	
	public void populateInstanceControls(NeedsAssessmentEditVo value) throws PresentationLogicException
	{
		clearInstanceControls();
		form.getLocalContext().setSelectedInstance(value);

		form.getGlobalContext().SpinalInjuries.setNeedsAssessmentComponentScoreCollection(value == null ? null : value.getComponentScore());
		form.getGlobalContext().Core.setNeedsAssessmentId(value.getID_NeedsAssessment());//WDEV-15537

		if(value == null)
			return;

		this.form.cmbIsNAC().setValue(value.getNeedAssessmentNumberIsNotNull() ? value.getNeedAssessmentNumber() : null);
		this.form.ansSummarySheet().setValue(value.getAttachBookletToSummarySheetIsNotNull() ? value.getAttachBookletToSummarySheet() : null);
		this.form.ansBooklet().setValue(value.getHadBookletIsNotNull() ? value.getHadBooklet() : null);
		this.form.qmbHCP().clear();
		if(value.getAuthoringHCPIsNotNull())
		{
			this.form.qmbHCP().newRow(value.getAuthoringHCP(), getHCPName(value.getAuthoringHCP()));
			this.form.qmbHCP().setValue(value.getAuthoringHCP());
		}
		this.form.dteStarted().setValue(value.getDateStarted());
		this.form.dteMeetingDate().setValue(value.getGoalPlanMeetingDate());
		this.form.dteMobilisation().setValue(value.getMobilisationDate());
		
		if(value.getPatientUserDefinedObject() != null && 
				value.getPatientUserDefinedObject().getPatientAssessments() != null)				
		{
			for(int x = 0; x < value.getPatientUserDefinedObject().getPatientAssessments().size(); x++)
			{
				PatientAssessmentListVo assessment = value.getPatientUserDefinedObject().getPatientAssessments().get(x);				
				addPatientAssessment(assessment);
			}
		}
	}
	public PatientAssessmentListVo createUserAssessment(UserDefinedObjectComponentListVo component)
	{
		PatientAssessmentListVo assessment = new PatientAssessmentListVo();				
		assessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());				
		assessment.setAssessmentData(instantiateAssessmentData(component));
		assessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
		assessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		return assessment;
	}
	public NeedsAssessmentEditVo populateInstanceData(NeedsAssessmentEditVo value)
	{
		if(value == null)
			value = new NeedsAssessmentEditVo();

		value.setNeedAssessmentNumber(this.form.cmbIsNAC().getValue());
		value.setAttachBookletToSummarySheet(this.form.ansSummarySheet().getValue());
		value.setHadBooklet(this.form.ansBooklet().getValue());		
		value.setAuthoringHCP(this.form.qmbHCP().getValue());
		value.setDateStarted(this.form.dteStarted().getValue());
		value.setGoalPlanMeetingDate(this.form.dteMeetingDate().getValue());
		value.setMobilisationDate(this.form.dteMobilisation().getValue());
		value.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		PatientUserDefinedObjectListVo patientUserDefinedObject = value.getPatientUserDefinedObject();
		if(patientUserDefinedObject == null)
		{
			patientUserDefinedObject = new PatientUserDefinedObjectListVo();
			UserDefinedObjectListVo usedDefinedObject = form.getLocalContext().getCurrentUserDefinedObject();
			patientUserDefinedObject.setUserDefinedObject(usedDefinedObject);

			PatientAssessmentListVoCollection assessments = new PatientAssessmentListVoCollection(); 
			
			for(int x = 0; x < usedDefinedObject.getComponents().size(); x++)
			{				
				UserDefinedObjectComponentListVo component = usedDefinedObject.getComponents().get(x);
				if(component.getActiveStatus() == null || !component.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					continue;
				
				PatientAssessmentListVo assessment = new PatientAssessmentListVo();	
				assessment.setPatient(form.getGlobalContext().Core.getPatientShort());	//WDEV-13090
				assessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());	//WDEV-13090
				assessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());				
				assessment.setAssessmentData(instantiateAssessmentData(component));
				assessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
				assessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				//WDEV-2384 
				assessment.setAuthoringInformation(getPatientAssessmentAuthoring());
				assessments.add(assessment);
			}
			
			patientUserDefinedObject.setPatientAssessments(assessments);
		}
		
		value.setPatientUserDefinedObject(patientUserDefinedObject);
		
		return value;		
	}	
	private AuthoringInformationVo getPatientAssessmentAuthoring()
	{
		AuthoringInformationVo voAuthoring = new AuthoringInformationVo();
		voAuthoring.setAuthoringDateTime(form.dteStarted().getValue());
		voAuthoring.setAuthoringHcp(domain.getHcpLite(form.qmbHCP().getValue()));
		return voAuthoring;
	}
	private PatientAssessmentDataListVo instantiateAssessmentData(UserDefinedObjectComponentListVo component) 
	{
		PatientAssessmentDataListVo data = new PatientAssessmentDataListVo();
		data.setUserAssessment(component.getUserAssessment());
		return data;
	}
	private void addPatientAssessment(PatientAssessmentListVo assessment) throws PresentationLogicException 
	{
		if(assessment == null)
			return;
		
		GenForm.grdComponentsRow row = null; 		
		
		row = form.grdComponents().getRows().newRow();
		
		if(componentIsNew(assessment))
		{
			row.setcolStatusText("Not started");
			row.setcolStatusImage(form.getImages().Core.Add);
		}
		else
		{
			if(componentIsCompleted(assessment))
			{
				row.setcolStatusText("Completed");
				row.setcolStatusImage(form.getImages().Core.Tick);
			}
			else
			{
				row.setcolStatusText("In progress");
				row.setcolStatusImage(form.getImages().Core.Time);
			}
		}				
		
		if(assessment.getAssessmentData() != null && assessment.getAssessmentData().getUserAssessment() != null)
		{
			row.setcolName(assessment.getAssessmentData().getUserAssessment().getName());
			row.setTooltip(assessment.getAssessmentData().getUserAssessment().getDescription());
		}
		
		
		if(row != null)
			row.setValue(assessment);
	}
	public void clear()
	{
		super.clear();		
		form.recbrAssessment().clear();
		clearInstanceControls();
	}
	public void clearInstanceControls() 
	{
		this.form.cmbIsNAC().setValue(null);
		this.form.ansSummarySheet().setValue(null);
		this.form.ansBooklet().setValue(null);
		this.form.qmbHCP().clear();
		this.form.dteStarted().setValue(null);
		this.form.dteMeetingDate().setValue(null);
		this.form.dteMobilisation().setValue(null);
		
		this.form.grdComponents().getRows().clear();
	}
	public void newInstance() throws PresentationLogicException 
	{
		if(!allowNew())
			return;
		
		form.lblBrowseStatus().setValue("Creating new assessment");
		form.getLocalContext().setSelectedInstance(null);
		UserDefinedObjectListVo userDefinedObject = domain.getCurrentUserDefinedForm();
		if(userDefinedObject == null)
		{
			engine.showMessage("Unable to create a new record, no single active user defined object found");
			return;
		}
		form.getLocalContext().setCurrentUserDefinedObject(userDefinedObject);
				
		clearInstanceControls();	
		populateInstanceControlsWithDefaultValues();
		form.qmbHCP().setRequired(true);
		form.qmbHCP().setEnabled(true);
		
		if(userDefinedObject.getComponentsIsNotNull())
		{
			for(int x = 0; x < userDefinedObject.getComponents().size(); x++)
			{
				if(userDefinedObject.getComponents().get(x).getActiveStatusIsNotNull() && userDefinedObject.getComponents().get(x).getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					UserDefinedObjectComponentListVo component = userDefinedObject.getComponents().get(x);
					if(component.getActiveStatus() == null || !component.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
						continue;
					
					addPatientAssessment(createUserAssessment(component));
				}
			}
		}
	}
	private void populateInstanceControlsWithDefaultValues()
	{
		form.dteStarted().setValue(new DateTime());
		form.qmbHCP().clear();
		Hcp hcp = (Hcp)domain.getHcpUser();
		if(hcp != null)
		{
			form.qmbHCP().newRow(hcp, getHCPName(hcp));
			form.qmbHCP().setValue(hcp);
		}
		form.setMode(FormMode.EDIT);		
	}
	public void updateInstance() 
	{		
		if(!allowUpdate())
			return;
		
		form.setMode(FormMode.EDIT);
		form.qmbHCP().setEnabled(false);
	}
	private void selectComponent()
	{
		form.getGlobalContext().SpinalInjuries.NeedsAssessment.setEditedAssessment(form.grdComponents().getValue());
		updateControlsState();
	}
	private void newComponent()
	{
		if(form.grdComponents().getValue() != null)
		{
			form.getGlobalContext().SpinalInjuries.NeedsAssessment.setEditComponent(Boolean.TRUE);
			editComponent();
		}
	}
	private void updateComponent()
	{
		if(form.grdComponents().getValue() != null)
		{
			form.getGlobalContext().SpinalInjuries.NeedsAssessment.setEditComponent(Boolean.TRUE);
			editComponent();
		}
	}
	private void viewComponent()
	{
		if(form.grdComponents().getValue() != null)
		{
			form.getGlobalContext().SpinalInjuries.NeedsAssessment.setEditComponent(Boolean.FALSE);
			editComponent();
		}
	}
	private void editComponent()
	{		
		form.getGlobalContext().SpinalInjuries.NeedsAssessment.setAssessmentWasEdited(form.getMode() == FormMode.EDIT ? Boolean.TRUE : Boolean.FALSE);
		form.getGlobalContext().SpinalInjuries.NeedsAssessment.setSelectedAssessment(form.getLocalContext().getSelectedInstance());
		form.getGlobalContext().SpinalInjuries.NeedsAssessment.setEditedComponentIsNew(new Boolean(selectedPatientAssessmentIsNew()));
		engine.open(form.getForms().SpinalInjuries.NeedsAssessmentComponentEdit);
	}
	private boolean selectedPatientAssessmentIsNew()
	{
		return componentIsNew(form.grdComponents().getValue());		
	}
		
	private boolean componentIsNew(PatientAssessmentListVo component)
	{
		if(component == null)
			return true;
		
		PatientAssessmentStatusReason status = component.getStatus();
		if(status != null && !status.equals(PatientAssessmentStatusReason.NOTCOMMENCED))
			return false;
		return true;
	}
	private boolean selectedComponentIsCompleted()
	{
		return componentIsCompleted(form.grdComponents().getValue());
	}
	private boolean componentIsCompleted(PatientAssessmentListVo patientAssessmentListVo)
	{
		PatientAssessmentStatusReason status = patientAssessmentListVo.getStatus();
		if(status != null && status.equals(PatientAssessmentStatusReason.COMPLETED))
			return true;
		return false;
	}
	private void populateSummaryInformation()
	{		
		CareContextShortVo currentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		if(currentCareContext == null)
			return;
		
		if(currentCareContext.getStartDateTimeIsNotNull() && currentCareContext.getStartDateTime().getDate() != null)
			form.dteCurrentAdmissionDate().setValue(currentCareContext.getStartDateTime().getDate());
		
		AdmisSummary summary = domain.getAdmissionSummary(currentCareContext);
		if(summary != null)
		{
			form.txtClassification1().setValue(summary.getOverallNeuro());
			form.txtClassification1().setValue(summary.getCompleteIncomplete());
			
			if(summary.getDateOfInjuryIsNotNull())
				form.txtDateOfInjury().setValue(summary.getDateOfInjury().toString());
			
			form.txtCause().setValue(summary.getCauseOfInjury());			
			form.dteFirstAdmission().setValue(summary.getFirstAdmissionDate());
							
			if(summary.getMRSAStatusIsNotNull())
				form.ansMRSAStatus().setValue(summary.getMRSAStatus().booleanValue() ? YesNoUnknown.YES : YesNoUnknown.NO); 			
		}	
	}	
	private void searchForAuthoringHcp(String text) 
	{		
		form.qmbHCP().clear();
		
		HcpCollection hcps = domain.listHcps(text);
		if(hcps != null)
		{
			for(int x = 0; x < hcps.size(); x++)
			{
				form.qmbHCP().newRow(hcps.get(x), getHCPName(hcps.get(x)));
			}
		}
		
		if(form.qmbHCP().getValues().size() > 1)
			form.qmbHCP().showOpened();			
		else if(form.qmbHCP().getValues().size() == 1)
			form.qmbHCP().setValue(hcps.get(0));			
	}
}
