//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.needsassessment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbIsNACComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.NeedsAssessmentNumber value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.NeedsAssessmentNumber value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.NeedsAssessmentNumber value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.NeedsAssessmentNumber value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.NeedsAssessmentNumber value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.NeedsAssessmentNumber getValue()
		{
			return (ims.clinical.vo.lookups.NeedsAssessmentNumber)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.NeedsAssessmentNumber value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrAssessmentRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.NeedsAssessmentListVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.NeedsAssessmentListVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.NeedsAssessmentListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.NeedsAssessmentListVo getValue()
		{
			return (ims.core.vo.NeedsAssessmentListVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.NeedsAssessmentListVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.Hcp value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.Hcp value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.Hcp getValue()
		{
			return (ims.core.vo.Hcp)super.control.getValue();
		}
		public void setValue(ims.core.vo.Hcp value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdComponentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdComponentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolStatusImageReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolStatusImageReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolStatusImageOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Image getcolStatusImage()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolStatusImage(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolStatusImageTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolStatusTextReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolStatusTextReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolStatusTextOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolStatusText()
		{
			return (String)super.row.get(1);
		}
		public void setcolStatusText(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolStatusTextTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolName()
		{
			return (String)super.row.get(2);
		}
		public void setcolName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.assessment.vo.PatientAssessmentListVo getValue()
		{
			return (ims.assessment.vo.PatientAssessmentListVo)super.row.getValue();
		}
		public void setValue(ims.assessment.vo.PatientAssessmentListVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdComponentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdComponentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdComponentsRow get(int index)
		{
			return new grdComponentsRow(super.collection.get(index));
		}
		public grdComponentsRow newRow()
		{
			return new grdComponentsRow(super.collection.newRow());
		}
		public grdComponentsRow newRow(boolean autoSelect)
		{
			return new grdComponentsRow(super.collection.newRow(autoSelect));
		}
		public grdComponentsRow newRowAt(int index)
		{
			return new grdComponentsRow(super.collection.newRowAt(index));
		}
		public grdComponentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdComponentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdComponentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.assessment.vo.PatientAssessmentListVoCollection getValues()
		{
			ims.assessment.vo.PatientAssessmentListVoCollection listOfValues = new ims.assessment.vo.PatientAssessmentListVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.assessment.vo.PatientAssessmentListVo getValue()
		{
			return (ims.assessment.vo.PatientAssessmentListVo)super.grid.getValue();
		}
		public void setValue(ims.assessment.vo.PatientAssessmentListVo value)
		{
			super.grid.setValue(value);
		}
		public grdComponentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdComponentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdComponentsRowCollection getRows()
		{
			return new grdComponentsRowCollection(super.grid.getRows());
		}
		public grdComponentsRow getRowByValue(ims.assessment.vo.PatientAssessmentListVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdComponentsRow(row);
		}
		public void setcolStatusImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolStatusImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolStatusTextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolStatusTextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class ansSummarySheetAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNo option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNo getValue()
		{
			return (ims.core.vo.lookups.YesNo)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNo value)
		{
			super.control.setValue(value);
		}
	}

	public static class ansBookletAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}

	public static class ansMRSAStatusAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuNeedsAssessment = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuNeedsAssessmentADDItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuNeedsAssessment.add(contextMenus.contextMenuNeedsAssessmentADDItem);
		contextMenus.contextMenuNeedsAssessmentUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuNeedsAssessment.add(contextMenus.contextMenuNeedsAssessmentUPDATEItem);
		contextMenus.contextMenuNeedsAssessmentVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuNeedsAssessment.add(contextMenus.contextMenuNeedsAssessmentVIEWItem);
		form.registerMenu(contextMenus.contextMenuNeedsAssessment);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 816, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Patient Summary", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Browse Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 624, 213, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NAC?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 64, 254, 416, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If NOT, would the patient like a copy of the booklet sent with his/her summary sheet?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 328, 236, 150, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Has the patient had a booklet?", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 376, 214, 100, 14, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is this the patient's", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 376, 299, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 376, 275, 96, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time Started:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 208, 189, 275, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of goal planning meeting (if arranged at this stage):", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 688, 90, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "MRSA Status:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 340, 138, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mobilisation date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 340, 114, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current admission date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 28, 114, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cause:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 28, 138, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Injury:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 340, 90, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "First admission date:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 28, 90, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Overall Classification:", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 676, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 756, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 212, 88, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 156, 136, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 156, 112, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 156, 88, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 488, 187, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 484, 112, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 484, 136, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 484, 88, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 488, 272, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 488, 211, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbIsNACTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbIsNACTemp);
		cmbIsNACComboBox cmbIsNAC = (cmbIsNACComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIsNACComboBox.class, m_cmbIsNACTemp);
		super.addComboBox(cmbIsNAC);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAssessmentTemp);
		recbrAssessmentRecordBrowser recbrAssessment = (recbrAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAssessmentRecordBrowser.class, m_recbrAssessmentTemp);
		super.addRecordBrowser(recbrAssessment);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 488, 296, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbHCPTemp);
		qmbHCPComboBox qmbHCP = (qmbHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHCPComboBox.class, m_qmbHCPTemp);
		super.addComboBox(qmbHCP);

		// Grid Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 816, 240, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdComponentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuNeedsAssessment, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdComponentsTemp);
		grdComponentsGrid grdComponents = (grdComponentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdComponentsGrid.class, m_grdComponentsTemp);
		grdComponents.addImageColumn(" ", 0, 1, 30, false, 0);
		grdComponents.addStringColumn("Status", 0, 0, 100, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdComponents.addStringColumn(" Component Name", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdComponents);

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 488, 254, 18, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansSummarySheet = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpansSummarySheet);
		ansSummarySheetAnswerBox ansSummarySheet = (ansSummarySheetAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansSummarySheetAnswerBox.class, tmpansSummarySheet);
		super.addAnswerBox(ansSummarySheet);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 488, 236, 18, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansBooklet = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.TRUE});
		super.addControl(tmpansBooklet);
		ansBookletAnswerBox ansBooklet = (ansBookletAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansBookletAnswerBox.class, tmpansBooklet);
		super.addAnswerBox(ansBooklet);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 768, 90, 14, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansMRSAStatus = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpansMRSAStatus);
		ansMRSAStatusAnswerBox ansMRSAStatus = (ansMRSAStatusAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansMRSAStatusAnswerBox.class, tmpansMRSAStatus);
		super.addAnswerBox(ansMRSAStatus);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblBrowseStatus()
	{
		return (Label)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(16);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(19);
	}
	public TextBox txtClassification2()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtDateOfInjury()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtCause()
	{
		return (TextBox)super.getControl(22);
	}
	public TextBox txtClassification1()
	{
		return (TextBox)super.getControl(23);
	}
	public DateControl dteMeetingDate()
	{
		return (DateControl)super.getControl(24);
	}
	public DateControl dteCurrentAdmissionDate()
	{
		return (DateControl)super.getControl(25);
	}
	public DateControl dteMobilisation()
	{
		return (DateControl)super.getControl(26);
	}
	public DateControl dteFirstAdmission()
	{
		return (DateControl)super.getControl(27);
	}
	public DateTimeControl dteStarted()
	{
		return (DateTimeControl)super.getControl(28);
	}
	public cmbIsNACComboBox cmbIsNAC()
	{
		return (cmbIsNACComboBox)super.getComboBox(0);
	}
	public recbrAssessmentRecordBrowser recbrAssessment()
	{
		return (recbrAssessmentRecordBrowser)super.getRecordBrowser(0);
	}
	public qmbHCPComboBox qmbHCP()
	{
		return (qmbHCPComboBox)super.getComboBox(1);
	}
	public grdComponentsGrid grdComponents()
	{
		return (grdComponentsGrid)super.getGrid(0);
	}
	public ansSummarySheetAnswerBox ansSummarySheet()
	{
		return (ansSummarySheetAnswerBox)super.getAnswerBox(0);
	}
	public ansBookletAnswerBox ansBooklet()
	{
		return (ansBookletAnswerBox)super.getAnswerBox(1);
	}
	public ansMRSAStatusAnswerBox ansMRSAStatus()
	{
		return (ansMRSAStatusAnswerBox)super.getAnswerBox(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			SpinalInjuries = new SpinalInjuriesForms();
		}
		public final class SpinalInjuriesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SpinalInjuriesForms()
			{
				NeedsAssessmentComponentEdit = new LocalFormName(105154);
			}
			public final FormName NeedsAssessmentComponentEdit;
		}

		public SpinalInjuriesForms SpinalInjuries;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Time = new ImageHelper(102235, "Images/Core/clock.png", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Time;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Add;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_CurrentUserDefinedObject = new ims.framework.ContextVariable("CurrentUserDefinedObject", prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__CurrentUserDefinedObject_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.core.vo.NeedsAssessmentEditVo getSelectedInstance()
		{
			return (ims.core.vo.NeedsAssessmentEditVo)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.core.vo.NeedsAssessmentEditVo value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getCurrentUserDefinedObjectIsNotNull()
		{
			return !cxl_CurrentUserDefinedObject.getValueIsNull(context);
		}
		public ims.assessment.vo.UserDefinedObjectListVo getCurrentUserDefinedObject()
		{
			return (ims.assessment.vo.UserDefinedObjectListVo)cxl_CurrentUserDefinedObject.getValue(context);
		}
		public void setCurrentUserDefinedObject(ims.assessment.vo.UserDefinedObjectListVo value)
		{
			cxl_CurrentUserDefinedObject.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentUserDefinedObject = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class NeedsAssessment implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int UPDATE = 2;
			public static final int VIEW = 3;
		}
		public void disableAllNeedsAssessmentMenuItems()
		{
			this.contextMenuNeedsAssessmentADDItem.setEnabled(false);
			this.contextMenuNeedsAssessmentUPDATEItem.setEnabled(false);
			this.contextMenuNeedsAssessmentVIEWItem.setEnabled(false);
		}
		public void hideAllNeedsAssessmentMenuItems()
		{
			this.contextMenuNeedsAssessmentADDItem.setVisible(false);
			this.contextMenuNeedsAssessmentUPDATEItem.setVisible(false);
			this.contextMenuNeedsAssessmentVIEWItem.setVisible(false);
		}
		private Menu contextMenuNeedsAssessment;
		public MenuItem getNeedsAssessmentADDItem()
		{
			return this.contextMenuNeedsAssessmentADDItem;
		}
		private MenuItem contextMenuNeedsAssessmentADDItem;
		public MenuItem getNeedsAssessmentUPDATEItem()
		{
			return this.contextMenuNeedsAssessmentUPDATEItem;
		}
		private MenuItem contextMenuNeedsAssessmentUPDATEItem;
		public MenuItem getNeedsAssessmentVIEWItem()
		{
			return this.contextMenuNeedsAssessmentVIEWItem;
		}
		private MenuItem contextMenuNeedsAssessmentVIEWItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[90];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-ID", "ID_NeedsAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-GOALPLANMEETINGDATE", "GoalPlanMeetingDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-NEEDASSESSMENTNUMBER", "NeedAssessmentNumber");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-HADBOOKLET", "HadBooklet");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-ATTACHBOOKLETTOSUMMARYSHEET", "AttachBookletToSummarySheet");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.SelectedAssessment", "BO-1072100026-DATESTARTED", "DateStarted");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_SpinalInjuries.NeedsAssessment.EditedAssessment", "BO-1003100048-ID", "ID_PatientAssessment");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-ID", "ID_NeedsAssessment");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-GOALPLANMEETINGDATE", "GoalPlanMeetingDate");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-NEEDASSESSMENTNUMBER", "NeedAssessmentNumber");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-HADBOOKLET", "HadBooklet");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-ATTACHBOOKLETTOSUMMARYSHEET", "AttachBookletToSummarySheet");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-DATESTARTED", "DateStarted");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-MOBILISATIONDATE", "MobilisationDate");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1072100026-CARECONTEXT", "CareContext");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__CurrentUserDefinedObject_" + componentIdentifier, "BO-1028100004-ID", "ID_UserDefinedObject");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__CurrentUserDefinedObject_" + componentIdentifier, "BO-1028100004-NAME", "Name");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__CurrentUserDefinedObject_" + componentIdentifier, "BO-1028100004-OBJECTTYPE", "ObjectType");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.NeedsAssessment.__internal_x_context__CurrentUserDefinedObject_" + componentIdentifier, "BO-1028100004-ACTIVESTATUS", "ActiveStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
