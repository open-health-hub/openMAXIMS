//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.nurassessmentbowels;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.spinalinjuries.domain.NurAssessmentBowels.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.spinalinjuries.domain.NurAssessmentBowels domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void onansBowelsOpenSponValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ansBowelsOpenSpon().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansBowelsOpenSponLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansBowelsOpenSponLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ansBowelsOpenSpon().addOption(instance);
		}
	}
	protected final void bindansBowelsOpenSponLookup()
	{
		this.form.ansBowelsOpenSpon().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ansBowelsOpenSpon().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansBowelsOpenSponLookupValue()
	{
		this.form.ansBowelsOpenSpon().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbOstomyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOstomy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelOstomyType existingInstance = (ims.nursing.vo.lookups.BowelOstomyType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOstomyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BowelOstomyType)
		{
			ims.nursing.vo.lookups.BowelOstomyType instance = (ims.nursing.vo.lookups.BowelOstomyType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOstomyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelOstomyType existingInstance = (ims.nursing.vo.lookups.BowelOstomyType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOstomy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOstomyLookup()
	{
		this.form.cmbOstomy().clear();
		ims.nursing.vo.lookups.BowelOstomyTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBowelOstomyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOstomy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOstomyLookupValue(int id)
	{
		ims.nursing.vo.lookups.BowelOstomyType instance = ims.nursing.vo.lookups.LookupHelper.getBowelOstomyTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOstomy().setValue(instance);
	}
	protected final void defaultcmbOstomyLookupValue()
	{
		this.form.cmbOstomy().setValue((ims.nursing.vo.lookups.BowelOstomyType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BowelOstomyType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BowelOstomyType.TYPE_ID));
	}
	protected final void oncmbPreformedByValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPreformedBy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelRoutinePerformedBy existingInstance = (ims.nursing.vo.lookups.BowelRoutinePerformedBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPreformedByLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BowelRoutinePerformedBy)
		{
			ims.nursing.vo.lookups.BowelRoutinePerformedBy instance = (ims.nursing.vo.lookups.BowelRoutinePerformedBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPreformedByLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelRoutinePerformedBy existingInstance = (ims.nursing.vo.lookups.BowelRoutinePerformedBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPreformedBy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPreformedByLookup()
	{
		this.form.cmbPreformedBy().clear();
		ims.nursing.vo.lookups.BowelRoutinePerformedByCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBowelRoutinePerformedBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPreformedBy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPreformedByLookupValue(int id)
	{
		ims.nursing.vo.lookups.BowelRoutinePerformedBy instance = ims.nursing.vo.lookups.LookupHelper.getBowelRoutinePerformedByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPreformedBy().setValue(instance);
	}
	protected final void defaultcmbPreformedByLookupValue()
	{
		this.form.cmbPreformedBy().setValue((ims.nursing.vo.lookups.BowelRoutinePerformedBy)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BowelRoutinePerformedBy.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BowelRoutinePerformedBy.TYPE_ID));
	}
	protected final void oncmbRoutineValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRoutine().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelRoutineLocation existingInstance = (ims.nursing.vo.lookups.BowelRoutineLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRoutineLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BowelRoutineLocation)
		{
			ims.nursing.vo.lookups.BowelRoutineLocation instance = (ims.nursing.vo.lookups.BowelRoutineLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRoutineLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelRoutineLocation existingInstance = (ims.nursing.vo.lookups.BowelRoutineLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRoutine().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRoutineLookup()
	{
		this.form.cmbRoutine().clear();
		ims.nursing.vo.lookups.BowelRoutineLocationCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBowelRoutineLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRoutine().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRoutineLookupValue(int id)
	{
		ims.nursing.vo.lookups.BowelRoutineLocation instance = ims.nursing.vo.lookups.LookupHelper.getBowelRoutineLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRoutine().setValue(instance);
	}
	protected final void defaultcmbRoutineLookupValue()
	{
		this.form.cmbRoutine().setValue((ims.nursing.vo.lookups.BowelRoutineLocation)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BowelRoutineLocation.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BowelRoutineLocation.TYPE_ID));
	}
	protected final void bindgrdMedsColRouteLookup()
	{
		this.form.grdMeds().ColRouteComboBox().clear();
		ims.core.vo.lookups.MedicationRouteCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdMeds().ColRouteComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdMedsColFrequencyLookup()
	{
		this.form.grdMeds().ColFrequencyComboBox().clear();
		ims.core.vo.lookups.MedicationFrequencyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationFrequency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdMeds().ColFrequencyComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdBowelRegimeColSelectLookup()
	{
		this.form.grdBowelRegime().answerBoxColumnClear(1);
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdBowelRegime().answerBoxColumnNewOption(1, lookupCollection.get(x));
		}
	}
	protected final void oncmbTimeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTime().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelTimeOfDay existingInstance = (ims.nursing.vo.lookups.BowelTimeOfDay)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTimeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BowelTimeOfDay)
		{
			ims.nursing.vo.lookups.BowelTimeOfDay instance = (ims.nursing.vo.lookups.BowelTimeOfDay)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTimeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelTimeOfDay existingInstance = (ims.nursing.vo.lookups.BowelTimeOfDay)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTime().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTimeLookup()
	{
		this.form.cmbTime().clear();
		ims.nursing.vo.lookups.BowelTimeOfDayCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBowelTimeOfDay(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTime().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTimeLookupValue(int id)
	{
		ims.nursing.vo.lookups.BowelTimeOfDay instance = ims.nursing.vo.lookups.LookupHelper.getBowelTimeOfDayInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTime().setValue(instance);
	}
	protected final void defaultcmbTimeLookupValue()
	{
		this.form.cmbTime().setValue((ims.nursing.vo.lookups.BowelTimeOfDay)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BowelTimeOfDay.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BowelTimeOfDay.TYPE_ID));
	}
	protected final void bindgrdSufferFromColSelectLookup()
	{
		this.form.grdSufferFrom().answerBoxColumnClear(1);
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.grdSufferFrom().answerBoxColumnNewOption(1, lookupCollection.get(x));
		}
	}
	protected final void oncmbPatternValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPattern().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelPattern existingInstance = (ims.nursing.vo.lookups.BowelPattern)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatternLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BowelPattern)
		{
			ims.nursing.vo.lookups.BowelPattern instance = (ims.nursing.vo.lookups.BowelPattern)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatternLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BowelPattern existingInstance = (ims.nursing.vo.lookups.BowelPattern)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPattern().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatternLookup()
	{
		this.form.cmbPattern().clear();
		ims.nursing.vo.lookups.BowelPatternCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBowelPattern(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPattern().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatternLookupValue(int id)
	{
		ims.nursing.vo.lookups.BowelPattern instance = ims.nursing.vo.lookups.LookupHelper.getBowelPatternInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPattern().setValue(instance);
	}
	protected final void defaultcmbPatternLookupValue()
	{
		this.form.cmbPattern().setValue((ims.nursing.vo.lookups.BowelPattern)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BowelPattern.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BowelPattern.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.ansBowelsOpenSpon().setValue(null);
		this.form.chkSectionComplete().setValue(false);
		this.form.txtNotes().setValue("");
		this.form.cmbPreformedBy().setValue(null);
		this.form.cmbRoutine().setValue(null);
		this.form.cmbTime().setValue(null);
		this.form.cmbPattern().setValue(null);
		this.form.chkCopy().setValue(false);
	}
	protected void populateScreenFromData(ims.spinalinjuries.vo.NurAssessmentBowelsVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.ansBowelsOpenSpon().setValue(value.getBowelsOpenSpontaneouslyIsNotNull() ? value.getBowelsOpenSpontaneously() : null);
		if(value.getIsCompleteIsNotNull())
			this.form.chkSectionComplete().setValue(value.getIsComplete().booleanValue());
		this.form.txtNotes().setValue(value.getNotesIsNotNull() ? value.getNotes(): null);
		this.form.cmbPreformedBy().setValue(value.getBowelRoutinePerformedByIsNotNull() ? value.getBowelRoutinePerformedBy() : null);
		this.form.cmbRoutine().setValue(value.getBowelRoutinePerformedInIsNotNull() ? value.getBowelRoutinePerformedIn() : null);
		this.form.cmbTime().setValue(value.getTimeOfDayIsNotNull() ? value.getTimeOfDay() : null);
		this.form.cmbPattern().setValue(value.getUsualBowelPatternIsNotNull() ? value.getUsualBowelPattern() : null);
		if(value.getCopyIsNotNull())
			this.form.chkCopy().setValue(value.getCopy().booleanValue());
	}
	protected ims.spinalinjuries.vo.NurAssessmentBowelsVo populateDataFromScreen(ims.spinalinjuries.vo.NurAssessmentBowelsVo value)
	{
		if(value == null)
			value = new ims.spinalinjuries.vo.NurAssessmentBowelsVo();

		value.setBowelsOpenSpontaneously(this.form.ansBowelsOpenSpon().getValue());
		value.setIsComplete(new Boolean(this.form.chkSectionComplete().getValue()));
		value.setNotes(this.form.txtNotes().getValue());
		value.setBowelRoutinePerformedBy(this.form.cmbPreformedBy().getValue());
		value.setBowelRoutinePerformedIn(this.form.cmbRoutine().getValue());
		value.setTimeOfDay(this.form.cmbTime().getValue());
		value.setUsualBowelPattern(this.form.cmbPattern().getValue());
		value.setCopy(new Boolean(this.form.chkCopy().getValue()));

		return value;
	}
	protected ims.spinalinjuries.vo.NurAssessmentBowelsVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.spinalinjuries.vo.NurAssessmentBowelsVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.spinalinjuries.domain.NurAssessmentBowels domain;
}
