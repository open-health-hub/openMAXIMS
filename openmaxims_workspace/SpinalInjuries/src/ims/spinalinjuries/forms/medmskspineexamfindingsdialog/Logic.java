//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.22 build 50209.1030)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.medmskspineexamfindingsdialog;

import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MskSpineExamFindingVo;
import ims.spinalinjuries.vo.lookups.SpineExaminationFinding;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.setMode(FormMode.EDIT);
		form.txtInterpretation().setFocus();
		populateFindingData();
	}	
	
	private void populateFindingData()
	{
		MskSpineExamFindingVo mskSpineExFindingVO = form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo();
		if(mskSpineExFindingVO != null)
		{
			populateControlsFromVO(mskSpineExFindingVO);
		}	
	}
	
	private void populateControlsFromVO(MskSpineExamFindingVo findingVO)
	{
		if(findingVO == null)
			return;
		
		//Date, Time & HCP
		
		//if(form.getGlobalContext().SpinalInjuries.Back.getAdminSpineExamVo().getRecordingHCP() != null)
			//form.txtHcp().setValue(form.getGlobalContext().SpinalInjuries.Back.getAdminSpineExamVo().getRecordingHCP().toString());
		
		if(findingVO.getFindingTypeIsNotNull())
			form.cmbFindingType().setValue(new SpineExaminationFinding(findingVO.getFindingType().getID()));
		
		if (findingVO.getSpineFindInterpretationIsNotNull())
			form.txtInterpretation().setValue(findingVO.getSpineFindInterpretation());
		
		if (findingVO.getSpineSiteNameIsNotNull())
			form.txtSiteName().setValue(findingVO.getSpineSiteName());
	
		if(findingVO.getIsProblemIsNotNull())
			form.chkSaveAsProblem().setValue(findingVO.getIsProblem().booleanValue());
	}
	
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);		
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(getDataFromControls(form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo()))
		{
			engine.close(DialogResult.OK);
		}		
	}	
	
	private boolean getDataFromControls(MskSpineExamFindingVo findingVO)
	{
		findingVO.setSpineFindInterpretation(form.txtInterpretation().getValue());
		findingVO.setIsProblem(new Boolean(form.chkSaveAsProblem().getValue()));
		//Set the Findings value back to the context
		form.getGlobalContext().SpinalInjuries.Back.setMskSpineExamFindingVo(findingVO);
		
		if (form.chkSaveAsProblem().getValue())
		{
			String patientProblem = form.txtSiteName().getValue() + " - " + form.cmbFindingType().getValue().toString() + ((form.txtInterpretation().getValue() != null && form.txtInterpretation().getValue().length() > 0) ? " - " + form.txtInterpretation().getValue() : "");
			MedicalProbOnAdmisVo voMedicalProblem = new MedicalProbOnAdmisVo();
			voMedicalProblem.setPatientProblem(patientProblem);//wdev-15280
			voMedicalProblem.setIsActive(Boolean.TRUE);
			voMedicalProblem.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			voMedicalProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voMedicalProblem.setProblemContext("Spine Examination");

			form.getGlobalContext().SpinalInjuries.setMedicalProbToSave(voMedicalProblem);
			
			if (patientProblem.length() > 255)
			{
				engine.showMessage("The Problem description exceeds 255 characters. Do you agree to save only the first 255 characters?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING);
				return false;
			}
		}
		else
			form.getGlobalContext().SpinalInjuries.setMedicalProbToSave(null);
			
		return true;
	}

	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)throws PresentationLogicException
	{
		if (result.equals(DialogResult.YES))
		{
			MedicalProbOnAdmisVo voMedicalProblem = form.getGlobalContext().SpinalInjuries.getMedicalProbToSave();
			voMedicalProblem.setPatientProblem(voMedicalProblem.getPatientProblem().substring(0, 255));
			form.getGlobalContext().SpinalInjuries.setMedicalProbToSave(voMedicalProblem);
			engine.close(DialogResult.OK);
		}		
	}
	
}
