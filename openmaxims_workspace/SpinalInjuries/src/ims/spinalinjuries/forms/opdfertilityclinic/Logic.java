//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50127.1530)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
// AU - 23/11/2005 - WDEV-53 Fixed. Grids are lookup binded, the lookups saved and made subsequently inactive are loaded ok.
package ims.spinalinjuries.forms.opdfertilityclinic;

import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.SocialHistoryMaritalStatusVo;
import ims.core.vo.SocialHistoryVo;
import ims.core.vo.lookups.MaritalStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.OPDFertCLinicSemenAna;
import ims.generalmedical.vo.OPDFertCLinicSemenAnaCollection;
import ims.generalmedical.vo.OPDFertClinicVo;
import ims.generalmedical.vo.OPDFertClinicVoCollection;
import ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdBladDrainageRow;
import ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdTxErectDysRow;
import ims.spinalinjuries.vo.lookups.FCBladderDrainage;
import ims.spinalinjuries.vo.lookups.FCBladderDrainageCollection;
import ims.spinalinjuries.vo.lookups.FCEndoEval;
import ims.spinalinjuries.vo.lookups.FCEndoEvalCollection;
import ims.spinalinjuries.vo.lookups.FCErectDysTreatments;
import ims.spinalinjuries.vo.lookups.FCErectDysTreatmentsCollection;
import ims.spinalinjuries.vo.lookups.FCInfectionScreening;
import ims.spinalinjuries.vo.lookups.FCInfectionScreeningCollection;
import ims.spinalinjuries.vo.lookups.FCSemenAnalysis;
import ims.spinalinjuries.vo.lookups.FCSemenAnalysisCollection;
import ims.spinalinjuries.vo.lookups.FCTreatmentsOffered;
import ims.spinalinjuries.vo.lookups.FCTreatmentsOfferedCollection;
import ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith;
import ims.spinalinjuries.vo.lookups.FCmethodsSuccessWithCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		PatientShort voPatShort = form.getGlobalContext().Core.getPatientShort();
		if (voPatShort == null) 
			throw new FormOpenException("Error: Patient not selected.");
		
		form.getLocalContext().setvoOPDFertClinic(null);
		
		form.getLocalContext().setSelectedCareContextShort(form.getGlobalContext().Core.getCurrentCareContext());
		open();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(Boolean.TRUE);	//wdev-13187
	}
	
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		clearScreen();		
		form.container1().cmbMaritalStatus().setValue(null);
		form.container1().pdtYear().setValue(null);
		
		loadLookupsIntoGrid();
		
		fillRecordBrowser();
		setRecordBrowser();
		
		if (form.getLocalContext().getSelectedCareContextShortIsNotNull())
		{
			populateScreenFromData();
		}
	}
	
	private void fillRecordBrowser()
	{
		form.recbrOPDFertilirtClinic().clear();
		boolean boolGoldenInstanceFound=false;
		CareContextShortVoCollection voCollCareContexts = domain.listFertilityCareContextsByEpisode(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()).sort();		
		if (voCollCareContexts != null)
		{
			for (int i=0; i < voCollCareContexts.size(); i++)
			{
				if(voCollCareContexts.get(i) != null)
				{
					if (voCollCareContexts.get(i).getID_CareContext().equals(form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext()))
					{
						form.recbrOPDFertilirtClinic().newRow(voCollCareContexts.get(i),voCollCareContexts.get(i).getRecordBrowserText(), Color.Green);
						form.recbrOPDFertilirtClinic().setValue(voCollCareContexts.get(i));
						form.getLocalContext().setSelectedCareContextShort(voCollCareContexts.get(i));
						boolGoldenInstanceFound = true;
						browseRecord();						
					}
					else
					{
						form.recbrOPDFertilirtClinic().newRow(voCollCareContexts.get(i), voCollCareContexts.get(i).getRecordBrowserText());
					}										
				}
			}
			
			if (boolGoldenInstanceFound == false)
			{
				clearScreen();
				form.recbrOPDFertilirtClinic().newRow(form.getGlobalContext().Core.getCurrentCareContext(),form.getGlobalContext().Core.getCurrentCareContext().getRecordBrowserText(),Color.Green);				
				form.getLocalContext().setSelectedCareContextShort(form.recbrOPDFertilirtClinic().getValue());								
				OPDFertClinicVo voOPDFertClinic = new OPDFertClinicVo();
				voOPDFertClinic.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				form.getLocalContext().setvoOPDFertClinic(voOPDFertClinic);												
				form.recbrOPDFertilirtClinic().setValue(form.getGlobalContext().Core.getCurrentCareContext());
				browseRecord();						
				updateBrowseInformation();
			}
		}
					
	}
	
	private void setRecordBrowser()
	{
		// after an update need to set the record browser to display the updated record
		if(form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			if(form.getLocalContext().getUpdatedInstance() instanceof CareContextShortVo)
			{
				CareContextShortVo voCareContext = (CareContextShortVo) form.getLocalContext().getUpdatedInstance();
				form.recbrOPDFertilirtClinic().setValue(voCareContext);
			}
		}
	}
	private void browseRecord()
	{
		updateBrowseInformation();

		if(form.recbrOPDFertilirtClinic().getValue() != null)
		{			
			OPDFertClinicVoCollection coll = domain.getOPDFertClinicByCareContext(form.recbrOPDFertilirtClinic().getValue());
			if(coll!=null&&coll.size()>0)
				form.getLocalContext().setvoOPDFertClinic(coll.get(0));
			form.getLocalContext().setMedSocialHistory(domain.getMedSocialHistoryByCareContext(form.recbrOPDFertilirtClinic().getValue()));				

			if (form.getLocalContext().getvoOPDFertClinicIsNotNull())
				populateScreenFromData();
			else
				clearScreen();
			
			if (form.getLocalContext().getMedSocialHistoryIsNotNull())
				populateSocialHistoryScreenFromData();
		}

		updateControlsState();		
	}


	private void updateBrowseInformation()
	{
		form.lblBrowser().setValue(form.recbrOPDFertilirtClinic().getRecordState("Assessment", "Assessments"));
	}
	
	private void populateSocialHistoryScreenFromData()
	{
		clearSocialHistoryControls();
		
		if (form.getLocalContext().getMedSocialHistoryIsNotNull())
		{
			SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();

			if ((voSocHist.getMaritalStatusIsNotNull()) && (voSocHist.getMaritalStatus().getMaritalStatusIsNotNull()))
				form.container1().cmbMaritalStatus().setValue(voSocHist.getMaritalStatus().getMaritalStatus());

			if ((voSocHist.getMaritalStatusIsNotNull()) && (voSocHist.getMaritalStatus().getStatusDateIsNotNull()))
				form.container1().pdtYear().setValue(voSocHist.getMaritalStatus().getStatusDate());
		}
	}
	
	private void populateScreenFromData()
	{
		loadLookupsIntoGrid();
		
		OPDFertClinicVo voOPDFertClinic = form.getLocalContext().getvoOPDFertClinic();
		if (voOPDFertClinic != null)
		{

			if (voOPDFertClinic.getAuthoringInformationIsNotNull() )
				form.customControlAuthoringInfo().setValue(voOPDFertClinic.getAuthoringInformation());
			// If data exists for combo and text boxes then populate....
			if ((voOPDFertClinic.getAchieveErectionIsNotNull()) && (voOPDFertClinic.getAchieveErection().getText() != null))
				form.container1().cmbAchieveErection().setValue(voOPDFertClinic.getAchieveErection());
			if (voOPDFertClinic.getSexDrive() != null)
				form.container1().cmbSexualDrive().setValue(voOPDFertClinic.getSexDrive());
			if (voOPDFertClinic.getEjaculation() != null)
				form.container1().cmbEjaculation().setValue(voOPDFertClinic.getEjaculation());
			if (voOPDFertClinic.getBladderDrainagetxt() != null)
				form.container1().txtBladDrainOther().setValue(voOPDFertClinic.getBladderDrainagetxt());
			if (voOPDFertClinic.getTestAtrophy() != null)
				form.container1().cmbTestAtrophy().setValue(voOPDFertClinic.getTestAtrophy());
			if (voOPDFertClinic.getScreenConsent() != null)
				form.container1().cmbScreenConsent().setValue(voOPDFertClinic.getScreenConsent());
			if (voOPDFertClinic.getSemenCulture() != null)
				form.container1().cmbSemenCulture().setValue(voOPDFertClinic.getSemenCulture());
			if (voOPDFertClinic.getElisa() != null)
				form.container1().cmbELISA().setValue(voOPDFertClinic.getElisa());
			if (voOPDFertClinic.getSpermFrozen() != null)
				form.container1().cmbSpermFrozen().setValue(voOPDFertClinic.getSpermFrozen());

			// If data exists the populate the Treatments for ED grid
			FCErectDysTreatmentsCollection colErectDysTreatments = voOPDFertClinic.getErectDysfxTreatments();
			if (colErectDysTreatments != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdTxErectDysRow rowTxErectDys;
				for (int j = 0; j < colErectDysTreatments.size(); j++)
				{
					FCErectDysTreatments erectDysTreat = colErectDysTreatments.get(j);
					rowTxErectDys = form.container1().grdTxErectDys().getRowByValue(erectDysTreat);
					if (rowTxErectDys != null)
					{
						rowTxErectDys.setcolSelect(true);
					}
					else
					{
						//Add the row as it wasn't found (e.g. an inactive lookup)
						rowTxErectDys = form.container1().grdTxErectDys().getRows().newRow();
						rowTxErectDys.setValue(erectDysTreat);
						rowTxErectDys.setcolTreatment(erectDysTreat);
						rowTxErectDys.setcolSelect(true);
					}
				}
			}

			// If data exists the populate the Bladder Drainage grid
			FCBladderDrainageCollection colBladderDrainage = voOPDFertClinic.getBladderDrainage();
			if (colBladderDrainage != null)
			{
				grdBladDrainageRow rowBladDrainage;
				for (int j = 0; j < colBladderDrainage.size(); j++)
				{
					FCBladderDrainage bladderDrainage = colBladderDrainage.get(j);
					rowBladDrainage = form.container1().grdBladDrainage().getRowByValue(bladderDrainage);
					if (rowBladDrainage != null)
					{
						rowBladDrainage.setcolSelect(true);
					}
					else
					{
						//Add the row as it wasn't found (e.g. an inactive lookup)
						rowBladDrainage = form.container1().grdBladDrainage().getRows().newRow();
						rowBladDrainage.setValue(bladderDrainage);
						rowBladDrainage.setcolDrainageType(bladderDrainage);
						rowBladDrainage.setcolSelect(true);
					}
				}
			}

			// If data exists the populate the Endocrine Evaluation Performed
			// grid
			FCEndoEvalCollection colEndoEval = voOPDFertClinic.getEndoEvalPerf();
			if (colEndoEval != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdEndoEvalPerfRow rowEndoEvalPerf;
				for (int j = 0; j < colEndoEval.size(); j++)
				{
					FCEndoEval endoEval = colEndoEval.get(j);
					rowEndoEvalPerf = form.container1().grdEndoEvalPerf().getRowByValue(endoEval);
					if (rowEndoEvalPerf != null)
					{
						rowEndoEvalPerf.setcolSelect(true);
					}
					else
					{
						rowEndoEvalPerf = form.container1().grdEndoEvalPerf().getRows().newRow();
						rowEndoEvalPerf.setValue(endoEval);
						rowEndoEvalPerf.setcolHormoneLevel(endoEval);
						rowEndoEvalPerf.setcolSelect(true);
					}
				}
			}
			// If data exists the populate the Infection Screening grid
			FCInfectionScreeningCollection colInfectionScreening = voOPDFertClinic.getInfxnScreening();
			if (colInfectionScreening != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdInfScreenRow rowInfScreen;
				for (int j = 0; j < colInfectionScreening.size(); j++)
				{
					FCInfectionScreening infectionScreening = colInfectionScreening.get(j);
					rowInfScreen = form.container1().grdInfScreen().getRowByValue(infectionScreening);
					if (rowInfScreen != null)
					{
						rowInfScreen.setcolSelect(true);
					}
					else
					{
						rowInfScreen = form.container1().grdInfScreen().getRows().newRow();
						rowInfScreen.setValue(infectionScreening);
						rowInfScreen.setcolInfection(infectionScreening);
						rowInfScreen.setcolSelect(true);
					}
				}
			}

			// If data exists the populate the Semen Analysis grid
			OPDFertCLinicSemenAnaCollection colSemenAnalysis = voOPDFertClinic.getSemenFindings();
			if (colSemenAnalysis != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSpermRow rowSperm;
				for (int j = 0; j < colSemenAnalysis.size(); j++)
				{
					OPDFertCLinicSemenAna semenAnalysis = colSemenAnalysis.get(j);
					rowSperm = semenAnalysis.getSemenFindingIsNotNull() ? form.container1().grdSperm().getRowByValue(semenAnalysis.getSemenFinding()) : null;
					if (rowSperm != null)
					{
						rowSperm.setcolScore(semenAnalysis.getSemanafinding());
					}
					else
					{
						rowSperm = form.container1().grdSperm().getRows().newRow();
						rowSperm.setcolScore(semenAnalysis.getSemanafinding());
						rowSperm.setcolSperm(semenAnalysis.getSemenFinding());
						rowSperm.setValue(semenAnalysis.getSemenFinding());
					}
				}
			}

			// If data exists the populate the Success With Treatments grid
			FCmethodsSuccessWithCollection colMethodsSuccessWith = voOPDFertClinic.getMethodssuccessWith();
			if (colMethodsSuccessWith != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSuccessMethodRow rowSuccessMethod;
				for (int j = 0; j < colMethodsSuccessWith.size(); j++)
				{
					FCmethodsSuccessWith methodsSuccessWith = colMethodsSuccessWith.get(j);
					rowSuccessMethod = form.container1().grdSuccessMethod().getRowByValue(methodsSuccessWith);
					if (rowSuccessMethod != null)
					{
						rowSuccessMethod.setcolSelect(true);
					}
					else
					{
						rowSuccessMethod = form.container1().grdSuccessMethod().getRows().newRow();
						rowSuccessMethod.setValue(methodsSuccessWith);
						rowSuccessMethod.setcolMethod(methodsSuccessWith);
						rowSuccessMethod.setcolSelect(true);
					}
				}
			}

			// If data exists the populate the Treatments Offered grid
			FCTreatmentsOfferedCollection colTreatmentsOffered = voOPDFertClinic.getTreatmentsoffered();
			if (colTreatmentsOffered != null)
			{
				ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdTxOfferedRow rowTxOffered;
				for (int j = 0; j < colTreatmentsOffered.size(); j++)
				{
					FCTreatmentsOffered treatmentsOffered = colTreatmentsOffered.get(j);
					rowTxOffered = form.container1().grdTxOffered().getRowByValue(treatmentsOffered);
					if (rowTxOffered != null)
					{
						rowTxOffered.setcolSelect(true);
					}
					else
					{
						rowTxOffered = form.container1().grdTxOffered().getRows().newRow();
						rowTxOffered.setValue(treatmentsOffered);
						rowTxOffered.setcolTreatmentMethod(treatmentsOffered);
						rowTxOffered.setcolSelect(true);
					}
				}
			}
		}
	}
	
	private void loadLookupsIntoGrid()
	{
		form.container1().grdTxErectDys().getRows().clear();
		grdTxErectDysRow rowGrdTxErectDys = null;
		FCErectDysTreatmentsCollection sColl0 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCErectDysTreatments(domain.getLookupService());
		for (int i = 0; i < sColl0.size(); i++)
		{
			FCErectDysTreatments bInv = sColl0.get(i);
			rowGrdTxErectDys = form.container1().grdTxErectDys().getRows().newRow();
			rowGrdTxErectDys.setValue(bInv);
			rowGrdTxErectDys.setcolTreatment(bInv);
		}
		form.container1().grdBladDrainage().getRows().clear();
		grdBladDrainageRow rowFCBladderDrain = null;
		FCBladderDrainageCollection sColl1 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCBladderDrainage(domain.getLookupService());
		for (int i = 0; i < sColl1.size(); i++)
		{
			FCBladderDrainage bBlad = sColl1.get(i);
			rowFCBladderDrain = form.container1().grdBladDrainage().getRows().newRow();
			rowFCBladderDrain.setValue(bBlad);
			rowFCBladderDrain.setcolDrainageType(bBlad);
		}

		form.container1().grdEndoEvalPerf().getRows().clear();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdEndoEvalPerfRow rowEndoEval = null; 
		FCEndoEvalCollection sColl2 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCEndoEval(domain.getLookupService());
		for (int i = 0; i < sColl2.size(); i++)
		{
			FCEndoEval bEndoEval = sColl2.get(i);
			rowEndoEval = form.container1().grdEndoEvalPerf().getRows().newRow(); 
			rowEndoEval.setValue(bEndoEval);
			rowEndoEval.setcolHormoneLevel(bEndoEval);
		}

		form.container1().grdInfScreen().getRows().clear();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdInfScreenRow rowInfScreen = null;
		FCInfectionScreeningCollection sColl3 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCInfectionScreening(domain.getLookupService());
		for (int i = 0; i < sColl3.size(); i++)
		{
			FCInfectionScreening bInfScreen = sColl3.get(i);
			rowInfScreen = form.container1().grdInfScreen().getRows().newRow(); 
			rowInfScreen.setValue(bInfScreen);
			rowInfScreen.setcolInfection(bInfScreen);
		}
		
		form.container1().grdSperm().getRows().clear();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSpermRow rowSperm = null;
		FCSemenAnalysisCollection  sColl4 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSemenAnalysis(domain.getLookupService());
		for (int i = 0; i < sColl4.size(); i++)
		{
			FCSemenAnalysis bSemenAnalysis = sColl4.get(i);
			rowSperm = form.container1().grdSperm().getRows().newRow(); 
			rowSperm.setValue(bSemenAnalysis);
			rowSperm.setcolSperm(bSemenAnalysis);
		}
		
		form.container1().grdSuccessMethod().getRows().clear();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSuccessMethodRow rowSuccessMethod = null;
		FCmethodsSuccessWithCollection  sColl5 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCmethodsSuccessWith(domain.getLookupService());
		for (int i = 0; i < sColl5.size(); i++)
		{
			FCmethodsSuccessWith bSuccessMethod = sColl5.get(i);
			rowSuccessMethod = form.container1().grdSuccessMethod().getRows().newRow(); 
			rowSuccessMethod.setValue(bSuccessMethod);
			rowSuccessMethod.setcolMethod(bSuccessMethod);
		}
		
		form.container1().grdTxOffered().getRows().clear();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdTxOfferedRow rowTxOffered = null;
		FCTreatmentsOfferedCollection sColl6 = ims.spinalinjuries.vo.lookups.LookupHelper.getFCTreatmentsOffered(domain.getLookupService());
		for (int i = 0; i < sColl6.size(); i++)
		{
			FCTreatmentsOffered bTreatmentsOffered = sColl6.get(i);
			rowTxOffered = form.container1().grdTxOffered().getRows().newRow(); 
			rowTxOffered.setValue(bTreatmentsOffered);
			rowTxOffered.setcolTreatmentMethod(bTreatmentsOffered);
		}
	}

	private void clearSocialHistoryControls() 
	{
		form.container1().cmbMaritalStatus().setValue(null);
		form.container1().pdtYear().setValue(null);
	}
	
	private void clearScreen() 
	{
		form.container1().cmbAchieveErection().setValue(null);

		form.container1().grdTxErectDys().setValue(null);
		form.container1().grdTxErectDys().getRows().clear();
		
		form.container1().cmbSexualDrive().setValue(null);
		form.container1().cmbEjaculation().setValue(null);
		
		form.container1().grdBladDrainage().setValue(null);
		form.container1().grdBladDrainage().getRows().clear();

		form.container1().txtBladDrainOther().setValue(null);
		form.container1().cmbTestAtrophy().setValue(null);
		
		form.container1().grdEndoEvalPerf().setValue(null);
		form.container1().grdEndoEvalPerf().getRows().clear();

		form.container1().grdInfScreen().setValue(null);
		form.container1().grdInfScreen().getRows().clear();
		
		form.container1().cmbScreenConsent().setValue(null);
		form.container1().cmbSemenCulture().setValue(null);
		
		form.container1().grdSperm().setValue(null);
		form.container1().grdSperm().getRows().clear();
		
		form.container1().cmbELISA().setValue(null);
		
		form.container1().grdSuccessMethod().setValue(null);
		form.container1().grdSuccessMethod().getRows().clear();
		
		form.container1().cmbSpermFrozen().setValue(null);
		
		form.container1().grdTxOffered().setValue(null);
		form.container1().grdTxOffered().getRows().clear();
	}

	private void populateDataFromScreen() 
	{
		OPDFertClinicVo voOPDFertClinic = form.getLocalContext().getvoOPDFertClinic();		
		SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();
		if (voSocHist == null)
		{
			voSocHist = new SocialHistoryVo();
			voSocHist.setMaritalStatus(new SocialHistoryMaritalStatusVo());
		}
		else if (!voSocHist.getMaritalStatusIsNotNull())
			voSocHist.setMaritalStatus(new SocialHistoryMaritalStatusVo());

		if(voSocHist.getCareContext() == null)
			voSocHist.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		if(voSocHist.getAuthoringInformation() == null)
		{
			voSocHist.setAuthoringInformation(new AuthoringInformationVo());
	
			voSocHist.getAuthoringInformation().setAuthoringDateTime(new DateTime());
			
			if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCareIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP() instanceof HcpLiteVo)
				voSocHist.getAuthoringInformation().setAuthoringHcp((HcpLiteVo)form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getResponsibleHCP());
			
		}
		voSocHist.getMaritalStatus().setMaritalStatus(form.container1().cmbMaritalStatus().getValue() != null ? form.container1().cmbMaritalStatus().getValue() : null);
		voSocHist.getMaritalStatus().setStatusDate(form.container1().pdtYear().getValue() != null ? form.container1().pdtYear().getValue() : null);
			
		if (!voSocHist.getCareContextIsNotNull())
			voSocHist.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		form.getLocalContext().setMedSocialHistory(voSocHist);
		
		voOPDFertClinic.setAchieveErection(form.container1().cmbAchieveErection().getValue() != null ? form.container1().cmbAchieveErection().getValue() : null);

		if(voOPDFertClinic.getCareContext() == null)
			voOPDFertClinic.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if(voOPDFertClinic.getAuthoringInformation() == null)
			voOPDFertClinic.setAuthoringInformation(form.customControlAuthoringInfo().getValue());

		FCErectDysTreatmentsCollection colErectDysTreat = new FCErectDysTreatmentsCollection();
		grdTxErectDysRow rowGrdTxErectDys = null;
		for (int i = 0; i < form.container1().grdTxErectDys().getRows().size(); i++)
		{
			rowGrdTxErectDys = form.container1().grdTxErectDys().getRows().get(i);
			if (rowGrdTxErectDys.getcolSelect())
				colErectDysTreat.add(rowGrdTxErectDys.getValue());
		}
		voOPDFertClinic.setErectDysfxTreatments(colErectDysTreat);		
		
		voOPDFertClinic.setSexDrive(form.container1().cmbSexualDrive().getValue() != null ? form.container1().cmbSexualDrive().getValue() : null);
		voOPDFertClinic.setEjaculation(form.container1().cmbEjaculation().getValue() != null ? form.container1().cmbEjaculation().getValue() : null);
		
		FCBladderDrainageCollection colBladderDrainage = new FCBladderDrainageCollection();
		grdBladDrainageRow rowFCBladderDrain = null;
		for (int i = 0; i < form.container1().grdBladDrainage().getRows().size(); i++)
		{
			rowFCBladderDrain = form.container1().grdBladDrainage().getRows().get(i);
			if (rowFCBladderDrain.getcolSelect())
				colBladderDrainage.add(rowFCBladderDrain.getValue());
		}
		voOPDFertClinic.setBladderDrainage(colBladderDrainage);		
		
		voOPDFertClinic.setBladderDrainagetxt(form.container1().txtBladDrainOther().getValue() != null ? form.container1().txtBladDrainOther().getValue() : null);
		voOPDFertClinic.setTestAtrophy(form.container1().cmbTestAtrophy().getValue() != null ? form.container1().cmbTestAtrophy().getValue() : null);
		
		FCEndoEvalCollection colEndoEval = new FCEndoEvalCollection();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdEndoEvalPerfRow rowEndoEval = null; 
		for (int i = 0; i < form.container1().grdEndoEvalPerf().getRows().size(); i++)
		{
			rowEndoEval = form.container1().grdEndoEvalPerf().getRows().get(i);
			if (rowEndoEval.getcolSelect())
				colEndoEval.add(rowEndoEval.getValue());
		}
		voOPDFertClinic.setEndoEvalPerf(colEndoEval);		
		
		FCInfectionScreeningCollection colInfectionScreen = new FCInfectionScreeningCollection();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdInfScreenRow rowInfScreen = null;
		for (int i = 0; i < form.container1().grdInfScreen().getRows().size(); i++)
		{
			rowInfScreen = form.container1().grdInfScreen().getRows().get(i);
			if (rowInfScreen.getcolSelect())
				colInfectionScreen.add(rowInfScreen.getValue());
		}
		voOPDFertClinic.setInfxnScreening(colInfectionScreen);		

		voOPDFertClinic.setScreenConsent(form.container1().cmbScreenConsent().getValue() != null ? form.container1().cmbScreenConsent().getValue() : null);
		voOPDFertClinic.setSemenCulture(form.container1().cmbSemenCulture().getValue() != null ? form.container1().cmbSemenCulture().getValue() : null);
		
		OPDFertCLinicSemenAnaCollection semenColl = new OPDFertCLinicSemenAnaCollection();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSpermRow rowSperm = null;
		for (int i = 0; i < form.container1().grdSperm().getRows().size(); i++)
		{
			OPDFertCLinicSemenAna semanAnaVo;
			rowSperm = form.container1().grdSperm().getRows().get(i);
			if (rowSperm.getcolScore() != null)
			{
				semanAnaVo = new OPDFertCLinicSemenAna();
				
				semanAnaVo.setSemanafinding(rowSperm.getcolScore());
				semanAnaVo.setSemenFinding(rowSperm.getcolSperm());

				semenColl.add(semanAnaVo);
			}
		}
		voOPDFertClinic.setSemenFindings(semenColl);

		voOPDFertClinic.setElisa(form.container1().cmbELISA().getValue() != null ? form.container1().cmbELISA().getValue() : null);

		FCmethodsSuccessWithCollection  colMethodsSuccessWith = new FCmethodsSuccessWithCollection();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdSuccessMethodRow rowSuccessMethod = null;
		for (int i = 0; i < form.container1().grdSuccessMethod().getRows().size(); i++)
		{
			rowSuccessMethod = form.container1().grdSuccessMethod().getRows().get(i);
			if (rowSuccessMethod.getcolSelect())
				colMethodsSuccessWith.add(rowSuccessMethod.getValue());
		}
		voOPDFertClinic.setMethodssuccessWith(colMethodsSuccessWith);		

		voOPDFertClinic.setSpermFrozen(form.container1().cmbSpermFrozen().getValue() != null ? form.container1().cmbSpermFrozen().getValue() : null);

		FCTreatmentsOfferedCollection colTreatmentsOffered = new FCTreatmentsOfferedCollection();
		ims.spinalinjuries.forms.opdfertilityclinic.GenForm.container1Container.grdTxOfferedRow rowTxOffered = null;
		for (int i = 0; i < form.container1().grdTxOffered().getRows().size(); i++)
		{
			rowTxOffered = form.container1().grdTxOffered().getRows().get(i);
			if (rowTxOffered.getcolSelect())
				colTreatmentsOffered.add(rowTxOffered.getValue());
		}
		voOPDFertClinic.setTreatmentsoffered(colTreatmentsOffered);		

		form.getLocalContext().setvoOPDFertClinic(voOPDFertClinic);
	}
	
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		populateDataFromScreen();
		
		OPDFertClinicVo voOPDFertClinic = form.getLocalContext().getvoOPDFertClinic();
		try
		{
			String[] messages = voOPDFertClinic.validate(validateUiRules());
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			domain.saveOPDFertClinicVo(voOPDFertClinic);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;				
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}
		
		
		SocialHistoryVo voSocHist = form.getLocalContext().getMedSocialHistory();
		try
		{
			String[] messages = voSocHist.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			domain.saveMedSocialHistory(voSocHist);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.setMode(FormMode.VIEW);
			return;				
		}
		
		open();
		form.setMode(FormMode.VIEW);
		
	}
	//wdev-13187
	private String[] validateUiRules()
	{
		if (form.customControlAuthoringInfo().getValue() == null)
			return new String[] { "Authoring HCP and Authoring Date/Time are mandatory." };
		return null;

	}
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newOPDFertilityClinic();
		
		if (form.getLocalContext().getMedSocialHistory() == null)
		{
			SocialHistoryVo socialVo = domain.getSocialHistoryByPatient(form.getGlobalContext().Core.getPatientShort());
			if(socialVo != null)
			{
				socialVo.setID_SocialHistory(null);
				socialVo.setCareContext(null);
				socialVo.setAuthoringInformation(null);
				socialVo.setClinicalContact(null);
				form.getLocalContext().setMedSocialHistory(socialVo);
			}
			else
				form.getLocalContext().setMedSocialHistory(null);
				
			populateSocialHistoryScreenFromData();
		}
	}
	
	private void newOPDFertilityClinic() 
	{
		form.setMode(FormMode.EDIT);
		clearScreen();

		if (form.getLocalContext().getvoOPDFertClinic() == null)
			form.getLocalContext().setvoOPDFertClinic(new OPDFertClinicVo());
		
		loadLookupsIntoGrid();
		setDefaultHcpData();				
		updateBrowseInformation();
		form.getLocalContext().setvoOPDFertClinicSemenAna(null);		
	}
	
	private void setDefaultHcpData()
	{
		form.customControlAuthoringInfo().initializeComponent();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
		form.setMode(FormMode.VIEW);
	}
	
	protected void onRecbrOPDFertilirtClinicValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
	protected void onCmbMaritalStatusValueChanged() throws PresentationLogicException
	{
		setupMaritalControls();
	}
	private void setupMaritalControls()
	{
		// Setup Marital Controls
		if (form.container1().cmbMaritalStatus().getValue() == null)
		{
			disableMaritalStatusControls();
			return;
		}
		if (form.container1().cmbMaritalStatus().getValue().getId() != MaritalStatus.SINGLE.getId())
			form.container1().pdtYear().setEnabled(true);
		else
		{
			disableMaritalStatusControls();
		}
	}
	private void disableMaritalStatusControls()
	{
		form.container1().pdtYear().setValue(null);
		form.container1().pdtYear().setEnabled(false);
	}
	
	private void updateControlsState()
	{		
		form.btnUpdate().setVisible(showUpdateButton());
		form.btnNew().setVisible(showNewButton());
		if (form.getMode().equals(FormMode.EDIT))
			setHcpControlVisibility();
	}


	private void setHcpControlVisibility()
	{
		if (form.getLocalContext().getvoOPDFertClinic() == null) return;
		
		boolean bEnabled = form.getLocalContext().getvoOPDFertClinic().getID_OPDFertClinic() == null;
		form.setcustomControlAuthoringInfoEnabled(bEnabled);
	}

	protected void onFormModeChanged() 
	{
		updateControlsState();		
	}
	
	
	
	private boolean showUpdateButton() 
	{
		if (form.recbrOPDFertilirtClinic().getValue() == null || form.getLocalContext().getvoOPDFertClinic() == null)
		{
			return false;
		}
		else			
		{
			return (form.getMode().equals(FormMode.VIEW) &&
					form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext().equals(form.recbrOPDFertilirtClinic().getValue().getID_CareContext())
					&& form.getLocalContext().getvoOPDFertClinic().getID_OPDFertClinicIsNotNull());
		}
	}

	private boolean showNewButton()
	{
		if (form.getMode().equals(FormMode.EDIT))
			return false;		
		if (form.recbrOPDFertilirtClinic().getValue() == null)
			return false;		
		if (form.recbrOPDFertilirtClinic().getValue().getID_CareContext() == null)
			return false;		
		if (form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext().equals(form.recbrOPDFertilirtClinic().getValue().getID_CareContext()) == false)
			return false;				
		if (form.getLocalContext().getvoOPDFertClinic() != null && form.getLocalContext().getvoOPDFertClinic().getID_OPDFertClinicIsNotNull())
			return false;	
		
		return true;
	}
}
