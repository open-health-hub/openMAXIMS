//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdfertilityclinic;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbScreenConsentLookup();
	abstract protected void defaultcmbScreenConsentLookupValue();
	abstract protected void bindcmbSpermFrozenLookup();
	abstract protected void defaultcmbSpermFrozenLookupValue();
	abstract protected void bindcmbELISALookup();
	abstract protected void defaultcmbELISALookupValue();
	abstract protected void bindcmbAchieveErectionLookup();
	abstract protected void defaultcmbAchieveErectionLookupValue();
	abstract protected void bindcmbMaritalStatusLookup();
	abstract protected void defaultcmbMaritalStatusLookupValue();
	abstract protected void bindcmbSexualDriveLookup();
	abstract protected void defaultcmbSexualDriveLookupValue();
	abstract protected void bindcmbSemenCultureLookup();
	abstract protected void defaultcmbSemenCultureLookupValue();
	abstract protected void bindcmbEjaculationLookup();
	abstract protected void defaultcmbEjaculationLookupValue();
	abstract protected void bindcmbTestAtrophyLookup();
	abstract protected void defaultcmbTestAtrophyLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRecbrOPDFertilirtClinicValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbScreenConsentValueSet(Object value);
	abstract protected void oncmbSpermFrozenValueSet(Object value);
	abstract protected void oncmbELISAValueSet(Object value);
	abstract protected void oncmbAchieveErectionValueSet(Object value);
	abstract protected void oncmbMaritalStatusValueSet(Object value);
	abstract protected void onCmbMaritalStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSexualDriveValueSet(Object value);
	abstract protected void oncmbSemenCultureValueSet(Object value);
	abstract protected void oncmbEjaculationValueSet(Object value);
	abstract protected void oncmbTestAtrophyValueSet(Object value);
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.recbrOPDFertilirtClinic().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRecbrOPDFertilirtClinicValueChanged();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.container1().cmbScreenConsent().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbScreenConsentValueSet(value);
			}
		});
		this.form.container1().cmbSpermFrozen().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpermFrozenValueSet(value);
			}
		});
		this.form.container1().cmbELISA().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbELISAValueSet(value);
			}
		});
		this.form.container1().cmbAchieveErection().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbAchieveErectionValueSet(value);
			}
		});
		this.form.container1().cmbMaritalStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbMaritalStatusValueSet(value);
			}
		});
		this.form.container1().cmbMaritalStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbMaritalStatusValueChanged();
			}
		});
		this.form.container1().cmbSexualDrive().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSexualDriveValueSet(value);
			}
		});
		this.form.container1().cmbSemenCulture().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSemenCultureValueSet(value);
			}
		});
		this.form.container1().cmbEjaculation().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbEjaculationValueSet(value);
			}
		});
		this.form.container1().cmbTestAtrophy().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTestAtrophyValueSet(value);
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.btnUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbScreenConsentLookup();
		bindcmbSpermFrozenLookup();
		bindcmbELISALookup();
		bindcmbAchieveErectionLookup();
		bindcmbMaritalStatusLookup();
		bindcmbSexualDriveLookup();
		bindcmbSemenCultureLookup();
		bindcmbEjaculationLookup();
		bindcmbTestAtrophyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbScreenConsentLookup();
		bindcmbSpermFrozenLookup();
		bindcmbELISALookup();
		bindcmbAchieveErectionLookup();
		bindcmbMaritalStatusLookup();
		bindcmbSexualDriveLookup();
		bindcmbSemenCultureLookup();
		bindcmbEjaculationLookup();
		bindcmbTestAtrophyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbScreenConsentLookupValue();
		defaultcmbSpermFrozenLookupValue();
		defaultcmbELISALookupValue();
		defaultcmbAchieveErectionLookupValue();
		defaultcmbMaritalStatusLookupValue();
		defaultcmbSexualDriveLookupValue();
		defaultcmbSemenCultureLookupValue();
		defaultcmbEjaculationLookupValue();
		defaultcmbTestAtrophyLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
