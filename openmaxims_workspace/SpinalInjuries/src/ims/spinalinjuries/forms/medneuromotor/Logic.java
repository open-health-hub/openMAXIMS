//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//11/03/2005 - AU - fixed the scores problem - the "N" score is saved as -1 in the database - when counting should be 0
//14/03/2005 - AU - fixed the Lower Limb score - not saved 

package ims.spinalinjuries.forms.medneuromotor;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.VertebrallevelVo;
import ims.core.vo.VertebrallevelVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.NeuroMotorExaminationVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsVo;
import ims.generalmedical.vo.NeuroMotorFindingsVoCollection;
import ims.generalmedical.vo.NeuroMotorRootValueVo;
import ims.generalmedical.vo.NeuroMotorRootValueVoCollection;
import ims.vo.ValueObject;
import ims.configuration.gen.ConfigFlag;

public class Logic extends BaseLogic
{
	private static final int	NOTESTABLE	= -1;

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();

	}

	private void initialize()
	{
		loadVertebralCombos();

		ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();

		boolean bMedicalAdmissionContactSelected = (currentClinicalContact != null && currentClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION));
		Boolean bMedicalInpatientForm = new Boolean(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotorInpatient));

		form.getLocalContext().setIsMedicalInpatientForm(bMedicalInpatientForm);
		form.getLocalContext().setIsClinicalContactType(bMedicalAdmissionContactSelected);
		
		displayRecordBrowser(bMedicalInpatientForm.booleanValue());
		form.chkProblem().setVisible(!form.getLocalContext().getIsMedicalInpatientForm().booleanValue());

		if (writeConditionsApply(bMedicalInpatientForm, bMedicalAdmissionContactSelected))
			activateButtons(true);
		else
			activateButtons(false);

	}

	/**
	 * inpatient form writable when Spinal Medical Admission contact NOT
	 * selected admission form writable when Spinal Medical Admission contact IS
	 * selected
	 * 
	 * @param bMedicalInpatientForm,
	 *            currentClinicalContact
	 * @return boolean
	 */
	private boolean writeConditionsApply(Boolean bMedicalInpatientForm, boolean bMedicalAdmissionContactSelected)
	{

		if (bMedicalInpatientForm.booleanValue())
		{

			if (bMedicalAdmissionContactSelected)
				return false;
			else
				return true;
		}
		else
		{
			if (bMedicalAdmissionContactSelected)
				return true;
			else
				return false;
		}
	}

	private void activateButtons(boolean activate)
	{
		form.btnNew().setVisible(activate);
		form.btnNew().setEnabled(activate);
		form.btnUpdate().setVisible(activate);
		form.btnUpdate().setEnabled(activate);
	}

	private void displayRecordBrowser(boolean visible)
	{
		form.recNeuro().setVisible(visible);
		form.lblBrowseStatus().setVisible(visible);
		form.pnlMotor().setVisible(!visible);
	}

	private void loadFindingsGrid()
	{
		VertebrallevelVoCollection voCollVertebral = listVertebralLevels();
		VertebrallevelVo voVertebralItem = null;
		GenForm.grdMotorRow row = null;
		for (int i = 0; i < voCollVertebral.size(); i++)
		{
			voVertebralItem = voCollVertebral.get(i);
			// WDEV-4411
			if ((voVertebralItem.getIsLLAsiaScore() == null || voVertebralItem.getIsLLAsiaScore().equals(false)) && (voVertebralItem.getIsULAsiaScore() == null || voVertebralItem.getIsULAsiaScore().equals(false)))
				continue;

			row = form.grdMotor().getRows().newRow();
			row.setcolDescription(voVertebralItem.getDescription());
			row.setcoolRootVal(voVertebralItem.getName());
			row.setValue(voVertebralItem);
			row.setIdentifier(null);
		}

		if (voCollVertebral.size() > 0)
		{
			row = form.grdMotor().getRows().newRow();
			row.setcoolRootVal("Total Upper Limb");
			row.setSelectable(false);
			row.setReadOnly(true);
			row.setBackColor(Color.Beige);
			row.setBold(true);

			row = form.grdMotor().getRows().newRow();
			row.setcoolRootVal("Total Lower Limb");
			row.setSelectable(false);
			row.setReadOnly(true);
			row.setBackColor(Color.Beige);
			row.setBold(true);
		}
	}

	private VertebrallevelVoCollection listVertebralLevels()
	{
		VertebrallevelVoCollection voCollVertebral = form.getLocalContext().getVertebralLevels();
		if (voCollVertebral == null)
		{
			voCollVertebral = domain.listActiveVertebralLevel();
			form.getLocalContext().setVertebralLevels(voCollVertebral);
		}

		return voCollVertebral;
	}

	private void loadVertebralCombos()
	{
		form.cmbMotorRight().clear();
		form.cmbMotorLeft().clear();

		VertebrallevelVoCollection voCollVertebral = listVertebralLevels();
		for (int i = 0; i < voCollVertebral.size(); i++)
		{
			// 14/03/2005 - Populate vertebral description with the name
			form.cmbMotorLeft().newRow(voCollVertebral.get(i), voCollVertebral.get(i).getName());
			form.cmbMotorRight().newRow(voCollVertebral.get(i), voCollVertebral.get(i).getName());
		}
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setSelectedNeuroMotorFindingsVo(null);

		clearScreen();
		form.grdMotor().getRows().clear();
		loadFindingsGrid();

		if (engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotor))
		{
			ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			if (voClinicalContact != null && voClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
			{
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblem(form.getGlobalContext().Core.getCurrentClinicalContact());  //wdev-13419
				NeuroMotorFindingsVoCollection neuroFindVoCol = domain.getNeuroMotorRecordCol(form.getGlobalContext().Core.getCurrentClinicalContact(), null); //wdev-13419
				NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroFindVoCol != null && neuroFindVoCol.size() > 0)
				{
					tempVo.setNeuroMotor(neuroFindVoCol.get(0));
				}
				form.getLocalContext().setMotorRecord(tempVo);
				//form.getLocalContext().setMotorRecord(domain.getNeuroMotorRecord(form.getGlobalContext().Core.getCurrentClinicalContact(), null));
				
			}
			else
			{
				//form.getLocalContext().setMotorRecord(domain.getSpinalMedicalAdmissionMotorByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
				//wdev-13410
				NeuroMotorFindingsVoCollection neFindVoCol = domain.getSpinalMedicalAdmissionMotorByCareContextCollection(form.getGlobalContext().Core.getCurrentCareContext());
				NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
				
				if(neFindVoCol != null && neFindVoCol.size() > 0)
				{
					tempVo.setNeuroMotor(neFindVoCol.get(0));
				}
				form.getLocalContext().setMotorRecord(tempVo);
				//-------------
			}

			populateScreenFromData();
		}
		else
			fillRecordBrowser();

	}

	private void fillRecordBrowser()
	{
		form.recNeuro().clear();

		NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsColl = domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		loadCareContextRecords(voNeuroMotorFindingsColl);

		sortNeuroMotorFindings(voNeuroMotorFindingsColl);

		checkForSelectedClinicalContact();

		setRecordBrowser();

		browseRecord();
	}

	private void loadCareContextRecords(NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsColl)
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();

		if (form.getGlobalContext().Core.getCurrentClinicalContact() == null)
		{
			form.recNeuro().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP(), Color.Green);
			loadCareContextMotorRecords(voNeuroMotorFindingsColl, Color.Green);
			form.recNeuro().setValue(voCareContext);
		}
		else
		{
			form.recNeuro().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP());
			loadCareContextMotorRecords(voNeuroMotorFindingsColl, null);
		}
	}

	private void sortNeuroMotorFindings(NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsColl)
	{
		if (voNeuroMotorFindingsColl != null)
		{
			int x = 0;
			for (x = 0; x < voNeuroMotorFindingsColl.size(); x++)
			{
				NeuroMotorFindingsShortVoCollection voNeuroMotorCollForClinicalContact = new NeuroMotorFindingsShortVoCollection();
				if (voNeuroMotorFindingsColl.get(x).getClinicalContact() != null)
				{
					ClinicalContactShortVo voClinicalContact = voNeuroMotorFindingsColl.get(x).getClinicalContact();

					for (int i = 0; i < voNeuroMotorFindingsColl.size(); i++)
					{
						if (voNeuroMotorFindingsColl.get(i).getClinicalContact() != null)
						{
							if (voNeuroMotorFindingsColl.get(i).getClinicalContact().getID_ClinicalContact().equals(voClinicalContact.getID_ClinicalContact()))
							{
								voNeuroMotorCollForClinicalContact.add(voNeuroMotorFindingsColl.get(i));
								x = i;
							}
						}
					}
					loadClinicalContactMotorRecords(voClinicalContact, voNeuroMotorCollForClinicalContact);
				}
			}
		}
	}

	private void checkForSelectedClinicalContact()
	{
		// the selected Clinical Contact that has been selected from Patient
		// Summary may not have a record and therefore
		// must be added to the record browser
		boolean clinicalContactFound = false;
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();

		if (voSelectedClinicalContact != null)
		{
			for (int i = 0; i < form.recNeuro().size(); i++)
			{
				ValueObject vo = (ValueObject) form.recNeuro().getValues().get(i);
				if (vo instanceof ClinicalContactShortVo)
				{
					ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recNeuro().getValues().get(i);
					if (voClinicalContact.equals(voSelectedClinicalContact))
						clinicalContactFound = true;
				}
			}

			if (!clinicalContactFound)
			{
				form.recNeuro().newRow(voSelectedClinicalContact, "Clinical Contact: " + voSelectedClinicalContact.getStartDateTime() + " - " + voSelectedClinicalContact.getSeenBy(), Color.Green);
				form.recNeuro().setValue(voSelectedClinicalContact);
			}
		}
	}

	private boolean checkCurrentClinicalContact(ClinicalContactShortVo voClinicalContact)
	{
		// checks if this Clinical Contact is the current Clinical Contact from
		// Patient Summary
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		if (voSelectedClinicalContact != null)
		{
			if (voSelectedClinicalContact.equals(voClinicalContact))
				return true;
			else
				return false;
		}
		return false;
	}

	private void loadClinicalContactMotorRecords(ClinicalContactShortVo voClinicalContact, NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsColl)
	{
		boolean isClinicalContactSelected = checkCurrentClinicalContact(voClinicalContact);

		Color textColour = null;
		if (isClinicalContactSelected)
			textColour = Color.Green;

		form.recNeuro().newRow(voClinicalContact, "Clinical Contact: " + voClinicalContact.getStartDateTime() + " - " + voClinicalContact.getSeenBy(), textColour);

		if (isClinicalContactSelected)
			form.recNeuro().setValue(voClinicalContact);

		for (int i = 0; i < voNeuroMotorFindingsColl.size(); i++)
		{
			NeuroMotorFindingsShortVo voMotorFinding = voNeuroMotorFindingsColl.get(i);
			form.recNeuro().newRow(voMotorFinding, "\t\t\t\t " + voMotorFinding.getAuthoringDateTime() + " - " + voMotorFinding.getAuthoringCP().getMos().getName(), textColour);
		}
	}

	private void loadCareContextMotorRecords(NeuroMotorFindingsShortVoCollection voNeuroMotorFindingsColl, Color activeColor)
	{
		if (voNeuroMotorFindingsColl != null)
		{
			for (int i = 0; i < voNeuroMotorFindingsColl.size(); i++)
			{
				NeuroMotorFindingsShortVo voNeuroFinding = voNeuroMotorFindingsColl.get(i);
				if (voNeuroFinding.getClinicalContact() == null)
				{
					form.recNeuro().newRow(voNeuroFinding, "\t\t\t\t " + voNeuroFinding.getAuthoringDateTime() + " - " + voNeuroFinding.getAuthoringCP().getMos().getName(), activeColor);
				}
			}
		}
	}

	private void setRecordBrowser()
	{
		// after an update need to set the record browser to display the updated
		// record
		if (form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			form.recNeuro().setValue(form.getLocalContext().getUpdatedInstance());

			browseRecord();
		}
	}

	private void populateScreenFromData()
	{
		NeuroMotorExaminationVo voMotorExam = form.getLocalContext().getMotorRecord();
		if (voMotorExam != null)
			form.getLocalContext().setSelectedNeuroMotorFindingsVo(voMotorExam.getNeuroMotor());
		
		if (!engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotorInpatient))
		{
			if (voMotorExam != null)
			{
				if (voMotorExam.getNeuroMotor() == null)
				{
					if (engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotor))
						populateContactInfo(null);
					form.btnNew().setVisible((form.getLocalContext().getIsClinicalContactType().booleanValue()==true && form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==false ) || form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==true); //WDEV-15048
					form.btnNew().setEnabled((form.getLocalContext().getIsClinicalContactType().booleanValue()==true && form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==false ) || form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==true); //WDEV-15048
					form.btnUpdate().setVisible(false);
					return;
				}
				else
				{
					form.btnNew().setVisible(true);
					form.btnNew().setEnabled(false);
					form.btnUpdate().setVisible(true);
				}
			}
		}

		if (voMotorExam != null)
		{
			NeuroMotorFindingsVo voFindings = voMotorExam.getNeuroMotor();
			if (voFindings != null)
			{
				populateContactInfo(voFindings);

				if (voFindings.getLeftMotorLevel() != null)
				{
					if (!form.cmbMotorLeft().getValues().contains(voFindings.getLeftMotorLevel()))
						form.cmbMotorLeft().newRow(voFindings.getLeftMotorLevel(), voFindings.getLeftMotorLevel().getDescription());
					else
						form.cmbMotorLeft().setValue(voFindings.getLeftMotorLevel());
				}

				if (voFindings.getRightMotorLevel() != null)
				{
					if (!form.cmbMotorRight().getValues().contains(voFindings.getRightMotorLevel()))
						form.cmbMotorRight().newRow(voFindings.getRightMotorLevel(), voFindings.getRightMotorLevel().getDescription());
					else
						form.cmbMotorRight().setValue(voFindings.getRightMotorLevel());
				}

				form.chkProblem().setValue(voFindings.getIsProblem().booleanValue());
				populateFindingsGridFromData(voFindings.getRootFinding());
			}

		}
	}

	private void populateFindingsGridFromData(NeuroMotorRootValueVoCollection voCollFindings)
	{
		if (voCollFindings == null)
			return;

		NeuroMotorRootValueVo voFindingsItem = null;
		for (int i = 0; i < voCollFindings.size(); i++)
		{
			voFindingsItem = voCollFindings.get(i);
			GenForm.grdMotorRow row = null;
			boolean bRowFound = false;
			for (int p = 0; p < form.grdMotor().getRows().size(); p++)
			{
				row = form.grdMotor().getRows().get(p);
				if (row.getValue() != null && row.getValue().equals(voFindingsItem.getRootValue()))
				{
					bRowFound = true;
					row.setIdentifier(voFindingsItem);
					setLeftColValue(voFindingsItem, row);
					setRightColValue(voFindingsItem, row);
				}
			}
			//inactive config item with instantiated data
			if(!bRowFound)
			{
				row = form.grdMotor().getRows().newRowAt(form.grdMotor().getRows().size() - 2);
				if(voFindingsItem.getRootValueIsNotNull())
				{
					row.setcoolRootVal(voFindingsItem.getRootValue().getName());
					row.setcolDescription(voFindingsItem.getRootValue().getDescription());
				}

				setLeftColValue(voFindingsItem, row);
				setRightColValue(voFindingsItem, row);
			}
		}

		if (voCollFindings.size() > 0)
		{
			String[] scores = calculateLeftAndRightScore(voCollFindings);
			GenForm.grdMotorRow row = form.grdMotor().getRows().get(form.grdMotor().getRows().size() - 2);
			row.setcolLeft(scores[0]);
			row.setcolRight(scores[1]);
			GenForm.grdMotorRow row1 = form.grdMotor().getRows().get(form.grdMotor().getRows().size() - 1);
			row1.setcolLeft(scores[2]);
			row1.setcolRight(scores[3]);
		}
	}

	private void setRightColValue(NeuroMotorRootValueVo voFindingsItem, GenForm.grdMotorRow row)
	{
		if (voFindingsItem.getRightFinding() != null)
		{
			if (voFindingsItem.getRightFinding().intValue() == NOTESTABLE)
				row.setcolRight("N");
			else

				row.setcolRight(String.valueOf(voFindingsItem.getRightFinding().intValue()));
		}
	}

	private void setLeftColValue(NeuroMotorRootValueVo voFindingsItem, GenForm.grdMotorRow row)
	{
		if (voFindingsItem.getLeftFinding() != null)
		{
			if (voFindingsItem.getLeftFinding().intValue() == NOTESTABLE)
				row.setcolLeft("N");
			else
				row.setcolLeft(String.valueOf(voFindingsItem.getLeftFinding().intValue()));
		}
	}

	private String[] calculateLeftAndRightScore(NeuroMotorRootValueVoCollection voCollFindings)
	{
		// TODO: need to calculate scores out of 50? and add to array returned
		int leftUpper = -1, rightUpper = -1, leftLower = -1, rightLower = -1;

		for (int i = 0; i < voCollFindings.size(); i++)
		{
			if (voCollFindings.get(i).getRootValue() != null)
			{
				if (voCollFindings.get(i).getRootValue().getIsULAsiaScore().booleanValue() == true)
				{
					if (voCollFindings.get(i).getLeftFinding() != null)
					{
						leftUpper = (leftUpper == -1 ? 0 : leftUpper);
						leftUpper += voCollFindings.get(i).getLeftFinding().intValue() == NOTESTABLE ? 0 : voCollFindings.get(i).getLeftFinding().intValue();
					}

					if (voCollFindings.get(i).getRightFinding() != null)
					{
						rightUpper = (rightUpper == -1 ? 0 : rightUpper);
						rightUpper += voCollFindings.get(i).getRightFinding().intValue() == NOTESTABLE ? 0 : voCollFindings.get(i).getRightFinding().intValue();
					}
				}

				if (voCollFindings.get(i).getRootValue().getIsLLAsiaScore().booleanValue() == true)
				{
					if (voCollFindings.get(i).getLeftFinding() != null)
					{
						leftLower = (leftLower == -1 ? 0 : leftLower);
						leftLower += voCollFindings.get(i).getLeftFinding().intValue() == NOTESTABLE ? 0 : voCollFindings.get(i).getLeftFinding().intValue();
					}

					if (voCollFindings.get(i).getRightFinding() != null)
					{
						rightLower = (rightLower == -1 ? 0 : rightLower);
						rightLower += voCollFindings.get(i).getRightFinding().intValue() == NOTESTABLE ? 0 : voCollFindings.get(i).getRightFinding().intValue();
					}
				}
			}
		}

		return new String[]{(leftUpper == -1 ? "" : String.valueOf(leftUpper)), (rightUpper == -1 ? "" : String.valueOf(rightUpper)), (leftLower == -1 ? "" : String.valueOf(leftLower)), (rightLower == -1 ? "" : String.valueOf(rightLower))};
	}

	private void clearScreen()
	{
		form.dtimRecording().setValue(null);
		form.qmbAuthoring().setValue(null);
		// form.grdMotor().getRows().clear();
		form.chkProblem().setValue(false);
		form.cmbMotorLeft().setValue(null);
		form.cmbMotorRight().setValue(null);
	}

	private void populateContactInfo(NeuroMotorFindingsVo voNeuroMotorFind)
	{
		if (voNeuroMotorFind != null)
		{
			form.dtimRecording().setValue(voNeuroMotorFind.getAuthoringDateTime());
			form.qmbAuthoring().newRow(voNeuroMotorFind.getAuthoringCP(), voNeuroMotorFind.getAuthoringCP().toString());
			form.qmbAuthoring().setValue(voNeuroMotorFind.getAuthoringCP());
			return;
		}

		if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			ClinicalContactShortVo voClinicalContactShort = form.getGlobalContext().Core.getCurrentClinicalContact();

			if (voClinicalContactShort != null)
			{
				form.dtimRecording().setValue(voClinicalContactShort.getStartDateTime());
				form.qmbAuthoring().newRow(voClinicalContactShort.getSeenBy(), voClinicalContactShort.getSeenBy().toString());
				form.qmbAuthoring().setValue(voClinicalContactShort.getSeenBy());
			}
		}
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setUpdatedInstance(null);
		form.setMode(FormMode.EDIT);
		form.lblBrowseStatus().setValue("Creating new record");

		// need to set ClinicalContact on new, not in populateDataFromScreen as
		// we dont want to change the contact.
		NeuroMotorExaminationVo voNeuroMotorExam = new NeuroMotorExaminationVo();
		NeuroMotorFindingsVo voNeuroMotorFindings = new NeuroMotorFindingsVo();

		voNeuroMotorFindings.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voNeuroMotorFindings.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		voNeuroMotorExam.setNeuroMotor(voNeuroMotorFindings);

		form.getLocalContext().setMotorRecord(voNeuroMotorExam);

		if (engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotorInpatient))
		{
			clearScreen();
			form.grdMotor().getRows().clear();
			loadFindingsGrid();

			form.dtimRecording().setValue(new DateTime());
			HcpLiteVo hcp = (HcpLiteVo) domain.getHcpLiteUser();
			if (hcp != null)
			{
				form.qmbAuthoring().newRow(hcp, hcp.toString());
				form.qmbAuthoring().setValue(hcp);
			}
		}
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validUpdate())
		{
			form.setMode(FormMode.EDIT);
			setUpdatedRecord();
		}
	}

	private void setUpdatedRecord()
	{
		if (form.recNeuro().getValue() != null)
		{
			form.getLocalContext().setUpdatedInstance(form.recNeuro().getValue());
		}
	}

	private void checkAuthoringControls()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			enableAuthoringControls(false);
		}
		else
		{
			if (engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroMotorInpatient))
				enableAuthoringControls(true);
			else
				enableAuthoringControls(false);
		}
	}

	private void enableAuthoringControls(boolean enable)
	{
		form.qmbAuthoring().setEnabled(enable);
		form.dtimRecording().setEnabled(enable);
	}

	private boolean validUpdate()
	{
		if (form.getLocalContext().getMotorRecord() == null)
		{
			engine.showMessage("Please select a record to update");
			return false;
		}
		return true;
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NeuroMotorExaminationVo voMotorExam = form.getLocalContext().getMotorRecord();

		if (!validateInput())
			return;

		populateDataFromScreen(voMotorExam);

		String[] arrErrors = voMotorExam.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			form.getLocalContext().setMotorRecord(domain.saveNeuroMotorRecord(voMotorExam));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
	}

	private boolean validateInput()
	{
		GenForm.grdMotorRow row = null;
		for (int i = 0; i < form.grdMotor().getRows().size(); i++)
		{
			// we dont want to work on the total Row
			// FIX WDEV-2100
			if (i == form.grdMotor().getRows().size() - 2)
				break;

			row = form.grdMotor().getRows().get(i);

			String strLeft = row.getcolLeft();
			if (strLeft != null && !strLeft.trim().equals(""))
			{
				strLeft = strLeft.trim();
				if (!strLeft.equals("0") && !strLeft.equals("1") && !strLeft.equals("2") && !strLeft.equals("3") && !strLeft.equals("4") && !strLeft.equals("5") && !strLeft.equalsIgnoreCase("N"))
				{
					engine.showMessage("Please enter only scores from 0-5 or 'N' - allowed values listed on the right of the screen");
					return false;
				}
			}

			String strRight = row.getcolRight();
			if (strRight != null && !strRight.trim().equals(""))
			{
				strRight = strRight.trim();
				if (!strRight.equals("0") && !strRight.equals("1") && !strRight.equals("2") && !strRight.equals("3") && !strRight.equals("4") && !strRight.equals("5") && !strRight.equalsIgnoreCase("N"))
				{
					engine.showMessage("Please enter only scores from 0-5 or 'N' - allowed values listed on the right of the screen");
					return false;
				}
			}
		}
		return true;
	}

	private void populateDataFromScreen(NeuroMotorExaminationVo voMotorExam)
	{
		NeuroMotorFindingsVo voFindings = voMotorExam.getNeuroMotor();
		if (voFindings == null)
			voFindings = new NeuroMotorFindingsVo();

		voFindings.setAuthoringCP(form.qmbAuthoring().getValue());
		voFindings.setAuthoringDateTime(form.dtimRecording().getValue());

		if ((voFindings.getIsProblem() == null && form.chkProblem().getValue() == true) || (voFindings.getIsProblem() != null && voFindings.getIsProblem().equals(Boolean.FALSE) && form.chkProblem().getValue() == true))
		{
			MedicalProbOnAdmisVo voProblem = new MedicalProbOnAdmisVo();
			voProblem.setPatientProblem("Motor Function Abnormality");
			voProblem.setIsActive(Boolean.TRUE);
			voProblem.setProblemContext("Neuro - Motor");

			voProblem.setClinicalContact(voFindings.getClinicalContact());
			voProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voMotorExam.setProblem(voProblem);
		}
		else
			voMotorExam.setProblem(null);

		voFindings.setIsProblem(new Boolean(form.chkProblem().getValue()));
		voFindings.setLeftMotorLevel(form.cmbMotorLeft().getValue());
		voFindings.setRightMotorLevel(form.cmbMotorRight().getValue());

		voFindings.setRootFinding(populateFindingsDataFromGrid());
		if (voFindings.getRootFinding().size() > 0)
		{
			String[] strScores = calculateLeftAndRightScore(voFindings.getRootFinding());

			if (!strScores[0].equals(""))
				voFindings.setOverAllAsiaLeft(Integer.valueOf(strScores[0]));
			if (!strScores[1].equals(""))
				voFindings.setOverallAsiaRight(Integer.valueOf(strScores[1]));

			if (!strScores[2].equals(""))
				voFindings.setLLAsiaLeft(Integer.valueOf(strScores[2]));
			if (!strScores[3].equals(""))
				voFindings.setLLAsiaRight(Integer.valueOf(strScores[3]));
		}

		voMotorExam.setNeuroMotor(voFindings);
	}

	private NeuroMotorRootValueVoCollection populateFindingsDataFromGrid()
	{
		NeuroMotorRootValueVoCollection voCollMotorRoot = new NeuroMotorRootValueVoCollection();
		GenForm.grdMotorRow row = null;
		NeuroMotorRootValueVo voMotorRootItem = null;
		for (int i = 0; i < form.grdMotor().getRows().size(); i++)
		{
			// we dont want to work on the total Row
			if (i == form.grdMotor().getRows().size() - 2)
				break;

			row = form.grdMotor().getRows().get(i);

			voMotorRootItem = row.getIdentifier();
			if (voMotorRootItem == null)
				voMotorRootItem = new NeuroMotorRootValueVo();

			voMotorRootItem.setRootValue(row.getValue());

			voMotorRootItem.setLeftFinding(getFinding(row.getcolLeft() != null ? row.getcolLeft().trim() : ""));
			voMotorRootItem.setRightFinding(getFinding(row.getcolRight() != null ? row.getcolRight().trim() : ""));
			voCollMotorRoot.add(voMotorRootItem);
		}

		return voCollMotorRoot;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setMotorRecord(null);
		form.getLocalContext().setUpdatedInstance(null);
		open();
	}

	private Integer getFinding(String finding)
	{
		Integer value = null;
		if (finding != null && !finding.trim().equals(""))
		{
			char ch = finding.charAt(0);
			if (Character.isDigit(ch))
			{
				value = Integer.valueOf(Character.toString(ch));
			}
			else if (Character.isLetter(ch) && String.valueOf(ch).equalsIgnoreCase("N"))
			{
				value = new Integer(NOTESTABLE);
			}
		}
		return value;
	}

	protected void onRecNeuroValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}

	private void browseRecord()
	{
		clearScreen();
		form.grdMotor().getRows().clear();
		loadFindingsGrid();

		updateBrowseInformation();

		if (form.recNeuro().getValue() != null)
		{
			if (form.recNeuro().getValue() instanceof ClinicalContactShortVo)
			{
				
				//form.getLocalContext().setMotorRecord(domain.getNeuroMotorRecord((ClinicalContactShortVo) form.recNeuro().getValue(), null));
				//wdev-13410
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblem((ClinicalContactShortVo) form.recNeuro().getValue());  
				NeuroMotorFindingsVoCollection neuroFindVoCol = domain.getNeuroMotorRecordCol((ClinicalContactShortVo) form.recNeuro().getValue(), null); 
				NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroFindVoCol != null && neuroFindVoCol.size() > 0)
				{
					tempVo.setNeuroMotor(neuroFindVoCol.get(0));
				}
				form.getLocalContext().setMotorRecord(tempVo);
				//-------------
			}
			else if (form.recNeuro().getValue() instanceof NeuroMotorFindingsShortVo)
			{
				NeuroMotorFindingsShortVo voNeuroFinding = (NeuroMotorFindingsShortVo) form.recNeuro().getValue();

				if (voNeuroFinding.getClinicalContact() == null)
				{
					//form.getLocalContext().setMotorRecord(domain.getNeuroMotorByCareContext(voNeuroFinding.getCareContext(), voNeuroFinding));
					//wdev-13410
					MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByCareContext(voNeuroFinding.getCareContext());  
					NeuroMotorFindingsVoCollection neuroFindVoCol = domain.getNeuroMotorCollByCareContext(voNeuroFinding.getCareContext(), voNeuroFinding); 
					NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
					tempVo.setProblem(medProbVo);
					if(neuroFindVoCol != null && neuroFindVoCol.size() > 0)
					{
						tempVo.setNeuroMotor(neuroFindVoCol.get(0));
					}
					form.getLocalContext().setMotorRecord(tempVo);
					//-------------
				}
				else
				{
					//form.getLocalContext().setMotorRecord(domain.getNeuroMotorRecord(voNeuroFinding.getClinicalContact(), voNeuroFinding));
					//wdev-13410
					MedicalProbOnAdmisVo medProbVo = domain.getPatientProblem(voNeuroFinding.getClinicalContact());  
					NeuroMotorFindingsVoCollection neuroFindVoCol = domain.getNeuroMotorRecordCol(voNeuroFinding.getClinicalContact(), voNeuroFinding); 
					NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
					tempVo.setProblem(medProbVo);
					if(neuroFindVoCol != null && neuroFindVoCol.size() > 0)
					{
						tempVo.setNeuroMotor(neuroFindVoCol.get(0));
					}
					form.getLocalContext().setMotorRecord(tempVo);
					//-------------
				}
			}
			else
			{
				//form.getLocalContext().setMotorRecord(domain.getNeuroMotorByCareContext((CareContextLiteVo) form.recNeuro().getValue(), null));
				//wdev-13410
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByCareContext((CareContextLiteVo) form.recNeuro().getValue());  
				NeuroMotorFindingsVoCollection neuroFindVoCol = domain.getNeuroMotorCollByCareContext((CareContextLiteVo) form.recNeuro().getValue(), null); 
				NeuroMotorExaminationVo tempVo = new NeuroMotorExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroFindVoCol != null && neuroFindVoCol.size() > 0)
				{
					tempVo.setNeuroMotor(neuroFindVoCol.get(0));
				}
				form.getLocalContext().setMotorRecord(tempVo);
				//-------------
			}
			populateScreenFromData();
		}
		checkRecordIsEditable();
	}

	private void checkRecordIsEditable()
	{
		if (form.recNeuro().getValue() != null)
		{
			CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			ValueObject vo = form.recNeuro().getValue();

			if (vo instanceof CareContextShortVo)					//wdev-13064
			{
				// checks has CareContext been selected
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) vo;
				if (voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					activateButtons(true);
				else
					activateButtons(false);

			}
			else if (vo instanceof NeuroMotorFindingsShortVo)
			{
				NeuroMotorFindingsShortVo voNeuroFindings = (NeuroMotorFindingsShortVo) vo;
				if (voNeuroFindings.getClinicalContact() == null)
				{
					CareContextRefVo voSelectedCareContext = voNeuroFindings.getCareContext();
					if (voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					{
						activateButtons(true);
					}
					else
						activateButtons(false);
				}
				else
				{

					ClinicalContactShortVo voSelectedClinicalContact = voNeuroFindings.getClinicalContact();
					if (voCurrentClinicalContact != null)
					{
						if (voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						{
							activateButtons(true);
							form.btnNew().setEnabled(false);
						}
						else
							activateButtons(false);
					}

					if (voSelectedClinicalContact != null)
						form.btnNew().setEnabled(false);
				}
			}
			else
			{
				ClinicalContactShortVo voSelectedClinicalContact = (ClinicalContactShortVo) vo;
				if (voCurrentClinicalContact != null)
				{
					if (voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						activateButtons(true);
					else
						activateButtons(false);
				}
				else
					activateButtons(false);
				// Disable new if record exists for clinical contact
				if (form.getLocalContext().getMotorRecordIsNotNull() && form.getLocalContext().getMotorRecord().getNeuroMotorIsNotNull() && voCurrentClinicalContact != null)
				{
					NeuroMotorFindingsVo voNeuroMotor = form.getLocalContext().getMotorRecord().getNeuroMotor();
					if (voNeuroMotor.getClinicalContactIsNotNull() && voNeuroMotor.getClinicalContact().getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						form.btnNew().setEnabled(false);
				}
			}
		}
		checkForMotorRecord();
		isRecordOfTypeMedicalAdmission();
	}

	private void isRecordOfTypeMedicalAdmission()
	{
		ClinicalContactShortVo voCurrentClinical = form.getGlobalContext().Core.getCurrentClinicalContact();
		if (voCurrentClinical != null)
		{
			if (voCurrentClinical.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
				activateButtons(false);
		}
	}

	private void checkForMotorRecord()
	{
		if (form.getLocalContext().getMotorRecordIsNotNull())
		{
			if (form.getLocalContext().getMotorRecord().getNeuroMotor() == null)
				form.btnUpdate().setVisible(false);
		}
	}

	private void updateBrowseInformation()
	{
		form.lblBrowseStatus().setValue(form.recNeuro().getRecordState("Assessment", "Assessments"));
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.recNeuro().setEnabled(true);
			form.chkProblem().setEnabled(false);
		}
		else
		{
			form.recNeuro().setEnabled(false);
			form.chkProblem().setEnabled(true);
		}

		checkAuthoringControls();
	}

	protected void onQmbAuthoringTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbAuthoring().clear();

		HcpLiteVoCollection coll = domain.listHCPs(value);
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				HcpLiteVo med = coll.get(i);
				form.qmbAuthoring().newRow(med, med.toString());
			}

			if (coll.size() == 1)
				form.qmbAuthoring().setValue(coll.get(0));
			else if (coll.size() > 1)
				form.qmbAuthoring().showOpened();
		}
	}
}
