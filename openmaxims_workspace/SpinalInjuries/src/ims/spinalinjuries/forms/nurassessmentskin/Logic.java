//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41124.1200)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmentskin;

import ims.coe.vo.RiskAssessment;
import ims.coe.vo.RiskAssessmentCollection;
import ims.coe.vo.RiskDescription;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.BradenScale;
import ims.nursing.vo.BradenScaleDetails;
import ims.nursing.vo.BradenScaleDetailsCollection;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.PatientTurnsVo;
import ims.nursing.vo.PatientTurnsVoCollection;
import ims.nursing.vo.SkinAssessment;
import ims.nursing.vo.SkinAssessmentFindings;
import ims.nursing.vo.SkinAssessmentFindingsCollection;
import ims.nursing.vo.SkinAssessmentReviewCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.AssessmentType;
import ims.spinalinjuries.vo.NurAssessmentSkinVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		getBradenAssessment();
		open();
		
		// WDEV-9321
		// Josan George Cristian:
		// I know it's a bad practice to put updateControlsState() here but open() has several return paths that should not be there
		updateControlsState();
	}

	private void open()
	{
		if (form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false)
			form.setMode(FormMode.EDIT);
		else
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setEnabled(false);
		}
		form.chkCopy().setEnabled(false);

		// Care Plans
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPINAL_SKIN);
		if (tempColl != null)
		{
			form.grdCarePlan().getRows().clear();
			GenForm.grdCarePlanRow tempRow;
			for (int i = 0; i < tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.grdCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}

		checkForPreviousAssessent();

		// If there is an assessment in the global context, we want to call the
		// get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);
		NurAssessmentSkinVo voSkin = null;
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			voSkin = (NurAssessmentSkinVo) domain.getComponent(assmnt.getCurrentComponent());
			if (voSkin == null)
				return;

			form.getGlobalContext().COE.setBradenScaleRecord(voSkin.getBradenScale());
			form.getLocalContext().setAssessmentSkin(voSkin);
			this.populateScreenFromData(voSkin);
		}
		else
		{
			if (form.getGlobalContext().Nursing.getAssessmentComponent() != null)
			{
				voSkin = (NurAssessmentSkinVo) form.getGlobalContext().Nursing.getAssessmentComponent();
				this.populateScreenFromData(voSkin);
			}
			if (form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false)
				form.setMode(FormMode.EDIT);
			else
				form.setMode(FormMode.VIEW);
		}

		if (assmnt != null)
		{
			if (assmnt.getAssessmentType().equals(AssessmentType.INITIAL))
			{
				if (voSkin == null)
				{
					form.chkSectionComplete().setEnabled(false);
					return;
				}

				if (voSkin.getBradenScaleIsNotNull() && voSkin.getSkinAssessmentIsNotNull())
				{
					if ((voSkin.getIsCompleteIsNotNull()) && (voSkin.getIsComplete().booleanValue() == false))
						form.chkSectionComplete().setEnabled(true);
				}
				else
					form.chkSectionComplete().setEnabled(false);
			}
		}
		setBradenTooltip();
	}

	protected void checkForPreviousAssessent()
	{
		NurAssessmentSkinVo assessAccSkin = (NurAssessmentSkinVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_SKIN);

		if (assessAccSkin == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}

		form.getLocalContext().setPreviousAssSkin(assessAccSkin);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}

	protected void onLnkSkinAssessmentClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NurAssessmentSkinVo voSkin = litePopulateDataFromScreen();// this.populateDataFromScreen();
		if (voSkin == null)
			return;

		form.getGlobalContext().Nursing.setAssessmentComponent(voSkin);
		// engine.open(form.getForms().Nursing.SkinBodyChart);

		engine.open(form.getForms().Nursing.SkinBodyChartDialog);
	}

	private NurAssessmentSkinVo litePopulateDataFromScreen()
	{
		NurAssessmentSkinVo voSkin = form.getLocalContext().getAssessmentSkin();

		if (voSkin == null)
			voSkin = new NurAssessmentSkinVo();

		form.getLocalContext().setAssessmentSkin(voSkin);

		return voSkin;
	}

	protected void onImbDeleteTurnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdTurns().getSelectedRowIndex() >= 0)
			form.grdTurns().getRows().remove(form.grdTurns().getSelectedRowIndex());
		
		updateControlsState();
	}

	protected void onImbNewTurnClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GenForm.grdTurnsRow row = form.grdTurns().getRows().newRow();
		row.setValue(new PatientTurnsVo());
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NurAssessmentSkinVo voSkin = form.getLocalContext().getAssessmentSkin();
		if (voSkin == null)
			voSkin = new NurAssessmentSkinVo();

		voSkin = this.populateDataFromScreen();
		
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}

		try
		{
			String[] messages = voSkin.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo newAssmnt = form.getLocalContext().getAssessment();

			if (form.getGlobalContext().Core.getCurrentClinicalContact() != null && newAssmnt != null)
				newAssmnt.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());

			newAssmnt = domain.saveComponent(newAssmnt, voSkin);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for
			// onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				if (assmnt != null && assmnt.getCurrentComponent() == null)
				{
					ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					comp.setID_AssessmentComponent(e.getStaleObject().getId());
					assmnt.setCurrentComponent(comp);
					form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				}
			}

			open();
			return;
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_SKIN));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}

		// If the careplan grid is not readonly, we may need to go to the
		// careplanstep2 form
		if (form.grdCarePlan().getReadOnly() == false)
		{
			CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			GenForm.grdCarePlanRow cpRow;
			for (int i = 0; i < form.grdCarePlan().getRows().size(); i++)
			{
				cpRow = form.grdCarePlan().getRows().get(i);
				if (cpRow.getcolSelect() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			}
			if (templList.size() > 0)
			{
				form.getGlobalContext().Nursing.setAssessmentComponent(voSkin);
				form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				engine.open(form.getForms().Nursing.CarePlanStep2);
			}
			else
				engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}

	protected void onLnkInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessmentSkin() != null && form.getLocalContext().getAssessmentSkin().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessmentSkin().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}
	}

	protected void onChkCopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getPreviousAssSkinIsNotNull())
		{
			NurAssessmentSkinVo previousAssSkinVo = new NurAssessmentSkinVo();
			previousAssSkinVo = form.getLocalContext().getPreviousAssSkin();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);			
			
			//form.getLocalContext().setAssessmentSkin(new NurAssessmentXerox(previousAssSkinVo).getCopy());
			form.getLocalContext().setAssessmentSkin(previousAssSkinVo);		//wdev-9439
			populateScreenFromData(form.getLocalContext().getAssessmentSkin());
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}
	}

	

	protected void populateScreenFromData(NurAssessmentSkinVo voSkin)
	{
		super.populateScreenFromData(voSkin);

		// Turns Grid
		if (voSkin.getTurns() != null)
		{
			GenForm.grdTurnsRow row = null;
			form.grdTurns().getRows().clear();
			for (int i = 0; i < voSkin.getTurns().size(); i++)
			{
				PatientTurnsVo voTurn = voSkin.getTurns().get(i);
				row = form.grdTurns().getRows().newRow();
				row.setValue(voTurn);
				row.setColDuration(voTurn.getDuration());
				row.setColPosition(voTurn.getPosition());
				row.setColTime(voTurn.getTime());
			}
		}

		// Care Plans
		if (voSkin.getCarePlanTemplate() != null && voSkin.getCarePlanTemplate().size() > 0)
		{
			GenForm.grdCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = voSkin.getCarePlanTemplate();
			CarePlanTemplate template;
			int i = 0;
			// Find the correct row to set to selected
			for (int j = 0; j < form.grdCarePlan().getRows().size(); j++)
			{
				cpRow = form.grdCarePlan().getRows().get(j);
				for (i = 0; i < templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelect(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}

		litePopulateScreenFromData(voSkin);
	}

	protected NurAssessmentSkinVo populateDataFromScreen()
	{
		NurAssessmentSkinVo voSkin = form.getLocalContext().getAssessmentSkin();

		voSkin = super.populateDataFromScreen(voSkin);

		PatientTurnsVoCollection voTursColl = new PatientTurnsVoCollection();

		GenForm.grdTurnsRow row = null;
		for (int i = 0; i < form.grdTurns().getRows().size(); i++)
		{
			PatientTurnsVo voTurn = new PatientTurnsVo();
			row = form.grdTurns().getRows().get(i);
			voTurn.setDuration(row.getColDuration());
			voTurn.setPosition(row.getColPosition());
			voTurn.setTime(row.getColTime());

			voTursColl.add(voTurn);

		}

		voSkin.setTurns(voTursColl);
		voSkin.setIsComplete(new Boolean(form.chkSectionComplete().getValue()));

		voSkin.setBradenScale(form.getGlobalContext().COE.getBradenScaleRecord());

		form.getLocalContext().setAssessmentSkin(voSkin);

		return voSkin;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		// If there is an assessment in the global context, we want to call the
		// get component domain method 
		// Otherwise, it is a new assessment component

		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);

		if (assmnt != null && assmnt.getCurrentComponent() != null && assmnt.getCurrentComponent().getID_AssessmentComponentIsNotNull())
		{
			NurAssessmentSkinVo voSkin = (NurAssessmentSkinVo) domain.getComponent(assmnt.getCurrentComponent());

			if (voSkin == null)
				return;

			form.getLocalContext().setAssessmentSkin(voSkin);
			if (voSkin.getBradenScaleIsNotNull())
				form.getGlobalContext().COE.setBradenScaleRecord(voSkin.getBradenScale());

			litePopulateScreenFromData(voSkin);// this.populateScreenFromData(voSkin);

			if (assmnt.getAssessmentType().equals(AssessmentType.INITIAL))
			{
				if (voSkin.getBradenScaleIsNotNull() && voSkin.getSkinAssessmentIsNotNull())
				{
					if (!Boolean.TRUE.equals(voSkin.getIsComplete()))
						form.chkSectionComplete().setEnabled(true);
				}
				else
					form.chkSectionComplete().setEnabled(false);
			}
		}

		setBradenTooltip();
	}

	private void litePopulateScreenFromData(NurAssessmentSkinVo voSkin)
	{
		if (voSkin == null)
			return;

		if (Boolean.TRUE.equals(voSkin.getIsComplete()))
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setEnabled(false);
		}

		form.chkCopy().setEnabled(false);
	}

	private void setBradenTooltip()
	{
		if (form.getGlobalContext().COE.getBradenScaleRecordIsNotNull() && form.getGlobalContext().COE.getBradenAssessmentsIsNotNull())
		{
			int nScore;
			int nTotalScore = 0;
			StringBuffer sb = new StringBuffer();
			sb.append("<b><u>BRADEN ASSESSMENT SCORE IS : <b></u><br><br>");
			for (int i = 0; i < form.getGlobalContext().COE.getBradenAssessments().size(); i++)
			{
				RiskAssessment risk = form.getGlobalContext().COE.getBradenAssessments().get(i);

				nScore = getScoreByAssessmentName(risk.getName(), form.getGlobalContext().COE.getBradenScaleRecord().getAssessmentDetails());
				sb.append("<b>" + risk.getName() + "  " + nScore + "<br>");

				nTotalScore += nScore;
			}
			sb.append("<br> <b> Total is : " + nTotalScore);
			form.lnkBraden().setTooltip(sb.toString());
		}
	}

	private boolean getBradenAssessment()
	{
		RiskAssessmentCollection risks = form.getGlobalContext().COE.getBradenAssessments();

		if (risks == null)
		{
			try
			{
				risks = ims.nursing.helper.RiskAssessmentHelper.getBSRisks();
			}
			catch (PresentationLogicException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
			form.getGlobalContext().COE.setBradenAssessments(risks);
		}

		return true;
	}

	private int getScoreByAssessmentName(String colFall, BradenScaleDetailsCollection assessmentDetails)
	{
		int nScore = 0;

		RiskAssessment risk;
		RiskDescription descr;

		for (int i = 0; i < form.getGlobalContext().COE.getBradenAssessments().size(); i++)
		{
			risk = form.getGlobalContext().COE.getBradenAssessments().get(i);

			if (risk.getName().equalsIgnoreCase(colFall))
			{
				for (int j = 0; j < risk.getRiskFactors().size(); j++)
				{
					descr = risk.getRiskFactors().get(j);

					for (int k = 0; k < assessmentDetails.size(); k++)
					{
						if (assessmentDetails.get(k).getAssessment().toString().equals(descr.getId()) && assessmentDetails.get(k).getSelect().equals(Boolean.TRUE))
						{
							nScore += Integer.valueOf(descr.getScore()).intValue();
						}
					}
				}

				break;
			}
		}

		return nScore;
	}

	@Override
	protected void onLnkBradenClick() throws PresentationLogicException
	{
		if (!getBradenAssessment())
			return;

		NurAssessmentSkinVo voSkin = litePopulateDataFromScreen();

		if (voSkin == null)
			return;

		form.getGlobalContext().Nursing.setAssessmentComponent(voSkin);

		if (voSkin.getBradenScaleIsNotNull())
			form.getGlobalContext().COE.setBradenScaleRecord(voSkin.getBradenScale());

		form.getGlobalContext().Nursing.setEdit(new Boolean(!form.chkSectionComplete().getValue()));

		engine.open(form.getForms().Nursing.BradenScaleDialog);
	}
	
	/**
	 * Utility class used to copy a NurAssessmentSkinVo.
	 * It creates the copy on instantiation and returns it with the <b>getCopy()</b> getter.
	 * <br>
	 * If you want to create another copy you have to create a new NurAssessmentXerox object.
	 * </br>
	 * Used only to encapsulate the copy methods, which should be better placed in the vos.
	 * @author cperebiceanu
	 */
	public  class NurAssessmentXerox
	{
		private NurAssessmentSkinVo copy;
		
		/**
		 * The constructor. 
		 * @param value The NurAssessmentVo you want copied
		 */
		public NurAssessmentXerox(NurAssessmentSkinVo value)
		{
			copy = copyNurAssessmentSkin(value);
		}
		
		/**
		 * @return The copy of the NurAssessmentSkinVo you used to instantiate this class
		 */
		public  NurAssessmentSkinVo getCopy()
		{
			return copy;
		}
		private  NurAssessmentSkinVo copyNurAssessmentSkin(NurAssessmentSkinVo historyAss)
		{
			if (historyAss == null)
				return null;
			
			NurAssessmentSkinVo copy = (NurAssessmentSkinVo) historyAss.clone();
			copy.clearIDAndVersion();
			copy.setCarePlans(null);
			copy.setIsComplete(false);
			copy.setCopy(true);
			copy.setWaterlow(null);
			copy.setWaterlowScore(null);
			copy.setBradenScale(copyBradenScale(copy.getBradenScale()));
			copy.setSkinAssessment(copySkinAssessment(copy.getSkinAssessment()));
			copy.setAssessmentInfo(null);
			copy.setLastAssessmentInfo(null);
			copy.setCarePlanTemplate(null);
			copy.setCarePlans(null);
			copy.setTurns(copyTurns(copy.getTurns()));
		
			return copy;
		}

		private  PatientTurnsVoCollection copyTurns(PatientTurnsVoCollection turns)
		{
			if (turns == null)
				return null;
			for (int i = 0 ; i <turns.size() ; i++)
			{
				PatientTurnsVo turn = turns.get(i);
				if (turn == null)
					continue;
				turn.clearIDAndVersion();
			}
			return turns;
		}

		private  SkinAssessment copySkinAssessment(SkinAssessment skinAssessment)
		{
			if (skinAssessment == null)
				return null;
			skinAssessment.clearIDAndVersion();
			skinAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			skinAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			skinAssessment.setDateTimeInitiated(new DateTime());
			skinAssessment.setHcpInitiated(domain.getHcpLiteUser() instanceof HcpLiteVo ? (HcpLiteVo) domain.getHcpLiteUser() : null);
			skinAssessment.setSkinAssessmentFindings(copySkinAssessmentFindings(skinAssessment.getSkinAssessmentFindings()));
			return skinAssessment;

		}

		private SkinAssessmentFindingsCollection copySkinAssessmentFindings(SkinAssessmentFindingsCollection skinAssessmentFindings)
		{
			if (skinAssessmentFindings == null)
				return null;

			for (int i = 0; i < skinAssessmentFindings.size(); i++)
			{
				SkinAssessmentFindings skinAssessmentFinding = skinAssessmentFindings.get(i);
				if (skinAssessmentFinding == null)
					continue;
				skinAssessmentFinding.clearIDAndVersion();
				skinAssessmentFinding.setSkinAssessmentReview(copySkinAssessmentReview(skinAssessmentFinding.getSkinAssessmentReview()));
			}
			return skinAssessmentFindings;
		}

		private SkinAssessmentReviewCollection copySkinAssessmentReview(SkinAssessmentReviewCollection skinAssessmentReview)
		{

			if (skinAssessmentReview == null)
				return null;
			for (int i = 0 ; i <skinAssessmentReview.size() ; i++)
			{
				if (skinAssessmentReview.get(i) == null)
					continue;
				skinAssessmentReview.get(i).clearIDAndVersion();
			}
			return skinAssessmentReview;
		}

		private BradenScale copyBradenScale(BradenScale bradenScale)
		{
			if (bradenScale == null)
				return null;
			bradenScale.clearIDAndVersion();
			bradenScale.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			bradenScale.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			bradenScale.setHcpInitiated(domain.getHcpLiteUser() instanceof HcpLiteVo ? (HcpLiteVo)domain.getHcpLiteUser() : null);
			bradenScale.setDateTimeInitiated(new DateTime());
			bradenScale.setAssessmentDetails(copyBradenScaleDetails(bradenScale.getAssessmentDetails()));
			return bradenScale;
		}

		private BradenScaleDetailsCollection copyBradenScaleDetails(BradenScaleDetailsCollection assessmentDetails)
		{
			if (assessmentDetails == null)
				return null;
			for (int i = 0 ; i < assessmentDetails.size() ; i++)
			{
				BradenScaleDetails bradenScaleDetail = assessmentDetails.get(i);
				if (bradenScaleDetail == null)
					continue;
				bradenScaleDetail.clearIDAndVersion();
			}
		
			return assessmentDetails;
		}
	}

	protected void onGrdTurnsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.imbDeleteTurn().setEnabled(form.grdTurns().getValue() != null);
	}

	protected void onGrdTurnsSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();
	}
}
