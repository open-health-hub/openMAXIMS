//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
// 09/05/2006 - WDEV-956 fixes.
//  *** Added Functionality: ****
//- proper handling of Stale Exception
//- After Saving the saved record gets redisplayed
//- onFormModeChanged method added and Update button enable/disavble coded properly
//- buttons resized/realigned according to patterns
//- All warning messages appear in the same dialog (not separate)
//- changed methods according to patterns convention

package ims.spinalinjuries.forms.adviceleaflets;

import java.util.ArrayList;

import ims.core.vo.AdviceLeafletsVo;
import ims.core.vo.AdviceLeafletsVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	protected void onFormModeChanged()
	{
		enableUpdateBtn();
	}
	private void open() 
	{
		clearScreen();
		clearGrid();
		populateAdviceLeafletsGrid();
		form.setMode(FormMode.VIEW);				
	}

	private void populateAdviceLeafletsGrid() 
	{
	    AdviceLeafletsVoCollection voColl = domain.listAdviceLeaflets(form.getGlobalContext().Core.getCurrentCareContext());
	    
	    if(form.getLocalContext().getVoAdviceLeafletsIsNotNull())
	    	form.getLocalContext().setVoAdviceLeaflets(domain.getAdviceLeaflets(form.getLocalContext().getVoAdviceLeaflets()));//WDEV-7044
	    
		if (voColl != null)
		{
			GenForm.grdLeafletsRow row = null;
			for(int i=0;i<voColl.size();i++)
			{
				row = form.grdLeaflets().getRows().newRow();
				AdviceLeafletsVo voAdviceLeaflets = voColl.get(i);
				row.setValue(voAdviceLeaflets);
				if(voAdviceLeaflets.getAdviceLeaflet() != null)
					row.setcolAdvLeaflet(voAdviceLeaflets.getAdviceLeaflet().toString());
				if(voAdviceLeaflets.getLeafletVersion() != null)
					row.setcolVersionNo(voAdviceLeaflets.getLeafletVersion().toString());
				if(voAdviceLeaflets.getDateGiven() != null)
					row.setcolDateGiven(voAdviceLeaflets.getDateGiven().toString());
				if(voAdviceLeaflets.getGivenTo() != null)
					row.setcolGivenTo(voAdviceLeaflets.getGivenTo().toString());
				
				if(voAdviceLeaflets.equals(form.getLocalContext().getVoAdviceLeaflets()))	//WDEV-7044
				{
					form.grdLeaflets().setValue(voAdviceLeaflets);
				}
			}
			if(form.grdLeaflets().getValue() != null)
				refreshDetails();
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	private void clearScreen() 
	{
		form.qmbRecordingHCP().setValue(null);
		form.cmbLeaflet().setValue(null);
		form.txtVersionNo().setValue(null);
		form.dteGiven().setValue(null);
		form.dteRecorded().setValue(null);
		form.tmeRecorded().setValue(null);
		form.cmbGivenTo().setValue(null);
		form.txtGivenToName().setValue(null);		
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		clearScreen();
		setDefaultValues();
		enableControls(true);
		form.getLocalContext().setVoAdviceLeaflets(null);
	}
	
	private void enableControls(boolean bEnable) 
	{
		form.qmbRecordingHCP().setEnabled(bEnable);
	}

	private void setDefaultValues() 
	{
		if (domain.getHcpUser() != null)
		{
			form.qmbRecordingHCP().clear();
			form.qmbRecordingHCP().newRow((Hcp) domain.getHcpUser(), domain.getHcpUser().toString());
			form.qmbRecordingHCP().setValue((Hcp) domain.getHcpUser());			
		}
		
		form.dteRecorded().setValue(new DateTime().getDate());
		form.tmeRecorded().setValue(new DateTime().getTime());
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	private boolean save()
	{
		AdviceLeafletsVo voAdviceLeaflets = form.getLocalContext().getVoAdviceLeaflets();
		if (voAdviceLeaflets == null)
		{
			voAdviceLeaflets = new AdviceLeafletsVo();
		}
		
		voAdviceLeaflets.setAuthoringHCP(form.qmbRecordingHCP().getValue());
		voAdviceLeaflets.setAdviceLeaflet(form.cmbLeaflet().getValue());
		voAdviceLeaflets.setLeafletVersion(form.txtVersionNo().getValue());
		voAdviceLeaflets.setDateGiven(form.dteGiven().getValue());
		if (form.dteRecorded().getValue() != null && form.tmeRecorded().getValue() != null)
			voAdviceLeaflets.setAuthoringDateTime(new DateTime(form.dteRecorded().getValue(), form.tmeRecorded().getValue()));
		else
		{
			engine.showMessage("Please enter both Recording date and Time values.");
			return false;
		}
		
		voAdviceLeaflets.setGivenTo(form.cmbGivenTo().getValue());
		voAdviceLeaflets.setGivenToName(form.txtGivenToName().getValue());
		
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voAdviceLeaflets.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		String[] errors = voAdviceLeaflets.validate(getUiErrors());
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		
		try 
		{
			voAdviceLeaflets = domain.saveAdviceLeafletsDetails(voAdviceLeaflets);
			form.getLocalContext().setVoAdviceLeaflets(voAdviceLeaflets);
		} 
		catch (ims.domain.exceptions.StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private String[] getUiErrors()
	{
		ArrayList errors = new ArrayList();
		
		if(form.dteGiven().getValue()!= null && form.dteGiven().getValue().isGreaterThan(new Date()))
			errors.add("'Date Given' cannot be in the future.");
		
		//WDEV-17265
		if (form.cmbLeaflet().getValue() == null)
			errors.add("'Leaflet' is mandatory.");
		
		if(errors.size() > 0)
		{
			String[] uiErrors = new String[errors.size()];
			errors.toArray(uiErrors);
			return uiErrors;
		}
		
		return null;
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		enableControls(false);
	}
	
	protected void onQmbRecordingHCPTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbRecordingHCP().clear();
		HcpFilter filter = new HcpFilter();
		ims.core.vo.PersonName name  = new ims.core.vo.PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpCollection coll = domain.listHcps(filter);
		for (int i = 0; i < coll.size(); i++)
		{
			Hcp med = coll.get(i);
			form.qmbRecordingHCP().newRow(med, med.toString());			
		}
		if (coll.size() == 1)
		{
			form.qmbRecordingHCP().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbRecordingHCP().showOpened();		
		}				

	}
	protected void onGrdLeafletsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		refreshDetails();
		enableUpdateBtn();
	}

	private void enableUpdateBtn()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			boolean enableUpdate = form.grdLeaflets().getSelectedRowIndex() >= 0;
			form.btnUpdate().setVisible(enableUpdate);
			form.btnUpdate().setEnabled(enableUpdate);
		}
	}

	private void populateAdviceLeafletsDetails(AdviceLeafletsVo vo) 
	{
		if(vo != null)
		{
			//form.getLocalContext().setVoAdviceLeaflets(vo);    WDEV-7044
			
			Hcp authoringHCP = vo.getAuthoringHCP();
			if (authoringHCP != null)
			{
				form.qmbRecordingHCP().newRow(authoringHCP, authoringHCP.toString());
				form.qmbRecordingHCP().setValue(authoringHCP);
			}
			form.cmbLeaflet().setValue(vo.getAdviceLeaflet());
			form.txtVersionNo().setValue(vo.getLeafletVersion());
			form.dteGiven().setValue(vo.getDateGiven());
			if (vo.getAuthoringDateTime() != null)
			{
				form.dteRecorded().setValue(vo.getAuthoringDateTime().getDate());
				form.tmeRecorded().setValue(vo.getAuthoringDateTime().getTime());
			}
			form.cmbGivenTo().setValue(vo.getGivenTo());
			form.txtGivenToName().setValue(vo.getGivenToName());
		}
	}
	
	private void refreshDetails()
	{
		if(form.grdLeaflets().getValue() != null)	//WDEV-7044
		{
    		form.getLocalContext().setVoAdviceLeaflets(domain.getAdviceLeaflets(form.grdLeaflets().getValue()));	//WDEV-7044
    		populateAdviceLeafletsDetails(form.getLocalContext().getVoAdviceLeaflets());	//WDEV-7044
		}
	}
	
	private void clearGrid()
	{
		form.grdLeaflets().getRows().clear();
	}
}
