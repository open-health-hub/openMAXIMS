//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41210.1600)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmenteating;

import ims.coe.vo.RiskAssessmentCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.coe.vo.lookups.OralAssessmentCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.NutritionalMethodVo;
import ims.nursing.vo.NutritionalMethodVoCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.AssessmentType;
import ims.nursing.vo.lookups.SpecialDiet;
import ims.nursing.vo.lookups.SpecialDietCollection;
import ims.spinalinjuries.vo.NurAssessmentEatingVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	//	form.lnkNutritionalRiskAssessment().setTooltip("<b><u>Nutritional Risk Assessment</u><br><br>LOW RISK:</b> 0 - 3<br> <b>NEEDS MONITORING:</b> 4 - 5<br><b>HIGH RISK:</b> 6 -15<br><br>");
	}
	
	private void open() 
	{
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false )
			form.setMode(FormMode.EDIT);
		else
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setEnabled(false);
			form.imbNew().setEnabled(false);	
			form.imbDelete().setEnabled(false);
		}
		form.chkCopy().setEnabled(false);
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);
	
		NurAssessmentEatingVo voEat = null;
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			voEat = (NurAssessmentEatingVo)domain.getComponent(assmnt.getCurrentComponent());
			form.getLocalContext().setAssessEating(voEat);
		}	
		
		//Oral Assessment Grid
		OralAssessmentCollection colAss = LookupHelper.getOralAssessment(domain.getLookupService());
		form.grdOral().getRows().clear();
		for(int i=0;i<colAss.size();i++)
		{
			GenForm.grdOralRow oRow = form.grdOral().getRows().newRow();
			oRow.setColDental(colAss.get(i));
		}
		
		//Special Diet Grid
		SpecialDietCollection collSpecial = ims.nursing.vo.lookups.LookupHelper.getSpecialDiet(domain.getLookupService());
		form.grdDiet().getRows().clear();
		for(int i=0;i<collSpecial.size();i++)
		{
			GenForm.grdDietRow dRow = form.grdDiet().getRows().newRow();
			dRow.setColDiet(collSpecial.get(i).getText());
			dRow.setValue(collSpecial.get(i));
		}
		
		//Care Plans
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPINAL_EATING);
		if (tempColl != null)
		{
			form.grdCarePlan().getRows().clear();
			GenForm.grdCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.grdCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlan(template.getTitle());
			}
		}
		
		checkForPreviousAssessent();
			
		if (assmnt.getAssessmentType().equals(AssessmentType.INITIAL))
			if(form.getMode().equals(FormMode.EDIT))
				form.chkSectionComplete().setEnabled(true);
		
		if(voEat != null)
			this.populateScreenFromData(voEat);	
			
		setNutritionRemoveMenuVisibility();
		
	}
	protected void checkForPreviousAssessent()
	{
		NurAssessmentEatingVo prevEatingVo = (NurAssessmentEatingVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_EATING);
		
		if (prevEatingVo == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPreviousAssEating(prevEatingVo);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}
	
	protected void onImbDeleteClick() throws ims.framework.exceptions.PresentationLogicException 
	{
		removeNutritionMethod();	
		setNutritionRemoveMenuVisibility();
	}

	private void removeNutritionMethod() 
	{
		if (form.grdNutrition().getSelectedRowIndex() >= 0)
			form.grdNutrition().getRows().remove(form.grdNutrition().getSelectedRowIndex());
	}

	protected void onImbNewClick() throws ims.framework.exceptions.PresentationLogicException 
	{
		newNutritionMethod();
	}

	private void newNutritionMethod() 
	{
		GenForm.grdNutritionRow row = form.grdNutrition().getRows().newRow();
			row.setValue(new NutritionalMethodVo());
	}
	
	protected void onChkCopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getPreviousAssEatingIsNotNull())
		{
			NurAssessmentEatingVo previousAssEatVo = new NurAssessmentEatingVo();
			previousAssEatVo = form.getLocalContext().getPreviousAssEating();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);
			previousAssEatVo.setIsComplete(Boolean.FALSE);
			previousAssEatVo.setCopy(Boolean.TRUE);
			previousAssEatVo.setNutritionalRiskAssessment(null);
			previousAssEatVo.setNutritionalRiskScore(null);	
			previousAssEatVo.setCarePlanTemplate(null);
			populateScreenFromData(previousAssEatVo);
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}				
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdNutrition().getRows().size()>0)
		{
			for(int i=0; i<form.grdNutrition().getRows().size(); i++)
			{
				if(form.grdNutrition().getRows().get(i).getColInserted()!=null)
				{
					if(form.grdNutrition().getRows().get(i).getColInserted().isGreaterThan(new Date()))
					{
						engine.showMessage("'Date Inserted' can not be in the future.");
						return;
					}
				}
			}
		}
		//Date changed can not be earlier than the Insertion Date
		if(form.grdNutrition().getRows().size()>0)
		{
			for(int z=0; z<form.grdNutrition().getRows().size(); z++)
			{
				if(form.grdNutrition().getRows().get(z).getColInserted()!=null && form.grdNutrition().getRows().get(z).getColChange()!=null)
				{
					if(form.grdNutrition().getRows().get(z).getColInserted().isGreaterThan(form.grdNutrition().getRows().get(z).getColChange()))
					{
						engine.showMessage("'Date Changed Due' can not be earlier than the 'Date Inserted'");
						return;
					}
				}
				if(form.grdNutrition().getRows().get(z).getColNutritional()==null && (form.grdNutrition().getRows().get(z).getColSize()==null || 
						form.grdNutrition().getRows().get(z).getColSize()=="") && form.grdNutrition().getRows().get(z).getColSite()==null 
						&& form.grdNutrition().getRows().get(z).getColType()==null && form.grdNutrition().getRows().get(z).getColInserted()==null && form.grdNutrition().getRows().get(z).getColChange()==null
						&& form.grdNutrition().getRows().get(z).getColDetails()==null)
				{
					engine.showMessage("Empty row on Nutritional grid.");
					return;
				}
			}
		}
		NurAssessmentEatingVo voEat = form.getLocalContext().getAssessEating();
		if (voEat == null)
			voEat = new NurAssessmentEatingVo();

		voEat = this.populateDataFromScreen();
		if (voEat == null)
			return;	
		
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}

		String[] arrErrors = voEat.validate();
	
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(form.getLocalContext().getAssessment(), voEat);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			
		}catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				 AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				 if (assmnt != null && assmnt.getCurrentComponent() == null)
				 {
					 ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					 comp.setID_AssessmentComponent(e.getStaleObject().getId());
					 assmnt.setCurrentComponent(comp);
					 form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				 }
			}
			open();
			return;								
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_EATING));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}

		//If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.grdCarePlan().getReadOnly() == false)
		{
			  CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			  GenForm.grdCarePlanRow cpRow;
			  for (int i=0; i<form.grdCarePlan().getRows().size(); i++)
			  {
				  cpRow = form.grdCarePlan().getRows().get(i);
				  if (cpRow.getcolSelected() && !cpRow.isReadOnly())
					 templList.add(cpRow.getValue());
			  }
			  if (templList.size() > 0)
			  {
				  form.getGlobalContext().Nursing.setAssessmentComponent(voEat);
				  form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				  engine.open(form.getForms().Nursing.CarePlanStep2);
			  }
			  else
				  engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		 }
		 else
			  engine.open(form.getForms().Nursing.AdmissionAssessOverview);	

	}
	
	protected void onLnkInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessEating() != null && form.getLocalContext().getAssessEating().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessEating().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}								
	}

	protected void onLnkNutritionalRiskAssessmentClick() throws PresentationLogicException 
	{
		RiskAssessmentCollection risks = form.getGlobalContext().Nursing.getNutritionalRiskAssessments();
		
		if(risks == null)
		{
			try
			{
				risks = ims.nursing.helper.RiskAssessmentHelper.getNutritionalRisks();
			}
			catch (PresentationLogicException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			form.getGlobalContext().Nursing.setNutritionalRiskAssessments(risks);
		}

		NurAssessmentEatingVo voEat = this.populateDataFromScreen();
		if (voEat == null)
			return;

		form.getGlobalContext().Nursing.setAssessmentComponent(voEat);	
		form.getGlobalContext().Nursing.setDisplayScore(Boolean.TRUE);

		if (voEat.getNutritionalRiskAssessment() !=  null)
			form.getGlobalContext().Nursing.setNutritionalRiskRecord(voEat.getNutritionalRiskAssessment());
		
		form.getGlobalContext().Nursing.setEdit(new Boolean(!form.chkSectionComplete().getValue()));
						
		engine.open(form.getForms().Nursing.NutritionalRiskAssessmentDialog);
	}
	
	protected void populateScreenFromData(NurAssessmentEatingVo voEat)
	{
		super.populateScreenFromData(voEat);
		
		//Nutritional method
		form.grdNutrition().getRows().clear();
		NutritionalMethodVoCollection voCollNutrition  = voEat.getNutritionalMethod();
		if(voCollNutrition != null)
		{		
			GenForm.grdNutritionRow rowNutrition;
			for (int j=0; j<voCollNutrition.size(); j++)
			{
				NutritionalMethodVo voNutrition = voCollNutrition.get(j);
				rowNutrition = form.grdNutrition().getRows().newRow();
				rowNutrition.setValue(voNutrition);
				rowNutrition.setColChange(voNutrition.getDateChangeDue());
				rowNutrition.setColDetails(voNutrition.getDetails());
				rowNutrition.setColInserted(voNutrition.getDateInserted());
				rowNutrition.setColNutritional(voNutrition.getNutritionalMethod());
				rowNutrition.setColSite(voNutrition.getSite());
				rowNutrition.setColSize(voNutrition.getSize());
				rowNutrition.setColType(voNutrition.getType());
			}		 
		}	
		
		//Oral Assessment
		ims.nursing.vo.OralAssessmentCollection voCollOral  = voEat.getOralAssessment();
		if(voCollOral != null)
		{		
			GenForm.grdOralRow rowOral;
			for (int j=0; j<voCollOral.size(); j++)
			{
				ims.nursing.vo.OralAssessment voOral = voCollOral.get(j);
				int i=0;
				for (i=0; i<form.grdOral().getRows().size(); i++)
				{
					rowOral = form.grdOral().getRows().get(i);
					if (rowOral.getColDental().equals(voOral.getOralAssessment()))
					{
						rowOral.setColDental(voOral.getOralAssessment());
						rowOral.setColStatus(voOral.getStatus());
						break;
					}
			   }
			   if(i == form.grdOral().getRows().size())
			   {
					rowOral = form.grdOral().getRows().newRow();
					rowOral.setColDental(voOral.getOralAssessment());
					rowOral.setColStatus(voOral.getStatus());
					rowOral.setValue(voOral);
			   }
		   }		 
		}	
		
		//Special Diet
		SpecialDietCollection dietColl = voEat.getSpecialDiet();
		if(dietColl != null)
		{		
			GenForm.grdDietRow rowDiet;
			for (int j=0; j<dietColl.size(); j++)
			{
				SpecialDiet diet = dietColl.get(j);
				int i=0;
				for (i=0; i<form.grdDiet().getRows().size(); i++)
				{
					rowDiet = form.grdDiet().getRows().get(i);
					if (rowDiet.getValue().equals(diet))
					{
						rowDiet.setColSelect(true);
						break;
					}
			   }
			   if(i == form.grdDiet().getRows().size())
			   {
					rowDiet = form.grdDiet().getRows().newRow();
					rowDiet.setColSelect(true);
					rowDiet.setValue(diet);
			   }
		   }		 
		}
		//Care Plan 
		if(voEat.getCarePlanTemplateIsNotNull() && voEat.getCarePlanTemplate().size()>0)
		{
			GenForm.grdCarePlanRow cpRow;
			CarePlanTemplateCollection carePlanTempColl = voEat.getCarePlanTemplate();
			CarePlanTemplate carePlanTempVo; 
			int i=0;
			for(int z=0; z<form.grdCarePlan().getRows().size(); z++)
			{
				cpRow = form.grdCarePlan().getRows().get(z);
				for (i=0; i<carePlanTempColl.size(); i++)
				{
					carePlanTempVo = carePlanTempColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(carePlanTempVo.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelected(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
		
		if (voEat.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setEnabled(false);			
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);			
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.imbNew().setEnabled(false);	
			form.imbDelete().setEnabled(false);
		}
	
		form.chkCopy().setEnabled(false);				
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		// If there is an assessment in the global context, we want to call the get component
		// domain method
		// Otherwise, it is a new assessment component
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);
		
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{		
			NurAssessmentEatingVo voEat = (NurAssessmentEatingVo)domain.getComponent(assmnt.getCurrentComponent());
			if (voEat == null)
				return;
			
			if (voEat != null)
				form.getLocalContext().setAssessEating(voEat);
			
			this.populateScreenFromData(voEat);	

			if (assmnt.getAssessmentType().equals(AssessmentType.INITIAL))
			{
				if (voEat.getNutritionalRiskAssessmentIsNotNull())
				{
					if ( (voEat.getIsCompleteIsNotNull() )
						&&   (voEat.getIsComplete().booleanValue() == false) )
						form.chkSectionComplete().setEnabled(true);
				}
				else
					form.chkSectionComplete().setEnabled(false);
			}
		}	
		
	//	if(formName.equals(form.getForms().Nursing.NutritionalRiskAssessmentDialog))
	//	{
	//		if(form.getGlobalContext().Nursing.getAssessmentScore() != null)
	//			form.intNutritionalRisk().setValue(new Integer(form.getGlobalContext().Nursing.getAssessmentScore().intValue()));
	//	}			
	}

	protected NurAssessmentEatingVo populateDataFromScreen() 
	{
		NurAssessmentEatingVo voEat = form.getLocalContext().getAssessEating();
			voEat = super.populateDataFromScreen(voEat);
				
		//Nutritional Method
		NutritionalMethodVoCollection voCollNutrition = new NutritionalMethodVoCollection();
		NutritionalMethodVo voNutrition = null;
		GenForm.grdNutritionRow nRow = null;	
		for (int i=0; i<form.grdNutrition().getRows().size(); i++)
		{
			nRow = form.grdNutrition().getRows().get(i);
			voNutrition = new NutritionalMethodVo();
			voNutrition.setDateChangeDue(nRow.getColChange());
			voNutrition.setDateInserted(nRow.getColInserted());
			voNutrition.setDetails(nRow.getColDetails());
			voNutrition.setNutritionalMethod(nRow.getColNutritional());
			voNutrition.setSize(nRow.getColSize());
			voNutrition.setSite(nRow.getColSite());
			voNutrition.setType(nRow.getColType());
			voCollNutrition.add(voNutrition);
		}
		voEat.setNutritionalMethod(voCollNutrition);	
	
		//Oral Assessment
		ims.nursing.vo.OralAssessmentCollection voCollOral = new ims.nursing.vo.OralAssessmentCollection();
		ims.nursing.vo.OralAssessment voOral = null;	
		GenForm.grdOralRow oRow = null;	
		for (int i=0; i<form.grdOral().getRows().size(); i++)
		{
			oRow = form.grdOral().getRows().get(i);
			voOral = new ims.nursing.vo.OralAssessment();
			voOral.setOralAssessment(oRow.getColDental());
			voOral.setStatus(oRow.getColStatus());	
			voCollOral.add(voOral);
		}
		voEat.setOralAssessment(voCollOral);	
	
		//Special Diet
		SpecialDietCollection dietColl = new SpecialDietCollection();
		SpecialDiet diet = null;
		GenForm.grdDietRow dRow = null;	
		for (int i=0; i<form.grdDiet().getRows().size(); i++)
		{
			dRow = form.grdDiet().getRows().get(i);
			diet = dRow.getValue();
			if(dRow.getColSelect() == true)
				dietColl.add(diet);
		}
		voEat.setSpecialDiet(dietColl);	
		voEat.setIsComplete(new Boolean(form.chkSectionComplete().getValue()));

		return voEat;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdNutrition()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					newNutritionMethod();
					setNutritionRemoveMenuVisibility();
					break;
				case GenForm.ContextMenus.GenericGrid.Remove:					
					removeNutritionMethod();
					setNutritionRemoveMenuVisibility();
					break;
			}
		}
		
	}

	private void setNutritionRemoveMenuVisibility() 
	{
		boolean bVisible = form.grdNutrition().getSelectedRowIndex() != - 1 &&
							form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().getGenericGridRemoveItem().setVisible(bVisible);
		form.imbDelete().setEnabled(bVisible);	//wdev-13441
		
	}

	protected void onFormModeChanged() 
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().getGenericGridAddItem().setVisible(bVisible);		
	}

	protected void onGrdNutritionSelectionChanged() throws PresentationLogicException 
	{
		setNutritionRemoveMenuVisibility();
	}

}
