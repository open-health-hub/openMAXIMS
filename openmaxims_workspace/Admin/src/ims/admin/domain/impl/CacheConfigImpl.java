//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.53 build 2566.31117)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.domain.base.impl.BaseCacheConfigImpl;
import ims.admin.vo.CachedClassVo;
import ims.admin.vo.CachedClassVoCollection;
import ims.admin.vo.HibernateCacheStatisticsVo;
import ims.admin.vo.lookups.CacheUsage;
import ims.configuration.CachedClass;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.lookups.LookupInstance;
import ims.framework.utils.ImagePath;

public class CacheConfigImpl extends BaseCacheConfigImpl
{
	private static final long serialVersionUID = 1L;

	public void saveCacheConfig(ims.admin.vo.CachedClassVoCollection cachedClasses) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = this.getDomainFactory();
		String hql = "from CachedClass where boClassName = ";
		for (int i = 0; i < cachedClasses.size(); i++)
		{
			CachedClassVo vo = cachedClasses.get(i);
			try
			{
				factory.delete(hql + "'" + vo.getClassName() + "'");
			}
			catch (ForeignKeyViolationException e)
			{
				throw new DomainRuntimeException(e);
			}
			if (vo.getCacheUsage() != null)
			{
				CachedClass domCache = new CachedClass();
				domCache.setBoClassName(vo.getClassName());
				domCache.setCacheUsage(this.getDomLookup(vo.getCacheUsage()));	
				domCache.setCollection(vo.getIsCollection().booleanValue());
				factory.save(domCache);				
			}
		}
	}

	public CachedClassVoCollection getCachedClasses()
	{
		List l = this.getDomainFactory().find("from CachedClass");
		CachedClassVoCollection ret = new CachedClassVoCollection();
		for (int i = 0; i < l.size(); i++)
		{
			CachedClass cc = (CachedClass)l.get(i);
			CachedClassVo vo = new CachedClassVo();
			vo.setClassName(cc.getBoClassName());
			
			LookupInstance lki = cc.getCacheUsage();
			vo.setCacheUsage(new CacheUsage(lki.getId(), lki.getText(), lki.isActive(), null, new ImagePath(lki.getImage().getImageId(), lki.getImage().getImagePath()), lki.getColor()));
			vo.setIsCollection(new Boolean(cc.isCollection()));
			ret.add(vo);
		}
		return ret;
	}

	public void clearCache(String className)
	{
		super.clearCacheEntries(className);
	}

	public HibernateCacheStatisticsVo getHibernateCacheStatistics()
	{
		HibernateCacheStatisticsVo vo = new HibernateCacheStatisticsVo();
		vo.setSecondLevelCacheHitCount(Long.toString( getSecondLevelCacheHitCount()));
		vo.setSecondLevelCacheMissCount(Long.toString(getSecondLevelCacheMissCount()));
		vo.setSecondLevelCachePutCount(Long.toString(getSecondLevelCachePutCount()));
		return vo;
	}

	public void clearCache()
	{
		clearCacheEntries();
		
	}
}
