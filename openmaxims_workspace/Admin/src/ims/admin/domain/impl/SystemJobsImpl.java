//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3895.20770)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;
	
import java.util.List;
import ims.admin.domain.SystemJobDetails;
import ims.admin.domain.base.impl.BaseSystemJobsImpl;
import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.ConfiguredJobVo;
import ims.admin.vo.ConfiguredJobVoCollection;
import ims.admin.vo.SystemJobVo;
import ims.admin.vo.SystemJobVoCollection;
import ims.admin.vo.domain.AppUserShortVoAssembler;
import ims.admin.vo.domain.ConfiguredJobVoAssembler;
import ims.admin.vo.domain.SystemJobVoAssembler;
import ims.core.configuration.domain.objects.AppUser;
import ims.core.configuration.domain.objects.ConfiguredJob;
import ims.core.configuration.domain.objects.ConfiguredJobExecutionSummary;
import ims.core.configuration.domain.objects.SystemJob;
import ims.core.vo.ConfiguredJobExecutionSummaryVo;
import ims.core.vo.domain.ConfiguredJobExecutionSummaryVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class SystemJobsImpl extends BaseSystemJobsImpl
{	
		private static final long serialVersionUID = 1L;

	public SystemJobVoCollection listAvailableSystemJobs() 
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from SystemJob job where job.isActive = :ACTIVE";
		List jobs = factory.find(hqlString, new String[] {"ACTIVE"}, new Object[] {Boolean.TRUE});
		return SystemJobVoAssembler.createSystemJobVoCollectionFromSystemJob(jobs);
	}	
		
	public ConfiguredJobExecutionSummaryVo getHistory(Integer id)
	{
		DomainFactory factory = getDomainFactory();				
		DomainObject summary = factory.findFirst("from ConfiguredJobExecutionSummary job where job.configuredJob.id = " + id + " order by id desc");
		if (summary instanceof ConfiguredJobExecutionSummary)
		{			
			return ConfiguredJobExecutionSummaryVoAssembler.create((ConfiguredJobExecutionSummary) summary);
		}
		
		return null;
	}
	
	public SystemJobVo getSystemJobVo(Integer id) 
	{
		if(id == null)
		{
			throw new CodingRuntimeException("SystemJobVo id is null");
		}			
		
		DomainFactory factory = getDomainFactory();
		SystemJob doSystemJob = (SystemJob) factory.getDomainObject(SystemJob.class, id);
		return (SystemJobVoAssembler.create(doSystemJob));
	}
	
	public ConfiguredJobVo getConfiguredJobVo(Integer id) 
	{
		if(id == null)
		{
			throw new CodingRuntimeException("SystemJobVo id is null");
		}			
		
		DomainFactory factory = getDomainFactory();
		ConfiguredJob doConfiguredJob = (ConfiguredJob) factory.getDomainObject(ConfiguredJob.class, id);
		return ConfiguredJobVoAssembler.create(doConfiguredJob);
	}
	
	public ConfiguredJobVoCollection listConfiguredSystemJobs() 
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from ConfiguredJob";
		List jobs = factory.find(hqlString, new String[] {}, new Object[] {});
		return ConfiguredJobVoAssembler.createConfiguredJobVoCollectionFromConfiguredJob(jobs);
	}
	
	
	public ConfiguredJobVo saveSystemJobDetails(ConfiguredJobVo jobDetails) throws StaleObjectException
	{
		SystemJobDetails impl = (SystemJobDetails) getDomainImpl(SystemJobDetailsImpl.class);
		return impl.saveSystemJobDetails(jobDetails);
	}	
		
	public String getJobNameMyImsId(Integer imsId) 
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "select name from SystemJob job where job.isActive = :isActive and job.imsId = :imsID";
		List jobs = factory.find(hqlString, new String[] {"isActive", "imsID"}, new Object[] {true, new Integer(imsId)});
		if (jobs != null && jobs.size() > 0)
		{
				return null;
		}
		
		return null; 
	}
	
	public SystemJobVo getSystemJobByImsId(Integer imsId) 
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from SystemJob job where job.isActive = :isActive and job.imsId = :imsID";
		List jobs = factory.find(hqlString, new String[] {"isActive", "imsID"}, new Object[] {true, new Integer(imsId)});
		if (jobs != null && jobs.size() > 0)
		{
				return SystemJobVoAssembler.createSystemJobVoCollectionFromSystemJob(jobs).get(0);
		}
		
		return null; 
	}
	
	public ConfiguredJobVo getSystemJobDetailsByImsId(Integer imsId) 
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from ConfiguredJob configuredJob where configuredJob.id = :imsID";
		List jobDetails = factory.find(hqlString, new String[] {"imsID"}, new Object[] {new Integer(imsId)});
		if (jobDetails != null && jobDetails.size() > 0)
		{
				return ConfiguredJobVoAssembler.createConfiguredJobVoCollectionFromConfiguredJob(jobDetails).get(0);
		}
		
		return null; 
	}

	
	public void test() {
		// TODO Auto-generated method stub
		
	}

	public AppUserShortVo getAppUsersShort(AppUserShortVo voRef) 
	{
		if (voRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		AppUser domAppUser = (AppUser)factory.getDomainObject(AppUser.class, voRef.getID_AppUser()); 
		
		return AppUserShortVoAssembler.create(domAppUser);
	}
}
