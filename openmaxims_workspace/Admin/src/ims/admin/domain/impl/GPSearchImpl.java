//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.52 build 2505.17727)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.base.impl.BaseGPSearchImpl;
import ims.admin.vo.GPSearchCriteriaVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.vo.GP;
import ims.core.vo.GPLiteWithPracticesVo;
import ims.core.vo.GPLiteWithPracticesVoCollection;
import ims.core.vo.domain.GPAssembler;
import ims.core.vo.domain.GPLiteWithPracticesVoAssembler;
import ims.core.vo.lookups.GPStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class GPSearchImpl extends BaseGPSearchImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* List Gps
	*/
	public GPLiteWithPracticesVoCollection listGps(GPSearchCriteriaVo filter)
	{
		DomainFactory factory = getDomainFactory();
		String andStr = " ";
		StringBuffer clause = new StringBuffer();

		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		// If a code type and code is supplied in the search criteria, we use
		// that first without using the name
		if (filter.getCodeTypeIsNotNull() && filter.getCodeIsNotNull())
		{
			String hql = " select distinct gp from Gp gp join gp.codeMappings as mappings" + " where mappings.taxonomyName = :taxonomyType and mappings.taxonomyCode = :taxonomyCode";
			names.add("taxonomyType");
			names.add("taxonomyCode");
			values.add(getDomLookup(filter.getCodeType()));
			values.add(filter.getCode());
			
			if (filter.getStatusIsNotNull())
			{
				hql += " and gp.status.id = :statusId";
				names.add("statusId");
				values.add(filter.getStatus().getID());
			}
			else	//wdev-9930
			{
				hql += " and gp.status.id <> :statusId";
				names.add("statusId");
				values.add(GPStatus.INACTIVE.getID());

			}
			
			
			List gps = factory.find(hql, names, values);
			return GPLiteWithPracticesVoAssembler.createGPLiteWithPracticesVoCollectionFromGp(gps).sort();
		}

		String hql = "from Gp gp where ";
		
		//WDEV-15431
		String ret = "";
		if(filter!=null &&  filter.getForenameIsNotNull())
			ret = filter.getForename().replaceAll("%", "");
		
		if (filter.getForenameIsNotNull()&& ret.length()!=0)//WDEV-15431
		{
			clause.append(" gp.name.upperForename like :forename");
			names.add("forename");
			values.add(filter.getForename().toUpperCase() + "%");//WDEV-15431
			andStr = " and ";
		}

		if (filter.getSurnameIsNotNull())
		{
			clause.append(andStr + " gp.name.upperSurname like :surname");
			names.add("surname");
			values.add(filter.getSurname().toUpperCase() + "%");
			andStr = " and ";
		}
		
		if (filter.getStatusIsNotNull())
		{
			clause.append(andStr + " gp.status.id = :statusId");
			names.add("statusId");
			values.add(filter.getStatus().getID());
			andStr = " and ";
		}

		if (filter.getAddressContainsIsNotNull())
		{
			//WDEV-3053 - this line was omitted so the hql "Pract" was unknown
			hql = "select distinct gp from Gp gp, GpToPractice Pract where ";
			
			clause.append(andStr + " gp.id = Pract.gp.id and (upper(Pract.practice.address.line1) like :partialAddress ");
			clause.append(" or upper(Pract.practice.address.line2) like :partialAddress");
			clause.append(" or upper(Pract.practice.address.line3) like :partialAddress");
			clause.append(" or upper(Pract.practice.address.line4) like :partialAddress");
			clause.append(" or upper(Pract.practice.address.line5) like :partialAddress )");

			names.add("partialAddress");
			values.add("%" + filter.getAddressContains().toUpperCase() + "%");
			andStr = " and ";
		}

		if (filter.getPracticeNameIsNotNull())
		{
			hql = "select distinct gp from Gp gp, GpToPractice Pract where ";
			clause.append(andStr + " gp.id = Pract.gp.id and upper(Pract.practice.name) like :practiceName ");
			names.add("practiceName");
			values.add("%" + filter.getPracticeName().toUpperCase() + "%"); //WDEV-14369
		}

		hql += clause.toString();
		List gps = factory.find(hql, names, values);

		return GPLiteWithPracticesVoAssembler.createGPLiteWithPracticesVoCollectionFromGp(gps).sort();
	}

	public GPLiteWithPracticesVo getGpLite(GpRefVo gpRefVo)
	{
		if(gpRefVo == null)
			throw new CodingRuntimeException("Cannot get GpLiteVo for null GpRefVo");
		
		Gp doGp = (Gp)getDomainFactory().getDomainObject(Gp.class, gpRefVo.getID_Gp());
		
		return GPLiteWithPracticesVoAssembler.create(doGp);
	}

	public GP getGpFull(GpRefVo gpRefVo)
	{
		if(gpRefVo == null)
			throw new CodingRuntimeException("Cannot get GP for null GpRefVo");
		Gp doGp = (Gp)getDomainFactory().getDomainObject(Gp.class, gpRefVo.getID_Gp());
		
		return GPAssembler.create(doGp); 		
	}
}
