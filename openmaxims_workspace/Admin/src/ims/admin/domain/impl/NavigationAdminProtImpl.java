//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3509.17128)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.base.impl.BaseNavigationAdminProtImpl;
import ims.admin.vo.AppNavShortVoCollection;
import ims.admin.vo.AppNavigationVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.domain.AppFormVoAssembler;
import ims.admin.vo.domain.AppNavShortVoAssembler;
import ims.admin.vo.domain.AppNavigationVoAssembler;
import ims.admin.vo.domain.ReportTemplateLiteVoAssembler;
import ims.assessment.vo.domain.GraphicAssessmentShortVoAssembler;
import ims.assessment.vo.domain.UserAssessmentLiteVoAssembler;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.AppNavigation;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.hibernate3.DomainFactory;

import java.util.ArrayList;

public class NavigationAdminProtImpl extends BaseNavigationAdminProtImpl
{

	private static final long serialVersionUID = 1L;


	public AppNavShortVoCollection listNavigations(Boolean onlyActive) {
		
		String query = "from AppNavigation as an";
		ArrayList<String> params = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		if (onlyActive){
			query+=" where (an.isActive = :activeOnly)";
			params.add("activeOnly");
			values.add(onlyActive);
		}
		return AppNavShortVoAssembler.createAppNavShortVoCollectionFromAppNavigation(getDomainFactory().find(query,params,values));
	}
	/**
	* Gets a complet Navigation
	*/
	public ims.admin.vo.AppNavigationVo getNavigation(ims.admin.vo.AppNavShortVo navShort)
	{
		
		if (navShort == null || navShort.getID_AppNavigation() == null )
			return null;
				
		DomainFactory factory = (DomainFactory) getDomainFactory();
		AppNavigation appDO = (AppNavigation)factory.getDomainObject(AppNavigation.class,navShort.getID_AppNavigation());
		return AppNavigationVoAssembler.create(appDO);
		
	}

	public ims.assessment.vo.GraphicAssessmentShortVoCollection listGraphicalAssesments(String nameFilter)
	{
		DomainFactory factory = (DomainFactory) getDomainFactory();
		String hql = "select ga from GraphicAssessment as ga left join ga.activeStatus as ast where (upper(ga.name) like :name and ast.id = :id and ga.assessmentType.id not in (" + UserDefinedAssessmentType.DPP.getID() + ")) order by upper(ga.name)";
		String[] paramNames = new String[]{"name","id"};
		Object[] paramValues = new Object[]{"%"+(nameFilter == null ? "":nameFilter.toUpperCase())+"%",PreActiveActiveInactiveStatus.ACTIVE.getID()};
		return GraphicAssessmentShortVoAssembler.createGraphicAssessmentShortVoCollectionFromGraphicAssessment(factory.find(hql, paramNames, paramValues));
	}

	public ims.assessment.vo.UserAssessmentLiteVoCollection listUserAssesments(String nameFilter)
	{
		DomainFactory factory = (DomainFactory) getDomainFactory();
		String hql = "select ua from UserAssessment as ua left join ua.activeStatus as ast where (upper(ua.name) like :name and ast.id = :id and ua.assessmentType.id not in (" + UserDefinedAssessmentType.DPP.getID() + ")) order by upper(ua.name)";
		String[] paramNames = new String[]{"name","id"};
		Object[] paramValues = new Object[]{"%"+(nameFilter == null ? "" : nameFilter.toUpperCase())+"%",PreActiveActiveInactiveStatus.ACTIVE.getID()};
		return UserAssessmentLiteVoAssembler.createUserAssessmentLiteVoCollectionFromUserAssessment(factory.find(hql, paramNames, paramValues));
	}

	public ims.admin.vo.AppFormVo getAppForm(Integer id)
	{
		if (id == null )
			return null;
				
		DomainFactory factory = (DomainFactory) getDomainFactory();
		AppForm appDO = (AppForm)factory.getDomainObject(AppForm.class,id);
		return AppFormVoAssembler.create(appDO);
	}
	public ReportTemplateLiteVoCollection listReports(String nameFilter) {
		
		String hql = "select repTem from ReportBo as rep left join rep.templates as repTem where " +
				"(rep.isActive = 1 and repTem.isActive = 1 and upper(repTem.name) like :name) order by upper(repTem.name)";
		
		return  ReportTemplateLiteVoAssembler.createReportTemplateLiteVoCollectionFromTemplateBo(
				getDomainFactory().find(hql,"name","%"+(nameFilter == null ? "":nameFilter.toUpperCase())+"%"));
	}
	
	public AppNavigationVo save(AppNavigationVo appnavigationVo) throws StaleObjectException, UniqueKeyViolationException 
	{
		
		if (!appnavigationVo.isValidated())
			throw new DomainRuntimeException("Navigation VO param was not validated ");
		
		DomainFactory factory = (DomainFactory) this.getDomainFactory();
		
		AppNavigation domNav = AppNavigationVoAssembler.extractAppNavigation(factory, appnavigationVo);
		
		try
		{
			factory.save(domNav);
		}
		catch(UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("A Navigation with the same name already exists.");
		}
		
		return AppNavigationVoAssembler.create(domNav);
	}

}
