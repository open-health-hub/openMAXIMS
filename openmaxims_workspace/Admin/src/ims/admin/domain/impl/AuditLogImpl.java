//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ancuta Ciubotaru using IMS Development Environment (version 1.80 build 3979.27222)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.Set;
import ims.admin.domain.base.impl.BaseClearSpanAuditImpl;
import ims.admin.vo.ClearSpanAuditVo;
import ims.admin.vo.ClearSpanAuditVoCollection;
import ims.admin.vo.lookups.ClearSpanEventLevel;
import ims.admin.vo.lookups.ClearSpanEventLevelCollection;
import ims.admin.vo.lookups.ClearSpanEvents;
import ims.admin.vo.lookups.ClearSpanEventsCollection;
import ims.admin.vo.lookups.LookupHelper;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.lookups.LookupMapping;
import ims.framework.utils.DateTime;




public class AuditLogImpl extends BaseClearSpanAuditImpl
{

	private static final long serialVersionUID = 1L;   

	public ClearSpanEventsCollection getEventTypes() throws DomainInterfaceException
	{		

		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		
		try 
		{
			conn = getConnection();
		} catch (Exception e) 
		{
			//throw new DomainRuntimeException(e.getMessage(), e);
			throw new DomainInterfaceException(e);
		}
					
		ClearSpanEventsCollection coll = new ClearSpanEventsCollection();
		
		try
		{						
			 String sqlStr = "select distinct top 201 EventID from ADAPTERLOG";
		    
			 st = conn.createStatement();
			 rs = st.executeQuery(sqlStr);
			 ClearSpanEventsCollection events=LookupHelper.getClearSpanEvents(getLookupService());
			 while (rs.next())
			 {							
				 int eventId=rs.getInt("EventID");
				 ClearSpanEvents lkpInst= getEventTypeInstance(eventId,events);				 
				 if(lkpInst != null)
				 {					
					 coll.add(lkpInst);
				 }
				 else
				 {
					 ClearSpanEvents eventText = new ClearSpanEvents((eventId*1000+coll.size()),String.valueOf(eventId),true);					
					 coll.add(eventText);
				 }							
			 }
			 
			 return coll;
		}	
		catch (SQLException e) 
		{
			throw new DomainInterfaceException(e);			
		}
		finally
		{
			try 
			{
				closeJDBCItems(st, rs, null);
			} 
			catch (SQLException e) 
			{
				throw new DomainInterfaceException(e);
			}
		}	
	}
	
	
	
	public ClearSpanEvents getEventTypeInstance(int eventId, ClearSpanEventsCollection lkpInst) throws DomainInterfaceException
	{		
		DomainFactory factory = getDomainFactory();
		for(int i=0;i< lkpInst.size();i++)
		{
			ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(lkpInst.get(i).getId());
			Set mappings = doInst.getMappings();
			Iterator iter = mappings.iterator();
			LookupMapping doMapping;
			while (iter.hasNext())
			{
				doMapping = (LookupMapping) iter.next();
				if(doMapping.getExtSystem().equals(TaxonomyType.CLEARSPAN.toString())&& doMapping.getExtCode().equals(String.valueOf(eventId)))
				{
					return lkpInst.get(i);
				}
			}
		}			
		return null;
	}
	
	private Connection getConnection() throws Exception 
	{	    
		String dataSource=ConfigFlag.HL7.CLEARSPAN_AUDIT_DATASOURCE.getValue();
		
	    //String DB_CONN_STRING = "jdbc:sqlserver://devenvdto:1433; DatabaseName=ClearSpan_LogMonitor";//+ dataSource; 	 
	    String DB_CONN_STRING = "jdbc:sqlserver://"+dataSource +":1433;" +" DatabaseName=ClearSpan_LogMonitor";
	    String DRIVER_CLASS_NAME = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	    String USER_NAME = "clearspan";
	    String PASSWORD = "clearspan";	    	   
		
		if( dataSource.length() == 0 )
			throw new DomainInterfaceException("Invalid data source (configuration flag not set)");
			
	    Connection result = null;
	    try {
	       Class.forName(DRIVER_CLASS_NAME).newInstance();
	    }
	    catch (Exception ex){
	      throw new Exception(ex);
	    }
	    try {
	      result = DriverManager.getConnection(DB_CONN_STRING, USER_NAME, PASSWORD);
	    }
	    catch (Exception e){
	       throw new DomainInterfaceException(e);
	       
	    }
	    return result;
	  }
	
	private void closeJDBCItems(Statement st, ResultSet rs, PreparedStatement pst) throws SQLException
	{
			if(rs != null)
				rs.close();
			
			if(st != null)
				st.close();
			
			if (pst != null)
				pst.close();										
	}

	
	public ClearSpanAuditVoCollection getEntriesTotal(DateTime startDateTime, String source_name, ClearSpanEvents eventType, ClearSpanEventLevel eventLevel) throws DomainInterfaceException
	{
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		boolean whereClause = false;
		
		ClearSpanEventsCollection events=LookupHelper.getClearSpanEvents(getLookupService());
		//ClearSpanEventLevelCollection levels = LookupHelper.getClearSpanEventLevel(getLookupService());
		ClearSpanEventLevelCollection levels=(ClearSpanEventLevelCollection) ClearSpanEventLevel.getNegativeInstancesAsIItemCollection();
		
		try 
		{
			conn = getConnection();
		} catch (Exception e) 
		{
			throw new DomainInterfaceException(e);
		}
					
		ClearSpanAuditVoCollection coll = new ClearSpanAuditVoCollection();
		
		try
		{			
			 StringBuffer conStr = new StringBuffer();				
			 String sqlStr = "select top 201 TimeGenerated, EventID, EventType, SourceName, Message, Data from ADAPTERLOG" ;
		    
			 if(startDateTime != null )
				{
					if(!whereClause)
					{
						whereClause = true;						
						conStr.append(" where ");
					}
					else
					{
						conStr.append(" and ");						
					}
					
					String date=startDateTime.getDate().getMonth() +"/"+ startDateTime.getDate().getDay()+"/" + startDateTime.getDate().getYear() + " " + startDateTime.getTime();					
					conStr.append(" TimeGenerated >= '" + date + "'");						
				}
			 
			 if(source_name != null && source_name.trim().length() > 0)
			 {
				 if(!whereClause)
					{
						whereClause = true;						
						conStr.append(" where ");
					}
					else
					{
						conStr.append(" and ");						
					}									
				 if(source_name.equals("%") ||source_name.equals("_") || source_name.equals("^") ||source_name.equals("!"))
				 {
					 conStr.append(" SourceName like '%[" + source_name + "]%'");
				 }
				 else
				 {
					 conStr.append(" SourceName like '%" + source_name + "%'");	
				 }
									 
			 }
			 
			 if(eventType != null)
			 {
				 if(!whereClause)
					{
						whereClause = true;						
						conStr.append(" where ");
					}
					else
					{
						conStr.append(" and ");						
					}									
				 
				    String str_ret= getEventTypeCode(eventType,events);
				    int code;
					if(str_ret ==null)
					{
						code=Integer.parseInt(eventType.getText());
				    	conStr.append(" EventID = " + code );
					}
					else
					{
						code=Integer.parseInt(str_ret);
						conStr.append(" EventID = " + code);
					}
				    						 
			 }
			 
			 if(eventLevel != null)
			 {
				 if(!whereClause)
					{
						whereClause = true;						
						conStr.append(" where ");
					}
					else
					{
						conStr.append(" and ");						
					}									
				 
				 	String str_ret;
					try
					{
						//ClearSpanEventLevel cc[]= ClearSpanEventLevel.getNegativeInstances();												
						str_ret = getEventLevelCode(eventLevel,levels);
					} catch (DomainInterfaceException e)
					{
						throw new DomainRuntimeException(e);
					}
				    int code;
					if(str_ret ==null)
					{
						code=Integer.parseInt(eventLevel.getText());
				    	conStr.append(" EventType is not null ");
					}
					else
					{
						code=Integer.parseInt(str_ret);
						conStr.append(" EventType = " + code);
					}				 								
			 }
			 
			 String sql = sqlStr + conStr.toString();
			 
			 st = conn.createStatement();
			 rs = st.executeQuery(sql);			 			 
			 
			 while (rs.next())
			 {						
				 ClearSpanAuditVo vo = new ClearSpanAuditVo();
				 ims.framework.utils.DateTime dt= new DateTime(rs.getTimestamp("TimeGenerated").getTime()/1000);;								
							 				 					
				 vo.setTimeGenerated(dt);
								
				 int eventId=rs.getInt("EventID");				 
				 ClearSpanEvents lkpInst= getEventTypeInstance(eventId,events);				 
				 if(lkpInst != null)
				 {										
					 vo.setEventType(lkpInst);
				 }
				 else
				 {
					 ClearSpanEvents eventText = new ClearSpanEvents((eventId*1000+coll.size()),String.valueOf(eventId),true);										
					 vo.setEventType(eventText);
				 }	
				
				 int event_Level=rs.getInt("EventType");
				 ClearSpanEventLevel lkpInstLevel = getEventLevelInstance(event_Level,levels);
				 if(lkpInstLevel != null)
				 {															 
					 vo.setEvenLevel(lkpInstLevel);
				 }
				 else
				 {
					 ClearSpanEventLevel eventText = new ClearSpanEventLevel((event_Level*1000+coll.size()),String.valueOf(event_Level),true);										
					 vo.setEvenLevel(eventText);
				 }	
				 
				 vo.setSourceName(rs.getString("SourceName"));
				 vo.setMessage(rs.getString("Message"));
				 vo.setData(rs.getString("Data"));
				 
				 coll.add(vo);
			 }
			 
			 return coll;
		}	
		catch (SQLException e) 
		{
			throw new DomainInterfaceException(e);			
		}
		finally
		{
			try 
			{
				closeJDBCItems(st, rs, null);
			} 
			catch (SQLException e) 
			{
				throw new DomainInterfaceException(e);
			}
		}		
	}

	

	private String getEventTypeCode(ClearSpanEvents eventType, ClearSpanEventsCollection events)throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		for(int i=0;i< events.size();i++)
		{
			ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(events.get(i).getId());
			if(eventType.getText().equals(doInst.getText()))
		    {
				Set<?> mappings = doInst.getMappings();
				Iterator<?> iter = mappings.iterator();
				LookupMapping doMapping;
				while (iter.hasNext())
				{
					doMapping = (LookupMapping) iter.next();
					if(doMapping.getExtSystem().equals(TaxonomyType.CLEARSPAN.toString()))
					{
						return doMapping.getExtCode();
					}
				}
		    }				
		}	    		
		return null;
	}

	private ClearSpanEventLevel getEventLevelInstance(int event_Level, ClearSpanEventLevelCollection levels)throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		for(int i=0;i< levels.size();i++)
		{
			ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(levels.get(i).getId());
			Set<?> mappings = doInst.getMappings();
			Iterator<?> iter = mappings.iterator();
			LookupMapping doMapping;
			while (iter.hasNext())
			{
				doMapping = (LookupMapping) iter.next();
				if(doMapping.getExtSystem().equals(TaxonomyType.CLEARSPAN.toString())&& doMapping.getExtCode().equals(String.valueOf(event_Level)))
				{
					return levels.get(i);
				}
			}
		}	
		return null;
	}


	public String getEventLevelCode(ClearSpanEventLevel eventLevel,
			ClearSpanEventLevelCollection levels)
			throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		for(int i=0;i< levels.size();i++)
		{
		    ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(levels.get(i).getId());
		    if(eventLevel.getText().equals(doInst.getText()))
		    {
		    	Set<?> mappings = doInst.getMappings();
				Iterator<?> iter = mappings.iterator();
				LookupMapping doMapping;
				while (iter.hasNext())
				{
					doMapping = (LookupMapping) iter.next();
					if(doMapping.getExtSystem().equals(TaxonomyType.CLEARSPAN.toString()))
					{
						return doMapping.getExtCode();
					}
				}
		    }				
		}
		return null;
	}




	public Integer getTotalCount() throws DomainInterfaceException
	{
		Connection conn = null;
		Statement st = null;
		ResultSet rs = null;
		
		int total=0;
		
		try 
		{
			conn = getConnection();
		} catch (Exception e) 
		{
			//throw new DomainRuntimeException(e.getMessage(), e);
			throw new DomainInterfaceException(e);
		}
								
		try
		{						
			 String sqlStr = "select count(*) as Total from ADAPTERLOG";
		    
			 st = conn.createStatement();
			 rs = st.executeQuery(sqlStr);
			
			 while (rs.next())
			 {							
				 total=rs.getInt("Total");									
			 }
			 
			 
			return Integer.valueOf(total);
		}	
		catch (SQLException e) 
		{
			throw new DomainInterfaceException(e);			
		}
		finally
		{
			try 
			{
				closeJDBCItems(st, rs, null);
			} 
			catch (SQLException e) 
			{
				throw new DomainInterfaceException(e);
			}
		}	
	}

}

