//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.65 build 3195.25608)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;



import ims.admin.domain.base.impl.BasePatientKioskConfigImpl;
import ims.admin.vo.lookups.PatientKioskMessages;
import ims.core.configuration.domain.objects.PatientKioskSettings;
import ims.core.vo.PatientKioskMessageVo;
import ims.core.vo.PatientKioskMessageVoCollection;
import ims.core.vo.PatientKioskSettingsVo;
import ims.core.vo.PatientKioskSettingsVoCollection;
import ims.core.vo.domain.PatientKioskSettingsVoAssembler;
import ims.core.vo.lookups.PatientKioskTheme;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;


public class PatientKioskConfigImpl extends BasePatientKioskConfigImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* Returns the patient kiosk settings
	*/	
	public ims.core.vo.PatientKioskSettingsVo getPatientKioskSettings(String kioskId)
	{
		if (kioskId != null)
			this.createSystemLogEntry(SystemLogType.KIOSK, SystemLogLevel.INFORMATION, "Get Kiosk Settings (kiosk ID: " + kioskId + ")");
		
		DomainFactory factory = getDomainFactory();		
		PatientKioskSettingsVoCollection psVoColl = new PatientKioskSettingsVoCollection();
		psVoColl = PatientKioskSettingsVoAssembler.createPatientKioskSettingsVoCollectionFromPatientKioskSettings(factory.find("from PatientKioskSettings")); 
		
		if (psVoColl != null && psVoColl.size() != 0)
			return PatientKioskSettingsVoAssembler.createPatientKioskSettingsVoCollectionFromPatientKioskSettings(factory.find("from PatientKioskSettings")).get(0);
		else
		{
			// return default values
			PatientKioskSettingsVo defaultPSVo = new PatientKioskSettingsVo();
			defaultPSVo.setWebServiceUrl("");
			defaultPSVo.setAppUpdateUrl("");
			defaultPSVo.setTimeout(2);
			defaultPSVo.setTheme(PatientKioskTheme.BLUE);
			defaultPSVo.setAutoInstallUpdates(true);
			defaultPSVo.setAllowedDelay(0);
			defaultPSVo.setShowAppointments(false);
			
			// messages
			defaultPSVo.setMessages(getDefaultKioskMessages());
			return defaultPSVo;
		}
	}

	private PatientKioskMessageVoCollection getDefaultKioskMessages()
	{
		PatientKioskMessageVoCollection msgsVoColl = new PatientKioskMessageVoCollection();
		
		PatientKioskMessageVo msgVoWelcome = new PatientKioskMessageVo();
		msgVoWelcome.setMessageType(PatientKioskMessages.WELCOME_MESSAGE);
		msgVoWelcome.setMessageText("Welcome to the Appointment self-check-in service.####" +
				"If you do NOT have an appointment for TODAY then please speak to the receptionist.####" +
				"Please touch the SCREEN to check-in for an appointment today.");
				
		PatientKioskMessageVo msgVoEnterSurname = new PatientKioskMessageVo();
		msgVoEnterSurname.setMessageType(PatientKioskMessages.ENTER_SURNAME_MESSAGE);
		msgVoEnterSurname.setMessageText("Please enter your SURNAME");

		PatientKioskMessageVo msgVoEnterDOB = new PatientKioskMessageVo();
		msgVoEnterDOB.setMessageType(PatientKioskMessages.ENTER_DOB_MESSAGE);
		msgVoEnterDOB.setMessageText("Please enter your DATE OF BIRTH##(DD/MM/YYYY)");

		PatientKioskMessageVo msgVoEnterGender = new PatientKioskMessageVo();
		msgVoEnterGender.setMessageType(PatientKioskMessages.ENTER_GENDER_MESSAGE);
		msgVoEnterGender.setMessageText("Please enter your GENDER");

		PatientKioskMessageVo msgVoEnterPostcode = new PatientKioskMessageVo();
		msgVoEnterPostcode.setMessageType(PatientKioskMessages.ENTER_POSTCODE_MESSAGE);
		msgVoEnterPostcode.setMessageText("Please enter your POSTCODE");
		
		PatientKioskMessageVo msgVoSearchFailed = new PatientKioskMessageVo();
		msgVoSearchFailed.setMessageType(PatientKioskMessages.SEARCH_FAILED_MESSAGE);
		msgVoSearchFailed.setMessageText("Unable to find your appointments.##Please press the BACK button to review your search fields.");

		PatientKioskMessageVo msgVoGoToReception = new PatientKioskMessageVo();
		msgVoGoToReception.setMessageType(PatientKioskMessages.GOTO_RECEPTION_MESSAGE);
		msgVoGoToReception.setMessageText("Please contact the reception");

		PatientKioskMessageVo msgVoConfirmIdentity = new PatientKioskMessageVo();
		msgVoConfirmIdentity.setMessageType(PatientKioskMessages.CONFIRM_IDENTITY_MESSAGE);
		msgVoConfirmIdentity.setMessageText("Thank you, please confirm that you are");

		PatientKioskMessageVo msgVoConfirmAppointments = new PatientKioskMessageVo();
		msgVoConfirmAppointments.setMessageType(PatientKioskMessages.CONFIRM_APPOINTMENTS_MESSAGE);
		msgVoConfirmAppointments.setMessageText("Thank you, please confirm your appointments");

		PatientKioskMessageVo msgVoAppointmentsConfirmed = new PatientKioskMessageVo();
		msgVoAppointmentsConfirmed.setMessageType(PatientKioskMessages.APPOINTMENTS_CONFIRMED_MESSAGE);
		msgVoAppointmentsConfirmed.setMessageText("Thank you.##Your appointments have been confirmed");
		
		PatientKioskMessageVo msgVoConfirmFailed = new PatientKioskMessageVo();
		msgVoConfirmFailed.setMessageType(PatientKioskMessages.CONFIRM_FAILED_MESSAGE);
		msgVoConfirmFailed.setMessageText("There was an error confirming your appointments.##Please contact the reception");

		PatientKioskMessageVo msgVoPatientLate = new PatientKioskMessageVo();
		msgVoPatientLate.setMessageType(PatientKioskMessages.PATIENT_LATE_MESSAGE);
		msgVoPatientLate.setMessageText("Please contact the reception");
		
		msgsVoColl.add(msgVoWelcome);
		msgsVoColl.add(msgVoEnterSurname);
		msgsVoColl.add(msgVoEnterDOB);
		msgsVoColl.add(msgVoEnterGender);
		msgsVoColl.add(msgVoEnterPostcode);
		msgsVoColl.add(msgVoSearchFailed);
		msgsVoColl.add(msgVoGoToReception);
		msgsVoColl.add(msgVoConfirmIdentity);
		msgsVoColl.add(msgVoConfirmAppointments);
		msgsVoColl.add(msgVoAppointmentsConfirmed);
		msgsVoColl.add(msgVoConfirmFailed);		
		msgsVoColl.add(msgVoPatientLate);
		
		return msgsVoColl;
	}
	
	public ims.core.vo.PatientKioskSettingsVo savePatientKioskSettings(ims.core.vo.PatientKioskSettingsVo settings) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if (settings == null)
			throw new DomainInterfaceException("Can not save an empty Patient Kiosk settings.");

		DomainFactory factory = getDomainFactory();
		PatientKioskSettings psVo = PatientKioskSettingsVoAssembler.extractPatientKioskSettings(factory, settings);
		factory.save(psVo);
		
		return PatientKioskSettingsVoAssembler.create(psVo);
	}
}
