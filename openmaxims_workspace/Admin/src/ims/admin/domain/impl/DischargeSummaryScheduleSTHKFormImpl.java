//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 3952.27656)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.DischargeSummaryScheduleSTHKForm;
import ims.admin.domain.base.impl.BaseDischargeSummaryScheduleSTHKFormImpl;
import ims.admin.forms.dischargesummaryschedulesthkform.Logic;
import ims.admin.vo.PrinterVo;
import ims.clinical.vo.DischargeDetailsVo;
import ims.clinical.vo.DischargeDetailsVoCollection;
import ims.clinical.vo.DischargeReportDetailVoCollection;
import ims.clinical.vo.DischargeSummaryScheduleVo;
import ims.clinical.vo.DischargeSummaryScheduleVoCollection;
import ims.clinical.vo.EDischargeSTHKSummaryVo;
import ims.clinical.vo.EDischargeSTHKSummaryVoCollection;
import ims.clinical.vo.FailedEmailsDetailsVoCollection;
import ims.clinical.vo.domain.DischargeDetailsVoAssembler;
import ims.clinical.vo.domain.DischargeSummaryScheduleVoAssembler;
import ims.clinical.vo.domain.EDischargeSTHKSummaryVoAssembler;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.clinical.vo.lookups.DischargeSummaryJobType;
import ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.GP;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.PatientEdischargeBatchVo;
import ims.core.vo.PatientShortListVo;
import ims.core.vo.PatientShortListVoCollection;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.GPAssembler;
import ims.core.vo.domain.LocationFullVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientEdischargeBatchVoAssembler;
import ims.core.vo.domain.PatientShortListVoAssembler;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImplFlyweightFactory;
import ims.edischarge.domain.objects.DischargeDetails;
import ims.edischarge.domain.objects.DischargeSummarySchedule;
import ims.edischarge.domain.objects.Summary;
import ims.edischarge.vo.DischargeDetailsRefVo;
import ims.edischarge.vo.DischargeSummaryScheduleRefVo;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

import java.io.IOException;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.multipart.ByteArrayPartSource;
import org.apache.commons.httpclient.methods.multipart.FilePart;
import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
import org.apache.commons.httpclient.methods.multipart.Part;
import org.apache.commons.httpclient.methods.multipart.StringPart;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.log4j.Logger;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.StatefulJob;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;
public class DischargeSummaryScheduleSTHKFormImpl extends BaseDischargeSummaryScheduleSTHKFormImpl implements StatefulJob
{
	private static final long 	serialVersionUID 			= 1L;
	private static final Logger	LOG							= Logger.getLogger(Logic.class);
	private static final int 	TIMEOUT 					= 1000 * 60 * 15;
	private static final int 	MAX_BUFFER_LIMIT_NO_WARNING = 1024*1024;
	
	private String 			fileName;
	private int				successfulSentEmail = 0;
	private int		 		failedSentEmail = 0;
	private int		 		generatedLetters = 0;
	private int				printedLetters = 0;
	private static boolean	 running = false;
	String 					 printer = null;		
	private static String 	 SMTP_HOST_NAME;
	private static int 		 SMTP_PORT;
	private static String 	 SMTP_AUTH;
	private static String 	 emailFromAddress;	
	private static String 	 urlQueryServer;
	private static String 	 urlReportServer;
	private static String 	 urlPdfUploadServer;	
	private static String 	 pdfStorePath;	
	String 					 filePath = "";		
	
	public void save(DischargeSummaryScheduleVo batch) throws StaleObjectException
	{
		if(batch == null) {
			throw new CodingRuntimeException("DischargeSummaryScheduleVo is null");
		}
		if (!batch.isValidated()) {
			throw new DomainRuntimeException("DischargeSummaryScheduleVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		factory.save(DischargeSummaryScheduleVoAssembler.extractDischargeSummarySchedule(factory, batch));
	}
	
	public DischargeSummaryScheduleVo getDischargeSummarySchedule(DischargeSummaryScheduleRefVo voRef)
	{
		if(voRef == null)
			throw new CodingRuntimeException("Cannot get DischargeSummaryScheduleVo for null DischargeSummaryScheduleRefVo");
		
		DomainFactory factory = getDomainFactory();
		DischargeSummarySchedule doDischargeSummarySchedule = (DischargeSummarySchedule) factory.getDomainObject(DischargeSummarySchedule.class, voRef.getID_DischargeSummarySchedule());
		return DischargeSummaryScheduleVoAssembler.create(doDischargeSummarySchedule);
	}
	
	public EDischargeSTHKSummaryVo saveSummary(EDischargeSTHKSummaryVo summaryVo) throws StaleObjectException
	{
		if(summaryVo == null) 
			throw new CodingRuntimeException("summaryVo is null");
		
		if (!summaryVo.isValidated()) 
			throw new DomainRuntimeException("summaryVo not validated");
		
		
		DomainFactory factory = getDomainFactory();
		Summary doSumm = EDischargeSTHKSummaryVoAssembler.extractSummary(factory, summaryVo);			
		factory.save(doSumm);			
		return EDischargeSTHKSummaryVoAssembler.create(doSumm);
	}		
	
	public PatientDocumentVo savePatientDocument(PatientDocumentVo document) throws StaleObjectException
	{
		if(document == null) {
			throw new CodingRuntimeException("PatientDocumentVo is null");
		}
		if (!document.isValidated()) {
			throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, document);	
		factory.save(doPatientDocument);			
		return PatientDocumentVoAssembler.create(doPatientDocument);
	}	
	
	public void deletePatientDocument(PatientDocumentVo document) throws StaleObjectException, ForeignKeyViolationException
	{
		if(document == null) {
			throw new CodingRuntimeException("PatientDocumentVo is null");
		}
		if (!document.isValidated()) {
			throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, document);	
		factory.delete(doPatientDocument);					
	}	
	
	public DischargeDetailsVo saveDischargeDetails(DischargeDetailsVo discharge) throws StaleObjectException
	{
		if(discharge == null) {
			throw new CodingRuntimeException("DischargeDetailVo is null");
		}
		if (!discharge.isValidated()) {
			throw new DomainRuntimeException("DischargeDetailVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		DischargeDetails doDischargeDetails = DischargeDetailsVoAssembler.extractDischargeDetails(factory, discharge);			
		factory.save(doDischargeDetails);			
		return DischargeDetailsVoAssembler.create(doDischargeDetails);
	}	
	
	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}
		
	public PatientShortListVo getPatientByCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null || careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo is null");
		}
		if(careContext.getID_CareContext() == null) {
			throw new CodingRuntimeException("CareContextRefVo id is null");
		}
		
		DomainFactory factory = getDomainFactory();
		List domainObjectList = factory.find("select p from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientShortListVoCollection patient = PatientShortListVoAssembler.createPatientShortListVoCollectionFromPatient(domainObjectList);
		
		return patient != null && patient.size() > 0 ? (patient.get(0) != null ? patient.get(0) : null) : null;
	}
	
	public GP getGPViaCareContext(CareContextRefVo careContext) 
	{
		DomainFactory factory = getDomainFactory();
		List lst = factory.find("select gp from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p left join p.gp as gp where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		if (lst != null && lst.size() > 0)
			return GPAssembler.create((Gp) lst.get(0));
		
		return null;
	}
	public EDischargeSTHKSummaryVoCollection getSTHKPatientDocuments()
	{
		DomainFactory factory = getDomainFactory();
		String sql = "select summ from Summary as summ left join summ.careContext as cCtxt left join cCtxt.currentStatus as cStat where summ.dischargeLetterStatus.id = -1719 and ( summ.tTAStatus = -2084 or summ.tTAStatus = -2075) and cStat.status not in (:id1) "; 
		List lst = factory.find(sql,new String[]{"id1"}, new Object[]{getDomLookup(CareContextStatus.CANCELLED)});		
		if(lst != null
			&& !lst.isEmpty())
		{
			System.out.println(new DateTime().toString() + ": No of results : " + lst.size());
			return EDischargeSTHKSummaryVoAssembler.createEDischargeSTHKSummaryVoCollectionFromSummary(lst);
		}
		return null;
	}

	public EDischargeSTHKSummaryVoCollection getSTHKSuppPatientDocuments()
	{
		DomainFactory factory = getDomainFactory();
		String sql = "select summ from Summary as summ left join summ.careContext as cCtxt left join cCtxt.currentStatus as cStat where summ.dischargeLetterStatus.id = -1727 and summ.dischargeSupplementaryLetterStatus.id = -1821 and ( summ.tTAStatus = -2084 or summ.tTAStatus = -2075) and cStat.status not in (:id1)"; 
		List lst = factory.find(sql,new String[]{"id1"}, new Object[]{getDomLookup(CareContextStatus.CANCELLED)});		
		if(lst != null
			&& !lst.isEmpty())
		{
			System.out.println(new DateTime().toString() + ": No of results : " + lst.size());
			return EDischargeSTHKSummaryVoAssembler.createEDischargeSTHKSummaryVoCollectionFromSummary(lst);
		}
		return null;
	}
	
	public synchronized void doExecute(JobExecutionContext ctx, Date last, Date curr) throws Exception 
	{	
		String hostname = "";
		String ipAddress = "";
		long start = System.currentTimeMillis();
		
		try 
		{ 
			InetAddress addr 	 = InetAddress.getLocalHost();   
			hostname = addr.getHostName();											
		    ipAddress = addr.getHostAddress();		      
		} 
		catch (UnknownHostException err) 
		{ 
			throw new DomainRuntimeException(err.getMessage());			
		} 
		System.out.println("Executing " + ctx.getTrigger().getJobName() + " at: " + Calendar.getInstance().getTime() + " triggered by: hostname: " + hostname + "(" + ipAddress + ")");		
		
		try 
		{
			DischargeSummaryScheduleSTHKForm impl = (DischargeSummaryScheduleSTHKForm)DomainImplFlyweightFactory.getInstance().create(DischargeSummaryScheduleSTHKFormImpl.class, ims.domain.DomainSession.getSession());			
			
			DischargeSummaryScheduleVo jb = impl.getJob(ctx.getJobDetail().getName());
			if (jb != null)
			{
				printer = jb.getPrintAgentTo();
				
				if (jb.getJobTypeIsNotNull()
					&& jb.getJobType().equals(DischargeSummaryJobType.DISCHARGE_SUMMARY_REPORT))
				{
					System.out.println("Execute DSPrintReport");
					impl.executeDSPrintReport(jb);					
				}
				else if (jb.getJobTypeIsNotNull()
					&& jb.getJobType().equals(DischargeSummaryJobType.SUMMPLEMENTARY_REPORT))
				{
					System.out.println("Execute SUPPPrintReport");
					impl.executeSUPPPrintReport(jb);
				}
				
				System.out.println("Setting new Job details...");
				impl.setNewJob(impl.getJob(ctx.getJobDetail().getName()), ctx);
				System.out.println("Finish to set Job details!");
			}
		} 
		catch (InstantiationException err) 
		{
			throw new Exception(err);
		} 
		catch (IllegalAccessException err) 
		{				
			throw new Exception(err);
		} 
		catch (DomainInterfaceException err) 
		{			
			throw new Exception(err);
		}		
		
		long end = System.currentTimeMillis();
		System.out.println("Job was run successful in: " + + (end - start) + " ms" );		
	} 
	 
	private void execute(JobExecutionContext ctx, int maxExecutions) throws JobExecutionException
	{
		if (maxExecutions == 0)
		{
			System.out.println("Task execution failed 10 times. Exit!");
			return ;
		}
		
		long startExecutionTime = System.currentTimeMillis();		
		
		try 
		{
			JobDetail job = ctx.getJobDetail();			
			Date last = ctx.getTrigger().getPreviousFireTime();
			Calendar cal = Calendar.getInstance();
			Date curr = cal.getTime();
			
			System.out.println();
			System.out.println( job.getFullName() + " executes. Last run: " + last + " current: " + curr);
			
			System.out.println("Check if another job is running");
			
			while(true) 
			{				
				if (!running)
				{
					running = true;		
					System.out.println("No job running! Proced with doExecute()");
					doExecute(ctx, last, curr);
					
					break;
				}
				else
				{
					//If another thread is running try to retry for 60 seconds and after that exit
					long currentExecutionTime = System.currentTimeMillis();							
					if ((currentExecutionTime - startExecutionTime)/1000 >= 60)
					{		
						System.out.println("Try to retry for 60 sec and job cannot be run. Exit!");
						break;
					}
					
					System.out.println("Another job is running! Pause thread for 2 sec and retry");
					Thread.sleep(2000);
				}								
			}
			
			running = false;
		}
		catch (Exception exception)
		{
			LOG.error(exception);			
			
			running = false;			
			maxExecutions--;						
			execute(ctx, maxExecutions);
		} 	   
	}
	
	public void execute(JobExecutionContext ctx) throws JobExecutionException
	{
		execute(ctx, 10);
	}	
	
	public void setNewJob(DischargeSummaryScheduleVo oldBatch, JobExecutionContext ctx)
	{				
		DischargeSummaryScheduleVo batch = null;
		
		if (oldBatch == null) {
			batch = new DischargeSummaryScheduleVo();						
		}
		else {
			batch = oldBatch;
		}
		
		if( ctx.getTrigger() != null)
		{
			if (ctx.getTrigger().getPreviousFireTime() == null)
			{
				System.out.println("getPreviousFireTime() is null!");
			}
			if (ctx.getTrigger().getNextFireTime() == null)
			{
				System.out.println("getPreviousFireTime() is null!");
			}
			batch.setLastRun(ctx.getTrigger().getPreviousFireTime() != null?  new ims.framework.utils.DateTime(ctx.getTrigger().getPreviousFireTime()) : null);
			batch.setNextRun(ctx.getTrigger().getNextFireTime() != null?  new ims.framework.utils.DateTime(ctx.getTrigger().getNextFireTime()) : new DateTime());				
		}
		batch.setGeneratedLeettersNo(batch.getGeneratedLeettersNoIsNotNull() ? batch.getGeneratedLeettersNo() + generatedLetters : generatedLetters);
		batch.setPrintedLettersNo(batch.getPrintedLettersNoIsNotNull() ? batch.getPrintedLettersNo() + printedLetters : printedLetters);
		batch.setSuccessfulEmailsNo(batch.getSuccessfulEmailsNoIsNotNull() ? batch.getSuccessfulEmailsNo() + successfulSentEmail : successfulSentEmail);
		batch.setFailedEmailsNo(batch.getFailedEmailsNoIsNotNull() ? batch.getFailedEmailsNo() + failedSentEmail : failedSentEmail);
		batch.setFailedEmails(getSession().getAttribute("FailedEmails") != null ? (FailedEmailsDetailsVoCollection)getSession().getAttribute("FailedEmails")  : batch.getFailedEmails());
				
		printer = batch.getPrintAgentTo();
		
		DomainFactory factory = getDomainFactory();		
		try
		{
			factory.save(DischargeSummaryScheduleVoAssembler.extractDischargeSummarySchedule(factory, batch));
			
			getDomainFactory().getTransaction().commit();
			getDomainFactory().setTransaction(null);	
			
		}
		catch (StaleObjectException e) 
		{
			
		}				
	}
		 	
	public void executeDSPrintReport(DischargeSummaryScheduleVo job)
	{			
		EDischargeSTHKSummaryVoCollection summaries = getSTHKPatientDocuments();
		if (summaries != null && summaries.size() > 0)
		{
			System.out.println( "executeDSPrintReport " + summaries.size());
			try 
			{
				saveReports(summaries, job, "Discharge Summary Report", DocumentCategory.DISCHARGE_SUMMARY);
			}
			catch (Exception e) 
			{
				getDomainFactory().close();
			}
		}		
	}			
	
	public void executeSUPPPrintReport(DischargeSummaryScheduleVo job) 
	{			
		EDischargeSTHKSummaryVoCollection summaries = getSTHKSuppPatientDocuments();
		if (summaries != null && summaries.size() > 0)
		{
			try
			{
				saveReports(summaries, job, "Supplementary Report", DocumentCategory.DISCHARGE_SUPPLEMENTARY);
			}
			catch(Exception e)
			{
				getDomainFactory().close();					
			}
		}		
	}			
	
	public DischargeDetailsVo getDischargeDetailsForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContext is null or id not provided for getDischargeDetailsForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select dd from DischargeDetails as dd left join dd.careContext as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		DischargeDetailsVoCollection discharge = DischargeDetailsVoAssembler.createDischargeDetailsVoCollectionFromDischargeDetails(dischargeDetails);		
		
		return discharge != null && discharge.size() > 0 ? (discharge.get(0) != null ? discharge.get(0) : null) : null;
	}
	
	protected synchronized void saveReports(EDischargeSTHKSummaryVoCollection summaries, DischargeSummaryScheduleVo job, String docName, DocumentCategory category) throws Exception
	{		
		urlQueryServer 		= ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		urlReportServer 	= ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		urlPdfUploadServer 	= ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		pdfStorePath 		= ConfigFlag.GEN.PDF_STORE_PATH.getValue();
		printer = job.getPrintAgentTo();
		
		if (urlPdfUploadServer == "")
		{			
			throw new Exception("PDF_UPLOAD_URL flag need to be set");
		}		
				
		for (int i = 0; i < summaries.size(); i++) 
		{
			EDischargeSTHKSummaryVo summaryVo = summaries.get(i);	
			if (summaryVo != null
				&& summaryVo.isSummaryRecordComplete())
			{
				System.out.println("");
				System.out.println("");
				System.out.println("Generating new letter... ");
				System.out.println("CareContext ID: " + summaries.get(i).getCareContext().getID_CareContext());
				System.out.println("STHK Summary ID: " + summaries.get(i).getID_Summary());

				fileName = generateName() + ".pdf";											
										
				PatientEdischargeBatchVo patVo = getPatientEdischargeBatchViaCareContext(summaryVo.getCareContext());

				if (patVo == null
					|| ( ConfigFlag.UI.GENERATE_EDISCHARGE_DOCS_FOR_DEAD_PATIENTS.getValue() == false && patVo.getDodIsNotNull()))
				{	
					LOG.error("Patient is null or DOD has a value.");
					continue;
				}							
					
				PatientDocumentVo document = null;
				try
				{
					document = populatePatientDocumentVo(patVo, populateServetDocumentVo(), summaryVo, docName, category);

					String[] str = document.validate();		
					if (str != null && str.length > 0)
					{	
						LOG.error("PatientDocumentVo is not validate");
						continue;
					}							
							
					document = savePatientDocument(document);
							
					PatientDocumentVoCollection patientDocuments = summaryVo.getDischargeDocuments();
					if (patientDocuments == null)
						patientDocuments = new PatientDocumentVoCollection();
								
					patientDocuments.add(document);
					summaryVo.setDischargeDocuments(patientDocuments);																	
							
					if (category.equals(DocumentCategory.DISCHARGE_SUMMARY))
						summaryVo.setDischargeLetterStatus(DischargeLetterStatus.GENERATED);
					else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY))
						summaryVo.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.GENERATED);
							
					str = summaryVo.validate();		
					if (str != null && str.length > 0)
					{	
						LOG.error("DischargeReportDetailsVo is not validate");
						continue;
					}
					summaryVo = saveSummary(summaryVo);
							
					if (getDomainFactory() != null && getDomainFactory().getTransaction() != null)
					{
						getDomainFactory().getTransaction().commit();
						getDomainFactory().setTransaction(null);								
					}
					else
					{
						LOG.error("getDomainFactory or getDomainFactory().getTransaction() are null");
						continue;
					}
				}
				catch(StaleObjectException e)
				{		
					LOG.error(e.getMessage());
					System.out.println("StaleObjectException on saveSummary()! Continue with next record... ");
					getDomainFactory().getTransaction().rollback();
					getDomainFactory().setTransaction(null);
					continue;
				}
						
				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, null);
								
				String 	emailMsgTxt 	= "";
				String 	emailSubjectTxt = "";	
				Integer reportID 		= -1;
				if (category.equals(DocumentCategory.DISCHARGE_SUMMARY))
				{
					reportID = 247;
					emailMsgTxt = "Discharge Summary Report";
					emailSubjectTxt = " Discharge Summary Report";
					System.out.println("Discharge Summary Report set");
				}
				else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY))
				{
					reportID = 249;
					emailMsgTxt = "Supplementary Summary Report";
					emailSubjectTxt = "	Supplementary Summary Report";	
					System.out.println("Supplementary Summary Report set");
				}
						
				Object[] obj = getSystemReportAndTemplate(reportID);
				client.addSeed(new SeedValue("CARE_CONTEXT",  summaryVo.getCareContext().getID_CareContext(), Integer.class));
						
				if(obj == null || obj.length < 2) 
				{		
					LOG.error("getSystemReportAndTemplate return null");
					LOG.error("Rollback all changes");
					rollback(summaryVo, document, category);
							
					continue;
				}
						
				if(obj[0] == null || obj[1] == null) 
				{		
					LOG.error("getSystemReportAndTemplate return null");
					LOG.error("Rollback all changes");
					rollback(summaryVo, document, category);
					continue;
				}
						
				byte[] buffer = null;
				String message = "";
				try 	
				{							
					System.out.println("Report server URL:" + urlReportServer);
					System.out.println("Trying to build report...");
					long start = System.currentTimeMillis();
					buffer = client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 0);
					long end = System.currentTimeMillis();
					System.out.println("Report build successful in :" + (end - start) + " ms" );
					if (buffer == null || (buffer != null && buffer.length == 0)) 
						message = "Generated report size is zero";
				}
				catch (QueryBuilderClientException err) 
				{	
					if (message == "")
						message = err.getMessage();
														
					LOG.error("Build report failed!" + message);
					LOG.error("Rollback all changes");
					rollback(summaryVo, document, category);
					continue;
				}							
						
				try
				{
					long start = System.currentTimeMillis();
					System.out.println("Trying to upload report...");
					uploadFile(buffer, fileName,  pdfStorePath);
					long end = System.currentTimeMillis();
					System.out.println("File upload successful in :" + (end - start) + " ms" );							
				}
				catch(Exception e)
				{
					LOG.error("Upload file failed!" + e.getMessage());
					LOG.error("Rollback all changes");							
					rollback(summaryVo, document, category);
					continue;
				}
																		
				generatedLetters ++;						
						
				if(patVo.getGpIsNotNull()
					&& patVo.getGp().getID_GpIsNotNull()
					&& patVo.getGp().getEmail() != null)
				{	
					System.out.println("SubjectTxt 	  : " + emailSubjectTxt);
					System.out.println("MsgTxt 		  : " + emailMsgTxt);
					System.out.println("Attached file : " + pdfStorePath + filePath);
					System.out.println("FromAddress   : " + ConfigFlag.FW.SMTP_SENDER.getValue());
																					
					try
					{
						long start = System.currentTimeMillis();									
							
						new SendMail().sendSSLMessage(patVo.getGp().getEmail().getCommValue(), emailSubjectTxt,emailMsgTxt, pdfStorePath + filePath);									
						long end = System.currentTimeMillis();
						System.out.println("Email was sent successful in :" + (end - start) + " ms" );
									
						successfulSentEmail++;
					}
					catch (Exception err) 
					{	
						LOG.error(err.getMessage());
						System.out.println("Failed! Email was not sent successful");
						failedSentEmail++;			
						continue;																											
					}								
				}
				else if (patVo.getGp() == null
					|| patVo.getGp().getID_Gp() == null
					|| (patVo.getGp() != null 
						&& patVo.getGp().getID_GpIsNotNull()
						&& patVo.getGp().getEmail() == null) )
				{
					
					
					String localPrinter = getPrinter( summaryVo.getDischargeDetails() );
					try 
					{
						long start = System.currentTimeMillis();
						if (localPrinter == "")
							client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", printer, 1);
						else
						{
							client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", localPrinter, 1);
							System.out.println("Printer used : " + localPrinter);
						}
							
						long end = System.currentTimeMillis();
						System.out.println("Build report successful in :" + (end - start) + " ms" );			
					}
					catch (QueryBuilderClientException err) 
					{
						LOG.error("Build report failed!" + err.getMessage());
						LOG.error("Rollback all changes");
						rollback(summaryVo, document, category);
						continue;
					}				
											
					printedLetters++;
							
				}
			}
		}		
	}
	

	private String getPrinter(DischargeDetailsRefVo dischargeDetails) 
	{
		if(dischargeDetails == null 
			||	dischargeDetails.getID_DischargeDetails() == null)
			throw new CodingRuntimeException("DischargeDetailsRefVo is null or id not provided for getPrinter");	
		
		DomainFactory factory = getDomainFactory();
		DischargeDetails doDD = (DischargeDetails)factory.getDomainObject(DischargeDetails.class,dischargeDetails.getID_DischargeDetails());
		if (doDD.getDischargingWard() != null)
		{
			Location doLoc = (Location)factory.getDomainObject(Location.class,doDD.getDischargingWard().getId());
			PrinterVo voDefaultPrinter = LocationFullVoAssembler.create(doLoc).getDefaultPrinter();

			return voDefaultPrinter != null ? voDefaultPrinter.getName() : "";
		}
		return "";
	}

	private Patient getPatientForCareContext(CareContextRefVo careContext) 
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getPatientForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List pat = factory.find("select careSpell.patient rom CareSpell as careSpell left join careSpell.episodes as epis left join epis.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		PatientCollection patVo = PatientAssembler.createPatientCollectionFromPatient(pat);		
		
		return patVo != null && patVo.size() > 0 ? patVo.get(0) : null;
	}

	public String getSpecialtyForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getSpecialtyForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select eoc from EpisodeOfCare as eoc left join eoc.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		EpisodeofCareShortVoCollection eocVos = EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(dischargeDetails);		
		
		return eocVos != null && eocVos.size() > 0 ? ((eocVos.get(0) != null && eocVos.get(0).getSpecialtyIsNotNull()) ? eocVos.get(0).getSpecialty().toString() : "") : "";
	}

	
	//	wdev-13102
	public HcpRefVo getResponsibleHCPForCareContext(CareContextRefVo careContext)	
	{
		if(careContext == null ||
				careContext.getID_CareContext() == null)
		throw new CodingRuntimeException("CareContext is null or id not provided for getResponsibleHCPForCareContext");	
		
		DomainFactory factory = getDomainFactory();
		List dischargeDetails = factory.find("select eoc from EpisodeOfCare as eoc left join eoc.careContexts as cc where cc.id = :idCareContext", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		EpisodeofCareShortVoCollection eocVos = EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(dischargeDetails);		
		
		return eocVos != null && eocVos.size() > 0 ? ((eocVos.get(0) != null && eocVos.get(0).getResponsibleHCPIsNotNull()) ? eocVos.get(0).getResponsibleHCP() : null) : null;
	}
	
	private void rollback(EDischargeSTHKSummaryVo summaryVo, PatientDocumentVo document, DocumentCategory category) throws ForeignKeyViolationException, StaleObjectException 
	{		
		DomainFactory factory = getDomainFactory();
		
		Summary boSUMM = (Summary) factory.getDomainObject(Summary.class, summaryVo.getID_Summary());
		summaryVo =  EDischargeSTHKSummaryVoAssembler.create(boSUMM);
		
		PatientDocumentVoCollection documents = summaryVo.getDischargeDocuments();
		documents.remove(document);
		summaryVo.setDischargeDocuments(documents);				
				
		if (category.equals(DocumentCategory.DISCHARGE_SUMMARY))
			summaryVo.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);
		else if (category.equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY)) 
			summaryVo.setDischargeSupplementaryLetterStatus(DischargeSupplementaryLetterStatus.REQUIRED);
		
		String[] str = summaryVo.validate();		
		if (str != null && str.length > 0)
		{		
			LOG.error("summaryVo is not validate");
			return;
		}
			
		summaryVo = saveSummary(summaryVo);
		try
		{
			deletePatientDocument(document);
		}
		catch(Exception e)
		{
			throw new StaleObjectException(null);
		}
		
		getDomainFactory().getTransaction().commit();
		getDomainFactory().setTransaction(null);								
	}

	private String generateName() throws Exception
	  {	
		  String str = "";
		  
		  try
		  {
			  //Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  //Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  //Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      //Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      //Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException err)
		  {
			  throw new Exception(err);	
		  }
		  
		  return str;
	}	
		
	private ServerDocumentVo populateServetDocumentVo() 
	{
		ServerDocumentVo vo = new ServerDocumentVo();
		DateTime startDate = new ims.framework.utils.DateTime();								
		filePath =  startDate.getDate().getYear()+ "/" +startDate.getDate().getMonth() + "/" + startDate.getDate().getDay() + "/" + fileName;	
		vo.setFileName(filePath);
		vo.setFileType(FileType.PDF);						
		
		return vo;		
	}	
		
	private PatientDocumentVo populatePatientDocumentVo(PatientEdischargeBatchVo patVo, ServerDocumentVo serverDocumentVo, EDischargeSTHKSummaryVo summaryVo, String docName, DocumentCategory category)
	{		
		if (summaryVo != null)
		{
			if (summaryVo.getCareContextIsNotNull())
			{
				PatientDocumentVo vo = new PatientDocumentVo();
				vo.setPatient(patVo);					
				vo.setCareContext(summaryVo.getCareContext());					
							
				vo.setName(docName);
				vo.setServerDocument(serverDocumentVo);
				vo.setCreationType(DocumentCreationType.GENERATED);						
				vo.setCategory(category);
					
				vo.setRecordingUser(getMosUser() != null ? (MemberOfStaffLiteVo) getMosUser() : null);
				vo.setRecordingDateTime(new DateTime());
				vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
				vo.setResponsibleHCP(getResponsibleHCPForCareContext(summaryVo.getCareContext()));
				
				return vo;					
			}			
		}
		
		return null;	
	}		
	
	public String uploadFile(byte[] file, String fileName, String localFolder) throws Exception
	{		
		if(ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() == null || ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue().length() == 0)
		{
			throw new Exception("ConfigFlag GEN.FILE_UPLOAD_DIR is null");			
		}
		
		HttpClient conn = null;	  				
		StringBuffer sb = new StringBuffer(500);
		PostMethod filePost = new PostMethod(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue());		

		conn = new HttpClient(new MultiThreadedHttpConnectionManager());

		conn.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);		
		conn.getParams().setBooleanParameter(HttpMethodParams.USE_EXPECT_CONTINUE, true);
		conn.getParams().setIntParameter(HttpMethodParams.BUFFER_WARN_TRIGGER_LIMIT, MAX_BUFFER_LIMIT_NO_WARNING);

		Part[] data = 
		{
		    new StringPart("name", localFolder), 
		    new StringPart("filename", fileName),	           
		    new FilePart(fileName, new ByteArrayPartSource(fileName, file))	           
		};
		  		
		filePost.setRequestEntity(new MultipartRequestEntity(data, filePost.getParams()));

	    int iGetResultCode;
		try
		{
			iGetResultCode = conn.executeMethod(filePost);

			if (iGetResultCode == HttpStatus.SC_OK) 
			{
				sb.append("Upload complete, status	=	" + iGetResultCode);
				sb.append("\nUpload complete, response	=	" + HttpStatus.getStatusText(iGetResultCode));
				sb.append("\nUpload complete, response	=	" + filePost.getResponseBodyAsString());				
				LOG.info(sb.toString());

				if (filePost.getResponseBodyAsString() != null &&
						filePost.getResponseBodyAsString().length() != 0 &&
							filePost.getResponseBodyAsString() != "")
				{
					return parse(filePost.getResponseBodyAsString());
				}				
			}
			else 
			{
				sb.append("Upload failed, status	=	" + iGetResultCode);
				sb.append("Upload failed, response=" + HttpStatus.getStatusText(iGetResultCode));
				sb.append("Upload failed, response=" + filePost.getResponseBodyAsString());
				LOG.info(sb.toString());
				
				throw new Exception(sb.toString());
			}
		} 
		catch (HttpException e)
		{			 			 
			throw new Exception(e);
		} 
		catch (IOException e)
		{			
			throw new Exception(e);
		}
		finally
		{
			filePost.releaseConnection();
		}		

	  	return null;		
	}	
	
	private String parse(String xml)
	{
		if (xml == null)
			return null;
		
		return (xml.split("\""))[1];	
	}
		
	private class SendMail 
	{
		private SendMail()
		{
			Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
			
			SMTP_HOST_NAME 		= ConfigFlag.FW.SMTP_SERVER.getValue();
			SMTP_PORT 			= ConfigFlag.FW.SMTP_PORT.getValue();
			SMTP_AUTH 			= ConfigFlag.FW.SMTP_AUTH.getValue();
			emailFromAddress 	= ConfigFlag.FW.SMTP_SENDER.getValue();	
		}
				
		public void sendSSLMessage(String recipient, String subject, String message, String atach) throws MessagingException 
		{
			System.out.println("Send email to: " + recipient + " with subject :" + subject + " and message : " + message + " and attach file: " + atach);
			
			boolean debug = false;									
			Properties props = new Properties();
			props.put("mail.host", SMTP_HOST_NAME);
			props.put("mail.smtp.auth", "true");
			props.put("mail.debug", "false");
			props.put("mail.smtp.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.fallback", "false");

			Session session = Session.getDefaultInstance(props,
			new javax.mail.Authenticator() 
			{
				protected PasswordAuthentication getPasswordAuthentication() 
				{
					String[] auth = SMTP_AUTH.split(":");
					return new PasswordAuthentication(auth[0], auth[1]);
				}
			});

			session.setDebug(debug);

			Message msg = new MimeMessage(session);
			InternetAddress addressFrom = new InternetAddress(emailFromAddress);
			msg.setFrom(addressFrom);

			InternetAddress addressTo = new InternetAddress(recipient);
			msg.setRecipient(Message.RecipientType.TO, addressTo);

			//Setting the Subject and Content Type
			msg.setSubject(subject);
			msg.setContent(message, "text/plain");
			
			//create and fill the first message part
			MimeBodyPart firstMsgBodyPart = new MimeBodyPart();
			firstMsgBodyPart.setText(subject);

			// create the second message part
			MimeBodyPart secondMsgBodyPart = new MimeBodyPart();

		    // attach the file to the message
			FileDataSource fds = new FileDataSource(atach);
			secondMsgBodyPart.setDataHandler(new DataHandler(fds));
			secondMsgBodyPart.setFileName(fds.getName());

			//create the Multipart and add its parts to it
			Multipart mp = new MimeMultipart();
			mp.addBodyPart(firstMsgBodyPart);
			mp.addBodyPart(secondMsgBodyPart);

			//add the Multipart to the message
			msg.setContent(mp);

			//set the Date: header
			msg.setSentDate(new Date());

			Transport tr = session.getTransport("smtp");
			tr.connect(SMTP_HOST_NAME, SMTP_PORT, null, null);
			msg.saveChanges();
			tr.sendMessage(msg, msg.getAllRecipients());
			tr.close();
		}
	}

	public void removeTask(DischargeSummaryJobType jobType) throws ForeignKeyViolationException 
	{
		DomainFactory factory 			= getDomainFactory();
		ArrayList<String> markers 		= new ArrayList<String>();
		ArrayList<Serializable> values 	= new ArrayList<Serializable>();		
		
		String sql = "from DischargeSummarySchedule as dss where dss.jobType = :id";         		
		markers.add("id");			
		values.add(getDomLookup(jobType));
		
		List jobs = factory.find(sql.toString(), markers, values);	
		if (jobs.size() > 0) {
			factory.delete((DischargeSummarySchedule) jobs.get(0));
		}
	}

	public DischargeSummaryScheduleVoCollection getJobs() 
	{
		DomainFactory factory = getDomainFactory();
		String sql = "from DischargeSummarySchedule";         		
		List jobs = factory.find(sql);
		if (jobs.size() > 0) {
			return DischargeSummaryScheduleVoAssembler.createDischargeSummaryScheduleVoCollectionFromDischargeSummarySchedule(jobs);
		}
		
		return null;		
	}		

	public DischargeSummaryScheduleVo getJob(String jobDesc) 
	{
		DomainFactory factory = getDomainFactory();
		String sql = "from DischargeSummarySchedule";         		
		List jobs = factory.find(sql);
		if (jobs.size() > 0)
		{
			for (int i = 0 ; i < jobs.size(); i ++)
			{
				DischargeSummaryScheduleVo voDSS = DischargeSummaryScheduleVoAssembler.create((DischargeSummarySchedule) jobs.get(i));

				StringBuffer sb = new StringBuffer();				
				sb.append(voDSS.getJobType().getText().toString());

				if (jobDesc.equals(sb.toString())) {
					return voDSS;
				}
			}
		}
		
		return null;		
	}

	public DischargeReportDetailVoCollection getPatientDocuments() 
	{
		// TODO Auto-generated method stub
		return null;
	}

	public PatientEdischargeBatchVo getPatientEdischargeBatchViaCareContext(CareContextRefVo careContext) 
	{
		DomainFactory factory = getDomainFactory();
		List lst = factory.find("select p from CareContext as cc left join cc.episodeOfCare as eoc left join eoc.careSpell as cs left join cs.patient as p where (cc.id = :idCareContext)", new String[]{"idCareContext"}, new Object[]{careContext.getID_CareContext()});
		if (lst != null && lst.size() > 0)
			return PatientEdischargeBatchVoAssembler.create((ims.core.patient.domain.objects.Patient) lst.get(0));
		
		return null;
	}
		

	/*public class SMTPMXLookup 
	{
	   private int hear( BufferedReader in ) throws IOException 
	   {
	     String line = null;
	     int res = 0;

	     while ( (line = in.readLine()) != null ) 
	     {
	         String pfx = line.substring( 0, 3 );
	         try 
	         {
	            res = Integer.parseInt( pfx );
	         }
	         catch (Exception ex) 
	         {
	            res = -1;
	         }
	         if ( line.charAt( 3 ) != '-' ) break;
	     }

	     return res;
	   }

	   private void say( BufferedWriter wr, String text ) throws IOException 
	   {
	     wr.write( text + "\r\n" );
	     wr.flush();

	     return;
	   }
	   
	   private ArrayList getMX(String hostName) throws NamingException 
	   {
	     // Perform a DNS lookup for MX records in the domain
	     Hashtable env = new Hashtable();
	     env.put("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");
	     DirContext ictx = new InitialDirContext( env );
	     Attributes attrs = ictx.getAttributes( hostName, new String[] { "MX" });
	     Attribute attr = attrs.get( "MX" );

	     // if we don't have an MX record, try the machine itself
	     if (( attr == null ) || ( attr.size() == 0 )) 
	     {
	       attrs = ictx.getAttributes( hostName, new String[] { "A" });
	       attr = attrs.get( "A" );
	       if( attr == null )
	    	   throw new NamingException("No match for name '" + hostName + "'");
	     }
	         // Huzzah! we have machines to try. Return them as an array list
	     // NOTE: We SHOULD take the preference into account to be absolutely
	     //   correct. This is left as an exercise for anyone who cares.
	     ArrayList res = new ArrayList();
	     NamingEnumeration en = attr.getAll();

	     while ( en.hasMore() ) 
	     {
	        String mailhost;
	        String x = (String) en.next();
	        String f[] = x.split( " " );
	        //  THE fix *************
	        if (f.length == 1)
	            mailhost = f[0];
	        else if ( f[1].endsWith( "." ) )
	            mailhost = f[1].substring( 0, (f[1].length() - 1));
	        else
	            mailhost = f[1];
	        //  THE fix *************            
	        res.add( mailhost );
	     }
	     return res;
	   }

	   public boolean isAddressValid( String address ) 
	   {
	     // Find the separator for the domain name
	     int pos = address.indexOf( '@' );

	     // If the address does not contain an '@', it's not valid
	     if ( pos == -1 ) return false;

	     // Isolate the domain/machine name and get a list of mail exchangers
	     String domain = address.substring( ++pos );
	     ArrayList mxList = null;
	     try 
	     {
	        mxList = getMX( domain );
	     }
	     catch (NamingException ex) 
	     {
	        return false;
	     }

	     // Just because we can send mail to the domain, doesn't mean that the
	     // address is valid, but if we can't, it's a sure sign that it isn't
	     if ( mxList.size() == 0 ) return false;

	     // Now, do the SMTP validation, try each mail exchanger until we get
	     // a positive acceptance. It *MAY* be possible for one MX to allow
	     // a message [store and forwarder for example] and another [like
	     // the actual mail server] to reject it. This is why we REALLY ought
	     // to take the preference into account.
	     for ( int mx = 0 ; mx < mxList.size() ; mx++ ) 
	     {
	         boolean valid = false;
	         try {
	             int res;
	             //
	             Socket skt = new Socket( (String) mxList.get( mx ), 25 );
	             
	             BufferedReader rdr = new BufferedReader
	                ( new InputStreamReader( skt.getInputStream() ) );
	             BufferedWriter wtr = new BufferedWriter
	                ( new OutputStreamWriter( skt.getOutputStream() ) );

	             res = hear( rdr );
	             if ( res != 220 ) throw new Exception( "Invalid header" );
	             say( wtr, "EHLO rgagnon.com" );

	             res = hear( rdr );
	             if ( res != 250 ) throw new Exception( "Not ESMTP" );

	             // validate the sender address              
	             say( wtr, "MAIL FROM: <tim@orbaker.com>" );
	             res = hear( rdr );
	             if ( res != 250 ) throw new Exception( "Sender rejected" );

	             say( wtr, "RCPT TO: <" + address + ">" );
	             res = hear( rdr );

	             // be polite
	             say( wtr, "RSET" ); hear( rdr );
	             say( wtr, "QUIT" ); hear( rdr );
	             if ( res != 250 )
	                throw new Exception( "Address is not valid!" );

	             valid = true;
	             rdr.close();
	             wtr.close();
	             skt.close();
	         }
	         catch (Exception ex) {
	           // Do nothing but try next host
	           ex.printStackTrace();
	         }
	         finally {
	           if ( valid ) return true;
	         }
	     }
	     return false;
	   }	 
	} */ 
	
}
