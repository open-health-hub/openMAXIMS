//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.23 build 50321.1100)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.vo.AppFormVoCollection;
import ims.admin.vo.FormReportVo;
import ims.admin.vo.FormReportVoCollection;
import ims.admin.vo.ReportSeedVoCollection;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.admin.vo.ReportsCategoryListVoCollection;
import ims.admin.vo.ReportsCategoryLiteVoCollection;
import ims.admin.vo.domain.AppFormVoAssembler;
import ims.admin.vo.domain.ReportSeedVoAssembler;
import ims.admin.vo.domain.ReportVoAssembler;
import ims.admin.vo.domain.ReportsCategoryListVoAssembler;
import ims.admin.vo.domain.ReportsCategoryLiteVoAssembler;
import ims.core.admin.domain.objects.FormReportBo;
import ims.core.admin.domain.objects.ReportBo;
import ims.core.admin.vo.ReportsCategoryRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.domain.DomainFactory;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


public class FormReportsImpl extends DomainImpl implements ims.admin.domain.FormReports, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	/**
	* List all reports in the system
	*/
	@SuppressWarnings("unchecked")
	public ims.admin.vo.ReportVoCollection listReports()
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from ReportBo rep where rep.isActive = :ACTIVE";
		List reports = factory.find(hqlString, new String[] {"ACTIVE"}, new Object[] {Boolean.TRUE});
		return ReportVoAssembler.createReportVoCollectionFromReportBo(reports);
	} 

	/**
	* List reports assigned to a Form
	*/
	@SuppressWarnings("unchecked")
	public ims.admin.vo.ReportVoCollection listAssignedReports(Integer formId)
	{
		DomainFactory factory = getDomainFactory();
		ims.admin.vo.ReportVoCollection collection = new ims.admin.vo.ReportVoCollection();
		
		List reps = factory.find("from FormReportBo fr where fr.form.id = :formId and fr.report.isActive = :isActive", new String[]{"formId", "isActive"}, new Object[]{formId, Boolean.TRUE});
		if (reps != null && !reps.isEmpty())
		{
			for (Iterator iter = reps.iterator(); iter.hasNext();) 
			{
				FormReportBo element = (FormReportBo) iter.next();
				collection.add(ReportVoAssembler.create(element.getReport()));
			}			
		}		
		return collection;
	}

	public Integer saveAssignedReports(Integer formId, FormReportVoCollection formRepColl)  throws StaleObjectException, ForeignKeyViolationException
	{
		DomainFactory factory = getDomainFactory();

		factory.delete("from FormReportBo fr where fr.form.id = " + formId);
		
		for (int i = 0; i < formRepColl.size(); i++)
		{
			FormReportVo vo = formRepColl.get(i);
			FormReportBo bo = new FormReportBo();
			ReportBo doRep = (ReportBo)factory.getDomainObject(ReportBo.class, vo.getReport().getID_ReportBo());
			AppForm doForm = (AppForm)factory.getDomainObject(AppForm.class, formId);
			bo.setForm(doForm);
			bo.setReport(doRep);
			factory.save(bo);
		}		
		return new Integer(formRepColl.size());
	}

	@SuppressWarnings("unchecked")
	public ReportSeedVoCollection getReportSeeds(ReportVo reportVo) 
	{
		DomainFactory factory = getDomainFactory();
		ReportBo rep = (ReportBo)factory.getDomainObject(ReportBo.class, reportVo.getID_ReportBo());
		
		if (rep != null)
		{
			Set seeds = rep.getSeeds();
			return ReportSeedVoAssembler.createReportSeedVoCollectionFromReportSeedBo(seeds);
			
		}
		return null;
	}

	@SuppressWarnings("unchecked")
	public AppFormVoCollection listFormsByName(String formName)
	{
		// Similar to FormHelpImpl method, though this includes dialogs
		
		if (formName == null)
			throw new CodingRuntimeException("Cannot search on null Form Name!");
		
		DomainFactory factory = getDomainFactory();
		/*
		String hql = " from AppForm app where app.isAlias != true and app.isComponent != true and app.namespace is not null " +
			" and app.name like :formName";*/
		String hql = " from AppForm app where app.isComponent != true and app.namespace is not null " +
		" and upper(app.name) like upper(:formName)";
		
		if (formName.indexOf("%") == -1)
			formName += "%";
		List lst = factory.find(hql, new String[]{"formName"}, new Object[]{formName});
		return AppFormVoAssembler.createAppFormVoCollectionFromAppForm(lst);
		
	}

	@SuppressWarnings("unchecked")
	public ReportsCategoryListVoCollection searchCategories(String reportName, String templateName, ReportsCategoryRefVo categoryRef)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("select distinct cat from ReportsCategory as cat left join cat.reports as rep left join rep.templates as tpl ");
		
		cond.append(andStr + "rep.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "rep.reportName like :reportName");
		markers.add("reportName");
		values.add(reportName);
		andStr = " and ";
		
		cond.append(andStr + "tpl.name like :templateName");
		markers.add("templateName");
		values.add(templateName);
		andStr = " and ";
		
		if(categoryRef != null && categoryRef.getID_ReportsCategoryIsNotNull())
		{
			cond.append(andStr + "cat.id = :catId");
			markers.add("catId");
			values.add(categoryRef.getID_ReportsCategory());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);

		return ReportsCategoryListVoAssembler.createReportsCategoryListVoCollectionFromReportsCategory(list).sort();
	}

	@SuppressWarnings("unchecked")
	public ReportsCategoryLiteVoCollection searchCategoryByName(String categoryName)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("from ReportsCategory as cat ");
		
		cond.append(andStr + "upper(cat.name) like :categoryName");					//wdev-14251
		markers.add("categoryName");
		values.add(categoryName.toUpperCase());										//wdev-14251	
		andStr = " and ";
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		hql.append(" order by cat.name");
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);

		return ReportsCategoryLiteVoAssembler.createReportsCategoryLiteVoCollectionFromReportsCategory(list);
	}

	@SuppressWarnings("unchecked")
	public ReportVoCollection searchReports(String reportName, String templateName, ReportsCategoryRefVo categoryRef)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("select rep from ReportsCategory as cat right join cat.reports as rep left join rep.templates as tpl ");
		
		cond.append(andStr + "rep.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "upper(rep.reportName) like :reportName");		//wdev-14251
		markers.add("reportName");
		values.add(reportName.toUpperCase());								//wdev-14251
		andStr = " and ";
		
		cond.append(andStr + "upper(tpl.name) like :templateName");			//wdev-14251
		markers.add("templateName");
		values.add(templateName.toUpperCase());								//wdev-14251									
		andStr = " and ";
		
		if(categoryRef != null && categoryRef.getID_ReportsCategoryIsNotNull())
		{
			cond.append(andStr + "cat.id = :catId");
			markers.add("catId");
			values.add(categoryRef.getID_ReportsCategory());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);
		return ReportVoAssembler.createReportVoCollectionFromReportBo(list).sort();
	}

}
