//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.53 build 2641.19803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.base.impl.BaseDeployReportsImpl;
import ims.admin.vo.domain.SystemReportVoAssembler;
import ims.configuration.EnvironmentConfig;
import ims.core.admin.domain.objects.FormReportBo;
import ims.core.admin.domain.objects.ReportBo;
import ims.core.admin.domain.objects.ReportSeedBo;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.AppSite;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.utils.DateTime;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;
import org.dom4j.tree.DefaultElement;

import com.ims.query.builder.client.ReportTemplateManifest;

public class DeployReportsImpl extends BaseDeployReportsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listSystemReports
	*/
	@SuppressWarnings("rawtypes")
	public ims.admin.vo.SystemReportVoCollection listSystemReports()
	{
		DomainFactory factory = getDomainFactory();
		String hqlString = "from ReportBo as rep where rep.imsId is not null order by rep.reportName";
		List reports = factory.find(hqlString);
		return SystemReportVoAssembler.createSystemReportVoCollectionFromReportBo(reports);
	}

	/**
	* deployReport
	 * @throws ForeignKeyViolationException 
	*/
	@SuppressWarnings({"unchecked", "rawtypes"})
	public String deployReport(ims.admin.vo.SystemReportVo sysReport) throws ims.domain.exceptions.StaleObjectException, ForeignKeyViolationException
	{
		boolean deployedQuery = false;
		boolean deployedTemplate = false;
		
		if (sysReport == null)
			throw new DomainRuntimeException("Can't deploy a null report !");

		String path = EnvironmentConfig.getBaseUri();
		String fileSep = System.getProperty("file.separator");
		String customerFolder = getSiteName();
		//WDEV-12195
		String pathFirst = "";
		
		//WDEV-16060
		StringBuilder sb = new StringBuilder();
		DateTime now = new DateTime();
		ReportTemplateManifest manifest = new ReportTemplateManifest();
		
		if(!path.endsWith(fileSep))
			path += fileSep;
		
		path += "reports" + fileSep;
		
		if(customerFolder.length() > 0)
			pathFirst = path + customerFolder + fileSep;

		String firstFileName = pathFirst + sysReport.getExportFileName();
		String fileName = path + sysReport.getExportFileName();
		
		File file = new File(firstFileName);
		
		if(file.exists())
		{
			fileName = firstFileName; //will load the report from customer folder
		}
		
		byte[] rep = null;
		try
		{
			rep = readFile(fileName);
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		
		ReportBo reportFromFile = null;
		ArrayList forms = new ArrayList();
		try
		{
			reportFromFile = deserializeReportFromXml(new String(rep), forms);
		}
		catch (DocumentException e)
		{
			e.printStackTrace();
			return e.toString();
		}
		
		String err = null;
		try
		{
			err = validateReport(reportFromFile.getReportXml());
		}
		catch (DocumentException e)
		{
			e.printStackTrace();
			err = e.toString();
		}
		
		if(err != null)
			return err;
		
		DomainFactory factory = getDomainFactory();
		ReportBo domReport = (ReportBo) factory.getDomainObject(ReportBo.class, sysReport.getID_ReportBo());
		
		if(!domReport.getImsId().equals(reportFromFile.getImsId()))
		{
			return "ImsId field doesn't match for report '" + sysReport.getExportFileName() + "' !\r\nDatabase value: " + domReport.getImsId() + "\r\nFile value: " + reportFromFile.getImsId();
		}

		//WDEV-16060
		sb.append("Report deployment: " + domReport.getReportName());
		sb.append("\n----------------------------------------------------------------------\n");
		sb.append("Deployment type: MAXIMS");
		sb.append("\n");
		sb.append("Report deployed from '" + fileName + "' file.");
		sb.append("\n");
		sb.append("Report's IMS ID: " + domReport.getImsId() + "");
		sb.append("\n");
		sb.append("Original report manifest: ");
		manifest.extractReportInfoFromXml(domReport.getReportXml(), sb);
		
		if(domReport.getTemplates() != null && domReport.getTemplates().size() == 1 && reportFromFile.getTemplates() != null && reportFromFile.getTemplates().size() == 1)
		{
			if(!domReport.isQueryEditable() || domReport.getReportXml() == null || domReport.getReportXml().length() == 0)
			{
				domReport.getSeeds().clear();
				factory.save(domReport);
			
				domReport.setReportName(reportFromFile.getReportName());
				domReport.setReportDescription(reportFromFile.getReportDescription());
				domReport.setReportXml(reportFromFile.getReportXml());
				domReport.getSeeds().addAll(reportFromFile.getSeeds());
				
				sb.append("Deployed report manifest: ");
				manifest.extractReportInfoFromXml(reportFromFile.getReportXml(), sb);
				
				deployedQuery = true;
			}
			
			if(!domReport.isTemplateEditable())
			{
				String origTemplateType = "";
				String origTemplateManifest = "";
				
				Iterator it = domReport.getTemplates().iterator();
				while(it.hasNext())
				{
					TemplateBo t = (TemplateBo)it.next();
					
					TemplateBo fileTemplate = (TemplateBo) reportFromFile.getTemplates().iterator().next();
					
					origTemplateType = manifest.getTemplateType(t.getTemplateXml());
					origTemplateManifest = manifest.extractTemplateInfoFromXml(t.getTemplateXml());
					
					t.setReport(domReport);
					t.setDescription(fileTemplate.getDescription());
					t.setIsActive(fileTemplate.isIsActive());
					t.setName(fileTemplate.getName());
					t.setTemplateXml(fileTemplate.getTemplateXml());
					
					t.setLastDeployment(now.getJavaDate());
					t.setLastUpdated(now.getJavaDate());
					
					sb.append("\nDeployed template: " + t.getName() + "");
					sb.append("\n----------------------------------------------------------------------\n");
					sb.append("Original template type: " + origTemplateType);
					sb.append("\n");
					sb.append("Original template manifest: " + origTemplateManifest);
					sb.append("Deployed template type: " + manifest.getTemplateType(t.getTemplateXml()) + "");
					sb.append("\n");
					sb.append("Deployed template manifest: " + manifest.extractTemplateInfoFromXml(fileTemplate.getTemplateXml()));
					
					deployedTemplate = true;
				}
			}
		}
		else
		{
			int domTemplates = domReport.getTemplates().size();
			
			if(!domReport.isQueryEditable() || domReport.getReportXml() == null || domReport.getReportXml().length() == 0)
				domReport.getSeeds().clear();
			
			//WDEV-12189
			//if(!domReport.isTemplateEditable())
				//domReport.getTemplates().clear();
			
			factory.save(domReport);
			
			if(!domReport.isQueryEditable() || domReport.getReportXml() == null || domReport.getReportXml().length() == 0)
			{
				domReport.setReportName(reportFromFile.getReportName());
				domReport.setReportDescription(reportFromFile.getReportDescription());
				domReport.setReportXml(reportFromFile.getReportXml());
				domReport.getSeeds().addAll(reportFromFile.getSeeds());
				
				sb.append("Deployed report manifest: ");
				manifest.extractReportInfoFromXml(reportFromFile.getReportXml(), sb);
				
				deployedQuery = true;
			}
			
			if(!domReport.isTemplateEditable() || domTemplates == 0)
			{
				if(domTemplates == 0)
				{
					//WDEV-12189 - if there is no templates in the DB we add them all from .REP file
					domReport.getTemplates().addAll(reportFromFile.getTemplates());

					Iterator itFromFile = reportFromFile.getTemplates().iterator();
					while(itFromFile.hasNext())
					{
						TemplateBo tFile = (TemplateBo)itFromFile.next();
					
    					sb.append("\nDeployed template (new template added from file): " + tFile.getName() + "");
    					sb.append("\n----------------------------------------------------------------------\n");
    					sb.append("Deployed template type: " + manifest.getTemplateType(tFile.getTemplateXml()) + "");
    					sb.append("\n");
    					sb.append("Deployed template manifest: " + manifest.extractTemplateInfoFromXml(tFile.getTemplateXml()));
					}					
				}
				else
				{
					//WDEV-12189 - we try to match the template names, if they match we do an update
					//otherwise we just add the template from .REP file to the report's template collection
					Iterator itFromFile = reportFromFile.getTemplates().iterator();
					while(itFromFile.hasNext())
					{
						TemplateBo tFile = (TemplateBo)itFromFile.next();
						
						boolean found = false;
						Iterator itDom = domReport.getTemplates().iterator();
						while(itDom.hasNext())
						{
							TemplateBo tDom = (TemplateBo)itDom.next();

							String origTemplateType = manifest.getTemplateType(tDom.getTemplateXml());
							String origTemplateManifest = manifest.extractTemplateInfoFromXml(tDom.getTemplateXml());
							
							if(tDom.getName() != null && tDom.getName().equalsIgnoreCase(tFile.getName()))
							{
								//template names do match, we do an update
								tDom.setReport(domReport);
								tDom.setDescription(tFile.getDescription());
								tDom.setIsActive(tFile.isIsActive());
								tDom.setName(tFile.getName());
								tDom.setTemplateXml(tFile.getTemplateXml());
								
								tDom.setLastDeployment(now.getJavaDate());
								tDom.setLastUpdated(now.getJavaDate());
								
								found = true;
								
								sb.append("\nDeployed template: " + tFile.getName() + "");
								sb.append("\n----------------------------------------------------------------------\n");
								sb.append("Original template type: " + origTemplateType);
								sb.append("\n");
								sb.append("Original template manifest: " + origTemplateManifest);
								sb.append("Deployed template type: " + manifest.getTemplateType(tFile.getTemplateXml()) + "");
								sb.append("\n");
								sb.append("Deployed template manifest: " + manifest.extractTemplateInfoFromXml(tFile.getTemplateXml()));
								
								break;
							}
						}

						if(!found)
						{
							//template names don't match, we do an insert
							tFile.setLastDeployment(now.getJavaDate());
							domReport.getTemplates().add(tFile);
							
							sb.append("\nDeployed template (new template added from file): " + tFile.getName() + "");
							sb.append("\n----------------------------------------------------------------------\n");
							sb.append("Deployed template type: " + manifest.getTemplateType(tFile.getTemplateXml()) + "");
							sb.append("\n");
							sb.append("Deployed template manifest: " + manifest.extractTemplateInfoFromXml(tFile.getTemplateXml()));
						}
					}
				}
			
				Iterator it = domReport.getTemplates().iterator();
				while(it.hasNext())
				{
					TemplateBo t = (TemplateBo)it.next();
					t.setReport(domReport);
					
					t.setLastDeployment(now.getJavaDate());
					t.setLastUpdated(now.getJavaDate());
				}
				
				deployedTemplate = true;
			}
		}
		
		if(deployedQuery)
		{
			domReport.setLastDeployment(now.getJavaDate());
			domReport.setLastUpdated(now.getJavaDate());
		}
		
		factory.save(domReport);
		
		if(deployedQuery || deployedTemplate)
		{
			createSystemLogEntry(SystemLogType.DEPLOY_REPORTS, SystemLogLevel.INFORMATION, sb.toString());			
		}
		
		if(!domReport.isQueryEditable() || domReport.getReportXml() == null || domReport.getReportXml().length() == 0)
		{
			List frList = factory.find("from FormReportBo as fr where fr.report.id = :REPID", new String[] {"REPID"}, new Object[] {domReport.getId()});
			
			for (Iterator iter = frList.iterator(); iter.hasNext();)
			{
				FormReportBo element = (FormReportBo) iter.next();
				
				factory.delete(element);
			}
			
			for (int i = 0; i < forms.size(); i++)
			{
				FormReportBo formReportBo = new FormReportBo();
				
				formReportBo.setReport(domReport);
				formReportBo.setForm((AppForm)factory.getDomainObject(AppForm.class, (Integer)forms.get(i)));
				
				factory.save(formReportBo);
			}
		}
		
		if(deployedQuery == false && deployedTemplate == false)
			return "__";
		else if(deployedQuery == true && deployedTemplate == false)
			return "Q_";
		else if(deployedQuery == false && deployedTemplate == true)
			return "_T";
		else 
			return "QT";
	}

	@SuppressWarnings("rawtypes")
	public String getSiteName() 
	{
		DomainFactory factory = getDomainFactory();	
		
		List list = factory.find("from AppSite");
		

		if(list.size() > 1)
		{
			createSystemLogEntry(SystemLogType.REPORTS, SystemLogLevel.ERROR, "There is more than 1 record in core_appsite table !");
			throw new ims.domain.exceptions.DomainRuntimeException("There is more than 1 record in core_appsite table !");
		}
		
		if(list.size() == 1)
		{
			AppSite appSite = (AppSite) list.get(0);
			
			if(appSite != null && appSite.getSite() != null)
				return appSite.getSite().getText();
		}
		
		return "";
	}

	@SuppressWarnings({"unchecked", "rawtypes"})
	private ReportBo deserializeReportFromXml(String reportXml, ArrayList forms) throws DocumentException
	{
		ReportBo report = new ReportBo();
		
		Document maindoc = getXmlDocument(reportXml);

		//parse seeds
		Node root = maindoc.selectSingleNode("fullreport");

		report.setReportName(root.valueOf("name"));
		report.setReportDescription(root.valueOf("description"));
		report.setExportFileName(root.valueOf("file"));
		
		String imsId = root.valueOf("imsid");
		if(imsId == null || imsId.length() == 0)
			imsId = "0";
		report.setImsId(Integer.valueOf(imsId));
		
		if(root.valueOf("isactive") != null && root.valueOf("isactive").length() > 0)
			report.setIsActive("true".equalsIgnoreCase(root.valueOf("isactive")) ? Boolean.TRUE : Boolean.FALSE);
		report.setReportXml(root.valueOf("reportxml"));
		
		report.setTemplates(new HashSet());
		report.setSeeds(new HashSet());
		
		List templates = maindoc.selectNodes("fullreport/templates/template");
		for (Iterator iter = templates.iterator(); iter.hasNext();)
		{
			TemplateBo template = new TemplateBo();
			
			DefaultElement element = (DefaultElement) iter.next();

			template.setName(element.valueOf("name"));
			template.setDescription(element.valueOf("description"));
			if(element.valueOf("isactive") != null && element.valueOf("isactive").length() > 0)
				template.setIsActive("true".equalsIgnoreCase(element.valueOf("isactive")) ? Boolean.TRUE : Boolean.FALSE);
			template.setTemplateXml(element.valueOf("templatexml"));
			
			report.getTemplates().add(template);
		}

		List seeds = maindoc.selectNodes("fullreport/seeds/seed");
		for (Iterator iter = seeds.iterator(); iter.hasNext();)
		{
			ReportSeedBo seed = new ReportSeedBo();
			
			DefaultElement element = (DefaultElement) iter.next();

			seed.setBOName(element.valueOf("boname"));
			seed.setBOFieldName(element.valueOf("bofieldname"));
			seed.setDataType(element.valueOf("datatype"));
			if(element.valueOf("canbenull") != null && element.valueOf("canbenull").length() > 0)
				seed.setCanBeNull("true".equalsIgnoreCase(element.valueOf("canbenull")) ? Boolean.TRUE : Boolean.FALSE);
			
			report.getSeeds().add(seed);
		}

		List flist = maindoc.selectNodes("fullreport/forms/form");
		for (Iterator iter = flist.iterator(); iter.hasNext();)
		{
			DefaultElement element = (DefaultElement) iter.next();

			forms.add(Integer.valueOf(element.getStringValue()));
		}
		
		return report;
	}

	@SuppressWarnings({"unchecked", "rawtypes"})
	private String validateReport(String xmlReport) throws DocumentException
	{
		String queryName = "";
		ArrayList queryParams = new ArrayList();
		String hql = "";
		boolean isNative = false;
		
		// parse xml project
		Document maindoc = getXmlDocument(xmlReport);

		List list = maindoc.selectNodes("/Project/Queries/HQL");
		
		for (Iterator iter = list.iterator(); iter.hasNext();)
		{
			DefaultElement query = (DefaultElement) iter.next();

			Node node = query.selectSingleNode("Content");
			String content = node.getStringValue();
			
			Document doc = getXmlDocument(content);
			
			node = doc.selectSingleNode("Query/Name");
			queryName = node.getStringValue();
			
			isNative = false;
			node = doc.selectSingleNode("Query/Native");
			if(node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
			{
				isNative = node.getStringValue().toLowerCase().equals("true");
			}
			
			queryParams.clear();

			node = doc.selectSingleNode("Query/HibernateQuery");
			hql = this.replaceNewLineSeparators(node.getStringValue());
			
			List listParams = doc.selectNodes("/Query/Params/Param");
			for (Iterator iter_params = listParams.iterator(); iter_params.hasNext();)
			{
				DefaultElement field = (DefaultElement) iter_params.next();
				
				QueryParam param = new QueryParam();
				param.setType(field.valueOf("@nFieldType"));
				param.setField(field.valueOf("@asField"));
				
				if(hasNamedParam(hql, param.getField()))
					queryParams.add(param);
			}
			
			
			//run HQL query
			DomainFactory factory = getDomainFactory();
			String[] aParams = new String[queryParams.size()];
			Object[] aValues = new Object[queryParams.size()];

			for (int i = 0; i < queryParams.size(); i++)
			{
				aParams[i] = ((QueryParam)queryParams.get(i)).getField();
				aValues[i] = getDummyParamValue(((QueryParam)queryParams.get(i)).getType());
			}
			
			try
			{
				if(isNative)
				{
				 	 //WDEV-12180
					//if(hql.trim().toLowerCase().startsWith("exec "))
						factory.validateFindSQL(hql, aParams, aValues, -1);
					//else
						//factory.validateFindSQL(hql, aParams, aValues, 0);
				}
				else
					factory.validateFind(hql, aParams, aValues);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				return "Executing query '" + queryName + "' has thrown the following exception: \r\n" + e.toString();
			}
		}			
		
		return null;
	}
	
	private Object getDummyParamValue(String type)
	{
		//param of type BO, the query expects a param of type Integer
		if(!type.startsWith("java."))
			return new java.lang.Integer(0);
		if(type.equalsIgnoreCase("java.lang.Integer"))
			return new java.lang.Integer(0);
		if(type.equalsIgnoreCase("java.math.BigInteger"))
			return java.math.BigInteger.ZERO;
		if(type.equalsIgnoreCase("java.lang.Short"))
			return new java.lang.Short("0");
		if(type.equalsIgnoreCase("java.lang.Long"))
			return new java.lang.Long(0);
		if(type.equalsIgnoreCase("java.lang.Boolean"))
			return java.lang.Boolean.FALSE;
		if(type.equalsIgnoreCase("java.lang.String"))
			return "*";
		if(type.equalsIgnoreCase("java.math.BigDecimal"))
			return new java.math.BigDecimal(0);
		if(type.equalsIgnoreCase("java.lang.Float"))
			return new java.lang.Float(0);
		if(type.equalsIgnoreCase("java.lang.Double"))
			return new java.lang.Double(0);
		if(type.equalsIgnoreCase("java.util.Date"))
			return new java.util.Date();
		if(type.equalsIgnoreCase("java.sql.Date"))
			return new java.sql.Date(System.currentTimeMillis());
		if(type.equalsIgnoreCase("java.sql.Time"))
			return new java.sql.Time(System.currentTimeMillis());
		
		return new java.lang.Integer(0);		
	}

	private byte[] readFile(String fileName) throws IOException
	{
		byte[] result = null;
		
		FileInputStream fs = null;
		
		fs = new FileInputStream(fileName);
		
		result = new byte[fs.available()];
		fs.read(result);
		fs.close();
		
		return result;
	}

	private static Document getXmlDocument(String xmlBuffer) throws DocumentException
	{
		return DocumentHelper.parseText(xmlBuffer);
	}
	
	public String replaceNewLineSeparators(String val)
	{
		StringBuffer sb = new StringBuffer(val.length());
		char c;
		
		for(int i = 0; i < val.length(); i++)
		{
			c = val.charAt(i);
			
			if(c == '\r' || c == '\n')
				c = ' ';
			
			sb.append(c);
		}
		
		return sb.toString();
	}
	
	private boolean hasNamedParam(String hql, String param)
	{
		if(hql == null || hql.length() == 0 || param == null || param.length() == 0)
			return false;
		
		int index = hql.indexOf(":" + param);
		
		if(index < 0)
			return false;
		
		if(index + param.length() + 1 == hql.length())
			return true;
		
		if(index + param.length() + 1 < hql.length() - 1 && (hql.charAt(index + param.length() + 1) == ' ' 
			|| hql.charAt(index + param.length() + 1) == ',' 
				|| hql.charAt(index + param.length() + 1) == '\t' 
					|| hql.charAt(index + param.length() + 1) == '\n' 
						|| hql.charAt(index + param.length() + 1) == '\r' 
							|| hql.charAt(index + param.length() + 1) == '(' 
								|| hql.charAt(index + param.length() + 1) == ')'))
		{
			return true;
		}
		
		
		return false;
	}

	
	
	private class QueryParam
	{
		String field;
		String type;
		
		public QueryParam()
		{
			
		}
		@SuppressWarnings("unused")
		public QueryParam(String field, String type)
		{
			this.field = field;
			this.type = type;
		}

		public String getField()
		{
			return field;
		}
		public void setField(String field)
		{
			this.field = field;
		}
		public String getType()
		{
			return type;
		}
		public void setType(String type)
		{
			this.type = type;
		}
	}



	public String[] getSystemReportAndTemplate(Integer reportImsID)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {reportImsID});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}
}
