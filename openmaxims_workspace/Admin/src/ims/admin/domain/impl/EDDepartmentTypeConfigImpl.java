//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.domain.base.impl.BaseEDDepartmentTypeConfigImpl;
import ims.core.admin.domain.objects.DefaultEDLocationDeptType;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.DefaultEDLocationDeptTypeVo;
import ims.emergency.vo.DefaultEDLocationDeptTypeVoCollection;
import ims.emergency.vo.domain.DefaultEDLocationDeptTypeVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class EDDepartmentTypeConfigImpl extends BaseEDDepartmentTypeConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection getLocations()
	{
		 
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();

		hql.append(" select l1_1 from Location as l1_1 left join l1_1.type as l2_1 where (l2_1.id = :idloctype and l1_1.isActive = 1) order by upper(l1_1.name) asc ");

		List<?> list = factory.find(hql.toString(), new String[] { "idloctype" }, new Object[] { LocationType.ANE.getID() });

		if ( list != null && list.size() > 0)
		{
			LocationLiteVoCollection tempColl = LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(list);
			return tempColl;
		}
		return null;
	}

	public ims.emergency.vo.DefaultEDLocationDeptTypeVoCollection getDefaultEDLocationDeptTypes()
	{
		 
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();

		hql.append("select d1_1	from DefaultEDLocationDeptType as d1_1	order by d1_1.systemInformation.creationDateTime desc");

		List<?> list = factory.find(hql.toString());

		if ( list != null && list.size() > 0)
		{
			DefaultEDLocationDeptTypeVoCollection tempColl = DefaultEDLocationDeptTypeVoAssembler.createDefaultEDLocationDeptTypeVoCollectionFromDefaultEDLocationDeptType(list);
			return tempColl;
		}
		return null;

		
		
	}

	
	public void saveDefaultEDLocationDeptType(DefaultEDLocationDeptTypeVoCollection records) throws StaleObjectException
	{
		if (records == null)
			throw new CodingRuntimeException("Cannot save null DefaultEDLocationDeptTypeVoCollection");

		DomainFactory factory = getDomainFactory();
		for( DefaultEDLocationDeptTypeVo record: records)
		{
			DefaultEDLocationDeptType doDefaultEDLocationDeptType = DefaultEDLocationDeptTypeVoAssembler.extractDefaultEDLocationDeptType(factory, record);
			factory.save(doDefaultEDLocationDeptType);
		}
				
	}


}
