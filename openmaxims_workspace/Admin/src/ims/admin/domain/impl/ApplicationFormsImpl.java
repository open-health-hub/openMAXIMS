//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.domain.base.impl.BaseApplicationFormsImpl;
import ims.admin.vo.AppFormListVo;
import ims.admin.vo.domain.AppFormListVoAssembler;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class ApplicationFormsImpl extends BaseApplicationFormsImpl
{

	private static final long serialVersionUID = 1L;
	
	public AppFormListVo getAppFormList(Integer id)
	{
		if(id == null)
			throw new CodingRuntimeException("AppForm id is null");
		
		DomainFactory factory = (DomainFactory) getDomainFactory();				
		return AppFormListVoAssembler.create((AppForm)factory.getDomainObject(AppForm.class,id));
	}
		
	public AppFormListVo saveForm(AppFormListVo listFormVo) throws StaleObjectException 
	{		
		if (Boolean.FALSE.equals(listFormVo.isValidated()))
			throw new DomainRuntimeException("AppFormListVo was not validated!");
		
		DomainFactory factory = (DomainFactory) this.getDomainFactory();		
		AppForm dom = AppFormListVoAssembler.extractAppForm(factory, listFormVo);
		factory.save(dom);
		
		return AppFormListVoAssembler.create(dom);
	}
	
	public AppFormListVo getAppFormListByTaxonomyType(String extId, TaxonomyType taxonomyType) 
	{
		if (extId == null || taxonomyType == null)
			return null;
		
		DomainFactory factory = (DomainFactory) this.getDomainFactory();
		String hql = " from AppForm af join af.codeMappings as cm where cm.taxonomyName = :taxType and cm.taxonomyCode = :extId ";
		List appFormList = factory.find(hql,new String[]{"taxType", "extId"}, new Object[]{getDomLookup(taxonomyType),extId});
			
		if (appFormList != null && appFormList.size() == 1)
			 return AppFormListVoAssembler.create((AppForm) appFormList.get(0));
		else if (appFormList != null && appFormList.size() > 1)		
			throw new DomainRuntimeException("Non unique hit on AppForm by TaxonomyType " + taxonomyType.getText() + " and code " + extId);			
		
		return null;
	}
}
