//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by John MacEnri using IMS Development Environment (version 1.20 build 40727.1400)
//Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppNavShortVoCollection;
import ims.admin.vo.AppNavigationVo;
import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.AppRoleVo;
import ims.admin.vo.AppTopButtonConfigShortVoCollection;
import ims.admin.vo.AppTopButtonConfigVo;
import ims.admin.vo.domain.AppFormVoAssembler;
import ims.admin.vo.domain.AppNavShortVoAssembler;
import ims.admin.vo.domain.AppNavigationVoAssembler;
import ims.admin.vo.domain.AppRoleShortVoAssembler;
import ims.admin.vo.domain.AppRoleVoAssembler;
import ims.admin.vo.domain.AppTopButtonConfigShortVoAssembler;
import ims.admin.vo.domain.AppTopButtonConfigVoAssembler;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.AppNavigation;
import ims.core.configuration.domain.objects.AppRole;
import ims.core.configuration.domain.objects.AppTopButtonConfig;
import ims.core.configuration.vo.AppFormRefVo;
import ims.core.configuration.vo.AppNavigationRefVo;
import ims.core.configuration.vo.AppTopButtonConfigRefVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.impl.DomainImpl;

public class ApplicationRolesImpl extends DomainImpl implements ims.admin.domain.ApplicationRoles, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;
	
	public AppRoleShortVoCollection listRoles()
	{
		DomainFactory factory = getDomainFactory();
		return  AppRoleShortVoAssembler.createAppRoleShortVoCollectionFromAppRole(factory.listDomainObjects(AppRole.class)).sort();
	}
	
	public AppRoleVo saveRole(AppRoleVo voRole) throws StaleObjectException, UniqueKeyViolationException
	{
		if (!voRole.isValidated())
		{
			throw new DomainRuntimeException("Role ValueObject has not been validated");
		}

		DomainFactory factory = getDomainFactory();				
		AppRole domRole = AppRoleVoAssembler.extractAppRole(factory, voRole);
		try
		{
			if (voRole.getCodeMappingsIsNotNull())
			{				
				boolean found = false;
				
				StringBuilder errors = new StringBuilder();
				
				
				for (int i = 0; i < voRole.getCodeMappings().size(); i++) 
				{
					TaxonomyMap code = voRole.getCodeMappings().get(i);
					AppRole appRole = getAppRoleByTaxonomy(code.getTaxonomyCode(), code.getTaxonomyName()); 
					if (appRole != null && appRole.getId() != voRole.getId())
					{
						found = true;
						
						errors.append("\nRole '" + appRole.getName() + "' aleady have mapped :");
						errors.append(" TaxonomyType '" + code.getTaxonomyName() + "' and code '" + code.getTaxonomyCode() + "'");
					}
				}
				
				if(found)
					throw new UniqueKeyViolationException(errors.toString());
			}						
			
			factory.save(domRole);
		}
		catch(UnqViolationUncheckedException e)
		{		
			throw new UniqueKeyViolationException("A role with this name already exists within the system, please change", e);
		}
		return AppRoleVoAssembler.create(domRole);
	}
	
	
	
	public AppRoleVo getRole(AppRoleShortVo roleVo)
	{
		DomainFactory factory = getDomainFactory();
		return AppRoleVoAssembler.create((AppRole)factory.getDomainObject(AppRole.class, roleVo.getID_AppRole()));
	}

	public AppNavShortVoCollection listNavigations()
	{
		return AppNavShortVoAssembler.createAppNavShortVoCollectionFromAppNavigation(getDomainFactory().find(" from AppNavigation nav where nav.isActive = :isActive", new String[]{"isActive"}, new Object[]{Boolean.TRUE})).sort();
	}

	public AppNavigationVo getNavigation(AppNavigationRefVo navRefVo)
	{
		if (navRefVo == null)
			return null;
		
		return AppNavigationVoAssembler.create((AppNavigation)getDomainFactory().getDomainObject(navRefVo));
	}

	public AppTopButtonConfigShortVoCollection listTopButtonConfigurations() 
	{
		//WDEV-18190  ordering results from query alphabetically
		return AppTopButtonConfigShortVoAssembler.createAppTopButtonConfigShortVoCollectionFromAppTopButtonConfig(getDomainFactory().find("from AppTopButtonConfig as apptb order by UPPER(apptb.name) asc"));		
	}
	public AppTopButtonConfigVo getTopButtonConfiguration(AppTopButtonConfigRefVo config) 
	{
		if (config == null)
			return null;
		
		return AppTopButtonConfigVoAssembler.create((AppTopButtonConfig)getDomainFactory().getDomainObject(config));
	}
	public AppFormVo getForm(AppFormRefVo form) 
	{
		return AppFormVoAssembler.create((AppForm)getDomainFactory().getDomainObject(form));
	}	
	
	private AppRole getAppRoleByTaxonomy(String extId, TaxonomyType taxonomyType) 
	{
		if (extId == null || taxonomyType == null)
			return null;
		
		DomainFactory factory = (DomainFactory) this.getDomainFactory();
		String hql = " from AppRole ar join ar.codeMappings as cm where cm.taxonomyName = :taxType and cm.taxonomyCode = :extId ";
		List appRole = factory.find(hql,new String[]{"taxType", "extId"}, new Object[]{getDomLookup(taxonomyType),extId});
			
		if (appRole != null && appRole.size() >= 1)		
			return (AppRole)appRole.get(0);		
		
		return null;
	}
	
	public AppRoleVo getAppRoleByTaxonomyType(String extId, TaxonomyType taxonomyType) 
	{
		if (extId == null || taxonomyType == null)
			return null;
		
		DomainFactory factory = (DomainFactory) this.getDomainFactory();
		String hql = " from AppRole ar join ar.codeMappings as cm where cm.taxonomyName = :taxType and cm.taxonomyCode = :extId ";
		List appRole = factory.find(hql,new String[]{"taxType", "extId"}, new Object[]{getDomLookup(taxonomyType),extId});
			
		if (appRole != null && appRole.size() == 1)
			 return AppRoleVoAssembler.create((AppRole) appRole.get(0));
		else if (appRole != null && appRole.size() > 1)		
			throw new DomainRuntimeException("Non unique hit on AppRole by TaxonomyType " + taxonomyType.getText() + " and code " + extId);			
		
		return null;
	}
}
