//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2340.34011)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.base.impl.BaseDataViewImpl;
import ims.admin.vo.ReportTemplateBoRefLiteVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.domain.ReportTemplateBoRefLiteVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.configuration.AuditInformation;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.ReportTemplateBoRef;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.CareContextRefVoCollection;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.AuditVo;
import ims.core.vo.AuditVoCollection;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.EpisodeofCareShortVoCollection;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.Date;

public class DataViewImpl extends BaseDataViewImpl
{
	private static final long serialVersionUID = 1L;

	public ReportTemplateBoRefLiteVoCollection listClassesWithTemplates()
	{
		return ReportTemplateBoRefLiteVoAssembler.createReportTemplateBoRefLiteVoCollectionFromReportTemplateBoRef(
				getDomainFactory().find("from ReportTemplateBoRef")).sort();
	}

	public AuditVoCollection listAuditRecords(String clazz, Date dateFrom, Date dateTo, CareContextRefVoCollection voCareContextColl, ClinicalContactRefVo clinicalContact, PatientRefVo pid)
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from AuditInformation audit ";
		
		String andStr = " ";
		StringBuffer clause = new StringBuffer();
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();

		//we list only INSERT statements
		clause.append(andStr + " audit.auditAction = :action");
		names.add("action");
		values.add("INSERT");		
		andStr = " and ";

		//only BO linked to templates
		clause.append(andStr + " audit.className in ((select r1_1.businessObj from ReportTemplateBoRef as	r1_1)) ");
		andStr = " and ";

		if (pid != null)
		{
			clause.append(andStr + " audit.patientId = :patient" );
			names.add("patient");
			values.add(pid.getID_Patient());		
			andStr = " and ";
		}
		if (dateFrom != null)
		{
			clause.append(andStr + " audit.auditDateTime >= :dateFrom" );
			names.add("dateFrom");
			values.add(dateFrom.getDate());		
			andStr = " and ";
		}
		if (dateTo != null)
		{
			clause.append(andStr + " audit.auditDateTime <= :dateTo" );
			names.add("dateTo");
			values.add(dateTo.copy().addDay(1).getDate());		
			andStr = " and ";
		}
		if (clinicalContact != null)
		{
			clause.append(andStr + " audit.contactId = :clinicalContact" );
			names.add("clinicalContact");
			values.add(clinicalContact.getID_ClinicalContact());		
			andStr = " and ";
		}
		
		if (voCareContextColl != null && voCareContextColl.size() > 0)
		{
			if (voCareContextColl.size() == 1)
			{
				clause.append(andStr + " audit.careContextId = :context");
				names.add("context");
				values.add(voCareContextColl.get(0).getID_CareContext());
				andStr = " and ";
			}
			else
			{
				clause.append(andStr + " audit.careContextId in ( ");
				for (int i = 0; i < voCareContextColl.size(); i++)
				{
					if (i == 0 || i == voCareContextColl.size())
						clause.append(voCareContextColl.get(i).getID_CareContext());
					else
						clause.append("," + voCareContextColl.get(i).getID_CareContext());
				}
				clause.append(" )");
				andStr = " and ";
			}
				
		}
		
		if (clazz != null && !clazz.equals(""))
		{
			if (clazz.indexOf("?") >= 0)
			{
				clause.append(andStr + " audit.className like :class");
				values.add(clazz.replace('?', '%'));
			}
			else
			{
				clause.append(andStr + " audit.className = :class");
				values.add(clazz);
			}
			names.add("class");
			andStr = " and ";
		}
		if (andStr.equals(" and "))
		{
			hql += " where ";
		}
		hql += clause.toString();

		String[] snames = new String[names.size()];
		names.toArray(snames);

		AuditVoCollection coll = new AuditVoCollection();
		List audits  = factory.find(hql, snames, values.toArray());
		for (int i=0; i<audits.size(); i++)
		{
			AuditInformation inf = (AuditInformation)audits.get(i);
			AuditVo vo = new AuditVo();
			vo.setAction(inf.getAuditAction());
			java.util.Date dateTime = inf.getAuditDateTime();
			if (  null != dateTime ) 
			{
				vo.setAuditDateTime(new ims.framework.utils.DateTime(dateTime));
			}

			vo.setAuditUser(inf.getAuditUser());
			vo.setClassIdentifier(inf.getClassIdentifier());
			if (inf.getClassName().indexOf(".") > 0)
			{
				vo.setClassName(inf.getClassName().substring(inf.getClassName().lastIndexOf(".")+1));				
			}
			else
			{
				vo.setClassName(inf.getClassName());
			}
			vo.setHostName(inf.getAuditHost());
			vo.setDiffFields(inf.getDiffString());
			coll.add(vo);
		}
		return coll.sort(SortOrder.DESCENDING);
	}

	public ReportTemplateVo getLinkedTemplate(String className)
	{
		ReportTemplateBoRef domRep = ReportTemplateBoRef.getReportTemplateBoRefFromBusinessObj(getDomainFactory(), className);
		return ReportTemplateVoAssembler.create(domRep.getTemplate());
	}

	public CareContextShortVoCollection listCareContexts(EpisodeOfCareRefVo episodeofCareRefVo)
	{
		if(episodeofCareRefVo == null)
			throw new DomainRuntimeException("Invalid Argument: Episode of Care not provided");
		
		DomainFactory factory = getDomainFactory();
		
		return CareContextShortVoAssembler.createCareContextShortVoCollectionFromCareContext(
				factory.find("from CareContext cc where cc.episodeOfCare.id = :EPIS", 
						new String[] {"EPIS"}, new Object[] {episodeofCareRefVo.getID_EpisodeOfCare()})).sort();
	}

	public ClinicalContactShortVoCollection listClinicalContacts(CareContextRefVo careContext)
	{
		DomainFactory factory = getDomainFactory();
		
		CareContext cc = (CareContext) factory.getDomainObject(CareContext.class, careContext.getID_CareContext());
		
		return ClinicalContactShortVoAssembler.createClinicalContactShortVoCollectionFromClinicalContact(
				cc.getClinicalContacts()).sort();
	}


	public EpisodeofCareShortVoCollection listEpisodeOfCaresByPatient(PatientRefVo patientVo)
	{
		if(patientVo == null)
			throw new DomainRuntimeException("Invalid Argument: Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		
		return EpisodeofCareShortVoAssembler.createEpisodeofCareShortVoCollectionFromEpisodeOfCare(
				factory.find("from EpisodeOfCare epis where epis.careSpell.patient.id = :PID", 
						new String[] {"PID"}, new Object[] {patientVo.getID_Patient()})).sort();
	}

}
