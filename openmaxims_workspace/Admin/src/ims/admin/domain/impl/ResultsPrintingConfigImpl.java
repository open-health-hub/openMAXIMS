//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4121.17238)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.base.impl.BaseResultsPrintingConfigImpl;
import ims.admin.vo.PrintLocationConfigVo;
import ims.admin.vo.PrintLocationConfigVoCollection;
import ims.admin.vo.domain.PrintLocationConfigVoAssembler;
import ims.core.resource.place.vo.LocationRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class ResultsPrintingConfigImpl extends BaseResultsPrintingConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection listActiveHospitalsLite()
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();
	}

	/**
	* listPrintLocationConfig
	*/
	public ims.admin.vo.PrintLocationConfigVoCollection listPrintLocationConfig()
	{
		List items = getDomainFactory().find("from PrintLocationConfig");
		return PrintLocationConfigVoAssembler.createPrintLocationConfigVoCollectionFromPrintLocationConfig(items);
	}

	/**
	 * savePrintLocationConfigCollection
	 */
	public void savePrintLocationConfigCollection(PrintLocationConfigVoCollection voCollPrintLocConfig) throws StaleObjectException
	{
		if (voCollPrintLocConfig == null)
			throw new CodingRuntimeException("voCollPrintLocConfig is null in method savePrintLocationConfigCollection");
		
		for(PrintLocationConfigVo voPrintLocConf : voCollPrintLocConfig)
			getDomainFactory().save(PrintLocationConfigVoAssembler.extractPrintLocationConfig(getDomainFactory(), voPrintLocConf)); 
	}

	/**
	 * 
	 */
	public PrintLocationConfigVo getPrintLocationConfigByLocation(LocationRefVo location)
	{
		if (location == null || location.getID_Location() == null)
			throw new CodingRuntimeException("location is null or id not provided in method getPrintLocationConfigByLocation");
		
		ims.core.admin.domain.objects.PrintLocationConfig doPrintLocConf = ims.core.admin.domain.objects.PrintLocationConfig.getPrintLocationConfigFromSite(getDomainFactory(), location.getBoId());
		if(doPrintLocConf != null)
			return PrintLocationConfigVoAssembler.create(doPrintLocConf);
		
		return null;
	}
}
