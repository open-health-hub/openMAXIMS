//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.systemjobdetails;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbFrequencyLookup();
	abstract protected void defaultcmbFrequencyLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnPreviousClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrConfigurationTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onChkStopValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntDaysValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntMinutesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntHoursValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSunValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSatValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkFriValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkThuValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkWedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkTueValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkMonValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTimMonthlyTimeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onIntDayOfMonthValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbFrequencyValueSet(Object value);
	abstract protected void onCmbCronValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDtimStartDateValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdFailedSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdSuccessfulySelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnPrevious().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnPreviousClick();
			}
		});
		this.form.btnNext().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNextClick();
			}
		});
		this.form.lyrConfiguration().tabScheduling().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigurationtabSchedulingActivated();
			}
		});
		this.form.lyrConfiguration().tabConfiguration().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigurationtabConfigurationActivated();
			}
		});
		this.form.lyrConfiguration().tabNotification().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrConfigurationtabNotificationActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().chkStop().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkStopValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrCrontabPreviewActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrCrontabDailyActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrCrontabWeeklyActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrCrontabMonthlyActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrCrontabAdvancedActivated();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntDaysValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntMinutesValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntHoursValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSunValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSatValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkFriValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkThuValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkWedValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkTueValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkMonValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().timMonthlyTime().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onTimMonthlyTimeValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onIntDayOfMonthValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().cmbFrequency().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbFrequencyValueSet(value);
			}
		});
		this.form.lyrConfiguration().tabScheduling().cmbFrequency().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCronValueChanged();
			}
		});
		this.form.lyrConfiguration().tabScheduling().dtimStartDate().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDtimStartDateValueChanged();
			}
		});
		this.form.lyrConfiguration().tabNotification().grdFailed().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdFailedSelectionChanged();
			}
		});
		this.form.lyrConfiguration().tabNotification().grdSuccessfuly().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdSuccessfulySelectionChanged();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSetClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedNewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.New, sender);
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedEditItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.Edit, sender);
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.Remove, sender);
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationNewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.New, sender);
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationEditItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.Edit, sender);
			}
		});
		this.form.getContextMenus().Admin.getSystemJobDetailsNotificationRemoveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.Remove, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbFrequencyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbFrequencyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbFrequencyLookupValue();
	}
	private void onlyrConfigurationtabSchedulingActivated()
	{
		this.form.lyrConfiguration().showtabScheduling();
		onlyrConfigurationTabChanged(this.form.lyrConfiguration().tabScheduling());
	}
	private void onlyrConfigurationtabConfigurationActivated()
	{
		this.form.lyrConfiguration().showtabConfiguration();
		onlyrConfigurationTabChanged(this.form.lyrConfiguration().tabConfiguration());
	}
	private void onlyrConfigurationtabNotificationActivated()
	{
		this.form.lyrConfiguration().showtabNotification();
		onlyrConfigurationTabChanged(this.form.lyrConfiguration().tabNotification());
	}
	private void onlyrCrontabPreviewActivated()
	{
		this.form.lyrConfiguration().tabScheduling().lyrCron().showtabPreview();
	}
	private void onlyrCrontabDailyActivated()
	{
		this.form.lyrConfiguration().tabScheduling().lyrCron().showtabDaily();
	}
	private void onlyrCrontabWeeklyActivated()
	{
		this.form.lyrConfiguration().tabScheduling().lyrCron().showtabWeekly();
	}
	private void onlyrCrontabMonthlyActivated()
	{
		this.form.lyrConfiguration().tabScheduling().lyrCron().showtabMonthly();
	}
	private void onlyrCrontabAdvancedActivated()
	{
		this.form.lyrConfiguration().tabScheduling().lyrCron().showtabAdvanced();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
