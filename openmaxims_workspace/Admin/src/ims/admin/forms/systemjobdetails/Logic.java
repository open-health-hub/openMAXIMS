//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3896.19006)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.systemjobdetails;

import ims.admin.forms.systemjobdetails.GenForm.lyrConfigurationLayer.tabNotificationContainer.grdFailedRow;
import ims.admin.forms.systemjobdetails.GenForm.lyrConfigurationLayer.tabNotificationContainer.grdSuccessfulyRow;
import ims.admin.vo.ConfiguredJobVo;
import ims.admin.vo.SystemJobVo;
import ims.core.vo.ConfiguredJobNotificationVo;
import ims.core.vo.ConfiguredJobNotificationVoCollection;
import ims.core.vo.lookups.JobRunningFrequency;
import ims.domain.FormName;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.NotificationDelivery;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ISchedulerServlet;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.scheduler.SchedulerTrigger;

import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;

import javax.naming.NamingException;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;

public class Logic extends BaseLogic
{	
	private static final long serialVersionUID = 1L;	
	
	private static String	daily	= JobRunningFrequency.DAILY.getText();
	private static String	weekly	= JobRunningFrequency.WEEKLY.getText();
	private static String	monthly	= JobRunningFrequency.MONTHLY.getText();
	private static String	runOnce	= JobRunningFrequency.RUNONCE.getText();
	
	public static final  Integer	COLNAME				= new Integer(-1);
	public static final  Integer	COLIMG				= new Integer(-2);	
		
	public static final  int	SCHEDULER_TAB		= -4;
	public static final  int	CONFIGURATION_TAB	= -5;
	public static final  int	NOTIFICATIONS_TAB	= -6;
		
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{	
		form.lyrConfiguration().tabScheduling().cmbFrequency().removeRow(JobRunningFrequency.CUSTOM);
		
		form.getLocalContext().setSystemJob(form.getGlobalContext().Admin.getSystemJob());
		
		if (args != null && args.length > 0)
		{
			if (args[0] != null && args[0] instanceof ConfiguredJobVo)
			{
				form.getLocalContext().setConfiguredJob((ConfiguredJobVo)args[0]);								
				form.getLocalContext().setNotificationOnSuccess(((ConfiguredJobVo)args[0]).getNotificationsOnSuccess()); 
				form.getLocalContext().setNotificationOnFailure(((ConfiguredJobVo)args[0]).getNotificationsOnFailure());				
				form.getGlobalContext().Admin.setSystemJobNotification(null);
				
				if(form.getLocalContext().getConfiguredJob() != null &&
						form.getLocalContext().getConfiguredJob().getScheduledJob() != null &&
							form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() != null &&
								form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() > 0)
				{
					showLyrConfigurationTabs(true, true, true);
				}
				else
				{
					showLyrConfigurationTabs(true, false, true);
				}				
				
				form.lyrConfiguration().showtabScheduling();				
				form.getLocalContext().setCurrentSelectedTab(SCHEDULER_TAB);
				
				populateSchedulingTab((ConfiguredJobVo)args[0]);
				manageButtons(false, false, true, true);
				
				return;
			}
		}
		
		initialize();
		open();
	}
	
	private void populateSchedulingTab(ConfiguredJobVo configuredJobVo) throws PresentationLogicException 
	{	
		form.lyrConfiguration().tabScheduling().txtName().setValue(configuredJobVo.getName());
		form.lyrConfiguration().tabScheduling().dtimStartDate().setValue(configuredJobVo.getStartDateTime());
		if (configuredJobVo.getEndDateTimeIsNotNull())
		{
			form.lyrConfiguration().tabScheduling().chkStop().setValue(true);
			onChkStopValueChanged();
			form.lyrConfiguration().tabScheduling().dtimStop().setValue(configuredJobVo.getEndDateTime());
		}
		else
		{
			form.lyrConfiguration().tabScheduling().chkStop().setValue(false);
			onChkStopValueChanged();
		}
		
		if (configuredJobVo.getFrequencyIsNotNull())
		{
			form.lyrConfiguration().tabScheduling().cmbFrequency().setValue(configuredJobVo.getFrequency());
			onCmbCronValueChanged();
			
			String cronExpression = configuredJobVo.getCronExpression();
			SchedulerTrigger trigger = null;
			
			try 
			{
				trigger = new SchedulerTrigger(cronExpression);
			}
			catch (Exception e) 
			{			
				engine.showMessage(e.getMessage());
				return;
			}
			
			if (configuredJobVo.getFrequency().equals(JobRunningFrequency.DAILY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderEnabled(false);								
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderEnabled(false);
				
				form.lyrConfiguration().tabScheduling().lyrCron().showtabDaily();
				
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().setValue(trigger.getDays());
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().setValue(trigger.getHours());
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().setValue(trigger.getMinutes());
				
				rebuildTrigger();
			}
			else if (configuredJobVo.getFrequency().equals(JobRunningFrequency.WEEKLY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderEnabled(false);								
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderEnabled(false);
				
				form.lyrConfiguration().tabScheduling().lyrCron().showtabWeekly();
			
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().setValue(trigger.getMon());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().setValue(trigger.getTue());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().setValue(trigger.getWed());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().setValue(trigger.getThu());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().setValue(trigger.getFri());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().setValue(trigger.getSat());
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().setValue(trigger.getSun());
				
				rebuildTrigger();
			}
			else if (configuredJobVo.getFrequency().equals(JobRunningFrequency.MONTHLY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderEnabled(false);								
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderEnabled(false);				
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
				form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderEnabled(false);
				
				form.lyrConfiguration()	.tabScheduling().lyrCron().showtabMonthly();
				
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().setValue(trigger.getDayOfMonth());
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().timMonthlyTime().setValue(trigger.getTimeOfMonth());
				
				rebuildTrigger();
			}
			//WDEV-18321
			else if (configuredJobVo.getFrequency().equals(JobRunningFrequency.RUNONCE))
			{
				//do not allow change of existing Simple job to Cron job
				form.lyrConfiguration().tabScheduling().txtName().setEnabled(false);
				form.lyrConfiguration().tabScheduling().cmbFrequency().setEnabled(false);
				form.lyrConfiguration().tabScheduling().dtimStartDate().setEnabled(false);
			}
		}		
	}

	private void manageButtons(boolean showButtonPrevious, boolean showButtonNext, boolean showButtonSave, boolean showButtonCancel)
	{
		form.btnPrevious().setVisible(showButtonPrevious);
		form.btnNext().setVisible(showButtonNext);
		form.btnSave().setVisible(showButtonSave);
		form.btnCancel().setVisible(showButtonCancel);
	}
		
	private void showLyrConfigurationTabs(boolean showTabScheduling, boolean showTabConfiguration, boolean showTabNotification)
	{		
		form.lyrConfiguration().tabScheduling().setHeaderVisible(showTabScheduling);
		form.lyrConfiguration().tabScheduling().setHeaderEnabled(showTabScheduling);
		
		form.lyrConfiguration().tabConfiguration().setHeaderVisible(showTabConfiguration);
		form.lyrConfiguration().tabConfiguration().setHeaderEnabled(showTabConfiguration);
		
		form.lyrConfiguration().tabNotification().setHeaderVisible(showTabNotification);
		form.lyrConfiguration().tabNotification().setHeaderEnabled(showTabNotification);
	}
	
	private void initialize() throws PresentationLogicException 
	{	
		form.getGlobalContext().Admin.setSystemJobNotification(null);

		form.lyrConfiguration().showtabScheduling();
		form.getLocalContext().setCurrentSelectedTab(SCHEDULER_TAB);
		form.lyrConfiguration().tabScheduling().cmbFrequency().setValue(JobRunningFrequency.RUNONCE);
		form.lyrConfiguration().tabScheduling().dtimStartDate().setValue(new DateTime());
		onCmbCronValueChanged();
		
		showLyrConfigurationTabs(true, false, false);			
	}

	private ISchedulerServlet getQuartzInstance()
	{
		try 
		{
			return ims.configuration.JNDI.getTaskSchedulerServlet();
		}
		catch (NamingException e) 
		{
			e.printStackTrace();
		}
		return null;
	}	
	
	private void open() 
	{		
		manageButtons(false, true, false, true);
	}
	
	@Override
	protected void onChkStopValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.lyrConfiguration().tabScheduling().chkStop().getValue())
		{
			form.lyrConfiguration().tabScheduling().dtimStop().setEnabled(true);
		}
		else
		{
			form.lyrConfiguration().tabScheduling().dtimStop().setEnabled(false);
			form.lyrConfiguration().tabScheduling().dtimStop().setValue(null);
		}
		
		if (form.lyrConfiguration().tabScheduling().dtimStartDate().getValue() != null && form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() != null)
		{		
			rebuildTrigger();
		}
	}
	@Override
	protected void onCmbCronValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{			
		//WDEV-18321
		if (form.getLocalContext().getConfiguredJobIsNotNull()
				&& form.getLocalContext().getConfiguredJob().getFrequencyIsNotNull()
				&&  !form.getLocalContext().getConfiguredJob().getFrequency().equals(JobRunningFrequency.RUNONCE))
		{
			if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() != null
					&& form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.RUNONCE))
			{
				engine.showMessage("Job Frequency cannot be changed from " + form.getLocalContext().getConfiguredJob().getFrequency().getText() + 
						" to " + JobRunningFrequency.RUNONCE.getText());
				form.lyrConfiguration().tabScheduling().cmbFrequency().setValue(null);
			}
		}
		
		//WDEV-17279
		if (form.lyrConfiguration().tabScheduling().dtimStartDate().getValue()==null)
		{
			form.lyrConfiguration().tabScheduling().cmbFrequency().setValue(null);
			clearSchedulerTab();
			hideTabs();
			form.lyrConfiguration().tabScheduling().htmPreview().setHTML("");
			engine.showMessage("Please choose a value for 'Start job at'!");
			return;
		}
		if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() == null)
		{
			clearSchedulerTab();
			hideTabs();//WDEV-17279
			form.lyrConfiguration().tabScheduling().htmPreview().setHTML("");
			return;
		}
		
		form.lyrConfiguration().tabScheduling().htmPreview().setHTML("");
		
		if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.RUNONCE))
		{
			hideTabs();//WDEV-17279
		}
		else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.DAILY))
		{	
			form.lyrConfiguration().tabScheduling().chkStop().setVisible(false);
			form.lyrConfiguration().tabScheduling().dtimStop().setVisible(false);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setVisible(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().setValue(null);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().setValue(null);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().setValue(null);
		}
		else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.WEEKLY))
		{	
			form.lyrConfiguration().tabScheduling().chkStop().setVisible(false);
			form.lyrConfiguration().tabScheduling().dtimStop().setVisible(false);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setVisible(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);	
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
			

			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().intWeekly().setValue(1);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().setValue(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().setValue(true);
			onChkSunValueChanged();
		}
		else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.MONTHLY))
		{
			form.lyrConfiguration().tabScheduling().chkStop().setVisible(false);
			form.lyrConfiguration().tabScheduling().dtimStop().setVisible(false);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setVisible(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);		
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
		}
		else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.CUSTOM))
		{
			form.lyrConfiguration().tabScheduling().chkStop().setVisible(false);
			form.lyrConfiguration().tabScheduling().dtimStop().setVisible(false);
			
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);	
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setVisible(true);
			form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setVisible(false);
			form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
		}
		
		rebuildTrigger();
	}

	//WDEV-17279
	private void hideTabs()
	{
		form.lyrConfiguration().tabScheduling().chkStop().setVisible(false);
		form.lyrConfiguration().tabScheduling().dtimStop().setVisible(false);
		
		form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().setHeaderVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().setHeaderVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().setHeaderVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabAdvanced().setHeaderVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setVisible(false);
		form.lyrConfiguration().tabScheduling().lyrCron().tabPreview().setHeaderVisible(false);
	}
	@Override
	protected void onBtnSetClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateUI())
			return;
		
		ConfiguredJobVo configuredJob = populateDataFromScreen(form.getLocalContext().getConfiguredJob());
		SystemJobVo	systemJob = configuredJob.getScheduledJob();
		
		boolean newJob = configuredJob.getID_ConfiguredJob() == null ? true : false;
		
		if(form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().supportsDataOperations())
		{
			String[] errors = form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().validateData();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}			
		}
		
		String[] errors = systemJob.validate(configuredJob.validate());		
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		try
		{			
			configuredJob = domain.saveSystemJobDetails(configuredJob);
			
			if (newJob)
				addJob(configuredJob.getID_ConfiguredJob());
			else	
				updateJob(configuredJob.getID_ConfiguredJob());			
			
			form.getGlobalContext().Admin.setCurrentJobConfiguration(configuredJob);
			if(form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().supportsDataOperations())
			{
				form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().saveData();
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (DomainRuntimeException e)
		{
			e.printStackTrace();
			return;
		}
		catch (IOException e) 
		{
			e.printStackTrace();
			return;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			return;
		}		
		
		engine.close(DialogResult.OK);
	}
	
	private void updateJob(Integer imsId) throws IOException
	{		
		try 
		{
			ISchedulerServlet a = getQuartzInstance();
			//a.delete(imsId);
			//a.add(imsId);
			a.update(imsId);
		} 
		catch (Exception e) 
		{			engine.showMessage(e.getMessage());
			return;
		}
	}
	
	private void addJob(Integer imsId) throws IOException
	{		
		try 
		{
			ISchedulerServlet a = getQuartzInstance();
			a.add(imsId);
		} 
		catch (Exception e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		engine.close(DialogResult.CANCEL);
	}
	
	public class Trigger
	{
		private String		frequency;
		private DateTime	startDateTime;
		private DateTime	stopDateTime;
		private Integer		days;
		private Integer		hours;
		private Integer		minutes;
		private Integer		weeks;
		private boolean		mon;
		private boolean		tue;
		private boolean		wed;
		private boolean		thu;
		private boolean		fri;
		private boolean		sat;
		private boolean		sun;
		private Integer		dayOfMonth;
		private Time 		timeOfMonth;
		
		public Trigger()
		{
		}

		public Trigger(String xml)
		{
			try
			{
				this.initFromXML(xml);
			}
			catch (DocumentException e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
			catch (ParseException e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
			catch (Exception e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
		}

		public Integer getDays()
		{
			return days;
		}
		
		public Integer getHours()
		{
			return hours;
		}
		
		public Integer getMinutes()
		{
			return minutes;
		}

		public void setDays(Integer days)
		{
			this.days = days;
		}
		
		public void setHours(Integer hours)
		{
			this.hours = hours;
		}
		
		public void setMinutes(Integer minutes)
		{
			this.minutes = minutes;
		}

		public String getFrequency()
		{
			return frequency;
		}

		public void setFrequency(String frequency)
		{
			this.frequency = frequency;
		}

		public boolean isFri()
		{
			return fri;
		}

		public void setFri(boolean fri)
		{
			this.fri = fri;
		}

		public boolean isMon()
		{
			return mon;
		}

		public void setMon(boolean mon)
		{
			this.mon = mon;
		}

		public boolean isSat()
		{
			return sat;
		}

		public void setSat(boolean sat)
		{
			this.sat = sat;
		}

		public DateTime getStartDateTime()
		{
			return startDateTime;
		}

		public void setStartDateTime(DateTime startDateTime)
		{
			this.startDateTime = startDateTime;
		}
		
		public void setStopDateTime(DateTime stopDateTime)
		{
			this.stopDateTime = stopDateTime;
		}
		
		public DateTime getStopDateTime()
		{
			return stopDateTime;
		}

		public boolean isSun()
		{
			return sun;
		}

		public void setSun(boolean sun)
		{
			this.sun = sun;
		}

		public boolean isThu()
		{
			return thu;
		}

		public void setThu(boolean thu)
		{
			this.thu = thu;
		}

		public boolean isTue()
		{
			return tue;
		}

		public void setTue(boolean tue)
		{
			this.tue = tue;
		}

		public boolean isWed()
		{
			return wed;
		}

		public void setWed(boolean wed)
		{
			this.wed = wed;
		}

		public Integer getWeeks()
		{
			return weeks;
		}

		public void setWeeks(Integer weeks)
		{
			this.weeks = weeks;
		}
		

		public Integer getDayOfMonth()
		{
			return dayOfMonth;
		}

		public void setDayOfMonth(Integer dayOfMonth)
		{
			this.dayOfMonth = dayOfMonth;
		}

		public Time getTimeOfMonth()
		{
			return timeOfMonth;
		}

		public void setTimeOfMonth(Time timeOfMonth)
		{
			this.timeOfMonth = timeOfMonth;
		}

		public String toXML()
		{
			if (frequency == null || startDateTime == null)
				return null;

			StringBuffer sb = new StringBuffer();

			sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
			sb.append("<trigger>");
			sb.append("<frequency>");
			sb.append(StringUtils.encodeXML(frequency));
			sb.append("</frequency>");
			sb.append("<startdatetime>");
			sb.append(StringUtils.encodeXML(startDateTime != null ? startDateTime.toString(DateTimeFormat.ISO) : ""));
			sb.append("</startdatetime>");
			sb.append("<stopdatetime>");
			sb.append(StringUtils.encodeXML(stopDateTime != null ? stopDateTime.toString(DateTimeFormat.ISO) : ""));
			sb.append("</stopdatetime>");
			sb.append("<days>");
			sb.append(days != null ? String.valueOf(days) : "");
			sb.append("</days>");
			sb.append("<hours>");
			sb.append(hours != null ? String.valueOf(hours) : "");
			sb.append("</hours>");
			sb.append("<minutes>");
			sb.append(minutes != null ? String.valueOf(minutes) : "");
			sb.append("</minutes>");
			sb.append("<weeks>");
			sb.append(weeks != null ? String.valueOf(weeks) : "");
			sb.append("</weeks>");
			sb.append("<mon>");
			sb.append(mon);
			sb.append("</mon>");
			sb.append("<tue>");
			sb.append(tue);
			sb.append("</tue>");
			sb.append("<wed>");
			sb.append(wed);
			sb.append("</wed>");
			sb.append("<thu>");
			sb.append(thu);
			sb.append("</thu>");
			sb.append("<fri>");
			sb.append(fri);
			sb.append("</fri>");
			sb.append("<sat>");
			sb.append(sat);
			sb.append("</sat>");
			sb.append("<sun>");
			sb.append(sun);
			sb.append("</sun>");
			sb.append("<dayofmonth>");
			sb.append(dayOfMonth != null ? String.valueOf(dayOfMonth) : "");
			sb.append("</dayofmonth>");
			sb.append("<timeofmonth>");
			sb.append(StringUtils.encodeXML(timeOfMonth != null ? timeOfMonth.toString(TimeFormat.FLAT4) : ""));
			sb.append("</timeofmonth>");
			
			sb.append("</trigger>");

			return sb.toString();
		}

		private void initFromXML(String xmlTrigger) throws DocumentException, ParseException
		{
			Document maindoc = getXmlDocument(xmlTrigger);

			Node node = maindoc.selectSingleNode("trigger/frequency");
			if(node != null)
				frequency = node.getStringValue();
			node = maindoc.selectSingleNode("trigger/startdatetime");
			if(node != null && node.getStringValue().length() > 0)
				startDateTime = new DateTime(node.getStringValue());
			node = maindoc.selectSingleNode("trigger/stopdatetime");
			if(node != null && node.getStringValue().length() > 0)
				stopDateTime = new DateTime(node.getStringValue());
			node = maindoc.selectSingleNode("trigger/days");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				days = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/hours");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				hours = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/minutes");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				minutes = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/weeks");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				weeks = new Integer(Integer.parseInt(node.getStringValue()));

			node = maindoc.selectSingleNode("trigger/mon");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				mon = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/tue");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				tue = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/wed");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				wed = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/thu");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				thu = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/fri");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				fri = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/sat");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				sat = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/sun");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				sun = node.getStringValue().equalsIgnoreCase("true") ? true : false;

			node = maindoc.selectSingleNode("trigger/dayofmonth");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				dayOfMonth = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/timeofmonth");
			if(node != null && node.getStringValue().length() > 0)
				timeOfMonth = new Time(node.getStringValue(), TimeFormat.FLAT4);
		}

		private Document getXmlDocument(String xmlBuffer) throws DocumentException
		{
			return DocumentHelper.parseText(xmlBuffer);
		}

		public String getHtmlTranslation()
		{
			return getTriggerTranslation(true);
		}

		public String getTextTranslation()
		{
			return getTriggerTranslation(false);
		}

		public String getTriggerTranslation(boolean bHtml)
		{
			if (frequency == null || startDateTime == null)
				return null;

			String fontHeader = "";
			String fontFooter = "";

			if (bHtml)
			{
				fontHeader = "<FONT color=#0000FF>";
				fontFooter = "</FONT>";
			}

			StringBuffer sb = new StringBuffer(100);

			if (bHtml)
				sb.append("&nbsp;at ");
			else
				sb.append("at ");

			if (frequency.equals(runOnce))
			{
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				sb.append(" once starting on ");
				
				sb.append(fontHeader);
				sb.append(startDateTime.getDate());
				sb.append(fontFooter);
				
				return sb.toString();
			}			
			else if (frequency.equals(daily))
			{
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				sb.append(" every ");

				if (days != null && days.intValue() == 1)
					sb.append("day ");
				else
				{
					if (days != null)
					{
						sb.append(fontHeader);
						sb.append(days.toString());
						sb.append(fontFooter);
						sb.append(" days ");
					}
				}
				if (hours != null && hours.intValue() == 1)
				{
					if (days != null)
					{
						sb.append("one hour");
					}
					else
					{
						sb.append("hour ");
					}
				}
				else
				{
					if (hours != null)
					{
						sb.append(fontHeader);				
						sb.append(hours.toString());					
						sb.append(fontFooter);
						sb.append(" hours ");
					}
				}
				if (minutes != null && minutes.intValue() == 1)
				{
					if (days != null || hours != null)
					{					
						sb.append("one minute");
					}
					else
					{
						sb.append("minute");
					}
				}
				else
				{
					if (minutes != null)
					{
						sb.append(fontHeader);
						sb.append(minutes.toString());
						sb.append(fontFooter);
						sb.append(" minutes ");
					}
				}

				sb.append(", starting on ");
				sb.append(fontHeader);
				sb.append(startDateTime.getDate().toString());
				sb.append(fontFooter);
				
				sb.append(" at ");
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				if (stopDateTime != null)
				{
					sb.append(" and stop on ");
					sb.append(fontHeader);
					sb.append(stopDateTime.getDate().toString());
					sb.append(fontFooter);
					
					sb.append(" at ");
					sb.append(fontHeader);
					sb.append(stopDateTime.getTime().toString());
					sb.append(fontFooter);
				}

				return sb.toString();
			}
			else if (frequency.equals(weekly))
			{
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				sb.append(", every ");

				String comma = "";

				if (mon == false && tue == false && wed == false && thu == false && fri == false && sat == false && sun == false)
					return "";

				if (mon == true)
				{
					sb.append(fontHeader);
					sb.append("Mon");
					sb.append(fontFooter);
					comma = ",";
				}
				if (tue == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Tue");
					sb.append(fontFooter);
					comma = ",";
				}
				if (wed == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Wed");
					sb.append(fontFooter);
					comma = ",";
				}
				if (thu == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Thu");
					sb.append(fontFooter);
					comma = ",";
				}
				if (fri == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Fri");
					sb.append(fontFooter);
					comma = ",";
				}
				if (sat == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Sat");
					sb.append(fontFooter);
					comma = ",";
				}
				if (sun == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Sun");
					sb.append(fontFooter);
					comma = ",";
				}

				if (weeks != null)
				{
					if (weeks.intValue() == 1)
						sb.append(" of every week");
					else
					{
						sb.append(" of every ");
						sb.append(fontHeader);
						sb.append(weeks.toString());
						sb.append(fontFooter);
						sb.append(" weeks");
					}
				}

				sb.append(", starting on ");
				sb.append(fontHeader);
				sb.append(startDateTime.getDate().toString());
				sb.append(fontFooter);
				
				sb.append(" at ");
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				if (stopDateTime != null)
				{
					sb.append(" and stop on ");
					sb.append(fontHeader);
					sb.append(stopDateTime.getDate().toString());
					sb.append(fontFooter);
					
					sb.append(" at ");
					sb.append(fontHeader);
					sb.append(stopDateTime.getTime().toString());
					sb.append(fontFooter);
				}

				return sb.toString();
			}
			else if (frequency.equals(monthly))
			{
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(timeOfMonth != null)
					sb.append(timeOfMonth.toString());
				
				if(bHtml)
					sb.append("</FONT>");
				
				sb.append(" on the ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(dayOfMonth != null)
				{
					sb.append(dayOfMonth.intValue());
				
					if(dayOfMonth.intValue() == 1 || dayOfMonth.intValue() == 21 || dayOfMonth.intValue() == 31)
						sb.append("st ");
					else if(dayOfMonth.intValue() == 2 || dayOfMonth.intValue() == 22)
						sb.append("nd ");
					else if(dayOfMonth.intValue() == 3 || dayOfMonth.intValue() == 23)
						sb.append("rd ");
					else 
						sb.append("th ");
				}
				
				if(bHtml)
					sb.append("</FONT>");
				
				sb.append("day of every month");
				
				sb.append(", starting on ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(startDateTime != null && startDateTime.getDate() != null)
					sb.append(startDateTime.getDate().toString());
				
				if (stopDateTime != null)
				{
					sb.append(", stoping on ");
				
					if(bHtml)
						sb.append("<FONT color=#0000FF>");								
					
					sb.append(stopDateTime.getDate().toString());
				}
				
				if(bHtml)
					sb.append("</FONT>");
				
				return sb.toString();
			}
			
			return null;
		}
	}
		
	private String getTriggerFromScreen()
	{
		Trigger trigger = new Trigger();
		
		trigger.setFrequency(form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() != null ? form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().toString() : null);
		trigger.setStartDateTime(form.lyrConfiguration().tabScheduling().dtimStartDate().getValue());
		trigger.setStopDateTime(form.lyrConfiguration().tabScheduling().dtimStop().getValue());
		trigger.setDays(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().getValue());
		trigger.setHours(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().getValue());
		trigger.setMinutes(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().getValue());
		trigger.setWeeks(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().intWeekly().getValue());
		trigger.setMon(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().getValue());
		trigger.setTue(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().getValue());
		trigger.setWed(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().getValue());
		trigger.setThu(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().getValue());
		trigger.setFri(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().getValue());
		trigger.setSat(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().getValue());
		trigger.setSun(form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().getValue());

		trigger.setDayOfMonth(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().getValue());
		trigger.setTimeOfMonth(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().timMonthlyTime().getValue());
		
		return trigger.toXML();
	}
	
	private ConfiguredJobVo populateDataFromScreen(ConfiguredJobVo configuredJob) 
	{ 
		if (configuredJob == null)
			configuredJob = new ConfiguredJobVo();
		
		SystemJobVo systemJob = form.getLocalContext().getSystemJob();
		if (systemJob != null)
		{
			configuredJob.setName(form.lyrConfiguration().tabScheduling().txtName().getValue());
			configuredJob.setDescription("Configured " + systemJob.getName());			
			configuredJob.setScheduledJob(systemJob);
			configuredJob.setFrequency(form.lyrConfiguration().tabScheduling().cmbFrequency().getValue());
			configuredJob.setStartDateTime(form.lyrConfiguration().tabScheduling().dtimStartDate().getValue());
			configuredJob.setCronExpression(getTriggerFromScreen());
			configuredJob.setCronExpressionDisplay(new Trigger(configuredJob.getCronExpression()).getTriggerTranslation(false));
			configuredJob.setIsActive(true);			
			configuredJob.setNotificationsOnSuccess(form.getLocalContext().getNotificationOnSuccess());
			configuredJob.setNotificationsOnFailure(form.getLocalContext().getNotificationOnFailure());
			
			
			return configuredJob;
		}
		
		return null;
	}


	@Override
	protected void onIntDaysValueChanged() throws PresentationLogicException 
	{	
		if (form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().getValue() != null)
		{
			int days = form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().getValue();
			if (days > 0 && days > 366)
			{
				engine.showMessage("Days must be between 0 and 365");
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().setValue(null);
			}
		}
		
		rebuildTrigger();
	}


	@Override
	protected void onIntHoursValueChanged() throws PresentationLogicException 
	{	
		if (form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().getValue() != null)
		{
			int hours = form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().getValue();
			if (hours > 0 && hours > 24)
			{
				engine.showMessage("Hours must be between 0 and 23");
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().setValue(null);
			}
		}
		
		rebuildTrigger();
	}


	@Override
	protected void onIntMinutesValueChanged() throws PresentationLogicException 
	{	
		if (form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().getValue() != null)
		{
			int minutes = form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().getValue();
			if (minutes > 0 && minutes > 60)
			{
				engine.showMessage("Minutes must be between 0 and 59");
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().setValue(null);
			}
		}		
		
		rebuildTrigger();
	}


	private void rebuildTrigger() 
	{
		String newValue = new Trigger(getTriggerFromScreen()).getTriggerTranslation(true);
		form.lyrConfiguration().tabScheduling().htmPreview().setHTML(newValue);
	}

	@Override
	protected void onDtimStartDateValueChanged() throws PresentationLogicException 
	{		
		form.lyrConfiguration().tabScheduling().cmbFrequency().setEnabled(true);
		
		//WDEV-17279
		if (form.lyrConfiguration().tabScheduling().dtimStartDate().getValue()==null)
		{
			form.lyrConfiguration().tabScheduling().cmbFrequency().setValue(null);
			form.lyrConfiguration().tabScheduling().htmPreview().setHTML("");
			clearSchedulerTab();
			hideTabs();
			return;
		}
		if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue()!=null)
		{
			rebuildTrigger();
		}
	}


	@Override
	protected void onChkFriValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();	
	}

	@Override
	protected void onChkMonValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}

	@Override
	protected void onChkSatValueChanged() throws PresentationLogicException 
	{
		rebuildTrigger();	
	}

	@Override
	protected void onChkSunValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}

	@Override
	protected void onChkThuValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}

	@Override
	protected void onChkTueValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}


	@Override
	protected void onChkWedValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}


	@Override
	protected void onIntDayOfMonthValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}


	@Override
	protected void onTimMonthlyTimeValueChanged() throws PresentationLogicException 
	{	
		rebuildTrigger();
	}
	
	@Override
	protected void onBtnPreviousClick() throws PresentationLogicException 
	{
		int currentSelectedTab = form.getLocalContext().getCurrentSelectedTab();
		
		switch (currentSelectedTab) {			
			case SCHEDULER_TAB: 	break;
			case CONFIGURATION_TAB:	showLyrConfigurationTabs(true, false, false);
									manageButtons(false, true, false, true);
									form.lyrConfiguration().showtabScheduling();			
									form.getLocalContext().setCurrentSelectedTab(SCHEDULER_TAB);
									break;
			case NOTIFICATIONS_TAB:					
									if(form.getLocalContext().getConfiguredJob() != null && form.getLocalContext().getConfiguredJob().getScheduledJob() != null && form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() != null)
									{
										if (form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() > 0)
										{
											showLyrConfigurationTabs(false, true, false);
											form.lyrConfiguration().showtabConfiguration();			
											form.getLocalContext().setCurrentSelectedTab(CONFIGURATION_TAB);
											manageButtons(true, true, false, true);
											break;
										}
									}

									form.lyrConfiguration().showtabScheduling();			
									form.getLocalContext().setCurrentSelectedTab(SCHEDULER_TAB);
									showLyrConfigurationTabs(true, false, false);
									manageButtons(false, true, false, true);
									
									break;						
			default:
									break;
		}
		
	}

	private void clearSchedulerTab() 
	{	
		if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() != null)
		{
			if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.DAILY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().setValue(null);
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().setValue(null);
				form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().setValue(null);
			}
			else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.WEEKLY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().setValue(true);
				form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().setValue(true);
			}
			else if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue().equals(JobRunningFrequency.MONTHLY))
			{
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().setValue(null);
				form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().timMonthlyTime().setValue(null);
			}
		}
	}

	private boolean validateUI()
	{
		int currentSelectedTab = form.getLocalContext().getCurrentSelectedTab();
		ArrayList<String> errors = new ArrayList<String>();
		
		switch (currentSelectedTab) 
		{
			case SCHEDULER_TAB: 	if (form.lyrConfiguration().tabScheduling().dtimStartDate().getValue() == null)
									{
										errors.add("Job start date is mandatory");
									}
									if (form.lyrConfiguration().tabScheduling().cmbFrequency().getValue() == null)
									{
										errors.add("Job frequency is mandatory");//WDEV-17279
									}
									if(JobRunningFrequency.DAILY.equals(form.lyrConfiguration().tabScheduling().cmbFrequency().getValue()))
									{
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intDays().getValue() == null)
										{
											errors.add("Day(s) is mandatory");
										}
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intHours().getValue() == null)
										{
											errors.add("Hour(s) is mandatory");
										}
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabDaily().intMinutes().getValue() == null)
										{
											errors.add("Minute(s) is mandatory");
										}
									}
									if(JobRunningFrequency.WEEKLY.equals(form.lyrConfiguration().tabScheduling().cmbFrequency().getValue()))
									{
										if(!form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkMon().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkTue().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkWed().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkThu().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkFri().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSat().getValue()
												&& !form.lyrConfiguration().tabScheduling().lyrCron().tabWeekly().chkSun().getValue())
										{
											errors.add("Please select at least one day of the week");
										}
									}
									if(JobRunningFrequency.MONTHLY.equals(form.lyrConfiguration().tabScheduling().cmbFrequency().getValue()))
									{
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().getValue() == null)
										{
											errors.add("Day is mandatory");
										}
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().timMonthlyTime().getValue() == null)
										{
											errors.add("Time is mandatory");
										}
										if(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().getValue() != null)
										{
											if(form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().getValue() > 31 || form.lyrConfiguration().tabScheduling().lyrCron().tabMonthly().intDayOfMonth().getValue() < 1)
											{
												errors.add("Day of month values must be between 1 and 31");
											}
										}
									}
									break;
			case CONFIGURATION_TAB:	showLyrConfigurationTabs(false, false, true);
									manageButtons(true, false, true, true);												
									form.getLocalContext().setCurrentSelectedTab(NOTIFICATIONS_TAB);
									break;
			default:
									break;
		}
		
		if (errors.size() > 0) 
		{
			String[] allErrors = new String[errors.size()];
			errors.toArray(allErrors);
			engine.showErrors("Invalid Scheduler Job", allErrors);
			
			return true;
		}
		
		return false;
	}
	
	private void saveJobScheduler()
	{						
		ConfiguredJobVo configuredJob = populateDataFromScreen(form.getLocalContext().getConfiguredJob());
		form.getLocalContext().setConfiguredJob(configuredJob);
	}

	@Override
	protected void onBtnNextClick() throws PresentationLogicException 
	{
		int currentSelectedTab = form.getLocalContext().getCurrentSelectedTab();
		if (validateUI())
			return;
		
		manageNextButtonAction(currentSelectedTab);
		
	}

	private void manageNextButtonAction(int currentSelectedTab)
			throws PresentationLogicException {
		switch (currentSelectedTab) 
		{							
			case SCHEDULER_TAB: 	saveJobScheduler();
									form.getLocalContext().setPreviousSelectedTab(SCHEDULER_TAB);
									int h = 0;
									if(/*form.getLocalContext().getConfiguredJob() != null && form.getLocalContext().getConfiguredJob().getScheduledJob() != null && */form.getLocalContext().getSystemJob().getConfigFormId() != null)
									{
										if(form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() != null)
										{											
											form.getGlobalContext().Admin.setCurrentJobConfiguration(form.getLocalContext().getConfiguredJob());
											FormName formName = null;
											if (form.getGlobalContext().Admin.getSystemJob().getConfigFormId() > 0)
											{
												if (form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().getOpenedForm() == null)
												{
													formName = new FormName(form.getLocalContext().getSystemJob().getConfigFormId());
													form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().open(formName);
												}
												
												showLyrConfigurationTabs(false, true, false);
												form.lyrConfiguration().showtabConfiguration();
												form.getLocalContext().setCurrentSelectedTab(CONFIGURATION_TAB);
												manageButtons(true, true, false, true);
												
												break;
											}											
										}
										
										showLyrConfigurationTabs(false, false, true);
										form.lyrConfiguration().showtabNotification();
										form.getLocalContext().setCurrentSelectedTab(NOTIFICATIONS_TAB);
										manageButtons(true, false, true, true);
										
										break;
									}
									
									form.lyrConfiguration().showtabNotification();
									form.getLocalContext().setCurrentSelectedTab(CONFIGURATION_TAB);
									manageButtons(true, true, false, true);
									
									break;
			case CONFIGURATION_TAB:	
									form.getLocalContext().setPreviousSelectedTab(CONFIGURATION_TAB);
									form.lyrConfiguration().showtabNotification();
									showLyrConfigurationTabs(false, false, true);
 									manageButtons(true, false, true, true);
									
									break;
			case NOTIFICATIONS_TAB:										
									form.getLocalContext().setPreviousSelectedTab(NOTIFICATIONS_TAB);
									showLyrConfigurationTabs(false, true, false);
									manageButtons(true, false, true, true);
				
									break;	
			default:
									break;
		}
		updateContextMenu();
	}
	
	@Override
	protected void onlyrConfigurationTabChanged(LayerBridge tab) 
	{	
		if (tab.equals(form.lyrConfiguration().tabScheduling()))
		{
			form.getLocalContext().setPreviousSelectedTab(SCHEDULER_TAB);
		}
		else if (tab.equals(form.lyrConfiguration().tabConfiguration()))
		{
			form.getLocalContext().setPreviousSelectedTab(CONFIGURATION_TAB);
			if (form.getLocalContext().getPreviousSelectedTabIsNotNull() && form.getLocalContext().getPreviousSelectedTab().equals(SCHEDULER_TAB))
			{
				saveJobScheduler();
			}
			
			if(form.getLocalContext().getConfiguredJob() != null && form.getLocalContext().getConfiguredJob().getScheduledJob() != null && form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() != null)
			{
				if(form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().getOpenedForm() == null || form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().getOpenedForm().getID() != form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId())
				{
					form.getGlobalContext().Admin.setCurrentJobConfiguration(form.getLocalContext().getConfiguredJob());
					FormName formName = null;
					if (form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId() > 0)
					{
						formName = new FormName(form.getLocalContext().getConfiguredJob().getScheduledJob().getConfigFormId());
						form.lyrConfiguration().tabConfiguration().dynamicFormConfiguration().open(formName);
					}											
				}
			}
		}
		else if (tab.equals(form.lyrConfiguration().tabNotification()))
		{
			updateContextMenu();
			form.getLocalContext().setPreviousSelectedTab(NOTIFICATIONS_TAB);
			if (form.getLocalContext().getPreviousSelectedTabIsNotNull() && form.getLocalContext().getPreviousSelectedTab().equals(SCHEDULER_TAB))
			{
				saveJobScheduler();
			}
			
			populateNotificationTab(form.getLocalContext().getConfiguredJob());
		}
	}

	private void populateNotificationTab(ConfiguredJobVo configuredJob) 
	{	
		ConfiguredJobNotificationVoCollection success = configuredJob.getNotificationsOnSuccess();
		ConfiguredJobNotificationVoCollection failed = configuredJob.getNotificationsOnFailure();
		
		form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().clear();
		
		for (int i = 0; i < success.size(); i++) 
		{
			ConfiguredJobNotificationVo notification = success.get(i);
			
			grdSuccessfulyRow row = form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().newRow();
			row.setColUser(notification.getUserIsNotNull() ? notification.getUser().getUsername() : null);
			
			String delivery = "";
			for (int j = 0; j < notification.getDelivery().size(); j++) 
			{
				if (delivery != "")
					delivery += ", ";
				
				if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.UI))
				{
					delivery += NotificationDelivery.UI.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.EMAIL))
				{
					delivery += NotificationDelivery.EMAIL.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.PUSH))
				{
					delivery += NotificationDelivery.PUSH.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.SMS))
				{
					delivery += NotificationDelivery.SMS.toString();
				}
			}
			
			row.setColDelivery(delivery);
			row.setValue(notification);
		}
		
		form.lyrConfiguration().tabNotification().grdFailed().getRows().clear();
		
		for (int i = 0; i < failed.size(); i++) 
		{
			ConfiguredJobNotificationVo notification = failed.get(i);//WDEV-17528
			
			grdFailedRow row = form.lyrConfiguration().tabNotification().grdFailed().getRows().newRow();
			row.setColUser(notification.getUserIsNotNull() ? notification.getUser().getUsername() : null);
			
			String delivery = "";
			for (int j = 0; j < notification.getDelivery().size(); j++) 
			{
				if (delivery != "")
					delivery += ", ";
				
				if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.UI))
				{
					delivery += NotificationDelivery.UI.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.EMAIL))
				{
					delivery += NotificationDelivery.EMAIL.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.PUSH))
				{
					delivery += NotificationDelivery.PUSH.toString();
				}
				else if (notification.getDelivery().get(j).equals(ims.admin.vo.lookups.NotificationDelivery.SMS))
				{
					delivery += NotificationDelivery.SMS.toString();
				}
			}
			
			row.setColDelivery(delivery);
			row.setValue(notification);
		}		
	}

	@Override
	protected void onGrdFailedSelectionChanged()	throws PresentationLogicException 
	{	
		updateContextMenu();
	}

	@Override
	protected void onGrdSuccessfulySelectionChanged()	throws PresentationLogicException 
	{	
		updateContextMenu();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{	
		if (sender.equals(form.lyrConfiguration().tabNotification().grdSuccessfuly()))
		{
			switch (menuItemID)
			{				
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.New:
					form.getLocalContext().setNotificationJobStatus(true);
					form.getGlobalContext().Admin.setSystemJobNotification(null);
					engine.open(form.getForms().Admin.SystemJobNotificationDialog);
				break;
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.Edit:
					form.getLocalContext().setNotificationJobStatus(true);
					form.getGlobalContext().Admin.setSystemJobNotification(form.lyrConfiguration().tabNotification().grdSuccessfuly().getSelectedRow().getValue());
					engine.open(form.getForms().Admin.SystemJobNotificationDialog);
				break;
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotification.Remove:
					form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().remove(form.lyrConfiguration().tabNotification().grdSuccessfuly().getSelectedRowIndex());
					setNotificationOnSuccess();
				break;
			}
		}
		else if (sender.equals(form.lyrConfiguration().tabNotification().grdFailed()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.New:
					form.getLocalContext().setNotificationJobStatus(false);
					form.getGlobalContext().Admin.setSystemJobNotification(null);
					engine.open(form.getForms().Admin.SystemJobNotificationDialog);
				break;
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.Edit:
					form.getLocalContext().setNotificationJobStatus(false);//WDEV-17275
					form.getGlobalContext().Admin.setSystemJobNotification(form.lyrConfiguration().tabNotification().grdFailed().getSelectedRow().getValue());
					engine.open(form.getForms().Admin.SystemJobNotificationDialog);
				break;
				case GenForm.ContextMenus.AdminNamespace.SystemJobDetailsNotificationFailed.Remove:
					form.lyrConfiguration().tabNotification().grdFailed().getRows().remove(form.lyrConfiguration().tabNotification().grdFailed().getSelectedRowIndex());
					setNotificationOnFailure();
				break;
			}	
		}
		
		updateContextMenu();//WDEV-17275
	}
	
	private void updateContextMenu() 
	{
		form.getContextMenus().Admin.getSystemJobDetailsNotificationNewItem().setVisible(true);
		form.getContextMenus().Admin.getSystemJobDetailsNotificationEditItem().setVisible(form.lyrConfiguration().tabNotification().grdSuccessfuly().getSelectedRow() != null ?  true: false);
		form.getContextMenus().Admin.getSystemJobDetailsNotificationRemoveItem().setVisible(form.lyrConfiguration().tabNotification().grdSuccessfuly().getSelectedRow() != null ?  true: false);
		
		form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedNewItem().setVisible(true);
		form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedEditItem().setVisible(form.lyrConfiguration().tabNotification().grdFailed().getSelectedRow() != null ?  true: false);
		form.getContextMenus().Admin.getSystemJobDetailsNotificationFailedRemoveItem().setVisible(form.lyrConfiguration().tabNotification().grdFailed().getSelectedRow() != null ?  true: false);
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Admin.SystemJobNotificationDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				if (form.getLocalContext().getNotificationJobStatusIsNotNull() && form.getGlobalContext().Admin.getSystemJobNotification().getUserIsNotNull())					
				{
					
					
					if (form.getLocalContext().getNotificationJobStatus())
					{			
						form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().clear();
						grdSuccessfulyRow row = form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().newRow();
						row.setColUser(form.getGlobalContext().Admin.getSystemJobNotification().getUser().getUsername());
						
						String delivery = "";
						for (int i = 0; i < form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().size(); i++) 
						{
							if (delivery != "")
								delivery += "<br>";
							
							if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.UI))
							{
								delivery += "" + NotificationDelivery.UI.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.EMAIL))
							{
								delivery += NotificationDelivery.EMAIL.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.PUSH))
							{
								delivery += NotificationDelivery.PUSH.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.SMS))
							{
								delivery += NotificationDelivery.SMS.toString();
							}
						}
						
						row.setColDelivery(delivery);
						row.setValue(form.getGlobalContext().Admin.getSystemJobNotification());
						
						setNotificationOnSuccess();
					}
					else
					{	
						form.lyrConfiguration().tabNotification().grdFailed().getRows().clear();
						grdFailedRow row = form.lyrConfiguration().tabNotification().grdFailed().getRows().newRow();
						row.setColUser(form.getGlobalContext().Admin.getSystemJobNotification().getUser().getUsername());
						
						String delivery = "";
						for (int i = 0; i < form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().size(); i++) 
						{
							if (delivery != "")
								delivery += "<br>";
							
							if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.UI))
							{
								delivery += "" + NotificationDelivery.UI.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.EMAIL))
							{
								delivery += NotificationDelivery.EMAIL.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.PUSH))
							{
								delivery += NotificationDelivery.PUSH.toString();
							}
							else if (form.getGlobalContext().Admin.getSystemJobNotification().getDelivery().get(i).equals(ims.admin.vo.lookups.NotificationDelivery.SMS))
							{
								delivery += NotificationDelivery.SMS.toString();
							}
						}
						
						row.setColDelivery(delivery);
						row.setValue(form.getGlobalContext().Admin.getSystemJobNotification());
						
						setNotificationOnFailure();
					}
				}				
			}
		}
		
		updateContextMenu();//WDEV-17275
	}

	private void setNotificationOnSuccess() 
	{
		ConfiguredJobVo	jobDetails 	= form.getLocalContext().getConfiguredJob();
		ConfiguredJobNotificationVoCollection notificationOnSuccess = jobDetails.getNotificationsOnSuccess();		
		if (notificationOnSuccess == null)
			notificationOnSuccess = new ConfiguredJobNotificationVoCollection();
		else
			notificationOnSuccess.clear();
		
		for (int i = 0; i < form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().size(); i++) 
		{
			notificationOnSuccess.add(form.lyrConfiguration().tabNotification().grdSuccessfuly().getRows().get(i).getValue());
		}
		
		jobDetails.setNotificationsOnSuccess(notificationOnSuccess);
		form.getLocalContext().setNotificationOnSuccess(notificationOnSuccess);
		form.getLocalContext().setConfiguredJob(jobDetails);
	}
	
	private void setNotificationOnFailure() 
	{
		ConfiguredJobVo	jobDetails 	= form.getLocalContext().getConfiguredJob();
		ConfiguredJobNotificationVoCollection notificationOnFailure = jobDetails.getNotificationsOnFailure();		
		if (notificationOnFailure == null)
			notificationOnFailure = new ConfiguredJobNotificationVoCollection();
		else
			notificationOnFailure.clear();
		
		for (int i = 0; i < form.lyrConfiguration().tabNotification().grdFailed().getRows().size(); i++) 
		{
			notificationOnFailure.add(form.lyrConfiguration().tabNotification().grdFailed().getRows().get(i).getValue());
		}
		
		jobDetails.setNotificationsOnFailure(notificationOnFailure);
		form.getLocalContext().setNotificationOnFailure(notificationOnFailure);
		form.getLocalContext().setConfiguredJob(jobDetails);
	}
}
