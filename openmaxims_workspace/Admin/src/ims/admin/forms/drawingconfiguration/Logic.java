//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.31 build 2068.27671)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.drawingconfiguration;

import ims.core.vo.DrawingAreaVo;
import ims.core.vo.DrawingAreaVoCollection;
import ims.core.vo.DrawingGroupVo;
import ims.core.vo.DrawingGroupVoCollection;
import ims.core.vo.DrawingImageVo;
import ims.core.vo.DrawingImageVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlGroupCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		

		form.lyrDrawing().showtabRegionConfig();
		listImages();

		if (form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue() != null)
			form.getLocalContext().setimageSelectedName(form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue().getImageName());

		try
		{
			open();
		}
		catch (FormOpenException e)
		{
			form.setMode(FormMode.VIEW);
			engine.showErrors(new String[]{"No image available"});
			
			return;

		}
	
	
	}

	protected void onBtnNewRegionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setYesNoDialogMessage("This will remove all references to the current region configuration - Do you wish to continue");
		engine.open(form.getForms().Core.YesNoDialog);

	}

	protected void onBtnSaveRegionClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.lyrDrawing().tabRegionConfig().btnUpdateRegion().setEnabled(true);

		DrawingImageVo voDrawingImage = populateDataFromScreen();

		voDrawingImage.setID_DrawingImage(null);

		String[] arrErrors = voDrawingImage.validate();
		if (arrErrors == null)
		{
			try
			{
				domain.saveDrawingImage(voDrawingImage);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}

		form.getLocalContext().setimageRecord(voDrawingImage);
		listImages();
		open();
	}

	private void open() throws ims.framework.exceptions.FormOpenException
	{
		form.setMode(FormMode.VIEW);
		try
		{
			onCmbDrawingImageValueChanged();
		}
		catch (FormOpenException e)
		{

			throw new FormOpenException();

		}
		catch (PresentationLogicException e)
		{

		}

	}

	private void displayImage(DrawingImageVo voImageRetrieved)
	{

		if (voImageRetrieved != null)
		{
			form.getLocalContext().setimageRecord(voImageRetrieved);
			if (voImageRetrieved.getImageIsNotNull())
			{
				Image repImage = engine.getRegisteredImage(form.getLocalContext().getimageRecord().getImage().getID_AppImage().intValue());
				form.lyrDrawing().tabRegionConfig().drawingConfig().setImage(repImage); // Registered image loaded
				if (voImageRetrieved.getRootGroup() != null && voImageRetrieved.getRootGroup().getGroupIDIsNotNull())
				{
					DrawingControlGroup grp = new DrawingControlGroup(voImageRetrieved.getRootGroup().getGroupID().intValue(), form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue().getImageName());
					form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(grp);

					// set areas
					DrawingControlGroup rootNode = new DrawingControlGroup(voImageRetrieved.getRootGroup().getGroupID().intValue(), voImageRetrieved.getRootGroup().getGroupName());
					convertAllAreasToNode(voImageRetrieved.getRootGroup(), rootNode);
					form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(rootNode);
					form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas();
				}
			}
		}

		/*
		 * clearDrawingConfigControl();
		 * 
		 * DrawingImageVo voImageRetrieved = domain.getDrawingImage(voImagetoGet);
		 * 
		 * if (voImageRetrieved != null) { form.getLocalContext().setimageRecord(voImageRetrieved);
		 * 
		 * DrawingControlGroup rootNode = new DrawingControlGroup(voImageRetrieved.getRootGroup().getGroupID().intValue(), voImageRetrieved.getRootGroup().getGroupName()); convertAllAreasToNode(voImageRetrieved.getRootGroup(), rootNode); form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(rootNode); DrawingControlGroup areasJustSet = form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas(); }
		 */
	}

	void convertAllAreasToNode(DrawingGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; j < voGroup.getChildGroups().size(); j++)
		{
			DrawingGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}

	private DrawingControlGroup createDrawingControlGroup(DrawingGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(DrawingAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}

	void convertAllAreasToVO(DrawingControlGroup node, DrawingGroupVo voGroup)
	{
		voGroup.setAreaCollection(new DrawingAreaVoCollection());
		voGroup.setChildGroups(new DrawingGroupVoCollection());
		voGroup.setGroupName(node.getName());
		voGroup.setGroupID(new Integer(node.getID()));

		DrawingControlAreaCollection areas = node.getAreas();
		for (int i = 0; i < areas.size(); i++)
		{
			DrawingControlArea area = areas.get(i);
			voGroup.getAreaCollection().add(createVoArea(area));
		}

		DrawingControlGroupCollection groups = node.getGroups();
		for (int i = 0; i < groups.size(); i++)
		{
			DrawingControlGroup group = groups.get(i);
			voGroup.getChildGroups().add(createVoGroup(group));
			convertAllAreasToVO(group, voGroup.getChildGroups().get(i));
		}
	}

	private DrawingGroupVo createVoGroup(DrawingControlGroup group)
	{
		DrawingGroupVo voGroup = new DrawingGroupVo();
		voGroup.setGroupName(group.getName());
		voGroup.setGroupID(new Integer(group.getID()));

		return voGroup;
	}

	private DrawingAreaVo createVoArea(DrawingControlArea area)
	{
		DrawingAreaVo voArea = new DrawingAreaVo();
		voArea.setAreaName(area.getName());
		voArea.setAreaVectors(area.getPath());
		voArea.setAreaID(new Integer(area.getID()));

		return voArea;
	}

	private DrawingImageVo populateDataFromScreen()
	{
		DrawingImageVo voDrawingImage = form.getLocalContext().getimageRecord();

		voDrawingImage.setRootGroup(new DrawingGroupVo());
		convertAllAreasToVO(form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas(), voDrawingImage.getRootGroup());
		voDrawingImage.setImage(voDrawingImage.getImage());
		voDrawingImage.setImageName(voDrawingImage.getRootGroup().getGroupName());
		return voDrawingImage;
	}

	private void clearDrawingConfigControl()
	{
		DrawingImageVo voDrawingImage = form.getLocalContext().getimageRecord();
		if (voDrawingImage != null)
		{
			Image repImage = engine.getRegisteredImage(voDrawingImage.getImage().getID_AppImage().intValue());
			form.lyrDrawing().tabRegionConfig().drawingConfig().setImage(repImage); // will be of type appImage set in select image tab
			DrawingControlGroup grp = new DrawingControlGroup(1, form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue().getImageName());
			form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(grp);
		}
	}

	private void listImages()
	{
		form.lyrDrawing().tabRegionConfig().cmbDrawingImage().clear();

		DrawingImageVoCollection voImageCollection = domain.listDrawingImage();

		for (int i = 0; i < voImageCollection.size(); i++)
		{

			form.lyrDrawing().tabRegionConfig().cmbDrawingImage().newRow(voImageCollection.get(i), voImageCollection.get(i).getImageName());
			if (i == 0)
				form.lyrDrawing().tabRegionConfig().cmbDrawingImage().setValue(voImageCollection.get(i));

		}

		if (form.getLocalContext().getimageSelectedName() != null)
		{
			// set to previously selected entry in combo
			DrawingImageVo voImage = null;
			for (int p = 0; p < form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValues().size(); p++)
			{
				voImage = (DrawingImageVo) form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValues().get(p);
				if (voImage.getImageName().equals(form.getLocalContext().getimageSelectedName()))
				{
					form.lyrDrawing().tabRegionConfig().cmbDrawingImage().setValue(voImage);
					break;
				}
			}
		}
	}

	protected void onGrdImageSelectionChanged() throws PresentationLogicException
	{
		if (form.lyrDrawing().tabImageSelect().grdImage().getValue() != null)
		{
			form.lyrDrawing().tabImageSelect().imgPreview().setValue(form.getImages().COE.BodyChart);
			form.lyrDrawing().tabImageSelect().txtImageName().setValue(form.lyrDrawing().tabImageSelect().grdImage().getValue());
			form.lyrDrawing().tabImageSelect().txtImagePath().setValue(engine.getRegisteredImage(form.getImages().COE.BodyChart.getImageId()).getImagePath());
		}
	}

	protected void onBtnCancelRegionClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	protected void onBtnUpdateRegionClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnNewImageClick() throws PresentationLogicException
	{

	}

	protected void onBtnUpdateImageClick() throws PresentationLogicException
	{

	}

	protected void onBtnSaveImageClick() throws PresentationLogicException
	{

	}

	protected void onBtnCancelImageClick() throws PresentationLogicException
	{

	}

	protected void onLnkImageClick() throws PresentationLogicException
	{
		form.lyrDrawing().showtabImageSelect();
	}

	protected void onLnkRegionClick() throws PresentationLogicException
	{
		form.lyrDrawing().showtabRegionConfig();
	}

	protected void onCmbDrawingImageValueChanged() throws PresentationLogicException
	{
		if (form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue() != null)
		{
			form.getLocalContext().setimageSelectedName(form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue().getImageName());

			DrawingImageVo image = domain.getDrawingImage(form.lyrDrawing().tabRegionConfig().cmbDrawingImage().getValue());

			if (image != null)
			{

				displayImage(image);

			}
			else
			{
				// engine.showErrors( new String[]{"No image available"});
				throw new FormOpenException();
			}
			form.lyrDrawing().tabRegionConfig().btnNewRegion().setEnabled(true);
			form.lyrDrawing().tabRegionConfig().btnUpdateRegion().setEnabled(true);
		}
		else
		{
			form.lyrDrawing().tabRegionConfig().btnNewRegion().setEnabled(false);
			form.lyrDrawing().tabRegionConfig().btnUpdateRegion().setEnabled(false);
			form.lyrDrawing().tabRegionConfig().drawingConfig().setImage(null); //WDEV-15254
			form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(null);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.admin.forms.drawingconfig.Handlers#onFormDialogClosed(ims.framework.FormName, ims.framework.enumerations.DialogResult)
	 */
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			form.setMode(FormMode.EDIT);
			form.lyrDrawing().tabRegionConfig().btnUpdateRegion().setEnabled(false);
			clearDrawingConfigControl();
			if (form.getLocalContext().getimageRecord() != null)
			{
				DrawingImageVo voDrawingImage = new DrawingImageVo();
				voDrawingImage.setImage(form.getLocalContext().getimageRecord().getImage());
				voDrawingImage.setVersionNumber(form.getLocalContext().getimageRecord().getVersionNumber());
				form.getLocalContext().setimageRecord(voDrawingImage);
			}
		}
		else if (formName.equals(form.getForms().Core.YesNoDialog) && (result.equals(DialogResult.NO) || result.equals(DialogResult.CANCEL)))
		{
			form.setMode(FormMode.VIEW);
		}

	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState(); //WDEV-15254
	}

	private void updateControlsState()
	{
		form.lyrDrawing().tabRegionConfig().btnNewRegion().setVisible(form.getMode().equals(FormMode.VIEW));
		form.lyrDrawing().tabRegionConfig().btnUpdateRegion().setVisible(form.getMode().equals(FormMode.VIEW));
	}
}
