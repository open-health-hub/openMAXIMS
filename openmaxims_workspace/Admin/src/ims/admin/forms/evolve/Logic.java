//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.evolve;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Hashtable;

import javax.naming.AuthenticationException;
import javax.naming.CommunicationException;
import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.directory.Attribute;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;

import ims.configuration.gen.ConfigFlag;
import ims.configuration.Configuration;
import ims.configuration.EnvironmentConfig;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppUser;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;		
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		checkForMandatoryContexts();		
		open();		
	}

	private void initialise() 
	{	
		setBtnRelaunchState(false);
	}

	private void open() 
	{
		try 
		{			
			if (checkForExistingUserLDAPCredentials())
			{				
				if (authenticateWithLDAP(form.getLocalContext().getLDAPUsername(), form.getLocalContext().getLDAPPassword()))
				{					
					launchEvolve();			
				}				
			}
			else
			{
				engine.open(form.getForms().Admin.LDAPLogin, new Object[]{domain.getLoggedInUser()});
			}
		}
		catch (Exception e) 
		{	
			engine.createSystemLogEntry(SystemLogType.INTEGRATION_ENGINE, SystemLogLevel.ERROR, e.getMessage());
			engine.showMessage(e.getMessage(), "Error", MessageButtons.OK, MessageIcon.ERROR);				
			
			return;
		}		
	}

	private void launchEvolve() throws UnsupportedEncodingException 
	{
		String fullUrl = addParametersToEvolveURL();
		form.htmView().setIFrameValue(fullUrl);
	}

	private void checkForMandatoryContexts() throws FormOpenException 
	{
		if(Boolean.FALSE.equals(checkForMandatoryFlags())) {
			throw new FormOpenException("ConfigFlag EVOLVE_URL has not been set!");
		}
		
		if(Boolean.FALSE.equals(checkIfPatientIdentifierIsHospital())) {
			throw new FormOpenException("ConfigFlag INTERFACE_PATID_TYPE must be set to HOSPITAL!");			
		}
		
		if(Boolean.FALSE.equals(checkForPatient())) {
			throw new FormOpenException("No Patient has been selected!");			
		}
		
		if(Boolean.FALSE.equals(checkForPatientInterfaceId())) {
			throw new FormOpenException("Patient identifier for the type HOSPITAL is null");	
		}
	}

	private boolean checkIfPatientIdentifierIsHospital() 
	{
		if (ConfigFlag.DOM.INTERFACE_PATID_TYPE.getValue() != null && ConfigFlag.DOM.INTERFACE_PATID_TYPE.getValue().trim().length() > 0)
		{
			String name = ims.configuration.ConfigFlag.DOM.INTERFACE_PATID_TYPE.getValue();
			ims.core.vo.lookups.PatIdType type = ims.core.vo.lookups.PatIdType.getNegativeInstance(name);
			
			if (type == ims.core.vo.lookups.PatIdType.HOSPNUM)						
				return true;
		}
		
		return false;
	}

	private boolean checkForPatient() 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())			
			return true;
		
		return false;
	}
	
	private boolean checkForPatientInterfaceId() 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && 
				form.getGlobalContext().Core.getPatientShort().getInterfaceId() != null && 
					form.getGlobalContext().Core.getPatientShort().getInterfaceId().getIdValueIsNotNull())
		{			
			form.getLocalContext().setPatientID(form.getGlobalContext().Core.getPatientShort().getInterfaceId().getIdValue());
			return true;
		}
		
		return false;
	}
	
	private boolean checkForMandatoryFlags() 
	{
		if (ConfigFlag.GEN.EVOLVE_URL.getValue() != null && ConfigFlag.GEN.EVOLVE_URL.getValue().trim().length() > 0)
		{
			form.getLocalContext().setEvolveURL(ConfigFlag.GEN.EVOLVE_URL.getValue());
			return true;
		}
		
		return false;
	}

	private boolean checkForExistingUserLDAPCredentials() throws Exception 
	{	
		IAppUser user = domain.getLoggedInUser();
		if (user != null)
		{
			String ldapUsername = user.getLDAPUsername();
			String ldapPassword = user.getLDAPPassword();
			
			if(ldapUsername != null && ldapUsername.trim().length() > 0 && 
					ldapPassword != null && ldapPassword.trim().length() > 0)
			{
				form.getLocalContext().setLDAPUsername(ldapUsername);
				form.getLocalContext().setLDAPPassword(Configuration.decryptPasswordWithCloak(ldapPassword));

				return true;			
			}
		}		
		
		return false;
	}
			
	private String addParametersToEvolveURL() throws UnsupportedEncodingException 
	{
		String 	url 	  = form.getLocalContext().getEvolveURL();
		String  patientId = form.getLocalContext().getPatientID();
		String 	username  = form.getLocalContext().getLDAPUsername();
		String 	password  = form.getLocalContext().getLDAPPassword();
		
		String urlParameters = 	"hospitalnumber=" + URLEncoder.encode(patientId, "UTF-8") +
								"&" +
								"username=" + URLEncoder.encode(username, "UTF-8") +
								"&" +
								"password=" + URLEncoder.encode(password, "UTF-8");
		
		return url + urlParameters; 
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		if (formName.equals(form.getForms().Admin.LDAPLogin))
		{
			if (result.equals(DialogResult.OK))
			{
				setBtnRelaunchState(false);
				open();	
			}
			else
			{
				setBtnRelaunchState(true);
			}
		}
	}	
	
	private boolean authenticateWithLDAP(String username, String password) throws Exception 
	{		
		String 		server 	  = EnvironmentConfig.getLDAPServer();
		String 		domain 	  = EnvironmentConfig.getLDAPDomain();
		String 		port 	  = String.valueOf(EnvironmentConfig.getLDAPPort());
		String[]	baseItems = EnvironmentConfig.getLDAPBase().split("\\.");
		String 		group 	  = EnvironmentConfig.getLDAPGroup();
		
		Hashtable<String, String> authEnv = new Hashtable<String, String>(11);
		
		String 	base = "";
		for(int x = 0; x < baseItems.length; x++)
		{
			if(base.length() > 0)
				base += ",";
			base += "dc=" + baseItems[x];
		}
		
		String securityPrincipal = "";		
		if(domain.length() > 0)
		{
			securityPrincipal += domain + "\\";
		}		
		securityPrincipal += username;
		
		authEnv.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
		authEnv.put(Context.PROVIDER_URL, "ldap://" + server + ":" + port);
		authEnv.put(Context.SECURITY_AUTHENTICATION, "simple");
		authEnv.put(Context.REFERRAL, "follow");
		authEnv.put(Context.SECURITY_PRINCIPAL, securityPrincipal);
		authEnv.put(Context.SECURITY_CREDENTIALS, password);
		
		DirContext authContext = null;
		try 
		{
			authContext = new InitialDirContext(authEnv);
			if(group.length() > 0)
			{
				SearchControls constraints = new SearchControls();
				constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
				
				String search = "(&(objectCategory=user)(SAMAccountName=" + username + "))";
				NamingEnumeration<?> result = authContext.search(base, search, constraints);
				
				boolean found = false;
				if(result != null && result.hasMore())
				{				
					SearchResult item = (SearchResult)result.next();					
					Attribute memberOf = item.getAttributes().get("memberof");
					
					if (memberOf != null)
					{
						NamingEnumeration<?> memberOfAttributes = memberOf.getAll();
						while(memberOfAttributes.hasMore())
						{
	 						String groupName = memberOfAttributes.next().toString().toLowerCase(); 						
	 						if(groupName.startsWith("cn="))
	 						{
	 							groupName = groupName.substring(3);
	 						}
	 						int firstCommaIndex = groupName.indexOf(",");
	 						if(firstCommaIndex > 0)
	 						{
	 							groupName = groupName.substring(0, firstCommaIndex);
	 						}
	 						
							if(groupName.equals(group.toLowerCase()))
							{
								found = true;
								return found;
							}
						}
					}
					else
					{
						throw new Exception("LDAP user '" + username + "' is not member of any group");	
					}
					
					authContext.close();
					result.close();					
				}
				
				if(!found)					
				{
					throw new Exception("LDAP Error: Access denied.");
				}
			}
			else
			{
				authContext.close();
				return true;
			}
		}
		catch(CommunicationException ex)
		{
			if(authContext != null)
			{
				authContext.close();
			}
			
			ex.printStackTrace();			
			throw new Exception("Unable to connect to LDAP Server. \r\n\r\n" + ex.getMessage());
		}
		catch(AuthenticationException ex)
		{
			ex.printStackTrace();			
			String errorMessage = ex.getMessage();
			
			if(errorMessage.toLowerCase().contains("ldaperr:"))
			{
				if(errorMessage.toLowerCase().contains("data 533,"))
				{
					throw new Exception("LDAP Error: Account disabled. (" + "username entered: '" +  username + "')");					
				}
				else if(errorMessage.toLowerCase().contains("data 775,"))
				{
					throw new Exception("LDAP Error: Account locked (" + "username entered: '" +  username + "')");					
				}
				else if(errorMessage.toLowerCase().contains("data 525,"))
				{
					throw new Exception("LDAP Error: User not found (" + "username entered: '" +  username + "')");							
				}
				else if(errorMessage.toLowerCase().contains("data 52e,"))
				{
					throw new Exception("LDAP Error: Invalid user credentials (" + "username entered: '" +  username + "')");							
				}
				else if(errorMessage.toLowerCase().contains("data 530,"))
				{
					throw new Exception("LDAP Error: User not permitted to logon at this time (" + "username entered: '" +  username + "')");					
				}
				else if(errorMessage.toLowerCase().contains("data 531,"))
				{
					throw new Exception("LDAP Error: User not permitted to logon from this workstation (" + "username entered: '" +  username + "')");						
				}
				else if(errorMessage.toLowerCase().contains("data 532,"))
				{
					throw new Exception("LDAP Error: Password expired (" + "username entered: '" +  username + "')");			
				}
				else if(errorMessage.toLowerCase().contains("data 701,"))
				{
					throw new Exception("LDAP Error: Account expired (" + "username entered: '" +  username + "')");		
				}
				else if(errorMessage.toLowerCase().contains("data 773,"))
				{
					throw new Exception("LDAP Error: User must reset the password before logging on (" + "username entered: '" +  username + "')");			
				}
			}
			
			throw new Exception("LDAP Error: Access denied.");
		}
		catch (Exception ex) 
		{
			ex.printStackTrace();
			throw ex;
		}	
		
		return false;
	}

	@Override
	protected void onBtnRelaunchClick() throws PresentationLogicException
	{	
		setBtnRelaunchState(false);
		clearLocalContexts();		
		checkForMandatoryContexts();		
		try
		{		
			if (checkForExistingUserLDAPCredentials())
			{				
				if (authenticateWithLDAP(form.getLocalContext().getLDAPUsername(), form.getLocalContext().getLDAPPassword()))
				{					
					launchEvolve();			
				}
				//WDEV-16339
				else
				{
					engine.open(form.getForms().Admin.LDAPLogin, new Object[]{domain.getLoggedInUser()});
				}
				//WDEV-16339					
			}
			else
			{
				engine.open(form.getForms().Admin.LDAPLogin, new Object[]{domain.getLoggedInUser()});
			}					
		}
		catch (Exception e) 
		{	
			engine.createSystemLogEntry(SystemLogType.INTEGRATION_ENGINE, SystemLogLevel.ERROR, e.getMessage());
			engine.showMessage(e.getMessage(), "Error", MessageButtons.OK, MessageIcon.ERROR);

			return;	
		}
	}

	private void clearLocalContexts() 
	{	
		form.getLocalContext().setLDAPUsername(null);
		form.getLocalContext().setLDAPPassword(null);
		form.getLocalContext().setPatientID(null);
		form.getLocalContext().setEvolveURL(null);
	}
	
	private void setBtnRelaunchState(boolean value)
	{
		form.btnRelaunch().setEnabled(value);
		form.btnRelaunch().setVisible(value);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{	
		if (result.equals(DialogResult.OK))
		{
			engine.open(form.getForms().Admin.LDAPLogin, new Object[]{domain.getLoggedInUser()});
		}
	}
}
