//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.printerselectdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolItemsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolItemsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolItemsOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolItems()
		{
			return (String)super.row.get(0);
		}
		public void setcolItems(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolItemsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDefaultReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDefaultReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDefaultOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColDefault()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColDefault(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColDefaultTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDesignatedToNewResultsReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDesignatedToNewResultsReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDesignatedToNewResultsOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getColDesignatedToNewResults()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setColDesignatedToNewResults(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellColDesignatedToNewResultsTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDesignatedPrinterForOCSOrderReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDesignatedPrinterForOCSOrderReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDesignatedPrinterForOCSOrderOpened()
		{
			super.row.showOpened(3);
		}
		public boolean getColDesignatedPrinterForOCSOrder()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setColDesignatedPrinterForOCSOrder(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellColDesignatedPrinterForOCSOrderTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.admin.vo.PrinterVo getValue()
		{
			return (ims.admin.vo.PrinterVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.PrinterVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdListRow get(int index)
		{
			return new grdListRow(super.collection.get(index));
		}
		public grdListRow newRow()
		{
			return new grdListRow(super.collection.newRow());
		}
		public grdListRow newRow(boolean autoSelect)
		{
			return new grdListRow(super.collection.newRow(autoSelect));
		}
		public grdListRow newRowAt(int index)
		{
			return new grdListRow(super.collection.newRowAt(index));
		}
		public grdListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setcolItemsCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.admin.vo.PrinterVoCollection getValues()
		{
			ims.admin.vo.PrinterVoCollection listOfValues = new ims.admin.vo.PrinterVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.PrinterVo getValue()
		{
			return (ims.admin.vo.PrinterVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.PrinterVo value)
		{
			super.grid.setValue(value);
		}
		public grdListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdListRowCollection getRows()
		{
			return new grdListRowCollection(super.grid.getRows());
		}
		public grdListRow getRowByValue(ims.admin.vo.PrinterVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdListRow(row);
		}
		public void setcolItemsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolItemsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDefaultHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDefaultHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDesignatedToNewResultsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDesignatedToNewResultsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDesignatedPrinterForOCSOrderHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDesignatedPrinterForOCSOrderHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	public static class grdSearchRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSearchRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolItemsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolItemsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolItemsOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolItems()
		{
			return (String)super.row.get(0);
		}
		public void setcolItems(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolItemsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColumnSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColumnSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColumnSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.admin.vo.PrinterVo getValue()
		{
			return (ims.admin.vo.PrinterVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.PrinterVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSearchRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSearchRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSearchRow get(int index)
		{
			return new grdSearchRow(super.collection.get(index));
		}
		public grdSearchRow newRow()
		{
			return new grdSearchRow(super.collection.newRow());
		}
		public grdSearchRow newRow(boolean autoSelect)
		{
			return new grdSearchRow(super.collection.newRow(autoSelect));
		}
		public grdSearchRow newRowAt(int index)
		{
			return new grdSearchRow(super.collection.newRowAt(index));
		}
		public grdSearchRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSearchRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSearchGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void setcolItemsCaption(String value)
		{
			this.grid.setColumnCaption(0, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.admin.vo.PrinterVoCollection getValues()
		{
			ims.admin.vo.PrinterVoCollection listOfValues = new ims.admin.vo.PrinterVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.PrinterVo getValue()
		{
			return (ims.admin.vo.PrinterVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.PrinterVo value)
		{
			super.grid.setValue(value);
		}
		public grdSearchRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSearchRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSearchRowCollection getRows()
		{
			return new grdSearchRowCollection(super.grid.getRows());
		}
		public grdSearchRow getRowByValue(ims.admin.vo.PrinterVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSearchRow(row);
		}
		public void setcolItemsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolItemsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(624, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuDPPSelectedList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuDPPSelectedListREMOVEItem = factory.createMenuItem(startControlID.intValue() + 1, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuDPPSelectedList.add(contextMenus.contextMenuDPPSelectedListREMOVEItem);
		contextMenus.contextMenuDPPSelectedListMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 2, "Move Up", true, false, new Integer(102197), true, false);
		contextMenus.contextMenuDPPSelectedList.add(contextMenus.contextMenuDPPSelectedListMOVEUPItem);
		contextMenus.contextMenuDPPSelectedListMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 3, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuDPPSelectedList.add(contextMenus.contextMenuDPPSelectedListMOVEDOWNItem);
		contextMenus.contextMenuDPPSelectedListREMOVEALLItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove All", true, false, new Integer(102249), true, false);
		contextMenus.contextMenuDPPSelectedList.add(contextMenus.contextMenuDPPSelectedListREMOVEALLItem);
		form.registerMenu(contextMenus.contextMenuDPPSelectedList);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 608, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccPrintersForm = loader.loadComponent(103220, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_ccPrintersControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(0), new Integer(608), new Integer(40), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccPrintersForm, instance1 } );
		ims.framework.Control m_ccPrintersControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_ccPrintersForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccPrintersControl);
		Menu[] menus1 = m_ccPrintersForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Button Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 456, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 533, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 536, 320, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add to list", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 592, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(72), Boolean.TRUE, contextMenus.contextMenuDPPSelectedList, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdListTemp);
		grdListGrid grdList = (grdListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListGrid.class, m_grdListTemp);
		grdList.addStringColumn("Printer Name", 0, 0, 320, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdList.addBoolColumn("Default", 1, 1, 90, false, true, 0, true);
		grdList.addBoolColumn("Designated   printer for        New Results", 1, 1, 90, false, true, 0, true);
		grdList.addBoolColumn("Designated   printer for        OCS Order", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdList);
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 592, 272, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSearchTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1002), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSearchTemp);
		grdSearchGrid grdSearch = (grdSearchGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSearchGrid.class, m_grdSearchTemp);
		grdSearch.addStringColumn("Printer Name", 0, 0, 450, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSearch.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdSearch);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.admin.forms.printerslistandselection.IComponent ccPrinters()
	{
		return (ims.admin.forms.printerslistandselection.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccPrintersValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccPrintersVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccPrintersVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccPrintersEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccPrintersEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnOk()
	{
		return (Button)super.getControl(1);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(2);
	}
	public Button btnAdd()
	{
		return (Button)super.getControl(3);
	}
	public grdListGrid grdList()
	{
		return (grdListGrid)super.getGrid(0);
	}
	public grdSearchGrid grdSearch()
	{
		return (grdSearchGrid)super.getGrid(1);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled16 = new ImageHelper(102167, "Images/Core/ClearDisabled16.gif", new Integer(16), new Integer(16));
				ClearEnabled16 = new ImageHelper(102168, "Images/Core/Clear.gif", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled16;
			public final ims.framework.utils.Image ClearEnabled16;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image FindEnabled16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PrintersList = new ims.framework.ContextVariable("PrintersList", prefix + "_lv_Admin.PrinterSelectDialog.__internal_x_context__PrintersList_" + componentIdentifier + "");
			cxl_DefaultPrinter = new ims.framework.ContextVariable("DefaultPrinter", prefix + "_lv_Admin.PrinterSelectDialog.__internal_x_context__DefaultPrinter_" + componentIdentifier + "");
			cxl_DesignatedPrinterForNewResults = new ims.framework.ContextVariable("DesignatedPrinterForNewResults", prefix + "_lv_Admin.PrinterSelectDialog.__internal_x_context__DesignatedPrinterForNewResults_" + componentIdentifier + "");
			cxl_DesignatedPrinterForOCSOrder = new ims.framework.ContextVariable("DesignatedPrinterForOCSOrder", prefix + "_lv_Admin.PrinterSelectDialog.__internal_x_context__DesignatedPrinterForOCSOrder_" + componentIdentifier + "");
		}
		
		public boolean getPrintersListIsNotNull()
		{
			return !cxl_PrintersList.getValueIsNull(context);
		}
		public ims.admin.vo.PrinterVoCollection getPrintersList()
		{
			return (ims.admin.vo.PrinterVoCollection)cxl_PrintersList.getValue(context);
		}
		public void setPrintersList(ims.admin.vo.PrinterVoCollection value)
		{
			cxl_PrintersList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrintersList = null;
		public boolean getDefaultPrinterIsNotNull()
		{
			return !cxl_DefaultPrinter.getValueIsNull(context);
		}
		public ims.framework.interfaces.IPrinter getDefaultPrinter()
		{
			return (ims.framework.interfaces.IPrinter)cxl_DefaultPrinter.getValue(context);
		}
		public void setDefaultPrinter(ims.framework.interfaces.IPrinter value)
		{
			cxl_DefaultPrinter.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DefaultPrinter = null;
		public boolean getDesignatedPrinterForNewResultsIsNotNull()
		{
			return !cxl_DesignatedPrinterForNewResults.getValueIsNull(context);
		}
		public ims.framework.interfaces.IPrinter getDesignatedPrinterForNewResults()
		{
			return (ims.framework.interfaces.IPrinter)cxl_DesignatedPrinterForNewResults.getValue(context);
		}
		public void setDesignatedPrinterForNewResults(ims.framework.interfaces.IPrinter value)
		{
			cxl_DesignatedPrinterForNewResults.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DesignatedPrinterForNewResults = null;
		public boolean getDesignatedPrinterForOCSOrderIsNotNull()
		{
			return !cxl_DesignatedPrinterForOCSOrder.getValueIsNull(context);
		}
		public ims.framework.interfaces.IPrinter getDesignatedPrinterForOCSOrder()
		{
			return (ims.framework.interfaces.IPrinter)cxl_DesignatedPrinterForOCSOrder.getValue(context);
		}
		public void setDesignatedPrinterForOCSOrder(ims.framework.interfaces.IPrinter value)
		{
			cxl_DesignatedPrinterForOCSOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DesignatedPrinterForOCSOrder = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class DPPSelectedList implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int REMOVE = 1;
			public static final int MOVEUP = 2;
			public static final int MOVEDOWN = 3;
			public static final int REMOVEALL = 4;
		}
		public void disableAllDPPSelectedListMenuItems()
		{
			this.contextMenuDPPSelectedListREMOVEItem.setEnabled(false);
			this.contextMenuDPPSelectedListMOVEUPItem.setEnabled(false);
			this.contextMenuDPPSelectedListMOVEDOWNItem.setEnabled(false);
			this.contextMenuDPPSelectedListREMOVEALLItem.setEnabled(false);
		}
		public void hideAllDPPSelectedListMenuItems()
		{
			this.contextMenuDPPSelectedListREMOVEItem.setVisible(false);
			this.contextMenuDPPSelectedListMOVEUPItem.setVisible(false);
			this.contextMenuDPPSelectedListMOVEDOWNItem.setVisible(false);
			this.contextMenuDPPSelectedListREMOVEALLItem.setVisible(false);
		}
		private Menu contextMenuDPPSelectedList;
		public MenuItem getDPPSelectedListREMOVEItem()
		{
			return this.contextMenuDPPSelectedListREMOVEItem;
		}
		private MenuItem contextMenuDPPSelectedListREMOVEItem;
		public MenuItem getDPPSelectedListMOVEUPItem()
		{
			return this.contextMenuDPPSelectedListMOVEUPItem;
		}
		private MenuItem contextMenuDPPSelectedListMOVEUPItem;
		public MenuItem getDPPSelectedListMOVEDOWNItem()
		{
			return this.contextMenuDPPSelectedListMOVEDOWNItem;
		}
		private MenuItem contextMenuDPPSelectedListMOVEDOWNItem;
		public MenuItem getDPPSelectedListREMOVEALLItem()
		{
			return this.contextMenuDPPSelectedListREMOVEALLItem;
		}
		private MenuItem contextMenuDPPSelectedListREMOVEALLItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
