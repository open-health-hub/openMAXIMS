//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.52 build 2505.17727)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.gpsearch;

import ims.admin.forms.gpsearch.GenForm.grdGpsRow;
import ims.admin.vo.GPSearchCriteriaVo;
import ims.admin.vo.enums.GPAction;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.vo.GP;
import ims.core.vo.GPLiteWithPracticesVo;
import ims.core.vo.GPLiteWithPracticesVoCollection;
import ims.core.vo.GpLiteToPracticeLiteVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.PersonName;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.Control;
import ims.framework.exceptions.PresentationLogicException;
import ims.core.vo.lookups.GPStatus;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	// ------ Component Interface Methods ---------------------

	public GpLiteVo getValue()
	{
		return getSelectedValue();
	}
	
	public GP getFullGpVo()
	{
		GpLiteVo voGpLite = getSelectedValue();
		if(voGpLite != null)
			return domain.getGpFull(voGpLite);
		
		return null;
	}

	public void setVisibleContextMenu(Boolean value)
	{
		setCanBeVisibleContextMenu(value);
		enableContextMenu();
	}

	public void setValue(GpLiteVo value)
	{
		setValueInGrid(value);
	}
	
	public void setValue(GpRefVo value)
	{
		GPLiteWithPracticesVo voGpLite = null;
		
		if (value != null)
			voGpLite = domain.getGpLite(value);

		setValueInGrid(voGpLite);
	}

	public void clear()
	{
		clearControls();
		clearAction();
		enableContextMenu();
	}

	public void setEnabled(Boolean value)
	{
		enableControls(value != null ? value.booleanValue() : false);
	}

	public GPAction getActionEvent()
	{
		return getGPAction();
	}

	public void setSearchCriteria(GPSearchCriteriaVo criteria)
	{
		populateDataFromScreen(criteria);
		enableCodeText();
	}
	
	public void search()
	{
		doSearch();
	}
	
	public GpShortVo getNewGpBasedOnSearchCriteria()
	{
		GpShortVo voGpShort = new GpShortVo();
		voGpShort.setName(new PersonName());

		String forname = form.txtSearchForename().getValue();
		String surname = form.txtSearchSurname().getValue();
		TaxonomyType type = form.cmbSearchCodeType().getValue();

		voGpShort.getName().setForename(forname);
		voGpShort.getName().setUpperForename(forname != null ? forname.toUpperCase().substring(0, Math.min(voGpShort.getName().getUpperForenameMaxLength(), forname.length())) : null);
		voGpShort.getName().setSurname(surname);
		voGpShort.getName().setUpperSurname(surname != null ? surname.toUpperCase().substring(0, Math.min(voGpShort.getName().getUpperSurnameMaxLength(), surname.length())) : null);

		if (type != null)
		{
			voGpShort.setCodeMappings(new TaxonomyMapCollection());
			TaxonomyMap taxonomyMap = new TaxonomyMap();
			taxonomyMap.setTaxonomyName(type);
			taxonomyMap.setTaxonomyCode(form.txtSearchCode().getValue());
			voGpShort.getCodeMappings().add(taxonomyMap);
		}

		return voGpShort;
	}
	
	public void setSearchButtonAsDefault()
	{
		form.imbSearch().setAsDefaultButton();
	}
	// ---------------------------------------------------------

	// -------- Protected Methods ------------------------------
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
	}

	protected void onFormModeChanged()
	{
		enableCodeText();
		enableContextMenu();
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		doSearch();
	}

	protected void onImbClearClick() throws PresentationLogicException
	{
		clearControls();
		setGpAction(GPAction.CLEAR);
	}

	protected void onGrdGpsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
		setActionAndFireEvent(GPAction.SELECT);
	}

	protected void onCmbSearchCodeTypeValueChanged() throws PresentationLogicException
	{
		enableCodeText();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GPGrid.NEWGP :
				setActionAndFireEvent(GPAction.NEW);
			break;

			case GenForm.ContextMenus.GPGrid.EDITGP :
				setActionAndFireEvent(GPAction.EDIT);
			break;
		}
	}

	// -------- Protected Methods ------------------------------

	// -------- Private Methods --------------------------------
	private void doSearch()
	{
		searchGps();
		setGpAction(GPAction.SEARCH);
	}

	private void searchGps()
	{
		GPSearchCriteriaVo voGP = new GPSearchCriteriaVo();

		String searchCode = form.txtSearchCode().getValue();
		if (searchCode != null)
		{
			// Search by code instead
			TaxonomyType codeType = form.cmbSearchCodeType().getValue();
			if (codeType == null)
			{
				engine.showMessage("Please specify a Code Type when providing a Code");
				form.cmbSearchCodeType().setFocus();
				return;
			}

			voGP.setCode(searchCode);
			voGP.setCodeType(codeType);
			
			GPStatus lkupGPStatus = form.cmbStatus().getValue();
			if (lkupGPStatus != null)
			{
				voGP.setStatus(lkupGPStatus);
			}
			
			clearNonCodeTypeControls();
		}
		else
		{
			String practiceName = form.txtSearchPracticeName().getValue();
			voGP.setPracticeName(practiceName);

			String surname = form.txtSearchSurname().getValue();
			if ((surname == null || surname.equals("")) && practiceName == null)
			{
				engine.showMessage("Please enter some search criteria into the Surname or Practice Name fields");
				form.txtSearchSurname().setFocus();
				return;
			}
			if (surname != null && surname.length() < 3 && voGP.getPracticeName() == null)
			{
				engine.showMessage("Please specify a search Surname of at least 3 characters");
				form.txtSearchSurname().setFocus();
				return;
			}

			if(surname != null)//WDEV-4996
			{
				surname = surname.replaceAll("[^a-zA-Z]", "");//wdev-4923
				voGP.setSurname(surname);
			}

			String forname = form.txtSearchForename().getValue();
			if (forname != null)
			{
				forname = forname.replaceAll("[^a-zA-Z]", "");//wdev-4923
				voGP.setForename(forname);
			}

			String addressContains = form.txtAddressContains().getValue();
			if (addressContains != null && addressContains.trim().length() > 0)
			{
				voGP.setAddressContains(addressContains.trim());
			}
			
			GPStatus lkupGPStatus = form.cmbStatus().getValue();
			if (lkupGPStatus != null)
			{
				voGP.setStatus(lkupGPStatus);
			}
		}

		GPLiteWithPracticesVoCollection listGps = domain.listGps(voGP);
		populateGpGrid(listGps);
		
		if(listGps == null || listGps.size() == 0)
		{
			engine.showMessage("No records found matching the search criteria");
		}
	}

	private void populateGpGrid(GPLiteWithPracticesVoCollection collection)
	{
		form.grdGps().getRows().clear();

		for (int i = 0; i < collection.size(); i++)
		{
			populateGpRow(collection.get(i), form.grdGps().getRows().newRow());
		}
	}

	private void populateGpRow(GpLiteVo voLiteVo, GenForm.grdGpsRow row)
	{
		if(voLiteVo == null)
			return;
		row.setGpName(voLiteVo.getNameIsNotNull()?voLiteVo.getName().toString():"");
		
		String strDisplay = "";
		if(voLiteVo instanceof GPLiteWithPracticesVo)
		{
			GPLiteWithPracticesVo voGpWithPractice = (GPLiteWithPracticesVo)voLiteVo;
			if(voGpWithPractice.getPracticesIsNotNull() && voGpWithPractice.getPractices().size() > 0)
			{
				int count = 0;
				for(GpLiteToPracticeLiteVo voGpToPractice : voGpWithPractice.getPractices())
				{
					if(voGpToPractice.getPracticeIsNotNull())
					{
						count++;
						strDisplay += voGpToPractice.getPractice().getName();
						strDisplay += count < (voGpWithPractice.getPractices().size()) ? "," : "";
					}
				}
			}
		}

		
		row.setColPractice(strDisplay);
		row.setTooltipForColPractice(strDisplay);
		
		row.setNatCode(voLiteVo.getNationalCode());
		row.setValue(voLiteVo);
	}

	private void enableContextMenu()
	{
		boolean canBeVisible = getCanMakeVisibleContextMenu();
		boolean recordSelected = form.grdGps().getSelectedRowIndex() >= 0;

		form.getContextMenus().getGPGridNEWGPItem().setVisible(canBeVisible);
		form.getContextMenus().getGPGridEDITGPItem().setVisible(canBeVisible && recordSelected);
	}

	private boolean getCanMakeVisibleContextMenu()
	{
		Boolean isContextMenuVisible = form.getLocalContext().getCanContextMenuBeVisible();
		return isContextMenuVisible != null ? isContextMenuVisible.booleanValue() : false;
	}

	private void setCanBeVisibleContextMenu(Boolean value)
	{
		form.getLocalContext().setCanContextMenuBeVisible(value);
	}

	private GpLiteVo getSelectedValue()
	{
		return form.grdGps().getValue();
	}

	private void setValueInGrid(GpLiteVo value)
	{
		if (value != null)
		{
			if (form.grdGps().getValues().indexOf(value) < 0)
			{
				populateGpRow(value, form.grdGps().getRows().newRow());
			}
			else
			{
				grdGpsRow row = form.grdGps().getRowByValue(value);
				if(row != null)
					populateGpRow(value, row);	
			}
		}
		form.grdGps().setValue(value);
		enableContextMenu();
	}

	private void clearControls()
	{
		super.clearScreen();
		//setDefaultCodeType(); //WDEV-13987 
		form.cmbStatus().setValue(null);//WDEV-13987 
		form.grdGps().getRows().clear();
	}

	private void enableControls(boolean enable)
	{
		form.txtSearchSurname().setEnabled(enable);
		form.txtSearchForename().setEnabled(enable);
		form.txtSearchPracticeName().setEnabled(enable);
		form.txtAddressContains().setEnabled(enable);
		form.cmbSearchCodeType().setEnabled(enable);
		form.txtSearchCode().setEnabled(enable);
	}

	private void initialize()
	{
		form.txtSearchSurname().setFocus();
		setDefaultCodeType();
		enableCodeText();
	}

	private void enableCodeText()
	{
		boolean codeTypeSelected = form.cmbSearchCodeType().getValue() != null;
		form.txtSearchCode().setEnabled(codeTypeSelected);
		if(codeTypeSelected == false)
			form.txtSearchCode().setValue("");
	}

	private void setGpAction(GPAction enumValue)
	{
		form.getLocalContext().setGpAction(enumValue);
	}

	private GPAction getGPAction()
	{
		return form.getLocalContext().getGpAction();
	}

	private void clearAction()
	{
		form.getLocalContext().setGpAction(null);
	}
	
	private void setActionAndFireEvent(GPAction action)
	{
		setGpAction(action);
		form.fireCustomControlValueChanged();
	}
	
	private void setDefaultCodeType()
	{
		form.cmbSearchCodeType().setValue(TaxonomyType.NAT_GP_CODE);
		form.cmbStatus().setValue(GPStatus.ACTIVE);
	}

	private void clearNonCodeTypeControls()
	{
		this.form.txtSearchSurname().setValue("");
		this.form.txtSearchForename().setValue("");
		this.form.txtSearchPracticeName().setValue("");
		this.form.txtAddressContains().setValue("");
	}
	// ---------------------------------------------------

	@Override
	protected void onCmbStatusValueChanged() throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}

	public void showStatus(Boolean bShow) {
		form.lblStatus().setVisible(bShow);
		form.cmbStatus().setVisible(bShow);
	}
}
