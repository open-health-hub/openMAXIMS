//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.53 build 2641.19803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.topbuttonadmin;

import ims.admin.vo.AppTopButtonConfigVo;
import ims.admin.vo.AppTopButtonConfigVoCollection;
import ims.admin.vo.AppTopButtonSectionVo;
import ims.admin.vo.AppTopButtonSectionVoCollection;
import ims.admin.vo.AppTopButtonVo;
import ims.admin.vo.AppTopButtonVoCollection;
import ims.admin.vo.enums.TopButtonSelectionType;
import ims.admin.vo.lookups.TopButtonAction;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.TopButton;
import ims.framework.TopButtonCollection;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final Integer BUTTONS_NODE_TAG = new Integer(0);
	private static final Integer SECTIONS_NODE_TAG = new Integer(1);
	private static final Integer DIALOG_MAXIMISE_BUTTON_TAG = new Integer(2);
	private static final Integer DIALOG_CLOSE_BUTTON_TAG = new Integer(3);
	
	private static final int MAX_NO_BUTTONS = 5;
	private static final int MAX_NO_SECTIONS = 5;
	
	private static final int BUTTONS_DRAGDROP_TYPE = 1;
	private static final int BUTTON_DRAGDROP_TYPE = 2;	
	private static final int SECTION_DRAGDROP_TYPE = 3;
	private static final int SECTIONS_DRAGDROP_TYPE = 4;
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Admin.TopButtonSelect) && result.equals(DialogResult.OK))
		{
			addButtons(form.getGlobalContext().Admin.getTopButtonSelection());			
		}
	}	
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	protected void onTreItemsTreeViewNodeDropped(TreeNode node, TreeNode previousParentNode) throws PresentationLogicException 
	{
		processNodeMove(node);
		updateContextMenuState();
	}
	protected void onTreItemsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException 
	{
		updateContextMenuState();
	}
	protected void onTreItemsTreeViewNodeEdited(TreeNode node) throws PresentationLogicException 
	{
		processNodeRename(node);
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID) 
		{
			case GenForm.ContextMenus.TopButtonAdmin.ADD_BUTTON:
				selectPredefinedButton();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.ADD_FORM:
				selectForm();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.ADD_URL:
				selectUrl();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.ADD_SECTION:
				addSection();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.RENAME:
				renameSelectedItem();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.REMOVE:
				removeSelectedItem();
				break;
				
			case GenForm.ContextMenus.TopButtonAdmin.DISABLE_IF_PATIENT_SELECTED:
				disableButtonIfPatientSelected();
				break;	
			case GenForm.ContextMenus.TopButtonAdmin.RESET_TOP_BUTTON_TO_DEFAULT:
				resetButtonToDefault();
				break;		
		}
		updateContextMenuState();
	}
	private void resetButtonToDefault() 
	{
		if(form.treItems().getSelectedNode() != null && 
				form.treItems().getSelectedNode().getParent() != null &&
					form.treItems().getSelectedNode().getValue() != null)
		{
			if (form.treItems().getSelectedNode().getValue() instanceof AppTopButtonVo)
			{
				AppTopButtonVo 	topbutton  = (AppTopButtonVo) form.treItems().getSelectedNode().getValue();
								topbutton.setContextDependent(false);
								topbutton.setPatientMustBeSelected(null);
				form.treItems().getSelectedNode().setValue(topbutton);
			}
		}
	}
	private void disableButtonIfPatientSelected() 
	{
		if(form.treItems().getSelectedNode() != null && 
				form.treItems().getSelectedNode().getParent() != null &&
					form.treItems().getSelectedNode().getValue() != null)
		{
			if (form.treItems().getSelectedNode().getValue() instanceof AppTopButtonVo)
			{
				AppTopButtonVo 	topbutton  = (AppTopButtonVo) form.treItems().getSelectedNode().getValue();
								topbutton.setContextDependent(true);
								topbutton.setPatientMustBeSelected(false);				
				form.treItems().getSelectedNode().setValue(topbutton);
			}
		}
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		open();
	}
	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		populateInstanceControls();
	}
	public void populateInstanceControls() 
	{
		clearInstanceControls();
		
		AppTopButtonConfigVo configuration = form.grdList().getValue();
		form.getLocalContext().setRecord(configuration);		
		
		if(configuration != null)
		{			
			form.txtName().setValue(configuration.getName());
			form.intNoColumns().setValue(configuration.getNoColumns());
			form.chkIncludePatientSelectionHistory().setValue(configuration.getIncludePatientHistory());
			
			addDefaultItemNodes();
			
			AppTopButtonVoCollection buttons = configuration.getButtons();
			if(buttons != null)
			{
				for(int x = 0; x < buttons.size(); x++)
				{
					AppTopButtonVo button = buttons.get(x);					
					if(button != null)
					{
						addButton(getButtonsNode(), button, false);						
					}
				}
			}
			
			AppTopButtonSectionVoCollection sections = configuration.getSections();
			if(sections != null)
			{
				for(int x = 0; x < sections.size(); x++)
				{
					AppTopButtonSectionVo section = sections.get(x);					
					if(section != null)
					{
						addSection(getSectionsNode(), section, false);						
					}
				}				
			}
		}
		
		form.treItems().expandAll();
		
		updateControlsState();
	}	
	private void addButtons(AppTopButtonVoCollection collection) 
	{
		for(int x = 0; x < collection.size(); x++)
		{			
			addButton(collection.get(x), x == collection.size() - 1);
		}			
	}
	private void addButton(AppTopButtonVo value, boolean select)
	{
		if(value != null)
		{
			addButton(form.treItems().getSelectedNode(), value, select);
		
			updateControlsState();
			
			if(value.getAction() != null && value.getAction().equals(TopButtonAction.FORM))
				form.treItems().beginEditSelectedNode();
		}
	}
	private void addButton(TreeNode parentNode, AppTopButtonVo value, boolean autoSelect) 
	{
		if(parentNode != null && value != null && value.getAction() != null)
		{
			if(value.getAction().equals(TopButtonAction.BUILTIN))
			{
				addPredefinedButton(parentNode, value, autoSelect);
			}
			else if(value.getAction().equals(TopButtonAction.FORM))
			{
				addForm(parentNode, value, autoSelect);
			}
			else if(value.getAction().equals(TopButtonAction.URL))
			{
				addUrl(parentNode, value, autoSelect);
			}
		}
	}
	private void addSection()
	{		
		AppTopButtonSectionVo value = new AppTopButtonSectionVo();
		value.setText("Untitled");
		
		addSection(getSectionsNode(), value, true);
		
		updateContextMenuState();
		renameSelectedItem();
	}
	private void addSection(TreeNode parentNode, AppTopButtonSectionVo value, boolean autoSelect) 
	{
		if(parentNode != null && value != null)
		{
			String text = value.getText();
			if(text == null)
				text = " ";
			TreeNode node = parentNode.getNodes().add(value, text, autoSelect, SECTION_DRAGDROP_TYPE, new int[] { SECTIONS_DRAGDROP_TYPE }, true);
					
			node.setSelectedImage(form.getImages().Core.Organizer);
			node.setCollapsedImage(form.getImages().Core.Organizer);
			node.setExpandedImage(form.getImages().Core.Organizer);
			
			if(value.getButtons() != null)
			{
				AppTopButtonVoCollection buttons = value.getButtons();
				if(buttons != null)
				{
					for(int x = 0; x < buttons.size(); x++)
					{
						AppTopButtonVo button = buttons.get(x);						
						if(button != null)
						{
							addButton(node, button, autoSelect);
						}
					}
				}
			}
		}
	}	
	public void clearInstanceControls() 
	{
		form.txtName().setValue(null);
		form.intNoColumns().setValue(null);
		form.treItems().clear();
		form.chkIncludePatientSelectionHistory().setValue(false);
	}
	public void newInstance() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		form.txtName().setFocus();
		clearInstanceControls();
		addDefaultItemNodes();
		form.getLocalContext().setRecord(null);
		form.intNoColumns().setValue(new Integer(1));
		form.chkIncludePatientSelectionHistory().setValue(Boolean.TRUE);
	}
	private void addDefaultItemNodes()
	{
		TreeNode buttonsNode = form.treItems().getNodes().add(BUTTONS_NODE_TAG, "Buttons", BUTTONS_DRAGDROP_TYPE, true);
		buttonsNode.setSelectedImage(form.getImages().Core.HelpButton);
		buttonsNode.setCollapsedImage(form.getImages().Core.HelpButton);
		buttonsNode.setExpandedImage(form.getImages().Core.HelpButton);
		
		TreeNode sectionsNode = form.treItems().getNodes().add(SECTIONS_NODE_TAG, "Extended Sections", SECTIONS_DRAGDROP_TYPE, true);
		sectionsNode.setSelectedImage(form.getImages().Core.Organizer);
		sectionsNode.setCollapsedImage(form.getImages().Core.Organizer);
		sectionsNode.setExpandedImage(form.getImages().Core.Organizer);
	}
	private TreeNode getButtonsNode()
	{
		for(int x = 0; x < form.treItems().getNodes().size(); x++)
		{
			if(form.treItems().getNodes().get(x).getValue() != null && form.treItems().getNodes().get(x).getValue().equals(BUTTONS_NODE_TAG))
			{
				return form.treItems().getNodes().get(x);
			}
		}
		
		return null;
	}
	private TreeNode getSectionsNode()
	{
		for(int x = 0; x < form.treItems().getNodes().size(); x++)
		{
			if(form.treItems().getNodes().get(x).getValue() != null && form.treItems().getNodes().get(x).getValue().equals(SECTIONS_NODE_TAG))
			{
				return form.treItems().getNodes().get(x);
			}
		}
		
		return null;
	}
	public boolean save() throws PresentationLogicException 
	{
		if (form.intNoColumns().getValue()  != null 
			&& form.intNoColumns().getValue() > MAX_NO_BUTTONS)
		{
			engine.showMessage("The maximum number of Columns is " + MAX_NO_BUTTONS);
			return false;
		}		
		
		AppTopButtonConfigVo configuration = populateDataFromScreen();
		
		String[] errors = configuration.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			configuration = domain.saveConfiguration(configuration);
			form.getLocalContext().setRecord(configuration);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
	}
	private AppTopButtonConfigVo populateDataFromScreen()
	{
		AppTopButtonConfigVo configuration = form.getLocalContext().getRecord();
		if(configuration == null)
			configuration = new AppTopButtonConfigVo();
		
		configuration.setName(form.txtName().getValue());
		configuration.setNoColumns(form.intNoColumns().getValue());		
		configuration.setIncludePatientHistory(form.chkIncludePatientSelectionHistory().getValue());
		
		AppTopButtonVoCollection buttons = new AppTopButtonVoCollection();
		for(int x = 0; x < getButtonsNode().getNodes().size(); x++)
		{
			AppTopButtonVo button = (AppTopButtonVo)getButtonsNode().getNodes().get(x).getValue();			
			button.setEnabled(true);
			buttons.add(button);
			
			if (getButtonsNode().getNodes().get(x).getNodes() != null &&
					getButtonsNode().getNodes().get(x).getNodes().size() > 0)
			{
				for (int i = 0; i <getButtonsNode().getNodes().get(x).getNodes().size(); i++) 
				{
					if(getButtonsNode().getNodes().get(x).getNodes().get(i).getIdentifier() != null)
					{
						if(getButtonsNode().getNodes().get(x).getNodes().get(i).getIdentifier().equals(DIALOG_MAXIMISE_BUTTON_TAG))								
						{
							if ((button.getFormIsNotNull() && engine.getRegisteredForm(button.getForm()).isDialog()))
							{
								button.setDisplayMaximiseButton(getButtonsNode().getNodes().get(x).getNodes().get(i).isChecked());
							}
						}
						if(getButtonsNode().getNodes().get(x).getNodes().get(i).getIdentifier().equals(DIALOG_CLOSE_BUTTON_TAG))								
						{
							if ((button.getFormIsNotNull() && engine.getRegisteredForm(button.getForm()).isDialog()))
							{
								button.setDisplayCloseButton(getButtonsNode().getNodes().get(x).getNodes().get(i).isChecked());
							}
						}
					}
				}				
			}						
		}		
		
		configuration.setButtons(buttons);		
		
		AppTopButtonSectionVoCollection sections = new AppTopButtonSectionVoCollection();
		for(int x = 0; x < getSectionsNode().getNodes().size(); x++)
		{
			AppTopButtonSectionVo section = (AppTopButtonSectionVo)getSectionsNode().getNodes().get(x).getValue();
			AppTopButtonVoCollection sectionButtons = new AppTopButtonVoCollection();
			
			for(int y = 0; y < getSectionsNode().getNodes().get(x).getNodes().size(); y++)
			{
				AppTopButtonVo sectionButton = (AppTopButtonVo)getSectionsNode().getNodes().get(x).getNodes().get(y).getValue();
				sectionButton.setEnabled(true);
				
				if (getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes() != null &&
						getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().size() > 0)
				{
					for (int i = 0; i <getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().size(); i++) 
					{
						if(getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().get(i).getIdentifier() != null)
						{
							if(getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().get(i).getIdentifier().equals(DIALOG_MAXIMISE_BUTTON_TAG))								
							{
								if ((sectionButton.getFormIsNotNull() && engine.getRegisteredForm(sectionButton.getForm()).isDialog()))
								{
									sectionButton.setDisplayMaximiseButton(getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().get(i).isChecked());
								}
							}
							if(getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().get(i).getIdentifier().equals(DIALOG_CLOSE_BUTTON_TAG))								
							{
								if ((sectionButton.getFormIsNotNull() && engine.getRegisteredForm(sectionButton.getForm()).isDialog()))
								{
									sectionButton.setDisplayCloseButton(getSectionsNode().getNodes().get(x).getNodes().get(y).getNodes().get(i).isChecked());
								}
							}
						}
					}				
				}		
				
				sectionButtons.add(sectionButton);
			}
						
			section.setButtons(sectionButtons);
			sections.add(section);
		}
		
		configuration.setSections(sections);
		
		return configuration;
	}
	public void updateControlsState() 
	{
		if(form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setEnabled(isRecordSelected());
			form.btnEdit().setVisible(isRecordSelected());
		}
		else
		{
			form.btnEdit().setEnabled(false);
			form.btnEdit().setVisible(false);
		}
		
		updateContextMenuState();
	}
	public void updateInstance() 
	{
		form.setMode(FormMode.EDIT);		
	}
	public void open() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		clearInstanceControls();
		
		form.grdList().getRows().clear();
		AppTopButtonConfigVoCollection configurations = domain.listConfigurations();
		for(int x = 0; x < configurations.size(); x++)
		{
			addConfiguration(configurations.get(x));
		}
		
		if(form.getLocalContext().getRecord() != null)
		{
			form.grdList().setValue(form.getLocalContext().getRecord());
			populateInstanceControls();
		}
	}
	private void addConfiguration(AppTopButtonConfigVo value) 
	{
		if(value != null)
		{
			GenForm.grdListRow row = form.grdList().getRows().newRow();
			row.setcolName(value.getName());
			row.setValue(value);
		}		
	}
	private void selectPredefinedButton()
	{		
		form.getGlobalContext().Admin.setTopButtonSelectionType(TopButtonSelectionType.PREDEFINEDBUTTON);
		form.getGlobalContext().Admin.setTopButtonExcludedButtons(getAlreadySelectedButtons());
		
		if(form.treItems().getSelectedNode() != null && form.treItems().getSelectedNode().getValue() != null && form.treItems().getSelectedNode().getValue().equals(BUTTONS_NODE_TAG))
			form.getGlobalContext().Admin.setTopButtonMaxSelectionCount(getMaxNoOfTopItemsThatCanBeAdded());
		else
			form.getGlobalContext().Admin.setTopButtonMaxSelectionCount(null);
		
		openSelection();
	}
	private void selectForm()
	{	
		form.getGlobalContext().Admin.setTopButtonSelectionType(TopButtonSelectionType.FORM);

		if(form.treItems().getSelectedNode() != null && form.treItems().getSelectedNode().getValue() != null && form.treItems().getSelectedNode().getValue().equals(BUTTONS_NODE_TAG))
			form.getGlobalContext().Admin.setTopButtonMaxSelectionCount(getMaxNoOfTopItemsThatCanBeAdded());
		else
			form.getGlobalContext().Admin.setTopButtonMaxSelectionCount(null);
		
		openSelection();
	}
	private void selectUrl()
	{		
		form.getGlobalContext().Admin.setTopButtonSelectionType(TopButtonSelectionType.URL);
		openSelection();
	}
	private void openSelection()
	{
		engine.open(form.getForms().Admin.TopButtonSelect);
	}	
	private void renameSelectedItem()
	{
		form.treItems().beginEditSelectedNode();
	}	
	private void removeSelectedItem()
	{	
		if(form.treItems().getSelectedNode() != null && form.treItems().getSelectedNode().getParent() != null)
		{
			form.treItems().getSelectedNode().getParent().getNodes().remove(form.treItems().getSelectedNode());		
		}
	}		
	private void updateContextMenuState()
	{
		form.getContextMenus().getTopButtonAdminADD_BUTTONItem().setVisible(canAddButtonItem());
		form.getContextMenus().getTopButtonAdminADD_FORMItem().setVisible(canAddButtonItem());
		form.getContextMenus().getTopButtonAdminADD_URLItem().setVisible(canAddButtonItem());
		form.getContextMenus().getTopButtonAdminADD_SECTIONItem().setVisible(canAddSectionItem());
		form.getContextMenus().getTopButtonAdminRENAMEItem().setVisible(canRenameSelectedItem());		
		form.getContextMenus().getTopButtonAdminREMOVEItem().setVisible(canRemoveSelectedItem());			
		form.getContextMenus().getTopButtonAdminDISABLE_IF_PATIENT_SELECTEDItem().setVisible(false);
		form.getContextMenus().getTopButtonAdminRESET_TOP_BUTTON_TO_DEFAULTItem().setVisible(false);
		
		//
		if(form.treItems().getSelectedNode() != null &&
				form.treItems().getSelectedNode().getParent() != null &&
					form.treItems().getSelectedNode().getValue() != null)
		{
			if (form.treItems().getSelectedNode().getValue() instanceof AppTopButtonVo &&
					//Is not BuildIn TopButton
					(!((AppTopButtonVo)form.treItems().getSelectedNode().getValue()).getBuildInIsNotNull()))
			{				
				if (((AppTopButtonVo)form.treItems().getSelectedNode().getValue()).getPatientMustBeSelectedIsNotNull())
				{
					form.getContextMenus().getTopButtonAdminDISABLE_IF_PATIENT_SELECTEDItem().setVisible(true);
					form.getContextMenus().getTopButtonAdminDISABLE_IF_PATIENT_SELECTEDItem().setEnabled(false);
					form.getContextMenus().getTopButtonAdminRESET_TOP_BUTTON_TO_DEFAULTItem().setVisible(true);
					form.getContextMenus().getTopButtonAdminRESET_TOP_BUTTON_TO_DEFAULTItem().setEnabled(true);
				}
				else
				{
					form.getContextMenus().getTopButtonAdminDISABLE_IF_PATIENT_SELECTEDItem().setVisible(true);
					form.getContextMenus().getTopButtonAdminDISABLE_IF_PATIENT_SELECTEDItem().setEnabled(true);
					form.getContextMenus().getTopButtonAdminRESET_TOP_BUTTON_TO_DEFAULTItem().setVisible(false);
					form.getContextMenus().getTopButtonAdminRESET_TOP_BUTTON_TO_DEFAULTItem().setEnabled(false);
				}
			}
		}
		
		
		
	}
	
	private boolean canAddButtonItem()
	{
		if(form.getMode() == FormMode.VIEW)
			return false;
		if(form.treItems().getValue() == null)
			return false;		
		if(form.treItems().getValue() instanceof AppTopButtonSectionVo)
			return true;
		if(form.treItems().getValue().equals(BUTTONS_NODE_TAG))
			return MAX_NO_BUTTONS > getNoOfButtons();		
		return false;
	}
	private int getMaxNoOfTopItemsThatCanBeAdded()
	{
		TreeNode topItems = getButtonsNode();
		if(topItems == null)
			return 0;
		else
		{
			int existing = topItems.getNodes().size();
			if(existing >= MAX_NO_BUTTONS)
				return 0;
			
			return MAX_NO_BUTTONS - existing;
		}
	}
	private boolean canAddSectionItem()
	{
		if(form.getMode() == FormMode.VIEW)
			return false;
		if(form.treItems().getValue() == null)
			return false;		
		if(form.treItems().getValue().equals(SECTIONS_NODE_TAG))
			return MAX_NO_SECTIONS > getNoOfSections();		
		return false;
	}
	private boolean canRenameSelectedItem()
	{
		if(form.getMode() == FormMode.VIEW)
			return false;		
		if(!isItemSelected())
			return false;
		
		Object value = form.treItems().getSelectedNode().getValue();
		if(value != null)
		{
			if(value instanceof AppTopButtonSectionVo)
				return true;			
			else if(value instanceof AppTopButtonVo)
			{
				return ((AppTopButtonVo)value).getAction() != null && (((AppTopButtonVo)value).getAction().equals(TopButtonAction.URL) || ((AppTopButtonVo)value).getAction().equals(TopButtonAction.FORM));
			}
		}
		
		return false;
	}		
	private boolean canRemoveSelectedItem()
	{
		if(form.getMode() == FormMode.VIEW)
			return false;		
		return isItemSelected();		
	}
	private boolean isItemSelected() 
	{
		if(form.getMode() == FormMode.VIEW)
			return false;
		if(form.treItems().getValue() == null)
			return false;
		
		return form.treItems().getSelectedNode() != null && form.treItems().getSelectedNode().getParent() != null;
	}
	private boolean isRecordSelected() 
	{
		return form.getLocalContext().getRecordIsNotNull();
	}
	private void addPredefinedButton(TreeNode parentNode, AppTopButtonVo value, boolean autoSelect) 
	{
		if(parentNode != null && value != null)
		{
			String nodeText = value.getText();
			if(nodeText == null)
				nodeText = " ";
			
			TreeNode node = parentNode.getNodes().add(value, nodeText, autoSelect, BUTTON_DRAGDROP_TYPE, new int[] { BUTTONS_DRAGDROP_TYPE, SECTION_DRAGDROP_TYPE });
			
			node.setSelectedImage(form.getImages().Core.HelpButton);
			node.setCollapsedImage(form.getImages().Core.HelpButton);
			node.setExpandedImage(form.getImages().Core.HelpButton);
		}
	}	
	private void addUrl(TreeNode parentNode, AppTopButtonVo value, boolean autoSelect) 
	{
		if(parentNode != null && value != null)
		{
			String nodeText = value.getText();
			if(nodeText == null)
				nodeText = " ";
			
			TreeNode node = parentNode.getNodes().add(value, nodeText, autoSelect, BUTTON_DRAGDROP_TYPE, new int[] { BUTTONS_DRAGDROP_TYPE, SECTION_DRAGDROP_TYPE });
			
			node.setSelectedImage(form.getImages().Core.Web);
			node.setCollapsedImage(form.getImages().Core.Web);
			node.setExpandedImage(form.getImages().Core.Web);
			node.setTooltip(value.getURL());	
		}
	}
	private void addForm(TreeNode parentNode, AppTopButtonVo value, boolean autoSelect) 
	{
		String nodeText = value.getText();
		if(nodeText == null)
			nodeText = " ";
		
		if(parentNode != null && value != null)
		{
			TreeNode node = parentNode.getNodes().add(value, nodeText, autoSelect, BUTTON_DRAGDROP_TYPE, new int[] { BUTTONS_DRAGDROP_TYPE, SECTION_DRAGDROP_TYPE });
			
			node.setSelectedImage(form.getImages().Core.Form);
			node.setCollapsedImage(form.getImages().Core.Form);
			node.setExpandedImage(form.getImages().Core.Form);			
			node.setTooltip(buildFormTooltip(value));
			
			if (engine.getRegisteredForm(value.getForm()).isDialog())
			{
				//Display maximise button if available on dialog open by top button
				TreeNode nodeChild = node.getNodes().add(value, "Show maximize button", false);
				nodeChild.setIdentifier(DIALOG_MAXIMISE_BUTTON_TAG);
				nodeChild.setCheckBoxVisible(true);				
				nodeChild.setChecked(value != null ? (value.getDisplayMaximiseButton() == null ? false : value.getDisplayMaximiseButton()) : false);
				
				//Display close button if available on dialog open by top button
				nodeChild = node.getNodes().add(value, "Enable close button if available", false);
				nodeChild.setIdentifier(DIALOG_CLOSE_BUTTON_TAG);
				nodeChild.setCheckBoxVisible(true);				
				nodeChild.setChecked(value != null ? (value.getDisplayCloseButton() == null ? false : value.getDisplayCloseButton()) : false);
			}
		}
	}
	private String buildFormTooltip(AppTopButtonVo value) 
	{
		if(value != null && value.getForm() != null)
		{
			IAppForm selectedForm = null;
			IAppForm[] forms = engine.getRegisteredForms();
			
			for(int x = 0; x < forms.length; x++)
			{
				if(forms[x].getFormId() == value.getForm().getID())
				{
					selectedForm = forms[x];
					break;
				}
			}
			
			if(selectedForm == null)
				return "";
			
			String formName = selectedForm.getName();
			if(selectedForm.isAlias())
				formName += " (" + selectedForm.getAliasName() + ")";
			return formName; 
		}
		
		return "";
	}
	private TopButtonCollection getAlreadySelectedButtons()
	{
		TopButtonCollection result = new TopButtonCollection();
		
		for(int x = 0; x < getButtonsNode().getNodes().size(); x++)
		{
			AppTopButtonVo value = (AppTopButtonVo)getButtonsNode().getNodes().get(x).getValue();
			if(value.getAction() != null && value.getAction().equals(TopButtonAction.BUILTIN) && value.getBuildIn() != null) 
			{
				TopButton builtIn = getTopButton(value);
				if(builtIn != null)
				{
					result.add(builtIn);
				}
			}
		}
		for(int x = 0; x < getSectionsNode().getNodes().size(); x++)
		{
			for(int y = 0; y < getSectionsNode().getNodes().get(x).getNodes().size(); y++)
			{
				AppTopButtonVo value = (AppTopButtonVo)getSectionsNode().getNodes().get(x).getNodes().get(y).getValue();
				if(value.getAction() != null && value.getAction().equals(TopButtonAction.BUILTIN) && value.getBuildIn() != null) 
				{
					TopButton builtIn = getTopButton(value);
					if(builtIn != null)
					{
						result.add(builtIn);
					}
				}
			}
		}
		
		return result;
	}
	private TopButton getTopButton(AppTopButtonVo value)
	{
		TopButtonCollection topButtons = engine.getBuiltInTopButtons();
		
		for(int x = 0; x < topButtons.size(); x++)
		{
			if(topButtons.get(x).getID() == value.getBuildIn().intValue())
				return topButtons.get(x); 
		}
		
		return null;
	}
	private int getNoOfButtons()
	{
		TreeNode node = getButtonsNode();
		if(node == null)
			return 0;
		return node.getNodes().size();
	}
	private int getNoOfSections()
	{
		TreeNode node = getSectionsNode();
		if(node == null)
			return 0;
		return node.getNodes().size();
	}
	private void processNodeMove(TreeNode node)
	{
		if(node != null)
		{
			Object value = node.getValue();
			if(value != null)
			{
				if(value instanceof AppTopButtonSectionVo)
				{
					((AppTopButtonSectionVo)value).setID_AppTopButtonSection(null);
				}				
				else if(value instanceof AppTopButtonVo)
				{
					((AppTopButtonVo)value).setID_AppTopButton(null);
				}
			}
		}
	}	
	private void processNodeRename(TreeNode node)
	{
		if(node != null)
		{
			String nodeText = node.getText();
			
			Object value = node.getValue();
			if(value != null)
			{
				if(value instanceof AppTopButtonSectionVo)
				{
					if(nodeText == null || nodeText.length() == 0)
						nodeText = " ";
					((AppTopButtonSectionVo)value).setText(nodeText);
				}				
				else if(value instanceof AppTopButtonVo)
				{
					if(nodeText == null || nodeText.length() == 0)
					{
						nodeText = "Untitled";
						node.setText(nodeText);						
					}
					
					((AppTopButtonVo)value).setText(nodeText);					
				}
			}
		}
	}
}
