//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2333.15594)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.mosselect;

import ims.admin.helper.MosTreeDisplayHelper;
import ims.core.vo.Hcp;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		updateControlsState();
	}

	protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtSName().setValue("");
		form.cmbHcpTypeFilter().setValue(null);
		form.cmbStaffType().setValue(null);
		form.treMemberOfStaff().clear();
		
		updateControlsState();
	}

	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		MemberOfStaffShortVo filterVo = new MemberOfStaffShortVo();
		populateFilterFromScreen(filterVo);
		populateMosTree(filterVo);
		
		updateControlsState();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Admin.setMemberOfStaffShortVoCollection(getSelectedMos());
		engine.close(DialogResult.OK);
	}

	private void populateFilterFromScreen(MemberOfStaffShortVo filterVo)
	{
		PersonName name = new PersonName();
		filterVo.setName(name);
		name.setSurname(form.txtSName().getValue());
		filterVo.setStaffType(form.cmbStaffType().getValue());
		if (form.cmbHcpTypeFilter().getValue() != null)
		{
			filterVo.setHcp(new Hcp());
			filterVo.getHcp().setHcpType(form.cmbHcpTypeFilter().getValue());
		}
		filterVo.setIsActive(new Boolean(form.chkActiveOnly().getValue()));
	}

	private void populateMosTree(MemberOfStaffShortVo filterVo)
	{
		MemberOfStaffShortVoCollection mosCollVo = domain.listMembersOfStaff(filterVo);
		
		if (mosCollVo == null || mosCollVo.size() == 0)
		{
			engine.showMessage("No results found.");
		}
		
		MosTreeDisplayHelper mosTreeDisplayHelper = new MosTreeDisplayHelper(form.treMemberOfStaff(), form.getImages().Admin.StaffBlack);

		if (mosTreeDisplayHelper != null)
			mosTreeDisplayHelper.populateMosTree(mosCollVo);
	}

	private void initialize()
	{
		loadHCPDiciplines();
		form.chkActiveOnly().setValue(true);
		form.txtSName().setFocus();
		form.btnOK().setEnabled(false);
		form.setMode(FormMode.VIEW);		
	}
	private void loadHCPDiciplines()
	{
		HcpDisTypeCollection coll = LookupHelper.getHcpDisType(domain.getLookupService());
		ims.framework.cn.data.TreeNode[] rootNodes = coll.getRootNodes();

		for (int i = 0; i < rootNodes.length; i++)
		{
			HcpDisType hcpDis = (HcpDisType) rootNodes[i];
			form.cmbHcpTypeFilter().newRow(hcpDis, hcpDis.getText());
		}
	}

	protected void onTreMemberOfStaffTreeViewCheck(TreeNode node) throws PresentationLogicException
	{
		updateControlsState();
	}
	
	private MemberOfStaffShortVoCollection getSelectedMos()
	{
		MemberOfStaffShortVoCollection voColl = new MemberOfStaffShortVoCollection();
		for (int i = 0; i < form.treMemberOfStaff().getNodes().size(); i++)
		{
			if (form.treMemberOfStaff().getNodes().get(i).isChecked())
			{
				Object value = form.treMemberOfStaff().getNodes().get(i).getValue();
				if(value instanceof MemberOfStaffShortVo)
					voColl.add((MemberOfStaffShortVo)value);
			}
		}		
		return voColl;
	}
	
	private void updateControlsState()
	{
		form.btnOK().setEnabled(hasSelectedMos());
	}

	private boolean hasSelectedMos()
	{
		for (int i = 0; i < form.treMemberOfStaff().getNodes().size(); i++)
		{
			if (form.treMemberOfStaff().getNodes().get(i).isChecked())
				return true;
		}

		return false;
	}
}
