//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3595.27774)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.admin.forms.navigationimageselectdialog;

import ims.admin.forms.navigationimageselectdialog.GenForm.grdImagesRow;
import ims.admin.vo.AppImageVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Image;
import ims.vo.interfaces.INavigationNode;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	//ADD HERE imags that you want to choose (in the form imag_id1,imag_id2) 
	

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open()
	{
		
		form.txtName().setValue(form.getGlobalContext().Admin.getNavigationEditedGroup().getTextNode());
		
		Image[] imags = new Image[]
		                          {
				form.getImages().Admin.NavGrpDefault48,
				form.getImages().Admin.NavGrpActivity48,
				form.getImages().Admin.NavGrpAdmin48,
				form.getImages().Admin.NavGrpAlert48,
				form.getImages().Admin.NavGrpAppointments48,
				form.getImages().Admin.NavGrpAssessment48,
				form.getImages().Admin.NavGrpAssessmentConfig48,
				form.getImages().Admin.NavGrpCalendar48,
				form.getImages().Admin.NavGrpCDI48,
				form.getImages().Admin.NavGrpClinical48,
				form.getImages().Admin.NavGrpClinicalAdmin48,
				form.getImages().Admin.NavGrpClinicalNoting48,
				form.getImages().Admin.NavGrpConfig48,
				form.getImages().Admin.NavGrpICPConfiguration48,
				form.getImages().Admin.NavGrpInterface48,
				form.getImages().Admin.NavGrpList48,
				form.getImages().Admin.NavGrpOCSConfiguration48,
				form.getImages().Admin.NavGrpOrders48,
				form.getImages().Admin.NavGrpPathway48,
				form.getImages().Admin.NavGrpPatient48,
				form.getImages().Admin.NavGrpPatientDetails48,
				form.getImages().Admin.NavGrpPatientLists48,
				form.getImages().Admin.NavGrpPhlebotomy48,
				form.getImages().Admin.NavGrpReports48,
				form.getImages().Admin.NavGrpResult48,
				form.getImages().Admin.NavGrpScheduling48,
				form.getImages().Admin.NavGrpSearch48,
				form.getImages().Admin.NavGrpTreatment48,
				form.getImages().Admin.NavGrpWardCollection48,
				form.getImages().Admin.NavGrpWarning48};
		
		populateScreenFromData(imags);
		Image img =form.getGlobalContext().Admin.getNavigationEditedGroup().getImageNode();
		if (img == null)
			img = form.getImages().Admin.NavGrpDefault48;
		form.grdImages().setValue(img);
		
	}
	private void clearScreen()
	{
		form.grdImages().getRows().clear();
	}
	private void populateScreenFromData(Image[] imags)
	{
		clearScreen();
		if (imags == null)
			return;
		for (int i=0 ; i<imags.length ; i++)
		{
			addRow(imags[i]);
		}
	}
	private void addRow(Image img)
	{
		if (img == null)
			return;
		grdImagesRow nRow = form.grdImages().getRows().newRow();
		nRow.setColumnImage(img);
		nRow.setColumnPath(img.getImagePath());
		nRow.setValue(img);
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdImages().getSelectedRow() == null)
		{
			engine.showErrors(new String[]{"Please select an image."});
			return;
		}
		Integer id = form.grdImages().getSelectedRow().getValue().getImageId();
		AppImageVo image =  domain.getImageById(id);
		if (image == null)
		{
			engine.showErrors(new String[]{"Database problems. The selected image couldn't be found in the database."});
			return;
		}
		INavigationNode nav = form.getGlobalContext().Admin.getNavigationEditedGroup();
		nav.setTextNode(form.txtName().getValue());
		nav.setImageNode(image);
		form.getGlobalContext().Admin.setNavigationEditedGroup(nav);
		engine.close(DialogResult.OK);
	}
}
