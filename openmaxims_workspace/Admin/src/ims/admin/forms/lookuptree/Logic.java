//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by John MacEnri using IMS Development Environment (version 1.22 build 41103.1700)
//Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.lookuptree;

import java.util.ArrayList;
import java.util.HashMap;


import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.admin.forms.lookuptree.GenForm.lyr1Layer.FormsContainer.grdFormsRow;
import ims.admin.forms.lookuptree.GenForm.lyr1Layer.InstanceContainer.grdMappingsRow;
import ims.admin.forms.lookuptree.GenForm.lyr1Layer.InstanceContainer.grdMappingsRowCollection;
import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppFormVoCollection;
import ims.admin.vo.FormLookupVo;
import ims.admin.vo.FormLookupVoCollection;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVoCollection;
import ims.vo.LookupTypeVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.TaxonomyTypeCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.vo.lookups.ClassHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.txtFilter().setFocus();
		form.getContextMenus().getLookupAdminExpandItem().setVisible(true);
		form.getContextMenus().getLookupAdminCollapseItem().setVisible(true);
		form.getContextMenus().getLookupAdminViewItem().setVisible(false);
		form.chkActiveOnly().setValue(true);
		form.getLocalContext().setChosenForm(null);
		form.imgInactive().setValue(form.getImages().Core.RedSqaure);
		form.imgSystem().setValue(form.getImages().Core.YellowSquare);
		form.imgUser().setValue(form.getImages().Core.BlueSquare);
		setFormMode(FormMode.VIEW);
		populateColorCombo();
		
		form.lyr1().Type().btnUpdType().setVisible(false);
		form.lyr1().Type().btnUpdType().setEnabled(false);

		form.chkUserTypes().setValue(false);

		form.lyr1().Type().txtTypeName().setEnabled(false);
		form.lyr1().Type().txtTypeDesc().setEnabled(false);
		form.lyr1().Type().chkTypeHier().setEnabled(false);

		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();

	}

	private void populateColorCombo()
	{
		Color[] colors = Color.getColors();
		form.lyr1().Instance().cmbColor().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.lyr1().Instance().cmbColor().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
	}

	protected void onBtnSearchClick()
	{
		LookupTypeVoCollection coll = new LookupTypeVoCollection();
		Boolean ActiveOnly = Boolean.valueOf(form.chkActiveOnly().getValue());
		Boolean UserTypes = Boolean.valueOf(form.chkUserTypes().getValue());
		Boolean SystemTypes = Boolean.valueOf( form.chkSystemTypes().getValue());
		String filter = form.txtFilter().getValue();
		coll = domain.getTypes(filter,ActiveOnly,UserTypes,SystemTypes);
		
		form.getLocalContext().settypeColl(coll);
		populateTree(coll);
		setFormMode(FormMode.VIEW);
		form.lyr1().showType();

		form.lyr1().Type().btnUpdType().setEnabled(false);
		
		form.txtFilter().setFocus();
		form.treTypes().clearSelection();

	}


	protected void onChkActiveOnlyValueChanged()
	{
		populateTree(form.getLocalContext().gettypeColl());
		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();
		
		disableContextMenuItemsOnSelectionCleared(); //WDEV-16990
	}

	protected void onTreTypesTreeViewSelectionChanged(ims.framework.controls.TreeNode node) 
	{
		Object obj = node.getValue();
		if (obj instanceof LookupTypeVo)
		{
			clearTypeDetails();
			populateTypeDetails((LookupTypeVo) obj);
			form.lyr1().showType();
			enableTypeItemsOnSelection(node);
			form.getLocalContext().setLookupType((LookupTypeVo) obj);
			form.getLocalContext().setLookupInstance(null);
		}
		else if (obj instanceof LookupInstVo)
		{
			clearInstanceDetails();
			LookupInstVo inst = (LookupInstVo) obj;
			form.getLocalContext().setLookupInstance(inst);
			LookupTypeVo type = this.getTypeFromInstNode(node);
			form.getLocalContext().setLookupType(type);

			populateInstanceDetails(inst);
			form.lyr1().showInstance();
			enableInstanceItemsOnSelection(node);
		}
		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();
		updateControlsState();
	}
	
	protected void onBtnNewClick() throws PresentationLogicException
	{
		createNewInstance();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.MappingGrid.Add :
				addMapping();
			break;
			case GenForm.ContextMenus.MappingGrid.Delete :
				deleteMapping();
			break;

			case GenForm.ContextMenus.LookupAdmin.Add :
				createNewInstance();
			break;
			case GenForm.ContextMenus.LookupAdmin.Update :
				updateInstance();
			break;
			case GenForm.ContextMenus.LookupAdmin.Edit :
				editInstance();
			break;
			case GenForm.ContextMenus.LookupAdmin.Deactivate :
				deactivateInstance();
			break;
			case GenForm.ContextMenus.LookupAdmin.Save :
				saveOrder();
				onBtnSearchClick();
			break;
			case GenForm.ContextMenus.LookupAdmin.Expand :
				form.treTypes().expandAll();
				clearTabs();
			break;
			case GenForm.ContextMenus.LookupAdmin.Collapse :
				form.treTypes().collapseAll();
				clearTabs();
			break;
			case GenForm.ContextMenus.LookupAdmin.RefreshCache :
				refreshCache();
			break;
			case GenForm.ContextMenus.LookupAdmin.Sort :
				sortInstances();
			break;
			default :
			break;
		}
		
		updateControlsState();//WDEV-17074
	}

	protected void onBtnSetDefaultClick() throws PresentationLogicException
	{
		FormLookupVo formLookup = form.getLocalContext().getFormLookup();
		if (formLookup == null) return;
		formLookup.setDefaultInstance(form.lyr1().Forms().cmbDefInst().getValue());
		try
		{
			domain.saveDefaultInstance(form.getLocalContext().getChosenForm(), formLookup);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
		}
	}

	protected void onBtnInstCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearTypeDetails();
		clearInstanceDetails();
		form.treTypes().setValue(null);
		setFormMode(FormMode.VIEW);
	}
	public void updateControlsState()
	{
		if (form.treTypes().getValue() instanceof LookupTypeVo)
        {
			form.lyr1().Instance().btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && !((LookupTypeVo)form.treTypes().getValue()).isSystemType());
			form.lyr1().Instance().btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && !((LookupTypeVo)form.treTypes().getValue()).isSystemType());
        }
        else if (form.treTypes().getValue() instanceof LookupInstVo)
        {
            form.lyr1().Instance().btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && !(getLookupInstParentType(form.treTypes().getSelectedNode())).isSystemType());
            form.lyr1().Instance().btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && !(getLookupInstParentType(form.treTypes().getSelectedNode())).isSystemType());
        }
        else
        {
        	form.lyr1().Instance().btnNew().setVisible(false);
        }
		
		//WDEV-17074
		form.getContextMenus().getMappingGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getMappingGridDeleteItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Instance().grdMappings().getValue()!=null);
	
	}
	public LookupTypeVo getLookupInstParentType(TreeNode node)
	{
		LookupTypeVo parent = null;
		if(node == null)
			throw new CodingRuntimeException("Invalid tree node!");
		if(node.getParent().getValue() instanceof LookupInstVo)
		{
			return getLookupInstParentType(node.getParent());
		}
		else if(node.getParent().getValue() instanceof LookupTypeVo)
		{
			parent = (LookupTypeVo)node.getParent().getValue();
		}
		return parent;
	}
	protected void onBtnInstSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		LookupInstVo vo = form.getLocalContext().getLookupInstance();
		if (form.lyr1().Instance().intInstId().getValue() != null)
		{
			vo.setId(form.lyr1().Instance().intInstId().getValue().intValue());
		}
		else
		{
			vo.setActive(true);
		}

		if (form.lyr1().Instance().txtInstText().getValue() == null || form.lyr1().Instance().txtInstText().getValue().equals(""))
		{
			engine.showMessage("Text is a mandatory field");
			form.lyr1().Instance().txtInstText().setFocus();
			return;
		}

		vo.setText(form.lyr1().Instance().txtInstText().getValue());

		vo.setImage(form.lyr1().Instance().qmbImage().getValue());
		vo.setColor(form.lyr1().Instance().cmbColor().getValue());
		vo.setParentInstance(form.lyr1().Instance().cmbParent().getValue());
		vo.clearMappings();

		grdMappingsRowCollection rows = form.lyr1().Instance().grdMappings().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			grdMappingsRow row = rows.get(i);
			if (row.getExtSystem() == null)
			{
				engine.showMessage("You must specify the External System for all Lookup Mappings.");
				return;
			}
			if (row.getExtCode() == null || row.getExtCode().equals(""))
			{
				engine.showMessage("You must specify the External Code for all Lookup Mappings.");
				return;
			}
			vo.addMapping(new LookupMappingVo(row.getExtSystem().getText(), row.getExtCode()));
		}

		LookupTypeVo type = form.getLocalContext().getLookupType();
		if (type == null)
		{
			engine.showMessage("Can't find Lookup Type for the instance being saved");
			return;
		}

		try
		{
			domain.saveLookupInstance(type, vo);
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (DomainInterfaceException ex)
		{
			engine.showMessage(ex.getMessage());
			return;
		}
		onBtnSearchClick();
		form.lyr1().showInstance();
		form.treTypes().setValue(form.getLocalContext().getLookupType());
		setFormMode(FormMode.VIEW);
		if(form.treTypes().getSelectedNode() != null)
		{
			enableTypeItemsOnSelection(form.treTypes().getSelectedNode());
		}
	}

	protected void onGrdMappingsSelectionChanged() throws PresentationLogicException
	{
		enableMapItemsOnSelection();
	}

	protected void onQmbImageValueChanged() throws PresentationLogicException
	{
		Image img = form.lyr1().Instance().qmbImage().getValue();
		if (img == null)
		{
			form.lyr1().Instance().imgInst().setVisible(false);
		}
		else
		{
			form.lyr1().Instance().imgInst().setVisible(true);
			form.lyr1().Instance().imgInst().setValue(img);
		}
	}

	protected void onQmbImageTextSubmited(String value) throws PresentationLogicException
	{
		form.lyr1().Instance().qmbImage().clear();
		Image[] images = engine.getRegisteredImages();
		Image img = null;
		for (int i = 0; i < images.length; i++)
		{
			img = images[i];
			if (img.getImagePath().toLowerCase().indexOf(value.toLowerCase()) != -1
				&& img.isActive())
			{
				form.lyr1().Instance().qmbImage().newRow(img, img.getImagePath());
			}
		}
		int size = form.lyr1().Instance().qmbImage().getValues().size();
		if (size == 1)
		{
			form.lyr1().Instance().qmbImage().setValue((Image) form.lyr1().Instance().qmbImage().getValues().get(0));
			form.lyr1().Instance().imgInst().setValue((Image) form.lyr1().Instance().qmbImage().getValues().get(0));
		}
		else if (size > 1)
		{
			form.lyr1().Instance().qmbImage().showOpened();
		}
	}

	protected void onLnkFormsClick() throws PresentationLogicException
	{
		form.lyr1().Forms().grdFormLookups().getRows().clear();
		form.lyr1().Forms().cmbDefInst().clear();
		form.lyr1().showForms();
		form.lyr1().Forms().txtFormFilter().setFocus();
		form.lyr1().Forms().btnFormFilter().setAsDefaultButton();
	}

	protected void onGrdFormLookupsSelectionChanged() throws PresentationLogicException
	{
		FormLookupVo formLookup = form.lyr1().Forms().grdFormLookups().getValue();
		form.txtFilter().setValue(formLookup.getLookupType().getName());
		form.chkUserTypes().setValue(false);
		LookupTypeVoCollection coll = domain.getTypes(formLookup.getLookupType().getName(),Boolean.valueOf(false),Boolean.valueOf(false),Boolean.valueOf(true));
		form.getLocalContext().settypeColl(coll);
		populateTree(coll);
		if (coll.size() > 0)
		{
			for (int i = 0 ; i < coll.size() ; i++)
			{
				if (coll.get(i).getName() != null
					&& formLookup.getLookupType().getName() != null
					&& coll.get(i).getName().equals(formLookup.getLookupType().getName()))
					populateCombo(coll.get(i));			
			}
		}
		form.lyr1().Forms().cmbDefInst().setValue(formLookup.getDefaultInstance());
		form.getLocalContext().setFormLookup(formLookup);		
	}

	private void populateCombo(LookupTypeVo type)
	{
		int typeId = type.getId();
		LookupInstanceCollection instColl;
		if (typeId < 0)
		{
			instColl = domain.getLookupService().getLookupCollection(type, true, false);
		}
		else
		{
			instColl = domain.getLookupService().getLookupCollection(typeId, ClassHelper.getLookupCollectionClass(typeId), ClassHelper.getLookupClass(typeId), true, true);
		}
		form.lyr1().Forms().cmbDefInst().clear();
		for (int i = 0; i < instColl.size(); i++)
		{
			LookupInstVo inst = instColl.getIndex(i);
			form.lyr1().Forms().cmbDefInst().newRow(inst, inst.getText(), inst.getImage());
		}
		
	}

	protected void onGrdFormsSelectionChanged() throws PresentationLogicException
	{
		AppFormVo appForm = form.lyr1().Forms().grdForms().getValue();
		form.getLocalContext().setChosenForm(appForm);
		FormLookupVoCollection coll = domain.getFormLookups(appForm);
		populateFormLookupsGrid(coll);
	}

	private void sortInstances()
	{
		TreeNode node = form.treTypes().getSelectedNode();
		if (node == null)
			throw new RuntimeException("No Type Selected");

		node.sortChildrenByText(true,true);
		this.saveOrder();
		//form.getContextMenus().getLookupAdminSaveItem().setVisible(true);
	}

	private void populateFormLookupsGrid(FormLookupVoCollection coll)
	{
		form.lyr1().Forms().cmbDefInst().clear();
		form.lyr1().Forms().grdFormLookups().getRows().clear();
		GenForm.lyr1Layer.FormsContainer.grdFormLookupsRow row = null;
		for (int i = 0; i < coll.size(); i++)
		{
			row = form.lyr1().Forms().grdFormLookups().getRows().newRow();
			row.setValue(coll.get(i));
			row.setId(new Integer(coll.get(i).getLookupType().getId()));
			row.setLookup(coll.get(i).getLookupType().getName());
		}
	}

	private void populateTree(LookupTypeVoCollection coll)
	{
		clearTabs();
		form.treTypes().clear();
		if (coll == null)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			LookupTypeVo type = coll.get(i);
			int typeId = type.getId();
			
			// Skip inactive types if checkbox ticked
			if (type.isActive() == false && form.chkActiveOnly().getValue() == true)
				continue;

			if (typeId > 0 && form.chkUserTypes().getValue() == true)
				continue;
			if (typeId < 0 && form.chkUserTypes().getValue() == false)
				continue;

			String dispStr = type.getName();

			TreeNode node = form.treTypes().getNodes().add(coll.get(i), dispStr, i+1);
			node.setCollapsedImage(form.getImages().Core.ZoomInEnabled16);
			node.setExpandedImage(form.getImages().Core.ZoomInEnabled16);
			node.setSelectedImage(form.getImages().Core.ZoomInEnabled16);

			LookupInstanceCollection instColl;
			if (typeId < 0)
			{
				instColl = domain.getLookupService().getLookupCollection(type, false, false);
			}
			else
			{
				instColl = domain.getLookupService().getLookupCollection(typeId, ClassHelper.getLookupCollectionClass(typeId), ClassHelper.getLookupClass(typeId), false, false);
			}

			populateTree(node, instColl, i+1, type.isHierarchical());
		}
		form.treTypes().expandAll();
		form.lblTotal().setValue("Total : " + form.treTypes().getNodes().size());
	}

	/**
	 * @param node
	 * @param instColl
	 *            populate a types instance nodes
	 */
	private void populateTree(TreeNode node, LookupInstanceCollection instColl, int nodeType, boolean isHierarchical)
	{
		int instNodeType = form.treTypes().getNodes().size() + 1;
		LookupInstVo[] roots = instColl.getRoots();
		for (int j = 0; j < roots.length; j++)
		{
			LookupInstVo inst = roots[j];
			if (inst.isActive() == false && form.chkActiveOnly().getValue() == true)
				continue;
			TreeNode newNode = null;
			if (inst.getId() < 0 || !isHierarchical)
			{
				newNode = node.getNodes().add(inst, getDisplayString(inst), instNodeType, true);
			}
			else
			{
				newNode = node.getNodes().add(inst, getDisplayString(inst), instNodeType, new int[]{nodeType,instNodeType}, true);
			}				 
			Image img = getCorrectImage(inst);
			newNode.setExpandedImage(img);
			newNode.setCollapsedImage(img);
			newNode.setSelectedImage(img);

			fillLookupHierarchy(newNode, inst, nodeType, isHierarchical);
		}
	}

	private String getDisplayString(LookupInstVo inst)
	{
		if (inst == null)
			return "";

		StringBuffer strDisplay = new StringBuffer();

		if (ConfigFlag.UI.SHOW_LOOKUP_POS.getValue())
		{
			strDisplay.append(String.valueOf(inst.getOrder()));
			strDisplay.append(". ");
		}

		strDisplay.append(inst.getText());
		return strDisplay.toString();
	}

	private void fillLookupHierarchy(TreeNode rootNode, LookupInstVo inst, int nodeType, boolean isHierarchical)
	{
		int instNodeType = form.treTypes().getNodes().size() + 1;
		ArrayList children = inst.getChildInstances();
		for (int i = 0; i < children.size(); i++)
		{
			LookupInstVo child = (LookupInstVo) children.get(i);
			if (child.isActive() == false && form.chkActiveOnly().getValue() == true)
				continue;
			TreeNode newNode = null;
			if (inst.getId() < 0 || !isHierarchical)
			{
				newNode = rootNode.getNodes().add(child, getDisplayString(child), instNodeType, true);
			}
			else
			{
				newNode = rootNode.getNodes().add(child, getDisplayString(child), instNodeType, new int[]{nodeType,instNodeType}, true);
			}				 
			Image img = getCorrectImage(child);
			newNode.setExpandedImage(img);
			newNode.setCollapsedImage(img);
			newNode.setSelectedImage(img);
			fillLookupHierarchy(newNode, child, nodeType, isHierarchical);
		}
	}

	private void clearTabs()
	{
		clearTypeDetails();
		clearInstanceDetails();
	}

	private void clearTypeDetails()
	{
		form.lyr1().Type().intTypeId().setValue(null);
		form.lyr1().Type().txtTypeName().setValue(null);
		form.lyr1().Type().txtTypeDesc().setValue(null);
		form.lyr1().Type().chkTypeHier().setValue(false);
		form.lyr1().Type().chkTypeSystem().setValue(false);
	}

	private void clearInstanceDetails()
	{
		form.lyr1().Instance().intInstId().setValue(null);
		form.lyr1().Instance().txtInstText().setValue(null);
		form.lyr1().Instance().imgInst().setVisible(false);
		form.lyr1().Instance().qmbImage().clear();
		form.lyr1().Instance().cmbColor().setValue(null);
		form.lyr1().Instance().grdMappings().getRows().clear();
		form.lyr1().Instance().cmbParent().clear();
		form.lyr1().Instance().cmbParent().setVisible(false);
		form.lyr1().Instance().lblParent().setVisible(false);
	}

	private void populateTypeDetails(LookupTypeVo type)
	{
		if (type != null)
		{
			form.lyr1().Type().intTypeId().setValue(new Integer(type.getId()));
			form.lyr1().Type().txtTypeName().setValue(type.getName());
			form.lyr1().Type().txtTypeDesc().setValue(type.getDescription());
			form.lyr1().Type().chkTypeHier().setValue(type.isHierarchical());
			form.lyr1().Type().chkTypeSystem().setValue(type.isSystemType());
		}
		enableTypeControls(type);
	}

	private void enableTypeControls(LookupTypeVo type)
	{
		if (type == null || type.getId() < 0) // It's an IMS supplied lookup type or a New one
		{
			form.lyr1().Type().txtTypeName().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyr1().Type().txtTypeDesc().setEnabled(form.getMode().equals(FormMode.EDIT));
			form.lyr1().Type().chkTypeHier().setEnabled(form.getMode().equals(FormMode.EDIT));
			if (form.getMode().equals(FormMode.VIEW))
			{
				if (type == null)
					form.lyr1().Type().btnUpdType().setEnabled(false);
				else
					form.lyr1().Type().btnUpdType().setEnabled(true);	
			}				
		}
		else
		{
			form.lyr1().Type().txtTypeName().setEnabled(false);
			form.lyr1().Type().txtTypeDesc().setEnabled(false);
			form.lyr1().Type().chkTypeHier().setEnabled(false);
			if (form.getMode().equals(FormMode.VIEW))
			{
				form.lyr1().Type().btnUpdType().setEnabled(false);				
			}
		}
	}

	private void populateInstanceDetails(LookupInstVo inst)
	{
		form.lyr1().Instance().intInstId().setValue(new Integer(inst.getID()));
		form.lyr1().Instance().txtInstText().setValue(inst.getText());
		form.lyr1().Instance().imgInst().setVisible(inst.getImage() != null);
		form.lyr1().Instance().imgInst().setValue(inst.getImage());
		if (inst.getImage() != null)
		{
			Image img = engine.getRegisteredImage(inst.getImage().getImageId());
			form.lyr1().Instance().qmbImage().newRow(img, img.getImagePath());
			form.lyr1().Instance().qmbImage().setValue(img);
		}

		form.lyr1().Instance().cmbColor().setValue(inst.getColor());
		form.getGlobalContext().Admin.setColourChosen(inst.getColor());

		LookupTypeVo type = form.getLocalContext().getLookupType();
		if (type.isHierarchical())
		{
			form.lyr1().Instance().cmbParent().setVisible(true);
			form.lyr1().Instance().lblParent().setVisible(true);
			if (inst.getParentInstance() != null)
			{
				form.lyr1().Instance().cmbParent().newRow(inst.getParentInstance(), inst.getParentInstance().getText());
			}
			form.lyr1().Instance().cmbParent().setValue(inst.getParentInstance());
			}

		form.lyr1().Instance().grdMappings().getRows().clear();
		LookupInstVo instMap = domain.getMappings(inst);
		LookupMappingVoCollection mapColl = instMap.getMappings();
		for (int i = 0; i < mapColl.size(); i++)
		{
			LookupMappingVo valueObject = mapColl.get(i);

			GenForm.lyr1Layer.InstanceContainer.grdMappingsRow row = form.lyr1().Instance().grdMappings().getRows().newRow();
			row.setExtSystem(getExtSystemInstance(valueObject.getExtSystem()));
			row.setExtCode(valueObject.getExtCode());
			row.setValue(valueObject);
		}
	}

	private TaxonomyType getExtSystemInstance(String extSystem)
	{
		TaxonomyTypeCollection coll = LookupHelper.getTaxonomyType(this.domain.getLookupService());
		for (int x = 0; x < coll.size(); x++)
		{
			TaxonomyType inst = coll.get(x);
			if (inst.getText().equals(extSystem))
				return inst;
		}
		return null;
	}

	private void populateParentCombo(boolean updateItem)
	{
		LookupInstVo inst = null;
		if (updateItem)
			inst = (LookupInstVo) form.treTypes().getSelectedNode().getValue();

		LookupTypeVo type = form.getLocalContext().getLookupType();
		if (type.isHierarchical())
		{
			form.lyr1().Instance().cmbParent().clear();

			// Two loops needed, one to populated the related hashmap
			HashMap related = new HashMap();
			LookupInstanceCollection coll;
			int typeId = type.getId();
			if (typeId < 0)
			{
				coll = domain.getLookupService().getLookupCollection(type, true, true);
			}
			else
			{
				coll = domain.getLookupService().getLookupCollection(typeId, ClassHelper.getLookupCollectionClass(typeId), ClassHelper.getLookupClass(typeId), true, true);
			}

			for (int i = 0; i < coll.size(); i++)
			{
				LookupInstVo v = coll.getIndex(i);
				// If my parent is related, then I am too!
				if (v.equals(inst) || v.getParentInstance() != null && related.containsKey(new Integer(v.getParentInstance().getID())))
					related.put(new Integer(v.getID()), v);
			}

			for (int i = 0; i < coll.size(); i++)
			{
				LookupInstVo v = coll.getIndex(i);

				// Check not a child/grandchild etc..
				if (!related.containsKey(new Integer(v.getID())))
					form.lyr1().Instance().cmbParent().newRow(v, v.getText());
			}
			if (updateItem)
			{
				form.lyr1().Instance().cmbParent().setValue(inst.getParentInstance());
			}
		}

	}

	private void editInstance()
	{
		if (form.treTypes().getSelectedNode() == null)
			return;
		if (ConfigFlag.GEN.ALLOW_LOOKUP_TEXT_EDIT.getValue() || engine.hasRight(AppRight.LOOKUP_TEXT_MODIFY))
		{
			setFormMode(FormMode.EDIT);
			populateParentCombo(true);
			form.lyr1().Instance().txtInstText().setEnabled(true);			
		}
		else
		{
			form.getGlobalContext().Core.setYesNoDialogMessage("Editing the text of a lookup should only be done to correct a typing error. It should in no way change the meaning of the lookup.");
			engine.open(form.getForms().Core.YesNoDialog);			
		}
	}

	private void updateInstance()
	{
		setFormMode(FormMode.EDIT);
		LookupInstVo val = (LookupInstVo)form.treTypes().getValue();
		if (val.getId() >= 0)
		{
			form.lyr1().Instance().cmbColor().setEnabled(true);
			form.lyr1().Instance().cmbParent().setEnabled(true);
			form.lyr1().Instance().qmbImage().setEnabled(true);			
		}
		populateParentCombo(true);
	}

	private void deactivateInstance()
	{
		TreeNode node = form.treTypes().getSelectedNode();
		if (node == null || !(node.getValue() instanceof LookupInstVo))
			return;

		LookupTypeVo type = form.getLocalContext().getLookupType();
		if (type == null)
		{
			engine.showMessage("Can't find Lookup Type for the instance being changed");
			return;
		}
		try
		{
			domain.deactivateInstance(type, form.getLocalContext().getLookupInstance());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		this.onBtnSearchClick();
	}

	private void deleteMapping()
	{
		form.lyr1().Instance().grdMappings().removeSelectedRow();
	}

	private void addMapping()
	{
		form.lyr1().Instance().grdMappings().setValue(null);//WDEV-17074
		form.lyr1().Instance().grdMappings().getRows().newRow();
	}

	private void saveOrder()
	{
		LookupInstanceCollection instColl = new LookupInstanceCollection();
		TreeNode rootNode = getRootNode();

		if (rootNode == null)
			return;

		LookupTypeVo type = (LookupTypeVo) rootNode.getValue();
		TreeNodeCollection coll = rootNode.getNodes();
		if (coll == null)
			return;
		
		addToOrderedColl(coll, instColl);		
		try
		{
			domain.saveInstanceOrder(type, instColl);
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}

	private void addToOrderedColl(TreeNodeCollection nodes, LookupInstanceCollection instColl)
	{
		if (nodes == null) return;
		for (int i = 0; i < nodes.size(); i++)
		{
			TreeNode node = nodes.get(i);
			LookupInstVo val = (LookupInstVo) node.getValue();			
			if (val != null)
				instColl.add(val);
			addToOrderedColl(node.getNodes(), instColl);
		}
	}

	private void setFormMode(FormMode mode)
	{
		form.setMode(mode);
		
		form.getContextMenus().getLookupAdminAddItem().setVisible(false);
		form.getContextMenus().getLookupAdminDeactivateItem().setVisible(false);
		form.getContextMenus().getLookupAdminUpdateItem().setVisible(false);
		form.getContextMenus().getLookupAdminEditItem().setVisible(false);
		form.getContextMenus().getLookupAdminSortItem().setVisible(false);
		form.getContextMenus().getLookupAdminSaveItem().setVisible(false);
		form.getContextMenus().getLookupAdminRefreshCacheItem().setVisible(false);
		form.getContextMenus().getMappingGridAddItem().setVisible(false);
		form.getContextMenus().getMappingGridDeleteItem().setVisible(false);

		if (mode.equals(FormMode.EDIT))
		{
			form.getContextMenus().getMappingGridAddItem().setVisible(true);
			form.lyr1().Instance().cmbParent().setEnabled(true);
			form.lyr1().Instance().txtInstText().setEnabled(false);

			form.lyr1().Instance().cmbColor().setEnabled(false);
			form.lyr1().Instance().cmbParent().setEnabled(false);
			form.lyr1().Instance().qmbImage().setEnabled(false);
			
			form.lyr1().Instance().btnNew().setEnabled(false);
			
		}
		else
		{
			form.getContextMenus().getLookupAdminRefreshCacheItem().setVisible(true);
			form.lyr1().Instance().cmbParent().setEnabled(false);
			form.lyr1().Instance().txtInstText().setEnabled(false);
			form.lyr1().Instance().btnNew().setEnabled(true);
		}
		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();
		
	}

	private TreeNode getRootNode()
	{
		return getRootNode(form.treTypes().getSelectedNode());
	}

	private TreeNode getRootNode(TreeNode node)
	{
		if (node == null)
			return null;

		TreeNode parent = node;
		while (parent.getParent() != null)
		{
			parent = parent.getParent();
		}
		return parent;
	}

	private LookupTypeVo getTypeFromInstNode(TreeNode node)
	{
		TreeNode rootNode = getRootNode(node);
		LookupTypeVo type = (LookupTypeVo) rootNode.getValue();
		return type;
	}

	private boolean canUpdateInstance()
	{
		LookupTypeVo type = form.getLocalContext().getLookupType();
		if (type == null)
			return false;
		return true;
	}

	private void enableInstanceItemsOnSelection(ims.framework.controls.TreeNode node)
	{
		if (!(node.getValue() instanceof LookupInstVo))
			return;
		LookupInstVo inst = (LookupInstVo) node.getValue();
		form.getContextMenus().getLookupAdminAddItem().setVisible(false);
		form.getContextMenus().getLookupAdminViewItem().setVisible(false);
		form.getContextMenus().getLookupAdminEditItem().setVisible(false);
		form.getContextMenus().getLookupAdminSaveItem().setVisible(false);

		LookupTypeVo type = form.getLocalContext().getLookupType();
		boolean systemType = false;
		if (type != null)
		{
			if (!type.isHierarchical())
				form.getContextMenus().getLookupAdminViewItem().setVisible(false);

			systemType = type.isSystemType();
			form.getContextMenus().getLookupAdminAddItem().setVisible(!systemType);
		}

		form.getContextMenus().getLookupAdminDeactivateItem().setVisible(true);
		if (inst.isActive())
		{
			form.getContextMenus().getLookupAdminDeactivateItem().setText("Deactivate");
			form.getContextMenus().getLookupAdminDeactivateItem().setVisible(!inst.hasActiveChildren());
			form.getContextMenus().getLookupAdminDeactivateItem().setIcon(form.getImages().Core.Delete);
		}
		else
		{
			form.getContextMenus().getLookupAdminDeactivateItem().setText("Activate");
			form.getContextMenus().getLookupAdminDeactivateItem().setIcon(form.getImages().Core.Tick);
		}
		form.getContextMenus().getLookupAdminUpdateItem().setVisible(canUpdateInstance());
		
		if (inst.getId() > 0)
			form.getContextMenus().getLookupAdminEditItem().setVisible(true);
		
		form.getContextMenus().getLookupAdminSortItem().setVisible(false);
		
		form.lyr1().Instance().btnNew().setEnabled(!systemType);
	}

	private void enableTypeItemsOnSelection(ims.framework.controls.TreeNode node)
	{
		if (!(node.getValue() instanceof LookupTypeVo))
			return;

		form.getContextMenus().getLookupAdminViewItem().setVisible(false);
		form.getContextMenus().getLookupAdminEditItem().setVisible(false);

		LookupTypeVo type = (LookupTypeVo) node.getValue();
		if (!type.isHierarchical())
			form.getContextMenus().getLookupAdminViewItem().setVisible(false);

		boolean systemType = type.isSystemType();
		form.getContextMenus().getLookupAdminAddItem().setVisible(!systemType);

		form.getContextMenus().getLookupAdminDeactivateItem().setVisible(false);
		form.getContextMenus().getLookupAdminUpdateItem().setVisible(false);
		form.getContextMenus().getLookupAdminRefreshCacheItem().setVisible(true);

		if ( node.getNodes() != null && node.getNodes().size() > 0)
		{
			form.getContextMenus().getLookupAdminSortItem().setVisible(!systemType);
			form.getContextMenus().getLookupAdminSaveItem().setVisible(!systemType);
		}
		else
		{
			form.getContextMenus().getLookupAdminSortItem().setVisible(false);
			form.getContextMenus().getLookupAdminSaveItem().setVisible(false);
		}

	
		if(type.getId() < 0)
			form.lyr1().Type().btnUpdType().setEnabled(form.getMode().equals(FormMode.VIEW));
	}

	private void enableMapItemsOnSelection()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().getMappingGridAddItem().setVisible(false);
			form.getContextMenus().getMappingGridDeleteItem().setVisible(false);
		}
		else
		{
			form.getContextMenus().getMappingGridAddItem().setVisible(true);
			form.getContextMenus().getMappingGridDeleteItem().setVisible(true);
		}
	}
	
	/*
	 * sets the context menu when nothing is selected in  the lookup tree
	 */
	private void disableContextMenuItemsOnSelectionCleared()
	{
		if (null != form.treTypes().getSelectedNode())
			return;
		form.getContextMenus().getLookupAdminAddItem().setVisible(false);
		form.getContextMenus().getLookupAdminDeactivateItem().setVisible(false);
		form.getContextMenus().getLookupAdminEditItem().setVisible(false);
		form.getContextMenus().getLookupAdminSaveItem().setVisible(false);
		form.getContextMenus().getLookupAdminSortItem().setVisible(false);
		form.getContextMenus().getLookupAdminUpdateItem().setVisible(false);
		form.getContextMenus().getLookupAdminViewItem().setVisible(false);
		form.getContextMenus().getMappingGridAddItem().setVisible(false);
		form.getContextMenus().getMappingGridDeleteItem().setVisible(false);
		
		form.getContextMenus().getLookupAdminExpandItem().setVisible(true);
		form.getContextMenus().getLookupAdminCollapseItem().setVisible(true);
		form.getContextMenus().getLookupAdminRefreshCacheItem().setVisible(true);
		
		updateControlsState(); 
	}

	private ims.framework.utils.Image getCorrectImage(LookupInstVo inst)
	{
		if (!inst.isActive())
			return form.getImages().Core.RedSqaure;
		if (inst.getId() < 0)
			return form.getImages().Core.YellowSquare;
		return form.getImages().Core.BlueSquare;
	}

	private void createNewInstance()
	{
		clearInstanceDetails();
		LookupInstVo vo = new LookupInstVo();
		TreeNode rootNode = getRootNode();
		if (rootNode == null)
		{
			engine.showMessage("Please select lookup list name or parent.");//wdev-3191
			return;
		}
		LookupInstVo inst = form.getLocalContext().getLookupInstance();

		LookupTypeVo typeVo = getTypeFromInstNode(rootNode);
		populateParentCombo(false);
		if (inst != null && typeVo.isHierarchical())
		{
			vo.setParentInstance(inst);
			form.lyr1().Instance().cmbParent().setValue(inst);
			form.lyr1().Instance().cmbParent().setVisible(true);
			form.lyr1().Instance().lblParent().setVisible(true);
		}
		vo.setOrder(rootNode.getNodes().size());
		form.getLocalContext().setLookupInstance(vo);
		form.lyr1().showInstance();
		setFormMode(FormMode.EDIT);
		form.lyr1().Instance().txtInstText().setFocus();
		form.lyr1().Instance().txtInstText().setEnabled(true);
		form.lyr1().Instance().cmbColor().setEnabled(true);
		form.lyr1().Instance().cmbParent().setEnabled(true);
		form.lyr1().Instance().qmbImage().setEnabled(true);			
	}

	private void refreshCache()
	{
		LookupTypeVo type = null;
		for (int i = 0; i < form.treTypes().getNodes().size(); i++)
		{
			type = (LookupTypeVo) form.treTypes().getNodes().get(i).getValue();
			domain.refreshCache(type);
			domain.getLookupService().refreshCache(type.getId());
		}
		LookupTypeVoCollection coll = form.getLocalContext().gettypeColl();
		populateTree(coll);
		setFormMode(FormMode.VIEW); //WDEV-16986
	}

	protected void onBtnCancelTypeClick() throws PresentationLogicException
	{
		clearTypeDetails();
		clearInstanceDetails();
		form.treTypes().setValue(null);
		setFormMode(FormMode.VIEW);
		form.lyr1().Type().btnUpdType().setVisible(true);		
		enableTypeControls(null);
	}

	protected void onBtnSaveTypeClick() throws PresentationLogicException
	{
		LookupTypeVo vo = form.getLocalContext().getLookupType();
		if (vo == null)
			throw new PresentationLogicException("Local Context does not contain a Lookup Type instance. This indicates an application bug.");
		if (form.lyr1().Type().intTypeId().getValue() != null)
		{
			vo.setId(form.lyr1().Type().intTypeId().getValue().intValue());
		}
		if (form.lyr1().Type().txtTypeName().getValue() == null)
		{
			engine.showErrors(new String[]{"Name is mandatory."});
			return;
		}
		vo.setName(form.lyr1().Type().txtTypeName().getValue());
		vo.setDescription(form.lyr1().Type().txtTypeDesc().getValue());
		vo.setHierarchical(form.lyr1().Type().chkTypeHier().getValue());
		vo.setSystemType(false);
		vo.setActive(true);

		try
		{
			domain.saveLookupType(vo);
		}
		catch (StaleObjectException ex)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException ex)
		{
			engine.showMessage(ex.getMessage());
			return;
		}
		form.txtFilter().setValue(vo.getName());
		onBtnSearchClick();
		form.lyr1().showType();
		setFormMode(FormMode.VIEW);
		form.lyr1().Type().btnUpdType().setVisible(true);
	}

	protected void onTreTypesTreeViewNodeDropped(TreeNode node, TreeNode oldParent) throws PresentationLogicException
	{
		if (node.getValue() != null && node.getValue() instanceof LookupInstVo )
		{
			LookupInstVo vo = (LookupInstVo)node.getValue();
			if (node.getParent() == null)
			{
				vo.setParentInstance(null);
			}
			else
			{
				if (node.getParent().getValue() instanceof LookupTypeVo)
				{
					vo.setParentInstance(null);
				}
				else
				{
					vo.setParentInstance((LookupInstVo)node.getParent().getValue());
				}				
			}
		}
		
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && (result.equals(DialogResult.OK) ||result.equals(DialogResult.YES) ))
		{
			String password = form.getGlobalContext().getPasswordEntered();
			if (password == null || !password.equals("texteditor!"))
			{
				engine.showMessage("Incorrect password entered. Editing text will not be enabled.");
				return;
			}
			setFormMode(FormMode.EDIT);
			populateParentCombo(true);
			form.lyr1().Instance().txtInstText().setEnabled(true);
		}
		else if (formName.equals(form.getForms().Core.TaxonomySearch) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
			{
				TaxonomyMap map = form.getGlobalContext().Core.getTaxonomyMap();
				grdMappingsRow row;
				for (int i = 0; i < form.lyr1().Instance().grdMappings().getRows().size(); i++)
				{
					row = form.lyr1().Instance().grdMappings().getRows().get(i);
					if (row.getExtSystem().equals(map.getTaxonomyName()))
					{
						row.setExtCode(map.getTaxonomyCode());
						break;
					}
				}
			}			
		}
	}

	protected void onTreTypesTreeViewSelectionCleared() throws PresentationLogicException
	{
		form.treTypes().clearSelection();
		clearInstanceDetails();
		clearTypeDetails();
		disableContextMenuItemsOnSelectionCleared();
	}
	
	protected void onChkUserTypesValueChanged()
	{
		onBtnSearchClick();
		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();
	}

	protected void onBtnUpdTypeClick() throws PresentationLogicException
	{
		LookupTypeVo vo = form.getLocalContext().getLookupType();
		if (vo == null)
			throw new PresentationLogicException("Local Context does not contain a Lookup Type instance. This indicates an application bug.");
		
		form.setMode(FormMode.EDIT);
		enableTypeControls(vo);
	}

	protected void onBtnNewTypeClick() throws PresentationLogicException
	{
		clearTypeDetails();
		LookupTypeVo vo = new LookupTypeVo();
		form.getLocalContext().setLookupType(vo);
		form.lyr1().showType();
		setFormMode(FormMode.EDIT);
		populateTypeDetails(null);
		form.lyr1().Type().txtTypeName().setFocus();		
	}

	protected void onGrdMappingsGridButtonClicked(int column, grdMappingsRow row) throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.EDIT))
			taxonomySearch(row);
	}
	
	private void taxonomySearch(grdMappingsRow row)
	{
		if(row.getExtSystem() == null)
		{
			engine.showMessage("Please select External Code Type");
			return;
		}				
		form.getGlobalContext().Core.setTaxonomySearchForName(form.lyr1().Instance().txtInstText().getValue());
		TaxonomyMap voTaxonomyMap = new TaxonomyMap();		
		voTaxonomyMap.setTaxonomyName(row.getExtSystem());
		voTaxonomyMap.setTaxonomyCode(row.getExtCode());
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomyMap);		
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	protected void onBtnFormFilterClick() throws PresentationLogicException
	{
		if (form.lyr1().Forms().txtFormFilter().getValue() == null || form.lyr1().Forms().txtFormFilter().getValue().length() < 3)
		{
			engine.showMessage("To search, enter at least three characters.");
			return;
		}
			
		form.lyr1().Forms().grdForms().getRows().clear();
		form.lyr1().Forms().grdFormLookups().getRows().clear();
		form.lyr1().Forms().cmbDefInst().clear();
		form.getLocalContext().setChosenForm(null);
		
		AppFormVoCollection coll = domain.listForms(form.lyr1().Forms().txtFormFilter().getValue());
		for (int i = 0; i < coll.size(); i++)
		{
			AppFormVo formVo = coll.get(i);
			grdFormsRow row = form.lyr1().Forms().grdForms().getRows().newRow();
			row.setValue(formVo);
			row.setFormName(formVo.getName());
		}		
		form.lyr1().Forms().txtFormFilter().setFocus();
	}

	protected void onChkSystemTypesValueChanged() throws PresentationLogicException
	{
		if (null != form.getLocalContext().gettypeColl()&&(form.getLocalContext().gettypeColl().size()>0))
		{
			onBtnSearchClick();
		}
		if (!form.lyr1().Forms().isVisible())
			form.btnSearch().setAsDefaultButton();
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
}
