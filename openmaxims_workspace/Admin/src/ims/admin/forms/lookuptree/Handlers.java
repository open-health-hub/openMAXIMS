//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.lookuptree;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode, ims.framework.interfaces.IClearInfo
{
	abstract protected void bindgrdMappingsExtSystemLookup();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkSystemTypesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkUserTypesValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onLnkFormsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkActiveOnlyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdTypeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewTypeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelTypeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveTypeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbImageValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbImageTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnInstCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnInstSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdMappingsGridButtonClicked(int column, GenForm.lyr1Layer.InstanceContainer.grdMappingsRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdMappingsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnFormFilterClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdFormsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSetDefaultClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdFormLookupsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTreTypesTreeViewNodeDropped(ims.framework.controls.TreeNode node, ims.framework.controls.TreeNode previousParentNode) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTreTypesTreeViewSelectionCleared() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onTreTypesTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.chkSystemTypes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkSystemTypesValueChanged();
			}
		});
		this.form.chkUserTypes().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkUserTypesValueChanged();
			}
		});
		this.form.lnkForms().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onLnkFormsClick();
			}
		});
		this.form.btnSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSearchClick();
			}
		});
		this.form.chkActiveOnly().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkActiveOnlyValueChanged();
			}
		});
		this.form.lyr1().Type().btnUpdType().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdTypeClick();
			}
		});
		this.form.lyr1().Type().btnNewType().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewTypeClick();
			}
		});
		this.form.lyr1().Type().btnCancelType().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelTypeClick();
			}
		});
		this.form.lyr1().Type().btnSaveType().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveTypeClick();
			}
		});
		this.form.lyr1().Instance().btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.lyr1().Instance().qmbImage().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbImageValueChanged();
			}
		});
		this.form.lyr1().Instance().qmbImage().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbImageTextSubmited(value);
			}
		});
		this.form.lyr1().Instance().btnInstCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnInstCancelClick();
			}
		});
		this.form.lyr1().Instance().btnInstSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnInstSaveClick();
			}
		});
		this.form.lyr1().Instance().grdMappings().setGridButtonClickedEvent(new GridButtonClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdMappingsGridButtonClicked(column, new GenForm.lyr1Layer.InstanceContainer.grdMappingsRow(row));
			}
		});
		this.form.lyr1().Instance().grdMappings().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdMappingsSelectionChanged();
			}
		});
		this.form.lyr1().Forms().btnFormFilter().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnFormFilterClick();
			}
		});
		this.form.lyr1().Forms().grdForms().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdFormsSelectionChanged();
			}
		});
		this.form.lyr1().Forms().btnSetDefault().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSetDefaultClick();
			}
		});
		this.form.lyr1().Forms().grdFormLookups().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdFormLookupsSelectionChanged();
			}
		});
		this.form.treTypes().setTreeViewNodeDroppedEvent(new TreeViewNodeDropped()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.TreeNode node, ims.framework.controls.TreeNode previousParentNode) throws ims.framework.exceptions.PresentationLogicException
			{
				onTreTypesTreeViewNodeDropped(node, previousParentNode);
			}
		});
		this.form.treTypes().setTreeViewSelectionClearedEvent(new TreeViewSelectionCleared()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onTreTypesTreeViewSelectionCleared();
			}
		});
		this.form.treTypes().setTreeViewSelectionChangedEvent(new TreeViewSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
			{
				onTreTypesTreeViewSelectionChanged(node);
			}
		});
		this.form.getContextMenus().getMappingGridAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MappingGrid.Add, sender);
			}
		});
		this.form.getContextMenus().getMappingGridDeleteItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.MappingGrid.Delete, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminAddItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Add, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminUpdateItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Update, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminEditItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Edit, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminDeactivateItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Deactivate, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminSortItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Sort, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminSaveItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Save, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminViewItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.View, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminExpandItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Expand, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminCollapseItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.Collapse, sender);
			}
		});
		this.form.getContextMenus().getLookupAdminRefreshCacheItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.LookupAdmin.RefreshCache, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindgrdMappingsExtSystemLookup();
	}
	protected void rebindAllLookups()
	{
		bindgrdMappingsExtSystemLookup();
	}
	protected void defaultAllLookupValues()
	{
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	public abstract void clearContextInformation();
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
