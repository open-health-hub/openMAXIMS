//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2328.23985)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.drawingconfiglist;

import ims.admin.forms.drawingconfiglist.GenForm.GroupSearchCriteriaEnumeration;
import ims.core.vo.DrawingGraphicImageShortVo;
import ims.core.vo.DrawingGraphicImageShortVoCollection;
import ims.assessment.vo.GraphicAssessmentFilterVo;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		enableContextMenu();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtImageNameSearch().setValue("");
		form.cmbStatus().setValue(null);
		clearSearchGrid();
		enableContextMenu();
		clearGraphicAssessmentSearchFilter();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.DrawingConfigList.AddDrawingConfiguration :
				addDrawingConfiguration();
			break;

			case GenForm.ContextMenus.DrawingConfigList.EditDrawingConfiguration :
				editDrawingConfiguration();
			break;

			case GenForm.ContextMenus.DrawingConfigList.AddDrawingConfigurationBasedOn :
				addDrawingConfigurationBasedOn();
			break;

			case GenForm.ContextMenus.DrawingConfigList.View :
				viewDrawingConfiguration();
			break;
		}
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		enableContextMenu();//WDEV-17875
	}

	private void search()
	{
		clearSearchGrid();
		doSearch();
		setGraphicAssessmentSearchFilter();
	}

	private void doSearch()
	{
		String name = form.txtImageNameSearch().getValue();

		if (name != null)
			name = name.trim();

		//WDEV-1736 - users should be able to search without entering any search criteria   
		/*if (name == null || name.equals(""))
		{
			engine.showMessage("Please enter an Image Name");
			form.txtImageNameSearch().setFocus();
			return;
		}*/

		if (name != null && name.length() > 0)
		{
			GroupSearchCriteriaEnumeration criteria = form.GroupSearchCriteria().getValue();
			if (criteria != null)
			{
				if (criteria.equals(GroupSearchCriteriaEnumeration.rdoBeginsWith))
				{
					name += "%";
				}
				if (criteria.equals(GroupSearchCriteriaEnumeration.rdoContains))
				{
					name = "%" + name + "%";
				}
			}
		}

		DrawingGraphicImageShortVoCollection voColl = domain.listGraphicImages(name, form.cmbStatus().getValue());
		if (voColl == null || voColl.size() == 0)
			engine.showMessage("No Drawing Configurations found for the Search Criteria Provided");

		displayListImages(voColl);
		
	}

	protected void onGrdImagesSearchSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}

	private void displayListImages(DrawingGraphicImageShortVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			DrawingGraphicImageShortVo voDGImage = voColl.get(i);
			GenForm.grdImagesSearchRow row = form.grdImagesSearch().getRows().newRow();
			row.setcolImageName(voDGImage.getImageName());
			row.setcolDescription(voDGImage.getImageDescription());
			row.setcolStatus(voDGImage.getImageStatusIsNotNull() ? voDGImage.getImageStatus().toString() : "");
			row.setcolVersionNo(voDGImage.getVersionNumberIsNotNull() ? voDGImage.getVersionNumber().toString() : "");
			row.setValue(voDGImage);
		}
	}

	private void initialize()
	{
		if(form.getGlobalContext().Admin.getDrawingConfigListFilterIsNotNull())
		{
			GraphicAssessmentFilterVo voGraphicAssessmentFilter = form.getGlobalContext().Admin.getDrawingConfigListFilter();
			if(voGraphicAssessmentFilter != null)
			{
				form.txtImageNameSearch().setValue(voGraphicAssessmentFilter.getName());
				form.cmbStatus().setValue(voGraphicAssessmentFilter.getStatus());
				form.GroupSearchCriteria().setValue(getGroupCriteria(voGraphicAssessmentFilter));
				search();
			}
		}
		else
		{
			DrawingGraphicImageShortVo voDrawingGraphicImageShort = form.getGlobalContext().Admin.getDrawingGraphicImageShortVo();
			if(voDrawingGraphicImageShort != null && voDrawingGraphicImageShort.getID_DrawingGraphicImageIsNotNull())
			{
				clearSearchGrid();
				DrawingGraphicImageShortVoCollection voColl = new DrawingGraphicImageShortVoCollection();
				voColl.add(voDrawingGraphicImageShort);
				displayListImages(voColl);
			}
			setDefaultData();
		}	
	}
	
	private void clearSearchGrid()
	{
		form.grdImagesSearch().getRows().clear();
	}

	private void viewDrawingConfiguration()
	{
		setCurrentRecordInContext();
		setDrawingConfigMode(FormMode.VIEW);
		openEditDrawingConfig();
		
	}

	private void addDrawingConfigurationBasedOn()
	{
		setCurrentRecordInContext();
		clearGraphicAssessmentSearchFilter();
		setDrawingConfigMode(null);
		openEditDrawingConfig();
	}

	private void editDrawingConfiguration()
	{
		setCurrentRecordInContext();
		clearGraphicAssessmentSearchFilter();
		setDrawingConfigMode(FormMode.EDIT);
		openEditDrawingConfig();
	}

	private void addDrawingConfiguration()
	{
		form.getGlobalContext().Admin.setDrawingGraphicImageShortVo(null);
		setDrawingConfigMode(FormMode.EDIT);
		openEditDrawingConfig();
		
	}

	private void setCurrentRecordInContext()
	{
		form.getGlobalContext().Admin.setDrawingGraphicImageShortVo(form.grdImagesSearch().getValue());		
	}
	
	private void setDrawingConfigMode(FormMode mode)
	{
		form.getGlobalContext().Admin.setDrawingConfigFormMode(mode);
	}

	private void openEditDrawingConfig()
	{
		engine.open(form.getForms().Admin.DrawingConfig);
	}

	private void enableContextMenu()
	{
		DrawingGraphicImageShortVo voDrawingGraphic = form.grdImagesSearch().getValue();
		boolean isRecordSelected = voDrawingGraphic != null;

		form.getContextMenus().getDrawingConfigListAddDrawingConfigurationItem().setVisible(true);
		form.getContextMenus().getDrawingConfigListEditDrawingConfigurationItem().setVisible(isRecordSelected);
		form.getContextMenus().getDrawingConfigListViewItem().setVisible(isRecordSelected);
		form.getContextMenus().getDrawingConfigListAddDrawingConfigurationBasedOnItem().setText(getConfigurationText(voDrawingGraphic));
		form.getContextMenus().getDrawingConfigListAddDrawingConfigurationBasedOnItem().setVisible(isRecordSelected);
	}

	private String getConfigurationText(DrawingGraphicImageShortVo voDrawingGraphic)
	{
		String text = "Add Drawing Configuration";
		if (voDrawingGraphic != null && voDrawingGraphic.getImageNameIsNotNull())
		{
			text += " based on '";
			text += voDrawingGraphic.getImageName();
			text += "'";
		}
		return text;
	}
	
	private void clearGraphicAssessmentSearchFilter()
	{
		form.getGlobalContext().Admin.setDrawingConfigListFilter(null);
	}
	
	private void setGraphicAssessmentSearchFilter()
	{
		GraphicAssessmentFilterVo voGraphicAssFilter = new GraphicAssessmentFilterVo();
		voGraphicAssFilter.setName(form.txtImageNameSearch().getValue());
		voGraphicAssFilter.setStatus(form.cmbStatus().getValue());
		GroupSearchCriteriaEnumeration criteria = form.GroupSearchCriteria().getValue();
		voGraphicAssFilter.setBeginsWith(new Boolean(criteria.equals(GroupSearchCriteriaEnumeration.rdoBeginsWith)));
		voGraphicAssFilter.setContains(new Boolean(criteria.equals(GroupSearchCriteriaEnumeration.rdoContains)));
		voGraphicAssFilter.setExactText(new Boolean(criteria.equals(GroupSearchCriteriaEnumeration.rdoExactText)));
		form.getGlobalContext().Admin.setDrawingConfigListFilter(voGraphicAssFilter);
	}
	
	private GroupSearchCriteriaEnumeration getGroupCriteria(GraphicAssessmentFilterVo voGraphicAssessmentFilter)
	{
		if(voGraphicAssessmentFilter != null)
		{
			if(voGraphicAssessmentFilter.getBeginsWithIsNotNull() && voGraphicAssessmentFilter.getBeginsWith().booleanValue())
				return GroupSearchCriteriaEnumeration.rdoBeginsWith;
			if(voGraphicAssessmentFilter.getContainsIsNotNull() && voGraphicAssessmentFilter.getContains().booleanValue())
				return GroupSearchCriteriaEnumeration.rdoContains;
			if(voGraphicAssessmentFilter.getExactTextIsNotNull() && voGraphicAssessmentFilter.getExactText().booleanValue())
				return GroupSearchCriteriaEnumeration.rdoContains;
		}
		return GroupSearchCriteriaEnumeration.None;
	}

	private void setDefaultData()
	{
		form.GroupSearchCriteria().setValue(GroupSearchCriteriaEnumeration.rdoBeginsWith);
		form.txtImageNameSearch().setFocus();
	}
	
	public static final String	CR	= "\n";
}
