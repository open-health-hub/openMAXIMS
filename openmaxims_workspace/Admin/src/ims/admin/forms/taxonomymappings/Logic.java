//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.taxonomymappings;

import java.util.ArrayList;

import ims.admin.forms.taxonomymappings.BaseLogic;
import ims.admin.forms.taxonomymappings.GenForm;
import ims.admin.forms.taxonomymappings.GenForm.grdMappingsRow;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.vo.enums.TaxonomyMappings;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//***************************
	//****** Public methods ******
	//***************************
	
	public void setValue(TaxonomyMapCollection coll) 
	{	
		form.getLocalContext().setSetComponentValue(coll);
		initialize();
	}
	
	public void setComponentMode(FormMode mode) 
	{	
		form.getLocalContext().setComponentMode(mode);
		
		//WDEV-14534
		if (form.grdMappings().getSelectedRow() != null) 
		{
			form.grdMappings().setValue(null);
		}
		
		enableContextMenu(mode.equals(FormMode.EDIT) ? Boolean.TRUE : Boolean.FALSE);
		
	}
	
	public TaxonomyMapCollection getValue() 
	{
		return getMappings();
	}
	
	public TaxonomyMapCollection getValueNoWarnings()
	{
		return getMappingsNoWarnings();
	}

	public void initialize() 
	{
		setContextMenuTexts();
		enableContextMenu(Boolean.FALSE);
		open();
	}

	public String[] validate()
	{
		return getValidationErrors();
	}

	//***************************
	//****** Private methods ******
	//***************************	
	
	private void setContextMenuTexts()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add");		
		form.getContextMenus().getGenericGridUpdateItem().setText("Update");
		form.getContextMenus().getGenericGridViewItem().setText("Search");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove");
	}
	
	private TaxonomyMapCollection getMappings() 
	{
		TaxonomyMapCollection voTaxonomyMapCollection =  new TaxonomyMapCollection();
		
		for (int i = 0; i < form.grdMappings().getRows().size(); i++)
		{
			GenForm.grdMappingsRow row = form.grdMappings().getRows().get(i);
			TaxonomyMap voTaxonomyMap = row.getValue() != null ? row.getValue() : new TaxonomyMap();
			voTaxonomyMap.setTaxonomyCode(row.getcolCode());			
			voTaxonomyMap.setTaxonomyName((TaxonomyType) row.getcolExtCodeType());
			
			if (row.getcolCode() != null && row.getcolExtCodeType() != null)
				voTaxonomyMapCollection.add(voTaxonomyMap);
			else
			{
				StringBuffer sb = new StringBuffer();
				sb.append("The taxonomy mapping of Type ");
				sb.append(row.getcolExtCodeType() != null ? "'" + ((TaxonomyType) row.getcolExtCodeType()).getText()+ "'" : "???");
				sb.append(" and Value of ");
				sb.append(row.getcolCode() != null ? "'" + row.getcolCode().toString()+ "'" : "???");
				sb.append(" will not be held for saving due to missing data.");
				engine.showMessage(sb.toString(),"Missing data", MessageButtons.OK, MessageIcon.WARNING);
			}
		}

		return voTaxonomyMapCollection;
	}
	
	private TaxonomyMapCollection getMappingsNoWarnings()
	{
		TaxonomyMapCollection voTaxonomyMapCollection =  new TaxonomyMapCollection();
		
		for (int i = 0; i < form.grdMappings().getRows().size(); i++)
		{
			GenForm.grdMappingsRow row = form.grdMappings().getRows().get(i);
			TaxonomyMap voTaxonomyMap = row.getValue() != null ? row.getValue() : new TaxonomyMap();
			voTaxonomyMap.setTaxonomyCode(row.getcolCode());			
			voTaxonomyMap.setTaxonomyName((TaxonomyType) row.getcolExtCodeType());
			
			if (row.getcolCode() != null || row.getcolExtCodeType() != null)
				voTaxonomyMapCollection.add(voTaxonomyMap);
		}

		return voTaxonomyMapCollection;
	}

	private String[] getValidationErrors()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		for (int i = 0; i < form.grdMappings().getRows().size(); i++)
		{
			GenForm.grdMappingsRow row = form.grdMappings().getRows().get(i);
			TaxonomyMap voTaxonomyMap = row.getValue() != null ? row.getValue() : new TaxonomyMap();
			voTaxonomyMap.setTaxonomyCode(row.getcolCode());			
			voTaxonomyMap.setTaxonomyName((TaxonomyType) row.getcolExtCodeType());

			if (row.getcolCode() == null && row.getcolExtCodeType() != null)
			{
				StringBuffer errors = new StringBuffer();
				errors.append("The taxonomy mapping of Type ");
				errors.append(row.getcolExtCodeType() != null ? "'" + ((TaxonomyType) row.getcolExtCodeType()).getText()+ "'" : "???");
				errors.append(" and Value of ");
				errors.append(row.getcolCode() != null ? "'" + row.getcolCode().toString()+ "'" : "???");
				errors.append(" is missing data at row " + (i+1));
				listOfErrors.add(errors.toString());
				continue;
			}
			
			if (row.getcolExtCodeType() == null && row.getcolCode() != null)
			{
				StringBuffer errors = new StringBuffer();
				errors.append("The taxonomy mapping of Type ");
				errors.append(row.getcolExtCodeType() != null ? "'" + ((TaxonomyType) row.getcolExtCodeType()).getText()+ "'" : "???");
				errors.append(" and Value of ");
				errors.append(row.getcolCode() != null ? "'" + row.getcolCode().toString()+ "'" : "???");
				errors.append(" is missing data at row " + (i+1));
				listOfErrors.add(errors.toString());
				continue;
			}
		}

		int errorCount = listOfErrors.size();
		if (errorCount == 0)
			return null;

		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
		{
			result[x] = (String)listOfErrors.get(x);
		}

		return result;
	}

	private void populateTaxonomyMappings(TaxonomyMapCollection coll)
	{
		clear();
		if (coll != null)
		{
			grdMappingsRow row = null;
			for (int i=0; i < coll.size(); i++)
			{
				row = form.grdMappings().getRows().newRow();
				
				row.setcolExtCodeType(coll.get(i).getTaxonomyName());
				row.setcolCode(coll.get(i).getTaxonomyCode());					
				
				row.setValue(coll.get(i));
				row.setReadOnly(true);
			}
		}
	}
	
	private boolean isEditMode()
	{
		if (form.getLocalContext().getComponentModeIsNotNull())
		{
			if (form.getLocalContext().getComponentMode().equals(FormMode.EDIT))
				return true;
		}
		
		return false;
	}
	
	private void enableContextMenu(Boolean isEnable)
	{
		boolean selectedRow = form.grdMappings().getSelectedRowIndex() > 0;
		
		form.getContextMenus().getGenericGridAddItem().setVisible(isEnable.booleanValue());		
		form.getContextMenus().getGenericGridUpdateItem().setVisible(isEnable.booleanValue() && selectedRow);
		form.getContextMenus().getGenericGridViewItem().setVisible(isEnable.booleanValue());
		form.getContextMenus().getGenericGridRemoveItem().setVisible(isEnable.booleanValue() && selectedRow);
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				onMenuClick(TaxonomyMappings.NEWTAXONOMY);					
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				onMenuClick(TaxonomyMappings.EDITTAXONOMY);
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				onMenuClick(TaxonomyMappings.REMOVETAXONOMY);			
				break;
			case GenForm.ContextMenus.GenericGrid.View:
				onMenuClick(TaxonomyMappings.SEARCH);			
				break;
		}
	}
	
	private void onMenuClick(TaxonomyMappings selectedMenu) 
	{
		if (selectedMenu.equals(TaxonomyMappings.NEWTAXONOMY))
		{
			addTaxonomy();
		}
		else if (selectedMenu.equals(TaxonomyMappings.EDITTAXONOMY))
		{
			editTaxonomy();
		}
		else if (selectedMenu.equals(TaxonomyMappings.REMOVETAXONOMY))
		{
			removeTaxonomy();
		}
		else if (selectedMenu.equals(TaxonomyMappings.SEARCH))
		{
			form.grdMappings().setValue(null);
			form.getLocalContext().setSelectedRecord(null);
			searchTaxonomy();
		}
	}
	
	private void searchTaxonomy() 
	{
			taxonomySearch();
	}
	
	private void removeTaxonomy() 
	{
		form.grdMappings().removeSelectedRow();
		updateControlsState();
	}
	private void editTaxonomy() 
	{
		grdMappingsRow selectedRow = form.grdMappings().getSelectedRow();
		if (selectedRow != null)
			selectedRow.setReadOnly(false);
		
	}
	private void addTaxonomy() 
	{
		form.grdMappings().getRows().newRow(true).setValue(new TaxonomyMap());
		form.grdMappings().resetScrollPosition();
		updateControlsState();
		
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if ( (formName.equals(form.getForms().Core.TaxonomySearch)) && (result.equals(DialogResult.OK)))
		{
			if (form.getLocalContext().getLockedIsNotNull() &&
					form.getLocalContext().getLocked().equals(Boolean.TRUE))
			{
				if(form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
				{
					TaxonomyMap voTaxonomyMap = form.getGlobalContext().Core.getTaxonomyMap();
					TaxonomyMap selectedRecord = form.getLocalContext().getSelectedRecord();
					grdMappingsRow row = null;
					
					if (selectedRecord == null)
					{
						row = form.grdMappings().getRows().newRow();
					}
					else
					{
						row = form.grdMappings().getRowByValue(selectedRecord);
					}
						
					populateTaxonomy(row, voTaxonomyMap);
					form.getLocalContext().setLocked(Boolean.FALSE);
				}
			}
		}
		
		updateControlsState();	//WDEV-12118
	}
	
	private void updateControlsState()
	{
		boolean isReadOnly = (form.grdMappings().getSelectedRow() != null &&
				form.grdMappings().getSelectedRow().isReadOnly());
		
		if (!isEditMode())
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		}
		else
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdMappings().getValue() != null && isReadOnly);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.grdMappings().getSelectedRowIndex()>=0);
		}
	}

	private void populateTaxonomy(grdMappingsRow row, TaxonomyMap voTaxonomyMap)
	{
		if(row != null && voTaxonomyMap != null)
		{
			row.setcolExtCodeType(voTaxonomyMap.getTaxonomyName());
			row.setcolCode(voTaxonomyMap.getTaxonomyCode());
			row.setValue(voTaxonomyMap);
		}		
	}	
	
	@Override
	protected void onFormModeChanged()
	{
		if (!isEditMode())
		{
			enableContextMenu(Boolean.FALSE);
		}
		else
		{
			enableContextMenu(Boolean.TRUE);
		}
	
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		if (form.getLocalContext().getComponentModeIsNotNull())
		{
			form.setMode(form.getLocalContext().getComponentMode());
		}
		else
		{
			form.setMode(FormMode.VIEW);
		}
		initialize();
		setContextMenuTexts();
	}
	
	private void open()
	{
		enableContextMenu(Boolean.FALSE);
		populateTaxonomyMappings(form.getLocalContext().getSetComponentValue());
		form.setMode(FormMode.EDIT);
	}
	
	public void clear() 
	{
		form.grdMappings().getRows().clear();
		form.getLocalContext().setSetComponentValue(null);//WDEV-14534
	}

	@Override
	protected void onGrdMappingsGridButtonClicked(int column, grdMappingsRow row) throws PresentationLogicException 
	{
		if(isEditMode())
		{
			form.grdMappings().setValue(row.getValue());
			form.getLocalContext().setSelectedRecord(row.getValue());
			taxonomySearch();	
		}
	}

	/**
	 * Takes the value of the selected row and opens the TaxonomySearch dialog
	 * @param grdMappingsRow
	 * @return void
	 */
	private void taxonomySearch()
	{
		form.getLocalContext().setLocked(Boolean.TRUE);
		engine.open(form.getForms().Core.TaxonomySearch);
	}
	
	@Override
	protected void onGrdMappingsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

}
