//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.35 build 2102.27822)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.batchprinting;

import ims.admin.forms.batchprinting.GenForm.grdJobsRow;
import ims.admin.forms.batchprinting.GenForm.grdReportsAvailableRow;
import ims.admin.forms.batchprinting.GenForm.grdReportsToPrintRow;
import ims.admin.vo.PrintAgentVo;
import ims.admin.vo.PrintAgentVoCollection;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.admin.vo.TemplatePrinterVo;
import ims.admin.vo.TemplatePrinterVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.StringUtils;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.ntpf.vo.lookups.JobType;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;

import com.ims.query.builder.client.PrinterAvailableCollection;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static String	daily	= "Daily";
	private static String	weekly	= "Weekly";
	private static String	monthly	= "Monthly";
	private static String	periodically = "Periodically";
	
	private static final Integer DNA_PATIENT_LETTER_ID = new Integer(158); 
	private static final Integer RESULT_CENTRAL_BATCH_PRINT_ID = new Integer(243);
	private static final Integer RESULT_ORDERING_LOCATION_BATCH_PRINT_ID = new Integer(75);
	
	private static final Integer CREATED_ON = new Integer(1);
	private static final Integer LAST_RUN = new Integer(4);
	private static final Integer LAST_SUCCESRUN = new Integer(5);
	

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		form.cmbFrequency().newRow(daily, daily);
		form.cmbFrequency().newRow(weekly, weekly);
		form.cmbFrequency().newRow(monthly, monthly);
		form.cmbFrequency().newRow(periodically, periodically);

		QueryBuilderClient qbc = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());

		try
		{
			PrinterAvailableCollection printers = qbc.listPrinters(ConfigFlag.GEN.REPORT_SERVER_URL.getValue());

			String[] printersColl = new String[printers.size()];

			for (int i = 0; i < printers.size(); i++)
			{
				form.grdReportsToPrint().ColumnPrintToComboBox().newRow(printers.get(i).getName(), printers.get(i).getName());
				printersColl[i] = printers.get(i).getName();
			}

			form.getLocalContext().setAvailablePrinters(printersColl);
		}
		catch (QueryBuilderClientException e)
		{
			engine.showMessage("Error getting the printers list: " + e.toString());
		}

		open();
	}

	private void open()
	{
		clearScreen();
		form.setMode(FormMode.VIEW);

		ReportVoCollection coll = null;
		PrintAgentVoCollection collPrintAgentVo = null;

		coll = domain.listReports();
		collPrintAgentVo = domain.listPrintAgents();

		form.getLocalContext().setReportsAvailable(coll);
		
		displayJobs(collPrintAgentVo);

		if (collPrintAgentVo.size() > 0)
		{
			Integer id = form.getLocalContext().getLastId();

			if (id == null)
			{
				id = form.grdJobs().getRows().get(0).getValue().getID_PrintAgent();
			}

			for (int i = 0; i < form.grdJobs().getRows().size(); i++)
			{
				if (form.grdJobs().getRows().get(i).getValue().getID_PrintAgent().equals(id))
				{
					form.grdJobs().setValue(form.grdJobs().getRows().get(i).getValue());
					try
					{
						onGrdJobsSelectionChanged();
					}
					catch (PresentationLogicException e)
					{
						engine.showMessage("Error selecting the grid row: " + e.toString());
						return;
					}
				}
			}

			form.btnUpdate().setVisible(true);
			form.btnPrintNow().setVisible(true);
			form.btnRePrint().setVisible(true);
		}
		else
		{
			form.btnUpdate().setVisible(false);
			form.btnPrintNow().setVisible(false);
			form.btnRePrint().setVisible(false);
		}
		
		updateControlsState();
	}
	//wdev-11600
	private void displayall(PrintAgentVoCollection collPrintAgentVo)
	{
		clearScreen();
		form.setMode(FormMode.VIEW);

		ReportVoCollection coll = null;
		
		displayJobs(collPrintAgentVo);
		form.grdJobs().setValue(form.getLocalContext().getJobSettings());
		try
		{
			onGrdJobsSelectionChanged();
		}
		catch (PresentationLogicException e)
		{
			engine.showMessage("Error selecting the grid row: " + e.toString());
			return;
		}

	}
	//-----------
	private void displayJobs(PrintAgentVoCollection collPrintAgentVo)
	{
		form.grdJobs().getRows().clear();

		for (int i = 0; i < collPrintAgentVo.size(); i++)
		{
			PrintAgentVo job = collPrintAgentVo.get(i);

			grdJobsRow row = form.grdJobs().getRows().newRow();

			fillJobRow(job, row);
		}
	}

	private void fillJobRow(PrintAgentVo job, grdJobsRow row)
	{
		row.setValue(job);
		row.setColumnDescription(job.getDescription());
		if(job.getSysInfoIsNotNull())
			row.setColumnDate(job.getSysInfo().getCreationDateTime().toString());
		row.setColumnLastRun(job.getLastRunDateTimeIsNotNull() ? job.getLastRunDateTime().toString() : "");
		row.setColumnLastSuccessfulRun(job.getLastSuccessfulRunDateTimeIsNotNull() ? job.getLastSuccessfulRunDateTime().toString() : "");
		row.setColumnAppointmentsUpdated(job.getNoOfRecordsUpdatedIsNotNull() ? job.getNoOfRecordsUpdated().toString() : "");
		
		if (job.getIsActive() == null || job.getIsActive().booleanValue() == false)
			row.setTextColor(Color.DarkGray);

		if (job.getLastRunDateTimeIsNotNull() && job.getLastSuccessfulRunDateTimeIsNotNull() && !job.getLastRunDateTime().equals(job.getLastSuccessfulRunDateTime()))
			row.setTextColor(Color.Red);
		else if (job.getLastRunDateTimeIsNotNull() && !job.getLastSuccessfulRunDateTimeIsNotNull())
			row.setTextColor(Color.Red);
		else if (!job.getLastRunDateTimeIsNotNull() && job.getLastSuccessfulRunDateTimeIsNotNull())
			row.setTextColor(Color.Red);

		Trigger trigger = new Trigger(job.getTrigger());

		String html = trigger.getHtmlTranslation();
		row.setColumnTrigger(trigger.getTextTranslation());
		row.setTooltipForColumnTrigger(html);
		row.setTooltipForColumnClock(html);

		if (trigger.getFrequency().equals(daily))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Day);
		}
		else if (trigger.getFrequency().equals(weekly))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Week);
		}
		else if (trigger.getFrequency().equals(monthly))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Month);
		}
	}

	private void displayAvailableReports(ReportVoCollection coll, PrintAgentVo printAgentVo)
	{
		form.grdReportsAvailable().getRows().clear();

		for (int i = 0; i < coll.size(); i++)
		{
			ReportVo rep = coll.get(i);

			if (rep.getTemplatesIsNotNull() && bHasActiveTemplates(rep))
			{
				grdReportsAvailableRow row = form.grdReportsAvailable().getRows().newRow();
				row.setColumnReport(rep.getReportName());
				row.setTooltip(rep.getReportDescription());
				row.setBold(true);
				row.setBackColor(Color.Beige);
				row.setValue(rep);

				for (int j = 0; j < rep.getTemplates().size(); j++)
				{
					if (rep.getTemplates().get(j).getIsActiveIsNotNull() && rep.getTemplates().get(j).getIsActive().equals(Boolean.TRUE) && isTemplateAlreadySelected(rep.getTemplates().get(j), printAgentVo) == false)
					{
						grdReportsAvailableRow child = row.getRows().newRow();

						child.setColumnReport(rep.getTemplates().get(j).getName());
						child.setTooltip(rep.getTemplates().get(j).getDescription());
						child.setValue(rep.getTemplates().get(j));
					}
				}

				row.setExpanded(true);

				if (row.getRows().size() == 0)
				{
					form.grdReportsAvailable().setValue(row.getValue());
					form.grdReportsAvailable().removeSelectedRow();
				}
			}
		}

	}

	private boolean isTemplateAlreadySelected(ReportTemplateVo templateVo, PrintAgentVo printAgentVo)
	{
		if (printAgentVo == null)
			return false;

		for (int i = 0; i < printAgentVo.getTemplatesToPrint().size(); i++)
		{
			if (templateVo.getID_TemplateBo().equals(printAgentVo.getTemplatesToPrint().get(i).getTemplate().getID_TemplateBo()))
				return true;
		}

		return false;
	}

	private boolean bHasActiveTemplates(ReportVo rep)
	{
		if (!rep.getTemplatesIsNotNull())
			return false;

		boolean bHasActiveTemplate = false;

		for (int j = 0; j < rep.getTemplates().size(); j++)
		{
			if (rep.getTemplates().get(j).getIsActiveIsNotNull() && rep.getTemplates().get(j).getIsActive().equals(Boolean.TRUE))
				return true;
		}

		return bHasActiveTemplate;
	}

	private void clearScreen()
	{
		form.grdReportsAvailable().getRows().clear();
		form.grdReportsToPrint().getRows().clear();
		form.cmbFrequency().setValue(null);
		form.dtimStart().setValue(null);
		form.txtDescription().setValue(null);
		form.chkActive().setValue(false);
		form.cmbType().setValue(null);
		form.qmbLocation().setValue(null);
		form.intHrs().setValue(null);

		form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML("");
		form.lyrSchedule().tabPageDaily().intDays().setValue(null);

		form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML("");
		form.lyrSchedule().tabPageWeekly().intWeeks().setValue(null);
		form.lyrSchedule().tabPageWeekly().chkMon().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkTue().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkWed().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkThu().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkFri().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkSat().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkSun().setValue(false);
		
		form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML("");
		form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue(null);
		form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(null);
		
		form.lyrSchedule().tabPageFrequency().htmlLegendFrequency().setHTML("");
		form.lyrSchedule().tabPageFrequency().intFreqMins().setValue(null);
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{

	}

	protected void onBtnPrintNowClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue() == null || ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue().length() == 0)
		{
			engine.showMessage("QUARTZ_SERVER_URL config flag was not set.");
			return;
		}
		
		Integer jobId = form.grdJobs().getValue().getID_PrintAgent();
		
		PrintAgentVo agent = form.grdJobs().getValue();
		
		if(agent.getTemplatesToPrintIsNotNull())
		{
			for (int i = 0; i < agent.getTemplatesToPrint().size(); i++)
			{
				TemplatePrinterVo t = agent.getTemplatesToPrint().get(i);
				
				if(t.getPrinterName() == null || t.getPrinterName().length() == 0)
				{
					engine.showMessage("No printer for batch job, but PDF will be generated.");
					break;
				}
			}
		}

		String content = "action=run&jobid=" + jobId.toString();
		try
		{
			postData(jobId, content);
		}
		catch (MalformedURLException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (IOException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		PrintAgentVo job = domain.getPrintAgent(jobId);
		grdJobsRow row = form.grdJobs().getRowByValue(form.grdJobs().getValue());

		fillJobRow(job, row);
		
		engine.showMessage("The Job has been submitted !");
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue() == null || ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue().length() == 0)
		{
			engine.showMessage("QUARTZ_SERVER_URL config flag was not set.");
			return;
		}
		
		if(form.cmbFrequency().getValue() == null)
		{
			engine.showMessage("Please set the frequency !");
			return;
		}
		
		if(form.cmbFrequency().getValue().equals(monthly) && (form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue() == null || form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue() == null))
		{
			engine.showMessage("Please set both day and time of month !");
			return;
		}
		
		if(form.cmbFrequency().getValue().equals(daily) && form.lyrSchedule().tabPageDaily().intDays().getValue() == null)
		{
			engine.showMessage("Please set the number of days !");
			form.lyrSchedule().tabPageDaily().intDays().setFocus();
			return;
		}
		
		if(form.cmbFrequency().getValue().equals(periodically))
		{
			if(form.lyrSchedule().tabPageFrequency().intFreqMins().getValue() == null)
			{
				engine.showMessage("Please set the Every X mins");
				form.lyrSchedule().tabPageFrequency().intFreqMins().setFocus();
				return;
			}
			else
			{
				if(form.lyrSchedule().tabPageFrequency().intFreqMins().getValue().intValue() > 59)
				{
					engine.showMessage("Value for mins cannot be greater than 59");
					return;
				}
			}
		}
		
		saveRecord();
	}

	private void saveRecord()
	{
		PrintAgentVo job = populateDataFromScreen();

		String[] err = job.validate(validateUIRules());

		if (err != null)
		{
			engine.showErrors(err);
			return;
		}

		if (form.cmbFrequency().getValue().equals(weekly) && form.lyrSchedule().tabPageWeekly().chkMon().getValue() == false && form.lyrSchedule().tabPageWeekly().chkTue().getValue() == false && form.lyrSchedule().tabPageWeekly().chkWed().getValue() == false && form.lyrSchedule().tabPageWeekly().chkThu().getValue() == false && form.lyrSchedule().tabPageWeekly().chkFri().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSat().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSun().getValue() == false)
		{
			engine.showMessage("Please select at least a day of the week !");
			return;
		}
		try
		{
			PrintAgentVo result = domain.savePrintAgent(job);
	
			form.getLocalContext().setLastId(result.getID_PrintAgent());
	
			updateJob(result.getID_PrintAgent());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			job = domain.getPrintAgent(job.getID_PrintAgent());
			grdJobsRow row = form.grdJobs().getRowByValue(form.grdJobs().getValue());

			fillJobRow(job, row);
			displayJobDetails(job);
			form.getLocalContext().setJobSettings(job);

			return;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (IOException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		open();
	}

	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(JobType.CENTRAL_BATCH_PRINT.equals(form.cmbType().getValue()) && !(form.qmbLocation().getValue() instanceof LocSiteLiteVo))
		{
			uiErrors.add("Location is mandatory.");		
		}
		else if(JobType.ORDERING_LOCATION_BATCH_PRINT.equals(form.cmbType().getValue()) && (form.grdReportsToPrint().getValues().length == 0))
		{
			uiErrors.add("Reports to be printed is mandatory.");		
		}
		
		if(JobType.DNA_BATCH_JOB.equals(form.cmbType().getValue()) && form.intHrs().getValue() == null)
		{
			uiErrors.add("Appts within last is mandatory.");	
		}
		
		String[] voValidate = new String[uiErrors.size()];
		uiErrors.toArray(voValidate);
		
		return voValidate;
	}

	private void updateJob(Integer jobId) throws IOException
	{
		String content = "action=update&jobid=" + jobId.toString();
		postData(jobId, content);
	}

	private void postData(Integer jobId, String content) throws IOException
	{
		URL url;
		URLConnection urlConn;
		DataOutputStream printout;
		String qsUrl = ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue();

		if (qsUrl.endsWith("/"))
			qsUrl += "QuartzInitializer";
		else
			qsUrl += "/QuartzInitializer";
		// URL of servlet.
		url = new URL(qsUrl);
		// URL connection channel.
		urlConn = url.openConnection();
		// Let the run-time system (RTS) know that we want input.
		urlConn.setDoInput(true);
		// Let the RTS know that we want to do output.
		urlConn.setDoOutput(true);
		// No caching, we want the real thing.
		urlConn.setUseCaches(false);
		// Specify the content type.
		urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		// Send POST output.
		printout = new DataOutputStream(urlConn.getOutputStream());
		// String content = "";
		printout.writeBytes(content);
		printout.flush();
		printout.close();
		// Get response data.
		/*
		 * Map headers = urlConn.getHeaderFields(); Iterator it =
		 * headers.keySet().iterator();
		 * 
		 * while(it.hasNext()) { String key = (String)it.next();
		 * System.out.println(key + " >> " + headers.get(key)); }
		 */

		String err = urlConn.getHeaderField(null);
		// the OK response should be HTTP/1.1 200 OK
		if (err.indexOf("HTTP/1.1 200 OK") == -1)
		{
			engine.showMessage("Failed to update or run the job: " + err);
			return;
		}

		/*
		 * input = new DataInputStream (urlConn.getInputStream ());
		 * BufferedReader d = new BufferedReader(new InputStreamReader(input));
		 * String str; while (null != ((str = d.readLine()))) {
		 * System.out.println (str); } input.close ();
		 */
	}

	private PrintAgentVo populateDataFromScreen()
	{
		PrintAgentVo agent = form.getLocalContext().getJobSettings();

		if (agent == null)
			agent = new PrintAgentVo();

		agent.setDescription(form.txtDescription().getValue());
		/*
		if (!agent.getRecordingDateTimeIsNotNull())
			agent.setRecordingDateTime(new DateTime());
		*/	
		agent.setTrigger(getTriggerFromScreen());
		agent.setQueryServerUrl(ConfigFlag.GEN.QUERY_SERVER_URL.getValue());
		agent.setReportServerUrl(ConfigFlag.GEN.REPORT_SERVER_URL.getValue());
		agent.setIsActive(new Boolean(form.chkActive().getValue()));
		agent.setJobType(form.cmbType().getValue());
		
		agent.setDNAApptsInLastXhrs(JobType.DNA_BATCH_JOB.equals(form.cmbType().getValue()) ? form.intHrs().getValue() : null);
		agent.setLocationToPrintFor(JobType.CENTRAL_BATCH_PRINT.equals(form.cmbType().getValue()) ? form.qmbLocation().getValue() : null);
		
		return agent;
	}

	private String getTriggerFromScreen()
	{
		Trigger trigger = new Trigger();

		trigger.setFrequency(form.cmbFrequency().getValue());
		trigger.setStartDateTime(form.dtimStart().getValue());
		trigger.setDays(form.lyrSchedule().tabPageDaily().intDays().getValue());
		trigger.setWeeks(form.lyrSchedule().tabPageWeekly().intWeeks().getValue());
		trigger.setMon(form.lyrSchedule().tabPageWeekly().chkMon().getValue());
		trigger.setTue(form.lyrSchedule().tabPageWeekly().chkTue().getValue());
		trigger.setWed(form.lyrSchedule().tabPageWeekly().chkWed().getValue());
		trigger.setThu(form.lyrSchedule().tabPageWeekly().chkThu().getValue());
		trigger.setFri(form.lyrSchedule().tabPageWeekly().chkFri().getValue());
		trigger.setSat(form.lyrSchedule().tabPageWeekly().chkSat().getValue());
		trigger.setSun(form.lyrSchedule().tabPageWeekly().chkSun().getValue());
		trigger.setMins(form.lyrSchedule().tabPageFrequency().intFreqMins().getValue());
		
		trigger.setDayOfMonth(form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue());
		trigger.setTimeOfMonth(form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue());
		
		return trigger.toXML();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onCmbFrequencyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dtimStart().getValue() == null)
			form.dtimStart().setValue(new DateTime());
		
		if (form.cmbFrequency().getValue() == null)
		{
			return;
		}
		
		if (form.cmbFrequency().getValue().equals(daily))
		{
			form.lyrSchedule().showtabPageDaily();

			if (form.lyrSchedule().tabPageDaily().intDays().getValue() == null)
				form.lyrSchedule().tabPageDaily().intDays().setValue(new Integer(1));
		}
		else if (form.cmbFrequency().getValue().equals(weekly))
		{
			form.lyrSchedule().showtabPageWeekly();

			if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue() == null)
			{
				form.lyrSchedule().tabPageWeekly().intWeeks().setValue(new Integer(1));

				form.lyrSchedule().tabPageWeekly().chkMon().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkTue().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkWed().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkThu().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkFri().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkSat().setValue(true);
				form.lyrSchedule().tabPageWeekly().chkSun().setValue(true);
			}
		}
		else if (form.cmbFrequency().getValue().equals(monthly))
		{
			form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(1);
			form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue(null);
			
			form.lyrSchedule().showtabPageMonthly();
		}
		else if (form.cmbFrequency().getValue().equals(periodically))
		{
			form.lyrSchedule().tabPageFrequency().intFreqMins().setValue(5);
			form.lyrSchedule().showtabPageFrequency();
		}	
		
		recalcTrigger();
	}

	protected void onBtnRemoveAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		removeAllTemplates();
	}

	private void removeAllTemplates() 
	{
		PrintAgentVo agent = form.getLocalContext().getJobSettings();

		if(agent == null)
			return;
		
		agent.getTemplatesToPrint().clear();
		form.getLocalContext().setJobSettings(agent);

		displayAvailableReports(form.getLocalContext().getReportsAvailable(), agent);
		displaySelectedTemplates(agent);
	}

	protected void onBtnRemoveReportClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.grdReportsToPrint().getValue() == null || !(form.grdReportsToPrint().getValue() instanceof TemplatePrinterVo))
		{
			engine.showMessage("Please select a template !");
			return;
		}

		PrintAgentVo agent = form.getLocalContext().getJobSettings();

		TemplatePrinterVo repTemplate = (TemplatePrinterVo) form.grdReportsToPrint().getValue();

		for (int i = 0; i < agent.getTemplatesToPrint().size(); i++)
		{
			TemplatePrinterVo tp = agent.getTemplatesToPrint().get(i);

			if (tp.getTemplate().getID_TemplateBo().equals(repTemplate.getTemplate().getID_TemplateBo()))
			{
				agent.getTemplatesToPrint().remove(tp);
				form.getLocalContext().setJobSettings(agent);
				break;
			}
		}

		displayAvailableReports(form.getLocalContext().getReportsAvailable(), agent);
		displaySelectedTemplates(agent);
	}

	protected void onBtnAddReportClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addReportToBePrinted();
	}

	private void addReportToBePrinted()
	{
		if (form.grdReportsAvailable().getValue() == null || !(form.grdReportsAvailable().getValue() instanceof ReportTemplateVo))
		{
			engine.showMessage("Please select a template !");
			return;
		}

		PrintAgentVo agent = form.getLocalContext().getJobSettings();

		if (agent == null)
			agent = new PrintAgentVo();

		if (!agent.getTemplatesToPrintIsNotNull())
			agent.setTemplatesToPrint(new TemplatePrinterVoCollection());

		// we allow only one template to be printed
		if (agent.getTemplatesToPrint().size() >= 1)
		{
			engine.showMessage("Only one template per job is allowed !");
			return;
		}

		TemplatePrinterVo tp = new TemplatePrinterVo();
		if (form.getLocalContext().getAvailablePrintersIsNotNull() && form.getLocalContext().getAvailablePrinters().length > 0)
			tp.setPrinterName(form.getLocalContext().getAvailablePrinters()[0]);
		else
			tp.setPrinterName("");
		tp.setTemplate((ReportTemplateVo) form.grdReportsAvailable().getValue());

		agent.getTemplatesToPrint().add(tp);
		form.getLocalContext().setJobSettings(agent);

		displayAvailableReports(form.getLocalContext().getReportsAvailable(), agent);
		displaySelectedTemplates(agent);
	}

	private void displaySelectedTemplates(PrintAgentVo agent)
	{
		form.grdReportsToPrint().getRows().clear();

		if (agent == null || agent.getTemplatesToPrintIsNotNull() == false)
			return;

		for (int i = 0; i < agent.getTemplatesToPrint().size(); i++)
		{
			TemplatePrinterVo tp = agent.getTemplatesToPrint().get(i);

			grdReportsToPrintRow parentRow = getParentRowById(tp.getTemplate().getReport());

			if (parentRow == null)
			{
				ReportVo rep = tp.getTemplate().getReport();
				parentRow = form.grdReportsToPrint().getRows().newRow();

				parentRow.setColumnReport(rep.getReportName());
				parentRow.setTooltip(rep.getReportDescription());
				parentRow.setBold(true);
				parentRow.setBackColor(Color.Beige);
				parentRow.setValue(rep);
				parentRow.setExpanded(true);
			}

			grdReportsToPrintRow child = parentRow.getRows().newRow();

			child.setColumnReport(tp.getTemplate().getName());
			child.setColumnPrintTo(tp.getPrinterName());
			child.setColumnPrintToReadOnly(false);
			child.setTooltip(tp.getTemplate().getDescription());
			child.setValue(tp);
		}
	}

	private grdReportsToPrintRow getParentRowById(ReportVo report)
	{
		if (report == null)
			return null;

		for (int i = 0; i < form.grdReportsToPrint().getRows().size(); i++)
		{
			ReportVo rep = (ReportVo) form.grdReportsToPrint().getRows().get(i).getValue();

			if (form.grdReportsToPrint().getRows().get(i).getValue() instanceof ReportVo)
			{
				if (rep.getID_ReportBo().equals(report.getID_ReportBo()))
					return form.grdReportsToPrint().getRows().get(i);
			}
		}

		return null;
	}

	protected void onDtimStartValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	private void recalcTrigger()
	{
		if (form.cmbFrequency().getValue() == null)
			return;

		if (form.dtimStart().getValue() == null)
			return;

		StringBuffer sb = new StringBuffer(100);

		sb.append("&nbsp;At ");

		if (form.cmbFrequency().getValue().equals(daily))
		{
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getTime().toString());
			sb.append("</FONT>");
			sb.append(" every ");

			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML("");

			if (form.lyrSchedule().tabPageDaily().intDays().getValue() == null)
				return;

			if (form.lyrSchedule().tabPageDaily().intDays().getValue().intValue() == 1)
				sb.append("day");
			else
			{
				sb.append("<FONT color=#0000FF>");
				sb.append(form.lyrSchedule().tabPageDaily().intDays().getValue().toString());
				sb.append("</FONT>");
				sb.append(" days");
			}

			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML(sb.toString());
		}
		else if (form.cmbFrequency().getValue().equals(weekly))
		{
			String comma = "";
			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML("");
			
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getTime().toString());
			sb.append("</FONT>");
			sb.append(" every ");

			if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue() == null)
				return;

			if (form.lyrSchedule().tabPageWeekly().chkMon().getValue() == false && form.lyrSchedule().tabPageWeekly().chkTue().getValue() == false && form.lyrSchedule().tabPageWeekly().chkWed().getValue() == false && form.lyrSchedule().tabPageWeekly().chkThu().getValue() == false && form.lyrSchedule().tabPageWeekly().chkFri().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSat().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSun().getValue() == false)
				return;

			if (form.lyrSchedule().tabPageWeekly().chkMon().getValue() == true)
			{
				sb.append("<FONT color=#0000FF>");
				sb.append("Mon");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkTue().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Tue");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkWed().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Wed");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkThu().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Thu");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkFri().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Fri");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkSat().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Sat");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkSun().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Sun");
				sb.append("</FONT>");
				comma = ",";
			}

			if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue().intValue() == 1)
				sb.append(" of every week");
			else
			{
				sb.append(" of every ");
				sb.append("<FONT color=#0000FF>");
				sb.append(form.lyrSchedule().tabPageWeekly().intWeeks().getValue().toString());
				sb.append("</FONT>");
				sb.append(" weeks");
			}

			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML(sb.toString());
		}
		else if (form.cmbFrequency().getValue().equals(monthly))
		{
			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML("");
			
			if (form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue() == null)
				return;
			if (form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue() == null)
				return;

			sb.append("<FONT color=#0000FF>");
			sb.append(form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue().toString());
			sb.append("</FONT>");
			
			sb.append(" on the ");
			sb.append("<FONT color=#0000FF>");
			int dayOfMonth = form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue();
			sb.append(dayOfMonth);
			
			if(dayOfMonth == 1 || dayOfMonth == 21 || dayOfMonth == 31)
				sb.append("st ");
			else if(dayOfMonth == 2 || dayOfMonth == 22)
				sb.append("nd ");
			else if(dayOfMonth == 3 || dayOfMonth == 23)
				sb.append("rd ");
			else 
				sb.append("th ");
			
			sb.append("</FONT>");
			sb.append("day every month");
			
			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML(sb.toString());
		}	
		else if (form.cmbFrequency().getValue().equals(periodically))
		{
			form.lyrSchedule().tabPageFrequency().htmlLegendFrequency().setHTML("");
			
			if (form.lyrSchedule().tabPageFrequency().intFreqMins().getValue() == null)
				return;

			sb.append("<FONT color=#0000FF>");
			sb.append(" " + form.dtimStart().getValue().getTime().toString());
			sb.append("</FONT>");
			
			sb.append(" starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");
			
			sb.append(" every ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.lyrSchedule().tabPageFrequency().intFreqMins().getValue());
			sb.append("</FONT>");
			
			sb.append(" mins");
			sb.append(", every day");
	
			form.lyrSchedule().tabPageFrequency().htmlLegendFrequency().setHTML(sb.toString());
		}
	}

	protected void onIntWeeksValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onIntDaysValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkSunValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkSatValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkFriValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkThuValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkWedValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkTueValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onChkMonValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		clearScreen();
		form.getLocalContext().setJobSettings(null);

		displayAvailableReports(form.getLocalContext().getReportsAvailable(), null);
		displaySelectedTemplates(null);

		form.chkActive().setValue(true);
		form.setMode(FormMode.EDIT);
	}

	protected void onGrdJobsSelectionChanged() throws PresentationLogicException
	{
		PrintAgentVo printAgentVo = form.grdJobs().getValue();
		
		form.getLocalContext().setJobSettings(printAgentVo);
		ReportVoCollection coll = form.getLocalContext().getReportsAvailable();

		displayAvailableReports(coll, printAgentVo);
		displaySelectedTemplates(printAgentVo);
		displayJobDetails(printAgentVo);

		//WDEV-17946
		form.getLocalContext().setLastId(printAgentVo != null ? printAgentVo.getID_PrintAgent() : null);
		form.btnPrintNow().setEnabled(printAgentVo != null && Boolean.TRUE.equals(printAgentVo.getIsActive()));
		
		updateControlsState();
	}

	private void displayJobDetails(PrintAgentVo printAgentVo)
	{
		if(printAgentVo == null)
			return;
		
		form.txtDescription().setValue(printAgentVo.getDescription());
		form.chkActive().setValue(printAgentVo.getIsActiveIsNotNull() ? printAgentVo.getIsActive().booleanValue() : false);
		form.cmbType().setValue(printAgentVo.getJobType());
		
		if(JobType.CENTRAL_BATCH_PRINT.equals(form.cmbType().getValue()))
		{
			if(printAgentVo.getLocationToPrintFor() != null)
			{
				form.qmbLocation().newRow(printAgentVo.getLocationToPrintFor(), printAgentVo.getLocationToPrintFor().getName());
			}
			
			form.qmbLocation().setValue(printAgentVo.getLocationToPrintFor());
		}
		
		form.intHrs().setValue(printAgentVo.getDNAApptsInLastXhrs());

		Trigger trigger = new Trigger(printAgentVo.getTrigger());

		form.dtimStart().setValue(trigger.getStartDateTime());
		form.cmbFrequency().setValue(trigger.getFrequency());

		if (trigger.getFrequency().equals(daily))
		{
			form.lyrSchedule().showtabPageDaily();

			form.lyrSchedule().tabPageDaily().intDays().setValue(trigger.getDays());
			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML(trigger.getHtmlTranslation());
		}
		else if (trigger.getFrequency().equals(weekly))
		{
			form.lyrSchedule().showtabPageWeekly();

			form.lyrSchedule().tabPageWeekly().intWeeks().setValue(trigger.getWeeks());
			form.lyrSchedule().tabPageWeekly().chkMon().setValue(trigger.isMon());
			form.lyrSchedule().tabPageWeekly().chkTue().setValue(trigger.isTue());
			form.lyrSchedule().tabPageWeekly().chkWed().setValue(trigger.isWed());
			form.lyrSchedule().tabPageWeekly().chkThu().setValue(trigger.isThu());
			form.lyrSchedule().tabPageWeekly().chkFri().setValue(trigger.isFri());
			form.lyrSchedule().tabPageWeekly().chkSat().setValue(trigger.isSat());
			form.lyrSchedule().tabPageWeekly().chkSun().setValue(trigger.isSun());
			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML(trigger.getHtmlTranslation());
		}
		else if (trigger.getFrequency().equals(monthly))
		{
			form.lyrSchedule().showtabPageMonthly();
			
			form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(trigger.getDayOfMonth());
			form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue(trigger.getTimeOfMonth());
			
			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML(trigger.getHtmlTranslation());
		}
		else if (trigger.getFrequency().equals(periodically))
		{
			form.lyrSchedule().showtabPageFrequency();
			
			form.lyrSchedule().tabPageFrequency().intFreqMins().setValue(trigger.getMins());
			
			form.lyrSchedule().tabPageFrequency().htmlLegendFrequency().setHTML(trigger.getHtmlTranslation());
		}
	}

	protected void onGrdReportsToPrintGridComboBoxSelectionChanged(int column, grdReportsToPrintRow row, Object value) throws PresentationLogicException
	{
		TemplatePrinterVo tp = (TemplatePrinterVo) row.getValue();

		tp.setPrinterName((String) value);
	}

	public class Trigger
	{
		private String		frequency;
		private DateTime	startDateTime;
		private Integer		days;
		private Integer		weeks;
		private boolean		mon;
		private boolean		tue;
		private boolean		wed;
		private boolean		thu;
		private boolean		fri;
		private boolean		sat;
		private boolean		sun;
		private Integer		dayOfMonth;
		private Time 		timeOfMonth;
		private Integer		mins;
		
		public Trigger()
		{
		}

		public Trigger(String xml)
		{
			try
			{
				this.initFromXML(xml);
			}
			catch (DocumentException e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
			catch (ParseException e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
			catch (Exception e)
			{
				engine.showMessage("Error deserializing trigger: " + e.toString());
			}
		}

		public Integer getDays()
		{
			return days;
		}

		public void setDays(Integer days)
		{
			this.days = days;
		}

		public String getFrequency()
		{
			return frequency;
		}

		public void setFrequency(String frequency)
		{
			this.frequency = frequency;
		}

		public boolean isFri()
		{
			return fri;
		}

		public void setFri(boolean fri)
		{
			this.fri = fri;
		}

		public boolean isMon()
		{
			return mon;
		}

		public void setMon(boolean mon)
		{
			this.mon = mon;
		}

		public boolean isSat()
		{
			return sat;
		}

		public void setSat(boolean sat)
		{
			this.sat = sat;
		}

		public DateTime getStartDateTime()
		{
			return startDateTime;
		}

		public void setStartDateTime(DateTime startDateTime)
		{
			this.startDateTime = startDateTime;
		}

		public boolean isSun()
		{
			return sun;
		}

		public void setSun(boolean sun)
		{
			this.sun = sun;
		}

		public boolean isThu()
		{
			return thu;
		}

		public void setThu(boolean thu)
		{
			this.thu = thu;
		}

		public boolean isTue()
		{
			return tue;
		}

		public void setTue(boolean tue)
		{
			this.tue = tue;
		}

		public boolean isWed()
		{
			return wed;
		}

		public void setWed(boolean wed)
		{
			this.wed = wed;
		}

		public Integer getWeeks()
		{
			return weeks;
		}

		public void setWeeks(Integer weeks)
		{
			this.weeks = weeks;
		}
		

		public Integer getDayOfMonth()
		{
			return dayOfMonth;
		}

		public void setDayOfMonth(Integer dayOfMonth)
		{
			this.dayOfMonth = dayOfMonth;
		}

		public Time getTimeOfMonth()
		{
			return timeOfMonth;
		}

		public void setTimeOfMonth(Time timeOfMonth)
		{
			this.timeOfMonth = timeOfMonth;
		}
		
		public Integer getMins()
		{
			return mins;
		}

		public void setMins(Integer mins)
		{
			this.mins = mins;
		}
		
		public String toXML()
		{
			if (frequency == null || frequency.length() == 0 || (days == null && weeks == null && weekly.equals(frequency)) || (startDateTime == null && !monthly.equals(frequency)))
				return null;

			StringBuffer sb = new StringBuffer();

			sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");
			sb.append("<trigger>");
			sb.append("<frequency>");
			sb.append(StringUtils.encodeXML(frequency));
			sb.append("</frequency>");
			sb.append("<startdatetime>");
			sb.append(StringUtils.encodeXML(startDateTime != null ? startDateTime.toString(DateTimeFormat.ISO) : ""));
			sb.append("</startdatetime>");
			sb.append("<days>");
			sb.append(days != null ? String.valueOf(days) : "");
			sb.append("</days>");
			sb.append("<weeks>");
			sb.append(weeks != null ? String.valueOf(weeks) : "");
			sb.append("</weeks>");
			sb.append("<mon>");
			sb.append(mon);
			sb.append("</mon>");
			sb.append("<tue>");
			sb.append(tue);
			sb.append("</tue>");
			sb.append("<wed>");
			sb.append(wed);
			sb.append("</wed>");
			sb.append("<thu>");
			sb.append(thu);
			sb.append("</thu>");
			sb.append("<fri>");
			sb.append(fri);
			sb.append("</fri>");
			sb.append("<sat>");
			sb.append(sat);
			sb.append("</sat>");
			sb.append("<sun>");
			sb.append(sun);
			sb.append("</sun>");
			sb.append("<dayofmonth>");
			sb.append(dayOfMonth != null ? String.valueOf(dayOfMonth) : "");
			sb.append("</dayofmonth>");
			sb.append("<timeofmonth>");
			sb.append(StringUtils.encodeXML(timeOfMonth != null ? timeOfMonth.toString(TimeFormat.FLAT4) : ""));
			sb.append("</timeofmonth>");
			
			sb.append("<mins>");
			sb.append(mins != null ? String.valueOf(mins) : "");;
			sb.append("</mins>");
			
			sb.append("</trigger>");

			return sb.toString();
		}

		private void initFromXML(String xmlTrigger) throws DocumentException, ParseException
		{
			Document maindoc = getXmlDocument(xmlTrigger);

			Node node = maindoc.selectSingleNode("trigger/frequency");
			if(node != null)
				frequency = node.getStringValue();
			node = maindoc.selectSingleNode("trigger/startdatetime");
			if(node != null && node.getStringValue().length() > 0)
				startDateTime = new DateTime(node.getStringValue());
			node = maindoc.selectSingleNode("trigger/days");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				days = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/weeks");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				weeks = new Integer(Integer.parseInt(node.getStringValue()));

			node = maindoc.selectSingleNode("trigger/mon");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				mon = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/tue");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				tue = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/wed");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				wed = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/thu");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				thu = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/fri");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				fri = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/sat");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				sat = node.getStringValue().equalsIgnoreCase("true") ? true : false;
			node = maindoc.selectSingleNode("trigger/sun");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				sun = node.getStringValue().equalsIgnoreCase("true") ? true : false;

			node = maindoc.selectSingleNode("trigger/dayofmonth");
			if (node != null && node.getStringValue() != null && node.getStringValue().length() > 0)
				dayOfMonth = new Integer(Integer.parseInt(node.getStringValue()));
			node = maindoc.selectSingleNode("trigger/timeofmonth");
			if(node != null && node.getStringValue().length() > 0)
				timeOfMonth = new Time(node.getStringValue(), TimeFormat.FLAT4);
			
			node = maindoc.selectSingleNode("trigger/mins");
			if(node != null && node.getStringValue().length() > 0)
				mins = new Integer(Integer.parseInt(node.getStringValue()));
		}

		private Document getXmlDocument(String xmlBuffer) throws DocumentException
		{
			return DocumentHelper.parseText(xmlBuffer);
		}

		public String getHtmlTranslation()
		{
			return getTriggerTranslation(true);
		}

		public String getTextTranslation()
		{
			return getTriggerTranslation(false);
		}

		public String getTriggerTranslation(boolean bHtml)
		{
			if (frequency == null || frequency.length() == 0 || (days == null && weeks == null && weekly.equals(frequency)) || (startDateTime == null && !monthly.equals(frequency)))
				return null;

			String fontHeader = "";
			String fontFooter = "";

			if (bHtml)
			{
				fontHeader = "<FONT color=#0000FF>";
				fontFooter = "</FONT>";
			}

			StringBuffer sb = new StringBuffer(100);

			if (frequency.equals(daily))
			{
				if (bHtml)
					sb.append("&nbsp;At ");
				else
					sb.append("At ");
				
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				sb.append(" every ");

				if (days != null && days.intValue() == 1)
					sb.append("day");
				else
				{
					sb.append(fontHeader);
					sb.append(days == null ? 0 : days.toString());
					sb.append(fontFooter);
					sb.append(" days");
				}

				sb.append(", starting ");
				sb.append(fontHeader);
				sb.append(startDateTime.getDate().toString());
				sb.append(fontFooter);

				return sb.toString();
			}
			else if (frequency.equals(weekly))
			{
				if (bHtml)
					sb.append("&nbsp;At ");
				else
					sb.append("At ");
				
				sb.append(fontHeader);
				sb.append(startDateTime.getTime().toString());
				sb.append(fontFooter);
				
				sb.append(" every ");

				String comma = "";

				if (mon == false && tue == false && wed == false && thu == false && fri == false && sat == false && sun == false)
					return "";

				if (mon == true)
				{
					sb.append(fontHeader);
					sb.append("Mon");
					sb.append(fontFooter);
					comma = ",";
				}
				if (tue == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Tue");
					sb.append(fontFooter);
					comma = ",";
				}
				if (wed == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Wed");
					sb.append(fontFooter);
					comma = ",";
				}
				if (thu == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Thu");
					sb.append(fontFooter);
					comma = ",";
				}
				if (fri == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Fri");
					sb.append(fontFooter);
					comma = ",";
				}
				if (sat == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Sat");
					sb.append(fontFooter);
					comma = ",";
				}
				if (sun == true)
				{
					sb.append(comma);
					sb.append(fontHeader);
					sb.append("Sun");
					sb.append(fontFooter);
					comma = ",";
				}

				if (weeks.intValue() == 1)
					sb.append(" of every week");
				else
				{
					sb.append(" of every ");
					sb.append(fontHeader);
					sb.append(weeks.toString());
					sb.append(fontFooter);
					sb.append(" weeks");
				}

				sb.append(", starting ");
				sb.append(fontHeader);
				sb.append(startDateTime.getDate().toString());
				sb.append(fontFooter);

				return sb.toString();
			}
			else if (frequency.equals(monthly))
			{
				if (bHtml)
					sb.append("&nbsp;At ");
				else
					sb.append("At ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(timeOfMonth != null)
					sb.append(timeOfMonth.toString());
				
				if(bHtml)
					sb.append("</FONT>");
				
				sb.append(" on the ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(dayOfMonth != null)
				{
					sb.append(dayOfMonth.intValue());
				
					if(dayOfMonth.intValue() == 1 || dayOfMonth.intValue() == 21 || dayOfMonth.intValue() == 31)
						sb.append("st ");
					else if(dayOfMonth.intValue() == 2 || dayOfMonth.intValue() == 22)
						sb.append("nd ");
					else if(dayOfMonth.intValue() == 3 || dayOfMonth.intValue() == 23)
						sb.append("rd ");
					else 
						sb.append("th ");
				}
				
				if(bHtml)
					sb.append("</FONT>");
				
				sb.append("day of every month");
				
				sb.append(", starting ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(startDateTime != null && startDateTime.getDate() != null)
					sb.append(startDateTime.getDate().toString());
				
				if(bHtml)
					sb.append("</FONT>");
				
				return sb.toString();
			}
			else if(frequency.equals(periodically))
			{				
				sb.append("Every ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
					
				if(mins != null)
					sb.append(mins.toString());
				
				if(bHtml)
					sb.append("</FONT>");
				
				sb.append(" mins ");
				sb.append(", Every day, starting ");
				
				if(bHtml)
					sb.append("<FONT color=#0000FF>");
				
				if(startDateTime != null && startDateTime.getDate() != null)
					sb.append(startDateTime.getDate().toString());
				
				if(bHtml)
					sb.append("</FONT>");
						
				return sb.toString();
			}
			return null;
		}
	}

	protected void onBtnRePrintClick() throws PresentationLogicException
	{
		form.getGlobalContext().setJobId(form.grdJobs().getValue().getID_PrintAgent());
		engine.open(form.getForms().Admin.BatchPrintingHistory);
	}

	@Override
	protected void onIntDayOfMonthValueChanged() throws PresentationLogicException
	{
		recalcTrigger();		
	}

	@Override
	protected void onTimMonthlyTimeValueChanged() throws PresentationLogicException
	{
		recalcTrigger();		
	}

	@Override
	protected void onCmbTypeValueChanged() throws PresentationLogicException 
	{
		if(JobType.DNA_BATCH_JOB.equals(form.cmbType().getValue()))
		{
			ReportVo dnaReport = getJobReport(DNA_PATIENT_LETTER_ID);
			
			removeAllTemplates();
			
			if(dnaReport == null || dnaReport.getTemplates() == null || dnaReport.getTemplates().size() == 0) //WDEV-9091
			{
				updateControlsState();
				return;
			}
			
			if(dnaReport.getTemplates().get(0) != null)
			{
				form.grdReportsAvailable().setValue(dnaReport.getTemplates().get(0));
				
				addReportToBePrinted();
			}
		}
		else if(JobType.CENTRAL_BATCH_PRINT.equals(form.cmbType().getValue()))
		{
			ReportVo linkedReport = getJobReport(RESULT_CENTRAL_BATCH_PRINT_ID);
			
			removeAllTemplates();
			
			if(linkedReport == null || linkedReport.getTemplates() == null)
			{
				updateControlsState();
				return;
			}
			
			if(linkedReport.getTemplates().get(0) != null)
			{
				form.grdReportsAvailable().setValue(linkedReport.getTemplates().get(0));
				
				addReportToBePrinted(); 
			}
		}
		else if(JobType.ORDERING_LOCATION_BATCH_PRINT.equals(form.cmbType().getValue()))
		{
			ReportVo resultRequiringReport = getJobReport(RESULT_ORDERING_LOCATION_BATCH_PRINT_ID);
			
			removeAllTemplates();
			
			if(resultRequiringReport == null || (resultRequiringReport.getTemplates() == null || resultRequiringReport.getTemplates().size() == 0))
			{
				updateControlsState();
				return;
			}
			
			if(resultRequiringReport.getTemplates().get(0) != null)
			{
				form.grdReportsAvailable().setValue(resultRequiringReport.getTemplates().get(0));
				
				addReportToBePrinted();
			}
		}

		updateControlsState();
	}

	private ReportVo getJobReport(Integer id) 
	{
		if(form.getLocalContext().getReportsAvailableIsNotNull())
		{
			for(int i=0; i<form.getLocalContext().getReportsAvailable().size(); i++)
			{
				ReportVo currentReport = form.getLocalContext().getReportsAvailable().get(i);
				
				if(id.equals(currentReport.getImsId()))
				{
					return currentReport;
				}
			}
		}
		
		return null;
	}

	private void updateControlsState() 
	{
		boolean isDnaJob = JobType.DNA_BATCH_JOB.equals(form.cmbType().getValue());
		boolean isResultCentralBatchJob = JobType.CENTRAL_BATCH_PRINT.equals(form.cmbType().getValue());
		boolean isResultOrderingLocationBatchJob = JobType.ORDERING_LOCATION_BATCH_PRINT.equals(form.cmbType().getValue());
		
		form.lblLocation().setVisible(isResultCentralBatchJob);
		form.qmbLocation().setVisible(isResultCentralBatchJob);
		form.qmbLocation().setEnabled(isResultCentralBatchJob && FormMode.EDIT.equals(form.getMode()));
		
		form.intHrs().setVisible(isDnaJob);		//	WDEV-9091
		form.intHrs().setEnabled(isDnaJob && FormMode.EDIT.equals(form.getMode()));		//	WDEV-9091
		form.txtHrsRequired().setVisible(isDnaJob);
		form.txtHrsRequired().setEnabled(isDnaJob && FormMode.EDIT.equals(form.getMode()));
		form.txtHrsRequired().setRequired(isDnaJob);
		
		form.lblHrs1().setVisible(isDnaJob);	//	WDEV-9091
		form.lblHrs2().setVisible(isDnaJob);	//	WDEV-9091
		
		boolean enabled = !(isDnaJob || isResultCentralBatchJob);
		
		form.grdReportsAvailable().setEnabled(enabled);
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.btnAddReport().setEnabled(enabled);
			form.btnRemoveReport().setEnabled(enabled);
			form.btnRemoveAll().setEnabled(enabled);
		}
		
		//WDEV-12401 disable PrinToColumn for this job type
		for(int i=0;i<form.grdReportsToPrint().getRows().size(); i++)
		{
			grdReportsToPrintRow row = form.grdReportsToPrint().getRows().get(i);
			for(int j=0;j<row.getRows().size();j++)
			{
				grdReportsToPrintRow cRow = row.getRows().get(j);
				if(isResultOrderingLocationBatchJob && FormMode.EDIT.equals(form.getMode()))
					cRow.setColumnPrintToReadOnly(true);
				else if(FormMode.EDIT.equals(form.getMode()))
					cRow.setColumnPrintToReadOnly(false);
				
				if(isResultOrderingLocationBatchJob)
					cRow.setColumnPrintTo(null);
			}
		}
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	@Override
	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException 
	{
		listHospitals(value);
	}

	private void listHospitals(String value) 
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		LocSiteLiteVoCollection coll = null;
		
		coll = domain.listHospitals(value); 
		
		form.qmbLocation().setValue(null);
		form.qmbLocation().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				LocSiteLiteVo vo = coll.get(i);
				form.qmbLocation().newRow(vo, vo.getName());
			}
			
			if (coll.size() == 1)
			{
				form.qmbLocation().setValue(coll.get(0));
			}
			else if (coll.size() > 1)
			{
				form.qmbLocation().showOpened();
			}
		}
	}

	@Override
	protected void onIntFreqMinsValueChanged() throws PresentationLogicException
	{
		recalcTrigger();
	}
	//wdev-11600
	protected void onGrdJobsGridHeaderClicked(int column) throws PresentationLogicException 
	{
		
		if(column == CREATED_ON)
		{
			if (form.getLocalContext().getSortColCreatedOn() == null || !form.getLocalContext().getSortColCreatedOn().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortColCreatedOn(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortColCreatedOn(SortOrder.DESCENDING);
			
			PrintAgentVoCollection collPrintAgentVo = form.grdJobs().getValues();
			collPrintAgentVo.sort(new CreatedonComparator(form.getLocalContext().getSortColCreatedOn()));
			displayall(collPrintAgentVo);
		}
		else if(column == LAST_RUN)
		{
			if (form.getLocalContext().getSortColLastRun() == null || !form.getLocalContext().getSortColLastRun().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortColLastRun(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortColLastRun(SortOrder.DESCENDING);
			
			PrintAgentVoCollection collPrintAgentVo = form.grdJobs().getValues();
			collPrintAgentVo.sort(new LastRunComparator(form.getLocalContext().getSortColLastRun()));
			displayall(collPrintAgentVo);
		}
		else if(column == LAST_SUCCESRUN)
		{
			if (form.getLocalContext().getSortColSuccessRun() == null || !form.getLocalContext().getSortColSuccessRun().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortColSuccessRun(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortColSuccessRun(SortOrder.DESCENDING);
			
			PrintAgentVoCollection collPrintAgentVo = form.grdJobs().getValues();
			collPrintAgentVo.sort(new LastSuccessRunComparator(form.getLocalContext().getSortColSuccessRun()));
			
			displayall(collPrintAgentVo);
			
		}
			
			
		// TODO Auto-generated method stub
		
	}
	//wdev-11600
	public class CreatedonComparator implements Comparator
	{
		private int direction = 1;
		
		public CreatedonComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public CreatedonComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			else
				direction = 1;
			
						
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof PrintAgentVo )
			{
				PrintAgentVo pa1 = (PrintAgentVo)ob1;
				date1 = pa1.getSysInfo().getCreationDateTime();
			}
			if(ob2 instanceof PrintAgentVo)
			{
				PrintAgentVo pa2 = (PrintAgentVo)ob2;
				date2 = pa2.getSysInfo().getCreationDateTime();
			}
			
			if(date1 == null)
				return -1*direction;
			if(date2 == null)
				return direction;
			
			return  date1.compareTo(date2)*direction;
		}
	
	}
	public class LastRunComparator implements Comparator
	{
		private int direction = 1;
		
		public LastRunComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public LastRunComparator(SortOrder order)
		{
			if (order.equals(SortOrder.DESCENDING))
			{
				direction = -1;
			}
			else
				direction = 1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof PrintAgentVo )
			{
				PrintAgentVo pa1 = (PrintAgentVo)ob1;
				date1 = pa1.getLastRunDateTime();
			}
			if(ob2 instanceof PrintAgentVo)
			{
				PrintAgentVo pa2 = (PrintAgentVo)ob2;
				date2 = pa2.getLastRunDateTime();
			}
			if(date1 == null)
				return -1*direction;
			if(date2 == null)
				return direction;
			
			return  date1.compareTo(date2)*direction;
			
		}
	
	}
	public class LastSuccessRunComparator implements Comparator
	{
		private int direction = 1;
		
		public LastSuccessRunComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public LastSuccessRunComparator(SortOrder order)
		{
			if(order.equals(SortOrder.DESCENDING))
			{
				direction = -1;
			}
			else
				direction = 1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof PrintAgentVo )
			{
				PrintAgentVo pa1 = (PrintAgentVo)ob1;
				date1 = pa1.getLastSuccessfulRunDateTime();
			}
			if(ob2 instanceof PrintAgentVo)
			{
				PrintAgentVo pa2 = (PrintAgentVo)ob2;
				date2 = pa2.getLastSuccessfulRunDateTime();
			}
			if(date1 == null)
				return -1*direction;
			if(date2 == null)
				return direction;
			
			return  date1.compareTo(date2)*direction;		}
	
	}
	//-------------- 

}
