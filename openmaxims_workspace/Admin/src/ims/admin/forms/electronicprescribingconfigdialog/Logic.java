//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.admin.forms.electronicprescribingconfigdialog;

import ims.admin.vo.ElectronicPrescribingConfigVo;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{
		form.lblButton().setValue(form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getButtonIsNotNull() ? form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getButton().getText() : "");
		form.txtButtonText().setValue(form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getButtonText());
		form.txtLabelText().setValue(form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getLabelText());
		form.txtExePath().setValue(form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getButtonExecutablePath());
		form.txtParameter().setValue(form.getGlobalContext().Admin.getElectronicPrescribingConfigVo().getButtonParameter());
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if ( ! validateData())
			return;
		
		ElectronicPrescribingConfigVo voEp = form.getGlobalContext().Admin.getElectronicPrescribingConfigVo();
		
		voEp.setButtonText(form.txtButtonText().getValue());
		voEp.setLabelText(form.txtLabelText().getValue());
		voEp.setButtonExecutablePath(form.txtExePath().getValue().toLowerCase());//WDEV-14666
		voEp.setButtonParameter(form.txtParameter().getValue());

		form.getGlobalContext().Admin.setElectronicPrescribingConfigVo(voEp);

		engine.close(DialogResult.OK);
	}
	private boolean  validateData()
	{
		StringBuffer sb = new StringBuffer();

		if (form.txtButtonText().getValue() == null)
			sb.append("Button Text is a required field\n");
		
		if (form.txtExePath().getValue() == null)
			sb.append("Executable Path is a required field\n");
		
		if (form.txtParameter().getValue() == null)
			sb.append("Parameter is a required field\n");

		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString());
			return false;
		}
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
