//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50301.1100)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.formhelp;

import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppFormVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		
		setContextMenu();
		
		// Load all forms from onto the grid
		populateNavigation();
	}

	private void setContextMenu()
	{
		
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		if(form.grdDetails().getSelectedRowIndex()!=-1)
			form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
		else
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		//--------------------------------
		form.qmbForm().setEnabled(false);
		
		onFormModeChanged();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// ensure that all necessary information is entered. (also handles an update situation)
		if (form.qmbForm().getValue() == null)
		{
			if (form.getLocalContext().getCurrentForm() == null)
			{
				engine.showMessage("Please select a form");
				return;
			}
		}
		if (form.txtURL().getValue() == null)
		{
			engine.showMessage("Please enter a URL");
			return;
		}

		AppFormVo formVo = form.getLocalContext().getCurrentForm();
		if (formVo == null)
			formVo = form.qmbForm().getValue();
		formVo.setHelpLink(form.txtURL().getValue());

		// TODO All references to RegisteredForm will eventually be removed
		IAppForm regForm = getRegisteredForm(formVo.getID_AppForm().intValue());
		if (regForm != null)
		{
			regForm.setHelpLink(form.txtURL().getValue());
			try
			{
				String errors[] = formVo.validate();
				if (errors != null)
				{
					engine.showErrors(errors);
					return;
				}
				domain.saveHelpDetails(formVo);
				//JME: 20061130: Must be a better way of doing this than adding the method to the UIEngine
				//engine.updateFormHelp(regForm);

				form.getLocalContext().setCurrentForm(formVo);
				form.grdDetails().setValue(formVo);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage("Data has been changed, screen will be refreshed");
				open();
				return;
			}
			open();
			form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			//WDEV-18151
			form.btnUpdate().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
		}
		else
		{
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
		}
	}

	private IAppForm getRegisteredForm(int formid)
	{
		IAppForm[] forms = engine.getRegisteredForms();

		for (int i = 0; i < forms.length; i++)
		{
			IAppForm regf = forms[i];
			if (regf.getFormId() == formid)
				return regf;
		}
		return null;
	}

	private void populateNavigation()
	{
		AppFormVoCollection coll = domain.listFormsWithHelpUrl();
	
		form.grdDetails().getRows().clear();
		GenForm.grdDetailsRow row;
		for (int i = 0; coll != null && i < coll.size(); i++)
		{
			AppFormVo vo = coll.get(i);
			row = form.grdDetails().getRows().newRow();
			row.setValue(vo);
			row.setForm(vo.isAlias() ? vo.getAliasName() : vo.getName());
			row.seturl(vo.getHelpLink());
		}

		if (form.getLocalContext().getCurrentFormIsNotNull())	
		{
			form.grdDetails().setValue(form.getLocalContext().getCurrentForm());
		}
			
		populateDetailsPanel();
		onFormModeChanged();
	}

	private void populateDetailsPanel()
	{
		if (form.getLocalContext().getCurrentFormIsNotNull())
		{
			form.txtURL().setValue(form.getLocalContext().getCurrentForm().getHelpLink());
			form.qmbForm().setValue(form.getLocalContext().getCurrentForm());
			form.qmbForm().setEditedText(form.getLocalContext().getCurrentForm().isAlias() ? form.getLocalContext().getCurrentForm().getAliasName() : form.getLocalContext().getCurrentForm().getName());
		}
		else
		{
			form.txtURL().setValue(null);
			form.qmbForm().setValue(null);
			form.qmbForm().setEditedText(null);
		}
	}

	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.VIEW)){
			AppFormVo vo = form.grdDetails().getValue();
			if (vo != null)
			{
				form.getLocalContext().setCurrentForm(vo);
				form.txtURL().setValue(vo.getHelpLink());
				form.qmbForm().setValue(vo);
				form.qmbForm().setEditedText(vo.isAlias() ? vo.getAliasName() : vo.getName());
				form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
			}
			else
			{
				form.qmbForm().setValue(null);
				form.txtURL().setValue("");
				form.getLocalContext().setCurrentForm(null);
			}
			onFormModeChanged();
		}
	}

	protected void onQmbFormTextSubmited(String value) throws PresentationLogicException
	{
		if (value == null || value.length() < 3)
		{
			engine.showMessage("Please enter at least 3 characters for search criteria");
			return;
		}

		AppFormVoCollection coll = domain.listFormByName(value);

		form.qmbForm().setValue(null);
		form.qmbForm().clear();
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				AppFormVo vo = coll.get(i);
				//-------------------------wdev-8572
				if(!compareFormsName(vo))
				//---------------------------
					if (vo.isAlias())
						form.qmbForm().newRow(vo, vo.getAliasName());
					else
						form.qmbForm().newRow(vo, vo.getName());
			}
		}

		if (coll.size() == 1)
		{
			form.qmbForm().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbForm().showOpened();
		}
	}
	//----------------------------------------wdev-8572
	private boolean compareFormsName(AppFormVo vo)
	{
		for(int i = 0;i < form.grdDetails().getRows().size();i++)
		{
			String temp = form.grdDetails().getRows().get(i).getForm();
			if(!vo.isAlias()) {
				if(vo.getName().equals(temp)) {
					return true;
				}
			}
			else {
				if(vo.getAliasName().equals(temp)) {
					return true;
				}
			}
		}
		
		return false;
	}
	//----------------------------------------
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.getLocalContext().setCurrentForm(null);
		form.grdDetails().setValue(null);
		form.setMode(FormMode.EDIT);
		//-------------------------
		form.qmbForm().setEnabled(true);
		//----------------------------
		form.qmbForm().setValue(null);
		form.txtURL().setValue("");
		
		onFormModeChanged();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
	
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
			
				onBtnNewClick();
			
			break;
			
			case GenForm.ContextMenus.GenericGrid.Update :
				
				onBtnUpdateClick();
			
			break;

			case GenForm.ContextMenus.GenericGrid.Remove :
				removeHelpForm();
			
				break;
			
			
			
			default :
			break;
		}

		
		
	}

	private void removeHelpForm() throws PresentationLogicException
	{
		try
		{
			
			domain.deleteForm(form.grdDetails().getSelectedRow().getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("An error has occured while removing the selected form "+e.getMessage());
			return;
			
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage("An error has occured while removing the selected form "+e.getMessage());
			return;
			
		}
		catch (StaleObjectException e)
		{
			open();
			engine.showMessage("An error has occured while removing the selected form "+e.getMessage());
			return;
		}
		
		form.grdDetails().removeSelectedRow();
		
		if(form.grdDetails().getRows().size()>0)
		form.getLocalContext().setCurrentForm(form.grdDetails().getRows().get(0).getValue());
		else
			form.getLocalContext().setCurrentForm(null);	
			
		onBtnCancelClick();
	}



	
}
