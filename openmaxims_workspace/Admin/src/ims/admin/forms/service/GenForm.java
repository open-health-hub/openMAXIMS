//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.service;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class ViewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 432, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htmDetails()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}
		public static class EditContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrActivityFunctionLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageActivityContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbActivityTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.ActivityType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.ActivityType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.ActivityType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.ActivityType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.ActivityType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.ActivityType getValue()
						{
							return (ims.core.vo.lookups.ActivityType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.ActivityType value)
						{
							super.control.setValue(value);
						}
					}
					public static class qmbActivityComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.ActivityVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.ActivityVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.ActivityVo getValue()
						{
							return (ims.core.vo.ActivityVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.ActivityVo value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public static class grdActivityRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdActivityRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setActivityReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isActivityReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showActivityOpened()
						{
							super.row.showOpened(0);
						}
						public String getActivity()
						{
							return (String)super.row.get(0);
						}
						public void setActivity(String value)
						{
							super.row.set(0, value);
						}
						public void setCellActivityTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isActiveReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showActiveOpened()
						{
							super.row.showOpened(1);
						}
						public boolean getActive()
						{
							return ((Boolean)super.row.get(1)).booleanValue();
						}
						public void setActive(boolean value)
						{
							super.row.set(1, new Boolean(value));
						}
						public void setCellActiveTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setAddReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isAddReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void setAddBackColor(ims.framework.utils.Color value)
						{
							super.row.setBackColor(2, value);
						}
						public void setAddTextColor(ims.framework.utils.Color value)
						{
							super.row.setTextColor(2, value);
						}
						public void showAddOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getAdd()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setAdd(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellAddTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public ims.core.vo.ActivityVo getValue()
						{
							return (ims.core.vo.ActivityVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.ActivityVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdActivityRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdActivityRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdActivityRow get(int index)
						{
							return new grdActivityRow(super.collection.get(index));
						}
						public grdActivityRow newRow()
						{
							return new grdActivityRow(super.collection.newRow());
						}
						public grdActivityRow newRow(boolean autoSelect)
						{
							return new grdActivityRow(super.collection.newRow(autoSelect));
						}
						public grdActivityRow newRowAt(int index)
						{
							return new grdActivityRow(super.collection.newRowAt(index));
						}
						public grdActivityRow newRowAt(int index, boolean autoSelect)
						{
							return new grdActivityRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdActivityGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void setActivityCaption(String value)
						{
							this.grid.setColumnCaption(0, value);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.core.vo.ActivityVoCollection getValues()
						{
							ims.core.vo.ActivityVoCollection listOfValues = new ims.core.vo.ActivityVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.ActivityVo getValue()
						{
							return (ims.core.vo.ActivityVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.ActivityVo value)
						{
							super.grid.setValue(value);
						}
						public grdActivityRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdActivityRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdActivityRowCollection getRows()
						{
							return new grdActivityRowCollection(super.grid.getRows());
						}
						public grdActivityRow getRowByValue(ims.core.vo.ActivityVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdActivityRow(row);
						}
						public void setActivityHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getActivityHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setAddHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getAddHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
					}
					public static class grdActivityTaxonomyRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdActivityTaxonomyRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setcolExtCodeTypeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean iscolExtCodeTypeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showcolExtCodeTypeOpened()
						{
							super.row.showOpened(0);
						}
						public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
						{
							return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
						}
						public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
						{
							super.row.set(0, value, true);
						}
						public void setCellcolExtCodeTypeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setcolCodeReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean iscolCodeReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showcolCodeOpened()
						{
							super.row.showOpened(1);
						}
						public String getcolCode()
						{
							return (String)super.row.get(1);
						}
						public void setcolCode(String value)
						{
							super.row.set(1, value);
						}
						public void setCellcolCodeTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public ims.core.vo.TaxonomyMap getValue()
						{
							return (ims.core.vo.TaxonomyMap)super.row.getValue();
						}
						public void setValue(ims.core.vo.TaxonomyMap value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdActivityTaxonomyRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdActivityTaxonomyRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdActivityTaxonomyRow get(int index)
						{
							return new grdActivityTaxonomyRow(super.collection.get(index));
						}
						public grdActivityTaxonomyRow newRow()
						{
							return new grdActivityTaxonomyRow(super.collection.newRow());
						}
						public grdActivityTaxonomyRow newRow(boolean autoSelect)
						{
							return new grdActivityTaxonomyRow(super.collection.newRow(autoSelect));
						}
						public grdActivityTaxonomyRow newRowAt(int index)
						{
							return new grdActivityTaxonomyRow(super.collection.newRowAt(index));
						}
						public grdActivityTaxonomyRow newRowAt(int index, boolean autoSelect)
						{
							return new grdActivityTaxonomyRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdActivityTaxonomyGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
						{
							super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.core.vo.TaxonomyMapCollection getValues()
						{
							ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.TaxonomyMap getValue()
						{
							return (ims.core.vo.TaxonomyMap)super.grid.getValue();
						}
						public void setValue(ims.core.vo.TaxonomyMap value)
						{
							super.grid.setValue(value);
						}
						public grdActivityTaxonomyRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdActivityTaxonomyRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdActivityTaxonomyRowCollection getRows()
						{
							return new grdActivityTaxonomyRowCollection(super.grid.getRows());
						}
						public grdActivityTaxonomyRow getRowByValue(ims.core.vo.TaxonomyMap value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdActivityTaxonomyRow(row);
						}
						public void setcolExtCodeTypeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getcolExtCodeTypeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public GridComboBox colExtCodeTypeComboBox()
						{
							return new GridComboBox(super.grid, 0);
						}
						public void setcolCodeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getcolCodeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Panel Controls
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 408, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Activity Search", new Integer(2), ""}));
				
						// Label Controls
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 106, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "ActivityTaxonomy", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type", new Integer(1), null, new Integer(0)}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 72, 32, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbActivityTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), "Select Activity Type", Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbActivityTypeTemp);
						cmbActivityTypeComboBox cmbActivityType = (cmbActivityTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityTypeComboBox.class, m_cmbActivityTypeTemp);
						super.addComboBox(cmbActivityType);
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 72, 56, 304, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_qmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), "Enter text and hit Enter  to search for activity", Boolean.FALSE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbActivityTemp);
						qmbActivityComboBox qmbActivity = (qmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbActivityComboBox.class, m_qmbActivityTemp);
						super.addComboBox(qmbActivity);
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 408, 104, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdActivityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdActivityTemp);
						grdActivityGrid grdActivity = (grdActivityGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivityGrid.class, m_grdActivityTemp);
						grdActivity.addStringColumn("Activity", 0, 0, 325, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdActivity.addBoolColumn("Active", 0, 0, 50, false, false, 0, true);
						grdActivity.addBoolColumn("Add", 0, 0, -1, false, false, 0, true);
						super.addGrid(grdActivity);
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 408, 71, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						Grid m_grdActivityTaxonomyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuTaxonomyGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdActivityTaxonomyTemp);
						grdActivityTaxonomyGrid grdActivityTaxonomy = (grdActivityTaxonomyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivityTaxonomyGrid.class, m_grdActivityTaxonomyTemp);
						grdActivityTaxonomy.addComboBoxColumn("External Code Type", 0, 0, 200, false, true, false, false, true, -1);
						grdActivityTaxonomy.addStringColumn("External Code", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdActivityTaxonomy);
				
						// Image Buttons Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 384, 56, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Admin.Down, form_images_local.Admin.Down_disabled, "Add selected Activity to List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
					}
		
					public Panel pnlActSearch()
					{
						return (Panel)super.getControl(0);
					}
					public Label lblActTaxonomy()
					{
						return (Label)super.getControl(1);
					}
					public cmbActivityTypeComboBox cmbActivityType()
					{
						return (cmbActivityTypeComboBox)super.getComboBox(0);
					}
					public qmbActivityComboBox qmbActivity()
					{
						return (qmbActivityComboBox)super.getComboBox(1);
					}
					public grdActivityGrid grdActivity()
					{
						return (grdActivityGrid)super.getGrid(0);
					}
					public grdActivityTaxonomyGrid grdActivityTaxonomy()
					{
						return (grdActivityTaxonomyGrid)super.getGrid(1);
					}
					public ImageButton imbAddList()
					{
						return (ImageButton)super.getControl(8);
					}
				}
				public static class tabPageFunctionContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdFunctionRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdFunctionRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setFunctionReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isFunctionReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showFunctionOpened()
						{
							super.row.showOpened(0);
						}
						public String getFunction()
						{
							return (String)super.row.get(0);
						}
						public void setFunction(String value)
						{
							super.row.set(0, value);
						}
						public void setCellFunctionTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isActiveReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showActiveOpened()
						{
							super.row.showOpened(1);
						}
						public boolean getActive()
						{
							return ((Boolean)super.row.get(1)).booleanValue();
						}
						public void setActive(boolean value)
						{
							super.row.set(1, new Boolean(value));
						}
						public void setCellActiveTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setAddReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isAddReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void setAddBackColor(ims.framework.utils.Color value)
						{
							super.row.setBackColor(2, value);
						}
						public void setAddTextColor(ims.framework.utils.Color value)
						{
							super.row.setTextColor(2, value);
						}
						public void showAddOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getAdd()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setAdd(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellAddTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public ims.core.vo.lookups.ServiceFunction getValue()
						{
							return (ims.core.vo.lookups.ServiceFunction)super.row.getValue();
						}
						public void setValue(ims.core.vo.lookups.ServiceFunction value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdFunctionRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdFunctionRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdFunctionRow get(int index)
						{
							return new grdFunctionRow(super.collection.get(index));
						}
						public grdFunctionRow newRow()
						{
							return new grdFunctionRow(super.collection.newRow());
						}
						public grdFunctionRow newRow(boolean autoSelect)
						{
							return new grdFunctionRow(super.collection.newRow(autoSelect));
						}
						public grdFunctionRow newRowAt(int index)
						{
							return new grdFunctionRow(super.collection.newRowAt(index));
						}
						public grdFunctionRow newRowAt(int index, boolean autoSelect)
						{
							return new grdFunctionRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdFunctionGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void setFunctionCaption(String value)
						{
							this.grid.setColumnCaption(0, value);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.core.vo.lookups.ServiceFunction[] getValues()
						{
							ims.core.vo.lookups.ServiceFunction[] listOfValues = new ims.core.vo.lookups.ServiceFunction[this.getRows().size()];
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues[x] = this.getRows().get(x).getValue();
							}
							return listOfValues;
						}
						public ims.core.vo.lookups.ServiceFunction getValue()
						{
							return (ims.core.vo.lookups.ServiceFunction)super.grid.getValue();
						}
						public void setValue(ims.core.vo.lookups.ServiceFunction value)
						{
							super.grid.setValue(value);
						}
						public grdFunctionRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdFunctionRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdFunctionRowCollection getRows()
						{
							return new grdFunctionRowCollection(super.grid.getRows());
						}
						public grdFunctionRow getRowByValue(ims.core.vo.lookups.ServiceFunction value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdFunctionRow(row);
						}
						public void setFunctionHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getFunctionHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setAddHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getAddHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
					}
					public static class grdFunctionTaxonomyRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdFunctionTaxonomyRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setcolExtCodeTypeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean iscolExtCodeTypeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showcolExtCodeTypeOpened()
						{
							super.row.showOpened(0);
						}
						public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
						{
							return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
						}
						public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
						{
							super.row.set(0, value, true);
						}
						public void setCellcolExtCodeTypeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setcolCodeReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean iscolCodeReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showcolCodeOpened()
						{
							super.row.showOpened(1);
						}
						public String getcolCode()
						{
							return (String)super.row.get(1);
						}
						public void setcolCode(String value)
						{
							super.row.set(1, value);
						}
						public void setCellcolCodeTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public ims.core.vo.TaxonomyMap getValue()
						{
							return (ims.core.vo.TaxonomyMap)super.row.getValue();
						}
						public void setValue(ims.core.vo.TaxonomyMap value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdFunctionTaxonomyRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdFunctionTaxonomyRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdFunctionTaxonomyRow get(int index)
						{
							return new grdFunctionTaxonomyRow(super.collection.get(index));
						}
						public grdFunctionTaxonomyRow newRow()
						{
							return new grdFunctionTaxonomyRow(super.collection.newRow());
						}
						public grdFunctionTaxonomyRow newRow(boolean autoSelect)
						{
							return new grdFunctionTaxonomyRow(super.collection.newRow(autoSelect));
						}
						public grdFunctionTaxonomyRow newRowAt(int index)
						{
							return new grdFunctionTaxonomyRow(super.collection.newRowAt(index));
						}
						public grdFunctionTaxonomyRow newRowAt(int index, boolean autoSelect)
						{
							return new grdFunctionTaxonomyRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdFunctionTaxonomyGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
						{
							super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.core.vo.TaxonomyMapCollection getValues()
						{
							ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.TaxonomyMap getValue()
						{
							return (ims.core.vo.TaxonomyMap)super.grid.getValue();
						}
						public void setValue(ims.core.vo.TaxonomyMap value)
						{
							super.grid.setValue(value);
						}
						public grdFunctionTaxonomyRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdFunctionTaxonomyRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdFunctionTaxonomyRowCollection getRows()
						{
							return new grdFunctionTaxonomyRowCollection(super.grid.getRows());
						}
						public grdFunctionTaxonomyRow getRowByValue(ims.core.vo.TaxonomyMap value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdFunctionTaxonomyRow(row);
						}
						public void setcolExtCodeTypeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getcolExtCodeTypeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public GridComboBox colExtCodeTypeComboBox()
						{
							return new GridComboBox(super.grid, 0);
						}
						public void setcolCodeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getcolCodeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Function Taxonomy", new Integer(1), null, new Integer(0)}));
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 408, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						Grid m_grdFunctionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdFunctionTemp);
						grdFunctionGrid grdFunction = (grdFunctionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFunctionGrid.class, m_grdFunctionTemp);
						grdFunction.addStringColumn("Function", 0, 0, 310, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdFunction.addBoolColumn("Active", 0, 0, 50, false, false, 0, true);
						grdFunction.addBoolColumn("Add", 0, 0, -1, false, true, 0, true);
						super.addGrid(grdFunction);
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 408, 104, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdFunctionTaxonomyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdFunctionTaxonomyTemp);
						grdFunctionTaxonomyGrid grdFunctionTaxonomy = (grdFunctionTaxonomyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFunctionTaxonomyGrid.class, m_grdFunctionTaxonomyTemp);
						grdFunctionTaxonomy.addComboBoxColumn("External Code Type", 0, 0, 200, false, true, false, false, true, -1);
						grdFunctionTaxonomy.addStringColumn("External Code", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdFunctionTaxonomy);
					}
		
					public Label lblFunctionTaxonomy()
					{
						return (Label)super.getControl(0);
					}
					public grdFunctionGrid grdFunction()
					{
						return (grdFunctionGrid)super.getGrid(0);
					}
					public grdFunctionTaxonomyGrid grdFunctionTaxonomy()
					{
						return (grdFunctionTaxonomyGrid)super.getGrid(1);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 432, 320, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabPageActivity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Service Activity", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageActivityContainer m_tabPageActivityContainer = (tabPageActivityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageActivityContainer.class, m_tabPageActivity, factory);
					super.addContainer(m_tabPageActivity, m_tabPageActivityContainer);
					ims.framework.utils.SizeInfo m_tabPageActivityDesignSize = new ims.framework.utils.SizeInfo(432, 320);
					ims.framework.utils.SizeInfo m_tabPageActivityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
					m_tabPageActivityContainer.setContext(form, appForm, m_tabPageActivity, loader, form_images_local, contextMenus, startControlID, m_tabPageActivityDesignSize, m_tabPageActivityRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 432, 320, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabPageFunction = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Service Function", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageFunctionContainer m_tabPageFunctionContainer = (tabPageFunctionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFunctionContainer.class, m_tabPageFunction, factory);
					super.addContainer(m_tabPageFunction, m_tabPageFunctionContainer);
					ims.framework.utils.SizeInfo m_tabPageFunctionDesignSize = new ims.framework.utils.SizeInfo(432, 320);
					ims.framework.utils.SizeInfo m_tabPageFunctionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
					m_tabPageFunctionContainer.setContext(form, appForm, m_tabPageFunction, loader, form_images_local, contextMenus, startControlID, m_tabPageFunctionDesignSize, m_tabPageFunctionRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageActivity().setVisible(false);
					tabPageFunction().setVisible(false);
				}
				public void settabPageActivityEnabled(boolean value)
				{
					tabPageActivity().setEnabled(value);
				}
				public void settabPageFunctionEnabled(boolean value)
				{
					tabPageFunction().setEnabled(value);
				}
				public void showtabPageActivity()
				{
					tabPageFunction().setVisible(false);
					tabPageActivity().setVisible(true);
				}
				public void showtabPageFunction()
				{
					tabPageActivity().setVisible(false);
					tabPageFunction().setVisible(true);
				}
		
				public tabPageActivityContainer tabPageActivity()
				{
					return (tabPageActivityContainer)super.layers.get(0);
				}
				public tabPageFunctionContainer tabPageFunction()
				{
					return (tabPageFunctionContainer)super.layers.get(1);
				}
			}
			public static class cmbTurnAroundMeasureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.MinReorderPeriod getValue()
				{
					return (ims.ocrr.vo.lookups.MinReorderPeriod)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCategoryComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ServiceCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ServiceCategory value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ServiceCategory getValue()
				{
					return (ims.core.vo.lookups.ServiceCategory)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ServiceCategory value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdTaxonomyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTaxonomyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolExtCodeTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolExtCodeTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolExtCodeTypeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
				{
					return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
				}
				public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolExtCodeTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolCodeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolCodeOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolCode()
				{
					return (String)super.row.get(1);
				}
				public void setcolCode(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolCodeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.row.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTaxonomyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTaxonomyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTaxonomyRow get(int index)
				{
					return new grdTaxonomyRow(super.collection.get(index));
				}
				public grdTaxonomyRow newRow()
				{
					return new grdTaxonomyRow(super.collection.newRow());
				}
				public grdTaxonomyRow newRow(boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRow(autoSelect));
				}
				public grdTaxonomyRow newRowAt(int index)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index));
				}
				public grdTaxonomyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTaxonomyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.TaxonomyMapCollection getValues()
				{
					ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.grid.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.grid.setValue(value);
				}
				public grdTaxonomyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTaxonomyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTaxonomyRowCollection getRows()
				{
					return new grdTaxonomyRowCollection(super.grid.getRows());
				}
				public grdTaxonomyRow getRowByValue(ims.core.vo.TaxonomyMap value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTaxonomyRow(row);
				}
				public void setcolExtCodeTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolExtCodeTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colExtCodeTypeComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 432, 232, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Service Details", new Integer(2), ""}));
		
				// Layer Clasess
				lyrActivityFunctionLayer m_lyrActivityFunctionLayer = (lyrActivityFunctionLayer)LayerFlyweightFactory.getInstance().createLayer(lyrActivityFunctionLayer.class, this, factory);
				super.addLayer(m_lyrActivityFunctionLayer);
				m_lyrActivityFunctionLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 20, 176, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Maternity Indicator:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 188, 170, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Expected Turn Around:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 188, 146, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Turn Around Measure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 20, 160, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Can be Scheduled:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 20, 122, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alternate Code:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 20, 192, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Taxonomy:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 20, 98, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 20, 26, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 20, 50, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 20, 74, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 20, 144, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Active:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 112, 120, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(15), Boolean.TRUE, Boolean.FALSE, null, "The Alternate Service Code is entered here.", Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 112, 24, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 112, 48, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 320, 144, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbTurnAroundMeasureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTurnAroundMeasureTemp);
				cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure = (cmbTurnAroundMeasureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTurnAroundMeasureComboBox.class, m_cmbTurnAroundMeasureTemp);
				super.addComboBox(cmbTurnAroundMeasure);
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 112, 96, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 112, 72, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCategoryTemp);
				cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
				super.addComboBox(cmbCategory);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 136, 176, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 136, 160, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 136, 144, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 112, 192, 320, 27, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTaxonomyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAddRemoveItems, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTaxonomyTemp);
				grdTaxonomyGrid grdTaxonomy = (grdTaxonomyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTaxonomyGrid.class, m_grdTaxonomyTemp);
				grdTaxonomy.addComboBoxColumn("External Code Type", 0, 0, 200, false, true, false, false, true, -1);
				grdTaxonomy.addStringColumn("External Code", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTaxonomy);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 320, 168, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public Panel pnlDetails()
			{
				return (Panel)super.getControl(0);
			}
			public lyrActivityFunctionLayer lyrActivityFunction()
			{
				return (lyrActivityFunctionLayer)super.getLayer(0);
			}
			public Label lblMaternityIndicator()
			{
				return (Label)super.getControl(3);
			}
			public Label lblExpectedTurnAround()
			{
				return (Label)super.getControl(4);
			}
			public Label lblTurnAroundMeasure()
			{
				return (Label)super.getControl(5);
			}
			public Label lbl8()
			{
				return (Label)super.getControl(6);
			}
			public Label lbl7()
			{
				return (Label)super.getControl(8);
			}
			public Label lbl5()
			{
				return (Label)super.getControl(9);
			}
			public Label lbl1()
			{
				return (Label)super.getControl(10);
			}
			public Label lbl2()
			{
				return (Label)super.getControl(11);
			}
			public Label lbl3()
			{
				return (Label)super.getControl(12);
			}
			public Label lbl4()
			{
				return (Label)super.getControl(13);
			}
			public TextBox txtAlternateCode()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(16);
			}
			public cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure()
			{
				return (cmbTurnAroundMeasureComboBox)super.getComboBox(0);
			}
			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(1);
			}
			public cmbCategoryComboBox cmbCategory()
			{
				return (cmbCategoryComboBox)super.getComboBox(2);
			}
			public CheckBox chkMaternityIndicator()
			{
				return (CheckBox)super.getControl(20);
			}
			public CheckBox chkCanSchedule()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkActive()
			{
				return (CheckBox)super.getControl(22);
			}
			public grdTaxonomyGrid grdTaxonomy()
			{
				return (grdTaxonomyGrid)super.getGrid(0);
			}
			public IntBox intExpectedTurnAround()
			{
				return (IntBox)super.getControl(24);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 456, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_View = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details View", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			ViewContainer m_ViewContainer = (ViewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(ViewContainer.class, m_View, factory);
			super.addContainer(m_View, m_ViewContainer);
			ims.framework.utils.SizeInfo m_ViewDesignSize = new ims.framework.utils.SizeInfo(456, 584);
			ims.framework.utils.SizeInfo m_ViewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
			m_ViewContainer.setContext(form, appForm, m_View, loader, form_images_local, contextMenus, startControlID, m_ViewDesignSize, m_ViewRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 376, 8, 456, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Edit = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Edit Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			EditContainer m_EditContainer = (EditContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(EditContainer.class, m_Edit, factory);
			super.addContainer(m_Edit, m_EditContainer);
			ims.framework.utils.SizeInfo m_EditDesignSize = new ims.framework.utils.SizeInfo(456, 584);
			ims.framework.utils.SizeInfo m_EditRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
			m_EditContainer.setContext(form, appForm, m_Edit, loader, form_images_local, contextMenus, startControlID, m_EditDesignSize, m_EditRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			View().setVisible(false);
			Edit().setVisible(false);
		}
		public void showView()
		{
			Edit().setVisible(false);
			View().setVisible(true);
		}
		public void showEdit()
		{
			View().setVisible(false);
			Edit().setVisible(true);
		}

		public ViewContainer View()
		{
			return (ViewContainer)super.layers.get(0);
		}
		public EditContainer Edit()
		{
			return (EditContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuServiceActivity = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuServiceActivityNEWSERVICEItem = factory.createMenuItem(startControlID.intValue() + 1, "New Service", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityNEWSERVICEItem);
		contextMenus.contextMenuServiceActivityUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Service", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityUPDATEItem);
		contextMenus.contextMenuServiceActivityNEWACTIVITYItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Activity", true, false, new Integer(103111), true, true);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityNEWACTIVITYItem);
		contextMenus.contextMenuServiceActivityUPDATEACTIVITYItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Activity", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityUPDATEACTIVITYItem);
		contextMenus.contextMenuServiceActivityNEWFUNCTIONItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Function", true, false, new Integer(103109), true, false);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityNEWFUNCTIONItem);
		contextMenus.contextMenuServiceActivityUPDATEFUNCTIONItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Function", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityUPDATEFUNCTIONItem);
		contextMenus.contextMenuServiceActivityLINKLOCItem = factory.createMenuItem(startControlID.intValue() + 7, "Add To Location", true, false, new Integer(103104), true, true);
		contextMenus.contextMenuServiceActivity.add(contextMenus.contextMenuServiceActivityLINKLOCItem);
		form.registerMenu(contextMenus.contextMenuServiceActivity);
		contextMenus.contextMenuAddRemoveItems = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuAddRemoveItemsADDItem = factory.createMenuItem(startControlID.intValue() + 8, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuAddRemoveItems.add(contextMenus.contextMenuAddRemoveItemsADDItem);
		contextMenus.contextMenuAddRemoveItemsREMOVEITEMItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuAddRemoveItems.add(contextMenus.contextMenuAddRemoveItemsREMOVEITEMItem);
		form.registerMenu(contextMenus.contextMenuAddRemoveItems);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 10, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 12, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 13, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 14, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 15, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 16, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 17, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 18, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Admin.contextMenuTaxonomyGrid = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.Admin.contextMenuTaxonomyGridAddTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 19, "Add Taxonomy", true, false, new Integer(102179), true, true);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridAddTaxonomyItem);
		contextMenus.Admin.contextMenuTaxonomyGridUpdateTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 20, "Update Taxonomy", true, false, new Integer(102150), true, false);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridUpdateTaxonomyItem);
		contextMenus.Admin.contextMenuTaxonomyGridRemoveTaxonomyItem = factory.createMenuItem(startControlID.intValue() + 21, "Remove Taxonomy", true, false, new Integer(102148), true, false);
		contextMenus.Admin.contextMenuTaxonomyGrid.add(contextMenus.Admin.contextMenuTaxonomyGridRemoveTaxonomyItem);
		form.registerMenu(contextMenus.Admin.contextMenuTaxonomyGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 352, 584, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Service List", new Integer(2), ""}));

		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 280, 63, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 24, 64, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 24, 40, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.TRUE, null}));

		// Tree Controls
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 24, 125, 336, 451, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuServiceActivity, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));

		// Link Controls
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 704, 8, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return To Work Queue", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlSearch()
	{
		return (Panel)super.getControl(0);
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnSearch()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public TextBox txtServiceName()
	{
		return (TextBox)super.getControl(8);
	}
	public CheckBox chkActiveService()
	{
		return (CheckBox)super.getControl(9);
	}
	public TreeView treService()
	{
		return (TreeView)super.getControl(10);
	}
	public Link lnkBack()
	{
		return (Link)super.getControl(11);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			NTPF = new NTPFForms();
		}
		public final class NTPFForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NTPFForms()
			{
				WorkQueue2 = new LocalFormName(110131);
				WorkQueue = new LocalFormName(110109);
			}
			public final FormName WorkQueue2;
			public final FormName WorkQueue;
		}

		public NTPFForms NTPF;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Activity = new ImageHelper(103111, "Images/Admin/VSObject_Structure.gif", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
				Function = new ImageHelper(103109, "Images/Admin/Function.gif", new Integer(16), new Integer(16));
				Down = new ImageHelper(103117, "Images/Admin/Down.gif", new Integer(16), new Integer(16));
				Down_disabled = new ImageHelper(103119, "Images/Admin/Down_disabled.gif", new Integer(16), new Integer(16));
				ActivityInactive = new ImageHelper(103147, "Images/Admin/ActivityInActive.gif", new Integer(16), new Integer(16));
				FunctionInActive = new ImageHelper(103148, "Images/Admin/FunctionInActive.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Activity;
			public final ims.framework.utils.Image Service;
			public final ims.framework.utils.Image Function;
			public final ims.framework.utils.Image Down;
			public final ims.framework.utils.Image Down_disabled;
			public final ims.framework.utils.Image ActivityInactive;
			public final ims.framework.utils.Image FunctionInActive;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_treMessage = new ims.framework.ContextVariable("treMessage", prefix + "_lv_Admin.Service.__internal_x_context__treMessage_" + componentIdentifier + "");
			cxl_serviceFunctions = new ims.framework.ContextVariable("serviceFunctions", prefix + "_lv_Admin.Service.__internal_x_context__serviceFunctions_" + componentIdentifier + "");
			cxl_serviceActivities = new ims.framework.ContextVariable("serviceActivities", prefix + "_lv_Admin.Service.__internal_x_context__serviceActivities_" + componentIdentifier + "");
			cxl_SelectedRecordFunction = new ims.framework.ContextVariable("SelectedRecordFunction", prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordFunction_" + componentIdentifier + "");
			cxl_SelectedRecordActivity = new ims.framework.ContextVariable("SelectedRecordActivity", prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordActivity_" + componentIdentifier + "");
			cxl_prevSelectedRecordActivity = new ims.framework.ContextVariable("prevSelectedRecordActivity", prefix + "_lv_Admin.Service.__internal_x_context__prevSelectedRecordActivity_" + componentIdentifier + "");
			cxl_PreviousForm = new ims.framework.ContextVariable("PreviousForm", prefix + "_lv_Admin.Service.__internal_x_context__PreviousForm_" + componentIdentifier + "");
			cxl_SelectedActivity = new ims.framework.ContextVariable("SelectedActivity", prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.core.vo.ServiceVo getSelectedRecord()
		{
			return (ims.core.vo.ServiceVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.core.vo.ServiceVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean gettreMessageIsNotNull()
		{
			return !cxl_treMessage.getValueIsNull(context);
		}
		public String gettreMessage()
		{
			return (String)cxl_treMessage.getValue(context);
		}
		public void settreMessage(String value)
		{
			cxl_treMessage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_treMessage = null;
		public boolean getserviceFunctionsIsNotNull()
		{
			return !cxl_serviceFunctions.getValueIsNull(context);
		}
		public ims.core.vo.ServiceFunctionVoCollection getserviceFunctions()
		{
			return (ims.core.vo.ServiceFunctionVoCollection)cxl_serviceFunctions.getValue(context);
		}
		public void setserviceFunctions(ims.core.vo.ServiceFunctionVoCollection value)
		{
			cxl_serviceFunctions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_serviceFunctions = null;
		public boolean getserviceActivitiesIsNotNull()
		{
			return !cxl_serviceActivities.getValueIsNull(context);
		}
		public ims.core.vo.ServiceActivityVoCollection getserviceActivities()
		{
			return (ims.core.vo.ServiceActivityVoCollection)cxl_serviceActivities.getValue(context);
		}
		public void setserviceActivities(ims.core.vo.ServiceActivityVoCollection value)
		{
			cxl_serviceActivities.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_serviceActivities = null;
		public boolean getSelectedRecordFunctionIsNotNull()
		{
			return !cxl_SelectedRecordFunction.getValueIsNull(context);
		}
		public ims.core.vo.ServiceFunctionVo getSelectedRecordFunction()
		{
			return (ims.core.vo.ServiceFunctionVo)cxl_SelectedRecordFunction.getValue(context);
		}
		public void setSelectedRecordFunction(ims.core.vo.ServiceFunctionVo value)
		{
			cxl_SelectedRecordFunction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordFunction = null;
		public boolean getSelectedRecordActivityIsNotNull()
		{
			return !cxl_SelectedRecordActivity.getValueIsNull(context);
		}
		public ims.core.vo.ServiceActivityVo getSelectedRecordActivity()
		{
			return (ims.core.vo.ServiceActivityVo)cxl_SelectedRecordActivity.getValue(context);
		}
		public void setSelectedRecordActivity(ims.core.vo.ServiceActivityVo value)
		{
			cxl_SelectedRecordActivity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordActivity = null;
		public boolean getprevSelectedRecordActivityIsNotNull()
		{
			return !cxl_prevSelectedRecordActivity.getValueIsNull(context);
		}
		public ims.core.vo.ServiceActivityVo getprevSelectedRecordActivity()
		{
			return (ims.core.vo.ServiceActivityVo)cxl_prevSelectedRecordActivity.getValue(context);
		}
		public void setprevSelectedRecordActivity(ims.core.vo.ServiceActivityVo value)
		{
			cxl_prevSelectedRecordActivity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_prevSelectedRecordActivity = null;
		public boolean getPreviousFormIsNotNull()
		{
			return !cxl_PreviousForm.getValueIsNull(context);
		}
		public ims.framework.FormName getPreviousForm()
		{
			return (ims.framework.FormName)cxl_PreviousForm.getValue(context);
		}
		public void setPreviousForm(ims.framework.FormName value)
		{
			cxl_PreviousForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousForm = null;
		public boolean getSelectedActivityIsNotNull()
		{
			return !cxl_SelectedActivity.getValueIsNull(context);
		}
		public ims.core.vo.ActivityVo getSelectedActivity()
		{
			return (ims.core.vo.ActivityVo)cxl_SelectedActivity.getValue(context);
		}
		public void setSelectedActivity(ims.core.vo.ActivityVo value)
		{
			cxl_SelectedActivity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedActivity = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class ServiceActivity implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEWSERVICE = 1;
			public static final int UPDATE = 2;
			public static final int NEWACTIVITY = 3;
			public static final int UPDATEACTIVITY = 4;
			public static final int NEWFUNCTION = 5;
			public static final int UPDATEFUNCTION = 6;
			public static final int LINKLOC = 7;
		}
		public void disableAllServiceActivityMenuItems()
		{
			this.contextMenuServiceActivityNEWSERVICEItem.setEnabled(false);
			this.contextMenuServiceActivityUPDATEItem.setEnabled(false);
			this.contextMenuServiceActivityNEWACTIVITYItem.setEnabled(false);
			this.contextMenuServiceActivityUPDATEACTIVITYItem.setEnabled(false);
			this.contextMenuServiceActivityNEWFUNCTIONItem.setEnabled(false);
			this.contextMenuServiceActivityUPDATEFUNCTIONItem.setEnabled(false);
			this.contextMenuServiceActivityLINKLOCItem.setEnabled(false);
		}
		public void hideAllServiceActivityMenuItems()
		{
			this.contextMenuServiceActivityNEWSERVICEItem.setVisible(false);
			this.contextMenuServiceActivityUPDATEItem.setVisible(false);
			this.contextMenuServiceActivityNEWACTIVITYItem.setVisible(false);
			this.contextMenuServiceActivityUPDATEACTIVITYItem.setVisible(false);
			this.contextMenuServiceActivityNEWFUNCTIONItem.setVisible(false);
			this.contextMenuServiceActivityUPDATEFUNCTIONItem.setVisible(false);
			this.contextMenuServiceActivityLINKLOCItem.setVisible(false);
		}
		private Menu contextMenuServiceActivity;
		public MenuItem getServiceActivityNEWSERVICEItem()
		{
			return this.contextMenuServiceActivityNEWSERVICEItem;
		}
		private MenuItem contextMenuServiceActivityNEWSERVICEItem;
		public MenuItem getServiceActivityUPDATEItem()
		{
			return this.contextMenuServiceActivityUPDATEItem;
		}
		private MenuItem contextMenuServiceActivityUPDATEItem;
		public MenuItem getServiceActivityNEWACTIVITYItem()
		{
			return this.contextMenuServiceActivityNEWACTIVITYItem;
		}
		private MenuItem contextMenuServiceActivityNEWACTIVITYItem;
		public MenuItem getServiceActivityUPDATEACTIVITYItem()
		{
			return this.contextMenuServiceActivityUPDATEACTIVITYItem;
		}
		private MenuItem contextMenuServiceActivityUPDATEACTIVITYItem;
		public MenuItem getServiceActivityNEWFUNCTIONItem()
		{
			return this.contextMenuServiceActivityNEWFUNCTIONItem;
		}
		private MenuItem contextMenuServiceActivityNEWFUNCTIONItem;
		public MenuItem getServiceActivityUPDATEFUNCTIONItem()
		{
			return this.contextMenuServiceActivityUPDATEFUNCTIONItem;
		}
		private MenuItem contextMenuServiceActivityUPDATEFUNCTIONItem;
		public MenuItem getServiceActivityLINKLOCItem()
		{
			return this.contextMenuServiceActivityLINKLOCItem;
		}
		private MenuItem contextMenuServiceActivityLINKLOCItem;
		public final class AddRemoveItems implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 8;
			public static final int REMOVEITEM = 9;
		}
		public void disableAllAddRemoveItemsMenuItems()
		{
			this.contextMenuAddRemoveItemsADDItem.setEnabled(false);
			this.contextMenuAddRemoveItemsREMOVEITEMItem.setEnabled(false);
		}
		public void hideAllAddRemoveItemsMenuItems()
		{
			this.contextMenuAddRemoveItemsADDItem.setVisible(false);
			this.contextMenuAddRemoveItemsREMOVEITEMItem.setVisible(false);
		}
		private Menu contextMenuAddRemoveItems;
		public MenuItem getAddRemoveItemsADDItem()
		{
			return this.contextMenuAddRemoveItemsADDItem;
		}
		private MenuItem contextMenuAddRemoveItemsADDItem;
		public MenuItem getAddRemoveItemsREMOVEITEMItem()
		{
			return this.contextMenuAddRemoveItemsREMOVEITEMItem;
		}
		private MenuItem contextMenuAddRemoveItemsREMOVEITEMItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 10;
			public static final int Update = 11;
			public static final int Remove = 12;
			public static final int View = 13;
			public static final int MoveUp = 14;
			public static final int MoveDown = 15;
			public static final int Replace = 16;
			public static final int Confirm = 17;
			public static final int EDIT_VIEW_ICP_ACTIONS = 18;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TaxonomyGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddTaxonomy = 19;
				public static final int UpdateTaxonomy = 20;
				public static final int RemoveTaxonomy = 21;
			}
			public void disableAllTaxonomyGridMenuItems()
			{
				this.contextMenuTaxonomyGridAddTaxonomyItem.setEnabled(false);
				this.contextMenuTaxonomyGridUpdateTaxonomyItem.setEnabled(false);
				this.contextMenuTaxonomyGridRemoveTaxonomyItem.setEnabled(false);
			}
			public void hideAllTaxonomyGridMenuItems()
			{
				this.contextMenuTaxonomyGridAddTaxonomyItem.setVisible(false);
				this.contextMenuTaxonomyGridUpdateTaxonomyItem.setVisible(false);
				this.contextMenuTaxonomyGridRemoveTaxonomyItem.setVisible(false);
			}
			private Menu contextMenuTaxonomyGrid;
			public MenuItem getTaxonomyGridAddTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridAddTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridAddTaxonomyItem;
			public MenuItem getTaxonomyGridUpdateTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridUpdateTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridUpdateTaxonomyItem;
			public MenuItem getTaxonomyGridRemoveTaxonomyItem()
			{
				return this.contextMenuTaxonomyGridRemoveTaxonomyItem;
			}
			private MenuItem contextMenuTaxonomyGridRemoveTaxonomyItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordFunction_" + componentIdentifier, "BO-1003100034-ID", "ID_ServiceFunction");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordFunction_" + componentIdentifier, "BO-1003100034-FUNCTION", "Function");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordFunction_" + componentIdentifier, "BO-1003100034-ISACTIVE", "IsActive");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordActivity_" + componentIdentifier, "BO-1005100005-ID", "ID_ServiceActivity");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedRecordActivity_" + componentIdentifier, "BO-1005100005-ISACTIVE", "IsActive");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__prevSelectedRecordActivity_" + componentIdentifier, "BO-1005100005-ID", "ID_ServiceActivity");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__prevSelectedRecordActivity_" + componentIdentifier, "BO-1005100005-ISACTIVE", "IsActive");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-ID", "ID_Activity");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-NAME", "Name");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-TMREQ", "TmReq");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-ISACTIVE", "IsActive");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-ACTIVITYTYPE", "ActivityType");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-ISWORKQUEUE", "IsWorkQueue");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-DESCRIPTION", "Description");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-STATUS", "Status");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-FIRSTAPPOINTMENT", "FirstAppointment");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Service.__internal_x_context__SelectedActivity_" + componentIdentifier, "BO-1007100005-DIAGNOSTIC", "Diagnostic");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
