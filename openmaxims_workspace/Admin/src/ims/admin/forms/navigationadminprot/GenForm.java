//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.navigationadminprot;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrAddsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabFormsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdNavFormsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNavFormsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setTypeIconReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isTypeIconReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showTypeIconOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getTypeIcon()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setTypeIcon(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellTypeIconTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getName()
				{
					return (String)super.row.get(1);
				}
				public void setName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.interfaces.IAppForm getValue()
				{
					return (ims.framework.interfaces.IAppForm)super.row.getValue();
				}
				public void setValue(ims.framework.interfaces.IAppForm value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNavFormsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNavFormsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNavFormsRow get(int index)
				{
					return new grdNavFormsRow(super.collection.get(index));
				}
				public grdNavFormsRow newRow()
				{
					return new grdNavFormsRow(super.collection.newRow());
				}
				public grdNavFormsRow newRow(boolean autoSelect)
				{
					return new grdNavFormsRow(super.collection.newRow(autoSelect));
				}
				public grdNavFormsRow newRowAt(int index)
				{
					return new grdNavFormsRow(super.collection.newRowAt(index));
				}
				public grdNavFormsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNavFormsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNavFormsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.framework.interfaces.IAppForm[] getValues()
				{
					ims.framework.interfaces.IAppForm[] listOfValues = new ims.framework.interfaces.IAppForm[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.framework.interfaces.IAppForm getValue()
				{
					return (ims.framework.interfaces.IAppForm)super.grid.getValue();
				}
				public void setValue(ims.framework.interfaces.IAppForm value)
				{
					super.grid.setValue(value);
				}
				public grdNavFormsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNavFormsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNavFormsRowCollection getRows()
				{
					return new grdNavFormsRowCollection(super.grid.getRows());
				}
				public grdNavFormsRow getRowByValue(ims.framework.interfaces.IAppForm value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNavFormsRow(row);
				}
				public void setTypeIconHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getTypeIconHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 160, 8, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 245, 8, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add", Boolean.FALSE, "Adds selected froms to navigation", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 304, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNavFormsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNavFormsTemp);
				grdNavFormsGrid grdNavForms = (grdNavFormsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNavFormsGrid.class, m_grdNavFormsTemp);
				grdNavForms.addImageColumn(" ", 0, 0, 50, false, 0);
				grdNavForms.addHtmlColumn("Name", 0, 0, 200, true, false, 0, true);
				grdNavForms.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
				grdNavForms.setSelectHeaderTooltip("Select");
				super.addGrid(grdNavForms);
			}

			public Button btnSearchForms()
			{
				return (Button)super.getControl(0);
			}
			public Button btnAddForms()
			{
				return (Button)super.getControl(1);
			}
			public TextBox txtForms()
			{
				return (TextBox)super.getControl(2);
			}
			public grdNavFormsGrid grdNavForms()
			{
				return (grdNavFormsGrid)super.getGrid(0);
			}
		}
		public static class tabAssesmentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdNavAssesmentsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNavAssesmentsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setTypeIconReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isTypeIconReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showTypeIconOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getTypeIcon()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setTypeIcon(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellTypeIconTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getName()
				{
					return (String)super.row.get(1);
				}
				public void setName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.vo.ValueObjectRef getValue()
				{
					return (ims.vo.ValueObjectRef)super.row.getValue();
				}
				public void setValue(ims.vo.ValueObjectRef value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNavAssesmentsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNavAssesmentsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNavAssesmentsRow get(int index)
				{
					return new grdNavAssesmentsRow(super.collection.get(index));
				}
				public grdNavAssesmentsRow newRow()
				{
					return new grdNavAssesmentsRow(super.collection.newRow());
				}
				public grdNavAssesmentsRow newRow(boolean autoSelect)
				{
					return new grdNavAssesmentsRow(super.collection.newRow(autoSelect));
				}
				public grdNavAssesmentsRow newRowAt(int index)
				{
					return new grdNavAssesmentsRow(super.collection.newRowAt(index));
				}
				public grdNavAssesmentsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNavAssesmentsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNavAssesmentsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.vo.ValueObjectRef[] getValues()
				{
					ims.vo.ValueObjectRef[] listOfValues = new ims.vo.ValueObjectRef[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.ValueObjectRef getValue()
				{
					return (ims.vo.ValueObjectRef)super.grid.getValue();
				}
				public void setValue(ims.vo.ValueObjectRef value)
				{
					super.grid.setValue(value);
				}
				public grdNavAssesmentsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNavAssesmentsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNavAssesmentsRowCollection getRows()
				{
					return new grdNavAssesmentsRowCollection(super.grid.getRows());
				}
				public grdNavAssesmentsRow getRowByValue(ims.vo.ValueObjectRef value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNavAssesmentsRow(row);
				}
				public void setTypeIconHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getTypeIconHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 160, 7, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 245, 7, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add", Boolean.FALSE, "Adds selected froms to navigation", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 7, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 304, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNavAssesmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNavAssesmentsTemp);
				grdNavAssesmentsGrid grdNavAssesments = (grdNavAssesmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNavAssesmentsGrid.class, m_grdNavAssesmentsTemp);
				grdNavAssesments.addImageColumn(" ", 0, 0, 50, false, 0);
				grdNavAssesments.addHtmlColumn("Name", 0, 0, 200, true, false, 0, true);
				grdNavAssesments.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
				grdNavAssesments.setSelectHeaderTooltip("Select");
				super.addGrid(grdNavAssesments);
			}

			public Button btnSearchAssesments()
			{
				return (Button)super.getControl(0);
			}
			public Button btnAddAssesments()
			{
				return (Button)super.getControl(1);
			}
			public TextBox txtSearchAssesments()
			{
				return (TextBox)super.getControl(2);
			}
			public grdNavAssesmentsGrid grdNavAssesments()
			{
				return (grdNavAssesmentsGrid)super.getGrid(0);
			}
		}
		public static class tabReportsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdNavReportsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdNavReportsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setTypeIconReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isTypeIconReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showTypeIconOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getTypeIcon()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setTypeIcon(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellTypeIconTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getName()
				{
					return (String)super.row.get(1);
				}
				public void setName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.admin.vo.ReportTemplateLiteVo getValue()
				{
					return (ims.admin.vo.ReportTemplateLiteVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.ReportTemplateLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdNavReportsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdNavReportsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdNavReportsRow get(int index)
				{
					return new grdNavReportsRow(super.collection.get(index));
				}
				public grdNavReportsRow newRow()
				{
					return new grdNavReportsRow(super.collection.newRow());
				}
				public grdNavReportsRow newRow(boolean autoSelect)
				{
					return new grdNavReportsRow(super.collection.newRow(autoSelect));
				}
				public grdNavReportsRow newRowAt(int index)
				{
					return new grdNavReportsRow(super.collection.newRowAt(index));
				}
				public grdNavReportsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdNavReportsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdNavReportsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.admin.vo.ReportTemplateLiteVoCollection getValues()
				{
					ims.admin.vo.ReportTemplateLiteVoCollection listOfValues = new ims.admin.vo.ReportTemplateLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.ReportTemplateLiteVo getValue()
				{
					return (ims.admin.vo.ReportTemplateLiteVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.ReportTemplateLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdNavReportsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdNavReportsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdNavReportsRowCollection getRows()
				{
					return new grdNavReportsRowCollection(super.grid.getRows());
				}
				public grdNavReportsRow getRowByValue(ims.admin.vo.ReportTemplateLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdNavReportsRow(row);
				}
				public void setTypeIconHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getTypeIconHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 160, 7, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 245, 7, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add", Boolean.FALSE, "Adds selected froms to navigation", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 7, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 304, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdNavReportsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdNavReportsTemp);
				grdNavReportsGrid grdNavReports = (grdNavReportsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdNavReportsGrid.class, m_grdNavReportsTemp);
				grdNavReports.addImageColumn(" ", 0, 0, 50, false, 0);
				grdNavReports.addHtmlColumn("Name", 0, 0, 200, true, false, 0, true);
				grdNavReports.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
				grdNavReports.setSelectHeaderTooltip("Select");
				super.addGrid(grdNavReports);
			}

			public Button btnSearchReports()
			{
				return (Button)super.getControl(0);
			}
			public Button btnAddReports()
			{
				return (Button)super.getControl(1);
			}
			public TextBox txtReports()
			{
				return (TextBox)super.getControl(2);
			}
			public grdNavReportsGrid grdNavReports()
			{
				return (grdNavReportsGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 504, 8, 336, 576, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabForms = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Forms", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabFormsContainer m_tabFormsContainer = (tabFormsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFormsContainer.class, m_tabForms, factory);
			super.addContainer(m_tabForms, m_tabFormsContainer);
			ims.framework.utils.SizeInfo m_tabFormsDesignSize = new ims.framework.utils.SizeInfo(336, 576);
			ims.framework.utils.SizeInfo m_tabFormsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabFormsContainer.setContext(form, appForm, m_tabForms, loader, form_images_local, contextMenus, startControlID, m_tabFormsDesignSize, m_tabFormsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 504, 8, 336, 576, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabAssesments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Assessments", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabAssesmentsContainer m_tabAssesmentsContainer = (tabAssesmentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssesmentsContainer.class, m_tabAssesments, factory);
			super.addContainer(m_tabAssesments, m_tabAssesmentsContainer);
			ims.framework.utils.SizeInfo m_tabAssesmentsDesignSize = new ims.framework.utils.SizeInfo(336, 576);
			ims.framework.utils.SizeInfo m_tabAssesmentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabAssesmentsContainer.setContext(form, appForm, m_tabAssesments, loader, form_images_local, contextMenus, startControlID, m_tabAssesmentsDesignSize, m_tabAssesmentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 504, 8, 336, 576, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			Container m_tabReports = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Reports", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabReportsContainer m_tabReportsContainer = (tabReportsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReportsContainer.class, m_tabReports, factory);
			super.addContainer(m_tabReports, m_tabReportsContainer);
			ims.framework.utils.SizeInfo m_tabReportsDesignSize = new ims.framework.utils.SizeInfo(336, 576);
			ims.framework.utils.SizeInfo m_tabReportsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabReportsContainer.setContext(form, appForm, m_tabReports, loader, form_images_local, contextMenus, startControlID, m_tabReportsDesignSize, m_tabReportsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabForms().setVisible(false);
			tabAssesments().setVisible(false);
			tabReports().setVisible(false);
		}
		public void settabFormsEnabled(boolean value)
		{
			tabForms().setEnabled(value);
		}
		public void settabAssesmentsEnabled(boolean value)
		{
			tabAssesments().setEnabled(value);
		}
		public void settabReportsEnabled(boolean value)
		{
			tabReports().setEnabled(value);
		}
		public void showtabForms()
		{
			tabAssesments().setVisible(false);
			tabReports().setVisible(false);
			tabForms().setVisible(true);
		}
		public void showtabAssesments()
		{
			tabForms().setVisible(false);
			tabReports().setVisible(false);
			tabAssesments().setVisible(true);
		}
		public void showtabReports()
		{
			tabForms().setVisible(false);
			tabAssesments().setVisible(false);
			tabReports().setVisible(true);
		}

		public tabFormsContainer tabForms()
		{
			return (tabFormsContainer)super.layers.get(0);
		}
		public tabAssesmentsContainer tabAssesments()
		{
			return (tabAssesmentsContainer)super.layers.get(1);
		}
		public tabReportsContainer tabReports()
		{
			return (tabReportsContainer)super.layers.get(2);
		}
	}
	public static class cmbStyleComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.lookups.NavigationStyle value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.lookups.NavigationStyle value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.lookups.NavigationStyle value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.lookups.NavigationStyle value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.lookups.NavigationStyle value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.lookups.NavigationStyle getValue()
		{
			return (ims.admin.vo.lookups.NavigationStyle)super.control.getValue();
		}
		public void setValue(ims.admin.vo.lookups.NavigationStyle value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbNavSearchFormComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.AppFormVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.AppFormVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.AppFormVo getValue()
		{
			return (ims.admin.vo.AppFormVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.AppFormVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbNavStartFormComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.AppFormVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.AppFormVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.AppFormVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.AppFormVo getValue()
		{
			return (ims.admin.vo.AppFormVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.AppFormVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getName()
		{
			return (String)super.row.get(0);
		}
		public void setName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isActiveReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showActiveOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getActive()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setActive(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellActiveTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.admin.vo.AppNavShortVo getValue()
		{
			return (ims.admin.vo.AppNavShortVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.AppNavShortVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdListRow get(int index)
		{
			return new grdListRow(super.collection.get(index));
		}
		public grdListRow newRow()
		{
			return new grdListRow(super.collection.newRow());
		}
		public grdListRow newRow(boolean autoSelect)
		{
			return new grdListRow(super.collection.newRow(autoSelect));
		}
		public grdListRow newRowAt(int index)
		{
			return new grdListRow(super.collection.newRowAt(index));
		}
		public grdListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.admin.vo.AppNavShortVoCollection getValues()
		{
			ims.admin.vo.AppNavShortVoCollection listOfValues = new ims.admin.vo.AppNavShortVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.AppNavShortVo getValue()
		{
			return (ims.admin.vo.AppNavShortVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.AppNavShortVo value)
		{
			super.grid.setValue(value);
		}
		public grdListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdListRowCollection getRows()
		{
			return new grdListRowCollection(super.grid.getRows());
		}
		public grdListRow getRowByValue(ims.admin.vo.AppNavShortVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdListRow(row);
		}
		public void setNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuNavAdmin = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuNavAdminAddRootGroupItem = factory.createMenuItem(startControlID.intValue() + 10, "Add Top Level Group", true, false, new Integer(102252), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminAddRootGroupItem);
		contextMenus.contextMenuNavAdminAddSecGroupItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Second Level Group", true, false, new Integer(102253), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminAddSecGroupItem);
		contextMenus.contextMenuNavAdminAddAssessmentItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Assessment", true, false, new Integer(102182), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminAddAssessmentItem);
		contextMenus.contextMenuNavAdminAddReportItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Report", true, false, new Integer(102292), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminAddReportItem);
		contextMenus.contextMenuNavAdminEditTextItem = factory.createMenuItem(startControlID.intValue() + 14, "Edit Node Text", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminEditTextItem);
		contextMenus.contextMenuNavAdminChangePictureItem = factory.createMenuItem(startControlID.intValue() + 15, "Colapse All", true, false, new Integer(102208), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminChangePictureItem);
		contextMenus.contextMenuNavAdminRemoveItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove this ", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminRemoveItem);
		contextMenus.contextMenuNavAdminSetStartFormItem = factory.createMenuItem(startControlID.intValue() + 17, "Set as Start Form", true, false, new Integer(102220), true, true);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminSetStartFormItem);
		contextMenus.contextMenuNavAdminSetSearchFormItem = factory.createMenuItem(startControlID.intValue() + 18, "Set as Patient Search Form", true, false, new Integer(102164), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminSetSearchFormItem);
		contextMenus.contextMenuNavAdminSetReadOnlyItem = factory.createMenuItem(startControlID.intValue() + 19, "Set as Read Only", true, false, new Integer(102223), true, true);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminSetReadOnlyItem);
		contextMenus.contextMenuNavAdminSetReadWriteItem = factory.createMenuItem(startControlID.intValue() + 20, "Set as Read/Write", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminSetReadWriteItem);
		contextMenus.contextMenuNavAdminReadOnlyForRipItem = factory.createMenuItem(startControlID.intValue() + 21, "Set Read Only for Patient RIP", true, false, new Integer(102145), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminReadOnlyForRipItem);
		contextMenus.contextMenuNavAdminReadWriteForRipItem = factory.createMenuItem(startControlID.intValue() + 22, "Set Read Write for Patient RIP", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminReadWriteForRipItem);
		contextMenus.contextMenuNavAdminInaccessibleForRipItem = factory.createMenuItem(startControlID.intValue() + 23, "Set Inaccessible for Patient RIP", true, false, new Integer(102141), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminInaccessibleForRipItem);
		contextMenus.contextMenuNavAdminReadOnlyForEpisEndItem = factory.createMenuItem(startControlID.intValue() + 24, "Set Read Only for Episode Ended", true, false, new Integer(102146), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminReadOnlyForEpisEndItem);
		contextMenus.contextMenuNavAdminReadWriteforEpisEndItem = factory.createMenuItem(startControlID.intValue() + 25, "Set Read Write for Episode Ended", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminReadWriteforEpisEndItem);
		contextMenus.contextMenuNavAdminInaccessibleForEpisEndItem = factory.createMenuItem(startControlID.intValue() + 26, "Set Inaccessible for Episode Ended", true, false, new Integer(102142), true, false);
		contextMenus.contextMenuNavAdmin.add(contextMenus.contextMenuNavAdminInaccessibleForEpisEndItem);
		form.registerMenu(contextMenus.contextMenuNavAdmin);


		// Layer Clasess
		lyrAddsLayer m_lyrAddsLayer = (lyrAddsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAddsLayer.class, this, factory);
		super.addLayer(m_lyrAddsLayer);
		m_lyrAddsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 240, 8, 163, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Show Images In Navigation", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 448, 37, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Style:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 528, 124, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Patient Search Form:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 488, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start Form:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 567, 43, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Active:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 408, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 424, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 464, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbStyleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStyleTemp);
		cmbStyleComboBox cmbStyle = (cmbStyleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStyleComboBox.class, m_cmbStyleTemp);
		super.addComboBox(cmbStyle);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 544, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_qmbNavSearchFormTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbNavSearchFormTemp);
		qmbNavSearchFormComboBox qmbNavSearchForm = (qmbNavSearchFormComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbNavSearchFormComboBox.class, m_qmbNavSearchFormTemp);
		super.addComboBox(qmbNavSearchForm);
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 504, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_qmbNavStartFormTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbNavStartFormTemp);
		qmbNavStartFormComboBox qmbNavStartForm = (qmbNavStartFormComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbNavStartFormComboBox.class, m_qmbNavStartFormTemp);
		super.addComboBox(qmbNavStartForm);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 224, 8, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 56, 567, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 208, 368, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdListTemp);
		grdListGrid grdList = (grdListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListGrid.class, m_grdListTemp);
		grdList.addStringColumn("Name", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdList.addBoolColumn("Active", 1, 1, -1, true, false, 0, true);
		super.addGrid(grdList);

		// Tree Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 224, 32, 272, 552, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuNavAdmin, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrAddsLayer lyrAdds()
	{
		return (lyrAddsLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(11);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(12);
	}
	public TextBox txtNavName()
	{
		return (TextBox)super.getControl(13);
	}
	public cmbStyleComboBox cmbStyle()
	{
		return (cmbStyleComboBox)super.getComboBox(0);
	}
	public qmbNavSearchFormComboBox qmbNavSearchForm()
	{
		return (qmbNavSearchFormComboBox)super.getComboBox(1);
	}
	public qmbNavStartFormComboBox qmbNavStartForm()
	{
		return (qmbNavStartFormComboBox)super.getComboBox(2);
	}
	public CheckBox chkShowImages()
	{
		return (CheckBox)super.getControl(17);
	}
	public CheckBox chkIsActive()
	{
		return (CheckBox)super.getControl(18);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(19);
	}
	public grdListGrid grdList()
	{
		return (grdListGrid)super.getGrid(0);
	}
	public TreeView treNav()
	{
		return (TreeView)super.getControl(21);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				NavigationImageSelectDialog = new LocalFormName(103213);
			}
			public final FormName NavigationImageSelectDialog;
		}

		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
			Assessment = new AssessmentImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Color = new ImageHelper(103120, "Images/Admin/Color.gif", new Integer(16), new Integer(16));
				Form48 = new ImageHelper(103236, "Images/Admin/form_48.png", new Integer(48), new Integer(48));
				NavGrpDefault48 = new ImageHelper(103376, "Images/Admin/folder_next_48.png", new Integer(48), new Integer(48));
				AssessmentReadOnly48 = new ImageHelper(103427, "Images/Admin/assessment_readonly.png", new Integer(48), new Integer(48));
				FormReadOnly48 = new ImageHelper(103428, "Images/Admin/form_readonly.png", new Integer(48), new Integer(48));
				FolderReadOnly48 = new ImageHelper(103429, "Images/Admin/folder_readonly.png", new Integer(48), new Integer(48));
				ReportReadOnly48 = new ImageHelper(103430, "Images/Admin/report_readonly.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Color;
			public final ims.framework.utils.Image Form48;
			public final ims.framework.utils.Image NavGrpDefault48;
			public final ims.framework.utils.Image AssessmentReadOnly48;
			public final ims.framework.utils.Image FormReadOnly48;
			public final ims.framework.utils.Image FolderReadOnly48;
			public final ims.framework.utils.Image ReportReadOnly48;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				PasteEnabled = new ImageHelper(102182, "Images/Core/PasteEnabled16.gif", new Integer(16), new Integer(16));
				CareContext = new ImageHelper(102252, "Images/Core/CareContext.gif", new Integer(16), new Integer(16));
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				Home = new ImageHelper(102220, "Images/Core/Home-2.gif", new Integer(16), new Integer(16));
				HomeDisabled = new ImageHelper(102280, "Images/Core/Home-2_disabled.gif", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				PasteDisabled = new ImageHelper(102183, "Images/Core/PasteDisabled16.gif", new Integer(16), new Integer(16));
				ReportDesigner = new ImageHelper(102292, "Images/Core/ReportDesigner.gif", new Integer(16), new Integer(16));
				View = new ImageHelper(102223, "Images/Core/Slide Show.gif", new Integer(16), new Integer(16));
				ViewDisabled = new ImageHelper(102279, "Images/Core/Slide Show disabled.gif", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				Report48 = new ImageHelper(102350, "Images/Core/Report_48.png", new Integer(48), new Integer(48));
				Alert_RedTriangle1 = new ImageHelper(102141, "Images/Core/alarm-red-triangle-1.gif", new Integer(16), new Integer(16));
				Alert_RedTriangle2 = new ImageHelper(102142, "Images/Core/alarm-red-triangle-2.gif", new Integer(16), new Integer(16));
				Alert_YellowTriangle1 = new ImageHelper(102145, "Images/Core/alarm-yellow-triangle-1.gif", new Integer(16), new Integer(16));
				Alert_YellowTriangle2 = new ImageHelper(102146, "Images/Core/alarm-yellow-triangle-2.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image PasteEnabled;
			public final ims.framework.utils.Image CareContext;
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image Home;
			public final ims.framework.utils.Image HomeDisabled;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image PasteDisabled;
			public final ims.framework.utils.Image ReportDesigner;
			public final ims.framework.utils.Image View;
			public final ims.framework.utils.Image ViewDisabled;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image Report48;
			public final ims.framework.utils.Image Alert_RedTriangle1;
			public final ims.framework.utils.Image Alert_RedTriangle2;
			public final ims.framework.utils.Image Alert_YellowTriangle1;
			public final ims.framework.utils.Image Alert_YellowTriangle2;
			public final ims.framework.utils.Image Edit;
		}
		public final class AssessmentImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentImages()
			{
				GraphicAssessment48 = new ImageHelper(127101, "Images/Assessment/graphic_assessment_48.png", new Integer(48), new Integer(48));
				Assessment48 = new ImageHelper(127100, "Images/Assessment/Assessment_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image GraphicAssessment48;
			public final ims.framework.utils.Image Assessment48;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
		public final AssessmentImages Assessment;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedNav = new ims.framework.ContextVariable("SelectedNav", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier + "");
			cxl_AllNavs = new ims.framework.ContextVariable("AllNavs", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AllNavs_" + componentIdentifier + "");
			cxl_AllForms = new ims.framework.ContextVariable("AllForms", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AllForms_" + componentIdentifier + "");
			cxl_SelectedTreeValue = new ims.framework.ContextVariable("SelectedTreeValue", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedTreeValue_" + componentIdentifier + "");
			cxl_AssessmentForm = new ims.framework.ContextVariable("AssessmentForm", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier + "");
			cxl_ReportViewerForm = new ims.framework.ContextVariable("ReportViewerForm", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier + "");
			cxl_SelectedForms = new ims.framework.ContextVariable("SelectedForms", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedForms_" + componentIdentifier + "");
			cxl_SelectedAssesments = new ims.framework.ContextVariable("SelectedAssesments", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedAssesments_" + componentIdentifier + "");
			cxl_SelectedReports = new ims.framework.ContextVariable("SelectedReports", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedReports_" + componentIdentifier + "");
			cxl_PreviosTab = new ims.framework.ContextVariable("PreviosTab", prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__PreviosTab_" + componentIdentifier + "");
		}
		
		public boolean getSelectedNavIsNotNull()
		{
			return !cxl_SelectedNav.getValueIsNull(context);
		}
		public ims.admin.vo.AppNavigationVo getSelectedNav()
		{
			return (ims.admin.vo.AppNavigationVo)cxl_SelectedNav.getValue(context);
		}
		public void setSelectedNav(ims.admin.vo.AppNavigationVo value)
		{
			cxl_SelectedNav.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedNav = null;
		public boolean getAllNavsIsNotNull()
		{
			return !cxl_AllNavs.getValueIsNull(context);
		}
		public ims.admin.vo.AppNavShortVoCollection getAllNavs()
		{
			return (ims.admin.vo.AppNavShortVoCollection)cxl_AllNavs.getValue(context);
		}
		public void setAllNavs(ims.admin.vo.AppNavShortVoCollection value)
		{
			cxl_AllNavs.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllNavs = null;
		public boolean getAllFormsIsNotNull()
		{
			return !cxl_AllForms.getValueIsNull(context);
		}
		public java.util.ArrayList<ims.framework.interfaces.IAppForm> getAllForms()
		{
			return (java.util.ArrayList<ims.framework.interfaces.IAppForm>)cxl_AllForms.getValue(context);
		}
		public void setAllForms(java.util.ArrayList<ims.framework.interfaces.IAppForm> value)
		{
			cxl_AllForms.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllForms = null;
		public boolean getSelectedTreeValueIsNotNull()
		{
			return !cxl_SelectedTreeValue.getValueIsNull(context);
		}
		public java.lang.Object getSelectedTreeValue()
		{
			return cxl_SelectedTreeValue.getValue(context);
		}
		public void setSelectedTreeValue(java.lang.Object value)
		{
			cxl_SelectedTreeValue.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTreeValue = null;
		public boolean getAssessmentFormIsNotNull()
		{
			return !cxl_AssessmentForm.getValueIsNull(context);
		}
		public ims.admin.vo.AppFormVo getAssessmentForm()
		{
			return (ims.admin.vo.AppFormVo)cxl_AssessmentForm.getValue(context);
		}
		public void setAssessmentForm(ims.admin.vo.AppFormVo value)
		{
			cxl_AssessmentForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssessmentForm = null;
		public boolean getReportViewerFormIsNotNull()
		{
			return !cxl_ReportViewerForm.getValueIsNull(context);
		}
		public ims.admin.vo.AppFormVo getReportViewerForm()
		{
			return (ims.admin.vo.AppFormVo)cxl_ReportViewerForm.getValue(context);
		}
		public void setReportViewerForm(ims.admin.vo.AppFormVo value)
		{
			cxl_ReportViewerForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReportViewerForm = null;
		public boolean getSelectedFormsIsNotNull()
		{
			return !cxl_SelectedForms.getValueIsNull(context);
		}
		public java.util.ArrayList<ims.framework.interfaces.IAppForm> getSelectedForms()
		{
			return (java.util.ArrayList<ims.framework.interfaces.IAppForm>)cxl_SelectedForms.getValue(context);
		}
		public void setSelectedForms(java.util.ArrayList<ims.framework.interfaces.IAppForm> value)
		{
			cxl_SelectedForms.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedForms = null;
		public boolean getSelectedAssesmentsIsNotNull()
		{
			return !cxl_SelectedAssesments.getValueIsNull(context);
		}
		public java.util.ArrayList<ims.vo.ValueObjectRef> getSelectedAssesments()
		{
			return (java.util.ArrayList<ims.vo.ValueObjectRef>)cxl_SelectedAssesments.getValue(context);
		}
		public void setSelectedAssesments(java.util.ArrayList<ims.vo.ValueObjectRef> value)
		{
			cxl_SelectedAssesments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAssesments = null;
		public boolean getSelectedReportsIsNotNull()
		{
			return !cxl_SelectedReports.getValueIsNull(context);
		}
		public ims.admin.vo.ReportTemplateLiteVoCollection getSelectedReports()
		{
			return (ims.admin.vo.ReportTemplateLiteVoCollection)cxl_SelectedReports.getValue(context);
		}
		public void setSelectedReports(ims.admin.vo.ReportTemplateLiteVoCollection value)
		{
			cxl_SelectedReports.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedReports = null;
		public boolean getPreviosTabIsNotNull()
		{
			return !cxl_PreviosTab.getValueIsNull(context);
		}
		public String getPreviosTab()
		{
			return (String)cxl_PreviosTab.getValue(context);
		}
		public void setPreviosTab(String value)
		{
			cxl_PreviosTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviosTab = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class NavAdmin implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddRootGroup = 10;
			public static final int AddSecGroup = 11;
			public static final int AddAssessment = 12;
			public static final int AddReport = 13;
			public static final int EditText = 14;
			public static final int ChangePicture = 15;
			public static final int Remove = 16;
			public static final int SetStartForm = 17;
			public static final int SetSearchForm = 18;
			public static final int SetReadOnly = 19;
			public static final int SetReadWrite = 20;
			public static final int ReadOnlyForRip = 21;
			public static final int ReadWriteForRip = 22;
			public static final int InaccessibleForRip = 23;
			public static final int ReadOnlyForEpisEnd = 24;
			public static final int ReadWriteforEpisEnd = 25;
			public static final int InaccessibleForEpisEnd = 26;
		}
		public void disableAllNavAdminMenuItems()
		{
			this.contextMenuNavAdminAddRootGroupItem.setEnabled(false);
			this.contextMenuNavAdminAddSecGroupItem.setEnabled(false);
			this.contextMenuNavAdminAddAssessmentItem.setEnabled(false);
			this.contextMenuNavAdminAddReportItem.setEnabled(false);
			this.contextMenuNavAdminEditTextItem.setEnabled(false);
			this.contextMenuNavAdminChangePictureItem.setEnabled(false);
			this.contextMenuNavAdminRemoveItem.setEnabled(false);
			this.contextMenuNavAdminSetStartFormItem.setEnabled(false);
			this.contextMenuNavAdminSetSearchFormItem.setEnabled(false);
			this.contextMenuNavAdminSetReadOnlyItem.setEnabled(false);
			this.contextMenuNavAdminSetReadWriteItem.setEnabled(false);
			this.contextMenuNavAdminReadOnlyForRipItem.setEnabled(false);
			this.contextMenuNavAdminReadWriteForRipItem.setEnabled(false);
			this.contextMenuNavAdminInaccessibleForRipItem.setEnabled(false);
			this.contextMenuNavAdminReadOnlyForEpisEndItem.setEnabled(false);
			this.contextMenuNavAdminReadWriteforEpisEndItem.setEnabled(false);
			this.contextMenuNavAdminInaccessibleForEpisEndItem.setEnabled(false);
		}
		public void hideAllNavAdminMenuItems()
		{
			this.contextMenuNavAdminAddRootGroupItem.setVisible(false);
			this.contextMenuNavAdminAddSecGroupItem.setVisible(false);
			this.contextMenuNavAdminAddAssessmentItem.setVisible(false);
			this.contextMenuNavAdminAddReportItem.setVisible(false);
			this.contextMenuNavAdminEditTextItem.setVisible(false);
			this.contextMenuNavAdminChangePictureItem.setVisible(false);
			this.contextMenuNavAdminRemoveItem.setVisible(false);
			this.contextMenuNavAdminSetStartFormItem.setVisible(false);
			this.contextMenuNavAdminSetSearchFormItem.setVisible(false);
			this.contextMenuNavAdminSetReadOnlyItem.setVisible(false);
			this.contextMenuNavAdminSetReadWriteItem.setVisible(false);
			this.contextMenuNavAdminReadOnlyForRipItem.setVisible(false);
			this.contextMenuNavAdminReadWriteForRipItem.setVisible(false);
			this.contextMenuNavAdminInaccessibleForRipItem.setVisible(false);
			this.contextMenuNavAdminReadOnlyForEpisEndItem.setVisible(false);
			this.contextMenuNavAdminReadWriteforEpisEndItem.setVisible(false);
			this.contextMenuNavAdminInaccessibleForEpisEndItem.setVisible(false);
		}
		private Menu contextMenuNavAdmin;
		public MenuItem getNavAdminAddRootGroupItem()
		{
			return this.contextMenuNavAdminAddRootGroupItem;
		}
		private MenuItem contextMenuNavAdminAddRootGroupItem;
		public MenuItem getNavAdminAddSecGroupItem()
		{
			return this.contextMenuNavAdminAddSecGroupItem;
		}
		private MenuItem contextMenuNavAdminAddSecGroupItem;
		public MenuItem getNavAdminAddAssessmentItem()
		{
			return this.contextMenuNavAdminAddAssessmentItem;
		}
		private MenuItem contextMenuNavAdminAddAssessmentItem;
		public ReadOnlyMenuItem getNavAdminAddReportItem()
		{
			return this.contextMenuNavAdminAddReportItem;
		}
		private MenuItem contextMenuNavAdminAddReportItem;
		public MenuItem getNavAdminEditTextItem()
		{
			return this.contextMenuNavAdminEditTextItem;
		}
		private MenuItem contextMenuNavAdminEditTextItem;
		public ReadOnlyMenuItem getNavAdminChangePictureItem()
		{
			return this.contextMenuNavAdminChangePictureItem;
		}
		private MenuItem contextMenuNavAdminChangePictureItem;
		public MenuItem getNavAdminRemoveItem()
		{
			return this.contextMenuNavAdminRemoveItem;
		}
		private MenuItem contextMenuNavAdminRemoveItem;
		public MenuItem getNavAdminSetStartFormItem()
		{
			return this.contextMenuNavAdminSetStartFormItem;
		}
		private MenuItem contextMenuNavAdminSetStartFormItem;
		public MenuItem getNavAdminSetSearchFormItem()
		{
			return this.contextMenuNavAdminSetSearchFormItem;
		}
		private MenuItem contextMenuNavAdminSetSearchFormItem;
		public MenuItem getNavAdminSetReadOnlyItem()
		{
			return this.contextMenuNavAdminSetReadOnlyItem;
		}
		private MenuItem contextMenuNavAdminSetReadOnlyItem;
		public MenuItem getNavAdminSetReadWriteItem()
		{
			return this.contextMenuNavAdminSetReadWriteItem;
		}
		private MenuItem contextMenuNavAdminSetReadWriteItem;
		public MenuItem getNavAdminReadOnlyForRipItem()
		{
			return this.contextMenuNavAdminReadOnlyForRipItem;
		}
		private MenuItem contextMenuNavAdminReadOnlyForRipItem;
		public MenuItem getNavAdminReadWriteForRipItem()
		{
			return this.contextMenuNavAdminReadWriteForRipItem;
		}
		private MenuItem contextMenuNavAdminReadWriteForRipItem;
		public MenuItem getNavAdminInaccessibleForRipItem()
		{
			return this.contextMenuNavAdminInaccessibleForRipItem;
		}
		private MenuItem contextMenuNavAdminInaccessibleForRipItem;
		public MenuItem getNavAdminReadOnlyForEpisEndItem()
		{
			return this.contextMenuNavAdminReadOnlyForEpisEndItem;
		}
		private MenuItem contextMenuNavAdminReadOnlyForEpisEndItem;
		public MenuItem getNavAdminReadWriteforEpisEndItem()
		{
			return this.contextMenuNavAdminReadWriteforEpisEndItem;
		}
		private MenuItem contextMenuNavAdminReadWriteforEpisEndItem;
		public MenuItem getNavAdminInaccessibleForEpisEndItem()
		{
			return this.contextMenuNavAdminInaccessibleForEpisEndItem;
		}
		private MenuItem contextMenuNavAdminInaccessibleForEpisEndItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[110];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier, "BO-1028100027-ID", "ID_AppNavigation");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier, "BO-1028100027-NAVIGATIONNAME", "NavigationName");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier, "BO-1028100027-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier, "BO-1028100027-COMMENT", "Comment");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__SelectedNav_" + componentIdentifier, "BO-1028100027-STYLE", "Style");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ID", "ID_AppForm");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-NAME", "Name");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ALIASNAME", "AliasName");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-CAPTION", "Caption");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ISDIALOG", "IsDialog");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ISALIAS", "IsAlias");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ISCOMPONENT", "IsComponent");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-DESCRIPTION", "Description");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-CANBEINNAVIGATION", "CanBeInNavigation");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-CANBEINTOPBUTTONS", "CanBeInTopButtons");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-LOGICCLASS", "LogicClass");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ACCESSCLASS", "AccessClass");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-DOMAINCLASS", "DomainImpl");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-HELPLINK", "HelpLink");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-RIEBOCLASSNAME", "RieBoClassName");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-ISSYSTEM", "IsSystem");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__AssessmentForm_" + componentIdentifier, "BO-1021100001-INFORMATIONBARVISIBLE", "InformationBarVisible");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ID", "ID_AppForm");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-NAME", "Name");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ALIASNAME", "AliasName");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-CAPTION", "Caption");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ISDIALOG", "IsDialog");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ISALIAS", "IsAlias");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ISCOMPONENT", "IsComponent");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-DESCRIPTION", "Description");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-CANBEINNAVIGATION", "CanBeInNavigation");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-CANBEINTOPBUTTONS", "CanBeInTopButtons");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-LOGICCLASS", "LogicClass");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ACCESSCLASS", "AccessClass");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-DOMAINCLASS", "DomainImpl");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-HELPLINK", "HelpLink");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-RIEBOCLASSNAME", "RieBoClassName");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-ISSYSTEM", "IsSystem");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.NavigationAdminProt.__internal_x_context__ReportViewerForm_" + componentIdentifier, "BO-1021100001-INFORMATIONBARVISIBLE", "InformationBarVisible");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
