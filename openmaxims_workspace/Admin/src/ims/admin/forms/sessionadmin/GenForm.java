//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.sessionadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSessContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class ctnServerDetailsContainer extends ContainerBridge
			{
				private static final long serialVersionUID = 1L;
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 146, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Server hostname :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 114, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Server type :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 288, 114, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Configuration File :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 232, 82, 28, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mins", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 288, 82, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deployment directory :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 288, 50, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Database Type :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 288, 18, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Datasource name : ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 50, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Session count : ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Server start time : ", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 82, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Session timeout : ", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 136, 144, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 136, 112, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 432, 112, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 432, 80, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 432, 48, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 432, 16, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 136, 80, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 136, 48, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 136, 16, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				}
				public TextBox txtHostname()
				{
					return (TextBox)super.getControl(10);
				}
				public TextBox txtServerType()
				{
					return (TextBox)super.getControl(11);
				}
				public TextBox txtCfgFile()
				{
					return (TextBox)super.getControl(12);
				}
				public TextBox txtDeployDir()
				{
					return (TextBox)super.getControl(13);
				}
				public TextBox txtDbtype()
				{
					return (TextBox)super.getControl(14);
				}
				public TextBox txtDatasource()
				{
					return (TextBox)super.getControl(15);
				}
				public TextBox txtTimeOut()
				{
					return (TextBox)super.getControl(16);
				}
				public TextBox txtCount()
				{
					return (TextBox)super.getControl(17);
				}
				public TextBox txtStart()
				{
					return (TextBox)super.getControl(18);
				}
			}
			public static class grdSessRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSessRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setLoggedReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isLoggedReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showLoggedOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForLogged(String value)
				{
					super.row.setTooltip(0, value);
				}
				public boolean getLogged()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setLogged(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellLoggedTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setSessIDReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isSessIDReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showSessIDOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForSessID(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getSessID()
				{
					return (String)super.row.get(1);
				}
				public void setSessID(String value)
				{
					super.row.set(1, value);
				}
				public void setCellSessIDTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setUsernameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isUsernameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showUsernameOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForUsername(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getUsername()
				{
					return (String)super.row.get(2);
				}
				public void setUsername(String value)
				{
					super.row.set(2, value);
				}
				public void setCellUsernameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setRealNameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isRealNameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showRealNameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForRealName(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getRealName()
				{
					return (String)super.row.get(3);
				}
				public void setRealName(String value)
				{
					super.row.set(3, value);
				}
				public void setCellRealNameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isRoleReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showRoleOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForRole(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getRole()
				{
					return (String)super.row.get(4);
				}
				public void setRole(String value)
				{
					super.row.set(4, value);
				}
				public void setCellRoleTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setStartTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isStartTimeReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showStartTimeOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForStartTime(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getStartTime()
				{
					return (String)super.row.get(5);
				}
				public void setStartTime(String value)
				{
					super.row.set(5, value);
				}
				public void setCellStartTimeTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setIdleTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isIdleTimeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showIdleTimeOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForIdleTime(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getIdleTime()
				{
					return (String)super.row.get(6);
				}
				public void setIdleTime(String value)
				{
					super.row.set(6, value);
				}
				public void setCellIdleTimeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setRemoteHostReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isRemoteHostReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showRemoteHostOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForRemoteHost(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getRemoteHost()
				{
					return (String)super.row.get(7);
				}
				public void setRemoteHost(String value)
				{
					super.row.set(7, value);
				}
				public void setCellRemoteHostTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setNodeNameReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isNodeNameReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showNodeNameOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForNodeName(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getNodeName()
				{
					return (String)super.row.get(8);
				}
				public void setNodeName(String value)
				{
					super.row.set(8, value);
				}
				public void setCellNodeNameTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.admin.vo.AppSessionVo getValue()
				{
					return (ims.admin.vo.AppSessionVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.AppSessionVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSessRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSessRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSessRow get(int index)
				{
					return new grdSessRow(super.collection.get(index));
				}
				public grdSessRow newRow()
				{
					return new grdSessRow(super.collection.newRow());
				}
				public grdSessRow newRow(boolean autoSelect)
				{
					return new grdSessRow(super.collection.newRow(autoSelect));
				}
				public grdSessRow newRowAt(int index)
				{
					return new grdSessRow(super.collection.newRowAt(index));
				}
				public grdSessRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSessRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSessGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.admin.vo.AppSessionVoCollection getValues()
				{
					ims.admin.vo.AppSessionVoCollection listOfValues = new ims.admin.vo.AppSessionVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.AppSessionVo getValue()
				{
					return (ims.admin.vo.AppSessionVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.AppSessionVo value)
				{
					super.grid.setValue(value);
				}
				public grdSessRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSessRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSessRowCollection getRows()
				{
					return new grdSessRowCollection(super.grid.getRows());
				}
				public grdSessRow getRowByValue(ims.admin.vo.AppSessionVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSessRow(row);
				}
				public void setLoggedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getLoggedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setSessIDHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getSessIDHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setUsernameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getUsernameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setRealNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getRealNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setStartTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getStartTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setIdleTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getIdleTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setRemoteHostHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getRemoteHostHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setNodeNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getNodeNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Container Clasess
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 0, 368, 816, 176, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Container m_ctnServerDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, null, new Boolean(false)});
				addControl(m_ctnServerDetails);
				ctnServerDetailsContainer ctnServerDetails = (ctnServerDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnServerDetailsContainer.class, m_ctnServerDetails, factory);
				ims.framework.utils.SizeInfo m_ctnServerDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 176);
				ims.framework.utils.SizeInfo m_ctnServerDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
				ctnServerDetails.setContext(form, appForm, m_ctnServerDetails, loader, contextMenus, startControlID, m_ctnServerDetailsDesignSize, m_ctnServerDetailsRuntimeSize, startTabIndex, skipContextValidation);
				super.addContainer(ctnServerDetails);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 734, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Refresh", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 792, 344, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSessTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAppSessionAdmin, Boolean.TRUE, Boolean.FALSE, new Integer(50), "Session Count : ", Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSessTemp);
				grdSessGrid grdSess = (grdSessGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSessGrid.class, m_grdSessTemp);
				grdSess.addBoolColumn("Log", 0, 0, 30, true, false, 0, false);
				grdSess.addStringColumn("Session ID", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Username", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Real Name", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Role", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Start Time", 0, 0, 100, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Idle Time", 0, 0, 80, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Remote Host", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSess.addStringColumn("Node", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSess);
			}

			public ctnServerDetailsContainer ctnServerDetails()
			{
				return (ctnServerDetailsContainer)super.getContainer(0);
			}
			public Button btnRefresh()
			{
				return (Button)super.getControl(1);
			}
			public grdSessGrid grdSess()
			{
				return (grdSessGrid)super.getGrid(0);
			}
		}
		public static class tabLogContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 784, 19, 17, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Kb", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 392, 556, 109, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "(0 returns entire file)", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 692, 556, 19, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Kb", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 520, 556, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Retrieve Last", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 328, 18, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Location", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 648, 18, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Size", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "File Name", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 733, 553, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Refresh", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 384, 16, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 792, 496, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 680, 16, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 600, 554, 80, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// Link Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 556, 108, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Return to session list", Boolean.FALSE, null}));
			}

			public Button btnLogRefresh()
			{
				return (Button)super.getControl(7);
			}
			public TextBox txtLogLocation()
			{
				return (TextBox)super.getControl(8);
			}
			public TextBox txtlogName()
			{
				return (TextBox)super.getControl(9);
			}
			public TextBox txtLogContent()
			{
				return (TextBox)super.getControl(10);
			}
			public IntBox intLogSize()
			{
				return (IntBox)super.getControl(11);
			}
			public IntBox intNumKb()
			{
				return (IntBox)super.getControl(12);
			}
			public Link lnkReturn()
			{
				return (Link)super.getControl(13);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSess = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Session List", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabSessContainer m_tabSessContainer = (tabSessContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSessContainer.class, m_tabSess, factory);
			super.addContainer(m_tabSess, m_tabSessContainer);
			ims.framework.utils.SizeInfo m_tabSessDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabSessRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabSessContainer.setContext(form, appForm, m_tabSess, loader, contextMenus, startControlID, m_tabSessDesignSize, m_tabSessRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLog = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"LogFile", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabLogContainer m_tabLogContainer = (tabLogContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLogContainer.class, m_tabLog, factory);
			super.addContainer(m_tabLog, m_tabLogContainer);
			ims.framework.utils.SizeInfo m_tabLogDesignSize = new ims.framework.utils.SizeInfo(832, 608);
			ims.framework.utils.SizeInfo m_tabLogRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabLogContainer.setContext(form, appForm, m_tabLog, loader, contextMenus, startControlID, m_tabLogDesignSize, m_tabLogRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSess().setVisible(false);
			tabLog().setVisible(false);
		}
		public void showtabSess()
		{
			tabLog().setVisible(false);
			tabSess().setVisible(true);
		}
		public void showtabLog()
		{
			tabSess().setVisible(false);
			tabLog().setVisible(true);
		}

		public tabSessContainer tabSess()
		{
			return (tabSessContainer)super.layers.get(0);
		}
		public tabLogContainer tabLog()
		{
			return (tabLogContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuAppSessionAdmin = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuAppSessionAdminTERMINATEItem = factory.createMenuItem(startControlID.intValue() + 1, "Terminate Session", true, false, new Integer(102148), false, false);
		contextMenus.contextMenuAppSessionAdmin.add(contextMenus.contextMenuAppSessionAdminTERMINATEItem);
		contextMenus.contextMenuAppSessionAdminLOGGINGItem = factory.createMenuItem(startControlID.intValue() + 2, "Enable Session Logging", true, false, new Integer(102150), false, false);
		contextMenus.contextMenuAppSessionAdmin.add(contextMenus.contextMenuAppSessionAdminLOGGINGItem);
		contextMenus.contextMenuAppSessionAdminVIEWLOGItem = factory.createMenuItem(startControlID.intValue() + 3, "View Session Log", true, false, new Integer(102186), false, false);
		contextMenus.contextMenuAppSessionAdmin.add(contextMenus.contextMenuAppSessionAdminVIEWLOGItem);
		form.registerMenu(contextMenus.contextMenuAppSessionAdmin);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}


	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_UserNameSortOrder = new ims.framework.ContextVariable("UserNameSortOrder", prefix + "_lv_Admin.SessionAdmin.__internal_x_context__UserNameSortOrder_" + componentIdentifier + "");
			cxl_IdleTimeSortOrder = new ims.framework.ContextVariable("IdleTimeSortOrder", prefix + "_lv_Admin.SessionAdmin.__internal_x_context__IdleTimeSortOrder_" + componentIdentifier + "");
			cxl_SessionCollection = new ims.framework.ContextVariable("SessionCollection", prefix + "_lv_Admin.SessionAdmin.__internal_x_context__SessionCollection_" + componentIdentifier + "");
		}
		
		public boolean getUserNameSortOrderIsNotNull()
		{
			return !cxl_UserNameSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getUserNameSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_UserNameSortOrder.getValue(context);
		}
		public void setUserNameSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_UserNameSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserNameSortOrder = null;
		public boolean getIdleTimeSortOrderIsNotNull()
		{
			return !cxl_IdleTimeSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getIdleTimeSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_IdleTimeSortOrder.getValue(context);
		}
		public void setIdleTimeSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_IdleTimeSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IdleTimeSortOrder = null;
		public boolean getSessionCollectionIsNotNull()
		{
			return !cxl_SessionCollection.getValueIsNull(context);
		}
		public ims.admin.vo.AppSessionVoCollection getSessionCollection()
		{
			return (ims.admin.vo.AppSessionVoCollection)cxl_SessionCollection.getValue(context);
		}
		public void setSessionCollection(ims.admin.vo.AppSessionVoCollection value)
		{
			cxl_SessionCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionCollection = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class AppSessionAdmin implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int TERMINATE = 1;
			public static final int LOGGING = 2;
			public static final int VIEWLOG = 3;
		}
		public void disableAllAppSessionAdminMenuItems()
		{
			this.contextMenuAppSessionAdminTERMINATEItem.setEnabled(false);
			this.contextMenuAppSessionAdminLOGGINGItem.setEnabled(false);
			this.contextMenuAppSessionAdminVIEWLOGItem.setEnabled(false);
		}
		public void hideAllAppSessionAdminMenuItems()
		{
			this.contextMenuAppSessionAdminTERMINATEItem.setVisible(false);
			this.contextMenuAppSessionAdminLOGGINGItem.setVisible(false);
			this.contextMenuAppSessionAdminVIEWLOGItem.setVisible(false);
		}
		private Menu contextMenuAppSessionAdmin;
		public MenuItem getAppSessionAdminTERMINATEItem()
		{
			return this.contextMenuAppSessionAdminTERMINATEItem;
		}
		private MenuItem contextMenuAppSessionAdminTERMINATEItem;
		public MenuItem getAppSessionAdminLOGGINGItem()
		{
			return this.contextMenuAppSessionAdminLOGGINGItem;
		}
		private MenuItem contextMenuAppSessionAdminLOGGINGItem;
		public MenuItem getAppSessionAdminVIEWLOGItem()
		{
			return this.contextMenuAppSessionAdminVIEWLOGItem;
		}
		private MenuItem contextMenuAppSessionAdminVIEWLOGItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
