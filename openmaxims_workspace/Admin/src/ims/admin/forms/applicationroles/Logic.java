//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.20 build 40727.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.applicationroles;

import ims.admin.vo.AppFormMenuActionsVo;
import ims.admin.vo.AppFormMenuActionsVoCollection;
import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppNavFormVo;
import ims.admin.vo.AppNavRootGroupVo;
import ims.admin.vo.AppNavSecondGroupVo;
import ims.admin.vo.AppNavShortVoCollection;
import ims.admin.vo.AppNavigationVo;
import ims.admin.vo.AppRightVo;
import ims.admin.vo.AppRightVoCollection;
import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.admin.vo.AppRoleVo;
import ims.admin.vo.AppTopButtonConfigShortVoCollection;
import ims.admin.vo.FormMenuActionsDeniedVo;
import ims.admin.vo.FormMenuActionsDeniedVoCollection;
import ims.admin.vo.MenuActionVo;
import ims.admin.vo.MenuActionVoCollection;
import ims.configuration.AppRight;
import ims.core.configuration.vo.AppFormRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
public class Logic extends BaseLogic
{
	@Override
	protected void onFormOpen() throws PresentationLogicException 
	{
		populateAppRightsCombo(false);
		populateNavCombo();
		populateTopButtonsCombo();
		form.ccTaxonomyMappings().initialize();
		
		open();
		
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
	}
	@Override
	protected void onFormModeChanged() 
	{
		updateContextMenuState();		
		updateComponentState();
		
		//WDEV-15632
		form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW));
		form.btnUpdate().setEnabled(false);
		
	}
	private void updateComponentState() 
	{	
		form.ccTaxonomyMappings().setMode(form.getMode());
		form.ccTaxonomyMappings().setComponentMode(form.getMode());
	}
	@Override
	protected void onTreActionsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException 
	{
		updateContextMenuState();		
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Admin.MenuActionsSelection) && result.equals(DialogResult.OK))
		{
			processMenuActionsSelection();
		}
	}
	private void updateContextMenuState()
	{
		if(form.getMode() == FormMode.VIEW)
		{
			form.getContextMenus().Admin.getRoleMenuActionAddItem().setVisible(false);
			form.getContextMenus().Admin.getRoleMenuActionRemoveItem().setVisible(false);
			form.getContextMenus().Admin.getRoleMenuActionRemoveAllItem().setVisible(false);
		}
		else if(form.getMode() == FormMode.EDIT)
		{
			form.getContextMenus().Admin.getRoleMenuActionAddItem().setVisible(true);
			form.getContextMenus().Admin.getRoleMenuActionAddItem().setEnabled(true);
			form.getContextMenus().Admin.getRoleMenuActionRemoveItem().setVisible(form.lyrRights().tabActionsDenied().treActions().getValue() != null);
			form.getContextMenus().Admin.getRoleMenuActionRemoveAllItem().setVisible(true);
			form.getContextMenus().Admin.getRoleMenuActionRemoveAllItem().setEnabled(true);
		}
	}
	private void populateNavCombo()
	{
		form.cmbNavs().clear();
		AppNavShortVoCollection coll = domain.listNavigations();
		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbNavs().newRow( coll.get(i), coll.get(i).getNavigationName());
		}		
	}
	
	private void populateTopButtonsCombo()
	{
		form.cmbTopButtons().clear();
		AppTopButtonConfigShortVoCollection coll = domain.listTopButtonConfigurations();
		if(coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				form.cmbTopButtons().newRow(coll.get(i), coll.get(i).getName());
			}
		}
	}
	class AppRightComparator implements Comparator<AppRightVo>
	{

		public int compare(AppRightVo arg0, AppRightVo arg1) {
			
			return getText(arg0).compareToIgnoreCase(getText(arg1));
		}
		private String getText(AppRightVo vo)
		{
			
			if (vo == null || !vo.getNameIsNotNull())
				return "";
			return vo.getName();
		}
		
	}
	
	private void populateAppRightsCombo(boolean bOnUpdate)
	{
		form.lyrRights().tabRightsGranted().cmbRights().clear();
		AppRight[] rights = AppRight.getAllRights();
		AppRightVo[] voRights = AppRightVo.domArrayToVo(rights);
		
		Arrays.sort(voRights, new  AppRightComparator());
				
		for (int i = 0; i < voRights.length; i++)
		{
			AppRightVo voRight = voRights[i];	
			if(bOnUpdate && isAlreadySelected(voRight))
				continue;
			form.lyrRights().tabRightsGranted().cmbRights().newRow(voRight, voRight.getName());
		}		
	}
	private boolean isAlreadySelected(AppRightVo voRight) {
		AppRoleVo voRole = form.getLocalContext().getRoleSelected();
		
		AppRightVoCollection collSelectedRights = voRole.getAppRights();		
		for (int i = 0; i < collSelectedRights.size(); i++)
		{
			AppRightVo voSelectedRight = collSelectedRights.get(i);
			if(voSelectedRight.getName().equals(voRight.getName()))
				return true;
		}
		
		return false;
	}
	private void clearAllFields() 
	{
		form.chkIsActive().setValue(true);
		form.txtRoleName().setValue(null);
		form.txtRoleDesc().setValue(null);
		form.cmbNavs().setValue(null);
		form.cmbTopButtons().setValue(null);
		form.ccTaxonomyMappings().clear();
		form.lyrRights().tabRightsGranted().grdRights().getRows().clear();
		form.lyrRights().tabRightsGranted().cmbRights().setValue(null);
		form.treNavView().clear();
		form.lyrRights().tabActionsDenied().treActions().clear();
	}

	private void listRoles() 
	{
		AppRoleShortVo selectedRole = form.getLocalContext().getRoleSelected();
		
		AppRoleShortVoCollection roles = domain.listRoles();		
		form.grdRoles().getRows().clear();
		GenForm.grdRolesRow row;
		for (int i = 0; i < roles.size(); i++)
		{
			AppRoleShortVo voRole = roles.get(i);
			if (selectedRole != null && selectedRole.getID_AppRoleIsNotNull() && selectedRole.getID_AppRole().equals(voRole.getID_AppRole()))
				row = form.grdRoles().getRows().newRow(true);
			else
				row = form.grdRoles().getRows().newRow();
			row.setValue(voRole);
			row.setcolRoleName(voRole.getName());	
		}
		
		// If the local context has a value set, set the grid value too
		if (form.getLocalContext().getRoleSelectedIsNotNull())
		{
			form.grdRoles().setValue(form.getLocalContext().getRoleSelected());
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}

	private void open() 
	{
		form.setMode(FormMode.VIEW);
		clearAllFields();
		listRoles();		
		form.grdRoles().setEnabled(true);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		
		if (form.getLocalContext().getRoleSelectedIsNotNull())
		{
			refreshSelectedRole();
		}
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (!validateFields())
			return;
		
		AppRoleVo voRole = form.getLocalContext().getRoleSelected();

		voRole.setIsActive(new Boolean(form.chkIsActive().getValue()));
		voRole.setName(form.txtRoleName().getValue());
		voRole.setDescription(form.txtRoleDesc().getValue());
		voRole.setCodeMappings(form.ccTaxonomyMappings().getValue());
		voRole.setNavigation(domain.getNavigation(form.cmbNavs().getValue()));
		voRole.setFormMenuActionsDenied(getActionsDenied());
		
		if(form.cmbTopButtons().getValue() != null)
			voRole.setTopButtonConfig(domain.getTopButtonConfiguration(form.cmbTopButtons().getValue()));
		else
			voRole.setTopButtonConfig(null);
		
		voRole.setAppRights(buildAppRightList());
				
		String[] errMess = voRole.validate(); 
		if (errMess != null)
		{
			engine.showErrors(errMess);
			return;
		}
		try
		{
			AppRoleVo newRole = domain.saveRole(voRole);
			form.getLocalContext().setRoleSelected(newRole);
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		open();
	}

	private AppRightVoCollection buildAppRightList()
	{
		AppRightVoCollection ret = new AppRightVoCollection();
		int size = form.lyrRights().tabRightsGranted().grdRights().getRows().size();
		for (int i = 0; i < size; i++)
		{
			ret.add(form.lyrRights().tabRightsGranted().grdRights().getRows().get(i).getValue());
		}
		return ret;		
	}


	/**
	 * @return
	 */
	private boolean validateFields() 
	{
		if (form.txtRoleName().getValue() == null)
		{
			engine.showMessage("Please enter a Role Name.");
			return false;
		}
		return true;
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);	
		form.grdRoles().setEnabled(false);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		populateAppRightsCombo(true);
	}

	
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		form.getLocalContext().setRoleSelected(new AppRoleVo());
		form.setMode(FormMode.EDIT);
		clearAllFields();
		listRoles();
		form.grdRoles().setEnabled(false);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		populateAppRightsCombo(false);
	}

	protected void onGrdRolesSelectionChanged() throws PresentationLogicException 
	{
		refreshSelectedRole();
	}

	private void refreshSelectedRole()
	{
		if (form.grdRoles().getValue() == null)
			return;
		AppRoleVo voRole = domain.getRole(form.grdRoles().getValue());
		form.getLocalContext().setRoleSelected(voRole);
		
		form.txtRoleName().setValue(voRole.getName());
		form.txtRoleDesc().setValue(voRole.getDescription());
		form.chkIsActive().setValue(voRole.getIsActive().booleanValue());
		form.ccTaxonomyMappings().setValue(voRole.getCodeMappings());
		form.cmbNavs().setValue(voRole.getNavigation());
		form.cmbTopButtons().setValue(voRole.getTopButtonConfig());		
		populateNavigation(voRole.getNavigation());
		form.btnUpdate().setEnabled(true);
		populateAppRights(voRole.getAppRights());
		populateMenuActions(voRole.getFormMenuActionsDenied());
	}
	@SuppressWarnings("unchecked")
	private void populateNavigation(AppNavigationVo nav)
	{
		form.treNavView().clear();
		if (nav == null)
			return;
		
		for (int i = 0; i < nav.getRootGroups().size(); i++)
		{
			AppNavRootGroupVo rg = nav.getRootGroups().get(i);
			TreeNode rootNode = form.treNavView().getNodes().add(rg, rg.getGroupName());
			rootNode.setExpandedImage(form.getImages().Core.CareContext);
			rootNode.setCollapsedImage(form.getImages().Core.CareContext);
			rootNode.setSelectedImage(form.getImages().Core.CareContext);
					
			ArrayList<Object> children = new ArrayList<Object>();
			for (int j = 0; rg.getGroups() != null && j < rg.getGroups().size(); j++)
			{
				children.add(rg.getGroups().get(j));
			}
			for (int k = 0; rg.getForms() != null && k < rg.getForms().size(); k++)
			{
				children.add(rg.getForms().get(k));
			}
			Collections.sort(children, new NavComparator());
			
			for (int m = 0; m < children.size(); m++)
			{
				Object child = children.get(m);
				if (child instanceof AppNavSecondGroupVo)
				{
					addSecondGroup(rootNode, (AppNavSecondGroupVo)child, nav);
				}
				else
				{
					addNavForm(rootNode, (AppNavFormVo)child, nav);
				}
			}
		}
		form.treNavView().expandAll();
	}

	private void addSecondGroup(TreeNode rootNode, AppNavSecondGroupVo sg, AppNavigationVo nav)
	{
		TreeNode secNode = rootNode.getNodes().add(sg, sg.getGroupName());
		secNode.setExpandedImage(form.getImages().Core.CareSpell);
		secNode.setCollapsedImage(form.getImages().Core.CareSpell);
		secNode.setSelectedImage(form.getImages().Core.CareSpell);
			
		for (int k = 0; k < sg.getForms().size(); k++)
		{
			addNavForm(secNode, sg.getForms().get(k), nav);
		}
	}

	private void addNavForm(TreeNode parentNode, AppNavFormVo af, AppNavigationVo nav)
	{
		TreeNode formNode = parentNode.getNodes().add(af, af.getNodeText());
		if (af.isReadOnly())
		{
			formNode.setExpandedImage(form.getImages().Core.ViewDisabled);
			formNode.setCollapsedImage(form.getImages().Core.ViewDisabled);
			formNode.setSelectedImage(form.getImages().Core.ViewDisabled);	
		}
		else
		{
			formNode.setExpandedImage(form.getImages().Core.View);
			formNode.setCollapsedImage(form.getImages().Core.View);
			formNode.setSelectedImage(form.getImages().Core.View);				
		}
		if (af.getForm().equals(nav.getStartForm()))
		{
			if (af.isReadOnly())
			{
				formNode.setExpandedImage(form.getImages().Core.HomeDisabled);
				formNode.setCollapsedImage(form.getImages().Core.HomeDisabled);
				formNode.setSelectedImage(form.getImages().Core.HomeDisabled);	
			}
			else
			{
				formNode.setExpandedImage(form.getImages().Core.Home);
				formNode.setCollapsedImage(form.getImages().Core.Home);
				formNode.setSelectedImage(form.getImages().Core.Home);	
			}
		}
		else if (af.getForm().equals(nav.getPatientSearchForm()))
		{
			if (af.isReadOnly())
			{
				formNode.setExpandedImage(form.getImages().Core.FindDisabled16);
				formNode.setCollapsedImage(form.getImages().Core.FindDisabled16);
				formNode.setSelectedImage(form.getImages().Core.FindDisabled16);				
			}
			else
			{
				formNode.setExpandedImage(form.getImages().Core.FindEnabled16);
				formNode.setCollapsedImage(form.getImages().Core.FindEnabled16);
				formNode.setSelectedImage(form.getImages().Core.FindEnabled16);				
			}
		}
	}


	private void populateAppRights(AppRightVoCollection rights)
	{
		form.lyrRights().tabRightsGranted().grdRights().getRows().clear();
		if (rights == null)
			return;
		rights.sort(new AppRightComparator());
		GenForm.lyrRightsLayer.tabRightsGrantedContainer.grdRightsRow row;
		for (int i = 0; i < rights.size(); i++)
		{
			row = form.lyrRights().tabRightsGranted().grdRights().getRows().newRow();
			row.setAppRight(rights.get(i).getName());
			row.setValue(rights.get(i));
			row.setTooltip(rights.get(i).getComment());
			removeItemFromRightsCombo(rights.get(i));
		}	
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Remove:
				addItemToRightsCombo(form.lyrRights().tabRightsGranted().grdRights().getSelectedRow().getValue());
				form.lyrRights().tabRightsGranted().grdRights().removeSelectedRow();
				form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
				break;
			case GenForm.ContextMenus.AdminNamespace.RoleMenuAction.Add:
				addMenuActionsDenied();
				break;
			case GenForm.ContextMenus.AdminNamespace.RoleMenuAction.Remove:
				removeMenuActionsDenied();
				break;
			case GenForm.ContextMenus.AdminNamespace.RoleMenuAction.RemoveAll:
				removeAllMenuActionsDenied();
				break;
			default:
				break;
		}
	}

	private void addItemToRightsCombo(AppRightVo value)
	{
		form.lyrRights().tabRightsGranted().cmbRights().newRow(value, value.getName());
	}
	
	protected void onGrdRightsSelectionChanged() throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))			
			form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
	}

	protected void onCmbRightsValueChanged() throws PresentationLogicException
	{
		if (form.lyrRights().tabRightsGranted().cmbRights().getValue() != null)
		{
			form.lyrRights().tabRightsGranted().cmbRights().setTooltip(form.lyrRights().tabRightsGranted().cmbRights().getValue().getComment());
		}
		else
		{
			form.lyrRights().tabRightsGranted().cmbRights().setTooltip(null);			
		}
	}

	protected void onBtnAddClick() throws PresentationLogicException
	{
		AppRightVo val = form.lyrRights().tabRightsGranted().cmbRights().getValue();
		if (val == null)
			return;
		if (form.lyrRights().tabRightsGranted().grdRights().getRowByValue(val) != null)
			return;
		
		GenForm.lyrRightsLayer.tabRightsGrantedContainer.grdRightsRow row =  form.lyrRights().tabRightsGranted().grdRights().getRows().newRow();
		row.setValue(val);
		row.setAppRight(val.getName());
		row.setTooltip(val.getComment());		
		
		removeItemFromRightsCombo(val);
		form.lyrRights().tabRightsGranted().grdRights().getValues().sort(new AppRightComparator());
	}

	private void removeItemFromRightsCombo(AppRightVo val)
	{
		for(int i=0;i<form.lyrRights().tabRightsGranted().cmbRights().getValues().size();i++)
		{
			if(((AppRightVo)form.lyrRights().tabRightsGranted().cmbRights().getValues().get(i)).getName().equals(val.getName()))
				form.lyrRights().tabRightsGranted().cmbRights().removeRow(((AppRightVo)form.lyrRights().tabRightsGranted().cmbRights().getValues().get(i)));
		}
	}
	protected void onCmbNavsValueChanged() throws PresentationLogicException
	{
		populateNavigation(domain.getNavigation(form.cmbNavs().getValue()));
	}

	private class NavComparator implements Comparator
	{
		public int compare(Object obj1, Object obj2)
		{
			int int1 = 0;
			int int2 = 0;
			if (obj1 instanceof AppNavSecondGroupVo)
				int1 = ((AppNavSecondGroupVo)obj1).getPositionIndex();
			else if (obj1 instanceof AppNavFormVo)
				int1 = ((AppNavFormVo)obj1).getPositionIndex();
			if (obj2 instanceof AppNavSecondGroupVo)
				int2 = ((AppNavSecondGroupVo)obj2).getPositionIndex();
			else if (obj2 instanceof AppNavFormVo)
				int2 = ((AppNavFormVo)obj2).getPositionIndex();
			
			if (int1 < int2)
				return -1;
			else if (int1 == int2)
				return 0;
			else
				return 1;
		}
	}
	private void addMenuActionsDenied()
	{	
		engine.open(form.getForms().Admin.MenuActionsSelection);
	}
	private void removeMenuActionsDenied()
	{		
		TreeNode selectedNode = form.lyrRights().tabActionsDenied().treActions().getSelectedNode();
		if(selectedNode != null)
		{
			if(selectedNode.getParent() == null)
			{
				form.lyrRights().tabActionsDenied().treActions().getNodes().remove(selectedNode);
			}
			else
			{
				selectedNode.getParent().getNodes().remove(selectedNode);
			}
		}
		
		updateContextMenuState(); //WDEV-15632
	}	
	private void removeAllMenuActionsDenied()
	{
		form.lyrRights().tabActionsDenied().treActions().clear();
		updateContextMenuState(); //WDEV-15632
	}
	private void processMenuActionsSelection()
	{
		AppFormMenuActionsVoCollection actions = form.getGlobalContext().Admin.getSelectedMenuActions();
		for(int x = 0; x < actions.size(); x++)
		{
			processMenuActionsSelection(actions.get(x));
		}
	}
	private void processMenuActionsSelection(AppFormMenuActionsVo formActions) 
	{
		int formID = formActions.getID_AppForm();
		for(int x = 0; x < formActions.getMenuActions().size(); x++)
		{
			addMenuAction(getAppForm(formID), formActions.getMenuActions().get(x));
		}
	}
	private TreeNode findOrCreateMenuActionFormNode(AppFormVo appForm)
	{
		TreeNode formNode = null;
		
		for(int x = 0; x < form.lyrRights().tabActionsDenied().treActions().getNodes().size(); x++)
		{
			if(appForm.equals(form.lyrRights().tabActionsDenied().treActions().getNodes().get(x).getValue()))
			{
				formNode = form.lyrRights().tabActionsDenied().treActions().getNodes().get(x);
				break;
			}
		}
		
		if(formNode == null)
		{
			String formName = appForm.getName();
			if(appForm.isAlias())
				formName += " (" + appForm.getAliasName() + ")";
			if(appForm.isDialog())
				formName += " - dialog";
			
			formNode = form.lyrRights().tabActionsDenied().treActions().getNodes().add(appForm, formName);
			formNode.setCollapsedImage(form.getImages().Core.Form);
			formNode.setExpandedImage(form.getImages().Core.Form);
		}
		
		return formNode;
	}
	private void addMenuAction(AppFormVo appForm, MenuActionVo vo) 
	{
		TreeNode treeNode = findOrCreateMenuActionFormNode(appForm);
		
		boolean exists = false;
		
		for(int x = 0; x < treeNode.getNodes().size(); x++)
		{
			if(vo.equals(treeNode.getNodes().get(x).getValue()))
			{
				exists = true;
				break;
			}
		}
		
		if(!exists)
		{
			TreeNode actionNode = treeNode.getNodes().add(vo, vo.getMenuActionDescription());
			actionNode.setCollapsedImage(form.getImages().Core.AnswerBox_NotAvailable);
			actionNode.setExpandedImage(form.getImages().Core.AnswerBox_NotAvailable);
		}
	}
	private AppFormVo getAppForm(int formID) 
	{		
		for(int x = 0; x < form.lyrRights().tabActionsDenied().treActions().getNodes().size(); x++)
		{
			if(form.lyrRights().tabActionsDenied().treActions().getNodes().get(x).getValue() instanceof AppFormVo)
			{
				AppFormVo formValue = (AppFormVo)form.lyrRights().tabActionsDenied().treActions().getNodes().get(x).getValue();
				if(formValue.getFormId() == formID)
					return formValue;
			}
		}
		
		return domain.getForm(new AppFormRefVo(formID, 0));
	}
	private FormMenuActionsDeniedVoCollection getActionsDenied()
	{
		FormMenuActionsDeniedVoCollection result = new FormMenuActionsDeniedVoCollection();
		
		for(int x = 0; x < form.lyrRights().tabActionsDenied().treActions().getNodes().size(); x++)
		{
			TreeNode formNode = form.lyrRights().tabActionsDenied().treActions().getNodes().get(x);			
			AppFormVo formValue = (AppFormVo)formNode.getValue();
			MenuActionVoCollection actions = new MenuActionVoCollection();
			
			for(int y = 0; y < formNode.getNodes().size(); y++)
			{
				TreeNode itemNode = formNode.getNodes().get(y);
				if(itemNode.getValue() != null)
				{
					actions.add((MenuActionVo)itemNode.getValue());
				}
			}
			
			if(actions.size() > 0)
			{
				FormMenuActionsDeniedVo item = new FormMenuActionsDeniedVo();
				item.setForm(formValue);
				item.setMenuActions(actions);
				
				result.add(item);
			}
		}
		
		return result;
	}
	private void populateMenuActions(FormMenuActionsDeniedVoCollection formMenuActionsDenied) 
	{
		form.lyrRights().tabActionsDenied().treActions().clear();
		
		if(formMenuActionsDenied != null)	
		{
			for (FormMenuActionsDeniedVo item : formMenuActionsDenied) 
			{
				addMenuActions(item);
			}
		}
	}
	private void addMenuActions(FormMenuActionsDeniedVo item) 
	{
		for(int x = 0; x < item.getMenuActions().size(); x++)
		{
			addMenuAction(getAppForm(item.getForm().getID_AppForm()), item.getMenuActions().get(x));
		}
	}	
}
