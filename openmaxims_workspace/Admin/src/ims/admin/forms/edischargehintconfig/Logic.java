//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.edischargehintconfig;

import ims.admin.forms.edischargehintconfig.GenForm.grdDetailsRow;
import ims.clinicaladmin.vo.lookups.EDischargeHINT;
import ims.clinicaladmin.vo.lookups.LookupHelper;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.FieldHelpVo;
import ims.core.vo.FieldHelpVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		form.setMode(FormMode.VIEW);
		open();
	}
	
	private void open()
	{
		FieldHelpVoCollection voColl = domain.listHINTs();
		for(int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			grdDetailsRow row = findHINTRow(voColl.get(i));
			if (row != null)
			{
				row.setColHint(voColl.get(i).getHelpText());
				row.setValue(voColl.get(i));
			}
		}
		updateContextMenu();
		
		form.btnEdit().setEnabled(form.grdDetails().getSelectedRow() == null ? false : true);
		form.btnEdit().setVisible(true);
	}
	
	private grdDetailsRow findHINTRow(FieldHelpVo voHelp) 
	{
		for(int i = 0 ; i < form.grdDetails().getRows().size() ; i++)
		{
			if (voHelp.getField().getID() == form.grdDetails().getRows().get(i).getColLookupValue().getID())
				return form.grdDetails().getRows().get(i);
		}
		return null;
	}

	private void initialize() 
	{
		loadHINTLookup();
	}

	private void loadHINTLookup() 
	{
		form.grdDetails().getRows().clear();

		TreeNode[] coll = LookupHelper.getEDischargeHINT(domain.getLookupService()).getRootNodes();
					
		for(int i = 0 ; coll != null && i < coll.length ; i++)
		{
			EDischargeHINT item = (EDischargeHINT)coll[i];
			if(item.isActive())
			{
				grdDetailsRow row = form.grdDetails().getRows().newRow();
				row.setColLookup(item.getText());
				row.setColLookupValue(item);
				row.setColHint("");
			}
		}
	}

	@Override
	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenu();
		form.btnEdit().setEnabled(true);
		form.btnEdit().setVisible(true);
		
		form.txtHINT().setValue(null);
		if (form.grdDetails().getSelectedRow().getValue() != null)
			form.txtHINT().setValue(form.grdDetails().getSelectedRow().getValue().getHelpText());
	}
	
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editHINT();
	}
	
	private void updateContextMenu() 
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdDetails().getSelectedRow() != null);
	}
	
	private void editHINT() 
	{
		if (form.grdDetails().getSelectedRow().getValue() != null)
			form.getLocalContext().setSelectedRecord(domain.getHINT(form.grdDetails().getSelectedRow().getValue()));
		else
			form.getLocalContext().setSelectedRecord(null);

		if (form.getLocalContext().getSelectedRecordIsNotNull())
			form.txtHINT().setValue(form.getLocalContext().getSelectedRecord().getHelpText());

		form.setMode(FormMode.EDIT);
		
		updateContextMenu();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		FieldHelpVo voHelp = null;
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			voHelp = form.getLocalContext().getSelectedRecord();
		else
			voHelp = new FieldHelpVo();
		
		voHelp.setField(form.grdDetails().getSelectedRow().getColLookupValue());
		voHelp.setHelpText(form.txtHINT().getValue());
		
		String[] str = voHelp.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}

		try 
		{
			voHelp = domain.saveHINT(voHelp);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			form.setMode(FormMode.VIEW);			
			open();
			return;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);			
			open();
			return;
		} 

		form.setMode(FormMode.VIEW);			
		open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
		//wdev-14698
		if (form.grdDetails().getSelectedRow() != null)
		{
			
			form.txtHINT().setValue(form.grdDetails().getSelectedRow().getValue() != null ?form.grdDetails().getSelectedRow().getValue().getHelpText():null);
			
				
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Update:
				editHINT();
			break;
		
		}		

	}
}
