//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.hl7admin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrHL7Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabInterfacesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdStatsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdStatsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolMessTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolMessTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolMessTypeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolMessType(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolMessType()
				{
					return (String)super.row.get(0);
				}
				public void setcolMessType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolMessTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolTotalReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolTotalReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolTotalOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolTotal(String value)
				{
					super.row.setTooltip(1, value);
				}
				public Integer getcolTotal()
				{
					return (Integer)super.row.get(1);
				}
				public void setcolTotal(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellcolTotalTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSuccessfulReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSuccessfulReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSuccessfulOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolSuccessful(String value)
				{
					super.row.setTooltip(2, value);
				}
				public Integer getcolSuccessful()
				{
					return (Integer)super.row.get(2);
				}
				public void setcolSuccessful(Integer value)
				{
					super.row.set(2, value);
				}
				public void setCellcolSuccessfulTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolFailedReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolFailedReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolFailedOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolFailed(String value)
				{
					super.row.setTooltip(3, value);
				}
				public Integer getcolFailed()
				{
					return (Integer)super.row.get(3);
				}
				public void setcolFailed(Integer value)
				{
					super.row.set(3, value);
				}
				public void setCellcolFailedTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setlastSuccessfulTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean islastSuccessfulTimeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showlastSuccessfulTimeOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForlastSuccessfulTime(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getlastSuccessfulTime()
				{
					return (String)super.row.get(4);
				}
				public void setlastSuccessfulTime(String value)
				{
					super.row.set(4, value);
				}
				public void setCelllastSuccessfulTimeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setlastSuccessMessageReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean islastSuccessMessageReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showlastSuccessMessageOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForlastSuccessMessage(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getlastSuccessMessage()
				{
					return (String)super.row.get(5);
				}
				public void setlastSuccessMessage(String value)
				{
					super.row.set(5, value);
				}
				public void setCelllastSuccessMessageTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setlastFailedTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean islastFailedTimeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showlastFailedTimeOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForlastFailedTime(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getlastFailedTime()
				{
					return (String)super.row.get(6);
				}
				public void setlastFailedTime(String value)
				{
					super.row.set(6, value);
				}
				public void setCelllastFailedTimeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setlastFailedMessageReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean islastFailedMessageReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showlastFailedMessageOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForlastFailedMessage(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getlastFailedMessage()
				{
					return (String)super.row.get(7);
				}
				public void setlastFailedMessage(String value)
				{
					super.row.set(7, value);
				}
				public void setCelllastFailedMessageTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.admin.vo.HL7MessageInfoVo getValue()
				{
					return (ims.admin.vo.HL7MessageInfoVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.HL7MessageInfoVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdStatsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdStatsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdStatsRow get(int index)
				{
					return new grdStatsRow(super.collection.get(index));
				}
				public grdStatsRow newRow()
				{
					return new grdStatsRow(super.collection.newRow());
				}
				public grdStatsRow newRow(boolean autoSelect)
				{
					return new grdStatsRow(super.collection.newRow(autoSelect));
				}
				public grdStatsRow newRowAt(int index)
				{
					return new grdStatsRow(super.collection.newRowAt(index));
				}
				public grdStatsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdStatsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdStatsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setcolTotalCaption(String value)
				{
					this.grid.setColumnCaption(1, value);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public void setcolSuccessfulCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public void setcolFailedCaption(String value)
				{
					this.grid.setColumnCaption(3, value);
				}
				public ims.admin.vo.HL7MessageInfoVoCollection getValues()
				{
					ims.admin.vo.HL7MessageInfoVoCollection listOfValues = new ims.admin.vo.HL7MessageInfoVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.HL7MessageInfoVo getValue()
				{
					return (ims.admin.vo.HL7MessageInfoVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.HL7MessageInfoVo value)
				{
					super.grid.setValue(value);
				}
				public grdStatsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdStatsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdStatsRowCollection getRows()
				{
					return new grdStatsRowCollection(super.grid.getRows());
				}
				public grdStatsRow getRowByValue(ims.admin.vo.HL7MessageInfoVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdStatsRow(row);
				}
				public void setcolMessTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolMessTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolTotalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolTotalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSuccessfulHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSuccessfulHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolFailedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolFailedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setlastSuccessfulTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getlastSuccessfulTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setlastSuccessMessageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getlastSuccessMessageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setlastFailedTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getlastFailedTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setlastFailedMessageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getlastFailedMessageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
			}
		
			public static class grpInterfaceRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Outbound", startTabIndex.intValue() + 3);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Inbound", startTabIndex.intValue() + 2);
				}
				public void setText(grpInterfaceEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpInterfaceEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpInterfaceEnumeration.None;
						case 0: return grpInterfaceEnumeration.rdoOutbound;
						case 1: return grpInterfaceEnumeration.rdoInbound;
					}
					return null;
				}
				public void setValue(grpInterfaceEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpInterfaceEnumeration.None.id);
				}
				public boolean isEnabled(grpInterfaceEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpInterfaceEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpInterfaceEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpInterfaceEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpInterfaceEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpInterfaceEnumeration None = new grpInterfaceEnumeration(-1);
				public static grpInterfaceEnumeration rdoOutbound = new grpInterfaceEnumeration(0);
				public static grpInterfaceEnumeration rdoInbound = new grpInterfaceEnumeration(1);
				private grpInterfaceEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpInterfaceEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 392, 80, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 312, 80, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IP Address :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 104, 80, 21, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<>", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 53, 80, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time Started :", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 24, 88, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recover", Boolean.FALSE, "Use this to recover from a crash which left the Outbound Registration record behind", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 208, 24, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Refresh", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 208, 76, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start", Boolean.TRUE, "Start Interface", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 208, 112, 200, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Start Selected Interface on Startup", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 792, 432, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdStatsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuHl7AdminStatsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdStatsTemp);
				grdStatsGrid grdStats = (grdStatsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdStatsGrid.class, m_grdStatsTemp);
				grdStats.addStringColumn("Message Type", 0, 0, 100, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdStats.addIntColumn("Total", 1, 1, 70, false, true, null, false, 0, false);
				grdStats.addIntColumn("Successful", 1, 1, 70, false, true, null, false, 0, false);
				grdStats.addIntColumn("Failed", 1, 1, 70, false, true, null, false, 0, false);
				grdStats.addStringColumn("Last Successful Time", 0, 0, 120, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdStats.addStringColumn("Last Successful Message", 0, 0, 150, true, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdStats.addStringColumn("Last Failed Time", 0, 0, 120, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdStats.addStringColumn("Last Failed Message", 0, 0, -1, true, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdStats);
		
				// RadioButton Controls
				RadioButton tmpgrpInterface = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpInterface);
				grpInterfaceRadioButton grpInterface = (grpInterfaceRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpInterfaceRadioButton.class, tmpgrpInterface);
				grpInterface.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpInterface);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 584, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public Label txtIpaddress()
			{
				return (Label)super.getControl(0);
			}
			public Label lblIpaddress()
			{
				return (Label)super.getControl(1);
			}
			public Label txtStarted()
			{
				return (Label)super.getControl(2);
			}
			public Label txtStatus()
			{
				return (Label)super.getControl(3);
			}
			public Button btnRecover()
			{
				return (Button)super.getControl(6);
			}
			public Button btnRefresh()
			{
				return (Button)super.getControl(7);
			}
			public Button btnStartStop()
			{
				return (Button)super.getControl(8);
			}
			public CheckBox chkStart()
			{
				return (CheckBox)super.getControl(9);
			}
			public grdStatsGrid grdStats()
			{
				return (grdStatsGrid)super.getGrid(0);
			}
			public grpInterfaceRadioButton grpInterface()
			{
				return (grpInterfaceRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabQueryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPatIdTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatIdType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatIdType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatIdType getValue()
				{
					return (ims.core.vo.lookups.PatIdType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatIdType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdMsgsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMsgsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolPatientReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolPatientReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolPatientOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolPatient(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolPatient()
				{
					return (String)super.row.get(0);
				}
				public void setcolPatient(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolPatientTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDateTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDateTimeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolDateTime(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolDateTime()
				{
					return (String)super.row.get(1);
				}
				public void setcolDateTime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDateTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolLastUpdateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolLastUpdateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolLastUpdateOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolLastUpdate(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getcolLastUpdate()
				{
					return (String)super.row.get(2);
				}
				public void setcolLastUpdate(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolLastUpdateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolMessageReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolMessageReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolMessageOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolMessage(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getcolMessage()
				{
					return (String)super.row.get(3);
				}
				public void setcolMessage(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolMessageTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolCategoryReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolCategoryReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolCategoryOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolCategory(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getcolCategory()
				{
					return (String)super.row.get(4);
				}
				public void setcolCategory(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolCategoryTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolProviderReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolProviderReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolProviderOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolProvider(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getcolProvider()
				{
					return (String)super.row.get(5);
				}
				public void setcolProvider(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolProviderTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolFailureReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolFailureReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolFailureOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForcolFailure(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getcolFailure()
				{
					return (String)super.row.get(6);
				}
				public void setcolFailure(String value)
				{
					super.row.set(6, value);
				}
				public void setCellcolFailureTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolPlacerNumReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolPlacerNumReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolPlacerNumOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForcolPlacerNum(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getcolPlacerNum()
				{
					return (String)super.row.get(7);
				}
				public void setcolPlacerNum(String value)
				{
					super.row.set(7, value);
				}
				public void setCellcolPlacerNumTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(8);
				}
				public void setcolStatus(String value)
				{
					super.row.set(8, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.ocs_if.vo.IfOrderMessageVo getValue()
				{
					return (ims.ocs_if.vo.IfOrderMessageVo)super.row.getValue();
				}
				public void setValue(ims.ocs_if.vo.IfOrderMessageVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMsgsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMsgsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMsgsRow get(int index)
				{
					return new grdMsgsRow(super.collection.get(index));
				}
				public grdMsgsRow newRow()
				{
					return new grdMsgsRow(super.collection.newRow());
				}
				public grdMsgsRow newRow(boolean autoSelect)
				{
					return new grdMsgsRow(super.collection.newRow(autoSelect));
				}
				public grdMsgsRow newRowAt(int index)
				{
					return new grdMsgsRow(super.collection.newRowAt(index));
				}
				public grdMsgsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMsgsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMsgsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void setcolPatientCaption(String value)
				{
					this.grid.setColumnCaption(0, value);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocs_if.vo.IfOrderMessageVoCollection getValues()
				{
					ims.ocs_if.vo.IfOrderMessageVoCollection listOfValues = new ims.ocs_if.vo.IfOrderMessageVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocs_if.vo.IfOrderMessageVo getValue()
				{
					return (ims.ocs_if.vo.IfOrderMessageVo)super.grid.getValue();
				}
				public void setValue(ims.ocs_if.vo.IfOrderMessageVo value)
				{
					super.grid.setValue(value);
				}
				public grdMsgsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMsgsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMsgsRowCollection getRows()
				{
					return new grdMsgsRowCollection(super.grid.getRows());
				}
				public grdMsgsRow getRowByValue(ims.ocs_if.vo.IfOrderMessageVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMsgsRow(row);
				}
				public void setcolPatientHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolPatientHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolLastUpdateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolLastUpdateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolMessageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolMessageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolCategoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolCategoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolProviderHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolProviderHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolFailureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolFailureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolPlacerNumHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolPlacerNumHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 448, 56, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Value :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 408, 24, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient ID Type :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 117, 58, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Find Messages From :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 520, 56, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 144, 56, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 144, 24, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 520, 24, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatIdTypeTemp);
				cmbPatIdTypeComboBox cmbPatIdType = (cmbPatIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatIdTypeComboBox.class, m_cmbPatIdTypeTemp);
				super.addComboBox(cmbPatIdType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 792, 448, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdMsgsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuHl7AdminQryMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMsgsTemp);
				grdMsgsGrid grdMsgs = (grdMsgsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMsgsGrid.class, m_grdMsgsTemp);
				grdMsgs.addStringColumn("Patient", 0, 0, 120, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Created", 0, 0, 100, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Last Updated", 0, 0, 100, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("HL7 Message", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Category", 0, 0, 70, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Provider", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Failure Message", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Placer #", 0, 0, 75, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMsgs.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdMsgs);
		
				// Time Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 272, 56, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 272, 24, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 778, 15, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 736, 15, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for messages matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 784, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			}

			public Label lblTotal()
			{
				return (Label)super.getControl(0);
			}
			public TextBox txtPatId()
			{
				return (TextBox)super.getControl(5);
			}
			public DateControl dteTo()
			{
				return (DateControl)super.getControl(6);
			}
			public DateControl dteFrom()
			{
				return (DateControl)super.getControl(7);
			}
			public cmbPatIdTypeComboBox cmbPatIdType()
			{
				return (cmbPatIdTypeComboBox)super.getComboBox(0);
			}
			public grdMsgsGrid grdMsgs()
			{
				return (grdMsgsGrid)super.getGrid(0);
			}
			public TimeControl timTo()
			{
				return (TimeControl)super.getControl(10);
			}
			public TimeControl timFrom()
			{
				return (TimeControl)super.getControl(11);
			}
			public ImageButton imbReset()
			{
				return (ImageButton)super.getControl(12);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(13);
			}
		}
		public static class tabDemographicFeedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPatIdComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatIdType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatIdType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatIdType getValue()
				{
					return (ims.core.vo.lookups.PatIdType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatIdType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbProviderSystemComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.admin.vo.ProviderSystemRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.admin.vo.ProviderSystemRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.admin.vo.ProviderSystemRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.admin.vo.ProviderSystemRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.admin.vo.ProviderSystemRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.admin.vo.ProviderSystemRefVo getValue()
				{
					return (ims.core.admin.vo.ProviderSystemRefVo)super.control.getValue();
				}
				public void setValue(ims.core.admin.vo.ProviderSystemRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMsgTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MsgEventType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MsgEventType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MsgEventType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MsgEventType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MsgEventType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MsgEventType getValue()
				{
					return (ims.core.vo.lookups.MsgEventType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MsgEventType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setPatientReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isPatientReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showPatientOpened()
				{
					super.row.showOpened(0);
				}
				public String getPatient()
				{
					return (String)super.row.get(0);
				}
				public void setPatient(String value)
				{
					super.row.set(0, value);
				}
				public void setCellPatientTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setCreatedReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isCreatedReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showCreatedOpened()
				{
					super.row.showOpened(1);
				}
				public String getCreated()
				{
					return (String)super.row.get(1);
				}
				public void setCreated(String value)
				{
					super.row.set(1, value);
				}
				public void setCellCreatedTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setUpdatedReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isUpdatedReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showUpdatedOpened()
				{
					super.row.showOpened(2);
				}
				public String getUpdated()
				{
					return (String)super.row.get(2);
				}
				public void setUpdated(String value)
				{
					super.row.set(2, value);
				}
				public void setCellUpdatedTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setmsgTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean ismsgTypeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showmsgTypeOpened()
				{
					super.row.showOpened(3);
				}
				public String getmsgType()
				{
					return (String)super.row.get(3);
				}
				public void setmsgType(String value)
				{
					super.row.set(3, value);
				}
				public void setCellmsgTypeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setProviderSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isProviderSystemReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showProviderSystemOpened()
				{
					super.row.showOpened(4);
				}
				public String getProviderSystem()
				{
					return (String)super.row.get(4);
				}
				public void setProviderSystem(String value)
				{
					super.row.set(4, value);
				}
				public void setCellProviderSystemTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setstatusReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isstatusReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showstatusOpened()
				{
					super.row.showOpened(5);
				}
				public String getstatus()
				{
					return (String)super.row.get(5);
				}
				public void setstatus(String value)
				{
					super.row.set(5, value);
				}
				public void setCellstatusTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.admin.vo.DemographicFeedVo getValue()
				{
					return (ims.admin.vo.DemographicFeedVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.DemographicFeedVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdListRow get(int index)
				{
					return new grdListRow(super.collection.get(index));
				}
				public grdListRow newRow()
				{
					return new grdListRow(super.collection.newRow());
				}
				public grdListRow newRow(boolean autoSelect)
				{
					return new grdListRow(super.collection.newRow(autoSelect));
				}
				public grdListRow newRowAt(int index)
				{
					return new grdListRow(super.collection.newRowAt(index));
				}
				public grdListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.admin.vo.DemographicFeedVoCollection getValues()
				{
					ims.admin.vo.DemographicFeedVoCollection listOfValues = new ims.admin.vo.DemographicFeedVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.DemographicFeedVo getValue()
				{
					return (ims.admin.vo.DemographicFeedVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.DemographicFeedVo value)
				{
					super.grid.setValue(value);
				}
				public grdListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdListRowCollection getRows()
				{
					return new grdListRowCollection(super.grid.getRows());
				}
				public grdListRow getRowByValue(ims.admin.vo.DemographicFeedVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdListRow(row);
				}
				public void setPatientHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getPatientHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setCreatedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getCreatedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setUpdatedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getUpdatedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setmsgTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getmsgTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setProviderSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getProviderSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setstatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getstatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 528, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Response:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 368, 83, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HL7 Message:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 224, 48, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID Value :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 224, 16, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient ID Type :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 520, 48, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider System:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 520, 24, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HL7 Msg Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Date:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 752, 24, 64, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 544, 808, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 808, 136, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 344, 48, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 80, 48, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatIdTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatIdTemp);
				cmbPatIdComboBox cmbPatId = (cmbPatIdComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatIdComboBox.class, m_cmbPatIdTemp);
				super.addComboBox(cmbPatId);
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 632, 48, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbProviderSystemTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbProviderSystemTemp);
				cmbProviderSystemComboBox cmbProviderSystem = (cmbProviderSystemComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProviderSystemComboBox.class, m_cmbProviderSystemTemp);
				super.addComboBox(cmbProviderSystem);
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 632, 24, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbMsgTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMsgTypeTemp);
				cmbMsgTypeComboBox cmbMsgType = (cmbMsgTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMsgTypeComboBox.class, m_cmbMsgTypeTemp);
				super.addComboBox(cmbMsgType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 808, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdListTemp);
				grdListGrid grdList = (grdListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListGrid.class, m_grdListTemp);
				grdList.addStringColumn("Patient", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdList.addStringColumn("Creation Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdList.addStringColumn("Last Updated", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdList.addStringColumn("Message Type", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdList.addStringColumn("Provider System", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdList.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdList);
			}

			public Label lblresponse()
			{
				return (Label)super.getControl(0);
			}
			public Button btnOBsearch()
			{
				return (Button)super.getControl(8);
			}
			public TextBox txtResponse()
			{
				return (TextBox)super.getControl(9);
			}
			public TextBox txtMessage()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtOBPatId()
			{
				return (TextBox)super.getControl(11);
			}
			public DateTimeControl dtimEnd()
			{
				return (DateTimeControl)super.getControl(12);
			}
			public DateTimeControl dtimStart()
			{
				return (DateTimeControl)super.getControl(13);
			}
			public cmbPatIdComboBox cmbPatId()
			{
				return (cmbPatIdComboBox)super.getComboBox(0);
			}
			public cmbProviderSystemComboBox cmbProviderSystem()
			{
				return (cmbProviderSystemComboBox)super.getComboBox(1);
			}
			public cmbMsgTypeComboBox cmbMsgType()
			{
				return (cmbMsgTypeComboBox)super.getComboBox(2);
			}
			public grdListGrid grdList()
			{
				return (grdListGrid)super.getGrid(0);
			}
		}
		public static class tabOutboundControlContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSelectQueueTypeRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSelectQueueTypeRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setQueueTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isQueueTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showQueueTypeOpened()
				{
					super.row.showOpened(0);
				}
				public ims.core.vo.lookups.QueueType getQueueType()
				{
					return (ims.core.vo.lookups.QueueType)super.row.get(0);
				}
				public void setQueueType(ims.core.vo.lookups.QueueType value)
				{
					super.row.set(0, value);
				}
				public void setCellQueueTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSelectQueueTypeRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSelectQueueTypeRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSelectQueueTypeRow get(int index)
				{
					return new grdSelectQueueTypeRow(super.collection.get(index));
				}
				public grdSelectQueueTypeRow newRow()
				{
					return new grdSelectQueueTypeRow(super.collection.newRow());
				}
				public grdSelectQueueTypeRow newRow(boolean autoSelect)
				{
					return new grdSelectQueueTypeRow(super.collection.newRow(autoSelect));
				}
				public grdSelectQueueTypeRow newRowAt(int index)
				{
					return new grdSelectQueueTypeRow(super.collection.newRowAt(index));
				}
				public grdSelectQueueTypeRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSelectQueueTypeRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSelectQueueTypeGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdSelectQueueTypeRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSelectQueueTypeRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSelectQueueTypeRowCollection getRows()
				{
					return new grdSelectQueueTypeRowCollection(super.grid.getRows());
				}
				public grdSelectQueueTypeRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSelectQueueTypeRow(row);
				}
				public void setQueueTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getQueueTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdProviderSystemRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProviderSystemRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setProviderSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isProviderSystemReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showProviderSystemOpened()
				{
					super.row.showOpened(0);
				}
				public String getProviderSystem()
				{
					return (String)super.row.get(0);
				}
				public void setProviderSystem(String value)
				{
					super.row.set(0, value);
				}
				public void setCellProviderSystemTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.ocs_if.vo.OutboundTriggersVo getValue()
				{
					return (ims.ocs_if.vo.OutboundTriggersVo)super.row.getValue();
				}
				public void setValue(ims.ocs_if.vo.OutboundTriggersVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProviderSystemRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProviderSystemRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProviderSystemRow get(int index)
				{
					return new grdProviderSystemRow(super.collection.get(index));
				}
				public grdProviderSystemRow newRow()
				{
					return new grdProviderSystemRow(super.collection.newRow());
				}
				public grdProviderSystemRow newRow(boolean autoSelect)
				{
					return new grdProviderSystemRow(super.collection.newRow(autoSelect));
				}
				public grdProviderSystemRow newRowAt(int index)
				{
					return new grdProviderSystemRow(super.collection.newRowAt(index));
				}
				public grdProviderSystemRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProviderSystemRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProviderSystemGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocs_if.vo.OutboundTriggersVoCollection getValues()
				{
					ims.ocs_if.vo.OutboundTriggersVoCollection listOfValues = new ims.ocs_if.vo.OutboundTriggersVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocs_if.vo.OutboundTriggersVo getValue()
				{
					return (ims.ocs_if.vo.OutboundTriggersVo)super.grid.getValue();
				}
				public void setValue(ims.ocs_if.vo.OutboundTriggersVo value)
				{
					super.grid.setValue(value);
				}
				public grdProviderSystemRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProviderSystemRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProviderSystemRowCollection getRows()
				{
					return new grdProviderSystemRowCollection(super.grid.getRows());
				}
				public grdProviderSystemRow getRowByValue(ims.ocs_if.vo.OutboundTriggersVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProviderSystemRow(row);
				}
				public void setProviderSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getProviderSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 728, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 640, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 24, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 360, 24, 432, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSelectQueueTypeTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grdSelectQueueTypeTemp);
				grdSelectQueueTypeGrid grdSelectQueueType = (grdSelectQueueTypeGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectQueueTypeGrid.class, m_grdSelectQueueTypeTemp);
				grdSelectQueueType.addStringColumn("Queue Type", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSelectQueueType.addBoolColumn("Select", 0, 1, -1, false, false, 0, true);
				super.addGrid(grdSelectQueueType);
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 264, 488, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdProviderSystemTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grdProviderSystemTemp);
				grdProviderSystemGrid grdProviderSystem = (grdProviderSystemGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProviderSystemGrid.class, m_grdProviderSystemTemp);
				grdProviderSystem.addStringColumn("Provider System", 0, 0, -1, true, false, 0, 100, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdProviderSystem);
			}

			public Button btnCancel()
			{
				return (Button)super.getControl(0);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(1);
			}
			public Button btnEdit()
			{
				return (Button)super.getControl(2);
			}
			public grdSelectQueueTypeGrid grdSelectQueueType()
			{
				return (grdSelectQueueTypeGrid)super.getGrid(0);
			}
			public grdProviderSystemGrid grdProviderSystem()
			{
				return (grdProviderSystemGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInterfaces = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Interfaces", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabInterfacesContainer m_tabInterfacesContainer = (tabInterfacesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInterfacesContainer.class, m_tabInterfaces, factory);
			super.addContainer(m_tabInterfaces, m_tabInterfacesContainer);
			ims.framework.utils.SizeInfo m_tabInterfacesDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabInterfacesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper53.getWidth(), anchoringHelper53.getHeight());
			m_tabInterfacesContainer.setContext(form, appForm, m_tabInterfaces, loader, form_images_local, contextMenus, startControlID, m_tabInterfacesDesignSize, m_tabInterfacesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabQuery = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Query", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabQueryContainer m_tabQueryContainer = (tabQueryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQueryContainer.class, m_tabQuery, factory);
			super.addContainer(m_tabQuery, m_tabQueryContainer);
			ims.framework.utils.SizeInfo m_tabQueryDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabQueryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper54.getWidth(), anchoringHelper54.getHeight());
			m_tabQueryContainer.setContext(form, appForm, m_tabQuery, loader, form_images_local, contextMenus, startControlID, m_tabQueryDesignSize, m_tabQueryRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDemographicFeed = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outbound Demographic Feed", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDemographicFeedContainer m_tabDemographicFeedContainer = (tabDemographicFeedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDemographicFeedContainer.class, m_tabDemographicFeed, factory);
			super.addContainer(m_tabDemographicFeed, m_tabDemographicFeedContainer);
			ims.framework.utils.SizeInfo m_tabDemographicFeedDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabDemographicFeedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper55.getWidth(), anchoringHelper55.getHeight());
			m_tabDemographicFeedContainer.setContext(form, appForm, m_tabDemographicFeed, loader, form_images_local, contextMenus, startControlID, m_tabDemographicFeedDesignSize, m_tabDemographicFeedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutboundControl = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outbound Triggers", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabOutboundControlContainer m_tabOutboundControlContainer = (tabOutboundControlContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutboundControlContainer.class, m_tabOutboundControl, factory);
			super.addContainer(m_tabOutboundControl, m_tabOutboundControlContainer);
			ims.framework.utils.SizeInfo m_tabOutboundControlDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabOutboundControlRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper56.getWidth(), anchoringHelper56.getHeight());
			m_tabOutboundControlContainer.setContext(form, appForm, m_tabOutboundControl, loader, form_images_local, contextMenus, startControlID, m_tabOutboundControlDesignSize, m_tabOutboundControlRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabInterfaces().setVisible(false);
			tabQuery().setVisible(false);
			tabDemographicFeed().setVisible(false);
			tabOutboundControl().setVisible(false);
		}
		public void settabInterfacesEnabled(boolean value)
		{
			tabInterfaces().setEnabled(value);
		}
		public void settabQueryEnabled(boolean value)
		{
			tabQuery().setEnabled(value);
		}
		public void settabDemographicFeedEnabled(boolean value)
		{
			tabDemographicFeed().setEnabled(value);
		}
		public void settabOutboundControlEnabled(boolean value)
		{
			tabOutboundControl().setEnabled(value);
		}
		public void showtabInterfaces()
		{
			tabQuery().setVisible(false);
			tabDemographicFeed().setVisible(false);
			tabOutboundControl().setVisible(false);
			tabInterfaces().setVisible(true);
		}
		public void showtabQuery()
		{
			tabInterfaces().setVisible(false);
			tabDemographicFeed().setVisible(false);
			tabOutboundControl().setVisible(false);
			tabQuery().setVisible(true);
		}
		public void showtabDemographicFeed()
		{
			tabInterfaces().setVisible(false);
			tabQuery().setVisible(false);
			tabOutboundControl().setVisible(false);
			tabDemographicFeed().setVisible(true);
		}
		public void showtabOutboundControl()
		{
			tabInterfaces().setVisible(false);
			tabQuery().setVisible(false);
			tabDemographicFeed().setVisible(false);
			tabOutboundControl().setVisible(true);
		}

		public tabInterfacesContainer tabInterfaces()
		{
			return (tabInterfacesContainer)super.layers.get(0);
		}
		public tabQueryContainer tabQuery()
		{
			return (tabQueryContainer)super.layers.get(1);
		}
		public tabDemographicFeedContainer tabDemographicFeed()
		{
			return (tabDemographicFeedContainer)super.layers.get(2);
		}
		public tabOutboundControlContainer tabOutboundControl()
		{
			return (tabOutboundControlContainer)super.layers.get(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuHl7AdminStatsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem = factory.createMenuItem(startControlID.intValue() + 1, "View Last Successful Message", true, false, new Integer(102158), true, false);
		contextMenus.contextMenuHl7AdminStatsMenu.add(contextMenus.contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem);
		contextMenus.contextMenuHl7AdminStatsMenuVIEW_FAILEDItem = factory.createMenuItem(startControlID.intValue() + 2, "View Last Failed Message", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuHl7AdminStatsMenu.add(contextMenus.contextMenuHl7AdminStatsMenuVIEW_FAILEDItem);
		form.registerMenu(contextMenus.contextMenuHl7AdminStatsMenu);
		contextMenus.contextMenuHl7AdminQryMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuHl7AdminQryMenuVIEW_MESSAGEItem = factory.createMenuItem(startControlID.intValue() + 3, "View Message", true, false, new Integer(102158), true, false);
		contextMenus.contextMenuHl7AdminQryMenu.add(contextMenus.contextMenuHl7AdminQryMenuVIEW_MESSAGEItem);
		contextMenus.contextMenuHl7AdminQryMenuRESUBMITMSGItem = factory.createMenuItem(startControlID.intValue() + 4, "Re-submit Message", true, false, null, true, false);
		contextMenus.contextMenuHl7AdminQryMenu.add(contextMenus.contextMenuHl7AdminQryMenuRESUBMITMSGItem);
		contextMenus.contextMenuHl7AdminQryMenuMARKASSENTItem = factory.createMenuItem(startControlID.intValue() + 5, "Mark As Sent", true, false, null, true, false);
		contextMenus.contextMenuHl7AdminQryMenu.add(contextMenus.contextMenuHl7AdminQryMenuMARKASSENTItem);
		form.registerMenu(contextMenus.contextMenuHl7AdminQryMenu);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 6, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 9, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 11, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 12, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 13, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 14, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrHL7Layer m_lyrHL7Layer = (lyrHL7Layer)LayerFlyweightFactory.getInstance().createLayer(lyrHL7Layer.class, this, factory);
		super.addLayer(m_lyrHL7Layer);
		m_lyrHL7Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrHL7Layer lyrHL7()
	{
		return (lyrHL7Layer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Admin = new AdminForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName YesNoDialog;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				HL7MessageViewDialog = new LocalFormName(103157);
			}
			public final FormName HL7MessageViewDialog;
		}

		public CoreForms Core;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatId = new ims.framework.ContextVariable("PatId", prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier + "");
			cxl_IsStart = new ims.framework.ContextVariable("IsStart", prefix + "_lv_Admin.Hl7Admin.__internal_x_context__IsStart_" + componentIdentifier + "");
			cxl_selectedOutBoundMessage = new ims.framework.ContextVariable("selectedOutBoundMessage", prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier + "");
		}
		
		public boolean getPatIdIsNotNull()
		{
			return !cxl_PatId.getValueIsNull(context);
		}
		public ims.core.vo.PatientId getPatId()
		{
			return (ims.core.vo.PatientId)cxl_PatId.getValue(context);
		}
		public void setPatId(ims.core.vo.PatientId value)
		{
			cxl_PatId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatId = null;
		public boolean getIsStartIsNotNull()
		{
			return !cxl_IsStart.getValueIsNull(context);
		}
		public Boolean getIsStart()
		{
			return (Boolean)cxl_IsStart.getValue(context);
		}
		public void setIsStart(Boolean value)
		{
			cxl_IsStart.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsStart = null;
		public boolean getselectedOutBoundMessageIsNotNull()
		{
			return !cxl_selectedOutBoundMessage.getValueIsNull(context);
		}
		public ims.admin.vo.DemographicFeedVo getselectedOutBoundMessage()
		{
			return (ims.admin.vo.DemographicFeedVo)cxl_selectedOutBoundMessage.getValue(context);
		}
		public void setselectedOutBoundMessage(ims.admin.vo.DemographicFeedVo value)
		{
			cxl_selectedOutBoundMessage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedOutBoundMessage = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class Hl7AdminStatsMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int VIEW_SUCCESSFUL = 1;
			public static final int VIEW_FAILED = 2;
		}
		public void disableAllHl7AdminStatsMenuMenuItems()
		{
			this.contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem.setEnabled(false);
			this.contextMenuHl7AdminStatsMenuVIEW_FAILEDItem.setEnabled(false);
		}
		public void hideAllHl7AdminStatsMenuMenuItems()
		{
			this.contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem.setVisible(false);
			this.contextMenuHl7AdminStatsMenuVIEW_FAILEDItem.setVisible(false);
		}
		private Menu contextMenuHl7AdminStatsMenu;
		public MenuItem getHl7AdminStatsMenuVIEW_SUCCESSFULItem()
		{
			return this.contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem;
		}
		private MenuItem contextMenuHl7AdminStatsMenuVIEW_SUCCESSFULItem;
		public MenuItem getHl7AdminStatsMenuVIEW_FAILEDItem()
		{
			return this.contextMenuHl7AdminStatsMenuVIEW_FAILEDItem;
		}
		private MenuItem contextMenuHl7AdminStatsMenuVIEW_FAILEDItem;
		public final class Hl7AdminQryMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int VIEW_MESSAGE = 3;
			public static final int RESUBMITMSG = 4;
			public static final int MARKASSENT = 5;
		}
		public void disableAllHl7AdminQryMenuMenuItems()
		{
			this.contextMenuHl7AdminQryMenuVIEW_MESSAGEItem.setEnabled(false);
			this.contextMenuHl7AdminQryMenuRESUBMITMSGItem.setEnabled(false);
			this.contextMenuHl7AdminQryMenuMARKASSENTItem.setEnabled(false);
		}
		public void hideAllHl7AdminQryMenuMenuItems()
		{
			this.contextMenuHl7AdminQryMenuVIEW_MESSAGEItem.setVisible(false);
			this.contextMenuHl7AdminQryMenuRESUBMITMSGItem.setVisible(false);
			this.contextMenuHl7AdminQryMenuMARKASSENTItem.setVisible(false);
		}
		private Menu contextMenuHl7AdminQryMenu;
		public MenuItem getHl7AdminQryMenuVIEW_MESSAGEItem()
		{
			return this.contextMenuHl7AdminQryMenuVIEW_MESSAGEItem;
		}
		private MenuItem contextMenuHl7AdminQryMenuVIEW_MESSAGEItem;
		public MenuItem getHl7AdminQryMenuRESUBMITMSGItem()
		{
			return this.contextMenuHl7AdminQryMenuRESUBMITMSGItem;
		}
		private MenuItem contextMenuHl7AdminQryMenuRESUBMITMSGItem;
		public MenuItem getHl7AdminQryMenuMARKASSENTItem()
		{
			return this.contextMenuHl7AdminQryMenuMARKASSENTItem;
		}
		private MenuItem contextMenuHl7AdminQryMenuMARKASSENTItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 6;
			public static final int Update = 7;
			public static final int Remove = 8;
			public static final int View = 9;
			public static final int MoveUp = 10;
			public static final int MoveDown = 11;
			public static final int Replace = 12;
			public static final int Confirm = 13;
			public static final int EDIT_VIEW_ICP_ACTIONS = 14;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[86];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier, "BO-1001100004-ID", "ID_PatientId");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier, "BO-1001100004-TYPE", "Type");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier, "BO-1001100004-VALUE", "IdValue");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier, "BO-1001100004-VERIFIED", "Verified");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__PatId_" + componentIdentifier, "BO-1001100004-MERGED", "Merged");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-ID", "ID_DemographicsMessageQueue");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-WASPROCESSED", "WasProcessed");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-WASDISCARDED", "WasDiscarded");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-MSGTEXT", "MsgText");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-ACKTEXT", "AckText");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-FAILUREMSG", "FailureMsg");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-MESSAGESTATUS", "MessageStatus");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-MSGTYPE", "MsgType");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-QUEUETYPE", "QueueType");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.Hl7Admin.__internal_x_context__selectedOutBoundMessage_" + componentIdentifier, "BO-1103100000-PRIORPATIENT", "PriorPatient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
