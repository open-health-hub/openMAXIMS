//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.71 build 3637.26239)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.admin.forms.usernotificationsettings;

import ims.admin.vo.MobileDeviceVoCollection;
import ims.admin.vo.UserNotificationDetailsVo;
import ims.framework.enumerations.DialogResult;
 
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Admin.getUserNotificationSettings() == null)
		{
			form.getGlobalContext().Admin.setUserNotificationSettings(new UserNotificationDetailsVo());
		}
		
		populateControlsData();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(populateDataFromControls())
		{
			engine.close(DialogResult.OK);
		}
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	private void populateControlsData() 
	{
		form.txtEmailAddress().setValue(form.getGlobalContext().Admin.getUserNotificationSettings().getEmail());
		form.txtMobilePhone().setValue(form.getGlobalContext().Admin.getUserNotificationSettings().getMobilePhone());
		
		MobileDeviceVoCollection mobileDevices = form.getGlobalContext().Admin.getUserNotificationSettings().getMobileDevices();
		if(mobileDevices != null)
		{
			for(int x = 0; x < mobileDevices.size(); x++)
			{
				GenForm.grdMobileDevicesRow row = form.grdMobileDevices().getRows().newRow();
				row.setcolName(mobileDevices.get(x).getName());
				row.setcolModel(mobileDevices.get(x).getModel());
				row.setcolActive(mobileDevices.get(x).getActive());
			}
		}
	}
	private boolean populateDataFromControls() 
	{
		form.getGlobalContext().Admin.getUserNotificationSettings().setEmail(form.txtEmailAddress().getValue());
		form.getGlobalContext().Admin.getUserNotificationSettings().setMobilePhone(form.txtMobilePhone().getValue());
		
		return true;
	}	
}
