//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2421.18554)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.mossearch;

import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.StaffType;
import ims.framework.exceptions.PresentationLogicException;
import ims.admin.vo.enums.MOSSearchLastAction;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setAction(MOSSearchLastAction.CLEAR_CLICKED);
		clear();
	}
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setAction(MOSSearchLastAction.SEARCH_CLICKED);
		search();
	}
		
	
	private void initialize()
	{
		form.chkActiveOnly().setValue(true);
		form.imbSearch().setAsDefaultButton();
	}

	public void clear()
	{
		form.txtSurName().setValue(null);
		form.cmbStaffType().setValue(null);
		form.cmbHcpDiscipline().setValue(null);
		form.getLocalContext().setHCPLiteList(null);
		form.getLocalContext().setMemberOfStaffList(null);		
		form.fireCustomControlValueChanged();		
	}
	
	
	private void search()
	{
		
		/*
		 * strSearch.contains not supported in jre1.4
		String strSearch = form.txtSurName().getValue();		
		if (strSearch != null)
		{
			if (strSearch.length() < 1 )
			{
				engine.showMessage("Must specify at least 1 search criteria character");
				return;
			}
			else if (strSearch.length() == 1 )
			{
				if (strSearch.contains("%"))
				{
					engine.showMessage("Must specify at least 1 non wildcard search criteria character");
					return;				
				}
	
			}
		}
		*/
		
		if (form.getLocalContext().getboolHCP().equals(Boolean.TRUE))
			form.getLocalContext().setHCPLiteList(domain.listHcpsLite(populateFilterFromScreen()));
		else
			form.getLocalContext().setMemberOfStaffList(domain.listMembersOfStaff(populateFilterFromScreen()));
		
		form.fireCustomControlValueChanged();
	}

	private MemberOfStaffShortVo populateFilterFromScreen()
	{
		MemberOfStaffShortVo voMosFilter = new MemberOfStaffShortVo();
		PersonName name = new PersonName();
		name.setSurname(form.txtSurName().getValue());
		voMosFilter.setName(name);
		voMosFilter.setStaffType(form.cmbStaffType().getValue());
		if (form.cmbHcpDiscipline().getValue() != null)
		{
			Hcp voHcp = new Hcp();
			voHcp.setHcpType(form.cmbHcpDiscipline().getValue());
			voMosFilter.setHcp(voHcp);
		}
		voMosFilter.setIsActive(new Boolean(form.chkActiveOnly().getValue()));
		
		return voMosFilter;
	}

	public void initializeComponent(Boolean boolHCP)
	{
		populateStaffTypeCombo(boolHCP);
		form.chkActiveOnly().setValue(true);
	}
		
	private void populateHCPDisciplineCombo()
	{
		form.cmbHcpDiscipline().clear();		
		if ((form.cmbStaffType().getValue() != null) && form.cmbStaffType().getValue().equals(StaffType.HCP))
		{
			ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
			for(int x = 0; x < lookupCollection.size(); x++)
			{
				if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
					form.cmbHcpDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
		}
		
	}

	public void setHCPType(Boolean boolHCP)
	{
		populateStaffTypeCombo(boolHCP);		
	}

	private void populateStaffTypeCombo(Boolean boolHCP)
	{
		form.getLocalContext().setboolHCP(boolHCP);
		if (boolHCP.equals(Boolean.TRUE))		// If we are ONLY listing HCP's then exclude the other staff types.
		{			
			form.cmbStaffType().newRow(StaffType.HCP, StaffType.HCP.toString());
			form.cmbStaffType().setValue(StaffType.HCP);
			populateHCPDisciplineCombo();
			form.cmbStaffType().setEnabled(false);
		}
		else			
			form.cmbStaffType().setEnabled(true);
	}


	public MemberOfStaffShortVoCollection listMembersOfStaff()
	{
		return form.getLocalContext().getMemberOfStaffList() != null ? form.getLocalContext().getMemberOfStaffList(): null;
	}
	
	public HcpLiteVoCollection listHCPLites()
	{
		return form.getLocalContext().getHCPLiteList() != null ? form.getLocalContext().getHCPLiteList() : null;
	}

	protected void onCmbStaffTypeValueChanged() throws PresentationLogicException
	{		
		populateHCPDisciplineCombo();		
	}

	private void setAction(MOSSearchLastAction enumValue)
	{
		form.getLocalContext().setAction(enumValue);
	}
	private MOSSearchLastAction getAction()
	{
		return form.getLocalContext().getAction();
	}
	public MOSSearchLastAction getActionEvent()
	{
		return getAction();
	}

	public void refreshGrid() {
		search();		
	}

	//WDEV-15658
	public void setActionEvent(MOSSearchLastAction action)
	{
		form.getLocalContext().setAction(action);
	}

}
