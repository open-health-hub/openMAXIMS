//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.52 build 2495.16043)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.practicesearch;
import ims.admin.forms.practicesearch.GenForm.grdSearchRow;
import ims.admin.vo.PracticeSearchCriteriaVo;
import ims.admin.vo.enums.PracticeSearch;
import ims.core.vo.LocSiteVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.OrganisationWithSitesVoCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	private void initialize()
	{
		form.getLocalContext().setSurgerySelectable(Boolean.FALSE);
		clearPracticeAndSurgeryLocalContext();
		
		form.txtName().setFocus();
		form.txtCode().setEnabled(false);
		form.chkActive().setValue(true);
	}
	
	private void enableCodeText()
	{
		boolean codeTypeSelected = form.cmbType().getValue() != null;
		form.txtCode().setEnabled(codeTypeSelected);
		if(codeTypeSelected == false)
			form.txtCode().setValue("");
	}
	
	protected void onFormModeChanged()
	{
		enableCodeText();
		enableContextMenu();
	}
	
	private void enableContextMenu()
	{
		boolean canBeVisible = getCanMakeVisibleContextMenu() && form.getMode().equals(FormMode.VIEW);
		boolean orgRecordSelected = form.grdSearch().getSelectedRowIndex() >= 0 && form.grdSearch().getValue() instanceof OrganisationWithSitesVo;
		boolean locSiteRecordSelected = form.grdSearch().getSelectedRowIndex() >= 0 && form.grdSearch().getValue() instanceof LocSiteVo;
		boolean canMakeRemovePracticeVisible = canBeVisible && orgRecordSelected && isRemoveContextMenuVisible();
		boolean canMakeSurgeryVisible = canBeVisible /*&& ConfigFlag.DOM.GP_USE_SURGERIES.getValue()*/ && !isSurgeryContextMenuInvisible(); 
		
		form.getContextMenus().getPracticeAdminNewPracticeItem().setVisible(canBeVisible);
		form.getContextMenus().getPracticeAdminEditPracticeItem().setVisible(canBeVisible && orgRecordSelected);
		form.getContextMenus().getPracticeAdminRemovePracticeItem().setVisible(canMakeRemovePracticeVisible);
		form.getContextMenus().getPracticeAdminNewSurgeryItem().setVisible(canMakeSurgeryVisible && orgRecordSelected);
		form.getContextMenus().getPracticeAdminEditSurgeryItem().setVisible(canMakeSurgeryVisible && locSiteRecordSelected);
		form.getContextMenus().getPracticeAdminRemoveSurgeryItem().setVisible(canMakeSurgeryVisible && locSiteRecordSelected);
	}

	private boolean getCanMakeVisibleContextMenu()
	{
		Boolean isContextMenuVisible = form.getLocalContext().getCanContextMenuBeVisible();
		return isContextMenuVisible != null ? isContextMenuVisible.booleanValue() : false;
	}

	protected void onGrdSearchSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		onGridSearchSelectionChanged();
	}

	private void onGridSearchSelectionChanged()
	{
		enableContextMenu();
		Object val = form.grdSearch().getValue();
		clearPracticeAndSurgeryLocalContext();
		if(val != null)
		{
			if(val instanceof OrganisationWithSitesVo)
			{
				setSelectedPractice((OrganisationWithSitesVo) val);
			}
			else if(val instanceof LocSiteVo)
			{
				setSelectedSurgery((LocSiteVo) val);
			}
			
			setActionAndFireEvent(PracticeSearch.SELECT);
		}
	}
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
		setAction(PracticeSearch.CLEAR);
		form.txtCode().setEnabled(false);
	}
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateSearchCriteria())
		{
			clearPracticeAndSurgeryLocalContext();
			search();
			enableContextMenu();
			setActionAndFireEvent(PracticeSearch.SEARCH);
		}
	}

	private boolean validateSearchCriteria()
	{
		boolean nameSpecified = false;
		
		if(form.txtName().getValue() != null)
		{

			if(!form.txtName().getValue().equals(""))
				nameSpecified = true;
		}
		if(form.txtAddress().getValue() != null)
		{
			if(!form.txtAddress().getValue().equals(""))
			{
				if(nameSpecified == false)	
				{
					engine.showMessage("Please enter at least one character of the practice name into the Practice Name field");
					form.txtName().setFocus();
					return false;
				}
			}
		}
		
		//if no name or address specified check was taxonomy search used
		if(form.cmbType().getValue() != null)
		{
			//WDEV-2485 
			if(form.txtCode().getValue() != null &&
					form.txtCode().getValue().trim().length() != 0)
			{
				//wdev-10899
				form.txtName().setValue(null);
				form.txtAddress().setValue(null);
				//------------
				return true;
			}
			else
			{
				engine.showMessage("Please specify a Code when providing a Code Type");
				form.txtCode().setFocus();
				return false;
			}
				
		}
		else
		{
			if(!nameSpecified)
				engine.showMessage("Please enter at least one character of the practice name into the Practice Name field");
		}
			
		return nameSpecified;
	}

	public void search()
	{	
		PracticeSearchCriteriaVo criteria = new PracticeSearchCriteriaVo();
		
		if(form.chkActive().getValue() == true)
			criteria.setIsActive(new Boolean(form.chkActive().getValue()));

		criteria.setTaxonomyCode(form.txtCode().getValue());
		criteria.setTaxonomyType(form.cmbType().getValue());					
		criteria.setName(form.txtName().getValue());
		criteria.setAddress(form.txtAddress().getValue());
		
		OrganisationWithSitesVoCollection listPractice = domain.listPractice(criteria);
		populateGridFromData(listPractice);
		
		if(listPractice == null || listPractice.size() == 0)
		{
			engine.showMessage("No records found matching the search criteria");
		}
	}

	private void populateGridFromData(OrganisationWithSitesVoCollection voCollPractices)
	{
		form.grdSearch().getRows().clear();
		
		if(voCollPractices == null)
			return;
		
		for (int i = 0; i < voCollPractices.size(); i++)
		{
			OrganisationWithSitesVo organisationWithSitesVo = voCollPractices.get(i);
			addPracticeToGrid(organisationWithSitesVo, form.grdSearch().getRows().newRow());
		}
	}

	private Boolean addPracticeToGrid(OrganisationWithSitesVo organisationWithSitesVo, grdSearchRow row)
	{
		if(organisationWithSitesVo == null)
			return Boolean.FALSE;
		
		OrganisationWithSitesVo voOrg = organisationWithSitesVo;
		
		row.setPracticeName(voOrg.getName());
		if (voOrg.getAddressIsNotNull())
		{
			row.setAddress(voOrg.getAddress().toDisplayString());
		}
		
		// if the site is using surgeries, display them. otherwise ignore. 
//		if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
//		{
			if (voOrg.getLocationSitesIsNotNull())
			{
				if(row.getRows().size() > 0)
					row.getRows().clear();
				
				for (int p = 0; p < voOrg.getLocationSites().size(); p++)
				{
					grdSearchRow rowLoc = row.getRows().newRow();
					LocSiteVo locSiteVo = voOrg.getLocationSites().get(p);
					
					rowLoc.setPracticeName(locSiteVo.getName());
					if (locSiteVo.getAddressIsNotNull())
					{
						rowLoc.setAddress(locSiteVo.getAddress().toDisplayString());
					}

					rowLoc.setCode(findPasCode(locSiteVo.getCodeMappings()));

					rowLoc.setValue(locSiteVo);
					rowLoc.setCollapsedImage(form.getImages().Admin.Location);
					rowLoc.setExpandedImage(form.getImages().Admin.Location);
					rowLoc.setSelectable(form.getLocalContext().getSurgerySelectable().booleanValue());
				}
			}
//		}
		row.setCode(findPasCode(voOrg.getCodeMappings()));
		
		row.setValue(voOrg);
		row.setCollapsedImage(form.getImages().Admin.Organisation);
		row.setExpandedImage(form.getImages().Admin.Organisation);
		if ((voOrg.getIsActiveIsNotNull()) && (voOrg.getIsActive().booleanValue() == false))
			row.setTextColor(ims.framework.utils.Color.Gray);
		
		return Boolean.TRUE;
	}


	private String findPasCode(TaxonomyMapCollection codeMappings)
	{
		for (int i = 0 ; codeMappings != null && i < codeMappings.size() ; i++)
		{
			if (codeMappings.get(i).getTaxonomyName().equals(TaxonomyType.PAS))
				return codeMappings.get(i).getTaxonomyCode();
		}
		return null;
	}

	protected void onCmbTypeValueChanged() throws PresentationLogicException
	{
		enableCodeText();
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.PracticeAdmin.NewPractice :
				setActionAndFireEvent(PracticeSearch.NEWPRACTICE);
			break;

			case GenForm.ContextMenus.PracticeAdmin.EditPractice :
				setActionAndFireEvent(PracticeSearch.EDITPRACTICE);
			break;

			case GenForm.ContextMenus.PracticeAdmin.RemovePractice :
				setActionAndFireEvent(PracticeSearch.REMOVEPRACTICE);
			break;

			case GenForm.ContextMenus.PracticeAdmin.NewSurgery :
				setActionAndFireEvent(PracticeSearch.NEWSURGERY);
			break;

			case GenForm.ContextMenus.PracticeAdmin.EditSurgery :
				setActionAndFireEvent(PracticeSearch.EDITSURGERY);
			break;

			case GenForm.ContextMenus.PracticeAdmin.RemoveSurgery :
				setActionAndFireEvent(PracticeSearch.REMOVESURGERY);
			break;
		}
	}
	
	private void setActionAndFireEvent(PracticeSearch action)
	{
		setAction(action);
		form.fireCustomControlValueChanged();
	}
	
	private void setAction(PracticeSearch action)
	{
		form.getLocalContext().setAction(action);		
	}

	private void setSelectedPractice(OrganisationWithSitesVo practice)
	{
		form.getLocalContext().setSelectedPractice(practice);
	}

	private void setSelectedSurgery(LocSiteVo surgery)
	{
		form.getLocalContext().setSelectedSurgery(surgery);
	}
	
	/**
	* Component Interface methods
	*/

	/**
	* getSelectedPractice
	*/
	public OrganisationWithSitesVo getSelectedPractice()
	{
		return form.getLocalContext().getSelectedPractice();
	}
	
	public OrganisationWithSitesVo getParentPractice()
	{
		LocSiteVo voLocSiteVo = getSelectedSurgery();
		if(voLocSiteVo != null)
		{
			for (int i = 0; i < form.grdSearch().getRows().size(); i++)
			{
				if(form.grdSearch().getRows().get(i).getValue() instanceof OrganisationWithSitesVo)
				{
					OrganisationWithSitesVo organisationWithSitesVo = (OrganisationWithSitesVo)form.grdSearch().getRows().get(i).getValue();
					if(organisationWithSitesVo.getLocationSites().indexOf(voLocSiteVo) >= 0)
						return organisationWithSitesVo; 
				}
			}
		}	
		
		return null;
	}
	
	/**
	* getSelectedSurgery
	*/
	public LocSiteVo getSelectedSurgery()
	{
		return form.getLocalContext().getSelectedSurgery();
	}
	
	/**
	* clear
	*/
	public void clear()
	{
		clearPracticeAndSurgeryLocalContext();
		clearControls();
		clearAction();
		enableContextMenu();
	}

	private void clearAction()
	{
		form.getLocalContext().setAction(null);
	}

	private void clearControls()
	{
		super.clearScreen();
		form.grdSearch().getRows().clear();
	}

	/**
	* returns an instance of the Admin.PracticeSearch enumeration (Search, Clear, Select) when selecting, pressing Search or Clear buttons
	*/
	public ims.admin.vo.enums.PracticeSearch getActionEvent()
	{
		return form.getLocalContext().getAction();
	}

	public void setEnabled(Boolean enabled)
	{
		enableControls(enabled != null ? enabled.booleanValue() : false);
	}

	
	private void enableControls(boolean enabled)
	{
		form.chkActive().setEnabled(enabled);
		form.cmbType().setEnabled(enabled);
		form.txtCode().setEnabled(enabled);
		form.txtAddress().setEnabled(enabled);
		form.txtName().setEnabled(enabled);
	}

	/**
	* display Context Menus for PracticeAdmin Screen
	*/
	public void setVisibleContextMenus(Boolean visible)
	{
		form.getLocalContext().setCanContextMenuBeVisible(visible);
		enableContextMenu();
	}
	
	public void setVisibleRemoveContextMenu(Boolean isVisible)
	{
		form.getLocalContext().setIsVisibleRemoveContext(isVisible);
		enableContextMenu();
	}

	public void setInvisibleSurgeryContextMenu()
	{
		form.getLocalContext().setIsInvisibleSurgeryContext(Boolean.TRUE);
		enableContextMenu();
	}
	
	public Boolean addPractice(OrganisationWithSitesVo organisationWithSitesVo)
	{
		if(organisationWithSitesVo == null)
			return Boolean.FALSE;
		
		return addPracticeToGrid(organisationWithSitesVo, getGridRow(organisationWithSitesVo));
	}
	
	public Boolean removePracticeFromGrid(OrganisationWithSitesVo voOrganisationWithSites)
	{
		if(voOrganisationWithSites == null)
			return Boolean.FALSE;
		
		for (int i = 0; i < form.grdSearch().getRows().size(); i++)
		{
			if(voOrganisationWithSites.equals(form.grdSearch().getRows().get(i).getValue()))
			{
				form.grdSearch().getRows().remove(i);
				setSelectedSurgery(null);
				setSelectedPractice(null);
				enableContextMenu();
				setActionAndFireEvent(PracticeSearch.PRACTICEREMOVED);
				return Boolean.TRUE;
			}
		}
		
		return Boolean.FALSE;
	}

	public Boolean removeSurgeryFromGrid(LocSiteVo voLocSite)
	{
		if(voLocSite == null)
			return Boolean.FALSE; 
		
		for (int i = 0; i < form.grdSearch().getRows().size(); i++)
		{
			for (int j = 0; j < form.grdSearch().getRows().get(i).getRows().size(); j++)
			{
				if(voLocSite.equals(form.grdSearch().getRows().get(i).getRows().get(j).getValue()))
				{
					form.grdSearch().getRows().get(i).getRows().remove(j);
					setSelectedSurgery(null);
					//setSelectedPractice(null)
					enableContextMenu();
					setActionAndFireEvent(PracticeSearch.SURGERYREMOVED);
					return Boolean.TRUE;
				}
			}
		}
		
		return Boolean.FALSE;
	}

/**
	* defaults to false
	*/
	public void setSurgerySelectable(Boolean selectable)
	{
		form.getLocalContext().setSurgerySelectable(selectable);
	}

	public void setValue(ValueObject val)
	{
		form.grdSearch().setValue(val);
		if(form.grdSearch().getSelectedRow() != null)
		{
			expandSelectedRow();
			onGridSearchSelectionChanged();
		}
		else
		{
			
			clearPracticeAndSurgeryLocalContext();
			enableContextMenu();
		}
	}
	
	public OrganisationWithSitesVo getNewPracticeBasedOnSearchCriteria()
	{
		OrganisationWithSitesVo voOrganisation = new OrganisationWithSitesVo();
		
		voOrganisation.setName(form.txtName().getValue());
		voOrganisation.setIsActive(Boolean.TRUE);
		
		voOrganisation.setAddress(new PersonAddress());
		voOrganisation.getAddress().setLine1(form.txtAddress().getValue());
		
		TaxonomyType taxonomyType = form.cmbType().getValue();
		if(taxonomyType != null)
		{
			TaxonomyMap taxonomyMap = new TaxonomyMap();
			taxonomyMap.setTaxonomyName(taxonomyType);
			taxonomyMap.setTaxonomyCode(form.txtCode().getValue());
			
			voOrganisation.setCodeMappings(new TaxonomyMapCollection());
			voOrganisation.getCodeMappings().add(taxonomyMap);
		}
		
		return voOrganisation;
	}
	
	public void setSearchButtonAsDefault()
	{
		form.imbSearch().setAsDefaultButton();
	}
	
	private boolean isRemoveContextMenuVisible()
	{
		return form.getLocalContext().getIsVisibleRemoveContextIsNotNull() && form.getLocalContext().getIsVisibleRemoveContext().booleanValue();
	}
	
	private boolean isSurgeryContextMenuInvisible()
	{
		return form.getLocalContext().getIsInvisibleSurgeryContextIsNotNull() && form.getLocalContext().getIsInvisibleSurgeryContext().booleanValue();
	}
	
	private grdSearchRow getGridRow(OrganisationWithSitesVo organisationWithSitesVo)
	{
		if (organisationWithSitesVo == null)
			return null;

		for (int i = 0; i < form.grdSearch().getRows().size(); i++)
		{
			if (organisationWithSitesVo.equals(form.grdSearch().getRows().get(i).getValue()))
				return form.grdSearch().getRows().get(i);
		}

		return form.grdSearch().getRows().newRow();
	}
	
	private void expandSelectedRow()
	{
		grdSearchRow row = form.grdSearch().getSelectedRow();
		if(row != null)
		{
			row.setExpanded(true);
			if(row.getParentRow() != null)
				row.getParentRow().setExpanded(true);
		}
	}
	
	private void clearPracticeAndSurgeryLocalContext()
	{
		setSelectedPractice(null);
		setSelectedSurgery(null);
	}

	public void setVisibleContextMenu(Boolean visible) 
	{
		form.getLocalContext().setVisibleContextMenu(visible);
		enableContextMenu();
	}

	public void setActionEventHandled() 
	{
		form.getLocalContext().setAction(null);
	}

	//WDEV-15663
	public void setValueInGrid(ValueObject val)
	{
		if (val==null)
			return;
		
		if (val instanceof OrganisationWithSitesVo)
		{
			addPracticeToGrid((OrganisationWithSitesVo)val, form.grdSearch().getRows().newRow());
			form.grdSearch().setValue((OrganisationWithSitesVo)val);
			form.getLocalContext().setSelectedPractice((OrganisationWithSitesVo)val);
			setActionAndFireEvent(PracticeSearch.SELECT);
		}
		expandSelectedRow();
	}
}
