//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3602.23153)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.admin.forms.rchtmanualdischargedialog;

import ims.core.vo.RCHTInpatientDischargeVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.dtimDisch().setMaxValue(new DateTime());
		
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		StringBuffer errors = new StringBuffer();
		if (form.dtimDisch().getValue() == null)
		{
			errors.append("Discharge Date Time is mandatory. \n");
		}
		if (form.cmbDestination().getValue() == null)
		{
			errors.append("Discharge Destination is mandatory. \n");
		}
		if (form.cmbMethod().getValue() == null)
		{
			errors.append("Method of Discharge is mandatory. \n");
		}
	
		if (errors != null && errors.length() > 0)
		{
			engine.showMessage(errors.toString());
			return;
		}
		
		RCHTInpatientDischargeVo inpatientDischarge = new RCHTInpatientDischargeVo();
		
		inpatientDischarge.setDischargeDateTime(form.dtimDisch().getValue());
		inpatientDischarge.setDischargeDestination(form.cmbDestination().getValue());
		inpatientDischarge.setMethodOfDischarge(form.cmbMethod().getValue());
		
		form.getGlobalContext().Core.setRCHTInpatientDischarge(inpatientDischarge);
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
