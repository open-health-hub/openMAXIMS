//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.organisationandlocation;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctn1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyr1Layer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabOrgContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbOrgCountyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.ntpf.vo.lookups.County value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.ntpf.vo.lookups.County value)
					{
						return super.control.removeRow(value);
					}
					public ims.ntpf.vo.lookups.County getValue()
					{
						return (ims.ntpf.vo.lookups.County)super.control.getValue();
					}
					public void setValue(ims.ntpf.vo.lookups.County value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbOrgTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.OrganisationType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.OrganisationType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.OrganisationType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.OrganisationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.OrganisationType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.OrganisationType getValue()
					{
						return (ims.core.vo.lookups.OrganisationType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.OrganisationType value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdOrgMappingsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdOrgMappingsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolExtCodeTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolExtCodeTypeReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolExtCodeTypeOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolExtCodeType(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
					{
						return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
					}
					public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
					{
						super.row.set(0, value, true);
					}
					public void setCellcolExtCodeTypeTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolCodeReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolCodeReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolCodeOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolCode(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolCode()
					{
						return (String)super.row.get(1);
					}
					public void setcolCode(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolCodeTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.row.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdOrgMappingsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdOrgMappingsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdOrgMappingsRow get(int index)
					{
						return new grdOrgMappingsRow(super.collection.get(index));
					}
					public grdOrgMappingsRow newRow()
					{
						return new grdOrgMappingsRow(super.collection.newRow());
					}
					public grdOrgMappingsRow newRow(boolean autoSelect)
					{
						return new grdOrgMappingsRow(super.collection.newRow(autoSelect));
					}
					public grdOrgMappingsRow newRowAt(int index)
					{
						return new grdOrgMappingsRow(super.collection.newRowAt(index));
					}
					public grdOrgMappingsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdOrgMappingsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdOrgMappingsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.TaxonomyMap[] getValues()
					{
						ims.core.vo.TaxonomyMap[] listOfValues = new ims.core.vo.TaxonomyMap[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.grid.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.grid.setValue(value);
					}
					public grdOrgMappingsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdOrgMappingsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdOrgMappingsRowCollection getRows()
					{
						return new grdOrgMappingsRowCollection(super.grid.getRows());
					}
					public grdOrgMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdOrgMappingsRow(row);
					}
					public void setcolExtCodeTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolExtCodeTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public GridComboBox colExtCodeTypeComboBox()
					{
						return new GridComboBox(super.grid, 0);
					}
					public void setcolCodeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolCodeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 400, 128, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mappings:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 400, 46, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fax No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 46, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 218, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 400, 18, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Phone No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 400, 74, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 400, 102, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment:", new Integer(0), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 472, 44, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 80, 44, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 80, 72, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 80, 100, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 80, 156, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 80, 216, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 472, 100, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 80, 128, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 80, 184, 121, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbOrgCountyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbOrgCountyTemp);
					cmbOrgCountyComboBox cmbOrgCounty = (cmbOrgCountyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOrgCountyComboBox.class, m_cmbOrgCountyTemp);
					super.addComboBox(cmbOrgCounty);
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 472, 72, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbOrgTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbOrgTypeTemp);
					cmbOrgTypeComboBox cmbOrgType = (cmbOrgTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOrgTypeComboBox.class, m_cmbOrgTypeTemp);
					super.addComboBox(cmbOrgType);
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 472, 128, 270, 140, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdOrgMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdOrgMappingsTemp);
					grdOrgMappingsGrid grdOrgMappings = (grdOrgMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOrgMappingsGrid.class, m_grdOrgMappingsTemp);
					grdOrgMappings.addComboBoxColumn("External Code Type", 0, 0, 130, false, true, false, false, true, -1);
					grdOrgMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdOrgMappings);
				}
	
				public Label lblOrgPostCodeOrCounty()
				{
					return (Label)super.getControl(4);
				}
				public TextBox txtOrgFax()
				{
					return (TextBox)super.getControl(8);
				}
				public TextBox txtOrgName()
				{
					return (TextBox)super.getControl(9);
				}
				public TextBox txtOrgAdd1()
				{
					return (TextBox)super.getControl(10);
				}
				public TextBox txtOrgAdd2()
				{
					return (TextBox)super.getControl(11);
				}
				public TextBox txtOrgAdd3()
				{
					return (TextBox)super.getControl(12);
				}
				public TextBox txtOrgAdd5()
				{
					return (TextBox)super.getControl(13);
				}
				public TextBox txtOrgPostCode()
				{
					return (TextBox)super.getControl(14);
				}
				public TextBox txtOrgPhone()
				{
					return (TextBox)super.getControl(15);
				}
				public TextBox txtOrgComment()
				{
					return (TextBox)super.getControl(16);
				}
				public TextBox txtOrgAdd4()
				{
					return (TextBox)super.getControl(17);
				}
				public cmbOrgCountyComboBox cmbOrgCounty()
				{
					return (cmbOrgCountyComboBox)super.getComboBox(0);
				}
				public cmbOrgTypeComboBox cmbOrgType()
				{
					return (cmbOrgTypeComboBox)super.getComboBox(1);
				}
				public grdOrgMappingsGrid grdOrgMappings()
				{
					return (grdOrgMappingsGrid)super.getGrid(0);
				}
			}
			public static class tabLocContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbLocCountyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.ntpf.vo.lookups.County value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.ntpf.vo.lookups.County value)
					{
						return super.control.removeRow(value);
					}
					public ims.ntpf.vo.lookups.County getValue()
					{
						return (ims.ntpf.vo.lookups.County)super.control.getValue();
					}
					public void setValue(ims.ntpf.vo.lookups.County value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLocTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LocationType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LocationType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LocationType getValue()
					{
						return (ims.core.vo.lookups.LocationType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LocationType value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdLocMappingsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdLocMappingsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolExtCodeTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolExtCodeTypeReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolExtCodeTypeOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolExtCodeType(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
					{
						return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
					}
					public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
					{
						super.row.set(0, value, true);
					}
					public void setCellcolExtCodeTypeTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolCodeReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolCodeReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolCodeOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolCode(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolCode()
					{
						return (String)super.row.get(1);
					}
					public void setcolCode(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolCodeTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.row.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdLocMappingsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdLocMappingsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdLocMappingsRow get(int index)
					{
						return new grdLocMappingsRow(super.collection.get(index));
					}
					public grdLocMappingsRow newRow()
					{
						return new grdLocMappingsRow(super.collection.newRow());
					}
					public grdLocMappingsRow newRow(boolean autoSelect)
					{
						return new grdLocMappingsRow(super.collection.newRow(autoSelect));
					}
					public grdLocMappingsRow newRowAt(int index)
					{
						return new grdLocMappingsRow(super.collection.newRowAt(index));
					}
					public grdLocMappingsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdLocMappingsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdLocMappingsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.TaxonomyMap[] getValues()
					{
						ims.core.vo.TaxonomyMap[] listOfValues = new ims.core.vo.TaxonomyMap[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.grid.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.grid.setValue(value);
					}
					public grdLocMappingsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdLocMappingsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdLocMappingsRowCollection getRows()
					{
						return new grdLocMappingsRowCollection(super.grid.getRows());
					}
					public grdLocMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdLocMappingsRow(row);
					}
					public void setcolExtCodeTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolExtCodeTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public GridComboBox colExtCodeTypeComboBox()
					{
						return new GridComboBox(super.grid, 0);
					}
					public void setcolCodeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolCodeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 648, 160, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 472, 160, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Designated Printer For OCS Order:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 656, 144, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 552, 128, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 472, 144, 185, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Designated Printer For New Results:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 472, 128, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default Printer:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 400, 102, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Printers:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 400, 184, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mappings:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 400, 46, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fax No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 46, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 218, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 400, 18, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Phone No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 400, 74, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 644, 272, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Treating Hospital", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 516, 272, 94, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Referring Hospital", new Integer(0), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 667, 99, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Select", Boolean.TRUE, "Select Printers at this Location", Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 472, 100, 190, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 472, 44, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 80, 44, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 80, 72, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 80, 100, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 80, 156, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 80, 216, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 80, 128, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 80, 184, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLocCountyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbLocCountyTemp);
					cmbLocCountyComboBox cmbLocCounty = (cmbLocCountyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocCountyComboBox.class, m_cmbLocCountyTemp);
					super.addComboBox(cmbLocCounty);
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 472, 72, 270, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbLocTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLocTypeTemp);
					cmbLocTypeComboBox cmbLocType = (cmbLocTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocTypeComboBox.class, m_cmbLocTypeTemp);
					super.addComboBox(cmbLocType);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 80, 272, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Display in ED Tracking", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 80, 248, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mark as virtual", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 612, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 732, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 472, 184, 270, 74, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdLocMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdLocMappingsTemp);
					grdLocMappingsGrid grdLocMappings = (grdLocMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLocMappingsGrid.class, m_grdLocMappingsTemp);
					grdLocMappings.addComboBoxColumn("External Code Type", 0, 0, 130, false, true, false, false, true, -1);
					grdLocMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdLocMappings);
				}
	
				public Label lblDesignatedPrinterForOCSOrderToBeSetForLocation()
				{
					return (Label)super.getControl(0);
				}
				public Label lblDesignatedPrinterForNewResultsForLocation()
				{
					return (Label)super.getControl(2);
				}
				public Label lblDefaultPrintForLocation()
				{
					return (Label)super.getControl(3);
				}
				public Label lblLocPostCodeOrCounty()
				{
					return (Label)super.getControl(11);
				}
				public Label lblTreatingHospLoc()
				{
					return (Label)super.getControl(14);
				}
				public Label lblReferringHospLoc()
				{
					return (Label)super.getControl(15);
				}
				public Button btnLocPrinterSelect()
				{
					return (Button)super.getControl(16);
				}
				public TextBox txtLocPrinters()
				{
					return (TextBox)super.getControl(17);
				}
				public TextBox txtLocFaxNo()
				{
					return (TextBox)super.getControl(18);
				}
				public TextBox txtLocName()
				{
					return (TextBox)super.getControl(19);
				}
				public TextBox txtLocAdd1()
				{
					return (TextBox)super.getControl(20);
				}
				public TextBox txtLocAdd2()
				{
					return (TextBox)super.getControl(21);
				}
				public TextBox txtLocAdd3()
				{
					return (TextBox)super.getControl(22);
				}
				public TextBox txtLocAdd5()
				{
					return (TextBox)super.getControl(23);
				}
				public TextBox txtLocPostCode()
				{
					return (TextBox)super.getControl(24);
				}
				public TextBox txtLocPhone()
				{
					return (TextBox)super.getControl(25);
				}
				public TextBox txtLocAdd4()
				{
					return (TextBox)super.getControl(26);
				}
				public cmbLocCountyComboBox cmbLocCounty()
				{
					return (cmbLocCountyComboBox)super.getComboBox(0);
				}
				public cmbLocTypeComboBox cmbLocType()
				{
					return (cmbLocTypeComboBox)super.getComboBox(1);
				}
				public CheckBox chkDisplayInEDTrackingLoc()
				{
					return (CheckBox)super.getControl(29);
				}
				public CheckBox chkVirtualLocation()
				{
					return (CheckBox)super.getControl(30);
				}
				public CheckBox chkReferringHosp()
				{
					return (CheckBox)super.getControl(31);
				}
				public CheckBox chkTreatingHosp()
				{
					return (CheckBox)super.getControl(32);
				}
				public grdLocMappingsGrid grdLocMappings()
				{
					return (grdLocMappingsGrid)super.getGrid(0);
				}
			}
			public static class tabLocSiteContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbLocSiteCountyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.ntpf.vo.lookups.County value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.ntpf.vo.lookups.County value)
					{
						return super.control.removeRow(value);
					}
					public ims.ntpf.vo.lookups.County getValue()
					{
						return (ims.ntpf.vo.lookups.County)super.control.getValue();
					}
					public void setValue(ims.ntpf.vo.lookups.County value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbLocSiteTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.LocationType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.LocationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.LocationType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.LocationType getValue()
					{
						return (ims.core.vo.lookups.LocationType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.LocationType value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdSiteMappingsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdSiteMappingsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolExtCodeTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolExtCodeTypeReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolExtCodeTypeOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolExtCodeType(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
					{
						return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
					}
					public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
					{
						super.row.set(0, value, true);
					}
					public void setCellcolExtCodeTypeTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolCodeReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolCodeReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolCodeOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolCode(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolCode()
					{
						return (String)super.row.get(1);
					}
					public void setcolCode(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolCodeTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.row.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdSiteMappingsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdSiteMappingsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdSiteMappingsRow get(int index)
					{
						return new grdSiteMappingsRow(super.collection.get(index));
					}
					public grdSiteMappingsRow newRow()
					{
						return new grdSiteMappingsRow(super.collection.newRow());
					}
					public grdSiteMappingsRow newRow(boolean autoSelect)
					{
						return new grdSiteMappingsRow(super.collection.newRow(autoSelect));
					}
					public grdSiteMappingsRow newRowAt(int index)
					{
						return new grdSiteMappingsRow(super.collection.newRowAt(index));
					}
					public grdSiteMappingsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdSiteMappingsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdSiteMappingsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.TaxonomyMap[] getValues()
					{
						ims.core.vo.TaxonomyMap[] listOfValues = new ims.core.vo.TaxonomyMap[this.getRows().size()];
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues[x] = this.getRows().get(x).getValue();
						}
						return listOfValues;
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.grid.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.grid.setValue(value);
					}
					public grdSiteMappingsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdSiteMappingsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdSiteMappingsRowCollection getRows()
					{
						return new grdSiteMappingsRowCollection(super.grid.getRows());
					}
					public grdSiteMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdSiteMappingsRow(row);
					}
					public void setcolExtCodeTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolExtCodeTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public GridComboBox colExtCodeTypeComboBox()
					{
						return new GridComboBox(super.grid, 0);
					}
					public void setcolCodeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolCodeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 648, 160, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 472, 160, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Designated Printer For OCS Order:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 656, 144, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 552, 128, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 472, 144, 185, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Designated Printer For New Results:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 472, 128, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default Printer:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 400, 102, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Printers:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 400, 184, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mappings:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 400, 46, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fax No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 508, 272, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Treating Hospital", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 16, 46, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 16, 218, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 400, 18, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Phone No:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 400, 74, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 620, 272, 38, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Secure", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 388, 272, 94, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Referring Hospital", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 684, 272, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "All Secure", new Integer(0), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 667, 99, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 82), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Select", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 472, 100, 190, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 92), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 472, 44, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 80, 44, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 80, 72, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 80, 100, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 80, 156, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 80, 216, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 472, 16, 270, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 80, 128, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 80, 184, 121, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbLocSiteCountyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbLocSiteCountyTemp);
					cmbLocSiteCountyComboBox cmbLocSiteCounty = (cmbLocSiteCountyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocSiteCountyComboBox.class, m_cmbLocSiteCountyTemp);
					super.addComboBox(cmbLocSiteCounty);
					RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 472, 72, 270, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbLocSiteTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 80), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbLocSiteTypeTemp);
					cmbLocSiteTypeComboBox cmbLocSiteType = (cmbLocSiteTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocSiteTypeComboBox.class, m_cmbLocSiteTypeTemp);
					super.addComboBox(cmbLocSiteType);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 80, 272, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Display in ED Tracking", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 80, 248, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mark as virtual", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 596, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 87), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 484, 272, 24, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 86), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 660, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 88), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 732, 272, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 89), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.FALSE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 472, 184, 270, 74, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdSiteMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 84), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdSiteMappingsTemp);
					grdSiteMappingsGrid grdSiteMappings = (grdSiteMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSiteMappingsGrid.class, m_grdSiteMappingsTemp);
					grdSiteMappings.addComboBoxColumn("External Code Type", 0, 0, 130, false, true, false, false, true, -1);
					grdSiteMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdSiteMappings);
				}
	
				public Label lblDesignatedPrinterForOCSOrderToBeSetForLocSite()
				{
					return (Label)super.getControl(0);
				}
				public Label lblDesignatedPrinterForNewResultsToBeSetForLocSite()
				{
					return (Label)super.getControl(2);
				}
				public Label lblDefaultPrinterToBeSetForLocSite()
				{
					return (Label)super.getControl(3);
				}
				public Label lblTreatHospLocSite()
				{
					return (Label)super.getControl(9);
				}
				public Label lblLocSitePostCode()
				{
					return (Label)super.getControl(12);
				}
				public Label lblSecure()
				{
					return (Label)super.getControl(15);
				}
				public Label lblRefHospLocSite()
				{
					return (Label)super.getControl(16);
				}
				public Label lblAllSecure()
				{
					return (Label)super.getControl(17);
				}
				public Button btnLsPrinterSelect()
				{
					return (Button)super.getControl(18);
				}
				public TextBox txtLsPrinters()
				{
					return (TextBox)super.getControl(19);
				}
				public TextBox txtLocSiteFaxNo()
				{
					return (TextBox)super.getControl(20);
				}
				public TextBox txtLocSiteName()
				{
					return (TextBox)super.getControl(21);
				}
				public TextBox txtLocSiteAdd1()
				{
					return (TextBox)super.getControl(22);
				}
				public TextBox txtLocSiteAdd2()
				{
					return (TextBox)super.getControl(23);
				}
				public TextBox txtLocSiteAdd3()
				{
					return (TextBox)super.getControl(24);
				}
				public TextBox txtLocSiteAdd5()
				{
					return (TextBox)super.getControl(25);
				}
				public TextBox txtLocSitePostCode()
				{
					return (TextBox)super.getControl(26);
				}
				public TextBox txtLocSitePhone()
				{
					return (TextBox)super.getControl(27);
				}
				public TextBox txtLocSiteAdd4()
				{
					return (TextBox)super.getControl(28);
				}
				public cmbLocSiteCountyComboBox cmbLocSiteCounty()
				{
					return (cmbLocSiteCountyComboBox)super.getComboBox(0);
				}
				public cmbLocSiteTypeComboBox cmbLocSiteType()
				{
					return (cmbLocSiteTypeComboBox)super.getComboBox(1);
				}
				public CheckBox chkDisplayInEDTrackingLocSite()
				{
					return (CheckBox)super.getControl(31);
				}
				public CheckBox chkVirtualLocationSite()
				{
					return (CheckBox)super.getControl(32);
				}
				public CheckBox chkLocSiteTreatingHos()
				{
					return (CheckBox)super.getControl(33);
				}
				public CheckBox chkLocSiteReferringHos()
				{
					return (CheckBox)super.getControl(34);
				}
				public CheckBox chkLocSiteSecure()
				{
					return (CheckBox)super.getControl(35);
				}
				public CheckBox chkLocSiteAllSecure()
				{
					return (CheckBox)super.getControl(36);
				}
				public grdSiteMappingsGrid grdSiteMappings()
				{
					return (grdSiteMappingsGrid)super.getGrid(0);
				}
			}
			public static class tabBlankContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Panel Controls
					RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 778, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));
			
					// Label Controls
					RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 586, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Instructions : Right-Click the tree for available options when setting up your Organisational structure.", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 56, 114, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location Site", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 56, 146, 46, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 56, 82, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Organisation", new Integer(0), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 32, 24, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
			
					// Picture Controls
					RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
					RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
					RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 24, 144, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
					super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
				}
	
				public Picture imgOrganisation()
				{
					return (Picture)super.getControl(6);
				}
				public Picture imgLocSite()
				{
					return (Picture)super.getControl(7);
				}
				public Picture imgLocation()
				{
					return (Picture)super.getControl(8);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 328, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabOrg = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Organisation", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabOrgContainer m_tabOrgContainer = (tabOrgContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOrgContainer.class, m_tabOrg, factory);
				super.addContainer(m_tabOrg, m_tabOrgContainer);
				ims.framework.utils.SizeInfo m_tabOrgDesignSize = new ims.framework.utils.SizeInfo(800, 328);
				ims.framework.utils.SizeInfo m_tabOrgRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper103.getWidth(), anchoringHelper103.getHeight());
				m_tabOrgContainer.setContext(form, appForm, m_tabOrg, loader, form_images_local, contextMenus, startControlID, m_tabOrgDesignSize, m_tabOrgRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 328, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabLoc = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabLocContainer m_tabLocContainer = (tabLocContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLocContainer.class, m_tabLoc, factory);
				super.addContainer(m_tabLoc, m_tabLocContainer);
				ims.framework.utils.SizeInfo m_tabLocDesignSize = new ims.framework.utils.SizeInfo(800, 328);
				ims.framework.utils.SizeInfo m_tabLocRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper104.getWidth(), anchoringHelper104.getHeight());
				m_tabLocContainer.setContext(form, appForm, m_tabLoc, loader, form_images_local, contextMenus, startControlID, m_tabLocDesignSize, m_tabLocRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 328, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabLocSite = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location Site", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabLocSiteContainer m_tabLocSiteContainer = (tabLocSiteContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLocSiteContainer.class, m_tabLocSite, factory);
				super.addContainer(m_tabLocSite, m_tabLocSiteContainer);
				ims.framework.utils.SizeInfo m_tabLocSiteDesignSize = new ims.framework.utils.SizeInfo(800, 328);
				ims.framework.utils.SizeInfo m_tabLocSiteRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper105.getWidth(), anchoringHelper105.getHeight());
				m_tabLocSiteContainer.setContext(form, appForm, m_tabLocSite, loader, form_images_local, contextMenus, startControlID, m_tabLocSiteDesignSize, m_tabLocSiteRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 328, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabBlank = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
				tabBlankContainer m_tabBlankContainer = (tabBlankContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBlankContainer.class, m_tabBlank, factory);
				super.addContainer(m_tabBlank, m_tabBlankContainer);
				ims.framework.utils.SizeInfo m_tabBlankDesignSize = new ims.framework.utils.SizeInfo(800, 328);
				ims.framework.utils.SizeInfo m_tabBlankRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper106.getWidth(), anchoringHelper106.getHeight());
				m_tabBlankContainer.setContext(form, appForm, m_tabBlank, loader, form_images_local, contextMenus, startControlID, m_tabBlankDesignSize, m_tabBlankRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabOrg().setVisible(false);
				tabLoc().setVisible(false);
				tabLocSite().setVisible(false);
				tabBlank().setVisible(false);
			}
			public void showtabOrg()
			{
				tabLoc().setVisible(false);
				tabLocSite().setVisible(false);
				tabBlank().setVisible(false);
				tabOrg().setVisible(true);
			}
			public void showtabLoc()
			{
				tabOrg().setVisible(false);
				tabLocSite().setVisible(false);
				tabBlank().setVisible(false);
				tabLoc().setVisible(true);
			}
			public void showtabLocSite()
			{
				tabOrg().setVisible(false);
				tabLoc().setVisible(false);
				tabBlank().setVisible(false);
				tabLocSite().setVisible(true);
			}
			public void showtabBlank()
			{
				tabOrg().setVisible(false);
				tabLoc().setVisible(false);
				tabLocSite().setVisible(false);
				tabBlank().setVisible(true);
			}
	
			public tabOrgContainer tabOrg()
			{
				return (tabOrgContainer)super.layers.get(0);
			}
			public tabLocContainer tabLoc()
			{
				return (tabLocContainer)super.layers.get(1);
			}
			public tabLocSiteContainer tabLocSite()
			{
				return (tabLocSiteContainer)super.layers.get(2);
			}
			public tabBlankContainer tabBlank()
			{
				return (tabBlankContainer)super.layers.get(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
			super.addLayer(m_lyr1Layer);
			m_lyr1Layer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyr1Layer lyr1()
		{
			return (lyr1Layer)super.getLayer(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuOrganisationLocation = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuOrganisationLocationCREATEROOTORGItem = factory.createMenuItem(startControlID.intValue() + 10, "Create Root Organisation", true, false, new Integer(103103), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationCREATEROOTORGItem);
		contextMenus.contextMenuOrganisationLocationCREATEORGHEREItem = factory.createMenuItem(startControlID.intValue() + 11, "Create Organisation here", true, false, new Integer(103103), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationCREATEORGHEREItem);
		contextMenus.contextMenuOrganisationLocationCREATELOCItem = factory.createMenuItem(startControlID.intValue() + 12, "Create Location here", true, false, new Integer(103104), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationCREATELOCItem);
		contextMenus.contextMenuOrganisationLocationEDITItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit", true, false, new Integer(102150), true, true);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationEDITItem);
		contextMenus.contextMenuOrganisationLocationRENAMEItem = factory.createMenuItem(startControlID.intValue() + 14, "Rename", true, false, new Integer(102240), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationRENAMEItem);
		contextMenus.contextMenuOrganisationLocationACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 15, "Activate", true, false, new Integer(102209), true, true);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationACTIVATEItem);
		contextMenus.contextMenuOrganisationLocationREMOVEItem = factory.createMenuItem(startControlID.intValue() + 16, "Remove", true, false, new Integer(102140), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationREMOVEItem);
		contextMenus.contextMenuOrganisationLocationINACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 17, "Inactivate", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOrganisationLocation.add(contextMenus.contextMenuOrganisationLocationINACTIVATEItem);
		form.registerMenu(contextMenus.contextMenuOrganisationLocation);


		// Container Clasess
		RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 816, 360, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctn1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "", new Boolean(true)});
		addControl(m_ctn1);
		ctn1Container ctn1 = (ctn1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctn1Container.class, m_ctn1, factory);
		ims.framework.utils.SizeInfo m_ctn1DesignSize = new ims.framework.utils.SizeInfo(816, 360);
		ims.framework.utils.SizeInfo m_ctn1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper107.getWidth(), anchoringHelper107.getHeight());
		ctn1.setContext(form, appForm, m_ctn1, loader, this.getImages(), contextMenus, startControlID, m_ctn1DesignSize, m_ctn1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn1);

		// Label Controls
		RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 56, 603, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Organisation", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 168, 603, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location Site", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 280, 603, 46, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), new Integer(startTabIndex.intValue() + 90), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 91), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View Active Only", Boolean.TRUE, null}));

		// Tree Controls
		RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 816, 176, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuOrganisationLocation, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));

		// Picture Controls
		RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 24, 600, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 136, 600, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 248, 600, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctn1Container ctn1()
	{
		return (ctn1Container)super.getContainer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(6);
	}
	public TreeView treOrgLoc()
	{
		return (TreeView)super.getControl(7);
	}
	public Picture imgOrganisationLeg()
	{
		return (Picture)super.getControl(8);
	}
	public Picture imgLocationSiteLeg()
	{
		return (Picture)super.getControl(9);
	}
	public Picture imgLocationLeg()
	{
		return (Picture)super.getControl(10);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Admin = new AdminForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName YesNoDialog;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				PrinterSelectDialog = new LocalFormName(103115);
			}
			public final FormName PrinterSelectDialog;
		}

		public CoreForms Core;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(24), new Integer(24));
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
				LocDisabled = new ImageHelper(103143, "Images/Admin/location_dis.png", new Integer(16), new Integer(16));
				LocSiteDisabled = new ImageHelper(103144, "Images/Admin/location_site_dis.png", new Integer(16), new Integer(16));
				OrgDisabled = new ImageHelper(103142, "Images/Admin/organisation_dis.png", new Integer(16), new Integer(16));
				TerminalDisabled = new ImageHelper(103146, "Images/Admin/terminalDisabled.gif", new Integer(16), new Integer(16));
				TerminalEnabled = new ImageHelper(103145, "Images/Admin/Computers-Networked-3.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image LocationSite;
			public final ims.framework.utils.Image LocDisabled;
			public final ims.framework.utils.Image LocSiteDisabled;
			public final ims.framework.utils.Image OrgDisabled;
			public final ims.framework.utils.Image TerminalDisabled;
			public final ims.framework.utils.Image TerminalEnabled;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
				PlusDisabled = new ImageHelper(102117, "Images/Core/plus_disabled.gif", new Integer(16), new Integer(16));
				Plus = new ImageHelper(102116, "Images/Core/plus.gif", new Integer(16), new Integer(16));
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				PasteEnabled = new ImageHelper(102182, "Images/Core/PasteEnabled16.gif", new Integer(16), new Integer(16));
				CutEnabled = new ImageHelper(102180, "Images/Core/CutEnabled16.gif", new Integer(16), new Integer(16));
				PasteDisabled = new ImageHelper(102183, "Images/Core/PasteDisabled16.gif", new Integer(16), new Integer(16));
				CutDisabled = new ImageHelper(102181, "Images/Core/CutDisabled16.gif", new Integer(16), new Integer(16));
				RecycleBinEnabled = new ImageHelper(102184, "Images/Core/Recycle Bin.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Alert_RedCicle2 = new ImageHelper(102140, "Images/Core/alarm-red-circle-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MinusDisabled;
			public final ims.framework.utils.Image PlusDisabled;
			public final ims.framework.utils.Image Plus;
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image PasteEnabled;
			public final ims.framework.utils.Image CutEnabled;
			public final ims.framework.utils.Image PasteDisabled;
			public final ims.framework.utils.Image CutDisabled;
			public final ims.framework.utils.Image RecycleBinEnabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Alert_RedCicle2;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SavingRootOrg = new ims.framework.ContextVariable("SavingRootOrg", prefix + "_lv_Admin.OrganisationAndLocation.__internal_x_context__SavingRootOrg_" + componentIdentifier + "");
			cxl_EditObject = new ims.framework.ContextVariable("EditObject", prefix + "_lv_Admin.OrganisationAndLocation.__internal_x_context__EditObject_" + componentIdentifier + "");
		}
		
		public boolean getSavingRootOrgIsNotNull()
		{
			return !cxl_SavingRootOrg.getValueIsNull(context);
		}
		public Boolean getSavingRootOrg()
		{
			return (Boolean)cxl_SavingRootOrg.getValue(context);
		}
		public void setSavingRootOrg(Boolean value)
		{
			cxl_SavingRootOrg.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SavingRootOrg = null;
		public boolean getEditObjectIsNotNull()
		{
			return !cxl_EditObject.getValueIsNull(context);
		}
		public ims.vo.ValueObject getEditObject()
		{
			return (ims.vo.ValueObject)cxl_EditObject.getValue(context);
		}
		public void setEditObject(ims.vo.ValueObject value)
		{
			cxl_EditObject.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditObject = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class OrganisationLocation implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int CREATEROOTORG = 10;
			public static final int CREATEORGHERE = 11;
			public static final int CREATELOC = 12;
			public static final int EDIT = 13;
			public static final int RENAME = 14;
			public static final int ACTIVATE = 15;
			public static final int REMOVE = 16;
			public static final int INACTIVATE = 17;
		}
		public void disableAllOrganisationLocationMenuItems()
		{
			this.contextMenuOrganisationLocationCREATEROOTORGItem.setEnabled(false);
			this.contextMenuOrganisationLocationCREATEORGHEREItem.setEnabled(false);
			this.contextMenuOrganisationLocationCREATELOCItem.setEnabled(false);
			this.contextMenuOrganisationLocationEDITItem.setEnabled(false);
			this.contextMenuOrganisationLocationRENAMEItem.setEnabled(false);
			this.contextMenuOrganisationLocationACTIVATEItem.setEnabled(false);
			this.contextMenuOrganisationLocationREMOVEItem.setEnabled(false);
			this.contextMenuOrganisationLocationINACTIVATEItem.setEnabled(false);
		}
		public void hideAllOrganisationLocationMenuItems()
		{
			this.contextMenuOrganisationLocationCREATEROOTORGItem.setVisible(false);
			this.contextMenuOrganisationLocationCREATEORGHEREItem.setVisible(false);
			this.contextMenuOrganisationLocationCREATELOCItem.setVisible(false);
			this.contextMenuOrganisationLocationEDITItem.setVisible(false);
			this.contextMenuOrganisationLocationRENAMEItem.setVisible(false);
			this.contextMenuOrganisationLocationACTIVATEItem.setVisible(false);
			this.contextMenuOrganisationLocationREMOVEItem.setVisible(false);
			this.contextMenuOrganisationLocationINACTIVATEItem.setVisible(false);
		}
		private Menu contextMenuOrganisationLocation;
		public MenuItem getOrganisationLocationCREATEROOTORGItem()
		{
			return this.contextMenuOrganisationLocationCREATEROOTORGItem;
		}
		private MenuItem contextMenuOrganisationLocationCREATEROOTORGItem;
		public MenuItem getOrganisationLocationCREATEORGHEREItem()
		{
			return this.contextMenuOrganisationLocationCREATEORGHEREItem;
		}
		private MenuItem contextMenuOrganisationLocationCREATEORGHEREItem;
		public MenuItem getOrganisationLocationCREATELOCItem()
		{
			return this.contextMenuOrganisationLocationCREATELOCItem;
		}
		private MenuItem contextMenuOrganisationLocationCREATELOCItem;
		public MenuItem getOrganisationLocationEDITItem()
		{
			return this.contextMenuOrganisationLocationEDITItem;
		}
		private MenuItem contextMenuOrganisationLocationEDITItem;
		public MenuItem getOrganisationLocationRENAMEItem()
		{
			return this.contextMenuOrganisationLocationRENAMEItem;
		}
		private MenuItem contextMenuOrganisationLocationRENAMEItem;
		public MenuItem getOrganisationLocationACTIVATEItem()
		{
			return this.contextMenuOrganisationLocationACTIVATEItem;
		}
		private MenuItem contextMenuOrganisationLocationACTIVATEItem;
		public MenuItem getOrganisationLocationREMOVEItem()
		{
			return this.contextMenuOrganisationLocationREMOVEItem;
		}
		private MenuItem contextMenuOrganisationLocationREMOVEItem;
		public ReadOnlyMenuItem getOrganisationLocationINACTIVATEItem()
		{
			return this.contextMenuOrganisationLocationINACTIVATEItem;
		}
		private MenuItem contextMenuOrganisationLocationINACTIVATEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
