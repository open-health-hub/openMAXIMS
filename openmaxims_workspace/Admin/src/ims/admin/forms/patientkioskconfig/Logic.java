//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.65 build 3195.17642)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.patientkioskconfig;

import java.util.List;
import java.util.ArrayList;

import ims.admin.forms.patientkioskconfig.GenForm.grdMessagesRow;
import ims.admin.vo.lookups.PatientKioskMessages;
import ims.core.vo.PatientKioskMessageVo;
import ims.core.vo.PatientKioskMessageVoCollection;
import ims.core.vo.PatientKioskSettingsVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	public boolean save() throws PresentationLogicException 
	{
		PatientKioskSettingsVo saveVo = form.getLocalContext().getSelectedKioskSettings();
		saveVo = populateDataFromScreenMsg();
		
		String[] errors = saveVo.validate(validateUIRules());
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Errors",errors);
			return false;
		}
		
		try
		{
			saveVo = domain.savePatientKioskSettings(saveVo);
		}
		catch (DomainInterfaceException err)
		{
			engine.showMessage("Domain Interface Exception " + err.toString());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("Data has been modified by another user - screen will be refreshed");
			form.setMode(FormMode.VIEW);
			return false;			
		}
		form.getLocalContext().setSelectedKioskSettings(saveVo);
		form.getLocalContext().setSelectedKioskMessages(saveVo.getMessages());
		form.setMode(FormMode.VIEW);
		return true;
	}
	
	public void updateControlsState() 
	{
		//TODO
	}
	
	public void updateInstance() 
	{
		form.getLocalContext().setSelectedKioskSettings(domain.getPatientKioskSettings(null));
		form.getLocalContext().setSelectedKioskMessages(domain.getPatientKioskSettings(null).getMessages());
		form.setMode(FormMode.EDIT);		
	}
	
	public void open() throws PresentationLogicException 
	{
		clearScreen();
		
		populateInstanceControls();
		
		form.setMode(FormMode.VIEW);
	}

	protected void populateScreenFromData(ims.core.vo.PatientKioskSettingsVo value)
	{
		clearScreen();
		super.populateScreenFromData(value);
		
		form.grdMessages().getRows().clear();
		
		PatientKioskMessageVoCollection msgsVoColl = value.getMessages();
		
		if (msgsVoColl != null)
		{
			for (int i=0; i<msgsVoColl.size();i++) {
				grdMessagesRow row = form.grdMessages().getRows().newRow();
				if (msgsVoColl.get(i).getMessageTypeIsNotNull())
					row.setColMessageType(msgsVoColl.get(i).getMessageType().getText());
				if (msgsVoColl.get(i).getMessageTextIsNotNull())
					row.setColMessageText(msgsVoColl.get(i).getMessageText());

				row.setTooltip(setToolTips(msgsVoColl.get(i).getMessageType()));
			}			
		}
	}

	private String setToolTips(PatientKioskMessages value)
	{
		if (value.equals(PatientKioskMessages.WELCOME_MESSAGE))
			 return "This messsage is used in the first screen";

		if (value.equals(PatientKioskMessages.ENTER_SURNAME_MESSAGE))
			return "This message is used when you have to enter your surname";

		if (value.equals(PatientKioskMessages.ENTER_DOB_MESSAGE))
			return "This message is used when you have to enter your date of birth";

		if (value.equals(PatientKioskMessages.ENTER_GENDER_MESSAGE))
			return "This message is used when you have to enter your gender";

		if (value.equals(PatientKioskMessages.ENTER_POSTCODE_MESSAGE))
			return "This message appears when you have to enter your address postcode";
		
		if (value.equals(PatientKioskMessages.SEARCH_FAILED_MESSAGE))
			return "This message appears when the search returns an error";

		if (value.equals(PatientKioskMessages.CONFIRM_IDENTITY_MESSAGE))
			return "This message appears when you are asked to confirm your identity";
		
		if (value.equals(PatientKioskMessages.CONFIRM_APPOINTMENTS_MESSAGE))
			return "This message appears when you are asked to confirm your appointments";
		
		if (value.equals(PatientKioskMessages.CONFIRM_FAILED_MESSAGE))
			return "This message appears when the confirmation returns an error";;
		
		if (value.equals(PatientKioskMessages.PATIENT_LATE_MESSAGE))
			return "This message appears when the patient arrived later than the first appointment";
		
		if (value.equals(PatientKioskMessages.APPOINTMENTS_CONFIRMED_MESSAGE))
			return "This message appears when the confirmation was successfully";

		if (value.equals(PatientKioskMessages.GOTO_RECEPTION_MESSAGE))
			return "This message appears when the patient is guided to the reception";	
		
		return "";
	}
	
	protected ims.core.vo.PatientKioskSettingsVo populateDataFromScreenMsg()
	{
		PatientKioskSettingsVo newVo = form.getLocalContext().getSelectedKioskSettings();
		newVo = super.populateDataFromScreen(newVo);
		newVo.setMessages(getSettingsMessages());
		return newVo;
	}
	
	private PatientKioskMessageVoCollection getSettingsMessages()
	{
		PatientKioskMessageVoCollection voColl = form.getLocalContext().getSelectedKioskMessages();
		
		if (form.grdMessages().getRows() != null)
		{
			for (int x=0; x<form.grdMessages().getRows().size(); x++) 
			{
				PatientKioskMessageVo vo =  voColl.get(x);

				if (getRowMessageType(form.grdMessages().getRows().get(x).getColMessageType()) != null)
					vo.setMessageType(getRowMessageType(form.grdMessages().getRows().get(x).getColMessageType()));
				if (form.grdMessages().getRows().get(x).getColMessageText() != null)
					vo.setMessageText(form.grdMessages().getRows().get(x).getColMessageText());

				voColl.add(vo);
			}
		}
			
		return voColl;		
	}
	
	private PatientKioskMessages getRowMessageType(String value)
	{
		if (value.equals(PatientKioskMessages.WELCOME_MESSAGE.getText()))
			return PatientKioskMessages.WELCOME_MESSAGE;

		if (value.equals(PatientKioskMessages.ENTER_SURNAME_MESSAGE.getText()))
			return PatientKioskMessages.ENTER_SURNAME_MESSAGE;

		if (value.equals(PatientKioskMessages.ENTER_DOB_MESSAGE.getText()))
			return PatientKioskMessages.ENTER_DOB_MESSAGE;

		if (value.equals(PatientKioskMessages.ENTER_GENDER_MESSAGE.getText()))
			return PatientKioskMessages.ENTER_GENDER_MESSAGE;

		if (value.equals(PatientKioskMessages.ENTER_POSTCODE_MESSAGE.getText()))
			return PatientKioskMessages.ENTER_POSTCODE_MESSAGE;
		
		if (value.equals(PatientKioskMessages.SEARCH_FAILED_MESSAGE.getText()))
			return PatientKioskMessages.SEARCH_FAILED_MESSAGE;

		if (value.equals(PatientKioskMessages.CONFIRM_IDENTITY_MESSAGE.getText()))
			return PatientKioskMessages.CONFIRM_IDENTITY_MESSAGE;
		
		if (value.equals(PatientKioskMessages.CONFIRM_APPOINTMENTS_MESSAGE.getText()))
			return PatientKioskMessages.CONFIRM_APPOINTMENTS_MESSAGE;
		
		if (value.equals(PatientKioskMessages.CONFIRM_FAILED_MESSAGE.getText()))
			return PatientKioskMessages.CONFIRM_FAILED_MESSAGE;
		
		if (value.equals(PatientKioskMessages.PATIENT_LATE_MESSAGE.getText()))
			return PatientKioskMessages.PATIENT_LATE_MESSAGE;
		
		if (value.equals(PatientKioskMessages.APPOINTMENTS_CONFIRMED_MESSAGE.getText()))
			return PatientKioskMessages.APPOINTMENTS_CONFIRMED_MESSAGE;

		if (value.equals(PatientKioskMessages.GOTO_RECEPTION_MESSAGE.getText()))
			return PatientKioskMessages.GOTO_RECEPTION_MESSAGE;
		
		return null;
	}
	
	private void populateInstanceControls() 
	{
		populateScreenFromData(domain.getPatientKioskSettings(null));
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}		

	public String[] validateUIRules()
	{
		List<String> uiErrors =  new ArrayList<String>();
		
		String[] errors = new String[uiErrors.size()];
		uiErrors.toArray(errors);
		return errors;
	}

	public void clearInstanceControls() {
		// TODO Auto-generated method stub
		
	}

	public void newInstance() throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}	
}
