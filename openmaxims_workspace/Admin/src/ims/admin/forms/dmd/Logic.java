//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.65 build 3223.30681)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.dmd;

import ims.clinical.configuration.vo.VMPRefVo;
import ims.clinical.configuration.vo.VTMRefVo;
import ims.clinical.vo.AMPVo;
import ims.clinical.vo.VMPVo;
import ims.clinical.vo.VTMVo;
import ims.clinical.vo.enums.DMDType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.interfaces.IDMDValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.DMD_VTM.ADD:
				AddVTMToHotlist();
				break;
			case GenForm.ContextMenus.AdminNamespace.DMD_VTM.REMOVE:
				RemoveVTMFromHotlist();
				break;
		}
	}
	@Override
	protected void onGrdAMPSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{		
		form.grdVTM().getRows().clear();
		form.grdVMP().getRows().clear();
		
		try 
		{
			IDMDValue amp = form.grdAMP().getValue();
			
			VMPRefVo vmpRef = ((AMPVo)amp).getVMP();
			if(vmpRef != null)
			{
				VMPVo vmp = domain.getVMP(((AMPVo)amp).getVMP());
				
				if(vmp != null)
				{
					addVMPItem(vmp);
					if (vmp.getVTM() != null)  //VTMID is optional SN.
						addVTMItem(domain.getVTM(vmp.getVTM()));
				}
			}
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage(), "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
		
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onGrdVMPSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdVTM().getRows().clear();
		form.grdAMP().getRows().clear();
		
		try 
		{
			IDMDValue vmp = form.grdVMP().getValue();
			VTMRefVo vtmRef = ((VMPVo)vmp).getVTM();
			if(vtmRef != null)
			{
				addVTMItem(domain.getVTM(vtmRef));
			}
			
			populateAMPValues(domain.searchAMP(form.grdVMP().getValue()));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage(), "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
		
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onGrdVTMSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{			
		form.grdVMP().getRows().clear();
		form.grdAMP().getRows().clear();
		updateControlsState();
		
		try 
		{						
			populateVMPValues(domain.searchVMP(form.grdVTM().getValue()));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage(), "Error", MessageButtons.OK, MessageIcon.ERROR);
		}
		
		form.fireCustomControlValueChanged();
	}	
	private void updateControlsState() 
	{
		updateContextMenuState();
	}
	private void updateContextMenuState() 
	{		
		boolean isVisible = form.getLocalContext().getSpecialty() != null && form.getLocalContext().getSelectionLevelIsNotNull() && form.grdVTM().getValue() != null;
		form.getContextMenus().Admin.getDMD_VTMADDItem().setVisible(isVisible);
		form.getContextMenus().Admin.getDMD_VTMREMOVEItem().setVisible(isVisible);
	}
	public IDMDValue getValue() 
	{		
		if(form.grdVMP().getValue() != null)
		{
			return form.grdVMP().getValue();		
		}
		else if(form.grdAMP().getValue() != null)
		{
			return form.grdAMP().getValue();		
		}
		else
		{
			if (form.getLocalContext().getallowVTMSelectionIsNotNull() &&
					form.getLocalContext().getallowVTMSelection())
			{
				if(form.grdVTM().getValue() != null)
				{
					return form.grdVTM().getValue();		
				}
			}
		}
		
		return null;
	}
	private void clearControls()
	{		
		form.grdVTM().getRows().clear();
		form.grdVMP().getRows().clear();
		form.grdAMP().getRows().clear();
	}	
	private void addVTMItem(IDMDValue item) 
	{
		if(item == null)
			return;
				
		
		GenForm.grdVTMRow row = form.grdVTM().getRows().newRow();
		row.setcolName(item.getIDMDValueText());
		row.setValue(item);
	}	
	private void populateVMPValues(IDMDValue[] result) 
	{
		if(result == null)
			return;
		
		form.grdVMP().getRows().clear();
		
		for(int x = 0; x < result.length; x++)
		{
			addVMPItem(result[x]);
		}
	}
	private void addVMPItem(IDMDValue item) 
	{
		if(item == null)
			return;
		
		GenForm.grdVMPRow row = form.grdVMP().getRows().newRow();
		row.setcolName(item.getIDMDValueText());
		row.setValue(item);
	}
	private void populateAMPValues(IDMDValue[] result) 
	{
		if(result == null)
			return;
		
		form.grdAMP().getRows().clear();
		
		for(int x = 0; x < result.length; x++)
		{
			addAMPItem(result[x]);
		}
	}
	private void addAMPItem(IDMDValue item) 
	{
		if(item == null)
			return;
		
		GenForm.grdAMPRow row = form.grdAMP().getRows().newRow();
		row.setcolName(item.getIDMDValueText());
		row.setValue(item);
	}
	
	public void setValue(IDMDValue value, ims.clinical.vo.enums.DMDType selectionLevel) 
	{
		clearControls();
		
		if(value != null)
		{
			setValues(new IDMDValue[] { value }, selectionLevel);
		}
	}
	public void setValues(IDMDValue[] values, ims.clinical.vo.enums.DMDType selectionLevel) 
	{
		clearControls();
				
		if(values != null)
		{
			for(int x = 0; x < values.length; x++)
			{
				IDMDValue value = values[x];
				if(value != null && value.getIDMDValueType() != null)
				{
					if(value.getIDMDValueType().equals(DMDType.VTM))
					{
						addVTMItem(value);
					}
					else if(value.getIDMDValueType().equals(DMDType.VMP))
					{
						addVMPItem(value);
					}
					else if(value.getIDMDValueType().equals(DMDType.AMP))
					{
						addAMPItem(value);
					}
				}
			}
		}
		
		setSelectionLevel(selectionLevel);
	}
	private void setSelectionLevel(DMDType selectionLevel) 
	{
		if(selectionLevel == null)
		{
			throw new CodingRuntimeException("Invalid selection level");
		}
		else
		{
			form.getLocalContext().setSelectionLevel(selectionLevel);
			
			if(selectionLevel == DMDType.AMP)
			{
				form.grdVTM().setSelectable(false);
				form.grdVMP().setSelectable(false);
				form.grdAMP().setSelectable(true);
			}
			else if(selectionLevel == DMDType.VMP)
			{
				form.grdVTM().setSelectable(false);
				form.grdVMP().setSelectable(true);
				form.grdAMP().setSelectable(true);				
			}
			else if(selectionLevel == DMDType.VTM)
			{
				form.grdVTM().setSelectable(true);
				form.grdVMP().setSelectable(true);
				form.grdAMP().setSelectable(true);				
			}
		}		
	}
	public AMPVo getAMP() 
	{
		if(form.grdAMP().getValue() != null)
			return (AMPVo)form.grdAMP().getValue();
		
		return null;
	}
	public VMPVo getVMP() 
	{
		if(form.grdVMP().getValue() != null)
			return (VMPVo)form.grdVMP().getValue();
		else if(form.grdVMP().getRows().size() > 0)
			return (VMPVo)form.grdVMP().getRows().get(0).getValue();
		
		return null;
	}
	public VTMVo getVTM() 
	{
		if(form.grdVTM().getValue() != null)
			return (VTMVo)form.grdVTM().getValue();
		else if(form.grdVTM().getRows().size() > 0)
			return (VTMVo)form.grdVTM().getRows().get(0).getValue();
		
		return null;
	}
	private boolean AddVTMToHotlist()
	{				
		if(form.grdVTM().getValue() != null)
		{
	 		try 
	 		{
				domain.addToHotlist(form.getLocalContext().getSpecialty(), (VTMVo)form.grdVTM().getValue());
				return true;
			} 
	 		catch (StaleObjectException e) 
	 		{				
			}
		}
		
		return false;
	}
	private boolean RemoveVTMFromHotlist()
	{
		if(form.grdVTM().getValue() != null)
		{
			try 
			{
				domain.removeFromHotlist(form.getLocalContext().getSpecialty(), (VTMRefVo)form.grdVTM().getValue());
				return true;
			} 
			catch (StaleObjectException e) 
			{
			}
		}
		
		return false;
	}
	public void initialize(Specialty specialty, Boolean allowVTMSelection) 
	{
		form.getLocalContext().setSpecialty(specialty);
		form.getLocalContext().setallowVTMSelection(allowVTMSelection);
		updateControlsState();
	}
}
