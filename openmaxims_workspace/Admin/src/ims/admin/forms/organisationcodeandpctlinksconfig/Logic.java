//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.organisationcodeandpctlinksconfig;

import ims.admin.vo.OrganisationPCTLinkConfigVo;
import ims.admin.vo.OrganisationPCTLinkConfigVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final String EDITORGANISATION="EDITORGANISATION";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		populateScreenFromData();
		updateControlsState();
		form.getLocalContext().setEditOrganisationLocalContext(false);
	}
	
	private void populateScreenFromData() 
	{
		form.treOrgPCTCode().clear();
		OrganisationPCTLinkConfigVoCollection  orgPctCollection=domain.listOrganisationPCTCode();
		if (orgPctCollection == null)
		{
			return;
		}
		
		for (int i = 0; i < orgPctCollection.size(); i++)
		{
			OrganisationPCTLinkConfigVo orgPct = orgPctCollection.get(i);
			
			if (!isNodeInTree(orgPctCollection.get(i).getOrganisationCode()))
			{		
				TreeNode nodeOrganisation = form.treOrgPCTCode().getNodes().add(orgPct, orgPct.getOrganisationCode());
				
				nodeOrganisation.setValue(orgPct.getOrganisationCode());
				nodeOrganisation.setExpanded(true);
				nodeOrganisation.setExpandedImage(form.getImages().Admin.Organisation);
				nodeOrganisation.setCollapsedImage(form.getImages().Admin.Organisation);
				
				addPCTCodeToOrganisation(nodeOrganisation, orgPct);			
			}
			else
			{
				TreeNode nodeOrganisation=form.treOrgPCTCode().getNodeByValue(orgPct.getOrganisationCode());
				addPCTCodeToOrganisation(nodeOrganisation, orgPct);
			}
				
		}
	}

	private void addPCTCodeToOrganisation(TreeNode nodeOrganisation,OrganisationPCTLinkConfigVo orgPct) 
	{
			TreeNode nodePCT =nodeOrganisation.getNodes().add(orgPct.getPctCode(), orgPct.getPctCode());
			nodePCT.setValue(orgPct);
			nodePCT.setExpandedImage(form.getImages().Admin.LocationSite);
			nodePCT.setCollapsedImage(form.getImages().Admin.LocationSite);
	}
	
	private boolean isNodeInTree(String organisationCode) 
	{
		for (int i=0;i<form.treOrgPCTCode().getNodes().size();i++)
		{
			TreeNode node = form.treOrgPCTCode().getNodes().get(i);
			if (node.getValue().equals(organisationCode))
			{
				return true;
			}
		}
		
		return false;
	}
	@Override
	protected void onTreOrgPCTCodeTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.AddOrganisationCode:
				newOrganisationCode();
				break;
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.EditOrganisationCode:
				updateOrganisationCode();
				break;
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.RemoveOrganisationCode:
				engine.showMessage("Do you really want to remove \"Organisation and PCT Code\"", "Remove Organisation Code", MessageButtons.YESNO, MessageIcon.WARNING, MessageDefaultButton.BUTTON2);
				break;
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.AddPCTCode:
				newPCTCode();
				break;
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.EditPCTCode:
				updatePCTCode();
				break;
			case GenForm.ContextMenus.AdminNamespace.OrganisationAndPCTCode.RemovePCTCode:	
				engine.showMessage("Do you really want to remove \"PCT Code\"", "Remove PCT Code", MessageButtons.YESNO, MessageIcon.WARNING, MessageDefaultButton.BUTTON2);
				break;
		}
	}
	
	
	private void newPCTCode() 
	{
		form.getGlobalContext().Admin.setOrganisationPCTLinkConfigGlobalContext(new OrganisationPCTLinkConfigVo());
		form.getGlobalContext().Admin.getOrganisationPCTLinkConfigGlobalContext().setOrganisationCode(form.treOrgPCTCode().getSelectedNode().getText());
		
		engine.open(form.getForms().Admin.OrganisationCodeAndPCTLinksConfigDialog);	
	}
	
	private void newOrganisationCode() 
	{
		form.getGlobalContext().Admin.setOrganisationPCTLinkConfigGlobalContext(new OrganisationPCTLinkConfigVo());
		engine.open(form.getForms().Admin.OrganisationCodeAndPCTLinksConfigDialog);
	}
	
	private void updateOrganisationCode() 
	{
		
		if (form.treOrgPCTCode().getSelectedNode().getNodes().get(0).getValue() instanceof OrganisationPCTLinkConfigVo)
		{
			form.getGlobalContext().Admin.setOrganisationPCTLinkConfigGlobalContext((OrganisationPCTLinkConfigVo)form.treOrgPCTCode().getSelectedNode().getNodes().get(0).getValue());
		}
		
		form.getLocalContext().setEditOrganisationLocalContext(true);
		
		Object[] parameters =new Object[1];
		parameters[0]=EDITORGANISATION;
		
		engine.open(form.getForms().Admin.OrganisationCodeAndPCTLinksConfigDialog ,parameters);	
	}
	
	private void updatePCTCode() 
	{
		if (form.treOrgPCTCode().getSelectedNode().getValue() instanceof OrganisationPCTLinkConfigVo)
		{
			form.getGlobalContext().Admin.setOrganisationPCTLinkConfigGlobalContext((OrganisationPCTLinkConfigVo)form.treOrgPCTCode().getValue());
		}
		engine.open(form.getForms().Admin.OrganisationCodeAndPCTLinksConfigDialog);
	}
	
	private void removeInstance() 
	{

		if (form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo)
		{
			form.getLocalContext().setLocalContextOrgPCTCode((OrganisationPCTLinkConfigVo)form.treOrgPCTCode().getValue());
		}
		else
		{
			form.getLocalContext().setLocalContextOrgPCTCode((OrganisationPCTLinkConfigVo)form.treOrgPCTCode().getSelectedNode().getNodes().get(0).getValue());
		}

		if (domain.isStale(form.getLocalContext().getLocalContextOrgPCTCode()))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setLocalContextOrgPCTCode(null);
			return;
		}
			
		try
		{
			domain.removeOrgPCTCode(form.getLocalContext().getLocalContextOrgPCTCode());	
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage("This Configuration is in use!");
			return ;
		}			
		return ;
		
	}
	
	public void updateControlsState()
	{									 
		form.getContextMenus().Admin.getOrganisationAndPCTCodeAddOrganisationCodeItem().setVisible(true);
		form.getContextMenus().Admin.getOrganisationAndPCTCodeEditOrganisationCodeItem().setVisible(form.treOrgPCTCode().getSelectedNode()!=null && (!(form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo)));
		form.getContextMenus().Admin.getOrganisationAndPCTCodeRemoveOrganisationCodeItem().setVisible(form.treOrgPCTCode().getSelectedNode()!=null && (!(form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo))&& (form.treOrgPCTCode().getSelectedNode().getNodes().size()==1));
		
		form.getContextMenus().Admin.getOrganisationAndPCTCodeAddPCTCodeItem().setVisible(form.treOrgPCTCode().getSelectedNode()!=null && (!(form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo)));
		form.getContextMenus().Admin.getOrganisationAndPCTCodeEditPCTCodeItem().setVisible(form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo);
		form.getContextMenus().Admin.getOrganisationAndPCTCodeRemovePCTCodeItem().setVisible(form.treOrgPCTCode().getValue() instanceof OrganisationPCTLinkConfigVo);
		
	}
	
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		OrganisationPCTLinkConfigVo orgPctToSave = form.getLocalContext().getLocalContextOrgPCTCode();
		
		String[] errors = orgPctToSave.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors); 
			return false;
		}
		
		if (orgPctToSave.getID_OrganisationPCTLinkConfigIsNotNull()&& domain.isStale(orgPctToSave)) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setLocalContextOrgPCTCode(null);
			return false;
		}
		
		try
		{	
			orgPctToSave=domain.save(orgPctToSave);	
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}	

		return true;		
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		
		if (result.equals(DialogResult.OK)&& form.getLocalContext().getEditOrganisationLocalContext()==false)
		{
			form.getLocalContext().setLocalContextOrgPCTCode(form.getGlobalContext().Admin.getOrganisationPCTLinkConfigGlobalContext());
			save();
		}
		else if (result.equals(DialogResult.OK) && form.getLocalContext().getEditOrganisationLocalContext()==true)
		{
			OrganisationPCTLinkConfigVoCollection orgPCTCodeCollection = domain.gePCTCodeForOrganisation(form.treOrgPCTCode().getValue().toString());
			
			for (int i=0;i<orgPCTCodeCollection.size();i++)
			{
				form.getLocalContext().setLocalContextOrgPCTCode(orgPCTCodeCollection.get(i));
				form.getLocalContext().getLocalContextOrgPCTCode().setOrganisationCode(form.getGlobalContext().Admin.getOrganisationPCTLinkConfigGlobalContext().getOrganisationCode());
				save();
			}
		}
		
		open();
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)throws PresentationLogicException 
	{
		if (result.equals(DialogResult.YES))
		{
			removeInstance();
		}
		
		open();
		
	}	
}
