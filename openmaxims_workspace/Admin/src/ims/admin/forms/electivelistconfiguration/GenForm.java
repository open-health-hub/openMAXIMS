//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.electivelistconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class qmbServiceComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.admin.vo.ServiceForElectiveListConfigVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.admin.vo.ServiceForElectiveListConfigVo getValue()
			{
				return (ims.admin.vo.ServiceForElectiveListConfigVo)super.control.getValue();
			}
			public void setValue(ims.admin.vo.ServiceForElectiveListConfigVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class grdConsultantsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdConsultantsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColConsultantsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColConsultantsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColConsultantsOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColConsultants(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.framework.controls.GridMutableComboBox getColConsultants()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 0);
			}
			public void setCellColConsultantsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColDefaultReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColDefaultReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColDefaultOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColDefault(String value)
			{
				super.row.setTooltip(1, value);
			}
			public boolean getColDefault()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setColDefault(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellColDefaultTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getValue()
			{
				return (String)super.row.getValue();
			}
			public void setValue(String value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdConsultantsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdConsultantsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdConsultantsRow get(int index)
			{
				return new grdConsultantsRow(super.collection.get(index));
			}
			public grdConsultantsRow newRow()
			{
				return new grdConsultantsRow(super.collection.newRow());
			}
			public grdConsultantsRow newRow(boolean autoSelect)
			{
				return new grdConsultantsRow(super.collection.newRow(autoSelect));
			}
			public grdConsultantsRow newRowAt(int index)
			{
				return new grdConsultantsRow(super.collection.newRowAt(index));
			}
			public grdConsultantsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdConsultantsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdConsultantsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public String[] getValues()
			{
				String[] listOfValues = new String[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public String getValue()
			{
				return (String)super.grid.getValue();
			}
			public void setValue(String value)
			{
				super.grid.setValue(value);
			}
			public grdConsultantsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdConsultantsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdConsultantsRowCollection getRows()
			{
				return new grdConsultantsRowCollection(super.grid.getRows());
			}
			public grdConsultantsRow getRowByValue(String value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdConsultantsRow(row);
			}
			public void setColConsultantsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColConsultantsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColDefaultHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColDefaultHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdHospitalsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdHospitalsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColHospitalsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColHospitalsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColHospitalsOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColHospitals(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.framework.controls.GridMutableComboBox getColHospitals()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 0);
			}
			public void setCellColHospitalsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getValue()
			{
				return (String)super.row.getValue();
			}
			public void setValue(String value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdHospitalsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdHospitalsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdHospitalsRow get(int index)
			{
				return new grdHospitalsRow(super.collection.get(index));
			}
			public grdHospitalsRow newRow()
			{
				return new grdHospitalsRow(super.collection.newRow());
			}
			public grdHospitalsRow newRow(boolean autoSelect)
			{
				return new grdHospitalsRow(super.collection.newRow(autoSelect));
			}
			public grdHospitalsRow newRowAt(int index)
			{
				return new grdHospitalsRow(super.collection.newRowAt(index));
			}
			public grdHospitalsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdHospitalsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdHospitalsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			public String[] getValues()
			{
				String[] listOfValues = new String[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public String getValue()
			{
				return (String)super.grid.getValue();
			}
			public void setValue(String value)
			{
				super.grid.setValue(value);
			}
			public grdHospitalsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdHospitalsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdHospitalsRowCollection getRows()
			{
				return new grdHospitalsRowCollection(super.grid.getRows());
			}
			public grdHospitalsRow getRowByValue(String value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdHospitalsRow(row);
			}
			public void setColHospitalsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColHospitalsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 120, 56, 135, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Specialty Value >>", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 640, 34, 43, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Active:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 50, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 640, 8, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "End Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 392, 8, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Start Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 34, 108, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Elective List Code:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 113, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Elective List Name:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 32, 128, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(20), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 120, 6, 257, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(150), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 696, 6, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 496, 6, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 257, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbServiceTemp);
			qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
			super.addComboBox(qmbService);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 696, 34, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"", Boolean.TRUE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 371, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdConsultantsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdConsultantsTemp);
			grdConsultantsGrid grdConsultants = (grdConsultantsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdConsultantsGrid.class, m_grdConsultantsTemp);
			grdConsultants.addMutableComboBoxColumn("List Owners", 0, 0, 305, false, true, true, false, true, true, -1);
			grdConsultants.addBoolColumn("Default", 0, 0, -1, false, true, 0, true);
			super.addGrid(grdConsultants);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 392, 80, 432, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			Grid m_grdHospitalsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdHospitalsTemp);
			grdHospitalsGrid grdHospitals = (grdHospitalsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHospitalsGrid.class, m_grdHospitalsTemp);
			grdHospitals.addMutableComboBoxColumn("Locations", 0, 0, -1, false, true, true, false, true, true, -1);
			super.addGrid(grdHospitals);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lblSpecialtyValueDetails()
		{
			return (Label)super.getControl(0);
		}
		public TextBox txtCode()
		{
			return (TextBox)super.getControl(8);
		}
		public TextBox txtWaitingListName()
		{
			return (TextBox)super.getControl(9);
		}
		public DateControl dteEnd()
		{
			return (DateControl)super.getControl(10);
		}
		public DateControl dteStart()
		{
			return (DateControl)super.getControl(11);
		}
		public qmbServiceComboBox qmbService()
		{
			return (qmbServiceComboBox)super.getComboBox(0);
		}
		public CheckBox chkActive()
		{
			return (CheckBox)super.getControl(13);
		}
		public grdConsultantsGrid grdConsultants()
		{
			return (grdConsultantsGrid)super.getGrid(0);
		}
		public grdHospitalsGrid grdHospitals()
		{
			return (grdHospitalsGrid)super.getGrid(1);
		}
	}
	public static class qmbConsultantComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbServiceSearchComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.ServiceForElectiveListConfigVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.ServiceForElectiveListConfigVo getValue()
		{
			return (ims.admin.vo.ServiceForElectiveListConfigVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.ServiceForElectiveListConfigVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdWaitingListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdWaitingListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColWaitingListNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColWaitingListNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColWaitingListNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColWaitingListName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColWaitingListName()
		{
			return (String)super.row.get(0);
		}
		public void setColWaitingListName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColWaitingListNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColStartDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColStartDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColStartDateOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColStartDate(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColStartDate()
		{
			return (String)super.row.get(1);
		}
		public void setColStartDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColStartDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColEndDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColEndDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColEndDateOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColEndDate(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColEndDate()
		{
			return (String)super.row.get(2);
		}
		public void setColEndDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColEndDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColServiceReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColServiceReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColServiceOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColService(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColService()
		{
			return (String)super.row.get(3);
		}
		public void setColService(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColServiceTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColConsultantsReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColConsultantsReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColConsultantsOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColConsultants(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColConsultants()
		{
			return (String)super.row.get(4);
		}
		public void setColConsultants(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColConsultantsTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColHospitalsReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColHospitalsReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColHospitalsOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColHospitals(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColHospitals()
		{
			return (String)super.row.get(5);
		}
		public void setColHospitals(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColHospitalsTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColActiveReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColActiveOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColActive(String value)
		{
			super.row.setTooltip(6, value);
		}
		public boolean getColActive()
		{
			return ((Boolean)super.row.get(6)).booleanValue();
		}
		public void setColActive(boolean value)
		{
			super.row.set(6, new Boolean(value));
		}
		public void setCellColActiveTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.admin.vo.ElectiveListConfigurationVo getValue()
		{
			return (ims.admin.vo.ElectiveListConfigurationVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdWaitingListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdWaitingListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdWaitingListRow get(int index)
		{
			return new grdWaitingListRow(super.collection.get(index));
		}
		public grdWaitingListRow newRow()
		{
			return new grdWaitingListRow(super.collection.newRow());
		}
		public grdWaitingListRow newRow(boolean autoSelect)
		{
			return new grdWaitingListRow(super.collection.newRow(autoSelect));
		}
		public grdWaitingListRow newRowAt(int index)
		{
			return new grdWaitingListRow(super.collection.newRowAt(index));
		}
		public grdWaitingListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdWaitingListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdWaitingListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.admin.vo.ElectiveListConfigurationVoCollection getValues()
		{
			ims.admin.vo.ElectiveListConfigurationVoCollection listOfValues = new ims.admin.vo.ElectiveListConfigurationVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.ElectiveListConfigurationVo getValue()
		{
			return (ims.admin.vo.ElectiveListConfigurationVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			super.grid.setValue(value);
		}
		public grdWaitingListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdWaitingListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdWaitingListRowCollection getRows()
		{
			return new grdWaitingListRowCollection(super.grid.getRows());
		}
		public grdWaitingListRow getRowByValue(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdWaitingListRow(row);
		}
		public void setColWaitingListNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColWaitingListNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColStartDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColStartDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColEndDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColEndDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColServiceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColServiceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColConsultantsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColConsultantsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColHospitalsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColHospitalsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.admin.vo.ElectiveListConfigSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.admin.vo.ElectiveListConfigSearchCriteriaVo' of the global context variable 'Admin.WaitingListConfigSearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(80);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5340001)))
			contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenu.add(contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenuADDItem);
		contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5340002)))
			contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenu.add(contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenuREMOVEItem);
		form.registerMenu(contextMenus.Admin.contextMenuWaitingListConfigConsultantsMenu);
		contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenuADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5350001)))
			contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenu.add(contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenuADDItem);
		contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5350002)))
			contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenu.add(contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenuREMOVEItem);
		form.registerMenu(contextMenus.Admin.contextMenuWaitingListConfigHospitalsMenu);
		contextMenus.Admin.contextMenuWaitingListConfigMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Admin.contextMenuWaitingListConfigMenuADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5330001)))
			contextMenus.Admin.contextMenuWaitingListConfigMenu.add(contextMenus.Admin.contextMenuWaitingListConfigMenuADDItem);
		contextMenus.Admin.contextMenuWaitingListConfigMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5330002)))
			contextMenus.Admin.contextMenuWaitingListConfigMenu.add(contextMenus.Admin.contextMenuWaitingListConfigMenuEDITItem);
		form.registerMenu(contextMenus.Admin.contextMenuWaitingListConfigMenu);


		// Container Clasess
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 352, 832, 232, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 232);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 136, 58, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<< Specialty Value >>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 398, 58, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "From Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 592, 58, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 398, 10, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 768, 58, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Active:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 398, 34, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 88, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 686, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 765, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 136, 8, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(150), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 648, 56, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 472, 56, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 472, 8, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantTemp);
		qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
		super.addComboBox(qmbConsultant);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 472, 32, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_qmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbHospitalTemp);
		qmbHospitalComboBox qmbHospital = (qmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHospitalComboBox.class, m_qmbHospitalTemp);
		super.addComboBox(qmbHospital);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 136, 32, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceSearchTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceSearchTemp);
		qmbServiceSearchComboBox qmbServiceSearch = (qmbServiceSearchComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceSearchComboBox.class, m_qmbServiceSearchTemp);
		super.addComboBox(qmbServiceSearch);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 824, 58, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 832, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdWaitingListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuWaitingListConfigMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdWaitingListTemp);
		grdWaitingListGrid grdWaitingList = (grdWaitingListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWaitingListGrid.class, m_grdWaitingListTemp);
		grdWaitingList.addStringColumn("Elective List Name", 0, 0, 230, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addStringColumn("Start Date", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addStringColumn("End Date", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addStringColumn("Service", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addStringColumn("List Owners", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addStringColumn("Locations", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdWaitingList.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdWaitingList);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 808, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 776, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for Elective Lists matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Label lblSpecialtyValueSearchCriteria()
	{
		return (Label)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public TextBox txtWaitingListNameSearch()
	{
		return (TextBox)super.getControl(14);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(15);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(16);
	}
	public qmbConsultantComboBox qmbConsultant()
	{
		return (qmbConsultantComboBox)super.getComboBox(0);
	}
	public qmbHospitalComboBox qmbHospital()
	{
		return (qmbHospitalComboBox)super.getComboBox(1);
	}
	public qmbServiceSearchComboBox qmbServiceSearch()
	{
		return (qmbServiceSearchComboBox)super.getComboBox(2);
	}
	public CheckBox chkActiveSearch()
	{
		return (CheckBox)super.getControl(20);
	}
	public grdWaitingListGrid grdWaitingList()
	{
		return (grdWaitingListGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(22);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(23);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				ServiceMultipleSelectDialog = new LocalFormName(103234);
				LocationMultipleSelectDialog = new LocalFormName(103235);
			}
			public final FormName ServiceMultipleSelectDialog;
			public final FormName LocationMultipleSelectDialog;
		}

		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			RefMan = new RefManImages();
			Clinical = new ClinicalImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Diagnosis16 = new ImageHelper(134124, "Images/RefMan/diagnosis_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Diagnosis16;
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				PatientSeenByConsultant16 = new ImageHelper(123160, "Images/Clinical/seen_by_consultant.png", new Integer(16), new Integer(16));
				PatientWithDiagnosticServices16 = new ImageHelper(123165, "Images/Clinical/diagnostic_services.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image PatientSeenByConsultant16;
			public final ims.framework.utils.Image PatientWithDiagnosticServices16;
		}
		public final CoreImages Core;
		public final RefManImages RefMan;
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_InactivateMessageBoxId = new ims.framework.ContextVariable("InactivateMessageBoxId", prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__InactivateMessageBoxId_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.admin.vo.ElectiveListConfigurationVo getSelectedRecord()
		{
			return (ims.admin.vo.ElectiveListConfigurationVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.admin.vo.ElectiveListConfigurationVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getInactivateMessageBoxIdIsNotNull()
		{
			return !cxl_InactivateMessageBoxId.getValueIsNull(context);
		}
		public Integer getInactivateMessageBoxId()
		{
			return (Integer)cxl_InactivateMessageBoxId.getValue(context);
		}
		public void setInactivateMessageBoxId(Integer value)
		{
			cxl_InactivateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InactivateMessageBoxId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class WaitingListConfigConsultantsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllWaitingListConfigConsultantsMenuMenuItems()
			{
				this.contextMenuWaitingListConfigConsultantsMenuADDItem.setEnabled(false);
				this.contextMenuWaitingListConfigConsultantsMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllWaitingListConfigConsultantsMenuMenuItems()
			{
				this.contextMenuWaitingListConfigConsultantsMenuADDItem.setVisible(false);
				this.contextMenuWaitingListConfigConsultantsMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuWaitingListConfigConsultantsMenu;
			public ReadOnlyMenuItem getWaitingListConfigConsultantsMenuADDItem()
			{
				return this.contextMenuWaitingListConfigConsultantsMenuADDItem;
			}
			private MenuItem contextMenuWaitingListConfigConsultantsMenuADDItem;
			public ReadOnlyMenuItem getWaitingListConfigConsultantsMenuREMOVEItem()
			{
				return this.contextMenuWaitingListConfigConsultantsMenuREMOVEItem;
			}
			private MenuItem contextMenuWaitingListConfigConsultantsMenuREMOVEItem;
			public final class WaitingListConfigHospitalsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int REMOVE = 4;
			}
			public void disableAllWaitingListConfigHospitalsMenuMenuItems()
			{
				this.contextMenuWaitingListConfigHospitalsMenuADDItem.setEnabled(false);
				this.contextMenuWaitingListConfigHospitalsMenuREMOVEItem.setEnabled(false);
			}
			public void hideAllWaitingListConfigHospitalsMenuMenuItems()
			{
				this.contextMenuWaitingListConfigHospitalsMenuADDItem.setVisible(false);
				this.contextMenuWaitingListConfigHospitalsMenuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuWaitingListConfigHospitalsMenu;
			public ReadOnlyMenuItem getWaitingListConfigHospitalsMenuADDItem()
			{
				return this.contextMenuWaitingListConfigHospitalsMenuADDItem;
			}
			private MenuItem contextMenuWaitingListConfigHospitalsMenuADDItem;
			public ReadOnlyMenuItem getWaitingListConfigHospitalsMenuREMOVEItem()
			{
				return this.contextMenuWaitingListConfigHospitalsMenuREMOVEItem;
			}
			private MenuItem contextMenuWaitingListConfigHospitalsMenuREMOVEItem;
			public final class WaitingListConfigMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int EDIT = 6;
			}
			public void disableAllWaitingListConfigMenuMenuItems()
			{
				this.contextMenuWaitingListConfigMenuADDItem.setEnabled(false);
				this.contextMenuWaitingListConfigMenuEDITItem.setEnabled(false);
			}
			public void hideAllWaitingListConfigMenuMenuItems()
			{
				this.contextMenuWaitingListConfigMenuADDItem.setVisible(false);
				this.contextMenuWaitingListConfigMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuWaitingListConfigMenu;
			public ReadOnlyMenuItem getWaitingListConfigMenuADDItem()
			{
				return this.contextMenuWaitingListConfigMenuADDItem;
			}
			private MenuItem contextMenuWaitingListConfigMenuADDItem;
			public ReadOnlyMenuItem getWaitingListConfigMenuEDITItem()
			{
				return this.contextMenuWaitingListConfigMenuEDITItem;
			}
			private MenuItem contextMenuWaitingListConfigMenuEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-ID", "ID_ElectiveListConfiguration");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-WAITINGLISTNAME", "WaitingListName");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-STARTDATE", "StartDate");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-ENDDATE", "EndDate");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-WAITINGLISTCODE", "WaitingListCode");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.ElectiveListConfiguration.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1028100072-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
