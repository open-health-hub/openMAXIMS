//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.admin.forms.electivelistconfiguration;


import ims.admin.forms.electivelistconfiguration.GenForm.ctnDetailsContainer.grdConsultantsRow;
import ims.admin.forms.electivelistconfiguration.GenForm.ctnDetailsContainer.grdHospitalsRow;
import ims.admin.forms.electivelistconfiguration.GenForm.grdWaitingListRow;
import ims.admin.vo.ElectiveListConfigSearchCriteriaVo;
import ims.admin.vo.ElectiveListConfigurationVo;
import ims.admin.vo.ElectiveListConfigurationVoCollection;
import ims.admin.vo.ElectiveListConsultationConfigurationVo;
import ims.admin.vo.ElectiveListConsultationConfigurationVoCollection;
import ims.admin.vo.ElectiveListHospitalConfigurationVo;
import ims.admin.vo.ElectiveListHospitalConfigurationVoCollection;
import ims.admin.vo.ServiceForElectiveListConfigVo;
import ims.admin.vo.ServiceForElectiveListConfigVoCollection;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void open() 
	{
		search(false);	
		form.setMode(FormMode.VIEW);
	}
	
	private ElectiveListConfigSearchCriteriaVo populateSearchCriteriaDataFromScreen() 
	{
		ElectiveListConfigSearchCriteriaVo searchCriteria = new ElectiveListConfigSearchCriteriaVo();
		
		searchCriteria.setWaitingListName(form.txtWaitingListNameSearch().getValue());
		searchCriteria.setService(form.qmbServiceSearch().getValue());
		searchCriteria.setConsultant((HcpLiteVo) form.qmbConsultant().getValue());
		searchCriteria.setHospital(form.qmbHospital().getValue());
		searchCriteria.setFromDate(form.dteFrom().getValue());
		searchCriteria.setToDate(form.dteTo().getValue());
		searchCriteria.setActive(form.chkActiveSearch().getValue());
		
		return searchCriteria;
		
	}
	
	private void search(boolean searchButtonPressed) 
	{
		form.grdWaitingList().getRows().clear();
		clearInstanceControls();
		
		ElectiveListConfigurationVoCollection collWaitingListConfig = domain.search(populateSearchCriteriaDataFromScreen());
		
		if (collWaitingListConfig==null || collWaitingListConfig.size()==0)
		{
			if (searchButtonPressed)
			{
				engine.showMessage("No records that match your search criteria found.", "No results", MessageButtons.OK,MessageIcon.INFORMATION);
			}
			return;
		}
		
		populateGrid(collWaitingListConfig);

		form.grdWaitingList().setValue(form.getLocalContext().getSelectedRecord());
		populateInstanceControlsFromData(form.getLocalContext().getSelectedRecord());	
	}
	
	private void populateGrid(ElectiveListConfigurationVoCollection collWaitingListConfig)
	{
		form.grdWaitingList().getRows().clear();
		
		for (int i=0;i<collWaitingListConfig.size();i++)
		{
			ElectiveListConfigurationVo value = collWaitingListConfig.get(i);
			grdWaitingListRow row = form.grdWaitingList().getRows().newRow();
			row.setValue(value);
			
			row.setColWaitingListName(value.getWaitingListName());
			row.setTooltipForColWaitingListName(value.getWaitingListName());
			row.setColStartDate(value.getStartDate()!=null ? value.getStartDate().toString() : null);
			row.setTooltipForColStartDate(value.getStartDate()!=null ? value.getStartDate().toString() : null);
			row.setColEndDate(value.getEndDate()!=null ? value.getEndDate().toString() : null);
			row.setTooltipForColEndDate(value.getEndDate()!=null ? value.getEndDate().toString() : null);
			row.setColService(value.getService().getServiceName());
			row.setTooltipForColService(populateTooltipForColService(value.getService()));//WDEV-18561
			
			String valueCons = getConsultantsToDisplay(value.getHCPs());
			row.setColConsultants(valueCons);
			row.setTooltipForColConsultants(valueCons);
			
			String valueHosp=getHospitalsToDisplay(value.getListLocations());
			row.setColHospitals(valueHosp);
			row.setTooltipForColHospitals(valueHosp);
			
			row.setColActive(value.getIsActive());
		}
	}
	
	//WDEV-18561
	private String populateTooltipForColService(ServiceForElectiveListConfigVo service)
	{
		return "Service: "+service.getServiceName() + "<br>Specialty: " +(service.getSpecialtyIsNotNull() ?  service.getSpecialty().getText() : "");
	}
	
	private String getHospitalsToDisplay(ElectiveListHospitalConfigurationVoCollection hospitals)
	{
		if (hospitals==null || hospitals.size()==0)
			return null;
		
		StringBuffer txtColHosp=new StringBuffer();
		
		for (int i=0;i<hospitals.size();i++)
		{
			txtColHosp.append(hospitals.get(i).getListLocation().getName());
			if (i < hospitals.size()-1)
			{
				txtColHosp.append(", ");
			}
		}
		
		return txtColHosp.toString();
	}
	
	private String getConsultantsToDisplay(ElectiveListConsultationConfigurationVoCollection consultants)
	{
		if (consultants==null || consultants.size()==0)
			return null;
		
		StringBuffer txtColCons=new StringBuffer();
		
		for (int i=0;i<consultants.size();i++)
		{
			txtColCons.append(consultants.get(i).getHCP().getName());
			if (i < consultants.size()-1)
			{
				txtColCons.append(", ");
			}
		}
		
		return txtColCons.toString();
	}
	private void updateControlsState() 
	{
		boolean editMode = FormMode.EDIT.equals(form.getMode());
		boolean viewMode = FormMode.VIEW.equals(form.getMode());
		boolean waitingListGridValueSelected = form.grdWaitingList().getValue()!=null;
		
		form.txtWaitingListNameSearch().setEnabled(viewMode);
		form.qmbServiceSearch().setEnabled(viewMode);
		form.qmbConsultant().setEnabled(viewMode);
		form.qmbHospital().setEnabled(viewMode);
		form.dteFrom().setEnabled(viewMode);
		form.dteTo().setEnabled(viewMode);
		form.chkActiveSearch().setEnabled(viewMode);
		form.imbSearch().setEnabled(viewMode);
		form.imbClear().setEnabled(viewMode);
		
		form.getContextMenus().Admin.hideAllWaitingListConfigMenuMenuItems();
		form.getContextMenus().Admin.getWaitingListConfigMenuADDItem().setVisible(viewMode);
		form.getContextMenus().Admin.getWaitingListConfigMenuEDITItem().setVisible(viewMode && waitingListGridValueSelected);
		
		form.ctnDetails().txtWaitingListName().setEnabled(editMode);
		form.ctnDetails().qmbService().setEnabled(editMode);
		form.ctnDetails().dteStart().setEnabled(editMode);
		form.ctnDetails().dteEnd().setEnabled(editMode);
		form.ctnDetails().txtCode().setEnabled(editMode);
		form.ctnDetails().chkActive().setEnabled(editMode);
		
		form.getContextMenus().Admin.hideAllWaitingListConfigConsultantsMenuMenuItems();
		form.getContextMenus().Admin.getWaitingListConfigConsultantsMenuADDItem().setVisible(editMode);
		form.getContextMenus().Admin.getWaitingListConfigConsultantsMenuREMOVEItem().setVisible(editMode && form.ctnDetails().grdConsultants().getSelectedRow()!=null);
		
		form.getContextMenus().Admin.hideAllWaitingListConfigHospitalsMenuMenuItems();
		form.getContextMenus().Admin.getWaitingListConfigHospitalsMenuADDItem().setVisible(editMode);
		form.getContextMenus().Admin.getWaitingListConfigHospitalsMenuREMOVEItem().setVisible(editMode && form.ctnDetails().grdHospitals().getSelectedRow()!=null);
		
		form.btnNew().setVisible(viewMode);
		form.btnEdit().setVisible(viewMode && waitingListGridValueSelected);
		
		form.ctnDetails().setCollapsed(viewMode && !waitingListGridValueSelected);
		
	}
	
	private void clearScreen() 
	{
		clearSearcControls();
		form.grdWaitingList().getRows().clear();
		clearInstanceControls();
		
	}
	private void clearInstanceControls() 
	{
		form.ctnDetails().txtWaitingListName().setValue(null);
		form.ctnDetails().qmbService().setValue(null);
		form.ctnDetails().dteStart().setValue(null);
		form.ctnDetails().dteEnd().setValue(null);
		form.ctnDetails().txtCode().setValue(null);
		form.ctnDetails().chkActive().setValue(null);
		
		form.ctnDetails().grdConsultants().getRows().clear();
		form.ctnDetails().grdHospitals().getRows().clear();
		form.ctnDetails().lblSpecialtyValueDetails().setValue(null);//WDEV-18561
	}
	private void clearSearcControls() 
	{
		form.txtWaitingListNameSearch().setValue(null);		
		form.qmbServiceSearch().setValue(null);		
		form.qmbConsultant().setValue(null);		
		form.qmbHospital().setValue(null);		
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.chkActiveSearch().setValue(null);
		
		form.lblSpecialtyValueSearchCriteria().setValue(null);//WDEV-18561
		
	}
	private void initialize() 
	{
		form.chkActiveSearch().setValue(true);
		
		//WDEV-18561
		form.lblSpecialtyValueSearchCriteria().setValue(null);
		form.ctnDetails().lblSpecialtyValueDetails().setValue(null);
	}
	@Override
	protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbConsultant().clear();
		
		HcpLiteVoCollection voCollHcp = domain.listConsultants(value);
		if (voCollHcp==null || voCollHcp.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.qmbConsultant().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			form.qmbConsultant().setValue(voCollHcp.get(0));
		else
			form.qmbConsultant().showOpened();
	}
	@Override
	protected void onQmbHospitalTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbHospital().clear();

		LocationLiteVoCollection voCollHosp = domain.listHospitals(value);
		if (voCollHosp==null || voCollHosp.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollHosp.size(); i++)
		{
			form.qmbHospital().newRow(voCollHosp.get(i), voCollHosp.get(i).getName());
		}

		if (voCollHosp.size() == 1)
			form.qmbHospital().setValue(voCollHosp.get(0));
		else
			form.qmbHospital().showOpened();
		
	}
	@Override
	protected void onQmbServiceTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.ctnDetails().qmbService().clear();

		ServiceForElectiveListConfigVoCollection voCollService = domain.listServices(value);
		if (voCollService==null || voCollService.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollService.size(); i++)
		{
			form.ctnDetails().qmbService().newRow(voCollService.get(i), voCollService.get(i).getServiceName());
		}

		if (form.ctnDetails().qmbService().size() == 1)
			form.ctnDetails().qmbService().setValue(voCollService.get(0));
		else
			form.ctnDetails().qmbService().showOpened();
		
		populateSpecialtyFromDetailsContainer(form.ctnDetails().qmbService().getValue()); //WDEV-18561
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedRecord(null);
		String[] errors = validateCriteria();
		
		if (errors != null && errors.length > 0)
		{
			clearScreen();
			updateControlsState();
			engine.showErrors(errors);
			return ;
		}
		
		search(true);
		
		updateControlsState();
	}
	private String[] validateCriteria()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.txtWaitingListNameSearch().getValue()== null 
			&& form.qmbServiceSearch().getValue()==null
			&& form.qmbConsultant().getValue()==null
			&& form.qmbHospital().getValue()==null
			&& form.dteFrom().getValue()==null
			&& form.dteTo().getValue()==null
			&& Boolean.FALSE.equals(form.chkActiveSearch().getValue()))
		{
			errors.add("Invalid search criteria. At least one field must be filled.");
		}
			
		if (form.dteFrom().getValue()!=null & form.dteTo().getValue()!=null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			errors.add("'Date From ' cannot be greater than 'Date To'");
		}
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	@Override
	protected void onGrdConsultantsSelectionChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onGrdHospitalsSelectionChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
		
	}
	
	private void newInstance()
	{
		clearInstanceControls();
		form.getLocalContext().setSelectedRecord(null);
		form.grdWaitingList().setValue(null);
		form.ctnDetails().chkActive().setValue(true);
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editInstance();
	}
	private void editInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	private boolean save()
	{
		ElectiveListConfigurationVo configToSave=populateDataFromScreen(form.getLocalContext().getSelectedRecord());
		
		String[] errors = configToSave.validate(getUIErrors(configToSave));
		
		if (errors != null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedRecord(domain.save(configToSave));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
		
	}
	
	private String[] getUIErrors(ElectiveListConfigurationVo configToSave)
	{
		ArrayList<String> errors = new ArrayList<String>();
			
		if (form.ctnDetails().dteStart().getValue()!=null & form.ctnDetails().dteEnd().getValue()!=null && form.ctnDetails().dteStart().getValue().isGreaterThan(form.ctnDetails().dteEnd().getValue()))
		{
			errors.add("'End Date' should be greater than 'Start Date'!");
		}
		
		if (form.ctnDetails().chkActive().getValue() && form.ctnDetails().txtCode().getValue()!=null && domain.existConfigurationWithSameCode(form.ctnDetails().txtCode().getValue(),configToSave,form.ctnDetails().dteStart().getValue(),form.ctnDetails().dteEnd().getValue()))
		{
			errors.add("'"+ form.ctnDetails().txtCode().getValue() +"' Elective List Code is already used for another configuration !");
		}
		
		if (form.ctnDetails().chkActive().getValue() && form.ctnDetails().txtWaitingListName().getValue()!=null && domain.existConfigurationWithSameName(form.ctnDetails().txtWaitingListName().getValue(),configToSave))
		{
			errors.add("'"+ form.ctnDetails().txtWaitingListName().getValue() +"' Elective List Name is already used!");
		}
	
		for (int i=0;form.ctnDetails().chkActive().getValue() && form.ctnDetails().qmbService().getValue()!=null && form.ctnDetails().dteStart().getValue()!=null && i<form.ctnDetails().grdConsultants().getRows().size();i++)
		{
			if (form.ctnDetails().grdConsultants().getRows().get(i).getColDefault() && domain.isConsultantMarkedAsDefaultForSameServiceForOtherConfiguration((HcpRefVo) form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue(),form.ctnDetails().qmbService().getValue(),configToSave,form.ctnDetails().dteStart().getValue(),form.ctnDetails().dteEnd().getValue()))
    		{
    			errors.add("Your chosen default List Owner is already marked as default for another configuration with the same Specialty from selected Service or same Service in the same time interval.");
    		}
		}
		
		for (int i=0;i<form.ctnDetails().grdConsultants().getRows().size();i++)
		{
			if (form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue()==null)
    		{
    			errors.add("Please select a List Owner or remove the empty row");
    		}
		}
		
		for (int i=0;i<form.ctnDetails().grdHospitals().getRows().size();i++)
		{
			if (form.ctnDetails().grdHospitals().getRows().get(i).getColHospitals().getValue()==null)
    		{
    			errors.add("Please select a Location or remove the empty row");
    		}
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	private ElectiveListConfigurationVo populateDataFromScreen(ElectiveListConfigurationVo record)
	{
		if (record==null)
			record = new ElectiveListConfigurationVo();
		else
			record=(ElectiveListConfigurationVo) record.clone();
		
		record.setWaitingListName(form.ctnDetails().txtWaitingListName().getValue());
		record.setService(form.ctnDetails().qmbService().getValue());
		record.setStartDate(form.ctnDetails().dteStart().getValue());
		record.setEndDate(form.ctnDetails().dteEnd().getValue());
		record.setWaitingListCode(form.ctnDetails().txtCode().getValue());
		record.setIsActive(form.ctnDetails().chkActive().getValue());
		
		record.setListLocations(getHospitalsFromGrid());
		record.setHCPs(getConsultantsFromGrid());
		return record;
	}
	
	private ElectiveListConsultationConfigurationVoCollection getConsultantsFromGrid()
	{
		if (form.ctnDetails().grdConsultants().getRows().size()==0)
			return null;
		
		ElectiveListConsultationConfigurationVoCollection collCons = new ElectiveListConsultationConfigurationVoCollection();
		for (int i=0;i<form.ctnDetails().grdConsultants().getRows().size();i++)
		{
			if (form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue()==null)
				continue;
			
			ElectiveListConsultationConfigurationVo cons = new ElectiveListConsultationConfigurationVo();
			cons.setHCP((HcpLiteVo) form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue());
			cons.setDefaultForHCP(form.ctnDetails().grdConsultants().getRows().get(i).getColDefault());
			collCons.add(cons);
		}
		
		return collCons;
	}
	private ElectiveListHospitalConfigurationVoCollection getHospitalsFromGrid()
	{
		if (form.ctnDetails().grdHospitals().getRows().size()==0)
			return null;
		
		ElectiveListHospitalConfigurationVoCollection collHosp = new ElectiveListHospitalConfigurationVoCollection();
		for (int i=0;i<form.ctnDetails().grdHospitals().getRows().size();i++)
		{
			if (form.ctnDetails().grdHospitals().getRows().get(i).getColHospitals().getValue()==null)
				continue;
			
			ElectiveListHospitalConfigurationVo hosp = new ElectiveListHospitalConfigurationVo();
			hosp.setListLocation((LocationLiteVo)form.ctnDetails().grdHospitals().getRows().get(i).getColHospitals().getValue());
			
			collHosp.add(hosp);
		}
		
		return collHosp;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigMenu.ADD:
				newInstance();
			break;
			
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigMenu.EDIT:
				editInstance();
			break;
				
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigConsultantsMenu.ADD:
					grdConsultantsRow row = form.ctnDetails().grdConsultants().getRows().newRow();
					row.setColDefaultReadOnly(true);
			break;
				
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigConsultantsMenu.REMOVE:
					form.ctnDetails().grdConsultants().removeSelectedRow();
			break;	
			
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigHospitalsMenu.ADD:
					form.ctnDetails().grdHospitals().getRows().newRow();
			break;
				
			case GenForm.ContextMenus.AdminNamespace.WaitingListConfigHospitalsMenu.REMOVE:
					form.ctnDetails().grdHospitals().removeSelectedRow();
			break;	
		}
		
		updateControlsState();
	}
	@Override
	protected void onGrdWaitingListSelectionChanged()throws PresentationLogicException 
	{
		populateInstanceControlsFromData(form.grdWaitingList().getValue());
		updateControlsState();
	}
	private void populateInstanceControlsFromData(ElectiveListConfigurationVo selectedRecord) 
	{
		clearInstanceControls();
		
		if (selectedRecord==null)
			return;
		
		selectedRecord=domain.getConfiguration(selectedRecord);
		form.getLocalContext().setSelectedRecord(selectedRecord);
		
		form.ctnDetails().txtWaitingListName().setValue(selectedRecord.getWaitingListName());
		if (selectedRecord.getServiceIsNotNull())
		{
			form.ctnDetails().qmbService().newRow(selectedRecord.getService(), selectedRecord.getService().getServiceName());
			form.ctnDetails().qmbService().setValue(selectedRecord.getService());
		}
		
		form.ctnDetails().dteStart().setValue(selectedRecord.getStartDate());
		form.ctnDetails().dteEnd().setValue(selectedRecord.getEndDate());
		form.ctnDetails().txtCode().setValue(selectedRecord.getWaitingListCode());
		form.ctnDetails().chkActive().setValue(selectedRecord.getIsActive());
		
		populateConsultantsGrid(selectedRecord.getHCPs());
		populateHospitalsGrid(selectedRecord.getListLocations());
	}
	
	private void populateHospitalsGrid(ElectiveListHospitalConfigurationVoCollection hospitals)
	{
		if (hospitals==null)
			return;
		
		for (int i=0;i<hospitals.size();i++)
		{
			grdHospitalsRow row = form.ctnDetails().grdHospitals().getRows().newRow();
			row.getColHospitals().newRow(hospitals.get(i).getListLocation(), hospitals.get(i).getListLocation().getName());
			row.getColHospitals().setValue(hospitals.get(i).getListLocation());
		}
	}
	
	private void populateConsultantsGrid(ElectiveListConsultationConfigurationVoCollection consultants)
	{
		if (consultants==null)
			return;
		
		for (int i=0;i<consultants.size();i++)
		{
			grdConsultantsRow row = form.ctnDetails().grdConsultants().getRows().newRow();
			row.getColConsultants().newRow(consultants.get(i).getHCP(), consultants.get(i).getHCP().getIHcpName());
			row.getColConsultants().setValue(consultants.get(i).getHCP());
			row.setColDefault(consultants.get(i).getDefaultForHCP());
		}
	}
	@Override
	protected void onGrdConsultantsGridQueryComboBoxTextSubmited(int column, grdConsultantsRow row, String text) throws PresentationLogicException
	{
		row.getColConsultants().clear();

		HcpLiteVoCollection voCollHcp = domain.listConsultants(text);
		if (voCollHcp==null || voCollHcp.size() == 0)
		{
			return;
		}

		HcpLiteVoCollection collCons=getExistentConsultantsFromGrid();
		
		for (int i = 0; i < voCollHcp.size(); i++)
		{
			if ( collCons.contains(voCollHcp.get(i)))
				continue;
			
			row.getColConsultants().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
		{
			row.getColConsultants().setValue(voCollHcp.get(0));
			row.setColDefaultReadOnly(false);
		}
		
		else
			row.getColConsultants().showOpened();
		
	}
	private HcpLiteVoCollection getExistentConsultantsFromGrid()
	{
		if (form.ctnDetails().grdConsultants().getRows().size()==0)
			return null;
		
		HcpLiteVoCollection collCons = new HcpLiteVoCollection();
		
		for (int i=0;i<form.ctnDetails().grdConsultants().getRows().size();i++)
		{
			if (form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue()==null)
				continue;
			
			collCons.add((HcpLiteVo) form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue());
		}
		
		return collCons;
	}
	@Override
	protected void onGrdHospitalsGridQueryComboBoxTextSubmited(int column, grdHospitalsRow row, String text) throws PresentationLogicException
	{
		row.getColHospitals().clear();

		LocationLiteVoCollection voCollHosp = domain.listHospitals(text);
		if (voCollHosp==null || voCollHosp.size() == 0)
		{
			return;
		}
		
		LocationLiteVoCollection collHospitals=getExistentHospitalsFromGrid();
		
		for (int i = 0; i < voCollHosp.size(); i++)
		{
			if (collHospitals.contains(voCollHosp.get(i)))
				continue;
			
			row.getColHospitals().newRow(voCollHosp.get(i), voCollHosp.get(i).getName().toString());
		}

		if (voCollHosp.size() == 1)
			row.getColHospitals().setValue(voCollHosp.get(0));
		else
			row.getColHospitals().showOpened();
	}
	
	private LocationLiteVoCollection getExistentHospitalsFromGrid()
	{
		if (form.ctnDetails().grdHospitals().getRows().size()==0)
			return null;
		
		LocationLiteVoCollection collHosp = new LocationLiteVoCollection();
		
		for (int i=0;i<form.ctnDetails().grdHospitals().getRows().size();i++)
		{
			if (form.ctnDetails().grdHospitals().getRows().get(i).getColHospitals().getValue()==null)
				continue;
			
			collHosp.add((LocationLiteVo) form.ctnDetails().grdHospitals().getRows().get(i).getColHospitals().getValue());
		}
		
		return collHosp;
	}
	@Override
	protected void onGrdConsultantsGridCheckBoxClicked(int column, grdConsultantsRow row, boolean isChecked) throws PresentationLogicException
	{
		if (!isChecked)
			return;
		
		if (form.ctnDetails().qmbService().getValue()==null )
		{
			engine.showMessage("Please select a Service before choosing a default List Owner!");
			row.setColDefault(false);
			return;
		}
		
		for (int i=0;i<form.ctnDetails().grdConsultants().getRows().size() ;i++)
		{
			if (row.getColConsultants().getValue().equals(form.ctnDetails().grdConsultants().getRows().get(i).getColConsultants().getValue()))
				continue;
			
			form.ctnDetails().grdConsultants().getRows().get(i).setColDefault(false);
		}
		
		if (form.ctnDetails().qmbService().getValue()!=null && form.ctnDetails().dteStart().getValue()!=null &&  form.ctnDetails().chkActive().getValue() && domain.isConsultantMarkedAsDefaultForSameServiceForOtherConfiguration((HcpRefVo) row.getColConsultants().getValue(),form.ctnDetails().qmbService().getValue(),form.getLocalContext().getSelectedRecord(),form.ctnDetails().dteStart().getValue(),form.ctnDetails().dteEnd().getValue()))
		{
			engine.showMessage("Your chosen default List Owner is already marked as default for another configuration with the same Specialty from selected Service or same Service in the same time interval.");
			row.setColDefault(false);
		}
	}
	@Override
	protected void onQmbServiceSearchTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbServiceSearch().clear();

		ServiceForElectiveListConfigVoCollection voCollService = domain.listServices(value);
		if (voCollService==null || voCollService.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollService.size(); i++)
		{
			form.qmbServiceSearch().newRow(voCollService.get(i), voCollService.get(i).getServiceName());
		}

		if (form.qmbServiceSearch().size() == 1)
			form.qmbServiceSearch().setValue(voCollService.get(0));
		else
			form.qmbServiceSearch().showOpened();
		
		populateSpecialtyFromSearchCriteria(form.qmbServiceSearch().getValue());//WDEV-18561
	}
	
	@Override
	protected void onGrdConsultantsMutableComboBoxSelected(int column, grdConsultantsRow row, Object value) throws PresentationLogicException
	{
		row.setColDefaultReadOnly(row.getColConsultants().getValue()==null);
		row.setColDefault(false);
	}
	
	@Override //WDEV-18499
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getInactivateMessageBoxId() != null && form.getLocalContext().getInactivateMessageBoxId().equals(messageBoxId))
		{
			form.ctnDetails().chkActive().setValue(Boolean.TRUE);
		}
	}
	
	@Override
	protected void onChkActiveValueChanged() throws PresentationLogicException
	{
		if (Boolean.FALSE.equals(form.ctnDetails().chkActive().getValue()) && form.getLocalContext().getSelectedRecord() != null && domain.canInactivateConfiguration(form.getLocalContext().getSelectedRecord()))
		{
			form.getLocalContext().setInactivateMessageBoxId(engine.showMessage("You cannot Inactivate this configured list as there are existing Patient Elective List records already saved using it.", "Warning", MessageButtons.OK, MessageIcon.WARNING));
		}
	}
	
	//WDEV-18561
	@Override
	protected void onQmbServiceSearchValueChanged() throws PresentationLogicException
	{
		populateSpecialtyFromSearchCriteria(form.qmbServiceSearch().getValue()); 
	}
	
	private void populateSpecialtyFromSearchCriteria(ServiceForElectiveListConfigVo service)
	{
		form.lblSpecialtyValueSearchCriteria().setValue(service!=null && service.getSpecialty()!=null? service.getSpecialty().getText() : null);
	}
	
	@Override
	protected void onQmbServiceValueChanged() throws PresentationLogicException
	{
		populateSpecialtyFromDetailsContainer(form.ctnDetails().qmbService().getValue()); 
	}
	
	private void populateSpecialtyFromDetailsContainer(ServiceForElectiveListConfigVo service)
	{
		form.ctnDetails().lblSpecialtyValueDetails().setValue(service!=null && service.getSpecialty()!=null? service.getSpecialty().getText() : null);
	}
}
