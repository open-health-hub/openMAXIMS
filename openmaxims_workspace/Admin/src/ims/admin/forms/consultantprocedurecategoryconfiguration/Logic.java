//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.consultantprocedurecategoryconfiguration;

import ims.admin.vo.CategoryProceduresVo;
import ims.admin.vo.CategoryProceduresVoCollection;
import ims.admin.vo.ConsultantProcedureCategoryVo;
import ims.admin.vo.ConsultantProcedureCategoryVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.ProcedureCategory;
import ims.core.vo.lookups.ProcedureCategoryCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static int MAIN_COLUMN = 1;
	private static int MAIN_COLUMN_WIDTH = 400;

	@Override
	protected void onFormModeChanged()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			enableOnlyEditedConsultant();
		}
		updateControlState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onDyngrdMainCellTextSubmited(ims.framework.controls.DynamicGridCell cell)
	{
		try
		{
			searchAndDisplayHcpInGridQCmb(cell);
		}
		catch (PresentationLogicException e)
		{
			throw new RuntimeException(e);
		}
	}

	@Override
	protected void onDyngrdMainRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		updateControlState();
	}

	@Override
	protected void onDyngrdMainRowSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	private boolean save() throws PresentationLogicException
	{
		ConsultantProcedureCategoryVo record = populateDataFromScreen(null);
		String[] errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			record = domain.save(record);
		}
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showErrors(new String[]{"This consultant is already configured"});
			return false;
		}
		form.qmbConsultant().clear();
		form.qmbConsultant().newRow(record.getPerformingHCP(),record.getPerformingHCP().getIMosName());
		form.qmbConsultant().setValue(record.getPerformingHCP());
		form.getLocalContext().setCurrentEditedConsultant(null);
		return true;
	}

	private ConsultantProcedureCategoryVo populateDataFromScreen(ConsultantProcedureCategoryVo record)
	{
		DynamicGridRow currEditedRow = form.getLocalContext().getCurrentEditedConsultant();
		if (currEditedRow == null)
			throw new RuntimeException("Current top parent row is null");
		if (currEditedRow.getValue() == null)
		{
			record = new ConsultantProcedureCategoryVo();
		}
		else
		{
			try
			{
				record = (ConsultantProcedureCategoryVo) currEditedRow.getValue();
			}
			catch (Exception e)
			{
				throw new RuntimeException("Current top row value is not the required vo type", e);
			}
		}
		DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
		Object value = currEditedRow.getCells().get(mainCol).getValue();
		record.setPerformingHCP((HcpLiteVo) value);
		
		DynamicGridRowCollection categChildRows = currEditedRow.getRows();
		
		record.setCategoryProcedures(null);
		if (categChildRows != null)
		{
			CategoryProceduresVoCollection cats = new CategoryProceduresVoCollection();
			for (int i=0 ; i<categChildRows.size() ;i++)
			{
				cats.add(getCategoryProcedure(categChildRows.get(i)));
			}
			record.setCategoryProcedures(cats);
		}
		return record;
		
	}

	private CategoryProceduresVo getCategoryProcedure(DynamicGridRow dynamicGridRow)
	{
		CategoryProceduresVo record = new CategoryProceduresVo();
		if (dynamicGridRow.getValue() instanceof CategoryProceduresVo)
			record = (CategoryProceduresVo) dynamicGridRow.getValue();
		
		DynamicGridCell dynamicGridCell = dynamicGridRow.getCells().get(form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN));
		record.setCategory(null);
		if (dynamicGridCell!= null && dynamicGridCell.getValue() instanceof ProcedureCategory)
			record.setCategory((ProcedureCategory) dynamicGridCell.getValue());
		record.setProcedures(null);
		if (dynamicGridRow.getRows() != null)
		{
			ProcedureLiteVoCollection procs = new ProcedureLiteVoCollection();
			for (int i=0 ;i<dynamicGridRow.getRows().size() ; i++)
			{
				procs.add(getProcedure(dynamicGridRow.getRows().get(i)));
			}
			record.setProcedures(procs);
		}
		return record;
	}

	private ProcedureLiteVo getProcedure(DynamicGridRow dynamicGridRow)
	{
		if (dynamicGridRow.getValue() instanceof ProcedureLiteVo)
			return (ProcedureLiteVo) dynamicGridRow.getValue();
		return null;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentEditedConsultant(null);
		form.setMode(FormMode.VIEW);
		open();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCurrentEditedConsultant(getConsultantParent(form.dyngrdMain().getSelectedRow()));
		form.setMode(FormMode.EDIT);
	}

	private void clearScreen()
	{
		form.qmbConsultant().getValues().clear();
		form.qmbConsultant().clear();
		form.qmbConsultant().setValue(null);
		form.dyngrdMain().getRows().clear();
		
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
			if (!isValidSearchCriteria())
				clearScreen();
		
			try
			{
				searchAndDisplayInGrid();
			}
			catch (DomainInterfaceException e)
			{
				throw new PresentationLogicException(e);
			}
			updateControlState();
		
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			searchAndDisplayHcpInSearchFilter(value);
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException(e);
		}
	}

	private boolean isValidSearchCriteria()
	{
		return (form.qmbConsultant().getValue() instanceof HcpLiteVo) ;
	}

	private void searchAndDisplayInGrid() throws DomainInterfaceException
	{
		
			populateScreenFromData(domain.listConsultantsProcedureCategory(form.qmbConsultant().getValue()));
		
		
	}
	private void searchAndDisplayHcpInGridQCmb(DynamicGridCell cell) throws PresentationLogicException
	{
		String typedText = cell.getTypedText();
		
		cell.getItems().clear();
		cell.setTypedText(null);
		
		if (form.getLocalContext().getCurrentEditedConsultantIsNotNull() && 
				(form.getLocalContext().getCurrentEditedConsultant().getValue() instanceof ConsultantProcedureCategoryVo))
		{
			HcpLiteVo savedConsultant = ((ConsultantProcedureCategoryVo)form.getLocalContext().getCurrentEditedConsultant().getValue()).getPerformingHCP();
			if (savedConsultant != null)
			cell.getItems().newItem(savedConsultant);
		}
		
		
	
		HcpLiteVoCollection result;
		try
		{
			
			result = domain.listHcpLiteNotConfigured(typedText);
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException(e);
		}
		
		
		if (result!=null)
		{
			for (int i = 0; i < result.size(); i++)
			{
				cell.getItems().newItem(result.get(i));
			}
		}
		if (cell.getItems().size() > 0)
		{
		if (cell.getItems().size() == 1)
		{
			cell.setValue(cell.getItems().get(0).getValue());
		}
		else
		{
			cell.showOpened();
		}
		}
		DynamicGridRow selectedRow = form.dyngrdMain().getSelectedRow();
		if (selectedRow!=null)
		{
		form.dyngrdMain().setSelectedRow(null);
		form.dyngrdMain().setSelectedRow(selectedRow);
		}
	}

	private void searchAndDisplayHcpInSearchFilter(String nameFilter) throws DomainInterfaceException
	{
		form.qmbConsultant().clear();
		HcpLiteVoCollection result = domain.listHcps(nameFilter);
		if (result != null && result.size()>0)
		{
			for (int i = 0; i < result.size(); i++)
			{
				form.qmbConsultant().newRow(result.get(i), result.get(i).getIMosName());
			}
			if (result.size() == 1)
			{
				form.qmbConsultant().setValue(result.get(0));
			}
			else
			{
				form.qmbConsultant().showOpened();
			}
		}
	}

	private void initialize()
	{

		form.dyngrdMain().setSelectable(true);
		
		DynamicGridColumn mainCol = form.dyngrdMain().getColumns().newColumn("Consultant / Category / Procedure", MAIN_COLUMN, false);
		mainCol.setWidth(MAIN_COLUMN_WIDTH);
		mainCol.setCanGrow(false);
		
		

	}

	private void open() throws PresentationLogicException 
	{
		
		if (isValidSearchCriteria())
		{
			form.dyngrdMain().getRows().clear();
			try
			{
				populateScreenFromData(domain.listConsultantsProcedureCategory(form.qmbConsultant().getValue()));
			}
			catch (DomainInterfaceException e)
			{
				throw new PresentationLogicException(e);
			}
		}
		else
		{
			clearScreen();
		}

		form.setMode(FormMode.VIEW);

	}

	private void populateScreenFromData(ConsultantProcedureCategoryVoCollection record)
	{
		form.dyngrdMain().getRows().clear();
		if (record == null || record.size()==0)
		{
			engine.showMessage("No records where found ", "Information", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		for (int i = 0; i < record.size(); i++)
		{
			ConsultantProcedureCategoryVo cpc = record.get(i);
			if (cpc != null)
			{
				DynamicGridRow rowCons = addConsultantToGrid(cpc.getPerformingHCP());
				rowCons.setValue(cpc);
				CategoryProceduresVoCollection categoryProcedures = cpc.getCategoryProcedures();
				if (categoryProcedures != null)
				{
					for (int j = 0; j < categoryProcedures.size(); j++)
					{
						CategoryProceduresVo categoryProceduresVo = categoryProcedures.get(j);
						DynamicGridRow rowCat = addCategoryToGrid(rowCons, categoryProceduresVo.getCategory());
						rowCat.setValue(categoryProceduresVo);
						ProcedureLiteVoCollection procedures = categoryProceduresVo.getProcedures();
						if (procedures != null)
						{
							for (int k = 0; k < procedures.size(); k++)
							{
								addProcedureToGrid(rowCat, procedures.get(k));
							}
						}
					}
					rebindAllGridComboBoxes(rowCons);

				}

			}
		}

	}

	private void rebindAllGridComboBoxes(DynamicGridRow rowCons)
	{
		
		if (rowCons == null || rowCons.getRows() == null || rowCons.getRows().size() == 0)
			return;
		ProcedureCategoryCollection allProcCat = LookupHelper.getProcedureCategory(domain.getLookupService());
		if (allProcCat == null || allProcCat.size() == 0)
			return;
		
		
		
		ProcedureCategoryCollection usedProcCat = new ProcedureCategoryCollection();
	
		for (int i=0 ; i<rowCons.getRows().size(); i++)
		{
			
			DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(mainCol);
			ProcedureCategory aux =null;
			if (dynamicGridCell.getValue() instanceof ProcedureCategory)
			{
				aux = (ProcedureCategory) dynamicGridCell.getValue();
				usedProcCat.add(aux);
				
			}
			dynamicGridCell.getItems().clear();
			if (aux != null)
			{
			dynamicGridCell.getItems().newItem(aux);
			dynamicGridCell.setValue(aux);
			}
			
			
				
		}
		
		for (int i= allProcCat.size()-1 ; i>=0 ; i--)
		{
			if(usedProcCat.indexOf(allProcCat.get(i))>=0)
			{
				allProcCat.remove(i);
			}
		}
		for (int i=0 ; i<rowCons.getRows().size(); i++)
		{
			DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
			DynamicGridCell dynamicGridCell = rowCons.getRows().get(i).getCells().get(mainCol);
			for (int j = 0 ; j <allProcCat.size() ; j++)
			dynamicGridCell.getItems().newItem(allProcCat.get(j));
		}
		/*
		 * If a cell is changed than the row  containing the cell is rendered,
		 * If that row or a child  is selected  than the selection is lost.
		 * So you have to force the selection changed event in the UI
		 */
		DynamicGridRow backup = form.dyngrdMain().getSelectedRow();
		if (backup!=null)
		{
		form.dyngrdMain().setSelectedRow(null);
		form.dyngrdMain().setSelectedRow(backup);
		}

		
		
	}

	private void updateControlState()
	{

		Object selectedValue = null;
		if (form.dyngrdMain().getSelectedRow() != null)
			selectedValue = form.dyngrdMain().getSelectedRow().getValue();
		boolean isConsultantSelected = selectedValue instanceof ConsultantProcedureCategoryVo;
		boolean isCategorySelected = selectedValue instanceof CategoryProceduresVo;
		boolean isProcedureSelected = selectedValue instanceof ProcedureLiteVo;
		boolean viewMode = FormMode.VIEW.equals(form.getMode());
		form.getContextMenus().Admin.getConsultantProcedureCategoryAddConsultantItem().setVisible(viewMode);
		form.getContextMenus().Admin.getConsultantProcedureCategoryAddCategoryItem().setVisible(isConsultantSelected || isCategorySelected);
		form.getContextMenus().Admin.getConsultantProcedureCategoryAddProcedureItem().setVisible(isCategorySelected || isProcedureSelected);

		form.getContextMenus().Admin.getConsultantProcedureCategoryRemoveConsultantItem().setVisible(isConsultantSelected);
		form.getContextMenus().Admin.getConsultantProcedureCategoryRemoveCategoryItem().setVisible(isCategorySelected);
		form.getContextMenus().Admin.getConsultantProcedureCategoryRemoveProcedureItem().setVisible(isProcedureSelected);

		if (viewMode)
			form.btnEdit().setVisible(isCategorySelected || isConsultantSelected || isProcedureSelected);
	}

	private void enableOnlyEditedConsultant()
	{

		DynamicGridRow consultantParent = form.getLocalContext().getCurrentEditedConsultant();
		DynamicGridRowCollection rows = form.dyngrdMain().getRows();
		for (int i = 0; i < rows.size(); i++)
		{
			if (!rows.get(i).equals(consultantParent))
			{
				setNotSelectable(rows.get(i));
			}

		}

	}

	private void setNotSelectable(DynamicGridRow row)
	{
		if (row == null)
			return;
		row.setSelectable(false);
		row.setReadOnly(true);
		row.setCollapsedImage(getDisabledImage(row));
		row.setExpandedImage(getDisabledImage(row));
		DynamicGridRowCollection childs = row.getRows();
		if (childs == null)
			return;
		for (int i = 0; i < childs.size(); i++)
		{
			setNotSelectable(childs.get(i));
		}
	}
	

	private Image getDisabledImage(DynamicGridRow row)
	{
		if (row == null)
			return null;
		Object value = row.getValue();
		if (value instanceof ConsultantProcedureCategoryVo)
			return form.getImages().Admin.ConsultantDisabled16;
		if (value instanceof CategoryProceduresVo)
			return form.getImages().Admin.CategoryDisabled16;
		if (value instanceof ProcedureLiteVo)
			return form.getImages().Admin.ProcedureDisabled16;
		return null;
	}

	private DynamicGridRow getConsultantParent(DynamicGridRow row)
	{
		if (row.getParent() != null)
			return getConsultantParent(row.getParent());
		return row;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.AddConsultant:
				addConsultant();
				break;
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.AddCategory:
				addCategory();
				break;
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.AddProcedure:
				engine.open(form.getForms().Admin.ProcedureSpecialtyHotlist);
				break;
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.RemoveConsultant:
				delConsultant();
				break;
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.RemoveCategory:
				delCategory();
				break;
			case GenForm.ContextMenus.AdminNamespace.ConsultantProcedureCategory.RemoveProcedure:
				delProcedure();
				break;

			default:
				break;
		}
		updateControlState();

	}

	private void delProcedure()
	{

		form.getLocalContext().setCurrentEditedConsultant(getConsultantParent(form.dyngrdMain().getSelectedRow()));
		form.dyngrdMain().getRows().remove(form.dyngrdMain().getSelectedRow());
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.setMode(FormMode.EDIT);
		}

	}

	private void delCategory()
	{
		form.getLocalContext().setCurrentEditedConsultant(getConsultantParent(form.dyngrdMain().getSelectedRow()));
		form.dyngrdMain().getRows().remove(form.dyngrdMain().getSelectedRow());
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.setMode(FormMode.EDIT);
		}
		rebindAllGridComboBoxes(form.getLocalContext().getCurrentEditedConsultant());
	}

	private void delConsultant() throws PresentationLogicException
	{
		engine.showMessage("You are about to delete all configuration for this consultant!\nAre you sure you want to delete ?", "Delete", MessageButtons.CONFIRMCANCEL,MessageIcon.QUESTION);
		
	}

	private boolean delete()
	{
		Object value = form.dyngrdMain().getSelectedRow().getValue();
		if (value instanceof ConsultantProcedureCategoryVo)
		{
			ConsultantProcedureCategoryVo consultant = (ConsultantProcedureCategoryVo) value;
			if (!consultant.getID_ConsultantProcedureCategoryIsNotNull())
				return true;
			try
			{
				
				domain.deleteConfiguredConsultant(consultant);
			}
			catch (DomainInterfaceException e)
			{
				engine.showErrors(new String[]{e.getMessage()});
				return false;
				
			}
			catch (StaleObjectException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
				return true;
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showErrors(new String[]{e.getMessage()});
				return false;
			}
			
		}
		return true;
	}

	private void addProcedures() throws PresentationLogicException
	{
		
		ProcedureLiteVoCollection selectedProcedures = form.getGlobalContext().Clinical.getSelectedProcedures();
		if (selectedProcedures == null || selectedProcedures.size() == 0)
			return;
		DynamicGridRow selectedRow = form.dyngrdMain().getSelectedRow();
		if (selectedRow == null)
			throw new PresentationLogicException("A selected row was expected");
		if (selectedRow.getValue() instanceof ProcedureLiteVo)
			selectedRow = selectedRow.getParent();
		DynamicGridRow newRow = null;
		for (int i = 0 ; i < selectedProcedures.size() ; i++)
				newRow = addProcedureToGrid(selectedRow, selectedProcedures.get(i));
		
		form.getLocalContext().setCurrentEditedConsultant(getConsultantParent(selectedRow));
		form.getLocalContext().getCurrentEditedConsultant().setExpanded(true,true);
		selectedRow.setExpanded(true, true);
		form.dyngrdMain().setSelectedRow(newRow);
		updateControlState();
		if (FormMode.VIEW.equals(form.getMode()))
			form.setMode(FormMode.EDIT);

	}

	private void addCategory()
	{
		DynamicGridRow parent = form.dyngrdMain().getSelectedRow();
		if (parent.getValue() instanceof CategoryProceduresVo)
			parent = parent.getParent();
		DynamicGridRow newRow = addCategoryToGrid(parent, null);
		newRow.setValue(new CategoryProceduresVo());
		form.dyngrdMain().setSelectedRow(newRow);
		
		form.getLocalContext().setCurrentEditedConsultant(getConsultantParent(parent));
		form.getLocalContext().getCurrentEditedConsultant().setExpanded(true,true);
		
		rebindAllGridComboBoxes(parent);
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.setMode(FormMode.EDIT);
		}

	}

	private void addConsultant()
	{
		DynamicGridRow consult = addConsultantToGrid(null);
		consult.setValue(new ConsultantProcedureCategoryVo());
		
		form.getLocalContext().setCurrentEditedConsultant(consult);
		form.dyngrdMain().setSelectedRow(consult);
		form.setMode(FormMode.EDIT);

	}

	private DynamicGridRow addCategoryToGrid(DynamicGridRow parent, ProcedureCategory category)
	{
		if (parent == null)
			throw new RuntimeException("Logic error - non null parameters expected");
		DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
		DynamicGridRow newRow = parent.getRows().newRow();
		newRow.setExpandedImage(form.getImages().Admin.CategoryEnabled16);
		newRow.setCollapsedImage(form.getImages().Admin.CategoryEnabled16);
		DynamicGridCell newCell = newRow.getCells().newCell(mainCol, DynamicCellType.ENUMERATION);
		
		if(category!=null)
		{
		newCell.getItems().newItem(category);
		newCell.setValue(category);
		}
		newCell.setAutoPostBack(true);
		return newRow;
	}

	private DynamicGridRow addConsultantToGrid(HcpLiteVo consultant)
	{
		DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
		DynamicGridRow newRow = form.dyngrdMain().getRows().newRow();
		
		newRow.setExpandedImage(form.getImages().Admin.ConsultantEnabled16);
		newRow.setCollapsedImage(form.getImages().Admin.ConsultantEnabled16);
		
		DynamicGridCell newCell = newRow.getCells().newCell(mainCol, DynamicCellType.QUERYCOMBOBOX);
		newCell.setAutoPostBack(true);
		if (consultant!=null)
		{
		newCell.getItems().newItem(consultant);
		newCell.setValue(consultant);
		}
		
		
		newCell.setAutoPostBack(true);
		return newRow;

	}

	private DynamicGridRow addProcedureToGrid(DynamicGridRow parent, ProcedureLiteVo proc)
	{
		if (parent == null || proc == null)
			throw new RuntimeException("Logic error - non null parameters expected");

		
		DynamicGridColumn mainCol = form.dyngrdMain().getColumns().getByIdentifier(MAIN_COLUMN);
		DynamicGridRow newRow = parent.getRows().newRow();
		newRow.setCollapsedImage(form.getImages().Admin.ProcedureEnabled16);
		newRow.setExpandedImage(form.getImages().Admin.ProcedureEnabled16);
		newRow.setValue(proc);
		
		DynamicGridCell newCell = newRow.getCells().newCell(mainCol, DynamicCellType.STRING);
		newCell.setReadOnly(true);
		newCell.setValue(proc.getProcedureName());
		newCell.setAutoPostBack(true);
		return newRow;

	}
	

	@Override
	protected void onDyngrdMainCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getRow().getValue() instanceof CategoryProceduresVo)
		{
			rebindAllGridComboBoxes(cell.getRow().getParent());
			updateControlState();
		}
		
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.OK.equals(result))
		{
			if (form.getForms().Admin.ProcedureSpecialtyHotlist.equals(formName))
			{
				addProcedures();
			}
		}
		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.CONFIRM.equals(result))
		{
			if (delete())
			{
				form.dyngrdMain().getRows().remove(form.dyngrdMain().getSelectedRow());
				open();
			}
		}
		
	}
}
