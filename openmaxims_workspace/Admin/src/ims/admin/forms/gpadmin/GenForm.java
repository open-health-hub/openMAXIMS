//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.gpadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnGPDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrGPDetailsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabGPDetailsContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbGPStatusComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.GPStatus value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.GPStatus value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.GPStatus value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.GPStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.GPStatus value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.GPStatus getValue()
					{
						return (ims.core.vo.lookups.GPStatus)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.GPStatus value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbTitleComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.PersonTitle value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.PersonTitle value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.PersonTitle getValue()
					{
						return (ims.core.vo.lookups.PersonTitle)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.PersonTitle value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdContactsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdContactsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolContactTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolContactTypeReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolContactTypeOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolContactType(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.lookups.ChannelType getcolContactType()
					{
						return (ims.core.vo.lookups.ChannelType)super.row.get(0);
					}
					public void setcolContactType(ims.core.vo.lookups.ChannelType value)
					{
						super.row.set(0, value, true);
					}
					public void setCellcolContactTypeTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolContactValueReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolContactValueReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolContactValueOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolContactValue(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolContactValue()
					{
						return (String)super.row.get(1);
					}
					public void setcolContactValue(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolContactValueTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.CommChannelVo getValue()
					{
						return (ims.core.vo.CommChannelVo)super.row.getValue();
					}
					public void setValue(ims.core.vo.CommChannelVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdContactsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdContactsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdContactsRow get(int index)
					{
						return new grdContactsRow(super.collection.get(index));
					}
					public grdContactsRow newRow()
					{
						return new grdContactsRow(super.collection.newRow());
					}
					public grdContactsRow newRow(boolean autoSelect)
					{
						return new grdContactsRow(super.collection.newRow(autoSelect));
					}
					public grdContactsRow newRowAt(int index)
					{
						return new grdContactsRow(super.collection.newRowAt(index));
					}
					public grdContactsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdContactsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdContactsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.CommChannelVoCollection getValues()
					{
						ims.core.vo.CommChannelVoCollection listOfValues = new ims.core.vo.CommChannelVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.core.vo.CommChannelVo getValue()
					{
						return (ims.core.vo.CommChannelVo)super.grid.getValue();
					}
					public void setValue(ims.core.vo.CommChannelVo value)
					{
						super.grid.setValue(value);
					}
					public grdContactsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdContactsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdContactsRowCollection getRows()
					{
						return new grdContactsRowCollection(super.grid.getRows());
					}
					public grdContactsRow getRowByValue(ims.core.vo.CommChannelVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdContactsRow(row);
					}
					public void setcolContactTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolContactTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public GridComboBox colContactTypeComboBox()
					{
						return new GridComboBox(super.grid, 0);
					}
					public void setcolContactValueHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolContactValueHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public static class grdMappingsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdMappingsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolExtCodeTypeReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolExtCodeTypeReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolExtCodeTypeOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolExtCodeType(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
					{
						return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
					}
					public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
					{
						super.row.set(0, value, true);
					}
					public void setCellcolExtCodeTypeTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolCodeReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolCodeReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolCodeOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolCode(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolCode()
					{
						return (String)super.row.get(1);
					}
					public void setcolCode(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolCodeTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.row.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdMappingsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdMappingsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdMappingsRow get(int index)
					{
						return new grdMappingsRow(super.collection.get(index));
					}
					public grdMappingsRow newRow()
					{
						return new grdMappingsRow(super.collection.newRow());
					}
					public grdMappingsRow newRow(boolean autoSelect)
					{
						return new grdMappingsRow(super.collection.newRow(autoSelect));
					}
					public grdMappingsRow newRowAt(int index)
					{
						return new grdMappingsRow(super.collection.newRowAt(index));
					}
					public grdMappingsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdMappingsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdMappingsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					public ims.core.vo.TaxonomyMapCollection getValues()
					{
						ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.core.vo.TaxonomyMap getValue()
					{
						return (ims.core.vo.TaxonomyMap)super.grid.getValue();
					}
					public void setValue(ims.core.vo.TaxonomyMap value)
					{
						super.grid.setValue(value);
					}
					public grdMappingsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdMappingsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdMappingsRowCollection getRows()
					{
						return new grdMappingsRowCollection(super.grid.getRows());
					}
					public grdMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdMappingsRow(row);
					}
					public void setcolExtCodeTypeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolExtCodeTypeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public GridComboBox colExtCodeTypeComboBox()
					{
						return new GridComboBox(super.grid, 0);
					}
					public void setcolCodeHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolCodeHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 392, 118, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Communication:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 392, 6, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Code Mappings:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status :", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Middlename:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 96, 56, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 96, 120, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 96, 88, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 152, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbGPStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbGPStatusTemp);
					cmbGPStatusComboBox cmbGPStatus = (cmbGPStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGPStatusComboBox.class, m_cmbGPStatusTemp);
					super.addComboBox(cmbGPStatus);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 96, 24, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbTitleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbTitleTemp);
					cmbTitleComboBox cmbTitle = (cmbTitleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTitleComboBox.class, m_cmbTitleTemp);
					super.addComboBox(cmbTitle);
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 392, 136, 376, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					Grid m_grdContactsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGPAdminContacts, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdContactsTemp);
					grdContactsGrid grdContacts = (grdContactsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdContactsGrid.class, m_grdContactsTemp);
					grdContacts.addComboBoxColumn("Contact Type", 0, 0, 130, false, true, false, false, true, -1);
					grdContacts.addStringColumn("Contact Value", 0, 0, -1, false, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdContacts);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 392, 24, 376, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					Grid m_grdMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGPAdminMappings, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdMappingsTemp);
					grdMappingsGrid grdMappings = (grdMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMappingsGrid.class, m_grdMappingsTemp);
					grdMappings.addComboBoxColumn("External Code Type", 0, 0, 250, false, true, false, false, true, -1);
					grdMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					super.addGrid(grdMappings);
				}
	
				public TextBox txtForename()
				{
					return (TextBox)super.getControl(7);
				}
				public TextBox txtSurname()
				{
					return (TextBox)super.getControl(8);
				}
				public TextBox txtMiddlename()
				{
					return (TextBox)super.getControl(9);
				}
				public cmbGPStatusComboBox cmbGPStatus()
				{
					return (cmbGPStatusComboBox)super.getComboBox(0);
				}
				public cmbTitleComboBox cmbTitle()
				{
					return (cmbTitleComboBox)super.getComboBox(1);
				}
				public grdContactsGrid grdContacts()
				{
					return (grdContactsGrid)super.getGrid(0);
				}
				public grdMappingsGrid grdMappings()
				{
					return (grdMappingsGrid)super.getGrid(1);
				}
			}
			public static class tabPracticesContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Dynamic Grid Controls
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 752, 224, ims.framework.enumerations.ControlAnchoring.ALL);
					super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuGpPracticeGrid, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
				}
	
				public DynamicGrid dyngrdPractices()
				{
					return (DynamicGrid)super.getControl(0);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabGPDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"GP Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabGPDetailsContainer m_tabGPDetailsContainer = (tabGPDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGPDetailsContainer.class, m_tabGPDetails, factory);
				super.addContainer(m_tabGPDetails, m_tabGPDetailsContainer);
				ims.framework.utils.SizeInfo m_tabGPDetailsDesignSize = new ims.framework.utils.SizeInfo(784, 280);
				ims.framework.utils.SizeInfo m_tabGPDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
				m_tabGPDetailsContainer.setContext(form, appForm, m_tabGPDetails, loader, form_images_local, contextMenus, startControlID, m_tabGPDetailsDesignSize, m_tabGPDetailsRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_tabPractices = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Practices and Surgeries", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabPracticesContainer m_tabPracticesContainer = (tabPracticesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPracticesContainer.class, m_tabPractices, factory);
				super.addContainer(m_tabPractices, m_tabPracticesContainer);
				ims.framework.utils.SizeInfo m_tabPracticesDesignSize = new ims.framework.utils.SizeInfo(784, 280);
				ims.framework.utils.SizeInfo m_tabPracticesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
				m_tabPracticesContainer.setContext(form, appForm, m_tabPractices, loader, form_images_local, contextMenus, startControlID, m_tabPracticesDesignSize, m_tabPracticesRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabGPDetails().setVisible(false);
				tabPractices().setVisible(false);
			}
			public void settabGPDetailsEnabled(boolean value)
			{
				tabGPDetails().setEnabled(value);
			}
			public void settabPracticesEnabled(boolean value)
			{
				tabPractices().setEnabled(value);
			}
			public void showtabGPDetails()
			{
				tabPractices().setVisible(false);
				tabGPDetails().setVisible(true);
			}
			public void showtabPractices()
			{
				tabGPDetails().setVisible(false);
				tabPractices().setVisible(true);
			}
	
			public tabGPDetailsContainer tabGPDetails()
			{
				return (tabGPDetailsContainer)super.layers.get(0);
			}
			public tabPracticesContainer tabPractices()
			{
				return (tabPracticesContainer)super.layers.get(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrGPDetailsLayer m_lyrGPDetailsLayer = (lyrGPDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrGPDetailsLayer.class, this, factory);
			super.addLayer(m_lyrGPDetailsLayer);
			m_lyrGPDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrGPDetailsLayer lyrGPDetails()
		{
			return (lyrGPDetailsLayer)super.getLayer(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'NTPF.NewGPCreated' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(115);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGPAdminContacts = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGPAdminContactsADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGPAdminContacts.add(contextMenus.contextMenuGPAdminContactsADDItem);
		contextMenus.contextMenuGPAdminContactsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGPAdminContacts.add(contextMenus.contextMenuGPAdminContactsREMOVEItem);
		form.registerMenu(contextMenus.contextMenuGPAdminContacts);
		contextMenus.contextMenuGPAdminMappings = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGPAdminMappingsADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGPAdminMappings.add(contextMenus.contextMenuGPAdminMappingsADDItem);
		contextMenus.contextMenuGPAdminMappingsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGPAdminMappings.add(contextMenus.contextMenuGPAdminMappingsREMOVEItem);
		form.registerMenu(contextMenus.contextMenuGPAdminMappings);
		contextMenus.contextMenuGpPracticeGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGpPracticeGridSearchAddPracticeItem = factory.createMenuItem(startControlID.intValue() + 5, "Search/Add Practice", true, false, new Integer(102164), true, true);
		contextMenus.contextMenuGpPracticeGrid.add(contextMenus.contextMenuGpPracticeGridSearchAddPracticeItem);
		contextMenus.contextMenuGpPracticeGridRemovePracticeItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Practice", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGpPracticeGrid.add(contextMenus.contextMenuGpPracticeGridRemovePracticeItem);
		form.registerMenu(contextMenus.contextMenuGpPracticeGrid);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 832, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		ims.framework.FormUiLogic m_customControlGpSearchForm = loader.loadComponent(102104, appForm, startControlID * 10 + 1000, anchoringHelper18.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_customControlGpSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(8), new Integer(16), new Integer(832), new Integer(248), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_customControlGpSearchForm, instance1 } );
		ims.framework.Control m_customControlGpSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_customControlGpSearchForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlGpSearchControl);
		Menu[] menus1 = m_customControlGpSearchForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 816, 320, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnGPDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnGPDetails);
		ctnGPDetailsContainer ctnGPDetails = (ctnGPDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnGPDetailsContainer.class, m_ctnGPDetails, factory);
		ims.framework.utils.SizeInfo m_ctnGPDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 320);
		ims.framework.utils.SizeInfo m_ctnGPDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
		ctnGPDetails.setContext(form, appForm, m_ctnGPDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnGPDetailsDesignSize, m_ctnGPDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnGPDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 704, 600, 128, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Search/Edit Practice", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 387, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 677, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 720, 0, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return To Work Queue", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.admin.forms.gpsearch.IComponent customControlGpSearch()
	{
		return (ims.admin.forms.gpsearch.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlGpSearchValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlGpSearchVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlGpSearchVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlGpSearchEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlGpSearchEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ctnGPDetailsContainer ctnGPDetails()
	{
		return (ctnGPDetailsContainer)super.getContainer(0);
	}
	public Button btnPractice()
	{
		return (Button)super.getControl(2);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(3);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Link lnkBack()
	{
		return (Link)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			NTPF = new NTPFForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				GPPracticeSelect = new LocalFormName(103112);
				GPAdminDialog = new LocalFormName(103145);
			}
			public final FormName GPPracticeSelect;
			public final FormName GPAdminDialog;
		}
		public final class NTPFForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NTPFForms()
			{
				WorkQueue = new LocalFormName(110109);
				WorkQueue2 = new LocalFormName(110131);
			}
			public final FormName WorkQueue;
			public final FormName WorkQueue2;
		}

		public AdminForms Admin;
		public NTPFForms NTPF;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				ClearDisabled16 = new ImageHelper(102167, "Images/Core/ClearDisabled16.gif", new Integer(16), new Integer(16));
				ClearEnabled16 = new ImageHelper(102168, "Images/Core/Clear.gif", new Integer(16), new Integer(16));
				Search_disabled = new ImageHelper(102263, "Images/Core/bin_dis.gif", new Integer(15), new Integer(15));
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image ClearDisabled16;
			public final ims.framework.utils.Image ClearEnabled16;
			public final ims.framework.utils.Image Search_disabled;
			public final ims.framework.utils.Image Search;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image LocationSite;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_GPVo = new ims.framework.ContextVariable("GPVo", prefix + "_lv_Admin.GPAdmin.__internal_x_context__GPVo_" + componentIdentifier + "");
			cxl_UpdatePractice = new ims.framework.ContextVariable("UpdatePractice", prefix + "_lv_Admin.GPAdmin.__internal_x_context__UpdatePractice_" + componentIdentifier + "");
			cxl_PreviousForm = new ims.framework.ContextVariable("PreviousForm", prefix + "_lv_Admin.GPAdmin.__internal_x_context__PreviousForm_" + componentIdentifier + "");
		}
		
		public boolean getGPVoIsNotNull()
		{
			return !cxl_GPVo.getValueIsNull(context);
		}
		public ims.core.vo.GP getGPVo()
		{
			return (ims.core.vo.GP)cxl_GPVo.getValue(context);
		}
		public void setGPVo(ims.core.vo.GP value)
		{
			cxl_GPVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GPVo = null;
		public boolean getUpdatePracticeIsNotNull()
		{
			return !cxl_UpdatePractice.getValueIsNull(context);
		}
		public Boolean getUpdatePractice()
		{
			return (Boolean)cxl_UpdatePractice.getValue(context);
		}
		public void setUpdatePractice(Boolean value)
		{
			cxl_UpdatePractice.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatePractice = null;
		public boolean getPreviousFormIsNotNull()
		{
			return !cxl_PreviousForm.getValueIsNull(context);
		}
		public ims.framework.FormName getPreviousForm()
		{
			return (ims.framework.FormName)cxl_PreviousForm.getValue(context);
		}
		public void setPreviousForm(ims.framework.FormName value)
		{
			cxl_PreviousForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousForm = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GPAdminContacts implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int REMOVE = 2;
		}
		public void disableAllGPAdminContactsMenuItems()
		{
			this.contextMenuGPAdminContactsADDItem.setEnabled(false);
			this.contextMenuGPAdminContactsREMOVEItem.setEnabled(false);
		}
		public void hideAllGPAdminContactsMenuItems()
		{
			this.contextMenuGPAdminContactsADDItem.setVisible(false);
			this.contextMenuGPAdminContactsREMOVEItem.setVisible(false);
		}
		private Menu contextMenuGPAdminContacts;
		public MenuItem getGPAdminContactsADDItem()
		{
			return this.contextMenuGPAdminContactsADDItem;
		}
		private MenuItem contextMenuGPAdminContactsADDItem;
		public MenuItem getGPAdminContactsREMOVEItem()
		{
			return this.contextMenuGPAdminContactsREMOVEItem;
		}
		private MenuItem contextMenuGPAdminContactsREMOVEItem;
		public final class GPAdminMappings implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllGPAdminMappingsMenuItems()
		{
			this.contextMenuGPAdminMappingsADDItem.setEnabled(false);
			this.contextMenuGPAdminMappingsREMOVEItem.setEnabled(false);
		}
		public void hideAllGPAdminMappingsMenuItems()
		{
			this.contextMenuGPAdminMappingsADDItem.setVisible(false);
			this.contextMenuGPAdminMappingsREMOVEItem.setVisible(false);
		}
		private Menu contextMenuGPAdminMappings;
		public MenuItem getGPAdminMappingsADDItem()
		{
			return this.contextMenuGPAdminMappingsADDItem;
		}
		private MenuItem contextMenuGPAdminMappingsADDItem;
		public MenuItem getGPAdminMappingsREMOVEItem()
		{
			return this.contextMenuGPAdminMappingsREMOVEItem;
		}
		private MenuItem contextMenuGPAdminMappingsREMOVEItem;
		public final class GpPracticeGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int SearchAddPractice = 5;
			public static final int RemovePractice = 6;
		}
		public void disableAllGpPracticeGridMenuItems()
		{
			this.contextMenuGpPracticeGridSearchAddPracticeItem.setEnabled(false);
			this.contextMenuGpPracticeGridRemovePracticeItem.setEnabled(false);
		}
		public void hideAllGpPracticeGridMenuItems()
		{
			this.contextMenuGpPracticeGridSearchAddPracticeItem.setVisible(false);
			this.contextMenuGpPracticeGridRemovePracticeItem.setVisible(false);
		}
		private Menu contextMenuGpPracticeGrid;
		public MenuItem getGpPracticeGridSearchAddPracticeItem()
		{
			return this.contextMenuGpPracticeGridSearchAddPracticeItem;
		}
		private MenuItem contextMenuGpPracticeGridSearchAddPracticeItem;
		public MenuItem getGpPracticeGridRemovePracticeItem()
		{
			return this.contextMenuGpPracticeGridRemovePracticeItem;
		}
		private MenuItem contextMenuGpPracticeGridRemovePracticeItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[79];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ID", "ID_Organisation");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-NAME", "Name");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-COMMENT", "Comment");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-PCTCODE", "PctCode");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
