//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3922.16454)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.printerslistandselection;

import java.util.ArrayList;

import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.interfaces.IPrinter;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;	
	
	@Override
	protected void onQmbPrinterTextSubmited(String value) throws PresentationLogicException
	{
		if (engine.getPrinterProvider() == null)
			return;
				
		IPrinter[] printers = new IPrinter[0];
		ArrayList<IPrinter> printersList = new ArrayList<IPrinter>();
		
		if (form.getLocalContext().getLocation() == null)
		{
			printers = engine.getPrinterProvider().getAllPrinters();
		}
		else
		{
			printers = engine.getPrinterProvider().getPrintersForLocation(form.getLocalContext().getLocation());
		}
		
		value = value.replace("%", "");		//WDEV-12789

		if (value != null && value.length() > 0)
		{
			for (int i = 0; i < printers.length; i++)
			{
				if (printers[i].getIPrinterName().toLowerCase().contains(value.toLowerCase()))
				{
					printersList.add(printers[i]);
				}
			}

			printers = new IPrinter[printersList.size()];
			printersList.toArray(printers);
		}
		
		populateQueryCombo(printers, true);
	}

	private void populateQueryCombo(IPrinter[] printers, boolean showOpened)
	{
		form.qmbPrinter().clear();
		
		if(printers != null)		//wdev-12582
		{
			for (int i = 0; i < printers.length; i++)
			{	
				form.qmbPrinter().newRow(printers[i], printers[i].getIPrinterName());
			}
			if (printers.length == 1)
			{
				form.qmbPrinter().newRow(printers[0], printers[0].getIPrinterName());
			}
		}
		
		IPrinter printer = null;
		
		if (form.getLocalContext().getSetDefaultPrinterIsNotNull() && form.getLocalContext().getSetDefaultPrinter() && engine.getPrinterProvider() != null)			//wdev-12582
		{
			printer =  engine.getPrinterProvider().getPrinterByLocationAndScope(form.getLocalContext().getLocation(), PrinterScope.DEFAULT);						
		}
		else if (form.getLocalContext().getSetNewResultsPrinterIsNotNull() && form.getLocalContext().getSetNewResultsPrinter() && engine.getPrinterProvider() != null) //wdev-12582
		{
			printer =  engine.getPrinterProvider().getPrinterByLocationAndScope(form.getLocalContext().getLocation(), PrinterScope.NEWRESULT);						
		}
		else if (form.getLocalContext().getSetOCSOrderPrinterIsNotNull() && form.getLocalContext().getSetOCSOrderPrinter() && engine.getPrinterProvider() != null)		//wdev-12582
		{
			printer =  engine.getPrinterProvider().getPrinterByLocationAndScope(form.getLocalContext().getLocation(), PrinterScope.OCSORDER);									
		}
		
		//WDEV-17687; //WDEV-16961
		if (form.qmbPrinter().getValues().contains(printer))
		{
			form.qmbPrinter().setValue(printer);
		}
		//else printer = null;
		
		if ((form.qmbPrinter().getValue() != null || (printers != null && printers.length > 0)) && showOpened)
		{
			form.qmbPrinter().showOpened();
		}
		
		form.getLocalContext().setSelectedPrinter(printer);		
		form.getLocalContext().setPrintersLists(printers);		
		
		form.fireCustomControlValueChanged();		
	}
	
	public void initialize(ILocation location, PrinterScope scope, Boolean showOpened)
	{	
		form.getLocalContext().setShowOpened(showOpened);
		initialize(location, scope);		
	}
	
	public void initialize(ILocation location, PrinterScope scope)
	{
		form.getLocalContext().setLocation(location);		
		//WDEV-16961 
		form.getLocalContext().setSetDefaultPrinter(null);
		form.getLocalContext().setSetNewResultsPrinter(null);
		form.getLocalContext().setSetOCSOrderPrinter(null);
		
		if (scope != null)
		{
			if (scope.equals(PrinterScope.DEFAULT))		
				form.getLocalContext().setSetDefaultPrinter(true);
			else if (scope.equals(PrinterScope.NEWRESULT))
				form.getLocalContext().setSetNewResultsPrinter(true);
			else if (scope.equals(PrinterScope.OCSORDER))
				form.getLocalContext().setSetOCSOrderPrinter(true);
		}
		
		IPrinter[] printers = null;
		if (location != null)
		{	
			if(engine.getPrinterProvider() != null)		//wdev-12582
				printers  = engine.getPrinterProvider().getPrintersForLocation(form.getLocalContext().getLocation());			
		}
		else
		{
			if(engine.getPrinterProvider() != null)		//wdev-12582
				printers = engine.getPrinterProvider().getAllPrinters();
		}
		form.getLocalContext().setPrintersLists(printers);				
		populateQueryCombo(printers, Boolean.TRUE.equals(form.getLocalContext().getShowOpened()));
	}

	public IPrinter[] getPrinters()
	{
		return form.getLocalContext().getPrintersLists();
	}

	public IPrinter getDefaultPrinter()
	{
		return form.getLocalContext().getDefaultPrinter();
	}

	public IPrinter getSelectedPrinter()
	{
		return form.getLocalContext().getSelectedPrinter();
	}

	public void clear()
	{
		form.qmbPrinter().clear();
	}
	
	@Override
	protected void onQmbPrinterValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedPrinter(form.qmbPrinter().getValue());
	}

	public void showOpened(Boolean showOpened)
	{
		form.getLocalContext().setShowOpened(showOpened);
	}

	//	WDEV-13680
	public void setIsRequired(Boolean isRequired) 
	{
		if(isRequired != null)
		{
			form.qmbPrinter().setRequired(isRequired);
		}
	}
}
