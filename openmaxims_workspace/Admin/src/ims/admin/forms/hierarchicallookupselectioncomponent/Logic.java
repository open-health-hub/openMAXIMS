//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.70 build 3434.21163)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.hierarchicallookupselectioncomponent;


import ims.framework.controls.TreeNode;
import ims.framework.utils.Image;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVo;
import ims.vo.lookups.ClassHelper;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	private void initialize() 
	{
		clearInstanceControls();
	}
	
	private void clearInstanceControls() 
	{
		form.treLookup().clear();
	}
	
	private void populateLookupTree(Integer lookupTypeId, Boolean activeOnly, Boolean showInstancesImage) 
	{
		if(lookupTypeId == null)
			return;
		
		if(activeOnly == null)
			activeOnly = true;
		
		if(showInstancesImage == null)
			showInstancesImage = false;
		
		LookupTypeVo lookupType = new LookupTypeVo(lookupTypeId);
		LookupInstanceCollection instColl;
		
		if (lookupTypeId < 0)
		{
			instColl = domain.getLookupService().getLookupCollection(lookupType, true, activeOnly);
		}
		else
		{
			instColl = domain.getLookupService().getLookupCollection(lookupTypeId, ClassHelper.getLookupCollectionClass(lookupTypeId), ClassHelper.getLookupClass(lookupTypeId), true, activeOnly);
		}
		
		if(instColl == null)
			return;
		
		LookupInstVo[] roots = instColl.getRoots();
		
		fillLookupHierarchy(null, roots, showInstancesImage);
	}
	
	private void fillLookupHierarchy(TreeNode rootNode, LookupInstVo[] childrens, Boolean showInstancesImage)
	{
		if(childrens == null)
			return;
		
		for (int i = 0; i < childrens.length; i++)
		{
			TreeNode newNode = null;
			
			if(rootNode == null)
			{
				newNode = form.treLookup().getNodes().add(childrens[i], childrens[i].getText());
			}
			else
			{
				newNode = rootNode.getNodes().add(childrens[i], childrens[i].getText());
			}
			
			if(showInstancesImage)
				setNodeImage(childrens[i], newNode);
			
			LookupInstVo[] childrenA = new LookupInstVo [childrens[i].getChildInstances().size()];
			childrenA = childrens[i].getChildInstances().toArray(childrenA);
			
			fillLookupHierarchy(newNode, childrenA, showInstancesImage);
		}
	}

	private void setNodeImage(LookupInstVo children, TreeNode newNode) 
	{
		if(newNode == null || children == null)
			return;
		
		Image img = getCorrectImage(children);
		newNode.setExpandedImage(img);
		newNode.setCollapsedImage(img);
		newNode.setSelectedImage(img);
	}
	
	private ims.framework.utils.Image getCorrectImage(LookupInstVo inst)
	{
		if(inst == null)
			return null;
		
		if (!inst.isActive())
			return form.getImages().Core.RedSqaure;
		
		if (inst.getId() < 0)
			return form.getImages().Core.YellowSquare;
		
		return form.getImages().Core.BlueSquare;
	}
	
	
	//------------------- Component Interface methods ---------------------------
	
	
	public void initialize(Integer lookupTypeId) 
	{
		populateLookupTree(lookupTypeId, true, false);
	}

	public void initialize(Integer lookupTypeId, Boolean activeOnly, Boolean showInstancesImage) 
	{
		populateLookupTree(lookupTypeId, activeOnly, showInstancesImage);
	}
	
	public LookupInstVo getValue() 
	{
		if(form.treLookup().getValue() instanceof LookupInstVo)
			return (LookupInstVo) form.treLookup().getValue();
		
		return null;
	}

	public void setValue(LookupInstVo lookupInstance) 
	{
		form.treLookup().setValue(lookupInstance);
		
		if(lookupInstance == null)
			form.treLookup().collapseAll();
	}

	public void clear() 
	{
		form.treLookup().clear();
	}
	
	public void setEnabled(Boolean value) 
	{
		if (value == null)
			return;
		
		form.treLookup().setEnabled(value);
	}
}
