//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3642.24101)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.procedurespecialtyhotlist;

import ims.admin.forms.procedurespecialtyhotlist.GenForm.grdProceduresRow;
import ims.admin.forms.procedurespecialtyhotlist.GenForm.grdProceduresRowCollection;
import ims.admin.forms.procedurespecialtyhotlist.GenForm.grdSelectedProceduresRow;
import ims.admin.forms.procedurespecialtyhotlist.GenForm.grdSelectedProceduresRowCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Clinical.setSelectedProcedures(getSelectedProceduresFromGridSelectedProcedure());
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlState();

	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (validateSearchCriteria())
		{
			doSearchAndShowInGrid();
			updateControlState();
		}
	}

	@Override
	protected void onBtnAddSelectedClick() throws PresentationLogicException
	{
		populateGridSelectedProceduresFromData(getSelectedProceduresFromGridProcedure());
		updateControlState();

	}

	@Override
	protected void onBtnDeselectAllClick() throws PresentationLogicException
	{
		selectDeselectAll(false);
		updateControlState();

	}

	@Override
	protected void onBtnSelectAllClick() throws PresentationLogicException
	{
		selectDeselectAll(true);
		updateControlState();
	}

	@Override
	protected void onGrdProceduresGridCheckBoxClicked(int column, grdProceduresRow row, boolean isChecked) throws PresentationLogicException
	{
		updateControlState();

	}
	
	@Override
	protected void onGrdSelectedProceduresGridCheckBoxClicked(int column, grdSelectedProceduresRow row, boolean isChecked) throws PresentationLogicException
	{
		updateControlState();
		
	}
	private void initialize()
	{
		rebindAllLookups();
		form.btnAddSelected().setVisible(true);
		form.btnDeselectAll().setVisible(true);
		form.btnSelect().setVisible(true);
		form.btnSelectAll().setVisible(true);
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		updateControlState();
	}

	private void clearScreen()
	{
		form.cmbSpeciality().setValue(null);
		form.txtProcName().setValue(null);
		form.grdProcedures().getRows().clear();
	}

	protected boolean validateSearchCriteria()
	{
		if (form.cmbSpeciality().getValue() == null && form.txtProcName().getValue() == null)
		{
			engine.showErrors(new String[] { "Please select a speciality or enter some text in name field" });
			return false;
		}
		return true;
	}

	private void doSearchAndShowInGrid() throws PresentationLogicException
	{
		form.grdProcedures().getRows().clear();
		ProcedureLiteVoCollection procs = null;
		try
		{
			procs = domain.listProcedures(form.cmbSpeciality().getValue(), form.txtProcName().getValue());
		}
		catch (DomainInterfaceException e)
		{
			throw new PresentationLogicException(e);
		}
		if (procs == null || procs.size() == 0)
		{
			engine.showMessage( "No Procedures were found. Please modify your search criteria","No results", MessageButtons.OK, MessageIcon.INFORMATION);
			return;
		}
		populateGridProceduresFromData(procs);

	}

	private void populateGridProceduresFromData(ProcedureLiteVoCollection procs)
	{
		if (procs == null || procs.size() == 0)
			return;
		for (int i = 0; i < procs.size(); i++)
		{
			ProcedureLiteVo procedureLiteVo = procs.get(i);
			if (procedureLiteVo != null)
			{
				addProcedureInGridProcedure(procedureLiteVo);
			}
		}
	}

	private void addProcedureInGridProcedure(ProcedureLiteVo procedureLiteVo)
	{
		grdProceduresRow newRow = form.grdProcedures().getRows().newRow();
		newRow.setValue(procedureLiteVo);
		newRow.setColumnName(procedureLiteVo.getProcedureName());
	}

	private ProcedureLiteVoCollection getSelectedProceduresFromGridProcedure()
	{
		grdProceduresRowCollection rows = form.grdProcedures().getRows();
		if (rows == null || rows.size() == 0)
			return null;
		ProcedureLiteVoCollection value = new ProcedureLiteVoCollection();
		for (int i = 0; i < rows.size(); i++)
		{
			grdProceduresRow proceduresRow = rows.get(i);
			if (proceduresRow.getColumnSelect() == true)
			{
				value.add(proceduresRow.getValue());
			}
		}
		return value;

	}

	private ProcedureLiteVoCollection getSelectedProceduresFromGridSelectedProcedure()
	{
		grdSelectedProceduresRowCollection rows = form.grdSelectedProcedures().getRows();
		if (rows == null || rows.size() == 0)
			return null;
		ProcedureLiteVoCollection value = new ProcedureLiteVoCollection();
		for (int i = 0; i < rows.size(); i++)
		{
			grdSelectedProceduresRow proceduresRow = rows.get(i);
			if (proceduresRow.getColumnSelect() == true)
			{
				value.add(proceduresRow.getValue());
			}
		}
		return value;

	}

	private void populateGridSelectedProceduresFromData(ProcedureLiteVoCollection procs)
	{
		if (procs == null || procs.size() == 0)
			return;
		for (int i = 0; i < procs.size(); i++)
		{
			ProcedureLiteVo procedureLiteVo = procs.get(i);
			if (procedureLiteVo != null)
			{
				addProcedureInGridSelectedProcedure(procedureLiteVo);
			}
		}
	}

	private void addProcedureInGridSelectedProcedure(ProcedureLiteVo procedureLiteVo)
	{
		if (form.grdSelectedProcedures().getValues().contains(procedureLiteVo))
			return;
		grdSelectedProceduresRow newRow = form.grdSelectedProcedures().getRows().newRow();
		newRow.setValue(procedureLiteVo);
		newRow.setColumnName(procedureLiteVo.getProcedureName());
		newRow.setColumnSelect(true);
	}

	private void selectDeselectAll(boolean select)
	{
		grdProceduresRowCollection rows = form.grdProcedures().getRows();
		if (rows == null || rows.size() == 0)
			return;
		for (int i = 0; i < rows.size(); i++)
			rows.get(i).setColumnSelect(select);
	}

	private void updateControlState()
	{
		boolean procSelectedInGridProcedures = isProcSelectedInGridProcedures();
		form.btnAddSelected().setEnabled(procSelectedInGridProcedures);
		form.btnDeselectAll().setEnabled(procSelectedInGridProcedures);
		form.btnSelectAll().setEnabled(!allProcSelectedInGridProcedures());
		form.btnSelect().setEnabled(isProcSelectedInGridSelectedProcedures());
	}

	private boolean isProcSelectedInGridProcedures()
	{
		grdProceduresRowCollection rows = form.grdProcedures().getRows();
		if (rows == null)
			return false;
		for (int i=0 ; i<rows.size() ; i++)
		{
			if (rows.get(i).getColumnSelect() == true)
			{
				return true;
			}
		}
		return false;

	}

	private boolean isProcSelectedInGridSelectedProcedures()
	{
		grdSelectedProceduresRowCollection rows = form.grdSelectedProcedures().getRows();
		if (rows == null)
			return false;
		for (int i=0 ; i<rows.size() ; i++)
		{
			if (rows.get(i).getColumnSelect() == true)
			{
				return true;
			}
		}
		return false;
	}
	private boolean allProcSelectedInGridProcedures()
	{
		grdProceduresRowCollection rows = form.grdProcedures().getRows();
		if (rows.size() == 0 )
			return true;
		for (int i=0 ; i < rows.size() ; i++)
		{
			if (rows.get(i).getColumnSelect() != true)
			{
				return false;
			}
		}
		return true;
		
	}

	
}
