//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.applicationforms;

import ims.admin.forms.applicationforms.GenForm.Group1Enumeration;
import ims.admin.forms.applicationforms.GenForm.grdFormsRow;
import ims.admin.forms.applicationforms.GenForm.lyrDetailsLayer.tabDetailsContainer.grdLookupsRow;
import ims.admin.vo.AppFormListVo;
import ims.admin.vo.FormLookupVo;
import ims.admin.vo.FormLookupVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.Configuration;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.Form;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			setFormMode(FormMode.VIEW);
			open();
		}
		
	}
	
	private boolean save()
	{
		AppFormListVo selectedRecord = populateDataFromScreen(form.getLocalContext().getSelectedRecord());
		
		String[] err = selectedRecord.validate();
		if (err != null && err.length > 0)
		{
			engine.showErrors(err);
			return false;
		}
		try
		{
			selectedRecord = domain.saveForm(selectedRecord);
		}
		catch (StaleObjectException e)
		{
			engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
			return false;
		}
		
		form.getLocalContext().setSelectedRecord(domain.getAppFormList(selectedRecord.getFormId()));
		
		return true;
	}
	
	private AppFormListVo populateDataFromScreen(IAppForm selectedRecord) 
	{
		if (selectedRecord == null)
			return null;
		
		AppFormListVo appFormListVo = domain.getAppFormList(selectedRecord.getFormId());
		if (appFormListVo != null)
		{
			appFormListVo.setCodeMappings(form.lyrDetails().tabDetails().ccMappings().getValue());
			return appFormListVo;
		}
		
		return null;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setFormMode(FormMode.EDIT);
	}
	@Override
	protected void onQmbSearchTextSubmited(String formName) throws ims.framework.exceptions.PresentationLogicException
	{
		initializeLayerDetails();
		clearDetails();
		populateScreenFromData(getForms(formName));
	}		
	
	private void intialize() throws PresentationLogicException
	{
		setFormMode(FormMode.VIEW);
		hideTabsHeaders();
		form.lyrDetails().showtabNoSelect();
		initializeLayerDetails();
		form.Group1().setValue(Group1Enumeration.rdoAll);
		onRadioButtonGroup1ValueChanged();
	}
	private void hideTabsHeaders()
	{
		form.lyrDetails().tabDetails().setHeaderVisible(false);
		form.lyrDetails().tabNoSelect().setHeaderVisible(false);		
	}
	private void initializeLayerDetails() 
	{			
		clearDetails();
		form.lyrDetails().tabDetails().ccMappings().initialize();
	}
	private void setFormMode(FormMode formMode) 
	{	
		form.setMode(formMode);	
	}
	private void clearDetails()
	{
		form.lyrDetails().tabDetails().lblName().setValue(null);
		form.lyrDetails().tabDetails().lblCaption().setValue(null);
		form.lyrDetails().tabDetails().txtDescription().setValue(null);
		
		form.lyrDetails().tabDetails().imgImage().setVisible(false);
		form.lyrDetails().tabDetails().imgImage().setValue(null);
		
		form.lyrDetails().tabDetails().grdLookups().getRows().clear();
		form.lyrDetails().tabDetails().ccMappings().clear();			
	}
	
	private ArrayList<IAppForm> getForms(String formName)
	{		
		try
		{
			ArrayList forms = new ArrayList();
			Collection<IAppForm> registeredForms = Configuration.loadConfiguration().getRegisteredForms().values();
			
			Iterator<IAppForm> iterator = registeredForms.iterator();
			while (iterator.hasNext())
			{
				IAppForm form = iterator.next();
				if (Boolean.FALSE.equals(form.isComponent()) &&
						Boolean.FALSE.equals(form.isDialog()) &&
							Boolean.FALSE.equals(form.isAlias()) &&
								Boolean.TRUE.equals(form.canBeInNavigation())) 
					{
					if (formName != null && formName.trim().length() > 0)
					{
						if (Boolean.FALSE.equals(form.getName().toLowerCase().contains(formName)))
						{
							continue;
						}
					}
					
					forms.add(form);					
				}				
			}
			
			Collections.sort(forms);			
		
			return forms;
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
		return null;
	}
	
	private void populateScreenFromData(ArrayList<IAppForm> forms)
	{
		form.grdForms().getRows().clear();
		if (forms != null)
		{
			for (int i = 0; i < forms.size(); i++) 
			{
				grdFormsRow row = form.grdForms().getRows().newRow();
				IAppForm listForm = forms.get(i);
				row.setColumn1(listForm.getName());
				row.setValue(listForm);
			}
		}
	}
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{	
		intialize();
		open();	
	}
	
	private void open() throws PresentationLogicException 
	{			
		populateScreenFromData(getForms(form.qmbSearch().getEditedText()));
		reselectRecord();
	}
	private void reselectRecord() throws PresentationLogicException 
	{
		form.grdForms().setValue(form.getLocalContext().getSelectedRecord());
		onGrdFormsSelectionChanged();
	}
	@Override
	protected void onGrdFormsSelectionChanged() throws PresentationLogicException 
	{	
		if (form.grdForms().getSelectedRow() != null)
		{
			form.lyrDetails().showtabDetails();
			storeSelectedRow();
			updateControlsStatus();
			displaySelectedRecord(form.grdForms().getSelectedRow().getValue());
		}
	}
	private void storeSelectedRow() 
	{
		form.getLocalContext().setSelectedRecord(form.grdForms().getSelectedRow().getValue());
	}
	
	private void displaySelectedRecord(IAppForm selectedForm) 
	{	
		if (selectedForm == null)
			return;
		
		clearDetails();
		
		AppFormListVo appFormListVo = domain.getAppFormList(selectedForm.getFormId()); 		
		if (appFormListVo != null)
		{		
			form.lyrDetails().tabDetails().lblName().setValue(appFormListVo.getName());
			form.lyrDetails().tabDetails().lblCaption().setValue(appFormListVo.getCaption());
			form.lyrDetails().tabDetails().txtDescription().setValue(appFormListVo.getDescription());
			if (appFormListVo.getImage() != null)
			{
				form.lyrDetails().tabDetails().imgImage().setVisible(true);
				form.lyrDetails().tabDetails().imgImage().setValue(appFormListVo.getImage());
			}
			else
			{
				form.lyrDetails().tabDetails().imgImage().setVisible(false);
				form.lyrDetails().tabDetails().imgImage().setValue(null);
			}
						
			if (appFormListVo.getLookupsIsNotNull())
			{			
				FormLookupVoCollection lookups = appFormListVo.getLookups();
				populateLookupsGrid(lookups);			
			}
			
			form.lyrDetails().tabDetails().ccMappings().setValue(appFormListVo.getCodeMappings());
		}
	}
	
	private void populateLookupsGrid(FormLookupVoCollection lookups) 
	{
		if (lookups == null || lookups.size() == 0)
			return;
		
		form.lyrDetails().tabDetails().grdLookups().getRows().clear();
		for (int i = 0; i < lookups.size(); i++) 
		{
			FormLookupVo lookup = lookups.get(i);			
			grdLookupsRow row = form.lyrDetails().tabDetails().grdLookups().getRows().newRow();
			row.setColName(lookup.getLookupType().getName());
			row.setColDesc(lookup.getLookupType().getDescription());
		}		
	}
	@Override
	protected void onFormModeChanged() 
	{	
		form.lyrDetails().tabDetails().ccMappings().setMode(form.getMode());
		form.lyrDetails().tabDetails().ccMappings().setComponentMode(form.getMode());
		
		updateControlsStatus();
	}
	private void updateControlsStatus() 
	{	
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdForms().getSelectedRow() != null);
		form.qmbSearch().setEnabled(form.getMode().equals(FormMode.VIEW) && form.Group1().getValue().equals(Group1Enumeration.rdoSearch));
	}

	@Override
	protected void onRadioButtonGroup1ValueChanged() throws PresentationLogicException 
	{	
		if (form.Group1().getValue().equals(Group1Enumeration.rdoAll))
		{		
			form.qmbSearch().setValue(null);
			form.qmbSearch().setVisible(false);
			
			open();
		}
		else if (form.Group1().getValue().equals(Group1Enumeration.rdoSearch))
		{			
			form.qmbSearch().setEnabled(true);
			form.qmbSearch().setVisible(true);
		}
	}
	
}
