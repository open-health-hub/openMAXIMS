//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.servicestats;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdMonitorListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMonitorListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setServiceNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isServiceNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showServiceNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getServiceName()
		{
			return (String)super.row.get(0);
		}
		public void setServiceName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellServiceNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setHitsReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isHitsReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showHitsOpened()
		{
			super.row.showOpened(1);
		}
		public Integer getHits()
		{
			return (Integer)super.row.get(1);
		}
		public void setHits(Integer value)
		{
			super.row.set(1, value);
		}
		public void setCellHitsTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setAvgReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isAvgReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showAvgOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getAvg()
		{
			return (Integer)super.row.get(2);
		}
		public void setAvg(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellAvgTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setTotalReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isTotalReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showTotalOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getTotal()
		{
			return (Integer)super.row.get(3);
		}
		public void setTotal(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellTotalTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setStdDevReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isStdDevReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showStdDevOpened()
		{
			super.row.showOpened(4);
		}
		public String getStdDev()
		{
			return (String)super.row.get(4);
		}
		public void setStdDev(String value)
		{
			super.row.set(4, value);
		}
		public void setCellStdDevTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setLastValueReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isLastValueReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showLastValueOpened()
		{
			super.row.showOpened(5);
		}
		public String getLastValue()
		{
			return (String)super.row.get(5);
		}
		public void setLastValue(String value)
		{
			super.row.set(5, value);
		}
		public void setCellLastValueTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setMinReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isMinReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showMinOpened()
		{
			super.row.showOpened(6);
		}
		public String getMin()
		{
			return (String)super.row.get(6);
		}
		public void setMin(String value)
		{
			super.row.set(6, value);
		}
		public void setCellMinTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setMaxReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isMaxReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showMaxOpened()
		{
			super.row.showOpened(7);
		}
		public String getMax()
		{
			return (String)super.row.get(7);
		}
		public void setMax(String value)
		{
			super.row.set(7, value);
		}
		public void setCellMaxTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isActiveReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showActiveOpened()
		{
			super.row.showOpened(8);
		}
		public String getActive()
		{
			return (String)super.row.get(8);
		}
		public void setActive(String value)
		{
			super.row.set(8, value);
		}
		public void setCellActiveTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setAvgActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isAvgActiveReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showAvgActiveOpened()
		{
			super.row.showOpened(9);
		}
		public String getAvgActive()
		{
			return (String)super.row.get(9);
		}
		public void setAvgActive(String value)
		{
			super.row.set(9, value);
		}
		public void setCellAvgActiveTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setMaxActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isMaxActiveReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showMaxActiveOpened()
		{
			super.row.showOpened(10);
		}
		public String getMaxActive()
		{
			return (String)super.row.get(10);
		}
		public void setMaxActive(String value)
		{
			super.row.set(10, value);
		}
		public void setCellMaxActiveTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setFirstAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean isFirstAccessReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showFirstAccessOpened()
		{
			super.row.showOpened(11);
		}
		public String getFirstAccess()
		{
			return (String)super.row.get(11);
		}
		public void setFirstAccess(String value)
		{
			super.row.set(11, value);
		}
		public void setCellFirstAccessTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setLastAccessReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean isLastAccessReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showLastAccessOpened()
		{
			super.row.showOpened(12);
		}
		public String getLastAccess()
		{
			return (String)super.row.get(12);
		}
		public void setLastAccess(String value)
		{
			super.row.set(12, value);
		}
		public void setCellLastAccessTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMonitorListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMonitorListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMonitorListRow get(int index)
		{
			return new grdMonitorListRow(super.collection.get(index));
		}
		public grdMonitorListRow newRow()
		{
			return new grdMonitorListRow(super.collection.newRow());
		}
		public grdMonitorListRow newRow(boolean autoSelect)
		{
			return new grdMonitorListRow(super.collection.newRow(autoSelect));
		}
		public grdMonitorListRow newRowAt(int index)
		{
			return new grdMonitorListRow(super.collection.newRowAt(index));
		}
		public grdMonitorListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMonitorListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMonitorListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdMonitorListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMonitorListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMonitorListRowCollection getRows()
		{
			return new grdMonitorListRowCollection(super.grid.getRows());
		}
		public grdMonitorListRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMonitorListRow(row);
		}
		public void setServiceNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getServiceNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setHitsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getHitsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setAvgHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getAvgHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setTotalHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getTotalHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setStdDevHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getStdDevHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setLastValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getLastValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setMinHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getMinHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setMaxHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getMaxHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setAvgActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getAvgActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setMaxActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getMaxActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setFirstAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getFirstAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setLastAccessHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getLastAccessHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Filter:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 368, 16, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Apply", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reset Counters", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 56, 16, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 816, 536, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMonitorListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdMonitorListTemp);
		grdMonitorListGrid grdMonitorList = (grdMonitorListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMonitorListGrid.class, m_grdMonitorListTemp);
		grdMonitorList.addStringColumn("Service Name", 0, 0, 300, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setServiceNameHeaderTooltip("Service Name");
		grdMonitorList.addIntColumn("Hits", 0, 0, 25, true, true, null, false, 1, true);
		grdMonitorList.setHitsHeaderTooltip("Hits");
		grdMonitorList.addIntColumn("Avg", 0, 0, 50, true, true, null, false, 1, true);
		grdMonitorList.setAvgHeaderTooltip("Average (ms)");
		grdMonitorList.addIntColumn("Total", 0, 0, 50, true, true, null, false, 1, true);
		grdMonitorList.setTotalHeaderTooltip("Total (ms)");
		grdMonitorList.addStringColumn("Std Dev", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setStdDevHeaderTooltip("Standard Deviation");
		grdMonitorList.addStringColumn("Last", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setLastValueHeaderTooltip("Last");
		grdMonitorList.addStringColumn("Min", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setMinHeaderTooltip("Minimum");
		grdMonitorList.addStringColumn("Max", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setMaxHeaderTooltip("Maximum");
		grdMonitorList.addStringColumn("Active", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setActiveHeaderTooltip("Active");
		grdMonitorList.addStringColumn("Avg Active", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setAvgActiveHeaderTooltip("Average Active");
		grdMonitorList.addStringColumn("Max Active", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setMaxActiveHeaderTooltip("Maximum Active");
		grdMonitorList.addStringColumn("First Access", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setFirstAccessHeaderTooltip("First Access");
		grdMonitorList.addStringColumn("Last Access", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMonitorList.setLastAccessHeaderTooltip("Last Access");
		super.addGrid(grdMonitorList);
	}


	public Button btnApply()
	{
		return (Button)super.getControl(1);
	}
	public Button btnResetCounter()
	{
		return (Button)super.getControl(2);
	}
	public TextBox txtSearch()
	{
		return (TextBox)super.getControl(3);
	}
	public grdMonitorListGrid grdMonitorList()
	{
		return (grdMonitorListGrid)super.getGrid(0);
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
