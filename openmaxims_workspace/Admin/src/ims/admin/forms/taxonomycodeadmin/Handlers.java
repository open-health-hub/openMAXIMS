//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.taxonomycodeadmin;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbTaxonomyElementLookup();
	abstract protected void defaultcmbTaxonomyElementLookupValue();
	abstract protected void bindcmbExternalCodeTypeLookup();
	abstract protected void defaultcmbExternalCodeTypeLookupValue();
	abstract protected void bindcmbFileTypeLookup();
	abstract protected void defaultcmbFileTypeLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbTaxonomyElementValueSet(Object value);
	abstract protected void onCmbTaxonomyElementValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onfileupldColumnMapFileUploaded(String fileName);
	abstract protected void onImbValidateColMapClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onfileupldNameFileUploaded(String fileName);
	abstract protected void onImbValidateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSaveCodeLoaderDefClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbExternalCodeTypeValueSet(Object value);
	abstract protected void onCmbExternalCodeTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbFileTypeValueSet(Object value);
	abstract protected void onCmbFileTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbUploadClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.cmbTaxonomyElement().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbTaxonomyElementValueSet(value);
			}
		});
		this.form.cmbTaxonomyElement().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbTaxonomyElementValueChanged();
			}
		});
		this.form.imbCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbCancelClick();
			}
		});
		this.form.fileupldColumnMap().setFileUploadedEvent(new FileUploaded()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String fileName) throws ims.framework.exceptions.PresentationLogicException
			{
				onfileupldColumnMapFileUploaded(fileName);
			}
		});
		this.form.imbValidateColMap().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbValidateColMapClick();
			}
		});
		this.form.fileupldName().setFileUploadedEvent(new FileUploaded()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String fileName) throws ims.framework.exceptions.PresentationLogicException
			{
				onfileupldNameFileUploaded(fileName);
			}
		});
		this.form.imbValidate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbValidateClick();
			}
		});
		this.form.imbUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbUpdateClick();
			}
		});
		this.form.imbSaveCodeLoaderDef().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSaveCodeLoaderDefClick();
			}
		});
		this.form.cmbExternalCodeType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbExternalCodeTypeValueSet(value);
			}
		});
		this.form.cmbExternalCodeType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbExternalCodeTypeValueChanged();
			}
		});
		this.form.cmbFileType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbFileTypeValueSet(value);
			}
		});
		this.form.cmbFileType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbFileTypeValueChanged();
			}
		});
		this.form.imbUpload().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbUploadClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbTaxonomyElementLookup();
		bindcmbExternalCodeTypeLookup();
		bindcmbFileTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbTaxonomyElementLookup();
		bindcmbExternalCodeTypeLookup();
		bindcmbFileTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbTaxonomyElementLookupValue();
		defaultcmbExternalCodeTypeLookupValue();
		defaultcmbFileTypeLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
