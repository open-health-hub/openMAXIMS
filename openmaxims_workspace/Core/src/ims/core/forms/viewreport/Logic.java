//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.25 build 1942.14331)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.viewreport;

import ims.admin.vo.ReportSeedVo;
import ims.admin.vo.ReportVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.IReportField;
import ims.framework.enumerations.DialogResult;
import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		if(urlQueryServer == null || urlQueryServer.length() == 0)
		{
			form.htmViewer().setHTML("<center>The <b>QUERY_SERVER_URL</b> config flag was not set !</center>");
			return;
		}

		if(urlReportServer == null || urlReportServer.length() == 0)
		{
			form.htmViewer().setHTML("<center>The <b>REPORT_SERVER_URL</b> config flag was not set !</center>");
			return;
		}
		
		if(form.getGlobalContext().Core.getDocumentIDIsNotNull())
		{
			//TODO code here for viewing documents already saved into the database
			return;
		}

		if(form.getGlobalContext().Core.getReportIDIsNotNull() && form.getGlobalContext().Core.getTemplateIDIsNotNull())
		{
			form.htmViewer().setHTML((new QueryBuilderClient(urlQueryServer,engine.getSessionId())).getWaitUrl());
			return;
		}
		
		//we should not get here
		form.htmViewer().setHTML("<center>No report to build or view, you have not passed down the right parameters !</center>");
	}
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	protected void onHtmViewerHTMLViewerClick(int value) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			form.htmViewer().setHTML(getIFrameCode());
		} 
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
		}
	}
	private String getIFrameCode() throws DomainInterfaceException
	{
		StringBuffer sb = new StringBuffer(1000);
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		String[] obj = null;
		
		obj = domain.getReportAndTemplate(form.getGlobalContext().Core.getReportID(), form.getGlobalContext().Core.getTemplateID());

		if(obj == null || obj.length == 0)
		{
			engine.showMessage("I could not get the report and template !");
			return sb.toString();
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer,engine.getSessionId());
		
		//FormBridge gen = engine.getFormInstance(form.getGlobalContext().Core.getCurrentFormName());
		ReportSeedVo voReportSeed = new ReportSeedVo();
		ReportVo voReport = new ReportVo();
		voReport.setID_ReportBo(form.getGlobalContext().Core.getReportID());
		

		IReportField[] seeds = form.getData(voReportSeed.getIseeds(domain.getReportSeeds(voReport)));
		//engine.freeFormInstance(gen);
		
		if (seeds != null)
		{
			String seedName;
			int pos;
			for (int i = 0; i < seeds.length; i++)
			{
				try
				{
					pos = seeds[i].getName().lastIndexOf('.');
					seedName = seeds[i].getName().substring(pos + 1);
					
					client.addSeed(new SeedValue(seedName, seeds[i].getValue(), Class.forName(seeds[i].getType())));
				} 
				catch (ClassNotFoundException e)
				{
					sb.append(e.toString());
					return sb.toString();
				}
			}		
		}
			
		String result = "";		
		try
		{
		
			result = client.buildReportAsUrlInlineFrame(obj[0],obj[1],urlReportServer,"PDF","",1);
			
			sb.append(result);
			
		} catch (QueryBuilderClientException e1)
		{
			return e1.toString();
		} 
		
		return sb.toString();
	}	
}
