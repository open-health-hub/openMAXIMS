//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Callum Wells using IMS Development Environment (version 1.20 build 40820.730)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.allergenreactions;

import ims.core.vo.AllergenTypeReactions;
import ims.core.vo.AllergenTypeReactionsCollection;
import ims.core.vo.lookups.AllergenType;
import ims.core.vo.lookups.AllergenTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.AllergyReaction;
import ims.core.vo.lookups.AllergyReactionCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		populateAllergenReactions();
		populateAllergenType();
		form.btnUpdate().setEnabled(false);

		open();
	}

	private void open()
	{
		// clearReactionSelections();
		form.btnUpdate().setEnabled(false);
		form.setMode(FormMode.VIEW);
		
		if(form.grdAllergenType().getValue()!=null)
			try {
				onGrdAllergenTypeSelectionChanged();
			} catch (PresentationLogicException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}

	private void populateAllergenReactions()
	{
		form.grdAllergenReactions().getRows().clear();
		AllergyReactionCollection sColl = LookupHelper.getAllergyReaction(domain.getLookupService());
		for (int i = 0; i < sColl.size(); i++)
		{
			AllergyReaction allergyReaction = sColl.get(i);
			GenForm.grdAllergenReactionsRow row = form.grdAllergenReactions().getRows().newRow();
			row.setcolAllergenReactions(allergyReaction.getText());
			row.setValue(allergyReaction);
		}
	}

	private void populateAllergenType()
	{
		form.grdAllergenType().getRows().clear();
		AllergenTypeCollection sColl2 = LookupHelper.getAllergenType(domain.getLookupService());
		for (int i = 0; i < sColl2.size(); i++)
		{
			AllergenType allergenType = sColl2.get(i);
			GenForm.grdAllergenTypeRow row = form.grdAllergenType().getRows().newRow();
			row.setcolAllergenType(allergenType.getText());
			row.setValue(allergenType);
		}
	}

	protected void onGrdAllergenTypeSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		clearReactionSelections();
		listAllergenReactions(form.grdAllergenType().getValue());
		form.btnUpdate().setEnabled(true);
	}

	private void clearReactionSelections()
	{
		for (int i = 0; i < form.grdAllergenReactions().getRows().size(); i++)
		{
			GenForm.grdAllergenReactionsRow row = form.grdAllergenReactions().getRows().get(i);
			row.setcolSelected(false);
		}
	}

	private void listAllergenReactions(AllergenType allergenType)
	{
		AllergenTypeReactionsCollection voCollAllergenTypeReactions = domain.listAllergenTypeReactions(allergenType);

		if (voCollAllergenTypeReactions == null)
			return;

		for (int i = 0; i < voCollAllergenTypeReactions.size(); i++)
		{
			AllergenTypeReactions reaction = voCollAllergenTypeReactions.get(i);
			GenForm.grdAllergenReactionsRow row = form.grdAllergenReactions().getRowByValue(reaction.getReaction());
			if (row != null)
				row.setcolSelected(true);
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearReactionSelections();
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AllergenTypeReactionsCollection voCollAllergenTypeReactions = new AllergenTypeReactionsCollection();

		for (int i = 0; i < form.grdAllergenReactions().getRows().size(); i++)
		{
			GenForm.grdAllergenReactionsRow row = form.grdAllergenReactions().getRows().get(i);
			if (row.getcolSelected())
			{
				AllergenTypeReactions reaction = new AllergenTypeReactions();
				reaction.setAllergenType(form.grdAllergenType().getValue());
				reaction.setReaction(row.getValue());
				reaction.setIsActive(Boolean.TRUE);
				voCollAllergenTypeReactions.add(reaction);
			}
		}

		String[] arrErrors = voCollAllergenTypeReactions.validate();
		if (arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}

		try
		{
			domain.saveAllergenTypeReaction(form.grdAllergenType().getValue(), voCollAllergenTypeReactions);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (ForeignKeyViolationException e1)
		{
			engine.showMessage("There are data items in the system referencing this item - delete access denied");
			open();
			return;
		}

		open();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.btnUpdate().setEnabled(false);
		
	}
}
