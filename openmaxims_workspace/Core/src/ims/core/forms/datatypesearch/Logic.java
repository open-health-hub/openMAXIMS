//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2421.15208)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.datatypesearch;

import ims.core.forms.datatypesearch.GenForm.grdDataSetListRow;
import ims.core.forms.datatypesearch.GenForm.grdDataSetSelectedRow;
import ims.core.vo.DataSetTypeVo;
import ims.core.vo.DataSetTypeVoCollection;
import ims.core.vo.lookups.DataSetCategory;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onBtnAddListClick() throws ims.framework.exceptions.PresentationLogicException
	{
		for (int i = 0; i < form.grdDataSetList().getRows().size(); i++)
		{
			grdDataSetListRow row = form.grdDataSetList().getRows().get(i);
			
			if(row.getColSelect())
			{
				if(recordAlreadySelected(row.getValue()) == false)
				{
					grdDataSetSelectedRow selRow = form.grdDataSetSelected().getRows().newRow();
					selRow.setColDataSet(row.getValue().getName());
					selRow.setValue(row.getValue());
				}
			}
		}
	}
	private boolean recordAlreadySelected(DataSetTypeVo value)
	{
		for (int i = 0; i < form.grdDataSetSelected().getRows().size(); i++)
		{
			grdDataSetSelectedRow row = form.grdDataSetSelected().getRows().get(i);
			
			if(row.getValue().equals(value))
			{
				return true;
			}
		}
		return false;
	}
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}
	private void clearScreen()
	{
		form.txtSearchName().setValue(null);
		form.cmbSearchCategory().setValue(null);
		form.grdDataSetList().getRows().clear();
		form.grdDataSetSelected().getRows().clear();
	}
	protected void onImbFindClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.txtSearchName().getValue() == null || form.txtSearchName().getValue().trim().length() == 0)
		{
			engine.showMessage("Please select a name to search for.");
			return;
		}

		if(form.cmbSearchCategory().getValue() == null)
		{
			engine.showMessage("Please select a category to search for.");
			return;
		}
		
		form.grdDataSetList().getRows().clear();
		
		DataSetTypeVoCollection coll = domain.listDataSetType("%" + form.txtSearchName().getValue().trim() + "%", form.cmbSearchCategory().getValue(), Boolean.TRUE);
		
		//WDEV-16848
		if(coll == null || coll.size() == 0)
		{
			engine.showMessage("No records found.");
			return;
		}
		
		displayRecords(coll);
	}
	private void displayRecords(DataSetTypeVoCollection coll)
	{
		for (int i = 0; i < coll.size(); i++)
		{
			grdDataSetListRow row = form.grdDataSetList().getRows().newRow();
			
			row.setColDataSet(coll.get(i).getName());
			row.setValue(coll.get(i));
		}
		
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		DataSetTypeVoCollection coll = form.getGlobalContext().Core.getDataSetTypeItems();
		
		if(coll == null)
			coll = new DataSetTypeVoCollection();
		else
			coll.clear();

		for (int i = 0; i < form.grdDataSetSelected().getRows().size(); i++)
		{
			grdDataSetSelectedRow row = form.grdDataSetSelected().getRows().get(i);

			coll.add(row.getValue());
		}

		form.getGlobalContext().Core.setDataSetTypeItems(coll);
		
		engine.close(DialogResult.OK);
	}
	protected void onFormOpen() throws PresentationLogicException
	{
		form.grdDataSetList().setReadOnly(false);
		
		if(form.cmbSearchCategory().getValues() != null && form.cmbSearchCategory().getValues().size() > 0)
			form.cmbSearchCategory().setValue((DataSetCategory) form.cmbSearchCategory().getValues().get(0));
	}
}
