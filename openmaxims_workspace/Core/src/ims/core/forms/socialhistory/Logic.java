//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.25 build 1950.14314)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.socialhistory;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.socialhistory.GenForm.grdIllicitDrugsRow;
import ims.core.forms.socialhistory.GenForm.grdSmokingDetailsRow;
import ims.core.vo.AlcoholVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.IllicitDrugsDetailsVo;
import ims.core.vo.IllicitDrugsDetailsVoCollection;
import ims.core.vo.IllicitDrugsVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.SocialHistoryLiteVo;
import ims.core.vo.SocialHistoryLiteVoCollection;
import ims.core.vo.SocialHistoryMaritalStatusVo;
import ims.core.vo.SocialHistoryVo;
import ims.core.vo.lookups.MaritalStatus;
import ims.core.vo.lookups.Occupation;
import ims.core.vo.lookups.SmokingCurrentHistoric;
import ims.core.vo.lookups.SmokingStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialise();
		open();
		
	}

	private void initialise()
	{
		
		if(!ConfigFlag.UI.SOCIAL_HIS_DISPLAY_MARR_DATE.getValue())
			form.pdtMaritalStatus().setVisible(false);
		
		form.btnNew().setVisible(true);
		form.btnUpdate().setVisible(false);
		updateContextMenus();
	}
	
	protected void onImbNewSmokingClick()
	{
		form.grdSmokingDetails().getRows().newRow();
	}

	protected void onImbRemoveSmokingClick()
	{
		int index = form.grdSmokingDetails().getSelectedRowIndex();
		if (index < 0)
		{
			engine.showMessage("Please select the smoking details item to remove");
			return;
		}
		form.grdSmokingDetails().getRows().remove(index);
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
				
		SocialHistoryVo socialHistory = domain.getSocialHistoryByPatient(form.getGlobalContext().Core.getPatientShort());
		populateScreenFromData(deleteIdForChildren(socialHistory == null ? null:(SocialHistoryVo)socialHistory.clone()),false);
		if(engine.getFormName().equals(form.getForms().Core.SocialHistory))
		{
			ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			if(voClinicalContact != null)
			{
				AuthoringInformationVo voAuth = new AuthoringInformationVo();
				voAuth.setAuthoringDateTime(voClinicalContact.getStartDateTime());
				voAuth.setAuthoringHcp(voClinicalContact.getSeenBy());
				form.customControlAuth().setValue(voAuth);
				
				//WDEV-12901 
				Object mos = domain.getMosUser();
				if(mos != null){
					form.cmbRecordingHCP().newRow((MemberOfStaffLiteVo)mos, mos.toString());
					form.cmbRecordingHCP().setValue((MemberOfStaffLiteVo)mos);
				}
				form.dtimRecordingDateTime().setValue(new DateTime());
			}
			else
				setDefaultValues();//wdev-1930
		}
		else
		{
			setDefaultValues();
		}
		
		form.getLocalContext().setvoSocialHistory(null);
		form.setMode(FormMode.EDIT);
		form.customControlAuth().setIsRequiredPropertyToControls(true);
		updateControlsState();
		updateContextMenus();
	}
	private SocialHistoryVo deleteIdForChildren(SocialHistoryVo socialHistory)
	{
		if(socialHistory == null)
			return null;
		
		if(socialHistory.getSmokingDetails() != null)
		{
			for(int i = 0;i < socialHistory.getSmokingDetails().size();i++)
			{
				socialHistory.getSmokingDetails().get(i).clearIDAndVersion();
			}
		}
		if(socialHistory.getIllicitDrugsList() != null && socialHistory.getIllicitDrugsList().getDrugDetails() != null)
		{
			for(int j = 0;j < socialHistory.getIllicitDrugsList().getDrugDetails().size();j++)
			{
				socialHistory.getIllicitDrugsList().getDrugDetails().get(j).clearIDAndVersion();
			}
		}
		return socialHistory;
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.customControlAuth().setEnabledAuthoringHCP(false);
		form.customControlAuth().setEnabledDateTime(false);
		updateContextMenus();
		updateControlsState();
		
		// Setup Alcohol controls
		setupAlcoholControls();
		// Setup Occupation Controls
		setupOccupationControls();
		// Setup Marital Controls
		setupMaritalControls();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SocialHistoryVo voSocHistory = form.getLocalContext().getvoSocialHistory();
		ClinicalContactShortVo voClinicalContactShort = form.getGlobalContext().Core.getCurrentClinicalContact();
		

		if (voSocHistory == null)
		{
			voSocHistory = new SocialHistoryVo();
		}
		if (voClinicalContactShort != null)
			voSocHistory.setClinicalContact(voClinicalContactShort);
		
		voSocHistory.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());

		// populate and check for No Data before commencing save.
		voSocHistory = populateDataFromScreen(voSocHistory);

		if(voSocHistory != null)
		{	
			String[] arrErrors = voSocHistory.validate(getUiErrors(voSocHistory));
		
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
			try
			{
				form.getLocalContext().setvoSocialHistory(domain.saveSocialHistory(voSocHistory));
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.setMode(FormMode.VIEW);
				updateContextMenus();
				
				open();
				
				return;
			}
			
			form.setMode(FormMode.VIEW);
			open();
			updateContextMenus();
			
		}
	}
	
	private String[] getUiErrors(SocialHistoryVo voSocHistory)
	{
		String[] uiErrors = null;
		ArrayList uiErrorsList = new ArrayList();
		
		// This method will check to see if any data has been provided on
		// screen.
		// At least one field must be provided. If a field is found to contain
		// data then the method returns and continues to save. If no data found
		// then
		// the user is notified they must fill in a value before continuing.
		if (voSocHistory == null)
			return null;

		if(voSocHistory.getAuthoringInformation() == null || voSocHistory.getAuthoringInformation().getAuthoringHcp() == null || voSocHistory.getAuthoringInformation().getAuthoringDateTime() == null)
		{
			uiErrorsList.add("AuthoringHcp and AuthoringDateTime are mandatory.");
			uiErrors = new String[uiErrorsList.size()];
			uiErrorsList.toArray(uiErrors);				
			return uiErrors;
		}
		//wdev-12390
		if (voSocHistory.getSmokingDetailsIsNotNull())
		{
			if (voSocHistory.getSmokingDetails().size() > 0)
			{
				for(int i = 0; i < voSocHistory.getSmokingDetails().size();i++)
				{
					
					if(voSocHistory.getSmokingDetails().get(i).getWhenStoppedIsNotNull() && voSocHistory.getSmokingDetails().get(i).getWhenStopped().isGreaterThan(new Date()))
					{
						uiErrorsList.add("The When Stopped Date Cannot Be In The Future.");
						uiErrors = new String[uiErrorsList.size()];
						uiErrorsList.toArray(uiErrors);				
						return uiErrors;
					}
				}
			}
		}
		if (voSocHistory.getIllicitDrugsListIsNotNull() && voSocHistory.getIllicitDrugsList().getDrugDetailsIsNotNull())
		{
			if (voSocHistory.getIllicitDrugsList().getDrugDetails().size() > 0)
			{
				for(int j = 0; j < voSocHistory.getIllicitDrugsList().getDrugDetails().size();j++ )
				{
					if(voSocHistory.getIllicitDrugsList().getDrugDetails().get(j).getLastUsedIsNotNull() && voSocHistory.getIllicitDrugsList().getDrugDetails().get(j).getLastUsed().isGreaterThan(new Date()))
					{
						uiErrorsList.add("The Last Used Date Cannot Be In The Future.");
						uiErrors = new String[uiErrorsList.size()];
						uiErrorsList.toArray(uiErrors);				
						return uiErrors;
					}
				}
			}
		}
		//--------
		if (voSocHistory.getOccupationIsNotNull())
		{
			if (voSocHistory.getOccupationStatusIsNotNull())
				return null;
			else
			{
				uiErrorsList.add("Please select Occupation Status");
				uiErrors = new String[uiErrorsList.size()];
				uiErrorsList.toArray(uiErrors);				
				return uiErrors;
			}
		}
		else if (voSocHistory.getOccupationStatusIsNotNull())
			return null;
		else if (voSocHistory.getOccupationTextIsNotNull())
			return null;
		else if (voSocHistory.getLivesWithIsNotNull())
			return null;
		else if (voSocHistory.getFitToCareForPatientIsNotNull())
			return null;
		else if (voSocHistory.getFitToTakeHomeIsNotNull())
			return null;
		else if (voSocHistory.getSocialHistoryNotesIsNotNull())
			return null;
		else if (voSocHistory.getIllicitDrugsIsNotNull())
			return null;
		else if (voSocHistory.getSmokingStatusIsNotNull())
			return null;

		// Check if any data in the Smoking Details collection.
		if (voSocHistory.getSmokingDetailsIsNotNull())
		{
			if (voSocHistory.getSmokingDetails().size() > 0)
				return null;
		}

		// Check if any data in the Alcohol VO.
		if (voSocHistory.getAlcoholIsNotNull())
		{
			if (voSocHistory.getAlcohol().getDoYouDrinkAlcoholIsNotNull())
				return null;
			else if (voSocHistory.getAlcohol().getUnitsPerDayIsNotNull())
				return null;
		}

		// Check if any data in the Marital Status VO.
		if (voSocHistory.getMaritalStatusIsNotNull())
		{
			if (voSocHistory.getMaritalStatus().getMaritalStatusIsNotNull())
				return null;
			else if (voSocHistory.getMaritalStatus().getStatusDateIsNotNull())
				return null;
		}
		
		// If app reaches here then no data found return true
		// to notify user to fill in at least one field.
		uiErrorsList.add("There has been no data provided. Please provide at least one value before saving.");
				
		if(uiErrorsList.size() > 0)
		{
			uiErrors = new String[uiErrorsList.size()];
			uiErrorsList.toArray(uiErrors);
		}
		return uiErrors;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
		
		
	}

	
	private void updateControlsState()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(form.ansIVUser().getValue() != null && form.ansIVUser().getValue().equals(YesNoUnknown.YES) && !engine.hasRight(AppRight.NURSING_ADMIN_ROLE))
				form.ansIVUser().setEnabled(false);
			else
				form.ansIVUser().setEnabled(true);
			
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(false);
			
		
		}
		else
		{
			form.getContextMenus().Core.hideAllSocialHistoryGridMenuItems();
			form.getContextMenus().hideAllGenericGridMenuItems();
			form.ansIVUser().setEnabled(false);
			SocialHistoryVo socialHistory = form.getLocalContext().getvoSocialHistory();
			
			if (engine.getFormName().equals(form.getForms().Core.SocialHistoryCoreClinicalRecord))
			{
				form.btnNew().setVisible(false);
				form.btnUpdate().setVisible(false);
			}
			else
			{
				if (form.getLocalContext().getcurrentSocialHistory() == null)
				{
					form.btnNew().setVisible(true);
				}
				else
				{
					form.btnNew().setVisible(false);
					if(form.getLocalContext().getcurrentSocialHistory().equals(socialHistory))
						form.btnUpdate().setVisible(true);
					else
						form.btnUpdate().setVisible(false);
				}
			}
		}
	}
	private void open()
	{
		clearScreen();
		SocialHistoryVo socialHistory = null;
		
		//populate record browser
		populateRecordBrwoser(domain.getSocialHistoryByPatientColl(form.getGlobalContext().Core.getPatientShort()));
				
		if (engine.getFormName().equals(form.getForms().Core.SocialHistoryCoreClinicalRecord))
			socialHistory = domain.getSocialHistoryByPatient(form.getGlobalContext().Core.getPatientShort());
		else
		{
			socialHistory = domain.getSocialHistoryByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			if (socialHistory != null)
			{
				form.getLocalContext().setcurrentSocialHistory(socialHistory);	
				form.getLocalContext().setvoSocialHistory(socialHistory);	
				form.recbrSocialHistory().setValue(socialHistory);
				populateScreenFromData(form.getLocalContext().getcurrentSocialHistory(),true);
				updateControlsState();
				return;
			}
		}

		form.getLocalContext().setcurrentSocialHistory(socialHistory);	
		
		form.getLocalContext().setvoSocialHistory(domain.getSocialHistoryById(form.recbrSocialHistory().getValue()));
								
		populateScreenFromData(form.getLocalContext().getvoSocialHistory(),true);
		
		updateControlsState();
	}
	
	private void populateRecordBrwoser(SocialHistoryLiteVoCollection socialHistorycoll)
	{
		if(socialHistorycoll == null)
			return;
		
		form.recbrSocialHistory().clear();
		for (int i = 0; i < socialHistorycoll.size(); i++)
		{
			SocialHistoryLiteVo vo = socialHistorycoll.get(i);			
			form.recbrSocialHistory().newRow(socialHistorycoll.get(i), getAuthoring(vo));
		}
		
		if (form.getLocalContext().getvoSocialHistoryIsNotNull())
			form.recbrSocialHistory().setValue(form.getLocalContext().getvoSocialHistory());
		else if(socialHistorycoll.size()>0)			
			form.recbrSocialHistory().setValue(socialHistorycoll.get(0));
	}

	private String getAuthoring(SocialHistoryLiteVo vo)
	{
		StringBuffer sb = new StringBuffer();
		if(vo != null)
		{
			if(vo.getAuthoringInformationIsNotNull())
			{
				if (vo.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					sb.append(vo.getAuthoringInformation().getAuthoringHcp().toString());
				}
				if (vo.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				{
					sb.append(" " + vo.getAuthoringInformation().getAuthoringDateTime().toString());
				}
			}			
		}
		
		return sb.toString();
	}
	private void setDefaultValues()
	{
		form.customControlAuth().initializeComponent();
		Object mos = domain.getMosUser();
		if(mos != null){
			form.cmbRecordingHCP().newRow((MemberOfStaffLiteVo)mos, mos.toString());
			form.cmbRecordingHCP().setValue((MemberOfStaffLiteVo)mos);
		}
		form.dtimRecordingDateTime().setValue(new DateTime());
	}

	protected void onCmbSmokingStatusValueChanged() throws PresentationLogicException
	{
		//WDEV-16510
		if (form.cmbSmokingStatus().getValue() == null)
		{
			form.grdSmokingDetails().getRows().clear();
		}
		if (form.cmbSmokingStatus().getValue() != null && form.cmbSmokingStatus().getValue().equals(SmokingStatus.NEVERSMOKED) && form.grdSmokingDetails().getRows().size() > 0)
			form.cmbSmokingStatus().setValue(SmokingStatus.SMOKER);

		updateContextMenus();
	}

	protected void onGrdSmokingDetailsGridComboBoxSelectionChanged(int column, grdSmokingDetailsRow row, Object value) throws PresentationLogicException
	{
		if (column == 0)
		{
			if (form.cmbSmokingStatus().getValue() == null || value == null || row == null)
				return;

			if (column == 0 && form.cmbSmokingStatus().getValue().equals(SmokingStatus.EXSMOKER) && !value.equals(SmokingCurrentHistoric.HISTORIC))
				row.setColStatus(SmokingCurrentHistoric.HISTORIC);

			if (column == 0 && form.cmbSmokingStatus().getValue().equals(SmokingStatus.SMOKER) && row.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
				row.setColWhenStopped(null);

			if (row.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
				row.setColWhenStoppedReadOnly(true);
			else if (row.getColStatus().equals(SmokingCurrentHistoric.HISTORIC))
				row.setColWhenStoppedReadOnly(false);
		}
	}

	protected void clearScreen()
	{
		super.clearScreen();
		form.customControlAuth().setValue(null);
		form.cmbRecordingHCP().setValue(null);
		form.dtimRecordingDateTime().setValue(null);
		form.grdSmokingDetails().getRows().clear();
		form.cmbMaritalStat().setValue(null);
		form.pdtMaritalStatus().setValue(null);
		form.cmbAlcoholStatus().setValue(null);
		form.intUnitsPerDay().setValue(null);
		form.txtTakenLastWeek().setValue(null);
		form.ansIVUser().setValue(null);
		form.grdIllicitDrugs().getRows().clear();
	}

	protected void populateScreenFromData(ims.core.vo.SocialHistoryVo value, Boolean authoring)
	{
		if (value == null)
			return;
		
			
		super.populateScreenFromData(value);
		if(authoring == true)
			form.customControlAuth().setValue(value.getAuthoringInformation());	
		// ----- Start of grdSmokingDetails Grid --------------------------
		ims.core.vo.SmokingDetailsCollection fieldgrdSmokingDetails = value.getSmokingDetailsIsNotNull() ? value.getSmokingDetails() : null;
		if (fieldgrdSmokingDetails != null)
		{
			GenForm.grdSmokingDetailsRow rowgrdSmokingDetails;
			for (int x = 0; x < fieldgrdSmokingDetails.size(); x++)
			{
				if (fieldgrdSmokingDetails.get(x) != null)
				{
					rowgrdSmokingDetails = this.form.grdSmokingDetails().getRows().newRow();

					rowgrdSmokingDetails.setColStatus(fieldgrdSmokingDetails.get(x).getStatus());
					rowgrdSmokingDetails.setColWhat(fieldgrdSmokingDetails.get(x).getSmokingWhat());
					rowgrdSmokingDetails.setColAmt(fieldgrdSmokingDetails.get(x).getAmountPerDay());
					rowgrdSmokingDetails.setColNrYrs(fieldgrdSmokingDetails.get(x).getNumberOfYears());
					rowgrdSmokingDetails.setColWhenStopped(fieldgrdSmokingDetails.get(x).getWhenStopped());

					if (rowgrdSmokingDetails.getColStatus() != null)
					{
						if (rowgrdSmokingDetails.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
							rowgrdSmokingDetails.setColWhenStoppedReadOnly(true);
						else
							rowgrdSmokingDetails.setColWhenStoppedReadOnly(false);
					}

					rowgrdSmokingDetails.setValue(fieldgrdSmokingDetails.get(x));
				}
			}
		}
		// ----- End of grdSmokingDetails Grid ----------------------------
		
		this.form.txtIllicitDrugs().setValue(value.getIllicitDrugs());
		this.form.cmbSmokingStatus().setValue(value.getSmokingStatus());
		this.form.cmbOccupation().setValue(value.getOccupation());
		this.form.cmbOccupationStatus().setValue(value.getOccupationStatus());
		//wdev-12650
		this.form.cmbOccupationStatus().setRequired(form.cmbOccupation().getValue() != null);
		//------------
		this.form.cmbLivesWith().setValue(value.getLivesWith());

		AlcoholVo voAlcohol = value.getAlcohol();
		if (voAlcohol != null)
		{
			form.cmbAlcoholStatus().setValue(voAlcohol.getDoYouDrinkAlcohol());
			form.intUnitsPerDay().setValue(voAlcohol.getUnitsPerDay());
			form.txtTakenLastWeek().setValue(voAlcohol.getDescriptiveHistory());
		}

		SocialHistoryMaritalStatusVo voMaritalStatus = value.getMaritalStatus();
		if (voMaritalStatus != null)
		{
			form.cmbMaritalStat().setValue(voMaritalStatus.getMaritalStatus());
			form.pdtMaritalStatus().setValue(voMaritalStatus.getStatusDate());
		}
		populateIllicitDrugsGrid(value);
		if(value.getIllicitDrugsList() != null)
			form.ansIVUser().setValue(value.getIllicitDrugsList().getDrugsUsedIntravenously());
		
		if(value.getRecordingInformationIsNotNull()){
			MemberOfStaffLiteVo mos = value.getRecordingInformation().getRecordingUser();
			if(mos!=null){
				form.cmbRecordingHCP().newRow(mos, mos.toString());
				form.cmbRecordingHCP().setValue(mos);	
			}
			form.dtimRecordingDateTime().setValue(value.getRecordingInformation().getRecordingDateTime());
		}


		
	}
	private void populateRestScreenFromData(SocialHistoryVo value)
	{
		if(value == null)
			return;
		super.populateScreenFromData(value);
		// ----- Start of grdSmokingDetails Grid --------------------------
		ims.core.vo.SmokingDetailsCollection fieldgrdSmokingDetails = value.getSmokingDetailsIsNotNull() ? value.getSmokingDetails() : null;
		if (fieldgrdSmokingDetails != null)
		{
			GenForm.grdSmokingDetailsRow rowgrdSmokingDetails;
			for (int x = 0; x < fieldgrdSmokingDetails.size(); x++)
			{
				if (fieldgrdSmokingDetails.get(x) != null)
				{
					rowgrdSmokingDetails = this.form.grdSmokingDetails().getRows().newRow();

					rowgrdSmokingDetails.setColStatus(fieldgrdSmokingDetails.get(x).getStatus());
					rowgrdSmokingDetails.setColWhat(fieldgrdSmokingDetails.get(x).getSmokingWhat());
					rowgrdSmokingDetails.setColAmt(fieldgrdSmokingDetails.get(x).getAmountPerDay());
					rowgrdSmokingDetails.setColNrYrs(fieldgrdSmokingDetails.get(x).getNumberOfYears());
					rowgrdSmokingDetails.setColWhenStopped(fieldgrdSmokingDetails.get(x).getWhenStopped());

					if (rowgrdSmokingDetails.getColStatus() != null)
					{
						if (rowgrdSmokingDetails.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
							rowgrdSmokingDetails.setColWhenStoppedReadOnly(true);
						else
							rowgrdSmokingDetails.setColWhenStoppedReadOnly(false);
					}

					rowgrdSmokingDetails.setValue(fieldgrdSmokingDetails.get(x));
				}
			}
		}
		// ----- End of grdSmokingDetails Grid ----------------------------
		
		this.form.txtIllicitDrugs().setValue(value.getIllicitDrugs());
		this.form.cmbSmokingStatus().setValue(value.getSmokingStatus());
		this.form.cmbOccupation().setValue(value.getOccupation());
		this.form.cmbOccupationStatus().setValue(value.getOccupationStatus());
		this.form.cmbLivesWith().setValue(value.getLivesWith());

		AlcoholVo voAlcohol = value.getAlcohol();
		if (voAlcohol != null)
		{
			form.cmbAlcoholStatus().setValue(voAlcohol.getDoYouDrinkAlcohol());
			form.intUnitsPerDay().setValue(voAlcohol.getUnitsPerDay());
			form.txtTakenLastWeek().setValue(voAlcohol.getDescriptiveHistory());
		}

		SocialHistoryMaritalStatusVo voMaritalStatus = value.getMaritalStatus();
		if (voMaritalStatus != null)
		{
			form.cmbMaritalStat().setValue(voMaritalStatus.getMaritalStatus());
			form.pdtMaritalStatus().setValue(voMaritalStatus.getStatusDate());
		}
		populateIllicitDrugsGrid(value);
		if(value.getIllicitDrugsList() != null)
			form.ansIVUser().setValue(value.getIllicitDrugsList().getDrugsUsedIntravenously());

	}
	private void populateIllicitDrugsGrid(SocialHistoryVo value)
	{
		form.grdIllicitDrugs().getRows().clear();
		if(value != null && value.getIllicitDrugsList() != null && value.getIllicitDrugsList().getDrugDetails() != null )
		{
			GenForm.grdIllicitDrugsRow rowgrdIllicitDrugs;
			for(int i = 0;i < value.getIllicitDrugsList().getDrugDetails().size();i++)
			{
				if(value.getIllicitDrugsList().getDrugDetails().get(i) != null)
				{
					rowgrdIllicitDrugs = form.grdIllicitDrugs().getRows().newRow();
					rowgrdIllicitDrugs.setColumnStatus(value.getIllicitDrugsList().getDrugDetails().get(i).getCurrentStatus());
					rowgrdIllicitDrugs.setColumnDrug(value.getIllicitDrugsList().getDrugDetails().get(i).getSubstance());
					rowgrdIllicitDrugs.setColumnDateLastUsed(value.getIllicitDrugsList().getDrugDetails().get(i).getLastUsed());
					rowgrdIllicitDrugs.setValue(value.getIllicitDrugsList().getDrugDetails().get(i));
				}
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (form.grdSmokingDetails().getID() == sender.getID())
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					form.grdSmokingDetails().getRows().newRow();
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					if (form.grdSmokingDetails().getSelectedRowIndex() < 0)
					{
						engine.showMessage("Must select a row first");
						return;
					}
					form.grdSmokingDetails().getRows().remove(form.grdSmokingDetails().getSelectedRowIndex());
				break;
			}
		}
		if (form.grdIllicitDrugs().getID() == sender.getID())
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.CoreNamespace.SocialHistoryGrid.Add :
					form.grdIllicitDrugs().getRows().newRow();
				break;
				case GenForm.ContextMenus.CoreNamespace.SocialHistoryGrid.Remove :
					if (form.grdIllicitDrugs().getSelectedRowIndex() < 0)
					{
						engine.showMessage("Must select a row first");
						return;
					}
					form.grdIllicitDrugs().getRows().remove(form.grdIllicitDrugs().getSelectedRowIndex());
					updateContextMenus();
				break;
			}
		}
	}

	protected SocialHistoryVo populateDataFromScreen(SocialHistoryVo value)
	{
		if(validateMaritalDate())
			return null;
		
		
		value = super.populateDataFromScreen(value);
	
		//SystemInformation sysInfo = new SystemInformation();
		//sysInfo.setCreationDateTime(new DateTime());
		
		value.setSocialHistoryNotes(this.form.txtGeneralNotes().getValue());

		// ----- Start of grdSmokingDetails Grid --------------------------
		value.setSmokingDetails(new ims.core.vo.SmokingDetailsCollection());
		for (int x = 0; x < this.form.grdSmokingDetails().getRows().size(); x++)
		{
			boolean bAddVO = false;
			ims.core.vo.SmokingDetails rowValue = this.form.grdSmokingDetails().getRows().get(x).getValue();
			if (rowValue == null)
				rowValue = new ims.core.vo.SmokingDetails();

			rowValue.setStatus(this.form.grdSmokingDetails().getRows().get(x).getColStatus());
			bAddVO = this.form.grdSmokingDetails().getRows().get(x).getColStatus() != null ? true : false;
			
			rowValue.setSmokingWhat(this.form.grdSmokingDetails().getRows().get(x).getColWhat());
			if (bAddVO == false)
				bAddVO = this.form.grdSmokingDetails().getRows().get(x).getColWhat() != null ? true : false;
			
			rowValue.setAmountPerDay(this.form.grdSmokingDetails().getRows().get(x).getColAmt());
			if (bAddVO == false)
				bAddVO = this.form.grdSmokingDetails().getRows().get(x).getColAmt() != null ? true : false;
			
			rowValue.setNumberOfYears(this.form.grdSmokingDetails().getRows().get(x).getColNrYrs());
			if (bAddVO == false)
				bAddVO = this.form.grdSmokingDetails().getRows().get(x).getColNrYrs() != null ? true : false;
			
			rowValue.setWhenStopped(this.form.grdSmokingDetails().getRows().get(x).getColWhenStopped());
			if (bAddVO == false)
				bAddVO = this.form.grdSmokingDetails().getRows().get(x).getColWhenStopped() != null ? true : false;

			if (bAddVO && value.getSmokingDetailsIsNotNull())
				value.getSmokingDetails().add(rowValue);
		}
		// ----- End of grdSmokingDetails Grid ----------------------------
		value.setAuthoringInformation(form.customControlAuth().getValue());

		AlcoholVo alcohol = new AlcoholVo();
		alcohol.setDoYouDrinkAlcohol(form.cmbAlcoholStatus().getValue());
		alcohol.setUnitsPerDay(form.intUnitsPerDay().getValue());
		alcohol.setDescriptiveHistory(form.txtTakenLastWeek().getValue());

		value.setAlcohol(alcohol);

		// Save Marital Status Info
		SocialHistoryMaritalStatusVo voMaritalStatus = new SocialHistoryMaritalStatusVo();
		voMaritalStatus.setMaritalStatus(form.cmbMaritalStat().getValue());
		
		voMaritalStatus.setStatusDate(form.pdtMaritalStatus().getValue());
		value.setMaritalStatus(voMaritalStatus);
		
		if(value.getIllicitDrugsList() == null)
			value.setIllicitDrugsList(new IllicitDrugsVo());
		
		value = populateDataFromIllicitDrugsGrid(value);
		value.getIllicitDrugsList().setDrugsUsedIntravenously(form.ansIVUser().getValue());
		
		//WDEV-12901 set Recording Information
		if(value.getRecordingInformation()==null){
			RecordingUserInformationVo voRecordingUserInformation = new RecordingUserInformationVo();
			voRecordingUserInformation.setRecordingUser(form.cmbRecordingHCP().getValue());
			voRecordingUserInformation.setRecordingDateTime(new DateTime());
			value.setRecordingInformation(voRecordingUserInformation);
		}

		return value;
	}
	private SocialHistoryVo populateDataFromIllicitDrugsGrid(SocialHistoryVo value)
	{
		if(value == null)
			return null;
		
		if(value.getIllicitDrugsList() == null)
			value.setIllicitDrugsList(new IllicitDrugsVo());
		
		value.getIllicitDrugsList().setDrugDetails(new IllicitDrugsDetailsVoCollection());
		for(int i = 0;i < form.grdIllicitDrugs().getRows().size();i++)
		{
			boolean bAddVO = false;
			
			IllicitDrugsDetailsVo rowValue = form.grdIllicitDrugs().getRows().get(i).getValue();
			if (rowValue == null)
				rowValue = new IllicitDrugsDetailsVo();

			rowValue.setCurrentStatus(form.grdIllicitDrugs().getRows().get(i).getColumnStatus());
			bAddVO = form.grdIllicitDrugs().getRows().get(i).getColumnStatus() != null ? true : false;
			
			rowValue.setSubstance(form.grdIllicitDrugs().getRows().get(i).getColumnDrug());
			if (bAddVO == false)
				bAddVO = form.grdIllicitDrugs().getRows().get(i).getColumnDrug() != null ? true : false;
			
			rowValue.setLastUsed(form.grdIllicitDrugs().getRows().get(i).getColumnDateLastUsed());
			if (bAddVO == false)
				bAddVO = form.grdIllicitDrugs().getRows().get(i).getColumnDateLastUsed() != null ? true : false;
						

			if (bAddVO && value.getIllicitDrugsList().getDrugDetailsIsNotNull())
				value.getIllicitDrugsList().getDrugDetails().add(rowValue);
		}
		return value;
	}

	private boolean validateMaritalDate()
	{
		if(ConfigFlag.UI.SOCIAL_HIS_DISPLAY_MARR_DATE.getValue())
		{
		if(form.pdtMaritalStatus().getValue() != null)
		{
			if(form.pdtMaritalStatus().getValue().isGreaterThan(new Date()))
			{
				engine.showMessage("Date of marriage cannot be in the future");
				return true;
				
			}
		
		if(form.getGlobalContext().Core.getPatientShort().getDob()!= null)
		{
			if(form.pdtMaritalStatus().getValue().isLessThan(form.getGlobalContext().Core.getPatientShort().getDob()))
			{
				
				engine.showMessage("Date of marriage cannot be before DOB");
				return true;
				
			}
		}	
			
			
		}
		}
		return false;
	
	
	
	}

	private void updateContextMenus()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.cmbSmokingStatus().getValue() != null && (form.cmbSmokingStatus().getValue().equals(SmokingStatus.SMOKER) || form.cmbSmokingStatus().getValue().equals(SmokingStatus.EXSMOKER)))
			{
				form.getContextMenus().getGenericGridAddItem().setVisible(true);
				if (form.grdSmokingDetails().getSelectedRowIndex() >= 0)
					form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				else
					form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			}
			else
			{
				form.getContextMenus().getGenericGridAddItem().setVisible(false);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			}
			
			form.getContextMenus().Core.getSocialHistoryGridAddItem().setVisible(true);
			if(form.grdIllicitDrugs().getSelectedRowIndex() >= 0)
				form.getContextMenus().Core.getSocialHistoryGridRemoveItem().setVisible(true);
			else
				form.getContextMenus().Core.getSocialHistoryGridRemoveItem().setVisible(false);

		}
		else
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			
			form.getContextMenus().Core.getSocialHistoryGridAddItem().setVisible(false);
			form.getContextMenus().Core.getSocialHistoryGridRemoveItem().setVisible(false);
		}

	}

	protected void onCmbAlcoholStatusValueChanged() throws PresentationLogicException
	{
		// Setup Alcohol Controls
		setupAlcoholControls();
	}

	private void disableAlcoholControls()
	{
		alcoholInfoControlsEnabled(false);
		form.intUnitsPerDay().setValue(null);
		// Text box removed by Kevin in version 21 of Form.
		// form.txtUsualAmountTaken().setValue(null);
		form.txtTakenLastWeek().setValue(null);
	}

	private void alcoholInfoControlsEnabled(boolean bEnabled)
	{
		form.intUnitsPerDay().setEnabled(bEnabled);
		// Text box removed by Kevin in version 21 of Form.
		// form.txtUsualAmountTaken().setEnabled(bEnabled);
		form.txtTakenLastWeek().setEnabled(bEnabled);
	}

	protected void onCmbOccupationValueChanged() throws PresentationLogicException
	{
		// Setup Occupation Controls
		setupOccupationControls();
		//wdev-12650
		form.cmbOccupationStatus().setRequired(form.cmbOccupation().getValue() != null);
		//
	}

	private void disableMaritalStatusControls()
	{
		form.pdtMaritalStatus().setValue(null);
		form.pdtMaritalStatus().setEnabled(false);
	}

	private void enableOccupationControls(boolean enable)
	{
		FormMode formMode = form.getMode();
		if (formMode.equals(FormMode.VIEW))
		{
			form.cmbOccupationStatus().setValue(null);
			form.txtOccupation().setValue(null);
		}
		if (formMode.equals(FormMode.EDIT))
		{
			form.txtOccupation().setEnabled(enable);
		}
	}

	protected void onCmbMaritalStatValueChanged() throws PresentationLogicException
	{
		setupMaritalControls();

	}

	private void setupMaritalControls()
	{
		// Setup Marital Controls
		if (form.cmbMaritalStat().getValue() == null)
		{
			disableMaritalStatusControls();
			return;
		}
		if (form.cmbMaritalStat().getValue().getId() != MaritalStatus.SINGLE.getId())
			form.pdtMaritalStatus().setEnabled(true);
		else
		{
			disableMaritalStatusControls();
		}
	}

	private void setupOccupationControls()
	{
		Occupation occupationValue = form.cmbOccupation().getValue();
		if (occupationValue == null)
		{
			enableOccupationControls(false);
			form.txtOccupation().setValue(null);			//wdev-16362
			return;
		}
		if (occupationValue.getId() == Occupation.OTHER.getId())
		{
			enableOccupationControls(true);
		}
		else
		{
			enableOccupationControls(false);
			form.txtOccupation().setValue(null);			//wdev-16362
		}
	}

	private void setupAlcoholControls()
	{
		if (form.cmbAlcoholStatus().getValue() == null)
		{
			disableAlcoholControls();
			return;
		}
		if (form.cmbAlcoholStatus().getValue().getId() == YesNoUnknown.YES.getId())
			alcoholInfoControlsEnabled(true);
		else
			disableAlcoholControls();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ims.core.forms.socialhistory.Handlers#onGrdSmokingDetailsSelectionChanged()
	 */
	protected void onGrdSmokingDetailsSelectionChanged() throws PresentationLogicException
	{
		updateContextMenus();
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.setcustomControlAuthEnabled(engine.getFormName().equals(form.getForms().Core.SocialHistory));
			form.btnNew().setVisible(false);
		}
		
		form.pdtMaritalStatus().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	
	protected void onGrdIllicitDrugsGridComboBoxSelectionChanged(int column,
			grdIllicitDrugsRow row, Object value)
			throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}

	
	protected void onGrdIllicitDrugsSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenus();
		
	}

	
	protected void onRecbrSocialHistoryValueChanged() throws PresentationLogicException 
	{
		clearScreen();
		form.getLocalContext().setvoSocialHistory(domain.getSocialHistoryById(form.recbrSocialHistory().getValue()));
		populateScreenFromData(form.getLocalContext().getvoSocialHistory(),true);
		updateControlsState();
	}

}
