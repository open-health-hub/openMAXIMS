//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.socialhistory;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbDietaryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SocialHistoryDiet value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SocialHistoryDiet value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SocialHistoryDiet value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SocialHistoryDiet value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SocialHistoryDiet value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SocialHistoryDiet getValue()
		{
			return (ims.core.vo.lookups.SocialHistoryDiet)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SocialHistoryDiet value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOccupationStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.OccupationStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.OccupationStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.OccupationStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.OccupationStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.OccupationStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.OccupationStatus getValue()
		{
			return (ims.core.vo.lookups.OccupationStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.OccupationStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMaritalStatComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.MaritalStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.MaritalStatus getValue()
		{
			return (ims.core.vo.lookups.MaritalStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.MaritalStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFitToCareForPatientComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSomeoneToTakeHomeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSmokingStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.SmokingStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.SmokingStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.SmokingStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.SmokingStatus getValue()
		{
			return (ims.core.vo.lookups.SmokingStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.SmokingStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAlcoholStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOccupationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Occupation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Occupation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Occupation value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Occupation getValue()
		{
			return (ims.core.vo.lookups.Occupation)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Occupation value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLivesWithComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.LivesWith value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.LivesWith value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.LivesWith value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.LivesWith value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.LivesWith value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.LivesWith getValue()
		{
			return (ims.core.vo.lookups.LivesWith)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.LivesWith value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbRecordingHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MemberOfStaffLiteVo getValue()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrSocialHistoryRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.SocialHistoryLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.SocialHistoryLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.SocialHistoryLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.SocialHistoryLiteVo getValue()
		{
			return (ims.core.vo.SocialHistoryLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.SocialHistoryLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdSmokingDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSmokingDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.SmokingCurrentHistoric getColStatus()
		{
			return (ims.core.vo.lookups.SmokingCurrentHistoric)super.row.get(0);
		}
		public void setColStatus(ims.core.vo.lookups.SmokingCurrentHistoric value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColWhatReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColWhatReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColWhatOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.SmokingWhat getColWhat()
		{
			return (ims.core.vo.lookups.SmokingWhat)super.row.get(1);
		}
		public void setColWhat(ims.core.vo.lookups.SmokingWhat value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColWhatTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAmtReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAmtReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAmtOpened()
		{
			super.row.showOpened(2);
		}
		public Integer getColAmt()
		{
			return (Integer)super.row.get(2);
		}
		public void setColAmt(Integer value)
		{
			super.row.set(2, value);
		}
		public void setCellColAmtTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColNrYrsReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColNrYrsReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColNrYrsOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getColNrYrs()
		{
			return (Integer)super.row.get(3);
		}
		public void setColNrYrs(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColNrYrsTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColWhenStoppedReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColWhenStoppedReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColWhenStoppedOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.PartialDate getColWhenStopped()
		{
			return (ims.framework.utils.PartialDate)super.row.get(4);
		}
		public void setColWhenStopped(ims.framework.utils.PartialDate value)
		{
			super.row.set(4, value);
		}
		public void setCellColWhenStoppedTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.SmokingDetails getValue()
		{
			return (ims.core.vo.SmokingDetails)super.row.getValue();
		}
		public void setValue(ims.core.vo.SmokingDetails value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSmokingDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSmokingDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSmokingDetailsRow get(int index)
		{
			return new grdSmokingDetailsRow(super.collection.get(index));
		}
		public grdSmokingDetailsRow newRow()
		{
			return new grdSmokingDetailsRow(super.collection.newRow());
		}
		public grdSmokingDetailsRow newRow(boolean autoSelect)
		{
			return new grdSmokingDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdSmokingDetailsRow newRowAt(int index)
		{
			return new grdSmokingDetailsRow(super.collection.newRowAt(index));
		}
		public grdSmokingDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSmokingDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSmokingDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.SmokingDetails[] getValues()
		{
			ims.core.vo.SmokingDetails[] listOfValues = new ims.core.vo.SmokingDetails[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.SmokingDetails getValue()
		{
			return (ims.core.vo.SmokingDetails)super.grid.getValue();
		}
		public void setValue(ims.core.vo.SmokingDetails value)
		{
			super.grid.setValue(value);
		}
		public grdSmokingDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSmokingDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSmokingDetailsRowCollection getRows()
		{
			return new grdSmokingDetailsRowCollection(super.grid.getRows());
		}
		public grdSmokingDetailsRow getRowByValue(ims.core.vo.SmokingDetails value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSmokingDetailsRow(row);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColStatusComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setColWhatHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColWhatHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColWhatComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColAmtHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAmtHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColNrYrsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColNrYrsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColWhenStoppedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColWhenStoppedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdIllicitDrugsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIllicitDrugsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnStatusReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnStatusOpened()
		{
			super.row.showOpened(0);
		}
		public ims.clinical.vo.lookups.IllicitDrugsCurrentStatus getColumnStatus()
		{
			return (ims.clinical.vo.lookups.IllicitDrugsCurrentStatus)super.row.get(0);
		}
		public void setColumnStatus(ims.clinical.vo.lookups.IllicitDrugsCurrentStatus value)
		{
			super.row.set(0, value, true);
		}
		public void setCellColumnStatusTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDrugReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDrugReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDrugOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.IllicitDrugs getColumnDrug()
		{
			return (ims.core.vo.lookups.IllicitDrugs)super.row.get(1);
		}
		public void setColumnDrug(ims.core.vo.lookups.IllicitDrugs value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColumnDrugTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnDateLastUsedReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnDateLastUsedReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnDateLastUsedOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.utils.PartialDate getColumnDateLastUsed()
		{
			return (ims.framework.utils.PartialDate)super.row.get(2);
		}
		public void setColumnDateLastUsed(ims.framework.utils.PartialDate value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnDateLastUsedTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.core.vo.IllicitDrugsDetailsVo getValue()
		{
			return (ims.core.vo.IllicitDrugsDetailsVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.IllicitDrugsDetailsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIllicitDrugsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIllicitDrugsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIllicitDrugsRow get(int index)
		{
			return new grdIllicitDrugsRow(super.collection.get(index));
		}
		public grdIllicitDrugsRow newRow()
		{
			return new grdIllicitDrugsRow(super.collection.newRow());
		}
		public grdIllicitDrugsRow newRow(boolean autoSelect)
		{
			return new grdIllicitDrugsRow(super.collection.newRow(autoSelect));
		}
		public grdIllicitDrugsRow newRowAt(int index)
		{
			return new grdIllicitDrugsRow(super.collection.newRowAt(index));
		}
		public grdIllicitDrugsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIllicitDrugsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIllicitDrugsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.IllicitDrugsDetailsVoCollection getValues()
		{
			ims.core.vo.IllicitDrugsDetailsVoCollection listOfValues = new ims.core.vo.IllicitDrugsDetailsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.IllicitDrugsDetailsVo getValue()
		{
			return (ims.core.vo.IllicitDrugsDetailsVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.IllicitDrugsDetailsVo value)
		{
			super.grid.setValue(value);
		}
		public grdIllicitDrugsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIllicitDrugsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIllicitDrugsRowCollection getRows()
		{
			return new grdIllicitDrugsRowCollection(super.grid.getRows());
		}
		public grdIllicitDrugsRow getRowByValue(ims.core.vo.IllicitDrugsDetailsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIllicitDrugsRow(row);
		}
		public void setColumnStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox ColumnStatusComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setColumnDrugHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDrugHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColumnDrugComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColumnDateLastUsedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnDateLastUsedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class ansIVUserAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNoUnknown option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getcurrentSocialHistory();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Core.contextMenuSocialHistoryGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Core.contextMenuSocialHistoryGridAddItem = factory.createMenuItem(startControlID.intValue() + 10, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Core.contextMenuSocialHistoryGrid.add(contextMenus.Core.contextMenuSocialHistoryGridAddItem);
		contextMenus.Core.contextMenuSocialHistoryGridEditItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Core.contextMenuSocialHistoryGrid.add(contextMenus.Core.contextMenuSocialHistoryGridEditItem);
		contextMenus.Core.contextMenuSocialHistoryGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 12, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.Core.contextMenuSocialHistoryGrid.add(contextMenus.Core.contextMenuSocialHistoryGridRemoveItem);
		form.registerMenu(contextMenus.Core.contextMenuSocialHistoryGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 576, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 392, 64, 440, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_customControlAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 13, skipContextValidation);
		//ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(392), new Integer(64), new Integer(440), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 13), m_customControlAuthForm, instance1 } );
		ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 13), m_customControlAuthForm, instance1, Boolean.TRUE } );
		super.addControl(m_customControlAuthControl);
		Menu[] menus1 = m_customControlAuthForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 302, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dietary Details:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 122, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Occupation Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mobility / Independence:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 146, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Marital Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 400, 144, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Smoking Details:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 400, 336, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Illicit Drugs:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 218, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Someone to Take Home?:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 194, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Fit to Care for Patient:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Occupation (Text):", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 333, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "General Notes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 274, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Descriptive History:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 624, 255, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Units Per Week:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 400, 124, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Smoking Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 400, 255, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Do You Drink Alcohol?:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Occupation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 170, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lives With:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 402, 546, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 402, 516, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 680, 336, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "IV User:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 684, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1035), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 764, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1038), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 168, 240, 216, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 368, 216, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 128, 96, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 400, 290, 432, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 400, 354, 432, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 568, 544, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// PartialDateBox Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 280, 144, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 168, 300, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbDietaryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDietaryTemp);
		cmbDietaryComboBox cmbDietary = (cmbDietaryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDietaryComboBox.class, m_cmbDietaryTemp);
		super.addComboBox(cmbDietary);
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 128, 120, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbOccupationStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOccupationStatusTemp);
		cmbOccupationStatusComboBox cmbOccupationStatus = (cmbOccupationStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOccupationStatusComboBox.class, m_cmbOccupationStatusTemp);
		super.addComboBox(cmbOccupationStatus);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 128, 144, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbMaritalStatTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbMaritalStatTemp);
		cmbMaritalStatComboBox cmbMaritalStat = (cmbMaritalStatComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMaritalStatComboBox.class, m_cmbMaritalStatTemp);
		super.addComboBox(cmbMaritalStat);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 168, 192, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFitToCareForPatientTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFitToCareForPatientTemp);
		cmbFitToCareForPatientComboBox cmbFitToCareForPatient = (cmbFitToCareForPatientComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFitToCareForPatientComboBox.class, m_cmbFitToCareForPatientTemp);
		super.addComboBox(cmbFitToCareForPatient);
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 168, 216, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSomeoneToTakeHomeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSomeoneToTakeHomeTemp);
		cmbSomeoneToTakeHomeComboBox cmbSomeoneToTakeHome = (cmbSomeoneToTakeHomeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSomeoneToTakeHomeComboBox.class, m_cmbSomeoneToTakeHomeTemp);
		super.addComboBox(cmbSomeoneToTakeHome);
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 552, 122, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSmokingStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSmokingStatusTemp);
		cmbSmokingStatusComboBox cmbSmokingStatus = (cmbSmokingStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSmokingStatusComboBox.class, m_cmbSmokingStatusTemp);
		super.addComboBox(cmbSmokingStatus);
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 536, 253, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbAlcoholStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAlcoholStatusTemp);
		cmbAlcoholStatusComboBox cmbAlcoholStatus = (cmbAlcoholStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAlcoholStatusComboBox.class, m_cmbAlcoholStatusTemp);
		super.addComboBox(cmbAlcoholStatus);
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 128, 72, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbOccupationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOccupationTemp);
		cmbOccupationComboBox cmbOccupation = (cmbOccupationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOccupationComboBox.class, m_cmbOccupationTemp);
		super.addComboBox(cmbOccupation);
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 168, 168, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbLivesWithTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLivesWithTemp);
		cmbLivesWithComboBox cmbLivesWith = (cmbLivesWithComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLivesWithComboBox.class, m_cmbLivesWithTemp);
		super.addComboBox(cmbLivesWith);
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 568, 512, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbRecordingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRecordingHCPTemp);
		cmbRecordingHCPComboBox cmbRecordingHCP = (cmbRecordingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecordingHCPComboBox.class, m_cmbRecordingHCPTemp);
		super.addComboBox(cmbRecordingHCP);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrSocialHistoryTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrSocialHistoryTemp);
		recbrSocialHistoryRecordBrowser recbrSocialHistory = (recbrSocialHistoryRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrSocialHistoryRecordBrowser.class, m_recbrSocialHistoryTemp);
		super.addRecordBrowser(recbrSocialHistory);

		// Grid Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 400, 160, 432, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdSmokingDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSmokingDetailsTemp);
		grdSmokingDetailsGrid grdSmokingDetails = (grdSmokingDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSmokingDetailsGrid.class, m_grdSmokingDetailsTemp);
		grdSmokingDetails.addComboBoxColumn("Status", 0, 0, 75, false, true, true, false, true, -1);
		grdSmokingDetails.addComboBoxColumn("What", 0, 0, 75, false, true, false, false, true, -1);
		grdSmokingDetails.addIntColumn("No./Day", 0, 0, 60, false, true, null, false, 0, true);
		grdSmokingDetails.addIntColumn("No. of Yrs", 0, 0, 55, false, true, null, false, 0, true);
		grdSmokingDetails.addPartialDateColumn("When Stopped", 1, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdSmokingDetails);
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 400, 400, 432, 101, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdIllicitDrugsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuSocialHistoryGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdIllicitDrugsTemp);
		grdIllicitDrugsGrid grdIllicitDrugs = (grdIllicitDrugsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIllicitDrugsGrid.class, m_grdIllicitDrugsTemp);
		grdIllicitDrugs.addComboBoxColumn("Status", 0, 0, 100, false, true, false, false, true, -1);
		grdIllicitDrugs.addComboBoxColumn("Drug", 0, 0, 160, false, true, false, false, true, -1);
		grdIllicitDrugs.addPartialDateColumn("Date Last used", 0, 0, 110, false, true, null, false, 0, true);
		super.addGrid(grdIllicitDrugs);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 720, 253, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 736, 336, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansIVUser = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpansIVUser);
		ansIVUserAnswerBox ansIVUser = (ansIVUserAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansIVUserAnswerBox.class, tmpansIVUser);
		super.addAnswerBox(ansIVUser);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuth()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setcustomControlAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean iscustomControlAuthVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setcustomControlAuthEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean iscustomControlAuthEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(21);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(22);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(23);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(24);
	}
	public TextBox txtMobilityIndependence()
	{
		return (TextBox)super.getControl(25);
	}
	public TextBox txtGeneralNotes()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtOccupation()
	{
		return (TextBox)super.getControl(27);
	}
	public TextBox txtTakenLastWeek()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtIllicitDrugs()
	{
		return (TextBox)super.getControl(29);
	}
	public DateTimeControl dtimRecordingDateTime()
	{
		return (DateTimeControl)super.getControl(30);
	}
	public PartialDateBox pdtMaritalStatus()
	{
		return (PartialDateBox)super.getControl(31);
	}
	public cmbDietaryComboBox cmbDietary()
	{
		return (cmbDietaryComboBox)super.getComboBox(0);
	}
	public cmbOccupationStatusComboBox cmbOccupationStatus()
	{
		return (cmbOccupationStatusComboBox)super.getComboBox(1);
	}
	public cmbMaritalStatComboBox cmbMaritalStat()
	{
		return (cmbMaritalStatComboBox)super.getComboBox(2);
	}
	public cmbFitToCareForPatientComboBox cmbFitToCareForPatient()
	{
		return (cmbFitToCareForPatientComboBox)super.getComboBox(3);
	}
	public cmbSomeoneToTakeHomeComboBox cmbSomeoneToTakeHome()
	{
		return (cmbSomeoneToTakeHomeComboBox)super.getComboBox(4);
	}
	public cmbSmokingStatusComboBox cmbSmokingStatus()
	{
		return (cmbSmokingStatusComboBox)super.getComboBox(5);
	}
	public cmbAlcoholStatusComboBox cmbAlcoholStatus()
	{
		return (cmbAlcoholStatusComboBox)super.getComboBox(6);
	}
	public cmbOccupationComboBox cmbOccupation()
	{
		return (cmbOccupationComboBox)super.getComboBox(7);
	}
	public cmbLivesWithComboBox cmbLivesWith()
	{
		return (cmbLivesWithComboBox)super.getComboBox(8);
	}
	public cmbRecordingHCPComboBox cmbRecordingHCP()
	{
		return (cmbRecordingHCPComboBox)super.getComboBox(9);
	}
	public recbrSocialHistoryRecordBrowser recbrSocialHistory()
	{
		return (recbrSocialHistoryRecordBrowser)super.getRecordBrowser(0);
	}
	public grdSmokingDetailsGrid grdSmokingDetails()
	{
		return (grdSmokingDetailsGrid)super.getGrid(0);
	}
	public grdIllicitDrugsGrid grdIllicitDrugs()
	{
		return (grdIllicitDrugsGrid)super.getGrid(1);
	}
	public IntBox intUnitsPerDay()
	{
		return (IntBox)super.getControl(45);
	}
	public ansIVUserAnswerBox ansIVUser()
	{
		return (ansIVUserAnswerBox)super.getAnswerBox(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SocialHistoryCoreClinicalRecord = new LocalFormName(102181);
				SocialHistory = new LocalFormName(102159);
			}
			public final FormName SocialHistoryCoreClinicalRecord;
			public final FormName SocialHistory;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voSocialHistory = new ims.framework.ContextVariable("voSocialHistory", prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier + "");
			cxl_contactVo = new ims.framework.ContextVariable("contactVo", prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier + "");
			cxl_currentSocialHistory = new ims.framework.ContextVariable("currentSocialHistory", prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier + "");
		}
		
		public boolean getvoSocialHistoryIsNotNull()
		{
			return !cxl_voSocialHistory.getValueIsNull(context);
		}
		public ims.core.vo.SocialHistoryVo getvoSocialHistory()
		{
			return (ims.core.vo.SocialHistoryVo)cxl_voSocialHistory.getValue(context);
		}
		public void setvoSocialHistory(ims.core.vo.SocialHistoryVo value)
		{
			cxl_voSocialHistory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voSocialHistory = null;
		public boolean getcontactVoIsNotNull()
		{
			return !cxl_contactVo.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactVo getcontactVo()
		{
			return (ims.core.vo.ClinicalContactVo)cxl_contactVo.getValue(context);
		}
		public void setcontactVo(ims.core.vo.ClinicalContactVo value)
		{
			cxl_contactVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_contactVo = null;
		public boolean getcurrentSocialHistoryIsNotNull()
		{
			return !cxl_currentSocialHistory.getValueIsNull(context);
		}
		public ims.core.vo.SocialHistoryVo getcurrentSocialHistory()
		{
			return (ims.core.vo.SocialHistoryVo)cxl_currentSocialHistory.getValue(context);
		}
		public void setcurrentSocialHistory(ims.core.vo.SocialHistoryVo value)
		{
			cxl_currentSocialHistory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentSocialHistory = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SocialHistoryGrid implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 10;
				public static final int Edit = 11;
				public static final int Remove = 12;
			}
			public void disableAllSocialHistoryGridMenuItems()
			{
				this.contextMenuSocialHistoryGridAddItem.setEnabled(false);
				this.contextMenuSocialHistoryGridEditItem.setEnabled(false);
				this.contextMenuSocialHistoryGridRemoveItem.setEnabled(false);
			}
			public void hideAllSocialHistoryGridMenuItems()
			{
				this.contextMenuSocialHistoryGridAddItem.setVisible(false);
				this.contextMenuSocialHistoryGridEditItem.setVisible(false);
				this.contextMenuSocialHistoryGridRemoveItem.setVisible(false);
			}
			private Menu contextMenuSocialHistoryGrid;
			public MenuItem getSocialHistoryGridAddItem()
			{
				return this.contextMenuSocialHistoryGridAddItem;
			}
			private MenuItem contextMenuSocialHistoryGridAddItem;
			public MenuItem getSocialHistoryGridEditItem()
			{
				return this.contextMenuSocialHistoryGridEditItem;
			}
			private MenuItem contextMenuSocialHistoryGridEditItem;
			public MenuItem getSocialHistoryGridRemoveItem()
			{
				return this.contextMenuSocialHistoryGridRemoveItem;
			}
			private MenuItem contextMenuSocialHistoryGridRemoveItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[105];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-ID", "ID_SocialHistory");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-SMOKINGSTATUS", "SmokingStatus");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-ILLICITDRUGS", "IllicitDrugs");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATION", "Occupation");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-LIVESWITH", "LivesWith");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOCAREFORPATIENT", "FitToCareForPatient");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOTAKEHOME", "FitToTakeHome");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONTEXT", "OccupationText");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-SOCIALHISTORYNOTES", "SocialHistoryNotes");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-MOBILITYINDEPENDENCE", "MobilityIndependence");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONSTATUS", "OccupationStatus");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__voSocialHistory_" + componentIdentifier, "BO-1003100026-DIET", "Diet");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ID", "ID_ClinicalContact");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-SEENBY", "SeenBy");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-CARECONTEXT", "CareContext");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-ID", "ID_SocialHistory");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-CARECONTEXT", "CareContext");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-SMOKINGSTATUS", "SmokingStatus");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-ILLICITDRUGS", "IllicitDrugs");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATION", "Occupation");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-LIVESWITH", "LivesWith");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOCAREFORPATIENT", "FitToCareForPatient");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOTAKEHOME", "FitToTakeHome");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONTEXT", "OccupationText");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-SOCIALHISTORYNOTES", "SocialHistoryNotes");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-MOBILITYINDEPENDENCE", "MobilityIndependence");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONSTATUS", "OccupationStatus");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SocialHistory.__internal_x_context__currentSocialHistory_" + componentIdentifier, "BO-1003100026-DIET", "Diet");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
