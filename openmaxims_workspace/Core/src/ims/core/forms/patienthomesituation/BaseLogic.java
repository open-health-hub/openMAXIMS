//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.patienthomesituation;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.PatientHomeSituation.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.PatientHomeSituation domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbFitToCareValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbFitToCare().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbFitToCareLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbFitToCareLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbFitToCare().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbFitToCareLookup()
	{
		this.form.cmbFitToCare().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbFitToCare().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbFitToCareLookupValue(int id)
	{
		ims.core.vo.lookups.YesNoUnknown instance = ims.core.vo.lookups.LookupHelper.getYesNoUnknownInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbFitToCare().setValue(instance);
	}
	protected final void defaultcmbFitToCareLookupValue()
	{
		this.form.cmbFitToCare().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbTakeHomeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTakeHome().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTakeHomeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTakeHomeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTakeHome().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTakeHomeLookup()
	{
		this.form.cmbTakeHome().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTakeHome().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTakeHomeLookupValue(int id)
	{
		ims.core.vo.lookups.YesNoUnknown instance = ims.core.vo.lookups.LookupHelper.getYesNoUnknownInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTakeHome().setValue(instance);
	}
	protected final void defaultcmbTakeHomeLookupValue()
	{
		this.form.cmbTakeHome().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbLivesValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbLives().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LivesWith existingInstance = (ims.core.vo.lookups.LivesWith)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLivesLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.LivesWith)
		{
			ims.core.vo.lookups.LivesWith instance = (ims.core.vo.lookups.LivesWith)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLivesLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.LivesWith existingInstance = (ims.core.vo.lookups.LivesWith)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbLives().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLivesLookup()
	{
		this.form.cmbLives().clear();
		ims.core.vo.lookups.LivesWithCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLivesWith(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbLives().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLivesLookupValue(int id)
	{
		ims.core.vo.lookups.LivesWith instance = ims.core.vo.lookups.LookupHelper.getLivesWithInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbLives().setValue(instance);
	}
	protected final void defaultcmbLivesLookupValue()
	{
		this.form.cmbLives().setValue((ims.core.vo.lookups.LivesWith)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.LivesWith.class, engine.getFormName().getID(), ims.core.vo.lookups.LivesWith.TYPE_ID));
	}
	protected final void oncmbShowerLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbShowerLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSShowerLocation existingInstance = (ims.clinical.vo.lookups.HSShowerLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbShowerLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSShowerLocation)
		{
			ims.clinical.vo.lookups.HSShowerLocation instance = (ims.clinical.vo.lookups.HSShowerLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbShowerLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSShowerLocation existingInstance = (ims.clinical.vo.lookups.HSShowerLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbShowerLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbShowerLocationLookup()
	{
		this.form.cmbShowerLocation().clear();
		ims.clinical.vo.lookups.HSShowerLocationCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSShowerLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbShowerLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbShowerLocationLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSShowerLocation instance = ims.clinical.vo.lookups.LookupHelper.getHSShowerLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbShowerLocation().setValue(instance);
	}
	protected final void defaultcmbShowerLocationLookupValue()
	{
		this.form.cmbShowerLocation().setValue((ims.clinical.vo.lookups.HSShowerLocation)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSShowerLocation.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSShowerLocation.TYPE_ID));
	}
	protected final void oncmbToiletLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbToiletLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSToiletLocation existingInstance = (ims.clinical.vo.lookups.HSToiletLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbToiletLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSToiletLocation)
		{
			ims.clinical.vo.lookups.HSToiletLocation instance = (ims.clinical.vo.lookups.HSToiletLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbToiletLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSToiletLocation existingInstance = (ims.clinical.vo.lookups.HSToiletLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbToiletLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbToiletLocationLookup()
	{
		this.form.cmbToiletLocation().clear();
		ims.clinical.vo.lookups.HSToiletLocationCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSToiletLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbToiletLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbToiletLocationLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSToiletLocation instance = ims.clinical.vo.lookups.LookupHelper.getHSToiletLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbToiletLocation().setValue(instance);
	}
	protected final void defaultcmbToiletLocationLookupValue()
	{
		this.form.cmbToiletLocation().setValue((ims.clinical.vo.lookups.HSToiletLocation)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSToiletLocation.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSToiletLocation.TYPE_ID));
	}
	protected final void oncmbBathroomLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbBathroomLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSBathroomLocation existingInstance = (ims.clinical.vo.lookups.HSBathroomLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbBathroomLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSBathroomLocation)
		{
			ims.clinical.vo.lookups.HSBathroomLocation instance = (ims.clinical.vo.lookups.HSBathroomLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbBathroomLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSBathroomLocation existingInstance = (ims.clinical.vo.lookups.HSBathroomLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbBathroomLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbBathroomLocationLookup()
	{
		this.form.cmbBathroomLocation().clear();
		ims.clinical.vo.lookups.HSBathroomLocationCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSBathroomLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbBathroomLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbBathroomLocationLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSBathroomLocation instance = ims.clinical.vo.lookups.LookupHelper.getHSBathroomLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbBathroomLocation().setValue(instance);
	}
	protected final void defaultcmbBathroomLocationLookupValue()
	{
		this.form.cmbBathroomLocation().setValue((ims.clinical.vo.lookups.HSBathroomLocation)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSBathroomLocation.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSBathroomLocation.TYPE_ID));
	}
	protected final void oncmbLiftValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbLift().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSLift existingInstance = (ims.clinical.vo.lookups.HSLift)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbLiftLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSLift)
		{
			ims.clinical.vo.lookups.HSLift instance = (ims.clinical.vo.lookups.HSLift)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbLiftLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSLift existingInstance = (ims.clinical.vo.lookups.HSLift)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbLift().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbLiftLookup()
	{
		this.form.cmbLift().clear();
		ims.clinical.vo.lookups.HSLiftCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSLift(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbLift().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbLiftLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSLift instance = ims.clinical.vo.lookups.LookupHelper.getHSLiftInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbLift().setValue(instance);
	}
	protected final void defaultcmbLiftLookupValue()
	{
		this.form.cmbLift().setValue((ims.clinical.vo.lookups.HSLift)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSLift.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSLift.TYPE_ID));
	}
	protected final void oncmbSupervisedByValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSupervisedBy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSSupervisedBy existingInstance = (ims.clinical.vo.lookups.HSSupervisedBy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSupervisedByLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSSupervisedBy)
		{
			ims.clinical.vo.lookups.HSSupervisedBy instance = (ims.clinical.vo.lookups.HSSupervisedBy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSupervisedByLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSSupervisedBy existingInstance = (ims.clinical.vo.lookups.HSSupervisedBy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSupervisedBy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSupervisedByLookup()
	{
		this.form.cmbSupervisedBy().clear();
		ims.clinical.vo.lookups.HSSupervisedByCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSSupervisedBy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSupervisedBy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSupervisedByLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSSupervisedBy instance = ims.clinical.vo.lookups.LookupHelper.getHSSupervisedByInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSupervisedBy().setValue(instance);
	}
	protected final void defaultcmbSupervisedByLookupValue()
	{
		this.form.cmbSupervisedBy().setValue((ims.clinical.vo.lookups.HSSupervisedBy)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSSupervisedBy.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSSupervisedBy.TYPE_ID));
	}
	protected final void oncmbSideValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSide().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSRailsSide existingInstance = (ims.clinical.vo.lookups.HSRailsSide)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSideLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSRailsSide)
		{
			ims.clinical.vo.lookups.HSRailsSide instance = (ims.clinical.vo.lookups.HSRailsSide)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSideLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSRailsSide existingInstance = (ims.clinical.vo.lookups.HSRailsSide)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSide().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSideLookup()
	{
		this.form.cmbSide().clear();
		ims.clinical.vo.lookups.HSRailsSideCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSRailsSide(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSide().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSideLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSRailsSide instance = ims.clinical.vo.lookups.LookupHelper.getHSRailsSideInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSide().setValue(instance);
	}
	protected final void defaultcmbSideLookupValue()
	{
		this.form.cmbSide().setValue((ims.clinical.vo.lookups.HSRailsSide)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSRailsSide.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSRailsSide.TYPE_ID));
	}
	protected final void oncmbRailsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRails().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSRails existingInstance = (ims.clinical.vo.lookups.HSRails)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRailsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSRails)
		{
			ims.clinical.vo.lookups.HSRails instance = (ims.clinical.vo.lookups.HSRails)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRailsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSRails existingInstance = (ims.clinical.vo.lookups.HSRails)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRails().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRailsLookup()
	{
		this.form.cmbRails().clear();
		ims.clinical.vo.lookups.HSRailsCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSRails(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRails().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRailsLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSRails instance = ims.clinical.vo.lookups.LookupHelper.getHSRailsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRails().setValue(instance);
	}
	protected final void defaultcmbRailsLookupValue()
	{
		this.form.cmbRails().setValue((ims.clinical.vo.lookups.HSRails)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSRails.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSRails.TYPE_ID));
	}
	protected final void oncmbStairsValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStairs().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSStairs existingInstance = (ims.clinical.vo.lookups.HSStairs)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStairsLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSStairs)
		{
			ims.clinical.vo.lookups.HSStairs instance = (ims.clinical.vo.lookups.HSStairs)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStairsLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSStairs existingInstance = (ims.clinical.vo.lookups.HSStairs)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStairs().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStairsLookup()
	{
		this.form.cmbStairs().clear();
		ims.clinical.vo.lookups.HSStairsCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSStairs(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStairs().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStairsLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSStairs instance = ims.clinical.vo.lookups.LookupHelper.getHSStairsInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStairs().setValue(instance);
	}
	protected final void defaultcmbStairsLookupValue()
	{
		this.form.cmbStairs().setValue((ims.clinical.vo.lookups.HSStairs)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSStairs.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSStairs.TYPE_ID));
	}
	protected final void oncmbFloorValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbFloor().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSFloorLevel existingInstance = (ims.clinical.vo.lookups.HSFloorLevel)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbFloorLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSFloorLevel)
		{
			ims.clinical.vo.lookups.HSFloorLevel instance = (ims.clinical.vo.lookups.HSFloorLevel)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbFloorLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSFloorLevel existingInstance = (ims.clinical.vo.lookups.HSFloorLevel)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbFloor().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbFloorLookup()
	{
		this.form.cmbFloor().clear();
		ims.clinical.vo.lookups.HSFloorLevelCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSFloorLevel(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbFloor().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbFloorLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSFloorLevel instance = ims.clinical.vo.lookups.LookupHelper.getHSFloorLevelInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbFloor().setValue(instance);
	}
	protected final void defaultcmbFloorLookupValue()
	{
		this.form.cmbFloor().setValue((ims.clinical.vo.lookups.HSFloorLevel)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSFloorLevel.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSFloorLevel.TYPE_ID));
	}
	protected final void oncmbOwnershipValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOwnership().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSOwnership existingInstance = (ims.clinical.vo.lookups.HSOwnership)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOwnershipLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSOwnership)
		{
			ims.clinical.vo.lookups.HSOwnership instance = (ims.clinical.vo.lookups.HSOwnership)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOwnershipLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSOwnership existingInstance = (ims.clinical.vo.lookups.HSOwnership)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOwnership().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOwnershipLookup()
	{
		this.form.cmbOwnership().clear();
		ims.clinical.vo.lookups.HSOwnershipCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSOwnership(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOwnership().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOwnershipLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSOwnership instance = ims.clinical.vo.lookups.LookupHelper.getHSOwnershipInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOwnership().setValue(instance);
	}
	protected final void defaultcmbOwnershipLookupValue()
	{
		this.form.cmbOwnership().setValue((ims.clinical.vo.lookups.HSOwnership)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSOwnership.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSOwnership.TYPE_ID));
	}
	protected final void oncmbTypeAccomValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTypeAccom().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSAccomType existingInstance = (ims.clinical.vo.lookups.HSAccomType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTypeAccomLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.HSAccomType)
		{
			ims.clinical.vo.lookups.HSAccomType instance = (ims.clinical.vo.lookups.HSAccomType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTypeAccomLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.HSAccomType existingInstance = (ims.clinical.vo.lookups.HSAccomType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTypeAccom().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTypeAccomLookup()
	{
		this.form.cmbTypeAccom().clear();
		ims.clinical.vo.lookups.HSAccomTypeCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getHSAccomType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTypeAccom().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTypeAccomLookupValue(int id)
	{
		ims.clinical.vo.lookups.HSAccomType instance = ims.clinical.vo.lookups.LookupHelper.getHSAccomTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTypeAccom().setValue(instance);
	}
	protected final void defaultcmbTypeAccomLookupValue()
	{
		this.form.cmbTypeAccom().setValue((ims.clinical.vo.lookups.HSAccomType)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.HSAccomType.class, engine.getFormName().getID(), ims.clinical.vo.lookups.HSAccomType.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.cmbFitToCare().setValue(null);
		this.form.cmbTakeHome().setValue(null);
		this.form.cmbLives().setValue(null);
		this.form.txtSpareKeys().setValue("");
		this.form.txtHouseKeys().setValue("");
		this.form.cmbShowerLocation().setValue(null);
		this.form.cmbToiletLocation().setValue(null);
		this.form.cmbBathroomLocation().setValue(null);
		this.form.txtShower().setValue("");
		this.form.txtToilet().setValue("");
		this.form.txtBathroom().setValue("");
		this.form.txtPhoneNumber().setValue("");
		this.form.txtAddress().setValue("");
		this.form.txtStairsLift().setValue("");
		this.form.cmbLift().setValue(null);
		this.form.txtName().setValue("");
		this.form.cmbSupervisedBy().setValue(null);
		this.form.cmbSide().setValue(null);
		this.form.cmbRails().setValue(null);
		this.form.cmbStairs().setValue(null);
		this.form.cmbFloor().setValue(null);
		this.form.cmbOwnership().setValue(null);
		this.form.txtOther().setValue("");
		this.form.cmbTypeAccom().setValue(null);
		this.form.txtLivesWith().setValue("");
	}
	protected void populateScreenFromData(ims.core.vo.PatientHomeSituationVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.cmbFitToCare().setValue(value.getFitToCareForPatientIsNotNull() ? value.getFitToCareForPatient() : null);
		this.form.cmbTakeHome().setValue(value.getFitToTakeHomeIsNotNull() ? value.getFitToTakeHome() : null);
		this.form.cmbLives().setValue(value.getLivesWithIsNotNull() ? value.getLivesWith() : null);
		this.form.txtSpareKeys().setValue(value.getSpareSetIsNotNull() ? value.getSpareSet(): null);
		this.form.txtHouseKeys().setValue(value.getHouseKeysIsNotNull() ? value.getHouseKeys(): null);
		this.form.cmbShowerLocation().setValue(value.getShowerLocationIsNotNull() ? value.getShowerLocation() : null);
		this.form.cmbToiletLocation().setValue(value.getToiletLocationIsNotNull() ? value.getToiletLocation() : null);
		this.form.cmbBathroomLocation().setValue(value.getBathroomLocationIsNotNull() ? value.getBathroomLocation() : null);
		this.form.txtShower().setValue(value.getShowerIsNotNull() ? value.getShower(): null);
		this.form.txtToilet().setValue(value.getToiletIsNotNull() ? value.getToilet(): null);
		this.form.txtBathroom().setValue(value.getBathroomIsNotNull() ? value.getBathroom(): null);
		this.form.txtPhoneNumber().setValue(value.getSupervisePhoneNoIsNotNull() ? value.getSupervisePhoneNo(): null);
		this.form.txtAddress().setValue(value.getSuperviseAddressIsNotNull() ? value.getSuperviseAddress(): null);
		this.form.txtStairsLift().setValue(value.getStairsLiftIsNotNull() ? value.getStairsLift(): null);
		this.form.cmbLift().setValue(value.getLiftIsNotNull() ? value.getLift() : null);
		this.form.txtName().setValue(value.getSuperviseNameIsNotNull() ? value.getSuperviseName(): null);
		this.form.cmbSupervisedBy().setValue(value.getSupervisedByIsNotNull() ? value.getSupervisedBy() : null);
		this.form.cmbSide().setValue(value.getRailSideIsNotNull() ? value.getRailSide() : null);
		this.form.cmbRails().setValue(value.getRailsIsNotNull() ? value.getRails() : null);
		this.form.cmbStairs().setValue(value.getStairsIsNotNull() ? value.getStairs() : null);
		this.form.cmbFloor().setValue(value.getFloorLevelIsNotNull() ? value.getFloorLevel() : null);
		this.form.cmbOwnership().setValue(value.getOwnershipIsNotNull() ? value.getOwnership() : null);
		this.form.txtOther().setValue(value.getAccomTypeOtherIsNotNull() ? value.getAccomTypeOther(): null);
		this.form.cmbTypeAccom().setValue(value.getAccomTypeIsNotNull() ? value.getAccomType() : null);
		this.form.txtLivesWith().setValue(value.getLivesWithDetailsIsNotNull() ? value.getLivesWithDetails(): null);
	}
	protected ims.core.vo.PatientHomeSituationVo populateDataFromScreen(ims.core.vo.PatientHomeSituationVo value)
	{
		if(value == null)
			value = new ims.core.vo.PatientHomeSituationVo();

		value.setFitToCareForPatient(this.form.cmbFitToCare().getValue());
		value.setFitToTakeHome(this.form.cmbTakeHome().getValue());
		value.setLivesWith(this.form.cmbLives().getValue());
		value.setSpareSet(this.form.txtSpareKeys().getValue());
		value.setHouseKeys(this.form.txtHouseKeys().getValue());
		value.setShowerLocation(this.form.cmbShowerLocation().getValue());
		value.setToiletLocation(this.form.cmbToiletLocation().getValue());
		value.setBathroomLocation(this.form.cmbBathroomLocation().getValue());
		value.setShower(this.form.txtShower().getValue());
		value.setToilet(this.form.txtToilet().getValue());
		value.setBathroom(this.form.txtBathroom().getValue());
		value.setSupervisePhoneNo(this.form.txtPhoneNumber().getValue());
		value.setSuperviseAddress(this.form.txtAddress().getValue());
		value.setStairsLift(this.form.txtStairsLift().getValue());
		value.setLift(this.form.cmbLift().getValue());
		value.setSuperviseName(this.form.txtName().getValue());
		value.setSupervisedBy(this.form.cmbSupervisedBy().getValue());
		value.setRailSide(this.form.cmbSide().getValue());
		value.setRails(this.form.cmbRails().getValue());
		value.setStairs(this.form.cmbStairs().getValue());
		value.setFloorLevel(this.form.cmbFloor().getValue());
		value.setOwnership(this.form.cmbOwnership().getValue());
		value.setAccomTypeOther(this.form.txtOther().getValue());
		value.setAccomType(this.form.cmbTypeAccom().getValue());
		value.setLivesWithDetails(this.form.txtLivesWith().getValue());

		return value;
	}
	protected ims.core.vo.PatientHomeSituationVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.core.vo.PatientHomeSituationVo());
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.PatientHomeSituation domain;
}
