//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.62 build 3100.30141)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.mosquery;

import ims.core.vo.enums.MOSQueryEvent;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.MedicGrade;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	
	private void initialize() 
	{	
		form.getLocalContext().setMinNumChars(new Integer(3));
		//form.qmbMOS().setTooltip("Please enter at least 3 characters to search upon"); WDEV-13913 
		clearControl();
	}

	private void clearControl() 
	{
		form.qmbMOS().clear();
	}
	
	@Override
	protected void onQmbMOSTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEventFired(MOSQueryEvent.TEXT_SUBMITTED);
		
		if (value == null || (value != null && value.length() < form.getLocalContext().getMinNumChars()))
		{
			engine.showMessage("Please enter at least " + form.getLocalContext().getMinNumChars() + " characters to search upon");
			return;
		}
		
		//WDEV-15687
		IMos[] mosColl =null;
		if (form.getLocalContext().getMedicGradeIsNotNull())
		{
			mosColl=domain.listMedics(value,form.getLocalContext().getMosDiscipline(), form.getLocalContext().getMedicGrade(), form.getLocalContext().getIsResponsibleHcp());
		}
		else
		{
			mosColl = domain.listMOS(value, form.getLocalContext().getMOSSearchType(), form.getLocalContext().getMosDiscipline(), form.getLocalContext().getMOSLocation(), form.getLocalContext().getCanReferPatient(),form.getLocalContext().getIsALocalConsultanrt(),form.getLocalContext().getIsResponsibleHcp());	//WDEV-12587 //WDEV-15544  //WDEV-15194
		}
		//IMos[] mosColl = domain.listMOS(value, form.getLocalContext().getMOSSearchType(), form.getLocalContext().getMosDiscipline(), form.getLocalContext().getMOSLocation(), form.getLocalContext().getCanReferPatient(),form.getLocalContext().getIsALocalConsultanrt(),form.getLocalContext().getIsResponsibleHcp());	//WDEV-12587 //WDEV-15544  //WDEV-15194
		
		if(mosColl == null)
			 return;
		
		form.qmbMOS().setValue(null);
		form.qmbMOS().clear();
		
		for(int i=0; i<mosColl.length; i++)
		{
			form.qmbMOS().newRow(mosColl[i], mosColl[i].getIMosName());
		}
		if(mosColl.length == 1)
		{
			form.qmbMOS().setValue(mosColl[0]);
			form.getLocalContext().setEventFired(MOSQueryEvent.VALUE_CHANGED);
		}
		if(mosColl.length > 1)
		{
			form.qmbMOS().showOpened();
		}
	}
	
	private void setMosValue(IMos mos) 
	{
		if (mos != null)
		{
			if (form.qmbMOS().getValues().indexOf(mos) < 0)
				form.qmbMOS().newRow(mos, mos.getIMosName());
		}

		form.qmbMOS().setValue(mos);
	}
	
	protected void onQmbMOSValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setEventFired(MOSQueryEvent.VALUE_CHANGED);
	}
	
	//------------------- Component Interface methods ---------------------------
	
	
	public void initialize(ims.core.vo.enums.MosType mosType)
	{
		form.getLocalContext().setMOSSearchType(mosType);
	}

	public void initialize(MosType mosType, HcpDisType mosDiscipline) 
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setMosDiscipline(mosDiscipline);
	}
	
	public void initialize(MosType mosType, Integer mosLocation) 
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setMOSLocation(mosLocation);
	}
	
	//WDEV-12587
	public void initialize(MosType mosType, Boolean canReferPatient) 
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setCanReferPatient(canReferPatient);
	}

	//WDEV-15544
	
	public ims.vo.interfaces.IMos getValue()
	{
		return form.qmbMOS().getValue();
	}

	public void setValue(ims.vo.interfaces.IMos iMos)
	{
		setMosValue(iMos);
	}

	public void setEnabled(Boolean value)
	{
		if (value != null)
		{
			form.qmbMOS().setEnabled(value);
		}
	}

	public void setMinRequiredCharsForSearch(Integer numChars)
	{
		if(numChars < 1)
			throw new CodingRuntimeException("cannot override 'MinNumberOfChars' property in DevEnv which has been set to 1");
		
		form.getLocalContext().setMinNumChars(numChars);
	}
	
	public MOSQueryEvent getEventFired()
	{
		return form.getLocalContext().getEventFired();
	}

	public void isRequired(Boolean value) 
	{
		if (value != null)
		{
			form.qmbMOS().setRequired(value);
			form.getLocalContext().setIsRequired(value);
		}
	}

	public void clear() 
	{
		form.qmbMOS().clear();
	}

	public String getError(String labelName) 
	{
		if (form.getLocalContext().getIsRequiredIsNotNull() && form.getLocalContext().getIsRequired())
		{
			if(labelName == null || (labelName != null && labelName.length() == 0))
			{
				labelName = "MOS";
			}
			
			String label = labelName.charAt(labelName.length() - 1) == ' ' ? labelName : labelName + " ";
			
			if (form.qmbMOS().getValue() == null)
				return new String(label + "is mandatory");
		}
		
		return null;
	}

	public void setVisible(Boolean bVisible) 
	{
		form.qmbMOS().setVisible(bVisible);
	}

	//WDEV-15544
	public void initializeLocalConsultant(MosType mosType,Boolean isALocalConsultant) 
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setIsALocalConsultanrt(isALocalConsultant);
	}

	//WDEV-15194
	public void initializeResponsibleHcp(MosType mosType,Boolean isResponsibleHcp) 
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setIsResponsibleHcp(isResponsibleHcp);
	}

	//WDEV-15687
	public void initialize(HcpDisType medicType, MedicGrade medicGrade)
	{
		form.getLocalContext().setMosDiscipline(medicType);
		form.getLocalContext().setMedicGrade(medicGrade);
		
	}

	//wdev-15717
	public void initialize(MosType mosType, HcpDisType mosDiscipline, Integer mosLocation)
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setMosDiscipline(mosDiscipline);
		form.getLocalContext().setMOSLocation(mosLocation);
		
	}

	//WDEV-17096
	public void initializeConsultantResponsibleHcp(MosType mosType, MedicGrade medicGrade, Boolean isResponsibleHcp)
	{
		form.getLocalContext().setMOSSearchType(mosType);
		form.getLocalContext().setMedicGrade(medicGrade);
		form.getLocalContext().setIsResponsibleHcp(isResponsibleHcp);
	}

}
