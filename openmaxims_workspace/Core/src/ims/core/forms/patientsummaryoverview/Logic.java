//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4027.29767)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientsummaryoverview;

import ims.core.forms.patientsummaryoverview.GenForm.grdAlertsRow;
import ims.core.forms.patientsummaryoverview.GenForm.grdAllergiesRow;
import ims.core.forms.patientsummaryoverview.GenForm.grdAppHistoryRow;
import ims.core.forms.patientsummaryoverview.GenForm.grdAssessmentsRow;
import ims.core.forms.patientsummaryoverview.GenForm.grdPSHRow;
import ims.core.vo.AppointmentHistoryForSummaryOverviewVo;
import ims.core.vo.AppointmentHistoryForSummaryOverviewVoCollection;
import ims.core.vo.CommChannelVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpToPracticesForSummaryOverviewVo;
import ims.core.vo.IntraOperativeCRforSummaryOverviewVo;
import ims.core.vo.IntraOperativeCRforSummaryOverviewVoCollection;
import ims.core.vo.PatientAlertLiteVo;
import ims.core.vo.PatientAlertLiteVoCollection;
import ims.core.vo.PatientAllergyForSummaryOverviewVo;
import ims.core.vo.PatientAllergyForSummaryOverviewVoCollection;
import ims.core.vo.PatientProcedureForSummaryOverviewVo;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientSummaryOverviewVo;
import ims.core.vo.RiskAssessmentForSummaryOverviewVo;
import ims.core.vo.RiskAssessmentForSummaryOverviewVoCollection;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		
		initialize();
	}
	
	private void initialize() throws PresentationLogicException
	{
		String[] assess = new String[]{"1 VTE","2 Waterlow","3 Re-positioning","4 Falls","5 VIP","6 NV","7 Moving & handling","8 Bed Rails","9 Delirium","10 MUST"};
		for (int  i = 0 ; i < assess.length ; i++)
		{
			grdAssessmentsRow newRow = form.grdAssessments().getRows().newRow();
			newRow.setColumnName(assess[i]);
			newRow.setTooltipForColumnName(assess[i]);
		}
		String[] pah = new String[]{"Referral received","Triage","First Appointment","SFS","Theatre","Discharge"};
		for (int  i = 0 ; i < pah.length ; i++)
		{
			 grdAppHistoryRow newRow = form.grdAppHistory().getRows().newRow();
			newRow.setColumnEvent(pah[i]);
			newRow.setTooltipForColumnEvent(pah[i]);
		}
		
		PatientSummaryOverviewVo overview = domain.getPatientSummaryOverview(form.getGlobalContext().Core.getCurrentCareContext(),form.getGlobalContext().Core.getPatientShort());
		populatePatientInfo(form.getGlobalContext().Core.getPatientShort());
		if (overview == null)
			return;
		populateGPInfo(overview.getGp());
		popululateSurgicalHistory(overview.getSurgicalHistory());
		populateAlerts(overview.getPatientAlerts());
		populateAllergies(overview.getPatientAllergies());
		populateRiskAssessments(overview.getRiskAssessments());
		populateAppHistory(overview.getAppointmentsHistory());
	}
	
	private void populateAppHistory(AppointmentHistoryForSummaryOverviewVoCollection apps)
	{
		if (apps == null)
			return;
		for (int i = 0 ; i<form.grdAppHistory().getRows().size() ; i++)
		{
			AppointmentHistoryForSummaryOverviewVo record = getRecordForId(i, apps);
			grdAppHistoryRow grdAppHistoryRow = form.grdAppHistory().getRows().get(i);
			grdAppHistoryRow.setColumnDate(record.getDateIsNotNull()?record.getDate().toString():null);
			grdAppHistoryRow.setColumnHcp(record.getHcpIsNotNull()?record.getHcp().toString():null);
			if (record.getDateIsNotNull())
			{
				grdAppHistoryRow.setTooltipForColumnDate(record.getDate().toString());
			}
			if (record.getHcpIsNotNull())
			{
				grdAppHistoryRow.setTooltipForColumnHcp(record.getHcp().toString());
			}
		}
		
	}
	private AppointmentHistoryForSummaryOverviewVo getRecordForId(int id, AppointmentHistoryForSummaryOverviewVoCollection apps)
	{
		
		if (apps == null)
		{
			return getNewForId(id);
		}
		for (int i =0 ; i < apps.size() ; i++)
		{
			if (!apps.get(i).getTypeIsNotNull())
				continue;
			if (id == apps.get(i).getType())
				return apps.get(i);
		}
		return getNewForId(id);
	}
	private AppointmentHistoryForSummaryOverviewVo getNewForId(int id)
	{
		AppointmentHistoryForSummaryOverviewVo result = new AppointmentHistoryForSummaryOverviewVo();
		result.setType(id);
		return result;
	}

	private void populateRiskAssessments(RiskAssessmentForSummaryOverviewVoCollection ass)
	{
		if (ass == null)
			return;
		for (int i = 0 ; i < ass.size() ; i++)
		{
			RiskAssessmentForSummaryOverviewVo as = ass.get(i);
			grdAssessmentsRow row = form.grdAssessments().getRows().get(as.getAssessmentType());
			row.setColumnDate(as.getDateIsNotNull()?as.getDate().toString():null);
			row.setColumnHcp(as.getHcpIsNotNull()?as.getHcp().getIHcpName():null);
			row.setColumnScore(as.getScoreIsNotNull()?as.getScore().toString():null);
			
			if (as.getDateIsNotNull())
			{
				row.setTooltipForColumnDate(as.getDate().toString());
				
			}
			if (as.getHcpIsNotNull())
			{
				row.setTooltipForColumnHcp(as.getHcp().getIHcpName());
				
			}
			if (as.getScoreIsNotNull())
			{
				row.setTooltipForColumnScore(as.getScore());
			}
			
		}
		
	}

	private void populateAllergies(PatientAllergyForSummaryOverviewVoCollection patientAllergies)
	{
		if (patientAllergies == null)
			return;
		for (int i = 0 ; i < patientAllergies.size() ; i++)
		{
			PatientAllergyForSummaryOverviewVo x = patientAllergies.get(i);
			grdAllergiesRow newRow = form.grdAllergies().getRows().newRow();
			newRow.setColumnName(x.getAllergenDescription());
			newRow.setTooltip(x.getAllergenDescription());
		}
		
	}

	private void populateAlerts(PatientAlertLiteVoCollection patientAlerts)
	{
		if (patientAlerts == null)
			return;
		for (int i = 0 ; i < patientAlerts.size() ; i++)
		{
			PatientAlertLiteVo x = patientAlerts.get(i);
			grdAlertsRow newRow = form.grdAlerts().getRows().newRow();
			newRow.setColumnAlert(x.getAlertType().getIItemText());
			newRow.setTooltip(x.getAlertType().getIItemText());
		}
		
	}

	private void popululateSurgicalHistory(IntraOperativeCRforSummaryOverviewVoCollection surgicalHistory)
	{
		if (surgicalHistory == null || surgicalHistory.size() == 0)
				return;
		for (int i = 0 ; i < surgicalHistory.size() ; i++)
		{
			IntraOperativeCRforSummaryOverviewVo x = surgicalHistory.get(i);
			if (x==null)
				continue;
			grdPSHRow newRow = form.grdPSH().getRows().newRow();
			newRow.setColumnDescription(x.getActualProcedureIsNotNull()?x.getActualProcedure().getProcedureDescription():null);
			newRow.setColumnDate(x.getSurgeryStartTimeIsNotNull()?x.getSurgeryStartTime().toString():null);
			
			newRow.setColumnHcp(x.getSurgeonIsNotNull()?x.getSurgeon().getIHcpName():null);
			String opcCode = getOpcCode(x.getActualProcedure());
			newRow.setColumnOpcs(opcCode);
			
			//WDEV-11901 - starts here
			String rowTooltip = getNumberOfDaysPostOp(x.getSurgeryStartTime());
			String cellTooltip = "";
			
			if (x.getActualProcedureIsNotNull())
			{
				cellTooltip = x.getActualProcedure().getProcedureDescription();
			}
			newRow.setTooltipForColumnDescription(cellTooltip + (cellTooltip.length() > 0 ? "<br>" : "") + rowTooltip);
			
			cellTooltip = "";
			if (x.getSurgeryStartTimeIsNotNull())
			{
				cellTooltip = x.getSurgeryStartTime().toString();
			}
			newRow.setTooltipForColumnDate(cellTooltip + (cellTooltip.length() > 0 ? "<br>" : "") + rowTooltip);
			
			cellTooltip = "";
			if (x.getSurgeonIsNotNull())
			{
				cellTooltip = x.getSurgeon().getIHcpName();
			}
			newRow.setTooltipForColumnHcp(cellTooltip + (cellTooltip.length() > 0 ? "<br>" : "") + rowTooltip);
			
			cellTooltip = "";
			if (opcCode!=null)
			{
				cellTooltip = opcCode;
			}
			newRow.setTooltipForColumnOpcs(cellTooltip + (cellTooltip.length() > 0 ? "<br>" : "") + rowTooltip);
			//wdev-11901 - ends here
		}	
	}

	//WDEV-11901
	private String getNumberOfDaysPostOp(DateTime surgeryStartTime) 
	{
		if(surgeryStartTime == null)
			return "";
		
		Date currentDate = new Date();
		
		if(surgeryStartTime.getDate().equals(currentDate))
			return "Number of days post op = 0";
		
		if(surgeryStartTime.getDate().isGreaterThan(currentDate))
			return "";
		
		long a = Date.daysBetween(surgeryStartTime.getDate(), currentDate);
		
		return "Number of days post op = " + a;
	}

	private String getOpcCode(PatientProcedureForSummaryOverviewVo actualProcedure)
	{
		if (actualProcedure == null || !actualProcedure.getProcedureIsNotNull() || !actualProcedure.getProcedure().getTaxonomyMapIsNotNull())
			return null;
		for (int i = 0 ; i < actualProcedure.getProcedure().getTaxonomyMap().size() ; i++)
		{
			if (actualProcedure.getProcedure().getTaxonomyMap().get(i).getTaxonomyName().getID() == TaxonomyType.OPCS4.getID())
				return actualProcedure.getProcedure().getTaxonomyMap().get(i).getTaxonomyCode();
		}
		return null;
	}

	private void populateGPInfo(GpToPracticesForSummaryOverviewVo gp)
	{
		if (gp == null)
			return;
		form.txtGp().setValue(gp.getGpIsNotNull()&&gp.getGp().getNameIsNotNull()?gp.getGp().getName().toString():null);
		form.txtPractice().setValue(gp.getPracticeIsNotNull()?gp.getPractice().getName():null);
		form.txtTel().setValue(getTelephone(gp.getGp()));
		form.txtNacs().setValue(getNacs(gp));
		
	}

	private String getNacs(GpToPracticesForSummaryOverviewVo gp)
	{
		if (gp == null)
			return null;
		if (!gp.getGpIsNotNull())
			return null;
		if (!gp.getGp().getCodeMappingsIsNotNull())
			return null;
		for (int i = 0 ; i < gp.getGp().getCodeMappings().size() ; i++)
		{
			if (gp.getGp().getCodeMappings().get(i).getTaxonomyName().getID() == TaxonomyType.NAT_GP_CODE.getID())
			{
				return gp.getGp().getCodeMappings().get(i).getTaxonomyCode();
			}
		}
		return null;
	}

	private String getTelephone(GpLiteVo gp)
	{
		if (gp == null)
			return null;
		if (!gp.getCommChannelsIsNotNull())
			return null;
		for (int i = 0 ; i < gp.getCommChannels().size() ; i++)
		{
			CommChannelVo commChannelVo = gp.getCommChannels().get(i);
			if (ChannelType.GEN_PHONE.equals(commChannelVo.getChannelType()) || 
					ChannelType.HOME_PHONE.equals(commChannelVo.getChannelType()) ||
					ChannelType.WORK_PHONE.equals(commChannelVo.getChannelType()) ||
					ChannelType.MOBILE.equals(commChannelVo.getChannelType()))
					return commChannelVo.getCommValue();
		}	
		return null;
	}

	private void populatePatientInfo(PatientShort patient)
	{
		if (patient == null)
			return;
		form.txtName().setValue(patient.getNameIsNotNull()?patient.getName().toString():null);
		form.pdtDob().setValue(patient.getDob());
		form.txtAddress().setValue(patient.getAddressIsNotNull()?patient.getAddress().toDisplayStringForMultiLineTextBox():null);
		
		
	}
}
