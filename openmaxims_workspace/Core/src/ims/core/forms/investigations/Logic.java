//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.investigations;

import java.util.ArrayList;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.InvestigationsVo;
import ims.core.vo.InvestigationsVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		form.btnUpdate().setEnabled(false);
		
		Boolean bOPDInvestigationsForm = new Boolean(engine.getFormName().equals(form.getForms().Core.OPDInvestigations));
		
		form.getLocalContext().setIsOPDInvestigationsForm(bOPDInvestigationsForm);
		displayRecordBrowser(bOPDInvestigationsForm.booleanValue());
	}
	
	private void displayRecordBrowser(boolean bEnabled)
	{
		form.recbrOPDInvestigations().setVisible(true);
		form.lblBrowser().setVisible(true);
		form.pnlInvestigations().setVisible(!bEnabled);
	}

	private void open() 
	{
		clearScreen();
		form.setMode(FormMode.VIEW);
		form.recbrOPDInvestigations().setEnabled(true);
		
		form.grdInvestigations().getRows().clear();
		form.grdInvestigations().setValue(null);	
		
		//for rie
		if(form.getLocalContext().getvoInvestigationIsNotNull())
			form.getLocalContext().setvoInvestigation(domain.getInvestigation(form.getLocalContext().getvoInvestigation()));
		
		fillRecordBrowser();
	}

	private void fillRecordBrowser()
	{
		form.recbrOPDInvestigations().clear();
		
		CareContextShortVoCollection voCareContextShortColl = domain.listInvestigationsByCareContextShort(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		loadCareContextRecords(voCareContextShortColl);
		
		setRecordBrowser();
		browseRecord();
	}
	
	private void loadCareContextRecords(CareContextShortVoCollection voCareContextShortColl)
	{
		CareContextShortVo voSelectedCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		boolean selectedCareContextFound = false;
		
		for(int i=0; i<voCareContextShortColl.size(); i++)
		{
			CareContextShortVo voCareContextShort = voCareContextShortColl.get(i);
			if(voCareContextShort.getID_CareContext().equals(voSelectedCareContext.getID_CareContext()))
			{
				selectedCareContextFound = true;
				break;
			}
		}
		if(!selectedCareContextFound)
		{
			form.recbrOPDInvestigations().newRow(voSelectedCareContext, voSelectedCareContext.getRecordBrowserText(), Color.Green); // "Care Context: " + voSelectedCareContext.getStartDateTime() + " - " + voSelectedCareContext.getEpisodeOfCare().getResponsibleHCP() + " Contact Type: " + voSelectedCareContext.getContext(), Color.Green);
			form.recbrOPDInvestigations().setValue(voSelectedCareContext);
		}
		for(int i=0; i<voCareContextShortColl.size(); i++)
		{
			CareContextShortVo voCareContextShort = voCareContextShortColl.get(i);
			if(voCareContextShort.getID_CareContext().equals(voSelectedCareContext.getID_CareContext()))
			{
				selectedCareContextFound = true;
				loadCareContextIntoRecordBrowser(voCareContextShort, Color.Green);
				form.recbrOPDInvestigations().setValue(voCareContextShort);
			}
			else
			{
				loadCareContextIntoRecordBrowser(voCareContextShort, null);
			}
		}
	}

	private void loadCareContextIntoRecordBrowser(CareContextShortVo voCareContextShort, Color activeColor)
	{
		//loads the CareContext records
		if(voCareContextShort != null)
		{
			form.recbrOPDInvestigations().newRow(voCareContextShort, voCareContextShort.getRecordBrowserText(), activeColor);    //"Care Context: " + voCareContextShort.getStartDateTime() + " - " + voCareContextShort.getEpisodeOfCare().getResponsibleHCP() + " Contact Type: " + voCareContextShort.getContext(), activeColor);
		}
	}
	
	private void browseRecord()
	{
		updateBrowseInformation();

		if(form.recbrOPDInvestigations().getValue() != null)
		{			
			form.getLocalContext().setvoInvestigationColl(domain.listInvestigation((CareContextLiteVo) form.recbrOPDInvestigations().getValue()));
			populateScreenFromData();
		}
		checkRecordIsEditable();
	}

	private void checkRecordIsEditable()
	{
		if(form.recbrOPDInvestigations().getValue() != null)
		{
			if(form.recbrOPDInvestigations().getValue() instanceof CareContextShortVo)
			{
				CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrOPDInvestigations().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()))
				{
					form.btnNew().setVisible(true);
					form.btnNew().setEnabled(true);
					form.btnUpdate().setVisible(true);
					form.btnUpdate().setEnabled(false);
				}
				else
				{
					form.btnNew().setVisible(false);
					form.btnNew().setEnabled(false);
					form.btnUpdate().setVisible(false);
					form.btnUpdate().setEnabled(false);
				}
			}
			else
			{
				ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
				ClinicalContactShortVo voSelectedClinicalContact = (ClinicalContactShortVo) form.recbrOPDInvestigations().getValue();
				if(voCurrentClinicalContact != null)
				{
					if(voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
					{
						form.btnNew().setVisible(true);
						form.btnNew().setEnabled(true);
					}
					else
						activateButtons(false);
				}
				else
					activateButtons(false);
			}
		}
	}

	private void updateBrowseInformation()
	{
		form.lblBrowser().setValue(form.recbrOPDInvestigations().getRecordState("Assessment", "Assessments"));
	}

	
	private void setRecordBrowser()
	{
		//after an update need to set the record browser to display the updated record
		if(form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			form.recbrOPDInvestigations().setValue(form.getLocalContext().getUpdatedInstance());
	
			browseRecord();
		}
	}

	private void populateScreenFromData() 
	{
		InvestigationsVoCollection voColl = new InvestigationsVoCollection();
		form.grdInvestigations().getRows().clear();
		clearScreen();
		
		voColl = domain.listInvestigation((CareContextRefVo) form.recbrOPDInvestigations().getValue());
		
		if (voColl == null || voColl.size() <= 0)
			return;
		
		GenForm.grdInvestigationsRow row = null;
		for(int i=0;i<voColl.size();i++)
		{
			InvestigationsVo voInvestigation = voColl.get(i);
			row = form.grdInvestigations().getRows().newRow();

			row.setValue(voColl.get(i));
			if(voInvestigation.getInvestigation() != null)
				row.setColInvestigation(voInvestigation.getInvestigation().toString());
			if(voInvestigation.getDateComplete() != null)
				row.setColDateComplete(voInvestigation.getDateComplete());
			if(voInvestigation.getDateResult() != null)
				row.setColDateResult(voInvestigation.getDateResult());
			if(voInvestigation.getResultDetails() != null)
				row.setColResult(voInvestigation.getResultDetails().toString());
		}
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
		form.setMode(FormMode.VIEW);
		form.recbrOPDInvestigations().setEnabled(true);
	}
	
	private void clearScreen() 
	{
		form.customControlAuthoringInfo().setValue(null);
		form.cmbInvestigationName().setValue(null);
		form.dteComplete().setValue(null);
		form.dteResult().setValue(null);
		form.textBoxResult().setValue(null);
	}
	
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		clearScreen();
		setDefaultValues();
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		enableControls(true);
		form.getLocalContext().setvoInvestigation(null);
	}


	private void enableControls(boolean bEnable) 
	{
		form.setcustomControlAuthoringInfoEnabled(bEnable);
		form.cmbInvestigationName().setEnabled(bEnable);
	}


	private void setDefaultValues() 
	{
		form.customControlAuthoringInfo().initializeComponent();
	}


	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		InvestigationsVo voInvestigation = form.getLocalContext().getvoInvestigation();
		if (voInvestigation == null)
		{
			voInvestigation = new InvestigationsVo();
		}
				
		voInvestigation.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
		voInvestigation.setInvestigation(form.cmbInvestigationName().getValue());
		voInvestigation.setDateComplete(form.dteComplete().getValue());
		voInvestigation.setDateResult(form.dteResult().getValue());
		voInvestigation.setResultDetails(form.textBoxResult().getValue());
		voInvestigation.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		ArrayList screenErrors = new ArrayList();
		
		if(form.customControlAuthoringInfo()!=null)
			if (form.customControlAuthoringInfo().getValue()==null)
				screenErrors.add("AuthoringInformation is mandatory.");
		

		if(form.dteComplete().getValue()!=null 
				&& form.dteComplete().getValue().isGreaterThan(new Date()))
			screenErrors.add("'Date Complete' cannot be in the future.");
		
		if(form.dteResult().getValue()!=null 
				&& form.dteResult().getValue().isGreaterThan(new Date()))
			screenErrors.add("'Date Result' cannot be in the future.");
		
		String[] errors = voInvestigation.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, errors);
		
		if(arrScreenAndVoErrors.length != 0)
		{
			engine.showErrors("Validation Errors", arrScreenAndVoErrors);
			return;
		}
		
		try 
		{
			domain.saveInvestigationDetails(voInvestigation);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}

		open();
		form.setMode(FormMode.VIEW);
	}
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;
		
		if(arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);
			
			int i=0;	
			for(int p=screenErrors.size();p<arrAllErrors.length;p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}	
		else
		{
			arrAllErrors = new String[screenErrors.size()];		
			
			for(int i=0;i<screenErrors.size();i++)
				arrAllErrors[i] = (String)screenErrors.get(i);	
		}	
		
		return arrAllErrors;
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
		enableControls(false);
	}

	protected void onGrdInvestigationsSelectionChanged() throws PresentationLogicException 
	{
		clearScreen();
		form.getLocalContext().setvoInvestigation(form.grdInvestigations().getValue());
		populateInvestigationDetails(form.grdInvestigations().getValue());
		checkRecordIsEditableForUpdate();
	}

	private void checkRecordIsEditableForUpdate()
	{
		if(form.recbrOPDInvestigations().getValue() != null)
		{
			if(form.recbrOPDInvestigations().getValue() instanceof CareContextShortVo)
			{
				CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrOPDInvestigations().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()))
				{
					form.btnUpdate().setVisible(true);
					form.btnUpdate().setEnabled(true);
				}
				else
				{
					form.btnUpdate().setVisible(false);
					form.btnUpdate().setEnabled(false);
				}
			}
		}
	}

	private void populateInvestigationDetails(InvestigationsVo vo) 
	{
		if(vo != null)
		{
			form.getLocalContext().setvoInvestigation(vo);
			form.btnUpdate().setEnabled(true);
			form.btnUpdate().isEnabled();
			form.btnUpdate().isVisible();
			
				
			if (vo.getAuthoringInformationIsNotNull())
				form.customControlAuthoringInfo().setValue(vo.getAuthoringInformation());
					
			if (vo.getInvestigation() != null)
				form.cmbInvestigationName().setValue(vo.getInvestigation());
			if (vo.getDateComplete() != null)
				form.dteComplete().setValue(vo.getDateComplete());
			if (vo.getDateResult() != null)
				form.dteResult().setValue(vo.getDateResult());
			if (vo.getResultDetails() != null)
				form.textBoxResult().setValue(vo.getResultDetails());
		}
	}
	
	private void activateButtons(boolean bEnabled)
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.btnNew().setVisible(bEnabled);
			form.btnNew().setEnabled(bEnabled);
			if (form.grdInvestigations().getValue() != null)
			{
				form.btnUpdate().setVisible(bEnabled);
				form.btnUpdate().setEnabled(bEnabled);
			}
		}
	}

	protected void onRecbrOPDInvestigationsValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
}
