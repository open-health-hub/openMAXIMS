//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.34 build 2083.15190)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.questionanswer;

import java.util.ArrayList;

import ims.core.forms.questionanswer.GenForm.grdAnswerTypeRow;
import ims.core.forms.questionanswer.GenForm.grdTaxonomyRow;
import ims.vo.LookupInstVo;
import ims.core.vo.QuestionAnswerTypeVo;
import ims.core.vo.QuestionAnswerTypeVoCollection;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.QuestionClassification;
import ims.core.vo.lookups.QuestionClassificationCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.IntRange;

public class Logic extends BaseLogic
{
	// ------ protected methods --------------
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		clearControls();
		setContextMenu();
		loadClassificationTree();
		loadCombos();
		loadData();
		if(form.getMode().equals(FormMode.EDIT))
			form.txtText().setFocus();
	}

	protected void onGrdAnswerTypeSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onChkIsQuestionValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdAnswerType().getRows().clear();
		if(form.chkIsQuestion().getValue() == false)
		{
			if(form.grdAnswerType().getRows().size() > 0)
			{
				form.grdAnswerType().getRows().clear(); 
			}
		}
		setControlsStatus();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(doSave() == false)
			return;
		
		closePage();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		closePage();
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			//Answer Type
			case GenForm.ContextMenus.GenericGrid.Add:
				addAnswerType();
				break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				deactivateAnswerType();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateAnswerType();
				break;
			case GenForm.ContextMenus.GenericGrid.MoveUp:
				moveUp();
				break;
			case GenForm.ContextMenus.GenericGrid.MoveDown:
				moveDown();
				break;
			//Taxonomy Map
			case GenForm.ContextMenus.TaxonomyMap.Add:
				addTaxonomy();
				break;
			case GenForm.ContextMenus.TaxonomyMap.Remove:
				removeTaxonomy();
				break;
			//Classification Tree
			case GenForm.ContextMenus.TreeMenu.ExpandAll:
				expandAllClassification();
				break;
			case GenForm.ContextMenus.TreeMenu.CollapseAll:
				collapseAllClassification();
				break;
		}
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		setDialogViewMode(null);
		form.btnCancel().setText("Cancel");
		form.getLocalContext().setInactiveAnswerTypes(null);
		engine.setCaption(getQuestionOrInfoTitle());
		setScreenMode();
	}
	protected void onFormModeChanged() 
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(isDialogViewMode())
			{
				if(isRecordInactive())
					form.btnUpdate().setEnabled(false);
				else
					form.btnUpdate().setVisible(true);
			}
			else
				form.btnUpdate().setVisible(false);
		}
		enableNewLookupContextMenu();
		enableTaxonomyContextMenu();
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.TaxonomySearch) && result.equals(DialogResult.OK))
		{
			TaxonomyMap voTaxonomy = form.getGlobalContext().Core.getTaxonomyMap();
			if(voTaxonomy != null)
			{
				//Check for duplicates
				if(form.grdTaxonomy().getValues().indexOf(voTaxonomy) < 0)
					setTaxonomyGridRowData(form.grdTaxonomy().getRows().newRow(true), form.getGlobalContext().Core.getTaxonomyMap());
			}
		}
		if(formName.equals(form.getForms().Core.QuestionAnswerType) && result.equals(DialogResult.OK))
		{
			QuestionAnswerTypeVo voAnswType = form.getGlobalContext().Core.getQuestionAnswerType();
			if(voAnswType != null)
			{
				GenForm.grdAnswerTypeRow row = form.grdAnswerType().getRowByValue(voAnswType);
				if(row == null)
					row = form.grdAnswerType().getRows().newRow(true);   
				setAnswerGridRowData(row, voAnswType);
				enableContextMenu();
			}
		}
	}

	protected void onGrdTaxonomySelectionChanged() throws PresentationLogicException 
	{
		enableTaxonomyContextMenu();
	}
	//---- end protected methods --------
	

	//---- private methods --------------
	private void loadQuestion() 
	{
		form.grdAnswerType().getRows().clear();
		
		QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
		if(voQInfo != null)
		{
			//Populated binded controls
			super.populateScreenFromData(voQInfo);
			form.cmbStatus().setValue(voQInfo.getStatus());
			loadClassification(voQInfo);
			populateTaxonomy(voQInfo);
			populateAnswerTypes(voQInfo);
			form.irbAgeRange().setValue(new IntRange(voQInfo.getAgeRangeMin(), voQInfo.getAgeRangeMax()));
		}
	}
	private void loadClassification(QuestionInformationVo voQInfo) 
	{
		if(voQInfo != null && voQInfo.getClassificationIsNotNull())
		{
			QuestionClassification qClassInfo;
			TreeNode node;
			for(int j=0; j<voQInfo.getClassification().size(); j++)
			{
				qClassInfo = voQInfo.getClassification().get(j);
				for(int i=0; i<form.treClassification().getNodes().size(); i++)
				{
					node = form.treClassification().getNodes().get(i);
					if(qClassInfo.equals(node.getValue()))
						node.setChecked(true);

					if(node.getNodes() != null && node.getNodes().size() > 0)
						setClassificationValue(qClassInfo, node);
				}
			}
		}
	}
	
	private void setClassificationValue(QuestionClassification voQInfo, TreeNode parentNode) 
	{
		TreeNode childNode;
		for(int i=0; parentNode != null && i<parentNode.getNodes().size(); i++)
		{
			childNode = parentNode.getNodes().get(i);
			if(voQInfo.equals(childNode.getValue()))
				childNode.setChecked(true);
			if(childNode.getNodes() != null && childNode.getNodes().size() > 0)
				setClassificationValue(voQInfo, childNode);
		}
	}

	private boolean isNewQuestion()
	{
		return form.getGlobalContext().Admin.getSelectedQuestionIsNotNull() && !form.getGlobalContext().Admin.getSelectedQuestion().getID_QuestionInformationIsNotNull();
	}
	private void setControlsStatus()
	{
		setGridLookupInstanceStat();
	}
	private void setGridLookupInstanceStat() 
	{
		boolean gridIsEnabled = form.chkIsQuestion().getValue();
		form.grdAnswerType().setReadOnly(!gridIsEnabled);
		form.grdAnswerType().setEnabled(gridIsEnabled);
		enableNewLookupContextMenu();
	}

	private void addAnswerType()
	{
		QuestionAnswerTypeVo voQAnswer = new QuestionAnswerTypeVo();
		voQAnswer.setActiveStatus(new Boolean(true));
		form.getGlobalContext().Core.setQuestionAnswerType(voQAnswer);
		form.getLocalContext().setIsNewAnwerType(new Boolean(true));
		engine.open(form.getForms().Core.QuestionAnswerType);
	/*	if(form.qmbLookupType().getValue() == null)
		{
			engine.showMessage("Please select a Lookup Type first");
			form.qmbLookupType().setFocus();
			return;
		}*/
		/*grdAnswerTypeRow row = form.grdAnswerType().getRows().newRow(true);
		form.grdAnswerType().setEnabled(true);
		form.grdAnswerType().setReadOnly(false);
		row.setReadOnly(false);
		enableContextMenu();*/
	}
	private void updateAnswerType() 
	{
		form.getGlobalContext().Core.setQuestionAnswerType(form.grdAnswerType().getValue());
		form.getLocalContext().setIsNewAnwerType(new Boolean(false));
		engine.open(form.getForms().Core.QuestionAnswerType);
	}
	private void deactivateAnswerType()
	{
		QuestionAnswerTypeVo voQAnsType = form.grdAnswerType().getValue();
		//Add it to the Inactive only if was saved
		if(voQAnsType != null && voQAnsType.getID_QuestionAnswerTypeIsNotNull())
		{
			voQAnsType.setActiveStatus(new Boolean(false));
			addLookupToInactiveList(voQAnsType);
		}
		form.grdAnswerType().removeSelectedRow();			
		enableContextMenu();
	}
	private void addLookupToInactiveList(QuestionAnswerTypeVo voQAnsType) 
	{
		QuestionAnswerTypeVoCollection voColl = form.getLocalContext().getInactiveAnswerTypesIsNotNull()?form.getLocalContext().getInactiveAnswerTypes():new QuestionAnswerTypeVoCollection();
		voColl.add(voQAnsType);
		form.getLocalContext().setInactiveAnswerTypes(voColl);
	}

	private void moveDown() 
	{
		form.grdAnswerType().moveDown();
		enableContextMenu();
	}
	private void moveUp() 
	{
		form.grdAnswerType().moveUp();
		enableContextMenu();
	}

	private boolean doSave() 
	{
		if(checkMandatory() == false)
			return false;
		
		QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestionIsNotNull()?form.getGlobalContext().Admin.getSelectedQuestion():new QuestionInformationVo();
		//Use a backup vo as we need access to the Lookup Instance Collection which is not linked to the vo
		voQInfo = super.populateDataFromScreen(voQInfo);

		//Status
		voQInfo.setStatus(form.cmbStatus().getValue());
		//AnswerType
		voQInfo.setAnswerTypes(getAnswerTypes());
		//Classification
		voQInfo.setClassification(getClassification());
		//Age Range
		if(form.irbAgeRange().getValue() != null)
		{
			voQInfo.setAgeRangeMin(form.irbAgeRange().getValue().getMin());
			voQInfo.setAgeRangeMax(form.irbAgeRange().getValue().getMax());
		}
		//Get Taxonomy
		voQInfo.setTaxonomyMap(getTaxonomy());
		
		String[] arrErrors = voQInfo.validate();
		if(arrErrors == null)
		{
			try 
			{
				voQInfo = domain.saveQuestion(voQInfo);
			}
			catch (StaleObjectException e) 
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}			
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;
		}

		form.getGlobalContext().Admin.setSelectedQuestion(voQInfo);
		
		/*if(doSaveLookupInstances() == false)
			return false;*/
		
		return true;
	}
	private TaxonomyMapCollection getTaxonomy() 
	{
		TaxonomyMapCollection mapColl = new TaxonomyMapCollection();
		for(int i=0; i<form.grdTaxonomy().getRows().size(); i++)
			mapColl.add(form.grdTaxonomy().getRows().get(i).getValue());
		return mapColl;
	}

	private QuestionAnswerTypeVoCollection getAnswerTypes() 
	{
		//Get the active ones - from the grid 
		QuestionAnswerTypeVoCollection voColl = form.grdAnswerType().getValues();
		//Add the inactive ones
		QuestionAnswerTypeVoCollection voInactiveColl = form.getLocalContext().getInactiveAnswerTypes();
		QuestionAnswerTypeVo voQAnswType;
		if(voInactiveColl != null)
		{
			for (int i = 0; i < voInactiveColl.size(); i++) 
			{
				voQAnswType = voInactiveColl.get(i);
				voColl.add(voQAnswType);
			}
		}
		return voColl;
	}

	/*private boolean doSaveLookupInstances() 
	{
		LookupTypeCacheVoCollection voColl = form.getGlobalContext().Core.getLookupTypeCache();
		
		removeUnusedLkpTypes(voColl);
				
		for (int i = 0; voColl != null && i < voColl.size(); i++) 
		{
			if(voColl.get(i).getLookupTypeIsNotNull())
			{
				for (int j = 0; voColl.get(i).getLookupInstancesIsNotNull() && j < voColl.get(i).getLookupInstances().size(); j++) 
				{
					if(saveLookupInstance(voColl.get(i).getLookupType(), voColl.get(i).getLookupInstances().getIndex(j)) == false)
					{
						//skip the save for the same LookupType if one fails
						break;
					}
				}
			}
		}
	
		return true;
	}*/

/*	private void removeUnusedLkpTypes(LookupTypeCacheVoCollection voColl) 
	{
		//Save only the lookups having an Lookup Type that has been saved (remove the lookup instances from
		//the cache where it's lookup type have not been saved
		boolean lkpTypeUsed = true;
		while(lkpTypeUsed)
		{
			lkpTypeUsed = false;
			for (int i = 0; voColl != null && i < voColl.size(); i++) 
			{
				if(isLookupTypeUsed(voColl.get(i).getLookupType()) == false)
				{
					voColl.remove(i);
					lkpTypeUsed = true;
					break;
				}
			}
		}
	}*/

	/*private boolean isLookupTypeUsed(LookupTypeVo lookupType) 
	{
		QuestionInformationVo voQI = form.getGlobalContext().Admin.getSelectedQuestion();
		if(voQI != null && lookupType != null)
		{
			for(int i=0; voQI.getAnswerTypesIsNotNull() && i<voQI.getAnswerTypes().size(); i++)
			{
				if(lookupType.getId() == voQI.getAnswerTypes().get(i).getLookupType().getId())
					return true;
			}
		}
		return false;
	}*/

	/*private boolean saveLookupInstance(LookupTypeVo lookupType, LookupInstVo voLkpInst) 
	{
		if(lookupType == null)
			return false;
		
		String[] errors = voLkpInst.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//Clear the temporary negative id
		if(voLkpInst.getId() <0)
			voLkpInst.setId(0);
		
		try 
		{
			domain.saveLookupInstance(lookupType, voLkpInst);
		} 
		catch(StaleObjectException ex) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}		
		catch (DomainInterfaceException ex)
		{
			engine.showMessage(ex.getMessage());
			return false;
		}	
		return true;
	}
*/
	private boolean checkMandatory() 
	{
		/*//Check the classification
		if(isClassificationSelected() == false)
		{
			engine.showMessage("Please select a Classification");
			return false;
		}*/
		
/*s*/
		
/*		//Check if we have lookup instances then lookup type has to be entered
		if(form.grdAnswerType().getRows().size() > 0 && form.qmbLookupType().getValue() == null)
		{
			engine.showMessage("Please select Lookup Type");
			form.qmbLookupType().setFocus();
			return false;
		}*/
		
		/*//Check if there is a new record then the status should not be inactive
		PreActiveActiveInactiveStatus status = form.cmbStatus().getValue();
		if(isNewQuestion() && status != null && status.equals(PreActiveActiveInactiveStatus.INACTIVE))
		{
			engine.showMessage("Status cannot be set to inactive for a new record.");
			form.cmbStatus().setFocus();
			return false;
		}
		
		//For an active record we should not inactivate it
		if(status != null && status.equals(PreActiveActiveInactiveStatus.INACTIVE) && isRecordActive())
		{
			engine.showMessage("Status cannot be changed to inactive for an active record.");
			form.cmbStatus().setFocus();
			return false;
		}*/
			
		return true;
	}

	/*private boolean isClassificationSelected() 
	{
		TreeNode parentNode, childNode;
		for(int i=0; i<form.treClassification().getNodes().size(); i++)
		{
			parentNode = form.treClassification().getNodes().get(i);
			if(parentNode.isChecked())
				return true;
			for(int j=0; parentNode != null && j<parentNode.getNodes().size(); j++)
			{
				childNode = parentNode.getNodes().get(j);
				if(childNode.isChecked())
					return true;
			}
		}
		return false;
	}*/

	private void loadData() 
	{
		if(isNewQuestion() == false)
		{
			engine.setCaption(getQuestionOrInfoTitle());
			loadQuestion();
			setScreenMode();
		}
		else
		{
			engine.setCaption("Add New Question / Information");
			form.chkIsQuestion().setValue(true);
			setScreenMode();
		}
	}
	private String getQuestionOrInfoTitle() 
	{
		String question = (isDialogViewMode()?"View ":"Edit ") + (isQuestion()?"Question":"Information");
		return question;
	}

	private void setScreenMode() 
	{
		if(form.getGlobalContext().Admin.getSelectedQuestionIsNotNull())
		{
			//QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
			PreActiveActiveInactiveStatus status = form.cmbStatus().getValue();
			if(status != null)
			{
				if(status.equals(PreActiveActiveInactiveStatus.INACTIVE) || isDialogViewMode())
				{
					form.setMode(FormMode.VIEW);
					form.btnCancel().setText("Ok");
				}
				else if(status.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					form.setMode(FormMode.EDIT);
					if(isNewQuestion() == false)
					{
						enableEditableControls(false);
					}
					setControlsStatus();
					enableUpdatableControls(true);
				}
				else
				{
					form.setMode(FormMode.EDIT);
					enableEditableControls(true);
					setControlsStatus();
					enableUpdatableControls(true);
				}
			}	
			else
			{
				form.setMode(FormMode.EDIT);
				enableEditableControls(true);
				enableUpdatableControls(true);
			}
		}
	}

	private void enableUpdatableControls(boolean value) 
	{
		form.cmbStatus().setEnabled(value);
		form.cmbGenre().setEnabled(value);
		form.irbAgeRange().setEnabled(value);
		form.treClassification().setEnabled(value);
	}

	private void enableEditableControls(boolean value) 
	{
		form.txtText().setEnabled(value);
		form.txtShortText().setEnabled(value);
		form.chkIsQuestion().setEnabled(value);
	}

	private void setContextMenu() 
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Answer Type");
		form.getContextMenus().getGenericGridRemoveItem().setText("Deactivate Answer Type");
		form.getContextMenus().getTreeMenuExpandAllItem().setVisible(true);
		form.getContextMenus().getTreeMenuCollapseAllItem().setVisible(true);
	}
	private void clearControls() 
	{
		super.clearScreen();
		form.grdAnswerType().getRows().clear();
		form.irbAgeRange().setValue(new IntRange());
		form.grdTaxonomy().getRows().clear();
		form.grdAnswerType().getRows().clear();
	}
	private void loadClassificationTree() 
	{
		QuestionClassificationCollection classColl = LookupHelper.getQuestionClassification(domain.getLookupService());
		form.treClassification().clear();
		//Load top parents
		LookupInstVo[] roots = classColl.getRoots();
		for(int i=0; roots != null && i<roots.length; i++)
		{
			TreeNode node = form.treClassification().getNodes().add(roots[i], roots[i].toString());
			node.setExpanded(true);
			node.setCheckBoxVisible(false);
			loadChildren(node, roots[i]);
		}
	}
	private void loadChildren(TreeNode parentNode, LookupInstVo parent) 
	{
		ArrayList list = parent.getChildInstances();
		QuestionClassification child;
		TreeNode childNode;
		for(int i=0; list != null && i<list.size(); i++)
		{
			child = (QuestionClassification)list.get(i);
			childNode = parentNode.getNodes().add(child, child.toString());
			childNode.setCheckBoxVisible(true);
			loadChildren(childNode, child);
		}
	}
	private QuestionClassificationCollection getClassification() 
	{
		QuestionClassificationCollection coll = new QuestionClassificationCollection();
		TreeNode parentNode, childNode;
		for(int i=0; i<form.treClassification().getNodes().size(); i++)
		{
			parentNode = form.treClassification().getNodes().get(i);
			if(parentNode.isChecked())
				coll.add((QuestionClassification)parentNode.getValue());
			for(int j=0; parentNode != null && j<parentNode.getNodes().size(); j++)
			{
				childNode = parentNode.getNodes().get(j);
				if(childNode.isChecked())
					coll.add((QuestionClassification)childNode.getValue());
			}
		}
		return coll;
	}
/*	private Color getLkpColor(Boolean active) 
	{
		return active != null && active.booleanValue()==false?Color.LightCoral:Color.Default;
	}*/
	
	private void populateTaxonomy(QuestionInformationVo voQInfo) 
	{
		for(int i=0; voQInfo.getTaxonomyMapIsNotNull() && i<voQInfo.getTaxonomyMap().size(); i++)
		{
			setTaxonomyGridRowData(form.grdTaxonomy().getRows().newRow(), voQInfo.getTaxonomyMap().get(i));
		}
	}

	private void populateAnswerTypes(QuestionInformationVo voQInfo) 
	{
		form.grdAnswerType().getRows().clear();
		for(int i=0; voQInfo.getAnswerTypesIsNotNull() && i<voQInfo.getAnswerTypes().size(); i++)
		{
			//Add the active only
			if(voQInfo.getAnswerTypes().get(i).getActiveStatusIsNotNull() && voQInfo.getAnswerTypes().get(i).getActiveStatus().booleanValue())
				setAnswerGridRowData(form.grdAnswerType().getRows().newRow(), voQInfo.getAnswerTypes().get(i));
		}
	}
	
	private void setAnswerGridRowData(grdAnswerTypeRow row, QuestionAnswerTypeVo vo) 
	{
		if(row != null && vo != null)
		{
			row.setColAnswerType(vo.getAnswerTypeIsNotNull()?vo.getAnswerType().toString():"");
			row.setColMandatory(vo.getIsMandatoryIsNotNull() && vo.getIsMandatory().booleanValue()?"Yes":"No");
			if(vo.getActiveStatus() == null || vo.getActiveStatus().booleanValue() == false)
				row.setBackColor(Color.LightSalmon);
			row.setValue(vo);
		}
	}
	
	private void setTaxonomyGridRowData(grdTaxonomyRow row, TaxonomyMap taxonomyVo) 
	{
		if(row != null && taxonomyVo != null)
		{
			row.setColumnName(taxonomyVo.getTaxonomyName().getText());
			row.setColumnExtCode(taxonomyVo.getTaxonomyCode());
			row.setValue(taxonomyVo);
		}
	}

	private boolean isDialogViewMode()
	{
		return form.getGlobalContext().Core.getQuestionEditViewModeIsNotNull() && form.getGlobalContext().Core.getQuestionEditViewMode().booleanValue(); 
	}
	private void setDialogViewMode(Boolean value)
	{
		form.getGlobalContext().Core.setQuestionEditViewMode(value);
	}
	private void closePage() 
	{
		//TODO - when OnFormClosing is fired move this Context Clear there
		form.getGlobalContext().Core.setQuestionEditViewMode(null);
		if(form.getMode().equals(FormMode.EDIT))
			form.setMode(FormMode.VIEW);
		//engine.close(result);
		engine.open(form.getForms().Core.QuestionList);
	}
	private void loadCombos()
	{
		//Status
		form.cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection statusColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for(int i=0; statusColl != null && i<statusColl.size(); i++)
		{
			PreActiveActiveInactiveStatus status = statusColl.get(i);
			if(isNewQuestion())
			{
				//When we have a new Question - Remove Inactive entry (cannot create a new Inactive Record)
				if(status.equals(PreActiveActiveInactiveStatus.INACTIVE))
					continue;
			}
			else
			{
				//When record is active don't allow to Preactivate it
				if(isRecordActive() && status.equals(PreActiveActiveInactiveStatus.PREACTIVE))
					continue;
			}
			
			form.cmbStatus().newRow(status, status.toString());
		}
	}
	private void addTaxonomy() 
	{
		engine.open(form.getForms().Core.TaxonomySearch);	
	}
	private void removeTaxonomy()
	{
		form.grdTaxonomy().removeSelectedRow();
	}
	private void collapseAllClassification() 
	{
		collapseNodes(form.treClassification().getNodes());
	}
	private void collapseNodes(TreeNodeCollection nodes) 
	{
		for(int i=0; nodes != null && i<nodes.size(); i++)
		{
			TreeNode node = nodes.get(i);
			if(node.isExpanded())
				node.setExpanded(false);
			if(node.getNodes() != null && node.getNodes().size() > 0)
				collapseNodes(node.getNodes());
		}
	}

	private void expandAllClassification() 
	{
		expandNodes(form.treClassification().getNodes());
	}
	private void expandNodes(TreeNodeCollection nodes) 
	{
		for (int i = 0; nodes != null && i < nodes.size(); i++) 
		{
			TreeNode node = nodes.get(i);
			if(node.isExpanded() == false)
				node.setExpanded(true);
			if(node.getNodes() != null && node.getNodes().size() > 0)
				expandNodes(node.getNodes());
		}
	}

	private void enableContextMenu() 
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		int rowIndex = form.grdAnswerType().getSelectedRowIndex();
		form.getContextMenus().getGenericGridRemoveItem().setVisible(editMode && rowIndex>= 0);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(editMode && rowIndex >=0);
		form.getContextMenus().getGenericGridMoveUpItem().setVisible(editMode && form.grdAnswerType().canMoveCurrentUp());
		form.getContextMenus().getGenericGridMoveDownItem().setVisible(editMode && form.grdAnswerType().canMoveCurrentDown());
	}
	private void enableNewLookupContextMenu()
	{
		boolean enable = form.getMode().equals(FormMode.EDIT) && form.chkIsQuestion().getValue();
		form.getContextMenus().getGenericGridAddItem().setVisible(enable);
	}
	private void enableTaxonomyContextMenu()
	{
		boolean enable = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().getTaxonomyMapAddItem().setVisible(enable);
		form.getContextMenus().getTaxonomyMapRemoveItem().setVisible(enable && form.grdTaxonomy().getSelectedRowIndex() >=0);
	}
	private boolean isRecordInactive() 
	{
		QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
		return voQInfo != null && voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}
	private boolean isRecordActive() 
	{
		QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
		return voQInfo != null && voQInfo.getStatusIsNotNull() && voQInfo.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}
	private boolean isQuestion()
	{
		QuestionInformationVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
		return voQInfo != null && voQInfo.getIsQuestionIsNotNull() && voQInfo.getIsQuestion().booleanValue();
	}
}
