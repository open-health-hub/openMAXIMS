//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ancuta Ciubotaru using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.reportstomodalityconfigform;

import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.core.forms.reportstomodalityconfigform.GenForm.grdListRow;
import ims.core.vo.ModalityReportsVo;
import ims.core.vo.ModalityReportsVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	@SuppressWarnings("unused")
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateControls();
		enableControlButtons();
	}
	
	private void populateControls()
	{
		ServiceLiteVoCollection coll = domain.listModality();
		
		form.cmbModality().clear();
		
		for (ServiceLiteVo s : coll)
		{
			form.cmbModality().newRow(s, s.getServiceName());
		}
	}

	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ModalityReportsVo val = form.grdList().getValue();
		
		if(val == null)
			return;
		
		form.getGlobalContext().Core.setModalityReport(val);
		engine.open(form.getForms().Core.ModalityReportDialog);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setModalityReport(null);

		engine.open(form.getForms().Core.ModalityReportDialog);
	}
	
	@Override
	protected void onQmbReportsTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbReports().clear();
		
		ReportTemplateLiteVoCollection coll = domain.listTemplates('%' + value + '%', form.chkDFT().getValue());

		for(ReportTemplateLiteVo item : coll)
		{
			form.qmbReports().newRow(item, item.getName());
		}
		
		if(coll.size() == 1)
		{
			form.qmbReports().setValue(coll.get(0));
		}
		else if(coll.size() > 1)
		{
			form.qmbReports().showOpened();
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.ModalityReportDialog) /* && result.equals(DialogResult.OK)*/)
		{
			search();
			enableControlButtons();
		}
	}

	private void search()
	{
		ModalityReportsVoCollection coll = null;
		
		try
		{
			coll = domain.listModalityReports(form.qmbReports().getValue(), form.cmbModality().getValue(), form.chkDFT().getValue());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage("Error getting modality reports: " + e.toString());
			return;
		}
		
		populateGrid(coll);
	}

	private void populateGrid(ModalityReportsVoCollection coll)
	{
		form.grdList().getRows().clear();
		
		//WDEV-17781
		if (coll == null || coll.size() == 0)
		{
			engine.showMessage("No records found.");
			return;
		}
		
		for(ModalityReportsVo item : coll)
		{
			grdListRow row = form.grdList().getRows().newRow();
			
			row.setclmnModality(item.getModality().getServiceName());
			row.setclmnReport(item.getTemplate().getName());
			row.setclmnRecording(item.getSysInfo().getCreationUser());
			row.setclmnRecordingDate(item.getSysInfo().getCreationDateTime() != null ? item.getSysInfo().getCreationDateTime().toString() : "");
			row.setclmnUpdating(item.getSysInfo().getLastupdateUser());
			row.setclmnUpdatingDate(item.getSysInfo().getLastupdateDateTime() != null ? item.getSysInfo().getLastupdateDateTime().toString() : "");
			
			row.setValue(item);
		}
	}

	@Override
	protected void onGrdListSelectionChanged() throws PresentationLogicException
	{
		enableControlButtons();
	}
	
	private void enableControlButtons()
	{
		boolean enable = form.grdList().getValue() instanceof ModalityReportsVo;
		
		form.btnEdit().setEnabled(enable);
		
		form.getContextMenus().Core.getReportsToModalityNEWItem().setVisible(true);
		form.getContextMenus().Core.getReportsToModalityEDITItem().setVisible(enable);
		form.getContextMenus().Core.getReportsToModalityREMOVEItem().setVisible(enable);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.ReportsToModality.NEW :
				onBtnNewClick();
			break;

			case GenForm.ContextMenus.CoreNamespace.ReportsToModality.EDIT :
				onBtnEditClick();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.ReportsToModality.REMOVE :
				form.getLocalContext().setMessageBoxId(engine.showMessage("Are you sure you want to delete the selected record ?", "Delete confirmation", MessageButtons.YESNO));
			break;
		}
		
	}

	private void deleteCurrentRecord() throws PresentationLogicException
	{
		ModalityReportsVo val = form.grdList().getValue();
		
		if(val == null)
			return;
		
		try
		{
			domain.deleteRecord(val);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (Exception e)
		{
			//check to see if the record was deleted from another transaction
			if(e.getMessage().contains("No row with the given identifier exists:"))
			{
				engine.showMessage("The selected record was deleted from another transaction !"/* + e.getMessage()*/);
			}
			else
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
		
		onImbSearchClick();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
		enableControlButtons();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.qmbReports().clear();
		form.cmbModality().setValue(null);
		form.chkDFT().setValue(Boolean.FALSE);
		
		form.grdList().getRows().clear();
		enableControlButtons();
	}

	@Override
	protected void onChkDFTValueChanged() throws PresentationLogicException
	{
		form.qmbReports().clear();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(DialogResult.YES.equals(result) && form.getLocalContext().getMessageBoxIdIsNotNull() && messageBoxId == form.getLocalContext().getMessageBoxId())
		{
			deleteCurrentRecord();
		}
	}
	
}
