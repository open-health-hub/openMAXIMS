//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.adtdischargedialog;

import java.util.ArrayList;

import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args == null || args.length == 0 || !(args[0] instanceof InpatientEpisodeVo))
			throw new CodingRuntimeException("Discharge Dialog cannot be launched without being passed an Inpatient Episode");

		form.getLocalContext().setInpatEpis((InpatientEpisodeVo)args[0]);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errs = validateInputs();
		if (errs != null && errs.length > 0)
		{
			engine.showErrors(errs);
			return;			
		}
		
		PatientShort pat = form.getLocalContext().getInpatEpis().getPasEvent().getPatient();
		DischargedEpisodeVo disc = new DischargedEpisodeVo();
		disc.setDischargeDateTime(new DateTime(form.dteDisc().getValue(), form.timDisc().getValue()));
		
		errs = pat.validate();
		if (errs != null)
		{
			engine.showErrors(errs);
		}
		errs = disc.validate();
		if (errs != null)
		{
			engine.showErrors(errs);
		}
		try
		{
			domain.dischargePatient(pat, disc);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	private String[] validateInputs()
	{
		ArrayList<String> errs = new ArrayList<String>();
		if (form.dteDisc().getValue() == null)
			errs.add("Discharge Date must be specified.");
		
		return errs.toArray(new String[errs.size()]);
	}

}
