//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.questionlist;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Admin = new AdminContext(context);
		Core = new CoreContext(context);
	}
	public final class AdminContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private AdminContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getIsNewQuestionIsNotNull()
		{
			return !cx_AdminIsNewQuestion.getValueIsNull(context);
		}
		public Boolean getIsNewQuestion()
		{
			return (Boolean)cx_AdminIsNewQuestion.getValue(context);
		}
		public void setIsNewQuestion(Boolean value)
		{
			cx_AdminIsNewQuestion.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminIsNewQuestion = new ims.framework.ContextVariable("Admin.IsNewQuestion", "_cv_Admin.IsNewQuestion");
		public boolean getSelectedQuestionsIsNotNull()
		{
			return !cx_AdminSelectedQuestions.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationShortVoCollection getSelectedQuestions()
		{
			return (ims.core.vo.QuestionInformationShortVoCollection)cx_AdminSelectedQuestions.getValue(context);
		}
		public void setSelectedQuestions(ims.core.vo.QuestionInformationShortVoCollection value)
		{
			cx_AdminSelectedQuestions.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminSelectedQuestions = new ims.framework.ContextVariable("Admin.SelectedQuestions", "_cv_Admin.SelectedQuestions");
		public boolean getSelectedQuestionIsNotNull()
		{
			return !cx_AdminSelectedQuestion.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationVo getSelectedQuestion()
		{
			return (ims.core.vo.QuestionInformationVo)cx_AdminSelectedQuestion.getValue(context);
		}
		public void setSelectedQuestion(ims.core.vo.QuestionInformationVo value)
		{
			cx_AdminSelectedQuestion.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_AdminSelectedQuestion = new ims.framework.ContextVariable("Admin.SelectedQuestion", "_cv_Admin.SelectedQuestion");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getQuestionEditViewModeIsNotNull()
		{
			return !cx_CoreQuestionEditViewMode.getValueIsNull(context);
		}
		public Boolean getQuestionEditViewMode()
		{
			return (Boolean)cx_CoreQuestionEditViewMode.getValue(context);
		}
		public void setQuestionEditViewMode(Boolean value)
		{
			cx_CoreQuestionEditViewMode.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreQuestionEditViewMode = new ims.framework.ContextVariable("Core.QuestionEditViewMode", "_cv_Core.QuestionEditViewMode");

		private ims.framework.Context context;
	}

	public AdminContext Admin;
	public CoreContext Core;
}
