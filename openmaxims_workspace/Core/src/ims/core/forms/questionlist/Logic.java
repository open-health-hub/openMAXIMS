//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.30 build 2032.25533)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
/**
 * @author aursache@imsmaxims.com
 * The page is used as a dialog as well - in this case tabPageSelect is displayed and the dialog allows a question selection
 * This page has 3 tabs used for Searching "Search by text and Classification", "Search by Classification" and "Text Search"
 * but the last two are hidded by default, but they have functionality implemented.
 * Input:  - When dialog - it displays the selected Questions passed in "SelectedQuestions" context variable - see loadSelectedData()
 * Output: - The selected questions are stored in "SelectedQuestions" context variable (avoiding the duplicates)
 */

package ims.core.forms.questionlist;
import java.util.ArrayList;

import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsGrid;
import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsGrid;
import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsGrid;
import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSearchContainer.grdQuestionsRow;
import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSelectContainer.grdListedQuestionsRow;
import ims.core.forms.questionlist.GenForm.lyrTreesLayer.tabPageSelectContainer.grdSelectedQuestionsRow;
import ims.core.forms.questionlist.GenForm.lyrSearchLayer.tabPageTextClassContainer.GroupFilterEnumeration;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.QuestionClassification;
import ims.core.vo.lookups.QuestionClassificationCollection;
import ims.framework.Control;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.vo.LookupInstVo;
import ims.configuration.gen.ConfigFlag;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		loadContextMenu();
		loadClassificationTree();
		setDefaultStatus();
		loadSelectedData();
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.QuestionAnswer) && result.equals(DialogResult.OK))
		{
			refreshSelectedQuestion();
		}
	}
	private void refreshSelectedQuestion() 
	{
		QuestionInformationShortVo voQInfo = form.getGlobalContext().Admin.getSelectedQuestion();
		
		if(form.getGlobalContext().Admin.getIsNewQuestionIsNotNull() && form.getGlobalContext().Admin.getIsNewQuestion().booleanValue())
		{
			clearGrids();
			loadNewGridNodes(voQInfo);
		}
		else
		{
			if(isSearchCriteriaEntered())
			{
				//do a search again
				onImbSearchTextAndClass();
			}

			else
			{
				//Refresh only the things changed
				if(isDialog())
					refreshRow(form.lyrTrees().tabPageSelect().grdListedQuestions(), voQInfo);
				else	
					refreshRow(form.lyrTrees().tabPageSearch().grdQuestions(), voQInfo);
			}
			
			enableUpdateContextMenu(true);
		}
	}
	protected void onGrdQuestionsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableUpdateContextMenu(true);
	}
	protected void onGrdListedQuestionsSelectionChanged() throws PresentationLogicException 
	{
		enableUpdateContextMenu(true);
	}
	protected void onImbClearClassificationClick() throws PresentationLogicException 
	{
		clearSearchCriteria();
	}
	protected void onImbSearchClassificationClick() throws PresentationLogicException 
	{
		if(isClassificationSelected() == false)
		{
			engine.showMessage("Please select a classification");
			return;
		}
		
		if(countQuestionsExceed(true, false) == false)
			return;
		searchTreeClassification();
	}
	protected void onImbClearTextClick() throws PresentationLogicException 
	{
		form.lyrSearch().tabPageText().txtText().setValue("");
		clearGrids(true);
		enableUpdateContextMenu(true);
	}
	protected void onImbSearchTextClick() throws PresentationLogicException 
	{
		String srcTxt = getSearchText();
		if(srcTxt == null || srcTxt.trim().length() == 0)
		{
			engine.showMessage("Please enter a text as a search criteria");
			form.lyrSearch().tabPageText().txtText().setFocus();
			return;
		}
		
		if(countQuestionsExceed(false) == false)
			return;
		searchText();
		enableUpdateContextMenu(false);		
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				addQuestion();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				editQuestion();
				break;
			case GenForm.ContextMenus.GenericGrid.View:
				viewQuestion();
				break;
			case GenForm.ContextMenus.TreeMenu.CollapseAll:
				collapseAllClassification();
				break;
			case GenForm.ContextMenus.TreeMenu.ExpandAll:
				expandAllClassification();
				break;
		}
	}
	
	protected void onBtnMoveSelectedClick() throws PresentationLogicException 
	{
		//Flag the Actions
		form.getLocalContext().setMoveRecords(new Boolean(true));
		
		QuestionInformationShortVoCollection voColl = getCheckedListedQuestions();
		grdSelectedQuestionsRow row;
		for (int i = 0; voColl != null && i < voColl.size(); i++) 
		{
			if(isQuestionAdded(voColl.get(i)) == false)
			{
				row = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().newRow();
				row.setReadOnly(false);
				row.setcolSelect(true);
				setRowData(row, voColl.get(i));
			}
		}
		
		//Code to deal with the Selected Questions displayed hierarchical
		/*ArrayList dataColl = getSelectedQuestions();
		for (int i = 0; i < dataColl.size(); i++) 
			addSelectedItem((SelectData)dataColl.get(i));*/
		
		form.getLocalContext().setMoveRecords(new Boolean(false));
	}
	private boolean isQuestionAdded(QuestionInformationShortVo vo) 
	{
		QuestionInformationShortVoCollection voColl = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getValues();
		if(voColl != null && voColl.indexOf(vo) >= 0)
			return true;

		return false;
	}
	private QuestionInformationShortVoCollection getCheckedListedQuestions() 
	{
		QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
		grdListedQuestionsRow rowParent, rowChild;
		Object value;
		//Get the parents first (as it's a requirement to be displayed first)
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			for(int j=0; j<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().size(); j++)
			{
				rowParent = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().get(j);
				if(rowParent.getcolSelect())
				{
					value = rowParent.getValue();
					if(value instanceof QuestionInformationShortVo)
						voColl.add((QuestionInformationShortVo)value);
				}
				
				for (int k = 0; k < rowParent.getRows().size(); k++) 
				{
					rowChild = rowParent.getRows().get(k);
					if(rowChild.getcolSelect())
					{
						value = rowChild.getValue();
						if(value instanceof QuestionInformationShortVo)
							voColl.add((QuestionInformationShortVo)value);
					}
				}
			}
		}
		return voColl;
	}
	protected void onImbClearTextAndClassClick() throws PresentationLogicException 
	{
		setTextAndClassSearch(new Boolean(true));
		clearSearchCriteria();
		setTextAndClassSearch(null);
	}
	
	protected void onImbSearchTextAndClassClick() throws PresentationLogicException 
	{
		onImbSearchTextAndClass();
	}
	private void onImbSearchTextAndClass() 
	{
		//Check mandatory
		setTextAndClassSearch(new Boolean(true));
		if(checkMandatory() == false)
			return;
		if(countQuestionsExceed() == false)
			return;
		searchTreeClassification();
		setTextAndClassSearch(null);
	}
	private boolean countQuestionsExceed()
	{
		return countQuestionsExceed(true);
	}
	private boolean countQuestionsExceed(boolean searchClassification)
	{
		return countQuestionsExceed(searchClassification, true);
	}
	private boolean countQuestionsExceed(boolean searchClassification, boolean searchText) 
	{
		QuestionClassificationCollection qcColl = searchClassification?getGridClassification(false):null;
		Boolean isQuestion = searchClassification?isQuestionSearch():null;
		PreActiveActiveInactiveStatus status = searchClassification?getStatus():null;
		String text = searchText?getSearchText():null;
		Integer recCount = domain.countQuestion(qcColl, text, status, isQuestion);

		clearGrids();
		if(recCount != null && recCount.intValue() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return false;
		}
		//If we have more than PAT_SEARCH_MAX_SIZE classifications and the number of selected classification is > 1
		if((recCount != null && recCount.intValue() > getMaxValue()) && 
		   (qcColl != null && qcColl.size() > 1))
		{
			engine.showMessage("There are more than " + ConfigFlag.DOM.PAT_SEARCH_MAX_SIZE.getValue() + " questions associated with these classification.\r\nPlease select only one classification");
			return false;
		}
		return true;
	}
	private int getMaxValue() 
	{
		return ConfigFlag.DOM.PAT_SEARCH_MAX_SIZE.getValue();
	}
	
	protected void onBtnRemoveSelectedClick() throws PresentationLogicException 
	{
		boolean itemDeleted = true;
		while(itemDeleted)
		{
			itemDeleted = false;
			for(int i=0; i<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++)
			{
				if(form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i).getcolSelect())
				{
					form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().remove(i);
					itemDeleted = true;
					break;
				}
					
			}
		}
	}
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnSelectClick() throws PresentationLogicException 
	{
		QuestionInformationShortVoCollection voColl = getSelectedData();
		if(voColl == null || voColl.size() == 0)
		{
			engine.showMessage("Please select a question");
			return;
		}
		form.getGlobalContext().Admin.setSelectedQuestions(voColl);
		engine.close(DialogResult.OK);
	}
	private QuestionInformationShortVoCollection getSelectedData() 
	{
		QuestionInformationShortVoCollection voColl = new QuestionInformationShortVoCollection();
		QuestionInformationShortVo voQI;
		for (int i = 0; i < form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++) 
		{
			voQI = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i).getValue();
			//avoid adding duplicates
			if(voColl.indexOf(voQI) < 0)
				voColl.add(voQI);
		}
		return voColl;
	}	
	private void loadContextMenu() 
	{
		if(isParentTestEdit())
			return;
		
		form.getContextMenus().getGenericGridAddItem().setText("Add Question/Information");
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		//form.getContextMenus().getGenericGridAddItem().setIcon(form.getImages().OCRR.Question);
		
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Question");
		form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
		
		form.getContextMenus().getGenericGridViewItem().setText("View Question");
		form.getContextMenus().getGenericGridViewItem().setVisible(false);
		form.getContextMenus().getGenericGridViewItem().setIcon(form.getImages().Core.PrintPreview);
		form.getContextMenus().getTreeMenuCollapseAllItem().setVisible(true);
		form.getContextMenus().getTreeMenuExpandAllItem().setVisible(true);
		enableUpdateContextMenu(false);
		
	}
	private void editQuestion() 
	{
		Object objQInfo;
		if(isDialog())
			objQInfo = form.lyrTrees().tabPageSelect().grdListedQuestions().getValue();
		else
			objQInfo = form.lyrTrees().tabPageSearch().grdQuestions().getValue();			

		if(objQInfo == null || (objQInfo instanceof QuestionInformationShortVo == false))
		{
			engine.showMessage("Please select a record");
			return;
		}
		form.getGlobalContext().Admin.setIsNewQuestion(new Boolean(false));		
		QuestionInformationVo voSelectedQuestion =  domain.getQuestion(((QuestionInformationShortVo)objQInfo).getID_QuestionInformation());
		form.getGlobalContext().Admin.setSelectedQuestion(voSelectedQuestion);
		engine.open(form.getForms().Core.QuestionAnswer);
	}
	
	private void viewQuestion() 
	{
		form.getGlobalContext().Core.setQuestionEditViewMode(new Boolean(true));
		editQuestion();
	}
	
	private void addQuestion() 
	{
		form.getGlobalContext().Admin.setSelectedQuestion(new QuestionInformationVo());
		form.getGlobalContext().Admin.setIsNewQuestion(new Boolean(true));
		engine.open(form.getForms().Core.QuestionAnswer);	
	}

	private void expandAllClassification() 
	{
		expandNodes(form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes());
	}
	
	private void expandNodes(TreeNodeCollection nodes) 
	{
		TreeNode node;
		for (int i = 0; nodes != null && i < nodes.size(); i++) 
		{
			node = nodes.get(i);
			if(node.isExpanded() == false)
				node.setExpanded(true);
			if(node.getNodes() != null && node.getNodes().size() > 0)
				expandNodes(node.getNodes());
		}
	}
	private void collapseAllClassification() 
	{
		collapseNodes(form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes());
	}
	
	private void collapseNodes(TreeNodeCollection nodes) 
	{
		TreeNode node;
		for (int i = 0; nodes != null && i < nodes.size(); i++) 
		{
			node = nodes.get(i);
			if(node.isExpanded())
				node.setExpanded(false);
			if(node.getNodes() != null && node.getNodes().size() > 0)
				collapseNodes(node.getNodes());
		}
	}
	private void enableUpdateContextMenu(boolean bValue)
	{
		if(isParentTestEdit())
			return;
		
		Object val = null;
		if(isDialog())
			val = form.lyrTrees().tabPageSelect().grdListedQuestions().getValue();
		else
			val = form.lyrTrees().tabPageSearch().grdQuestions().getValue();
		if(val instanceof QuestionInformationShortVo)
		{
			QuestionInformationShortVo voQI = (QuestionInformationShortVo)val;
			String qInfoTxt = voQI.getIsQuestionIsNotNull() && voQI.getIsQuestion().booleanValue()?"Question":"Information"; 
			form.getContextMenus().getGenericGridUpdateItem().setText("Edit " + qInfoTxt);
			form.getContextMenus().getGenericGridViewItem().setText("View " + qInfoTxt);
		}
		
		form.getContextMenus().getGenericGridUpdateItem().setVisible(bValue);
		form.getContextMenus().getGenericGridViewItem().setVisible(bValue);
	}
	
	private void loadClassificationTree() 
	{
		QuestionClassificationCollection classColl = LookupHelper.getQuestionClassification(domain.getLookupService());
		form.lyrSearch().tabPageClassification().treClassification().clear();
		//Load top parents
		LookupInstVo[] roots = classColl.getRoots();
		for(int i=0; roots != null && i<roots.length; i++)
		{
			TreeNode nodeClass 	   = form.lyrSearch().tabPageClassification().treClassification().getNodes().add(roots[i], roots[i].toString());
			nodeClass.setExpanded(false);
			nodeClass.setCheckBoxVisible(true);
			loadChildren(nodeClass, roots[i]);
			
			TreeNode nodeTextClass = form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes().add(roots[i], roots[i].toString());
			nodeTextClass.setExpanded(true);
			nodeTextClass.setCheckBoxVisible(false);
			loadChildren(nodeTextClass, roots[i]);
		}
	}

	private void loadChildren(TreeNode parentNode, LookupInstVo parent) 
	{
		ArrayList list = parent.getChildInstances();
		QuestionClassification child;
		TreeNode childNode;
		for(int i=0; list != null && i<list.size(); i++)
		{
			child = (QuestionClassification)list.get(i);
			childNode = parentNode.getNodes().add(child, child.toString());
			childNode.setCheckBoxVisible(true);
			loadChildren(childNode, child);
		}
	}
	private void setDefaultStatus() 
	{
		form.lyrSearch().showtabPageTextClass();
		form.lyrSearch().tabPageTextClass().setHeaderVisible(true);
		form.lyrSearch().tabPageClassification().setHeaderVisible(false);
		form.lyrSearch().tabPageText().setHeaderVisible(false);
		form.lyrSearch().tabPageTextClass().GroupFilter().setValue(GroupFilterEnumeration.rdoQuestionAndInfo);
		form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().clear();
		if(isDialog())
			form.lyrTrees().showtabPageSelect();
		else
			form.lyrTrees().showtabPageSearch();
		//If Openede from Test Edit default Status to Active
		if(isParentTestEdit())
		{
			form.lyrSearch().tabPageTextClass().cmbStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
			form.lyrSearch().tabPageTextClass().cmbStatus().setEnabled(false);
		}
		//Short Text when activated from Question Select and Status in Clinical
		String caption = isParentTestEdit()?"Short Text":"Status";
		form.lyrTrees().tabPageSearch().grdQuestions().setcolQuestionShortTextCaption(caption);
		form.setMode(FormMode.VIEW);
	}
	private void searchTreeClassification() 
	{
		searchClassification();
		enableUpdateContextMenu(false);
	}
	//The order of the methods calls reflects the requirements (first we display the parent Classifications, then the Questions belonging  
	//to the parent, then the parent childrens(of type Classification), then the Questions associated with them)
	//The domain call reflects the same logic - we need all the Questions belonging to a specific Classification (the one checked in the Search tree)
	//so we cannot have a domain call to get them all as the relationship Classification->Questions is many to many (and we cannot reconstruct the Questions back otherwise)
	private void searchClassification() 
	{
		//Preload the grid with the same selected values as in the top tree (get the entire tree structure) - getGridClassification
		QuestionClassificationCollection qcColl = getGridClassification();
		clearGrids();
		//Load the parents
		loadParentGridNodes(qcColl);
		//Get the checked Classifications only - getClassification
		QuestionClassificationCollection qClassColl = getClassification();
		//Populate the parent nodes
		populateParentNodes(qClassColl);
		//Load the Children Classification Nodes
		loadChildGridNodes(qcColl);
		//Populate the child nodes
		populateChildrenNodes(qClassColl);
	}
	private void populateChildrenNodes(QuestionClassificationCollection qClassColl) 
	{
		QuestionClassification qClass;
		for(int i=0; qClassColl != null && i<qClassColl.size(); i++)
		{
			qClass = qClassColl.get(i);
			//Get the children only
			if(qClass.getParent() != null)
			{
				QuestionInformationShortVoCollection voColl;
				if(isTextAndClassSearch())
					voColl = domain.listQuestion(qClass, getSearchText(), getStatus(), isQuestionSearch());
				else
					voColl = domain.listQuestion(qClass);
				if(isDialog())
				{
					grdListedQuestionsRow listRow = getListGridChildRow(qClass);
					for(int j=0; listRow != null && j<voColl.size(); j++)
					{
						//Marius requirement - Check if Question was added in the Selected Grid 
						if(isQuestionAdded(voColl.get(j)) == false)
						{
							grdListedQuestionsRow childRow = listRow.getRows().newRow();
							setRowData(childRow, voColl.get(j));
						}
					}	
				}
				else
				{
					grdQuestionsRow searchRow = getSearchGridChildRow(qClass);
					for(int j=0; searchRow != null && j<voColl.size(); j++)
					{
						grdQuestionsRow childRow = searchRow.getRows().newRow();
						setRowData(childRow, voColl.get(j));
					}
				}
			}
		}
	}
	private PreActiveActiveInactiveStatus getStatus() 
	{
		return isTextAndClassSearch()?form.lyrSearch().tabPageTextClass().cmbStatus().getValue():null;
	}
	private void populateParentNodes(QuestionClassificationCollection qClassColl) 
	{
		QuestionClassification qClass;
		for(int i=0; qClassColl != null && i<qClassColl.size(); i++)
		{
			qClass = qClassColl.get(i);
			//Get the parents only
			if(qClass.getParent() == null)
			{
				QuestionInformationShortVoCollection voColl;
				if(isTextAndClassSearch())
					voColl = domain.listQuestion(qClass, getSearchText(), getStatus(), isQuestionSearch());
				else
					voColl = domain.listQuestion(qClass);
				if(isDialog())
				{
					grdListedQuestionsRow listRow = getGridParentListRow(qClass);
					for(int j=0; listRow != null && j<voColl.size(); j++)
					{
						//Marius requirement - Check if Question was added in the Selected Grid 
						if(isQuestionAdded(voColl.get(j)))
						{
							grdListedQuestionsRow childRow = listRow.getRows().newRow();
							setRowData(childRow, voColl.get(j));
						}
					}
				}
				else
				{
					grdQuestionsRow searchRow = getGridParentSearchRow(qClass);
					for(int j=0; searchRow != null && j<voColl.size(); j++)
					{
						grdQuestionsRow childRow = searchRow.getRows().newRow();
						setRowData(childRow, voColl.get(j));
					}					
				}
			}
		}
	}
	private String getSearchText() 
	{
		String text = null;
		if(isTextAndClassSearch())
			text  = form.lyrSearch().tabPageTextClass().txtTextAndClass().getValue();
		else
			text = form.lyrSearch().tabPageText().txtText().getValue();
		if(text != null && text.length() > 0)
			text = text.trim().toUpperCase();
		return text;
	}
	//flags 3 states - true, false and null
	private Boolean isQuestionSearch() 
	{
		GroupFilterEnumeration enumSel = form.lyrSearch().tabPageTextClass().GroupFilter().getValue();
		if(enumSel.equals(GroupFilterEnumeration.rdoQuestionOnly))
			return new Boolean(true);
		else if(enumSel.equals(GroupFilterEnumeration.rdoInformationOnly))
			return new Boolean(false);
			
		return null;
	}
	private grdQuestionsRow getGridParentSearchRow(QuestionClassification lkpItem) 
	{
		grdQuestionsRow row;
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			row = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i);
			Object valObj = row.getValue();
			//Check Parents
			if(valObj instanceof QuestionClassification && ((QuestionClassification)valObj).equals(lkpItem))
				return row;
		}
		return null;
	}
	private grdListedQuestionsRow getGridParentListRow(QuestionClassification lkpItem) 
	{
		grdListedQuestionsRow row;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			row = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i);
			Object valObj = row.getValue();
			//Check Parents
			if(valObj instanceof QuestionClassification && ((QuestionClassification)valObj).equals(lkpItem))
				return row;
		}
		return null;
	}
	
	private grdQuestionsRow getSearchGridChildRow(QuestionClassification lkpItem) 
	{
		grdQuestionsRow parentRow;
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i);
			//Check Children
			for(int j=0;parentRow.getRows().size() > 0 &&  j<parentRow.getRows().size(); j++)
			{
				if(parentRow.getRows().get(j).getValue().equals(lkpItem))
					return parentRow.getRows().get(j);
			}
		}
		return null;
	}
	private grdListedQuestionsRow getListGridChildRow(QuestionClassification lkpItem) 
	{
		grdListedQuestionsRow parentRow;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i);
			//Check Children
			for(int j=0;parentRow.getRows().size() > 0 &&  j<parentRow.getRows().size(); j++)
			{
				if(parentRow.getRows().get(j).getValue().equals(lkpItem))
					return parentRow.getRows().get(j);
			}
		}
		return null;
	}
	private void loadParentGridNodes(QuestionClassificationCollection qClassColl)
	{
		if(qClassColl != null)
		{
			grdQuestionsRow searchRow 	  = null;
			grdListedQuestionsRow listRow = null;
			QuestionClassification lkpItem;
			//Load Parents
			for(int i=0; i<qClassColl.size(); i++)
			{
				lkpItem = qClassColl.get(i);
				if(lkpItem.getParent() == null)
				{
					//Parent
					if(isDialog())
					{
						listRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().newRow();
						listRow.setcolSelectReadOnly(true);
						setGridNode(listRow, lkpItem);
					}
					else
					{
						searchRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().newRow();
						setGridNode(searchRow, lkpItem);
					}
				}
			}
		}
	}
	private void loadChildGridNodes(QuestionClassificationCollection qClassColl)
	{
		if(qClassColl != null)
		{
			grdQuestionsRow 	  rowSearch = null;
			grdListedQuestionsRow rowList   = null;
			QuestionClassification lkpItem;
			//Load Children
			for(int i=0; i<qClassColl.size(); i++)
			{
				lkpItem = qClassColl.get(i);
				if(lkpItem.getParent() != null)
				{
					if(isDialog())
					{
						rowList = getListParentRow(lkpItem);
						if( rowList != null)
						{
							grdListedQuestionsRow parentRow = rowList.getRows().newRow();
							parentRow.setcolSelectReadOnly(true);
							setGridNode(parentRow, lkpItem);
						}
					}
					else
					{
						rowSearch = getSearchParentRow(lkpItem);
						if( rowSearch != null)
						{
							grdQuestionsRow parentRow = rowSearch.getRows().newRow();
							setGridNode(parentRow, lkpItem);
						}						
					}
				}
			}
		}
	}
	private void setGridNode(Object rowGrid, QuestionClassification lkpItem) 
	{
		if(rowGrid instanceof grdQuestionsRow)
		{
			grdQuestionsRow row = (grdQuestionsRow)rowGrid;
			row.setcolQuestionText(lkpItem != null?lkpItem.toString():"");
			row.setValue(lkpItem);
			row.setExpanded(true);
			row.setSelectable(false);
		}
		else if(rowGrid instanceof grdListedQuestionsRow)
		{
			grdListedQuestionsRow row = (grdListedQuestionsRow)rowGrid;
			row.setcolQuestionText(lkpItem != null?lkpItem.toString():"");
			row.setValue(lkpItem);
			row.setExpanded(true);
			row.setSelectable(false);
		}
/*		else if(rowGrid instanceof grdSelectedQuestionsRow)
		{
			grdSelectedQuestionsRow row = (grdSelectedQuestionsRow)rowGrid;
			row.setcolQuestionText(lkpItem != null?lkpItem.toString():"");
			row.setValue(lkpItem);
			row.setExpanded(true);
			row.setSelectable(false);
		}*/
	}
	private grdQuestionsRow getSearchParentRow(QuestionClassification lkpItem) 
	{
		grdQuestionsRow row = null;
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			row = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i);
			Object objQClass = row.getValue();
			if(objQClass instanceof QuestionClassification && ((QuestionClassification)objQClass).equals(lkpItem.getParent()))
				return row;
		}
		return null;
	}
	private grdListedQuestionsRow getListParentRow(QuestionClassification lkpItem) 
	{
		grdListedQuestionsRow row = null;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			row = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i);
			Object objQClass = row.getValue();
			if(objQClass instanceof QuestionClassification && ((QuestionClassification)objQClass).equals(lkpItem.getParent()))
				return row;
		}
		return null;
	}
	private grdSelectedQuestionsRow getSelParentRow(QuestionClassification lkpItem) 
	{
		grdSelectedQuestionsRow row = null;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++)
		{
			row = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i);
			Object objQClass = row.getValue();
			if(objQClass instanceof QuestionClassification && ((QuestionClassification)objQClass).equals(lkpItem.getParent()))
				return row;
		}
		return null;
	}
	private void searchText()
	{
		QuestionInformationShortVoCollection collection = domain.listQuestion(getSearchText());
		clearGrids();
		displayQuestions(collection);
	}
	//Displays the Questions tree
	private void displayQuestions(QuestionInformationShortVoCollection collection) 
	{
		QuestionClassificationCollection parents = new QuestionClassificationCollection();
		//gather all the parents
		for(int i=0; i<collection.size(); i++)
			getParents(parents, collection.get(i).getClassification());

		//Display all the parents
		buildParentNodes(parents);
		//Build Parent Data
		for(int i=0; i<collection.size(); i++)
			buildParentData(collection.get(i), collection.get(i).getClassification());
		//Display all the children 
		for(int i=0; i<collection.size(); i++)
			buildChildrenNodes(collection.get(i).getClassification());
		
		//Build Child Data
		for(int i=0; i<collection.size(); i++)
			buildChildData(collection.get(i), collection.get(i).getClassification());
	}
	private void setRowData(Object rowGrid, QuestionInformationShortVo voQInfo) 
	{
		if(rowGrid != null && voQInfo != null )
		{
			Image image = voQInfo.getIsQuestionIsNotNull()&&voQInfo.getIsQuestion().booleanValue()?form.getImages().OCRR.Question:form.getImages().OCRR.Information;
			if(rowGrid instanceof grdQuestionsRow)
			{
				grdQuestionsRow row = (grdQuestionsRow)rowGrid;
				row.setcolQuestionText(voQInfo.getText());
				row.setTooltipForcolQuestionText(voQInfo.getText());
				if(isParentTestEdit())
					row.setcolQuestionShortText(voQInfo.getShortText());
				else
					row.setcolQuestionShortText(voQInfo.getStatusIsNotNull()?voQInfo.getStatus().toString():"");
				row.setExpandedImage(image);
				row.setCollapsedImage(image);
				row.setBackColor(Color.Linen);
				row.setValue(voQInfo);
			}
			else if(rowGrid instanceof grdListedQuestionsRow)
			{
				grdListedQuestionsRow row = (grdListedQuestionsRow)rowGrid;
				row.setcolQuestionText(voQInfo.getText());
				row.setTooltipForcolQuestionText(voQInfo.getText());
				row.setExpandedImage(image);
				row.setCollapsedImage(image);
				row.setBackColor(Color.Linen);
				row.setValue(voQInfo);
			}
			else if(rowGrid instanceof grdSelectedQuestionsRow)
			{
				grdSelectedQuestionsRow row = (grdSelectedQuestionsRow)rowGrid;
				row.setcolQuestionText(voQInfo.getText());
				row.setTooltipForcolQuestionText(voQInfo.getText());
				row.setExpandedImage(image);
				row.setCollapsedImage(image);
				row.setBackColor(Color.Linen);
				row.setValue(voQInfo);
			}
		}
	}
	//private QuestionClassificationCollection getClassification() 
	private QuestionClassificationCollection getClassification() 
	{
		QuestionClassificationCollection coll = new QuestionClassificationCollection();
		TreeNodeCollection nodeCollection;
		TreeNode node;
		
		if(isTextAndClassSearch())
			nodeCollection = form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes();
		else
			nodeCollection = form.lyrSearch().tabPageClassification().treClassification().getNodes();
		for(int i=0; nodeCollection != null && i<nodeCollection.size(); i++)
		{
			node = nodeCollection.get(i);
			if(node.isChecked())
				coll.add((QuestionClassification)node.getValue());
			if(node.getNodes() != null && node.getNodes().size() > 0)
				addClassification(coll, node);
		}
		return coll;
	}
	
	private void addClassification(QuestionClassificationCollection coll, TreeNode parentNode) 
	{
		TreeNode childNode;
		for(int i=0; parentNode != null && i<parentNode.getNodes().size(); i++)
		{
			childNode = parentNode.getNodes().get(i);
			//Use && childrenSelected(node.getNodes()) == false if you want to have parent or child selected ( as in the Prev method)
			if(childNode.isChecked())
				coll.add((QuestionClassification)childNode.getValue());
			if(childNode.getNodes() != null && childNode.getNodes().size() > 0)
				addClassification(coll, childNode);
		}
	}
	
	private QuestionClassificationCollection getGridClassification()
	{
		return getGridClassification(true);
	}
	private QuestionClassificationCollection getGridClassification(boolean addParents) 
	{
		QuestionClassificationCollection coll = new QuestionClassificationCollection();
		TreeNodeCollection nodeColl;
		TreeNode node;
		if(isTextAndClassSearch())
			nodeColl = form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes();
		else
			nodeColl = form.lyrSearch().tabPageClassification().treClassification().getNodes();
		
		for(int i=0; i<nodeColl.size(); i++)
		{
			node = nodeColl.get(i);
			if(node.isChecked())
				coll.add((QuestionClassification)node.getValue());
			if(node.getNodes() != null && node.getNodes().size() > 0)
				addGridClassification(coll, node, addParents);
		}
		return coll;
	}
	private void addGridClassification(QuestionClassificationCollection coll, TreeNode parentNode, boolean addParents) 
	{
		TreeNode childNode;
		for(int i=0; parentNode != null && i<parentNode.getNodes().size(); i++)
		{
			childNode = parentNode.getNodes().get(i);
			//Use && childrenSelected(node.getNodes()) == false if you want to have parent or child selected ( as in the Prev method)
			if(childNode.isChecked())
			{
				coll.add((QuestionClassification)childNode.getValue());
				//Add the parent as well
				if(addParents)
				{
					if(coll.indexOf((QuestionClassification)parentNode.getValue()) < 0)
						coll.add((QuestionClassification)parentNode.getValue());
				}
			}
			if(childNode.getNodes() != null && childNode.getNodes().size() > 0)
				addGridClassification(coll, childNode, addParents);
		}
	}
	private void clearSearchTreeNodes() 
	{
		TreeNode parent;
		
		TreeNodeCollection coll;
		if(isTextAndClassSearch())
			coll = form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes();
		else
			coll = form.lyrSearch().tabPageClassification().treClassification().getNodes();
		for(int i=0; i<coll.size(); i++)
		{
			parent = coll.get(i);
			if(parent.isChecked())
				parent.setChecked(false);
			if(parent.getNodes() != null && parent.getNodes().size() > 0)
				clearChildren(parent.getNodes());
		}
	}
	private void clearChildren(TreeNodeCollection parentNodes) 
	{
		TreeNode childNode;
		for(int i=0; parentNodes != null && i<parentNodes.size(); i++)
		{
			childNode = parentNodes.get(i);
			if(childNode.isChecked())
				childNode.setChecked(false);
			if(childNode.getNodes() != null && childNode.getNodes().size() > 0)
				clearChildren(childNode.getNodes());
		}
	}
	private void clearGrids()
	{
		clearGrids(false);
	}
	private void clearGrids(boolean clearSelectedQuestions) 
	{
		if(isDialog())
		{
			form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().clear();
			if(clearSelectedQuestions)
				form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().clear();
		}
		else	
			form.lyrTrees().tabPageSearch().grdQuestions().getRows().clear();
	}
	//Recreates the parent children tree grid and adds the associated data as children (to parent or child) 
	private void loadNewGridNodes(QuestionInformationShortVo voQInfo) 
	{
		QuestionClassificationCollection classification = voQInfo.getClassification();
		if(classification != null)
		{
			//Get the Parents
			QuestionClassificationCollection parents = new QuestionClassificationCollection();
			getParents(parents, classification);
			//Add the parents to the grid
			buildParentNodes(parents);
			//Add the QuestionInformationVo in the built up tree
			buildParentData(voQInfo, classification);
			//Add the children to the grid
			buildChildrenNodes(classification);
			//Add the QuestionInformationVo in the built up tree
			buildChildData(voQInfo, classification);
		}
	}

	private void buildParentData(QuestionInformationShortVo voQInfo, QuestionClassificationCollection classification) 
	{
		grdQuestionsRow parentSearchRow;
		grdListedQuestionsRow parentListRow;
		grdSelectedQuestionsRow parentSelRow;
		QuestionClassification item, itemParent;
		//Build the data
		for(int j=0; j<classification.size(); j++)
		{
			item = classification.get(j);
			itemParent = getParentLkp(classification.get(j));
			//Parents
			if(itemParent == null)
			{
				if(isDialog())
				{
					if(moveRecords())
					{
						parentSelRow = getParentSelNode(voQInfo, item);
						setRowData(parentSelRow, voQInfo);
					}
					else
					{
						parentListRow = getParentListNode(voQInfo, item);
						setRowData(parentListRow, voQInfo);
					}
				}
				else
				{
					parentSearchRow = getParentSearchNode(voQInfo, item);
					setRowData(parentSearchRow, voQInfo);
				}
			}
		}
	}
	private void buildChildData(QuestionInformationShortVo voQInfo, QuestionClassificationCollection classification) 
	{
		grdQuestionsRow childSearchRow;
		grdListedQuestionsRow childListRow;
		grdSelectedQuestionsRow childSelRow;
		QuestionClassification item, itemParent;
		//Build the data
		for(int j=0; j<classification.size(); j++)
		{
			item = classification.get(j);
			itemParent = getParentLkp(classification.get(j));
			//Parents
			if(itemParent != null)
			{
				if(isDialog())
				{
					if(moveRecords())
					{
						childSelRow = getChildSelNode(item, voQInfo);
						setRowData(childSelRow, voQInfo);
					}
					else
					{
						childListRow = getChildListNode(item, voQInfo);
						setRowData(childListRow, voQInfo);
					}
				}
				else
				{
					childSearchRow = getChildSearchNode(item);
					setRowData(childSearchRow, voQInfo);
				}
			}
		}
	}
	//Get the child row
	private grdQuestionsRow getChildSearchNode(QuestionClassification item) 
	{
		grdQuestionsRow parentRow, childRow;
		//Children
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i);
			for(int k=0; parentRow != null && k<parentRow.getRows().size(); k++)
			{
				childRow = parentRow.getRows().get(k);
				Object objValue = childRow.getValue();
				if(objValue instanceof QuestionClassification)
				{
					if(item.equals(objValue))
					{
						return childRow.getRows().newRow();
					}
				}
			}
		}
		return null;
	}
	private grdListedQuestionsRow getChildListNode(QuestionClassification item, QuestionInformationShortVo voQInfo) 
	{
		grdListedQuestionsRow parentRow, childRow;
		//Children
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i);
			for(int k=0; parentRow != null && k<parentRow.getRows().size(); k++)
			{
				childRow = parentRow.getRows().get(k);
				Object objValue = childRow.getValue();
				if(objValue instanceof QuestionClassification)
				{
					if(item.equals(objValue))
					{
						//Check for duplicates
						for(int x=0; x<childRow.getRows().size(); x++)
						{
							Object value = childRow.getRows().get(x).getValue();
							if(value instanceof QuestionInformationVo && value.equals(voQInfo))
								return null;
						}
						
						return childRow.getRows().newRow();
					}
				}
			}
		}
		return null;
	}
	private grdSelectedQuestionsRow getChildSelNode(QuestionClassification item, QuestionInformationShortVo voQInfo) 
	{
		grdSelectedQuestionsRow parentRow, childRow;
		//Children
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i);
			for(int k=0; parentRow != null && k<parentRow.getRows().size(); k++)
			{
				childRow = parentRow.getRows().get(k);
				Object objValue = childRow.getValue();
				if(objValue instanceof QuestionClassification)
				{
					if(item.equals(objValue))
					{
						//Check for duplicates
						for(int x=0; x<childRow.getRows().size(); x++)
						{
							Object value = childRow.getRows().get(x).getValue();
							if(value instanceof QuestionInformationVo && value.equals(voQInfo))
								return null;
						}
						
						return childRow.getRows().newRow();
					}
				}
			}
		}
		return null;
	}

	//Get the parent row
	private grdQuestionsRow getParentSearchNode(QuestionInformationShortVo voQInfo, QuestionClassification item) 
	{
		grdQuestionsRow parentRow;
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i);
			Object objValue = parentRow.getValue();
			if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(item) && !voAddedToParent(voQInfo))
			{
				return parentRow.getRows().newRow();
			}
		}
		return null;
	}
	//Get the parent row
	private grdListedQuestionsRow getParentListNode(QuestionInformationShortVo voQInfo, QuestionClassification item) 
	{
		grdListedQuestionsRow parentRow;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i);
			Object objValue = parentRow.getValue();
			if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(item) && !voAddedToParent(voQInfo))
			{
				return parentRow.getRows().newRow();
			}
		}
		return null;
	}
	private grdSelectedQuestionsRow getParentSelNode(QuestionInformationShortVo voQInfo, QuestionClassification item) 
	{
		grdSelectedQuestionsRow parentRow;
		for(int i=0; i<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++)
		{
			parentRow = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i);
			Object objValue = parentRow.getValue();
			if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(item) && !voAddedToParent(voQInfo))
			{
				return parentRow.getRows().newRow();
			}
		}
		return null;
	}
	//Check if the vo was added as a child of a parent
	private boolean voAddedToParent(QuestionInformationShortVo voQInfo) 
	{
		for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
		{
			for(int j=0; j<form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().size(); j++)
			{
				Object objValue = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().get(j);
				if(objValue instanceof QuestionInformationVo && ((QuestionInformationVo)objValue).equals(voQInfo))
				{
					return true;
				}
			}
		}
		return false;
	}
	private void buildChildrenNodes(QuestionClassificationCollection classification) 
	{
		QuestionClassification item, parentItem;
		//Build the children Nodes
		for(int i=0; i<classification.size(); i++)
		{
			item = classification.get(i);
			parentItem = getParentLkp(item); 
			if(parentItem != null)
			{
				if(isDialog())
				{
					if(moveRecords())
					{
						grdSelectedQuestionsRow parentSelRow, childSelRow;
						for(int j=0; j<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); j++)
						{
							parentSelRow = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(j);
							Object objValue = parentSelRow.getValue();
							if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(parentItem) && !isChildAdded(item, form.lyrTrees().tabPageSelect().grdListedQuestions()))
							{
								childSelRow = parentSelRow.getRows().newRow();
								setGridNode(childSelRow, item);
								break;
							}
						}
					}
					else
					{
						grdListedQuestionsRow parentListRow, childListRow;
						for(int j=0; j<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); j++)
						{
							parentListRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(j);
							Object objValue = parentListRow.getValue();
							if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(parentItem) && !isChildAdded(item, form.lyrTrees().tabPageSelect().grdListedQuestions()))
							{
								childListRow = parentListRow.getRows().newRow();
								setGridNode(childListRow, item);
								break;
							}
						}
					}
				}
				else
				{
					grdQuestionsRow parentSearchRow, childSearchRow;
					for(int j=0; j<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); j++)
					{
						parentSearchRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(j);
						Object objValue = parentSearchRow.getValue();
						if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(parentItem) && !isChildAdded(item, form.lyrTrees().tabPageSearch().grdQuestions()))
						{
							childSearchRow = parentSearchRow.getRows().newRow();
							setGridNode(childSearchRow, item);
							break;
						}
					}
				}
			}
		}
	}

	private boolean isChildAdded(QuestionClassification classification, Object grid) 
	{
		if(grid instanceof grdQuestionsGrid)
		{
			grdQuestionsRow parentSearchRow;
			for(int i=0; i<form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++)
			{
				for(int j=0; j<form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().size(); j++)
				{
					parentSearchRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().get(j);
					Object objValue = parentSearchRow.getValue();
					if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(classification))
					{
						return true;
					}
				}
			}
		}
		else if(grid instanceof grdListedQuestionsGrid)
		{
			grdListedQuestionsRow parentListRow;
			for(int i=0; i<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++)
			{
				for(int j=0; j<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().size(); j++)
				{
					parentListRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().get(j);
					Object objValue = parentListRow.getValue();
					if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(classification))
					{
						return true;
					}
				}
			}
		}
		else if(grid instanceof grdSelectedQuestionsGrid)
		{
			grdSelectedQuestionsRow parentSelRow;
			for(int i=0; i<form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().size(); i++)
			{
				for(int j=0; j<form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().size(); j++)
				{
					parentSelRow = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().get(i).getRows().get(j);
					Object objValue = parentSelRow.getValue();
					if(objValue instanceof QuestionClassification && ((QuestionClassification)objValue).equals(classification))
					{
						return true;
					}
				}
			}
		}
		return false;
	}
	private void buildParentNodes(QuestionClassificationCollection parents) 
	{
		grdQuestionsRow parentSearchRow;
		grdListedQuestionsRow parentListRow;
		grdSelectedQuestionsRow parentSelRow;
		//Build the parents nodes
		for(int i=0; parents != null && i< parents.size(); i++)
		{
			if(isDialog())
			{
				if(moveRecords())
				{
					//Populate Selected Questions
					parentSelRow = getSelParentRow(parents.get(i));
					if(parentSelRow == null)
						parentSelRow = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().newRow();
					setGridNode(parentSelRow, parents.get(i));
				}
				else
				{
					//Populate listed Questions
					parentListRow = getListParentRow(parents.get(i));
					if(parentListRow == null)
						parentListRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().newRow();
					setGridNode(parentListRow, parents.get(i));
				}
			}
			else
			{
				parentSearchRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().newRow();
				setGridNode(parentSearchRow, parents.get(i));
			}
		}
	}
	private void getParents(QuestionClassificationCollection parents, QuestionClassificationCollection classification) 
	{
		QuestionClassification parentLkp;
		//Build the parent collection
		for(int i=0; i<classification.size(); i++)
		{
			parentLkp = getParentLkp(classification.get(i));
			if(parentLkp != null)
			{
				if(parents.indexOf(parentLkp) < 0)
					parents.add(parentLkp);
			}
			else
			{
				if(parents.indexOf(classification.get(i)) < 0)
					parents.add(classification.get(i));
			}
		}
	}
	
	private QuestionClassification getParentLkp(QuestionClassification lkpItem)
	{
		QuestionClassificationCollection classColl = LookupHelper.getQuestionClassification(domain.getLookupService());
		//Load top parents
		LookupInstVo[] roots = classColl.getRoots();
		for(int i=0; roots != null && i<roots.length; i++)
		{
			for(int j=0; roots[i].getChildInstances() != null && j<roots[i].getChildInstances().size(); j++)
			{
				if(roots[i].getChildInstances().get(j).equals(lkpItem))
					return (QuestionClassification)roots[i];
			}
				
		}
		return null;
	}
	
	private void refreshRow(Object grid, QuestionInformationShortVo voQInfo) 
	{
		if(grid instanceof grdListedQuestionsGrid)
		{
			grdListedQuestionsRow parentRow, childRow;
			QuestionInformationShortVo voQInfoShort;
			Object value;
			for (int i = 0; i < form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().size(); i++) 
			{
				for (int j = 0; j < form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().size(); j++) 
				{
					parentRow = form.lyrTrees().tabPageSelect().grdListedQuestions().getRows().get(i).getRows().get(j);
					value = parentRow.getValue();
					if(value != null && value instanceof QuestionInformationShortVo)
					{
						voQInfoShort = (QuestionInformationShortVo)value;
						if(voQInfoShort.equals(voQInfo))
						{
							parentRow.setValue(voQInfo);
							setRowData(parentRow, voQInfo);
						}
					}
					for (int k = 0; k < parentRow.getRows().size(); k++) 
					{
						childRow = parentRow.getRows().get(k);
						value = childRow.getValue();
						if(value != null && value instanceof QuestionInformationShortVo)
						{
							voQInfoShort = (QuestionInformationShortVo)value;
							if(voQInfoShort.equals(voQInfo))
							{
								childRow.setValue(voQInfo);
								setRowData(childRow, voQInfo);
							}
						}
					}
				}
			}
		}
		else if(grid instanceof grdQuestionsGrid)
		{
			grdQuestionsRow parentRow, childRow;
			QuestionInformationShortVo voQInfoShort;
			Object value;
			for (int i = 0; i < form.lyrTrees().tabPageSearch().grdQuestions().getRows().size(); i++) 
			{
				for (int j = 0; j < form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().size(); j++) 
				{
					parentRow = form.lyrTrees().tabPageSearch().grdQuestions().getRows().get(i).getRows().get(j);
					value = parentRow.getValue();
					if(value != null && value instanceof QuestionInformationShortVo)
					{
						voQInfoShort = (QuestionInformationShortVo)value;
						if(voQInfoShort.equals(voQInfo))
						{
							parentRow.setValue(voQInfo);
							setRowData(parentRow, voQInfo);
						}
					}
					for (int k = 0; k < parentRow.getRows().size(); k++) 
					{
						childRow = parentRow.getRows().get(k);
						value = childRow.getValue();
						if(value != null && value instanceof QuestionInformationShortVo)
						{
							voQInfoShort = (QuestionInformationShortVo)value;
							if(voQInfoShort.equals(voQInfo))
							{
								childRow.setValue(voQInfo);
								setRowData(childRow, voQInfo);
							}
						}
					}
				}
			}
		}
	}
	private boolean isClassificationSelected() 
	{
		TreeNodeCollection nodeColl;
		TreeNode node;
		if(isTextAndClassSearch() == false)
			nodeColl = form.lyrSearch().tabPageClassification().treClassification().getNodes();
		else
			nodeColl = form.lyrSearch().tabPageTextClass().treTextAndClass().getNodes();
			
		for(int i=0; i<nodeColl.size(); i++)
		{
			node = nodeColl.get(i);
			if(node.isChecked())
				return true;
			if(node.getNodes() != null && node.getNodes().size() > 0)
				if(isChildClassificationSel(node))
					return true;
		}
		return false;
	}
	private boolean isChildClassificationSel(TreeNode parentNode) 
	{
		TreeNode childNode;
		for(int i=0; parentNode != null && i<parentNode.getNodes().size(); i++)
		{
			childNode = parentNode.getNodes().get(i);
			if(childNode.isChecked())
				return true;
			if(childNode.getNodes() != null && childNode.getNodes().size() > 0)
				isChildClassificationSel(childNode);
		}
		return false;
	}
	private boolean checkMandatory() 
	{
		if(isClassificationSelected() == false)
		{
			engine.showMessage("Please select a classification");
			return false;
		}
		/*String text = getText();
		if(text == null || text.trim().length() == 0)
		{
			engine.showMessage("Please select a text");
			form.lyrSearch().tabPageTextClass().txtTextAndClass().setFocus();
			return false;
		}*/
		
		return true;
	}
	private void clearSearchCriteria() 
	{
		clearGrids(true);
		clearSearchTreeNodes();
		if(isTextAndClassSearch())
		{
			form.lyrSearch().tabPageTextClass().txtTextAndClass().setValue("");
			form.lyrSearch().tabPageTextClass().GroupFilter().setValue(GroupFilterEnumeration.rdoQuestionAndInfo);
			form.lyrSearch().tabPageTextClass().cmbStatus().setValue(null);
		}
		enableUpdateContextMenu(false);
	}
	private boolean isDialog()
	{
		return engine.isDialog();
	}
	private boolean moveRecords()
	{
		return form.getLocalContext().getMoveRecordsIsNotNull() && form.getLocalContext().getMoveRecords().booleanValue();
	}
	private boolean isTextAndClassSearch()
	{
		return form.getLocalContext().getIsTextAndClassificationSearchIsNotNull() && form.getLocalContext().getIsTextAndClassificationSearch().booleanValue(); 
	}
	//Flags a Text and Classification Search
	private void setTextAndClassSearch(Boolean bVal)
	{
		form.getLocalContext().setIsTextAndClassificationSearch(bVal);
	}
	//Form opened from TestEdit - and is dialog
	private boolean isParentTestEdit() 
	{
		return isDialog() && engine.getPreviousNonDialogFormName().equals(form.getForms().OCRR.TestEdit);
	}
	//Load Preselected Data
	private void loadSelectedData() 
	{
		if(isDialog())
		{
			form.getLocalContext().setMoveRecords(new Boolean(true));
			QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
			grdSelectedQuestionsRow row;
			for (int i = 0; voColl != null && i < voColl.size(); i++) 
			{
				row = form.lyrTrees().tabPageSelect().grdSelectedQuestions().getRows().newRow();
				row.setReadOnly(true);
				//The preselected should be unchecked
				//row.setcolSelect(true);
				setRowData(row, voColl.get(i));
			}
			form.getLocalContext().setMoveRecords(new Boolean(false));
		}
		else
		{
			//Load the Selected Question if any
			if(engine.getPreviousNonDialogFormName().equals(form.getForms().Core.QuestionAnswer))
			{
				refreshSelectedQuestion();
			}
		}
	}
	//Check if there is the minimum search criteria entered
	private boolean isSearchCriteriaEntered() 
	{
		boolean criteria = false;
		//Set the setTextAndClassSearch(true) as the method isClassificationSelected uses it
		setTextAndClassSearch(new Boolean(true));
		criteria = isClassificationSelected();
		setTextAndClassSearch(null);
		
		return criteria;
	}
}
