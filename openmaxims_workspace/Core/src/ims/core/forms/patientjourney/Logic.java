//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.60 build 2838.16667)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.patientjourney;

import ims.core.vo.enums.PatientJourneyAction;
import ims.framework.Control;
import ims.framework.controls.PatientJourneyClock;
import ims.framework.controls.PatientJourneyEntries;
import ims.framework.controls.PatientJourneyEntry;
import ims.framework.controls.PatientJourneyMarker;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.pathways.vo.PatientJourneyJourneyTargetInterfaceVo;
import ims.pathways.vo.PauseDetailsVo;
import ims.pathways.vo.PauseDetailsVoCollection;
import ims.pathways.vo.lookups.EventStatus;
import ims.pathways.vo.lookups.PatientTargetStatus;
import ims.vo.interfaces.IPatientJourney;
import ims.vo.interfaces.IPatientJourneyClock;
import ims.vo.interfaces.IPatientJourneyEvent;
import ims.vo.interfaces.IPatientJourneyPathwayTarget;
import ims.vo.interfaces.IPatientJourneyTarget;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final Color FILTERHIGHLIGHTEDTEXTCOLOR = Color.Black;
	private final Color FILTERHIGHLIGHTEDBACKCOLOR = Color.LightYellow;
	private static final Color FILTERHIDDEDTEXTCOLOR = Color.LightGray;
	
	private static final long serialVersionUID = 1L;

	abstract class Identifier
	{
		private IPatientJourneyPathwayTarget pathwayTarget;
		
		public Identifier(IPatientJourneyPathwayTarget pathwayTarget)
		{
			this.pathwayTarget = pathwayTarget;
		}
	
		public final IPatientJourneyPathwayTarget getPathwayTarget()
		{
			return pathwayTarget;
		}
				
		public abstract Object getJourneyTargetOrEvent();		
	}
	class TargetIdentifier extends Identifier
	{
		private IPatientJourneyTarget target;		
		
		public TargetIdentifier(IPatientJourneyTarget target, IPatientJourneyPathwayTarget pathwayTarget)
		{
			super(pathwayTarget);			
			this.target = target;			
		}
		
		public final IPatientJourneyTarget getTarget()
		{
			return target;
		}
		@Override
		public Object getJourneyTargetOrEvent() 
		{
			return target;
		}		
	}
	class EventIdentifier extends Identifier
	{
		private IPatientJourneyEvent event;		
		private IPatientJourneyTarget journeyTarget;
		
		public EventIdentifier(IPatientJourneyEvent event, IPatientJourneyPathwayTarget pathwayTarget,IPatientJourneyTarget journeyTarget)
		{
			super(pathwayTarget);
			this.event = event;		
			this.journeyTarget = journeyTarget;
		}
		
		public IPatientJourneyEvent getEvent()
		{
			return event;
		}		
		
		public IPatientJourneyTarget getJourneyTarget()
		{
			return journeyTarget;
		}
		
		@Override
		public Object getJourneyTargetOrEvent() 
		{
			return event;
		}
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{		
		form.getLocalContext().setLastAction(null);
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.FilterByJourneyTargetOrEvent:
				filterByJourneyTargetOrEvent();				
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.FilterByPathwayTarget:
				filterByPathwayTarget();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.ResetFilter:
				resetFilter();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.AddNewEvent:
				addNewEvent();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.AddEventToTarget:
				addNewEventToTarget();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.AsociatePathway:
				AsociatePathway();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.ViewClockHistory:
				ViewClockHistory();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.AddReadjustment:
				AddReadjustment();
				break;
			case GenForm.ContextMenus.CoreNamespace.PatientJourneyCustomControl.EditReadjustment:
				EditReadjustment();
				break;	
		}
		form.getLocalContext().setLastAction(null);
	}
	private void EditReadjustment() 
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.EDITREADJUSTMENT);
		form.fireCustomControlValueChanged();		
	}
	private void AddReadjustment() 
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.ADDREADJUSTMENT);
		form.fireCustomControlValueChanged();
	}
	private void ViewClockHistory()
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.VIEWCLOCKHISTORY);
		form.fireCustomControlValueChanged();
	}
	private void AsociatePathway() 
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.CREATENEWPATHWAY);
		form.fireCustomControlValueChanged();
	}
	private void addNewEventToTarget() 
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.ADDEVENTTOTARGET);
		form.fireCustomControlValueChanged();
	}
	private void addNewEvent() 
	{
		form.getLocalContext().setLastAction(ims.core.vo.enums.PatientJourneyAction.CREATENEWEVENT);
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onPatientJourneyControlSelectionChanged(PatientJourneyEntry entry) 
	{
		setContextMenu(entry);
	}
	
	public void clear()
	{
		form.patientJourneyControl().clear();
		form.getContextMenus().Core.hideAllPatientJourneyCustomControlMenuItems(); //WDEV-18135
	}

	public void setValue(ims.vo.interfaces.IPatientJourney value)
	{
		clear();
		
		String[] errors = validate(value);
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Error", errors);
			return;
		}
		form.getLocalContext().setIPatientJourney(value);
		populate(value);
		
		form.getContextMenus().Core.getPatientJourneyCustomControlAddNewEventItem().setVisible(true);
		form.getContextMenus().Core.getPatientJourneyCustomControlAsociatePathwayItem().setVisible(true);
		form.getContextMenus().Core.getPatientJourneyCustomControlViewClockHistoryItem().setVisible(true);
		setContextMenu(form.patientJourneyControl().getSelectedEntry()); //WDEV-18131 
	}

	private String[] validate(IPatientJourney value) 
	{		
		ArrayList<String> errors = new ArrayList<String>();
		
		if(value == null)
		{
			errors.add("Invalid patient journey data");
		}
		else
		{		
			if(value.getIPatientJourneyJourneyTitle() == null)
			{
				errors.add("Invalid journey title");
			}
			if(value.getIPatientJourneyProfileTitle() == null)
			{
				errors.add("Invalid profile title");
			}
			if(value.getIPatientJourneyStartDate() == null)
			{
				errors.add("Invalid start date");
			}	
			if(value.getIPatientJourneyJourneyEvents() != null)
			{
				for(int x = 0; x < value.getIPatientJourneyJourneyEvents().length; x++)
				{
					if(value.getIPatientJourneyJourneyEvents()[x] == null)
					{
						errors.add("Invalid journey event at position " + x);
					}					
				}
			}
			if(value.getIPatientJourneyJourneyTargets() != null)
			{
				for(int x = 0; x < value.getIPatientJourneyJourneyTargets().length; x++)
				{
					if(value.getIPatientJourneyJourneyTargets()[x] == null)
					{
						errors.add("Invalid journey target at position " + x);
					}	
					else						
					{
						if(value.getIPatientJourneyJourneyTargets()[x].getIPatientJourneyTargetWeekNumber() == null)
						{
							errors.add("Invalid pathway target week number at position " + x);
						}
					}
				}				
			}
			if(value.getIPatientJourneyPathwayTargets() != null)
			{
				for(int x = 0; x < value.getIPatientJourneyPathwayTargets().length; x++)
				{
					if(value.getIPatientJourneyPathwayTargets()[x] == null)
					{
						errors.add("Invalid pathway target at position " + x);
					}
					else						
					{
						if(value.getIPatientJourneyJourneyTargets()[x].getIPatientJourneyTargetWeekNumber() == null)
						{
							errors.add("Invalid pathway target week number at position " + x);
						}
					}
				}
			}
		}
		
		String[] result = new String[errors.size()];
		for(int x = 0; x < errors.size(); x++)
		{
			result[x] = errors.get(x);
		}
		
		return result;
	}
	
	private class MaxWeek {
		public int maxWeekNumber;
	}
	
	private void populate(IPatientJourney value) 
	{					
		form.patientJourneyControl().setStartDate(value.getIPatientJourneyStartDate());
		form.patientJourneyControl().setProfileHeaderText(value.getIPatientJourneyProfileTitle());	
		
		String journeyHeaderText = "";
		journeyHeaderText += value.getIPatientJourneyStartDate() + (value.getIPatientJourneyEndDate() != null ? (" - " + value.getIPatientJourneyEndDate()) :("")); 
				
		if (value.getIPatientJourneyReferralReceivedDate() != null  && value.getIPatientJourneyOriginalReferralDate() != null)
		{
			new Date();
			journeyHeaderText += " - Referral Received on Day " + Date.daysBetween(value.getIPatientJourneyOriginalReferralDate(), value.getIPatientJourneyReferralReceivedDate());
		}							
		form.patientJourneyControl().setJourneyHeaderText(journeyHeaderText);
				
		int maxWeekNumber = getMaxWeekNumber(value);
		
		MaxWeek m = new MaxWeek();
		m.maxWeekNumber = maxWeekNumber; 		
		addClocks(value.getIPatientJourneyStartDate(), extractClocks(value), m);
		PatientJourneyEntry selectedEntry = null;
		for(int x = 1; x <= m.maxWeekNumber; x++)
		{
			addWeekNumberEntries(value, x, m, selectedEntry);
		}		
		form.patientJourneyControl().scrollToCurrentWeek();
	}
	private void addClocks(Date startDate, IPatientJourneyClock[] clocks, MaxWeek m) 
	{
		clocks = sortClocksByStartDate(clocks);
		
		if(clocks == null)
			return;
		
		Integer startWeekNumber = 0;
		Integer endWeekNumber = 0;				
		Integer todayWeekNumber = calculateWeekNumber(startDate, new Date());		
		int clockCount = 0;
		
		for(int x = 0; x < clocks.length; x++)
		{
			startWeekNumber = calculateWeekNumber(startDate, clocks[x].getIPatientJourneyClockStartDate());
			
			if(startWeekNumber < 1)
				continue;
			
			clockCount++;
			
			if(clocks[x].getIPatientJourneyClockStopDate() != null)
				endWeekNumber = calculateWeekNumber(startDate, clocks[x].getIPatientJourneyClockStopDate());
			else
				endWeekNumber = todayWeekNumber > startWeekNumber ? todayWeekNumber : startWeekNumber;
			
			if (endWeekNumber > m.maxWeekNumber)
			{
				m.maxWeekNumber = endWeekNumber;
			}
				
			PatientJourneyClock clock = form.patientJourneyControl().getClocks().newClock(startWeekNumber, endWeekNumber);
			clock.setIsEnded(clocks[x].getIPatientJourneyClockStopDate() != null);
			clock.setIdentifier(clocks[x]);
			StringBuffer sb = new StringBuffer();
			
			sb.append("Clock ");
			sb.append(clockCount);
			sb.append(": <b>");
			sb.append(clocks[x].getIPatientJourneyClockName() == null ? "" : clocks[x].getIPatientJourneyClockName());
			sb.append("</b><br>");
			sb.append("Start Date: <b>");
			sb.append(clocks[x].getIPatientJourneyClockStartDate());
			sb.append("</b>");
			
			if(clocks[x].getIPatientJourneyClockStopDate() != null)
			{
				sb.append("<br>");
				sb.append("Stop Date: <b>");
				sb.append(clocks[x].getIPatientJourneyClockStopDate());
				sb.append("</b>");
			}
			
			//WDEV-18228
			PauseDetailsVo currentPause = clocks[x].getIPatientJourneyCurrentPause();
			
			if (currentPause != null && Boolean.TRUE.equals(currentPause.getIPauseDetailsIsActive()))
			{
				sb.append("<br><br>");
				sb.append("<b>Pauses:</b>");
			
				if (currentPause.getIPauseDetailsStartDate() != null)
				{
					sb.append("<br>");
					sb.append("Start Date: <b>");
					sb.append(currentPause.getIPauseDetailsStartDate());
					sb.append("</b>");
				}

				if (currentPause.getIPauseDetailsStopDate() != null)
				{
					sb.append("<br>");
					sb.append("Stop Date: <b>");
					sb.append(currentPause.getIPauseDetailsStopDate());
					sb.append("</b><br>");
				}
			}
			
			PauseDetailsVoCollection pauseDetails = clocks[x].getIPatientJourneyPauseDetails();
			
			for (int i = 0; pauseDetails != null && i < pauseDetails.size(); i++)
			{
				PauseDetailsVo pause = pauseDetails.get(i);
				
				if (pause != null && pause.equals(currentPause))//do not add the current pause as it was added as the first pause
					continue;
				
				if (pause != null && Boolean.TRUE.equals(pause.getIPauseDetailsIsActive()))
				{
					
					if (currentPause == null || (currentPause != null && !Boolean.TRUE.equals(currentPause.getIPauseDetailsIsActive())))
					{
						sb.append("<br><br>");
						sb.append("<b>Pauses:</b>");
					}
					
					if (pause.getIPauseDetailsStartDate() != null)
					{
						sb.append("<br>");
						sb.append("Start Date: <b>");
						sb.append(pause.getIPauseDetailsStartDate());
						sb.append("</b>");
					}

					if (pause.getIPauseDetailsStopDate() != null)
					{
						sb.append("<br>");
						sb.append("Stop Date: <b>");
						sb.append(pause.getIPauseDetailsStopDate());
						sb.append("</b><br>");
					}
				}
			}
			
			clock.setTooltip(sb.toString());
		}
		
		return;
	}
	private IPatientJourneyClock[] sortClocksByStartDate(IPatientJourneyClock[] clocks) 
	{
		if(clocks == null)
			return null;
		
		for(int x = 0; x < clocks.length; x++)
		{
			for(int y = x + 1; y < clocks.length; y++)
			{
				IPatientJourneyClock clock1 = clocks[x];
				IPatientJourneyClock clock2 = clocks[y];
				
				if(clock1.getIPatientJourneyClockStartDate().compareTo(clock2.getIPatientJourneyClockStartDate()) > 0)
				{					
					clocks[x] = clock2;
					clocks[y] = clock1;
				}
			}
		}
		
		return clocks;
	}
	private IPatientJourneyClock[] extractClocks(IPatientJourney value) 
	{
		List<IPatientJourneyClock> result = new ArrayList<IPatientJourneyClock>();
		
		for(int x = 0; x < value.getIPatientJourneyJourneyEvents().length; x++)
		{
			IPatientJourneyEvent event = value.getIPatientJourneyJourneyEvents()[x];
			
			IPatientJourneyClock clock = event.getIPatientJourneyEventClock(); 
			if(clock != null && result.indexOf(clock) < 0)
			{
				result.add(clock);
			}
		}
		
		for(int x = 0; x < value.getIPatientJourneyJourneyTargets().length; x++)
		{
			IPatientJourneyTarget target = value.getIPatientJourneyJourneyTargets()[x];
			
			IPatientJourneyClock clock = target.getIPatientJourneyTargetClock(); 
			if(clock != null && result.indexOf(clock) < 0)
			{
				result.add(clock);
			}
		}
		
		IPatientJourneyClock[] clocks = new IPatientJourneyClock[result.size()];
		result.toArray(clocks);
		return clocks;
	}

	private String formatNameForVirtualEvent(IPatientJourneyEvent event)
	{
		return event.getIPatientJourneyEventName() + 						  
				(event.getIPatientJourneyEventDateTime() != null ?  
				(" - <b><i>" + event.getIPatientJourneyEventDateTime() + "</b></i>") : "");
	}
	
	private String formatTooltipForVirtualEvent(IPatientJourneyEvent event)
	{
		return "Name :" + "<b>" + event.getIPatientJourneyEventName() + "</b>" +
		(event.getIPatientJourneyEventDescription() != null && event.getIPatientJourneyEventDescription() != ""? 
		("<br></b>Desc : <b> " + event.getIPatientJourneyEventDescription())  : "" ) +
		("<br><b><i>" + event.getIPatientJourneyEventStatus().toString() + "</b></i>") + 
		(event.getIPatientJourneyEventDateTime() != null ?
		(" - <b><i>" + event.getIPatientJourneyEventDateTime() + "</b></i>") : "" )+				 			
		" </b><br>EventDateTime : " + "<b><i>" + event.getIPatientJourneyEventScheduledDateTime() + "</b></i>" +
		(event.getIPatientJourneyEventSpecialty() != null && event.getIPatientJourneyEventSpecialty() != ""? 
		("   </b><br>Specialty : <b><i>" + event.getIPatientJourneyEventSpecialty() + "</b></i>") : "") +
		(event.getIPatientJourneyEventConsultant() != null && event.getIPatientJourneyEventConsultant() != ""? 
		("<br>Consultant :<b><i>" + event.getIPatientJourneyEventConsultant() + "</b></i>") : "") +
		(event.getIPatientJourneyEventClinicName() != null ?
				("<br> Clinic:<b><i>" + event.getIPatientJourneyEventClinicName() + "</b></i></br>") : "");
	}
			
	private void addWeekNumberEntries(IPatientJourney value, int weekNumber, MaxWeek m, PatientJourneyEntry selectedEntry) 
	{
		IPatientJourneyEvent[] journeyEvents = getJourneyEventsForWeekNumber(value, weekNumber);
		IPatientJourneyTarget[] profileTargets = getProfileTargetsForWeekNumber(value, weekNumber, m);

		int noEntries = journeyEvents.length;
		if(profileTargets.length > noEntries)
			noEntries = profileTargets.length;
		
		PatientJourneyEntry entry = null;
		PatientJourneyMarker marker = form.patientJourneyControl().getMarkers().newMarker(weekNumber);		
		marker.setText("Week " + weekNumber);
		Identifier identifier = null;
		
		for(int x = 0; x < noEntries; x++)
		{
			entry = null;
			IPatientJourneyPathwayTarget pathwayTarget = null;
			IPatientJourneyTarget journeyTarget = null;

			if(profileTargets.length > x)
			{				 
				entry = form.patientJourneyControl().getEntries().newEntry(weekNumber);
				String profileDescription = profileTargets[x].getIPatientJourneyTargetDescription() + "<br><b>Status:</b> " + profileTargets[x].getIPatientJourneyTargetStatus();
				
				journeyTarget = profileTargets[x];
				identifier = new EventIdentifier(null, null, journeyTarget);
				
				if(profileTargets[x].getIPatientJourneyTargetHasReadjustments() != null &&
						profileTargets[x].getIPatientJourneyTargetHasReadjustments().equals(Boolean.TRUE)) {
							profileDescription += "<br><br><b>**** This Target has a Readjustment ****</b><br>";
				}
								
				entry.setProfileText(formatProfileTargets(profileTargets, x));
				if (profileTargets[x].getIPatientJourneyTargetClock() != null &&
						profileTargets[x].getIPatientJourneyTargetClock().getIPatientJourneyClockStartDate() != null &&
							profileTargets[x].getIPatientJourneyTargetAchievedDate() != null)
				{
					entry.setProfileWeekNumberLabel(calculateWeekNumber(profileTargets[x].getIPatientJourneyTargetClock().getIPatientJourneyClockStartDate(),profileTargets[x].getIPatientJourneyTargetAchievedDate().getDate()).toString());
				}
				else if (profileTargets[x].getIPatientJourneyTargetDate() != null &&
							profileTargets[x].getIPatientJourneyTargetClock() != null &&
								profileTargets[x].getIPatientJourneyTargetClock().getIPatientJourneyClockStartDate() != null)
				{
					entry.setProfileWeekNumberLabel(calculateWeekNumber(profileTargets[x].getIPatientJourneyTargetClock().getIPatientJourneyClockStartDate(),profileTargets[x].getIPatientJourneyTargetDate()).toString());
				}
				
				entry.setProfileImage(form.getImages().Blackpool.Target);
				entry.setProfileTooltip(profileDescription);				
				
				rulesForBackground(profileTargets[x], entry, profileDescription);					
			}
			
			if(journeyEvents.length > x)
			{
				if (entry == null)
					entry = form.patientJourneyControl().getEntries().newEntry(weekNumber);
				
				entry.setJourneyWeekNumberVisible(true);
				identifier = new EventIdentifier(journeyEvents[x], pathwayTarget, journeyTarget);
				
				if (journeyEvents[x].getIPatientJourneyEventIsVirtual() != null &&
						journeyEvents[x].getIPatientJourneyEventIsVirtual().equals(Boolean.TRUE))
				{
					entry.setJourneyText(formatNameForVirtualEvent(journeyEvents[x]));
					entry.setJourneyImage(form.getImages().Emergency.ViewHistoryEnabled16);
					entry.setJourneyBackColor(Color.LightBlue);
					entry.setProfileWeekNumberVisible(false);
					entry.setJourneyTooltip(formatTooltipForVirtualEvent(journeyEvents[x]));
				}
				else
				{					
					entry.setJourneyText(formatJourneyEventName(journeyEvents, x));
					entry.setJourneyImage(journeyEvents[x].getIPatientJourneyEventImage());
					entry.setJourneyTooltip(formatJourneyEventTooltip(journeyEvents, x));
					entry.setProfileWeekNumberVisible(profileTargets.length > x);										
				}
			}
		
			if (entry != null)
				entry.setIdentifier(identifier);							
		}		
	}

	private void rulesForBackground(IPatientJourneyTarget target, PatientJourneyEntry entry, String  profileDescription)
	{
		PatientJourneyJourneyTargetInterfaceVo targetVo = (PatientJourneyJourneyTargetInterfaceVo) target;
		Integer profileWarningIndicatorWeeks = targetVo.getPathwayTargetIsNotNull() ? (targetVo.getPathwayTarget().getWarningIndicatorPeriodIsNotNull() ? targetVo.getPathwayTarget().getWarningIndicatorPeriod() : 0) :0;		
		
		Date profileTargetDate = target.getIPatientJourneyTargetDate();
		PatientTargetStatus profileTargetsStatus = target.getIPatientJourneyTargetStatusCode();
		Date profileAchievedDate = target.getIPatientJourneyTargetAchievedDate() != null ? target.getIPatientJourneyTargetAchievedDate().getDate() :  null;
		Date profileScheduledDate = target.getIPatientJourneyTargetScheduledDate();
		Date warrningWeek = new Date(profileTargetDate);
		
		/****************************************************************************************************
		* RED - TARGET HAS PASSED WITH NO SCHEDULED ACTIVITY\EVENTS OR MISSED TARGET WITH FUTURE APPOINTMENTS 
		*****************************************************************************************************/
		/************************************************
		 * 1. TARGET MISSED AND HAS NO SCHEDULED ACTIVITY 
		 ************************************************/
		if ((profileTargetDate != null && 
				profileTargetDate.isLessThan(new Date())) &&
					(profileTargetsStatus != null &&
							profileTargetsStatus.equals(PatientTargetStatus.INSCOPE)))
		{
			entry.setProfileBackColor(Color.Red);
			entry.setProfileTextColor(Color.White);
			profileDescription += "<br><b>Urgent Action Required!</b><br>TARGET MISSED AND HAS NO SCHEDULED ACTIVITY";
			entry.setProfileTooltip(profileDescription.trim());
		}
		/******************************************
		 * TARGET MISSED AND HAS SCHEDULED ACTIVITY 
		 ******************************************/
		else if ((profileTargetDate != null &&
					profileTargetDate.isLessThan(new Date())) &&
						(profileTargetsStatus != null &&
							profileTargetsStatus.equals(PatientTargetStatus.EVENTSCHEDULED)))
		{
			entry.setProfileBackColor(Color.Red);
			entry.setProfileTextColor(Color.White);
			entry.setProfileImage(form.getImages().Emergency.ViewHistoryEnabled16);
			profileDescription += "<br><b>Urgent Action Required!</b><br><b>TARGET MISSED AND HAS SCHEDULED ACTIVITY";
			entry.setProfileTooltip(profileDescription.trim());
		}
		/******************************************
		 * TARGET MISSED AND HAS SCHEDULED ACTIVITY 
		 ******************************************/
		else if ((profileTargetDate != null &&
					profileTargetDate.isLessThan(new Date())) &&
						(profileTargetsStatus != null &&
							profileTargetsStatus.equals(PatientTargetStatus.EVENTCANCELLED)))
		{
			entry.setProfileBackColor(Color.Red);
			entry.setProfileTextColor(Color.White);
			profileDescription += "<br><b>Urgent Action Required!</b><br>TARGET MISSED AND HAS NO SCHEDULED ACTIVITY/EVENT CANCELLED";
			entry.setProfileTooltip(profileDescription.trim());
		}
		
		/***********************
		* AMBER\ORANGE - WILL BE USED TO SHOW TARGETS THAT REQUIRE ACTION IF THE TARGET IS TO BE ACHIEVED BEFORE TARGET DATE (Action Required) 
		************************/
		/**************************************************
 		 *	TARGET SCHEDULED BUT ACTIVITY NEEDS TO BE BROUGHT FORWARD TO ACHIEVE WITHIN THE TARGET DATE 
 		 **************************************************/
		else if ((profileTargetsStatus != null &&
					profileTargetsStatus.equals(PatientTargetStatus.EVENTSCHEDULED)) &&
							(profileScheduledDate != null &&
								profileScheduledDate.isGreaterThan(profileTargetDate)))
								{
									entry.setProfileTextColor(Color.Orange);
									entry.setProfileImage(form.getImages().Emergency.ViewHistoryEnabled16);
									profileDescription += "<br><b>Action Required!</b><br><b>TARGET SCHEDULED BUT ACTIVITY NEEDS TO BE BROUGHT FORWARD TO ACHIEVE WITHIN THE TARGET DATE ";
									entry.setProfileTooltip(profileDescription.trim());
								}
		/**************************************************
		 *	TARGET IN FUTURE BUT HAS NO SCHEDULED ACTIVITY AND TARGET HAS A WEEK WARNING INDICATOR 
		 **************************************************/
		else if ((profileTargetDate != null &&
						profileTargetDate.isGreaterThan(new Date()) &&
							(profileTargetsStatus != null &&
									profileTargetsStatus.equals(PatientTargetStatus.INSCOPE)) &&
										(profileWarningIndicatorWeeks != null &&
												warrningWeek.addDay(profileWarningIndicatorWeeks*7).isLessOrEqualThan(new Date()))))
							{
								entry.setProfileBackColor(Color.Orange);
								entry.setProfileTextColor(Color.Black);
								profileDescription += "<br><b>Action Required!</b><br><b>TARGET IN FUTURE BUT HAS NO SCHEDULED ACTIVITY AND TARGET HAS A WEEK WARNING INDICATOR ";
								entry.setProfileTooltip(profileDescription.trim());
							}
		/******************************************************************
		* GREEN - WILL BE USED TO SHOW TARGETS ACHIEVED, OR SCHEDULED FOR ACHIEVEMENT (No Action Required) 
		************************/
		/********************************************
 		 *	TARGET ACHIEVED (WITHIN TIME PERIOD DEFINED FOR THE PATHWAY) 
 		 ********************************************/
		else if ((profileAchievedDate != null &&
								profileTargetDate != null &&
									profileAchievedDate.isLessOrEqualThan(profileTargetDate)) &&
										(profileTargetsStatus != null &&
												profileTargetsStatus.equals(PatientTargetStatus.TARGETACHIEVED)))
										{											
											entry.setProfileTextColor(Color.DarkGreen);
											profileDescription += "<br>Target date : " + profileTargetDate;
											profileDescription += "<br><b>No Action Required!</b><br><b>TARGET ACHIEVED (WITHIN TIME PERIOD DEFINED FOR THE PATHWAY)";
											entry.setProfileImage(form.getImages().Core.Tick);
											entry.setProfileTooltip(profileDescription.trim());
										}
		/********************************************
 		 *	TARGET ACHIEVED (NOT WITHIN THE TIME PERIOD DEFINED FOR THE PATHWAY)  
 		 ********************************************/						
		else if ((profileAchievedDate != null &&
							profileTargetDate != null &&
								profileAchievedDate.isGreaterThan(profileTargetDate)) &&
									(profileTargetsStatus != null &&
										profileTargetsStatus.equals(PatientTargetStatus.TARGETACHIEVED)))
									{		
										entry.setProfileBackColor(Color.LightGreen);
										entry.setProfileTextColor(Color.Red);
										profileDescription += "<br>Target date : " + profileTargetDate;
										profileDescription += "<br><b>No Action Required!</b><br><b>TARGET ACHIEVED (NOT WITHIN THE TIME PERIOD DEFINED FOR THE PATHWAY)";
										entry.setProfileImage(form.getImages().Core.Tick);
										entry.setProfileTooltip(profileDescription.trim());
									}
		/********************************************
 		 *	TARGET SCHEDULED TO BE ACHIEVED (WITHIN TIME PERIOD DEFINED FOR THE PATHWAY)  
 		 ********************************************/						
		else if ((profileScheduledDate != null &&
							profileTargetDate != null &&
								profileTargetDate.isGreaterOrEqualThan(new Date())) &&
									(profileTargetsStatus != null &&
											profileTargetsStatus.equals(PatientTargetStatus.EVENTSCHEDULED)) &&
												(profileScheduledDate.isLessOrEqualThan(profileTargetDate)))
									{		
										entry.setProfileBackColor(Color.Green);
										profileDescription += "<br>Target date : " + profileTargetDate;
										profileDescription += "<br><b>No Action Required!</b><br><b>TARGET SCHEDULED TO BE ACHIEVED (WITHIN TIME PERIOD DEFINED FOR THE PATHWAY)";
										entry.setProfileImage(form.getImages().Emergency.ViewHistoryEnabled16);
										entry.setProfileTooltip(profileDescription.trim());
									}
		/********************************************
 		 *	BLACK TEXT\WHITE BACKGROUND - WILL BE USED TO SHOW TARGETS THAT ARE NOT SCHEDULED AND ARE NOT WITHIN THE WARNING PERIOD OR HAVE NO WARNING PERIOD   
 		 ********************************************/
		/********************************************
 		 *	TARGET IN FUTURE BUT HAS NO SCHEDULED ACTIVITY AND TARGET HAS NO WEEK WARNING INDICATOR   
 		 ********************************************/
		else if ((profileScheduledDate != null &&
				profileTargetDate != null &&
					profileTargetDate.isGreaterThan(new Date())) &&
						(profileTargetsStatus != null &&
								profileTargetsStatus.equals(PatientTargetStatus.INSCOPE)))
						{		
							profileDescription += "<br><b>TARGET IN FUTURE BUT HAS NO SCHEDULED ACTIVITY AND TARGET HAS NO WEEK WARNING INDICATOR";
							entry.setProfileTooltip(profileDescription.trim());
						}
		/********************************************
 		 *	If the current status of a target is paused then highlight using a different font colour to the existing breach colours.   
 		 ********************************************/		
		else if (profileTargetDate != null &&
					(profileTargetsStatus != null &&
							profileTargetsStatus.equals(PatientTargetStatus.PAUSE))) 
		{
			entry.setProfileBackColor(Color.Violet);
		}
	}

	private String formatProfileTargets(IPatientJourneyTarget[] profileTargets, int x)
	{
		String result = profileTargets[x].getIPatientJourneyTargetName() + 
					"<br>"+ 
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";

		if(profileTargets[x].getIPatientJourneyTargetAchievedDate() != null)
		{
			result += "<i>Target achieved on:</i>" +
			"<b><i>"+ profileTargets[x].getIPatientJourneyTargetAchievedDate()+"</b></i>";
		}
		else
		{
			result += "<i>Target to be met by:</i>" +
			"<b><i>"+ profileTargets[x].getIPatientJourneyTargetDate()+"</b></i>";
		}
		
		return result;
	}

	private String formatJourneyEventTooltip(IPatientJourneyEvent[] journeyEvents, int x)
	{
		return "Name :" + "<b>" + journeyEvents[x].getIPatientJourneyEventName() + "</b>" +
				(journeyEvents[x].getIPatientJourneyEventDescription() != null && journeyEvents[x].getIPatientJourneyEventDescription() != ""? 
				("<br></b>Desc : <b> " + journeyEvents[x].getIPatientJourneyEventDescription())  : "" ) +
				("<br><b><i>" + journeyEvents[x].getIPatientJourneyEventStatus().toString() + "</b></i>") + 
				(journeyEvents[x].getIPatientJourneyEventScheduledDateTime() != null ?
		 		(" - <b><i>" + journeyEvents[x].getIPatientJourneyEventScheduledDateTime() + "</b></i>") : "" )+				 			
		 		" </b><br>EventDateTime : " + "<b><i>" + journeyEvents[x].getIPatientJourneyEventDateTime() + "</b></i>" +
		 		(journeyEvents[x].getIPatientJourneyEventSpecialty() != null && journeyEvents[x].getIPatientJourneyEventSpecialty() != ""? 
		 		("   </b><br>Specialty : <b><i>" + journeyEvents[x].getIPatientJourneyEventSpecialty() + "</b></i>") : "") +
		 		(journeyEvents[x].getIPatientJourneyEventConsultant() != null && journeyEvents[x].getIPatientJourneyEventConsultant() != ""? 
		 		("<br>Consultant :<b><i>" + journeyEvents[x].getIPatientJourneyEventConsultant() + "</b></i>") : "") +
				(journeyEvents[x].getIPatientJourneyEventClinicName() != null ?
						("<br> Clinic:<b><i>" + journeyEvents[x].getIPatientJourneyEventClinicName() + "</b></i></br>") : "");

	}
	private String formatJourneyEventName(IPatientJourneyEvent[] journeyEvents, int x)
	{
		// wdev-7351 - if status is unlinked, show this status too, in blue
		String eventName = journeyEvents[x].getIPatientJourneyEventName() + 						  
		 			(journeyEvents[x].getIPatientJourneyEventScheduledDateTime() != null ?  
		 			(" - <b><i>" + journeyEvents[x].getIPatientJourneyEventScheduledDateTime() + "</b></i>") :
		 			(" - [<i>" + journeyEvents[x].getIPatientJourneyEventDateTime() + "</i>]"));
		
		if (journeyEvents[x].getIPatientJourneyEventStatus() != null &&
		 					journeyEvents[x].getIPatientJourneyEventStatus().equals(EventStatus.CANCELLED_EVT))
			eventName += "<b><font color=red>&nbsp;&nbsp;Cancelled</b></font>";
		else if (journeyEvents[x].getIPatientJourneyEventStatus() != null &&
					journeyEvents[x].getIPatientJourneyEventStatus().equals(EventStatus.UNLINKED_EVT))
			eventName += "<b><font color=blue>&nbsp;&nbsp;Unlinked</b></font>";
		
		return eventName;
//		return journeyEvents[x].getIPatientJourneyEventName() + 						  
//		 			(journeyEvents[x].getIPatientJourneyEventScheduledDateTime() != null ?  
//		 			(" - <b><i>" + journeyEvents[x].getIPatientJourneyEventScheduledDateTime() + "</b></i>") :
//		 			(" - [<i>" + journeyEvents[x].getIPatientJourneyEventDateTime() + "</i>]")) + 
//		 			(((journeyEvents[x].getIPatientJourneyEventStatus() != null &&
//		 					journeyEvents[x].getIPatientJourneyEventStatus().equals(EventStatus.CANCELLED_EVT)) ? 
//		 							 "<b><font color=red>&nbsp;&nbsp;Cancelled</b></font>" : "" ));
	}
	
	public Integer calculateWeekNumber(ims.framework.utils.Date startDate, ims.framework.utils.Date targetDate) 
	{
		if(startDate == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid start date");
		if(targetDate == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid target date");
		
		long curr = targetDate.getDate().getTime();
		long start = startDate.getDate().getTime();			
		long noDays = (curr - start) / (1000*60*60*24);
					
		return ((int)noDays / 7) + 1;
	}
	
	private IPatientJourneyEvent[] getJourneyEventsForWeekNumber(IPatientJourney value, int weekNumber) 
	{
		ArrayList<IPatientJourneyEvent> list = new ArrayList<IPatientJourneyEvent>();
		
		IPatientJourneyEvent[] events = value.getIPatientJourneyJourneyEvents();
		if(events != null)
		{
			for(int x = 0; x < events.length; x++)
			{
				if(events[x].getIPatientJourneyEventWeekNumber(value.getIPatientJourneyStartDate()) == weekNumber &&
						events[x].getIPatientJourneyEventStatus() != null &&
							!events[x].getIPatientJourneyEventStatus().equals(EventStatus.RIE))
				{
					list.add(events[x]);
				}
			}
		}
			
		IPatientJourneyEvent[] result = new IPatientJourneyEvent[list.size()];
		for(int x = 0; x < list.size(); x++)
			
		{
			result[x] = list.get(x);
		}
		
		java.util.Arrays.sort(result, new AchievedDateComparator());
		
		return result;
	}
	
	private IPatientJourneyTarget[] getProfileTargetsForWeekNumber(IPatientJourney value, int weekNumber, MaxWeek m) 
	{
		ArrayList<IPatientJourneyTarget> list = new ArrayList<IPatientJourneyTarget>();
		
		IPatientJourneyTarget[] targets = value.getIPatientJourneyJourneyTargets();
		
		if(targets != null)
		{
			for(int x = 0; x < targets.length; x++)
			{
				// WDEV-3938
				// If the clock is stopped and the target does not have
				// an achieved date it will not get displayed.
				
				if(targets[x].getIPatientJourneyTargetClock() != null &&
				   targets[x].getIPatientJourneyTargetClock().getIPatientJourneyClockStopDate() != null &&
				   targets[x].getIPatientJourneyTargetAchievedDate() == null)
				{
					continue;
				}
				
				if(targets[x].getIPatientJourneyTargetStatus() != null && targets[x].getIPatientJourneyTargetStatus().equals(ims.pathways.vo.lookups.PatientTargetStatus.NOTINSCOPE.toString()))
				{
					continue;
				}
				
				// WDEV-8071 - do not display these targets
				if(targets[x].getIPatientJourneyTargetStatus() != null && targets[x].getIPatientJourneyTargetStatus().equals(ims.pathways.vo.lookups.PatientTargetStatus.INSCOPE_PREV_PATHWAY.toString()))
				{
					continue;
				}

				
				int targetWeekNumber = calculateWeekNumber(value.getIPatientJourneyStartDate(), targets[x].getIPatientJourneyTargetDate());				
				if(targets[x].getIPatientJourneyTargetAchievedDate() != null)
				{
					targetWeekNumber = calculateWeekNumber(value.getIPatientJourneyStartDate(), 
							targets[x].getIPatientJourneyTargetAchievedDate() != null ? targets[x].getIPatientJourneyTargetAchievedDate().getDate() : null);
				}
				
				if (targetWeekNumber > m.maxWeekNumber)
				{
					m.maxWeekNumber = targetWeekNumber;
				}
				
				if(targetWeekNumber == weekNumber)
				{
					list.add(targets[x]);
				}
			}
		}
		
		IPatientJourneyTarget[] result = new IPatientJourneyTarget[list.size()];
		for(int x = 0; x < list.size(); x++)
		{
			result[x] = list.get(x);	
		}
		
		java.util.Arrays.sort(result, new AchievedDateComparator());
		
		return result;
	}
	
	public class AchievedDateComparator implements Comparator<Object>
	{
		public int compare(Object o1, Object o2)
		{
			DateTime achievedDate1 = null;
			DateTime achievedDate2 = null;
			
			if(o1 instanceof IPatientJourneyTarget)
			{
				IPatientJourneyTarget obj1 = ((IPatientJourneyTarget)o1);
				achievedDate1 = obj1.getIPatientJourneyTargetAchievedDate() != null ? obj1.getIPatientJourneyTargetAchievedDate() : null;
				IPatientJourneyTarget obj2 = ((IPatientJourneyTarget)o2);
				achievedDate2 = obj2.getIPatientJourneyTargetAchievedDate() != null ? obj2.getIPatientJourneyTargetAchievedDate() : null;
			}

			if(o1 instanceof IPatientJourneyEvent)
			{
				IPatientJourneyEvent obj1 = ((IPatientJourneyEvent)o1);
				if (obj1.getIPatientJourneyEventIsVirtual() != null &&
						obj1.getIPatientJourneyEventIsVirtual().equals(Boolean.TRUE))
				{
					achievedDate1 = obj1.getIPatientJourneyEventDateTime() != null ? obj1.getIPatientJourneyEventDateTime() : null;
				}
				else
				{
					achievedDate1 = obj1.getIPatientJourneyEventDateTime() != null ? obj1.getIPatientJourneyEventDateTime() : null;
				}
				IPatientJourneyEvent obj2 = ((IPatientJourneyEvent)o2);
				if (obj2.getIPatientJourneyEventIsVirtual() != null &&
						obj2.getIPatientJourneyEventIsVirtual().equals(Boolean.TRUE))
				{
					achievedDate2 = obj2.getIPatientJourneyEventDateTime() != null ? obj2.getIPatientJourneyEventDateTime() : null;
				}
				else
				{
					achievedDate2 = obj2.getIPatientJourneyEventDateTime() != null ? obj2.getIPatientJourneyEventDateTime() : null;
				}
				
			}
			
			
			if(achievedDate1 != null)
				return achievedDate1.compareTo(achievedDate2);
			
			if(achievedDate2 != null)
				return achievedDate2.compareTo(achievedDate1);
						
			return 0;
		}
	}
	
	
	private int getMaxWeekNumber(IPatientJourney value) 
	{
		int maxWeekNumber = 0;
		
		IPatientJourneyEvent[] events = value.getIPatientJourneyJourneyEvents();
		if(events != null)
		{
			for(int x = 0; x < events.length; x++)
			{
				int weekNumber = events[x].getIPatientJourneyEventWeekNumber(value.getIPatientJourneyStartDate());
				if(weekNumber > maxWeekNumber)
					maxWeekNumber = weekNumber;
			}
		}
		
		IPatientJourneyTarget[] targets = value.getIPatientJourneyJourneyTargets();
		if(targets != null)
		{
			for(int x = 0; x < targets.length; x++)
			{
				int weekNumber = targets[x].getIPatientJourneyTargetWeekNumber();
				if(weekNumber > maxWeekNumber)
					maxWeekNumber = weekNumber;
					
			}
		}
		
		IPatientJourneyPathwayTarget[] pathwayTargets = value.getIPatientJourneyPathwayTargets();
		pathwayTargets = value.getIPatientJourneyPathwayTargets();
		if(pathwayTargets != null)
		{
			for(int x = 0; x < pathwayTargets.length; x++)
			{
				int weekNumber = pathwayTargets[x].getIPatientJourneyPathwayTargetWeekNumber();
				if(weekNumber > maxWeekNumber)
					maxWeekNumber = weekNumber;
					
			}
		}
		
		if(maxWeekNumber < value.getIPatientJourneyNumberOfWeeks())
			return value.getIPatientJourneyNumberOfWeeks();
		
		return maxWeekNumber;
	}
	private void setContextMenu(PatientJourneyEntry entry) 
	{
		boolean filterByPatientJourneyTargetOrEvent = false;
		boolean filterByPathwayTarget = false;
		boolean filtered = form.getLocalContext().getFiltered() != null && form.getLocalContext().getFiltered().booleanValue(); 
		boolean isJourneyTarget = false;
		boolean hasReadjustments = false;
		
		if(!filtered)
		{
			Identifier identifier = null;		
			if(entry != null)
			{
				identifier = (Identifier)entry.getIdentifier();
				
				if (identifier != null)
				{
					filterByPatientJourneyTargetOrEvent = identifier.getJourneyTargetOrEvent() != null;
					filterByPathwayTarget = identifier.getPathwayTarget() != null;
					
					PatientJourneyEntry selectedEntry = form.patientJourneyControl().getSelectedEntry();
					if(selectedEntry != null)
					{
						Identifier selectedIdentifier = (Identifier)selectedEntry.getIdentifier();
						
							isJourneyTarget = ((EventIdentifier)selectedIdentifier).getJourneyTarget() != null ? true : false;
							hasReadjustments = ((EventIdentifier)selectedIdentifier).getJourneyTarget() != null ? 									
									(((EventIdentifier)selectedIdentifier).getJourneyTarget().getIPatientJourneyTargetHasReadjustments() != null? 
											((EventIdentifier)selectedIdentifier).getJourneyTarget().getIPatientJourneyTargetHasReadjustments() : false) : false;
						
					}
				}				
			}
		}
					
		form.getContextMenus().Core.getPatientJourneyCustomControlFilterByJourneyTargetOrEventItem().setVisible(filterByPatientJourneyTargetOrEvent);
		form.getContextMenus().Core.getPatientJourneyCustomControlFilterByPathwayTargetItem().setVisible(filterByPathwayTarget);
		form.getContextMenus().Core.getPatientJourneyCustomControlResetFilterItem().setVisible(filtered);
		form.getContextMenus().Core.getPatientJourneyCustomControlAddEventToTargetItem().setVisible(filterByPathwayTarget);
		form.getContextMenus().Core.getPatientJourneyCustomControlAddReadjustmentItem().setVisible(isJourneyTarget);
		form.getContextMenus().Core.getPatientJourneyCustomControlEditReadjustmentItem().setVisible(isJourneyTarget && hasReadjustments);
	}
	private void filterByJourneyTargetOrEvent()
	{
		PatientJourneyEntry selectedEntry = form.patientJourneyControl().getSelectedEntry();
		if(selectedEntry == null)
			return;
		
		Identifier selectedIdentifier = (Identifier)selectedEntry.getIdentifier();
		if(selectedIdentifier.getJourneyTargetOrEvent() == null)
			return;
		
		IPatientJourneyTarget selectedTarget = null;
		if(selectedIdentifier instanceof TargetIdentifier)
		{
			selectedTarget = ((TargetIdentifier)selectedIdentifier).getTarget();
		}
		else if(selectedIdentifier instanceof EventIdentifier && ((EventIdentifier)selectedIdentifier).getEvent() != null)
		{
			selectedTarget = ((EventIdentifier)selectedIdentifier).getEvent().getIPatientJourneyEventTarget();
		}
		
		setFilter();		
		
		selectedEntry.setJourneyTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
		selectedEntry.setJourneyBackColor(FILTERHIGHLIGHTEDBACKCOLOR);			
		
		PatientJourneyEntries entries = form.patientJourneyControl().getEntries();
		for(int x = 0; x < entries.size(); x++)
		{
			PatientJourneyEntry entry = entries.get(x);			
			Identifier identifier = (Identifier)entry.getIdentifier();
			
			if(identifier != null && selectedTarget != null)
			{
				if(selectedTarget.getIPatientJourneyTargetEvents() != null)
				{
					for(int i = 0; i < selectedTarget.getIPatientJourneyTargetEvents().length; i++)
					{
						if(selectedTarget.getIPatientJourneyTargetEvents()[i] != null && selectedTarget.getIPatientJourneyTargetEvents()[i].equals(identifier.getJourneyTargetOrEvent()))
						{
							entry.setJourneyTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
							entry.setJourneyBackColor(FILTERHIGHLIGHTEDBACKCOLOR);
							break;
						}
					}
				}
				if(selectedTarget.getIPatientJourneyTargetPathwayTarget() != null && selectedTarget.getIPatientJourneyTargetPathwayTarget().equals(identifier.getPathwayTarget()))
				{
					entry.setProfileTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
					entry.setProfileBackColor(FILTERHIGHLIGHTEDBACKCOLOR);
				}
				if(selectedTarget.equals(identifier.getJourneyTargetOrEvent()))
				{
					entry.setJourneyTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
					entry.setJourneyBackColor(FILTERHIGHLIGHTEDBACKCOLOR);
				}
			}									
		}
	}
	private void filterByPathwayTarget()
	{		
		PatientJourneyEntry selectedEntry = form.patientJourneyControl().getSelectedEntry();
		if(selectedEntry == null)
			return;
		
		Identifier selectedIdentifier = (Identifier)selectedEntry.getIdentifier();
		if(selectedIdentifier.getPathwayTarget() == null || selectedIdentifier.getJourneyTargetOrEvent() == null)
			return;
		
		setFilter();		
		
		selectedEntry.setProfileTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
		selectedEntry.setProfileBackColor(FILTERHIGHLIGHTEDBACKCOLOR);
		
		PatientJourneyEntries entries = form.patientJourneyControl().getEntries();
		for(int x = 0; x < entries.size(); x++)
		{
			PatientJourneyEntry entry = entries.get(x);			
			Identifier identifier = (Identifier)entry.getIdentifier();
			
			if(identifier != null && 
					selectedIdentifier.getPathwayTarget().equals(identifier.getPathwayTarget()))
			{
				entry.setJourneyTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
				entry.setJourneyBackColor(FILTERHIGHLIGHTEDBACKCOLOR);				
			}									
			if(identifier instanceof TargetIdentifier && 
					((TargetIdentifier)identifier).getTarget() != null && 
					((TargetIdentifier)identifier).getTarget().getIPatientJourneyTargetPathwayTarget() != null && 
					((TargetIdentifier)identifier).getTarget().getIPatientJourneyTargetPathwayTarget().equals(selectedIdentifier.getPathwayTarget()))
			{
				entry.setJourneyTextColor(FILTERHIGHLIGHTEDTEXTCOLOR);
				entry.setJourneyBackColor(FILTERHIGHLIGHTEDBACKCOLOR);				
			}
		}
	}
	private void setFilter()
	{
		setOrResetFilter(true);
	}
	private void resetFilter()
	{
		setOrResetFilter(false);
		//WDEV-3934
		if(form.getLocalContext().getIPatientJourneyIsNotNull())
		{
			clear();
			populate(form.getLocalContext().getIPatientJourney());
		}
	}
	private void setOrResetFilter(boolean set)
	{	
		PatientJourneyEntries entries = form.patientJourneyControl().getEntries();
		
		for(int x = 0; x < entries.size(); x++)
		{
			PatientJourneyEntry entry = entries.get(x);
			entry.setProfileTextColor(set ? FILTERHIDDEDTEXTCOLOR : Color.Default);
			entry.setJourneyTextColor(set ? FILTERHIDDEDTEXTCOLOR : Color.Default);			
			entry.setJourneyBackColor(Color.Default);
			entry.setProfileBackColor(Color.Default);
			entry.setSelectable(!set);
		}
		
		form.getLocalContext().setFiltered(set);
		setContextMenu(form.patientJourneyControl().getSelectedEntry());
	}
	
	public PatientJourneyAction getLastAction()
	{
		return form.getLocalContext().getLastAction();
		
	}
	
	public IPatientJourneyPathwayTarget getSelectedJourneyTarget()
	{
		if(form.patientJourneyControl().getSelectedEntry() != null && form.patientJourneyControl().getSelectedEntry().getIdentifier() != null)
		{
			if(form.patientJourneyControl().getSelectedEntry().getIdentifier() instanceof TargetIdentifier)
			{
				return ((TargetIdentifier)form.patientJourneyControl().getSelectedEntry().getIdentifier()).getPathwayTarget();
			}
		}
		
		return null;
	}
	
	
	public IPatientJourneyTarget getSelectedPatientJourneyEventTarget()
	{
		if(form.patientJourneyControl().getSelectedEntry() != null && form.patientJourneyControl().getSelectedEntry().getIdentifier() != null)
		{
			if(form.patientJourneyControl().getSelectedEntry().getIdentifier() instanceof EventIdentifier)
			{
				return  ((EventIdentifier)form.patientJourneyControl().getSelectedEntry().getIdentifier()).getJourneyTarget();
			}
		}
		
		return null;		
	}		
}
