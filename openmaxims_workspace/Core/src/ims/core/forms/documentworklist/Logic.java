//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 3947.28740)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.documentworklist;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.documentworklist.GenForm.grdDocumentsRow;
import ims.core.helper.ConversionHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AppSiteVo;
import ims.core.vo.ClinicLiteVoCollection;
import ims.core.vo.DocumentAndPatientWrapperVo;
import ims.core.vo.DocumentAndPatientWrapperVoCollection;
import ims.core.vo.DocumentWorklistSearchCriteriaVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentforDocumentWorklistVo;
import ims.core.vo.PatientDocumentforDocumentWorklistVoCollection;
import ims.core.vo.PatientForDocumentWorklistVo;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientIdListVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ApplicationSiteName;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentEmailStatus;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PatIdType;
import ims.correspondence.vo.PatientDocumentErrorVo;
import ims.correspondence.vo.PatientDocumentErrorVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.nio.channels.FileLock;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Comparator;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;

public class Logic extends BaseLogic
{
	private static final String NEW_DOCUMENT = "NEW_DOCUMENT_FROM_PATIENT_DOCUMENTS";
	private static final String EMAIL_SUBJECT = " Patient Data - ";//WDEV-13753,wdev-16298
	private static final String AUTHORING_HCP = "Authoring HCP";//WDEV-14174
	private static final int AUTHORING_HCP_COLUMN = 4;//WDEV-14174

	private static String SMTP_HOST_NAME;
	private static int SMTP_PORT;
	private static String SMTP_AUTH;
	private static String emailFromAddress;
	private String errorS = null;
	
	private static final String CHECKOUT_FOLDER = "CheckOut"; //WDEV-13366
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		open(true);
		
		//WDEV-12643
		if(args != null && args.length > 0)
		{
			if(NEW_DOCUMENT.equals(args[0]))
				newInstance();
		}
	}

	//WDEV-12643
	private void newDocument() throws PresentationLogicException 
	{
		if(form.grdDocuments().getValue() instanceof PatientDocumentforDocumentWorklistVo || form.getGlobalContext().Core.getPatientShortIsNotNull())//	WDEV-13794
		{
			selectPatient(form.grdDocuments().getValue() instanceof PatientDocumentforDocumentWorklistVo ? form.grdDocuments().getValue().getPatient() : form.getGlobalContext().Core.getPatientShort());
			newInstance();
		}
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.LocalSettingsDialog))
		{
			if (DialogResult.OK.equals(result) && form.getLocalContext().getShouldOpenAfterPathIsSetIsNotNull() && form.getLocalContext().getShouldOpenAfterPathIsSet())
			{
				form.getLocalContext().setShouldOpenAfterPathIsSet(false);
				String path = engine.getLocalSettings().getWordEditorPath();

				if (path != null && path.length() > 0)
					openDocForEditFromWorkArea(form.getLocalContext().getSelectedDocument());

			}
			return;

		}
		if (formName.equals(form.getForms().Core.PatientCorrespondenceTemplates))
		{
			if(result.equals(DialogResult.OK))
			{
				form.getLocalContext().setSelectedDocument(form.getGlobalContext().Core.getPatientCorrespondence());
				editInstance();
			}
			else
			{
				if (!form.chkClear().getValue())   //wdev-15927
					form.getGlobalContext().Core.setPatientShort(null);
			}
		}
		if (formName.equals(form.getForms().Core.PatientDocumentEdit))
		{
			form.getLocalContext().setSelectedDocument(form.getGlobalContext().Core.getPatientCorrespondence());
			if (!form.chkClear().getValue())
				form.getGlobalContext().Core.setPatientShort(null);//WDEV-12232
		}
		if (formName.equals(form.getForms().Core.PatientDocumentView))
		{
			if (!form.chkClear().getValue())
				form.getGlobalContext().Core.setPatientShort(null);//WDEV-12232
		}
		if (formName.equals(form.getForms().Core.MultiPrintDialog))
		{
			if (form.getGlobalContext().Core.getPatientDocumentsErrorsIsNotNull() && form.getGlobalContext().Core.getPatientDocumentsErrors().size() > 0)
			{
				engine.open(form.getForms().Core.PatientDocumentErrors,new Object[]{form.getGlobalContext().Core.getPatientDocumentsErrors()});
				form.getGlobalContext().Core.setPatientDocumentsErrors(null);
			}
			if (form.getLocalContext().getNotBatchPrintIsNotNull() && form.getLocalContext().getNotBatchPrint().booleanValue())
			{
				if (!form.chkClear().getValue())
					form.getGlobalContext().Core.setPatientShort(null);//WDEV-12232
			}
			
			form.getLocalContext().setNotBatchPrint(null);
		}

		open();
	}

	@Override
	protected void onQmbClinicTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchClinics(value);
	}

	

	@Override
	protected void onBtnBatchCClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.ClinicLetterBatchCreate);
	}

	/*@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}*/

	@Override
	protected void onGrdDocumentsSelectionChanged()
	{
		getPatientGp();//	WDEV-14174
		gridSelectionChanged();
	}

	//	WDEV-14174
	private void getPatientGp() 
	{
		if(form.grdDocuments().getValue() == null)
		{
			form.getLocalContext().setPatientGP(null);
			return;
		}
		
		form.getLocalContext().setPatientGP(domain.getPatientGp(form.grdDocuments().getValue().getPatient()));

		if (form.getLocalContext().getPatientGP() == null)
			return;

		String gpMail = getGpMailAddress(form.getLocalContext().getPatientGP());

		if (gpMail == null || gpMail.length() == 0)
		{
			form.getLocalContext().setPatientGP(null);
			return;
		}
	}

	@Override
	protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbClinic().clear();
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.getLocalContext().setSelectedDocument(null);
		form.getLocalContext().setOldSelectedDocument(null);//WDEV-13546
		form.getGlobalContext().Core.setPatientShort(null);//wdev-14503
		clearSearchCriteria();
		updateControlsState();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedDocument(null);
		form.getLocalContext().setOldSelectedDocument(null);//WDEV-13546
		if (doSearch(true))
		{

			form.getGlobalContext().Core.setDocumentWorklistSearchCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if(!loadSelectedDocument())//	WDEV-13546
			return;
		
		switch (menuItemID)
		{
			//wdev-12643
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.NEW_DOCUMENT:
				newDocument();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.EDIT:
				editInstance();
			break;
				
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.DELETE:
				//WDEV-15509
				form.getLocalContext().setDeleteDocumentMessageConfirmationId(engine.showMessage("Do you really want to delete this document?", "Confirm Document Delete", MessageButtons.YESNO, MessageIcon.INFORMATION));
				//deleteInstance();
			break;
			
			//wdev-12643
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SELECT_PATIENT:
				viewDemographic();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.VIEW:
				viewInstance();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.PRINT:
				printInstance();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.EMAIL:
				DocumentEmailStatus emailStatus = emailInstance(); //	WDEV-14174
				updatePatientDocumentWithEmailStatus(emailStatus);//	WDEV-14174
				
				open();//	WDEV-14174
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.FOR_REVIEW:
				form.getLocalContext().setSelectedDocument(changeStatus(DocumentStatus.FOR_REVIEW, form.getLocalContext().getSelectedDocument(), true,false));
				
				open();
			break;
			
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.FOR_UPDATE:
				form.getLocalContext().setSelectedDocument(changeStatus(DocumentStatus.FOR_UPDATE, form.getLocalContext().getSelectedDocument(), true,false));
				
				open();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND:
				form.getLocalContext().setSelectedDocument(changeStatus(DocumentStatus.READY_TO_SEND, form.getLocalContext().getSelectedDocument(), true,false));
				
				open();
				break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.COMPLETED:
				form.getLocalContext().setSelectedDocument(changeStatus(DocumentStatus.COMPLETED, form.getLocalContext().getSelectedDocument(), true,false));
			
				open();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_PRINT:
				batchPrint(DocumentStatus.COMPLETED);//	WDEV-14174
			break;
			
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_EMAIL:
				batchEmail(DocumentStatus.COMPLETED);//	WDEV-14174
			break;
			
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_COMPLETE:
				batchChangeStatus();
			break;

			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SETPATH:
				changePath();
			break;
				
			//	WDEV-14174
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SELECT_ALL:
				selectAll();
			break;
			
			//	WDEV-14174
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.DESELECT_ALL:
				deselectAll();
			break;
			
			//	WDEV-14174
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SENT_BATCH_PRINT:
				batchPrint(DocumentStatus.READY_TO_SEND);
			break;
			
			//	WDEV-14174
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND_BATCH_EMAIL:
				batchEmail(DocumentStatus.READY_TO_SEND);
			break;
			
			//	WDEV-14174
			case GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND_BATCH:
				batchPrintAndEmail(DocumentStatus.READY_TO_SEND);
			break;
			
			default:
			break;
		}
		
		updateControlsState();//WDEV-14174
	}

	//	WDEV-14174
	private void updatePatientDocumentWithEmailStatus(DocumentEmailStatus emailStatus) 
	{
		if(emailStatus == null)
			return;
		
		if(form.getLocalContext().getSelectedDocument() != null)
		{
			try 
			{
				form.getLocalContext().getSelectedDocument().setEmailStatus(emailStatus);
				String[] errors = form.getLocalContext().getSelectedDocument().validate();
				if(errors != null && errors.length > 0)
				{
					engine.showErrors(new String[] {"Patient document could not be updated with 'Sent Email' status."});
					open();
					return;
				}
				
				domain.savePatientDocument(form.getLocalContext().getSelectedDocument());
			} 
			catch (StaleObjectException e)
			{
				e.printStackTrace();
				engine.showErrors(new String[] {"Patient document could not be updated with 'Sent Email' status."});
			}
		}
	}

	//	WDEV-14174
	private void batchPrintAndEmail(DocumentStatus status) 
	{
		if (!areDocumentsSelected())
		{
			engine.showMessage("Please select some documents first");
			return;
		}
		
		DocumentAndPatientWrapperVoCollection docs = getSelectedDocsWithPatient();

		PatientDocumentErrorVoCollection errors = lockDraftDocuments(docs, status);

		errors = email(docs, errors);
		errors = savePatientDocuments(docs, errors, false);// 	WDEV-15599
		print(docs, errors);
	}

	//	WDEV-14174
	private void deselectAll() 
	{
		for(int i=0; i<form.grdDocuments().getRows().size(); i++)
		{
			form.grdDocuments().getRows().get(i).setSelect(false);
		}
	}

	//	WDEV-14174
	private void selectAll() 
	{
		for(int i=0; i<form.grdDocuments().getRows().size(); i++)
		{
			form.grdDocuments().getRows().get(i).setSelect(true);
		}
	}

	//wdev-12643
	private void viewDemographic() 
	{
		if(form.grdDocuments().getValue() instanceof PatientDocumentforDocumentWorklistVo)
		{
			selectPatient(form.grdDocuments().getValue().getPatient());
			engine.open(ConfigFlag.UI.DEMOGRAPHICS_FORM.getValue());
		}
	}

	private boolean loadSelectedDocument()
	{
		form.getLocalContext().setOldSelectedDocument(form.grdDocuments().getValue());//WDEV-13546
		
		if (form.grdDocuments().getValue() != null)
		{
			try
			{
				form.getLocalContext().setSelectedDocument(domain.getPatientDocument(form.grdDocuments().getValue()));
			}	
			catch (StaleObjectException e)
			{
				engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
				form.getLocalContext().setSelectedDocument(null);
				form.getLocalContext().setOldSelectedDocument(null);//WDEV-13546
				open();
				return false;//	WDEV-13546
			}
		}
		
		return true;//	WDEV-13546
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{

		if (form.getLocalContext().getContinueEditMessageBoxIdIsNotNull() && messageBoxId == form.getLocalContext().getContinueEditMessageBoxId())
		{
			form.getLocalContext().setContinueEditMessageBoxId(null);
			if (result.equals(DialogResult.YES))
			{
				openDocForEditFromWorkArea(form.getLocalContext().getSelectedDocument());
			}
			else
			{
				if (result.equals(DialogResult.NO))
	
				{
    				try
    				{
    					String error = undoCheckOut(form.getLocalContext().getSelectedDocument());
    					if (error != null)
    						engine.showErrors(new String[] { error });
    				}
    				catch (StaleObjectException e)
    				{
    					engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
    				}
				}
				open();
			}

		}
		
		//WDEV-15509
		//Confirmation dialog when deleting a document
		if (form.getLocalContext().getDeleteDocumentMessageConfirmationIdIsNotNull() && messageBoxId == form.getLocalContext().getDeleteDocumentMessageConfirmationId())
		{
			form.getLocalContext().setDeleteDocumentMessageConfirmationId(null);
			if (result.equals(DialogResult.YES))
			{
					deleteInstance();
			}
			else
			{
				open();
			}
		}

	}


	private void searchClinics(String value)
	{
		if (form.cmbLocation().getValue() == null)
		{
			engine.showMessage("Please select a Location");
			form.cmbLocation().setFocus();
			return;
		}
		loadClinicsbyLocation(form.cmbLocation().getValue(), value);
	}

	private void loadClinicsbyLocation(ILocation iLocation, String strClinicName)
	{
		form.qmbClinic().clear();

		if (iLocation != null)
		{
			ClinicLiteVoCollection voClinicLiteColl = domain.listClinicsforLocation(iLocation, strClinicName);

			if (voClinicLiteColl != null)
			{
				for (int i = 0; i < voClinicLiteColl.size(); i++)
				{
					form.qmbClinic().newRow(voClinicLiteColl.get(i), voClinicLiteColl.get(i).getClinicName());
				}
				if (voClinicLiteColl.size() == 1)
					form.qmbClinic().setValue(voClinicLiteColl.get(0));
				else if (voClinicLiteColl.size() > 1)
					form.qmbClinic().showOpened();
			}
		}

	}

	private void batchPrint(DocumentStatus status)//	WDEV-14174
	{
		form.getLocalContext().setNotBatchPrint(false);
		if (!areDocumentsSelected())
		{
			engine.showMessage("Please select some documents first");
			return;
		}

		DocumentAndPatientWrapperVoCollection docs = getSelectedDocsWithPatient();

		PatientDocumentErrorVoCollection errors = lockDraftDocuments(docs, status);//	WDEV-14174

		print(docs, errors);
	}

	private boolean areDocumentsSelected()
	{
		for (int i = 0; i < form.grdDocuments().getRows().size(); i++)
		{
			if (form.grdDocuments().getRows().get(i).getSelect())
				return true;
		}
		
		return false;
	}

	private boolean areNonReadyToSendDocumentsSelected()
	{
		for (int i = 0; i < form.grdDocuments().getRows().size(); i++)
		{
			if (form.grdDocuments().getRows().get(i).getSelect() && !DocumentStatus.READY_TO_SEND.equals(form.grdDocuments().getRows().get(i).getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
				return true;
		}
		return false;
	}

	//	WDEV-14174
	private PatientDocumentErrorVoCollection email(DocumentAndPatientWrapperVoCollection docsForEmail, PatientDocumentErrorVoCollection errors)
	{
		if (docsForEmail == null)
			return errors;//	WDEV-14174,  	WDEV-15599

		for (int i = 0; i < docsForEmail.size(); i++)
		{
			PatientDocumentVo doc = docsForEmail.get(i).getDocument();
			GpLiteVo patientGp = domain.getPatientGp(doc.getPatient());
			errorS = null;
			if (patientGp == null)
			{
				errorS = "Could not email document.\n"+(docsForEmail.get(i) != null ? docsForEmail.get(i).getPatient().getName().toString() : null) + " doesn't have a Gp.";
			}
			else
			{
				String gpMail = getGpMailAddress(patientGp);

				if (gpMail == null || gpMail.length() == 0)
				{
					errorS = "Could not email document.\nPatient's Gp, " + (patientGp.getName() != null ? patientGp.getName().toString() : null) + ", doesn't have an email address.\n";

				}
				else
				{

					//String emailSubjectTxt = EMAIL_SUBJECT + docsForEmail.get(i).getPatient().getName().getSurname();//WDEV-13753
					String emailSubjectTxt = null;
					//wdev-16298
					try 
					{ 
						AppSiteVo site = domain.getSite();
						if(site.getSite().equals(ApplicationSiteName.RCHT))
						{
							emailSubjectTxt = EMAIL_SUBJECT + getnhsNumber(docsForEmail.get(i).getPatient().getIdentifiers()) + " - Hospital Correspondence";
						}
						else
						{
							emailSubjectTxt = EMAIL_SUBJECT + docsForEmail.get(i).getPatient().getName().getSurname();//WDEV-13753
						}
					
					} 
					catch (DomainInterfaceException e) 
					{ 
						engine.showMessage(e.getMessage()); 
					} 
					//-----------
					
					
					// name
					String emailMsgTxt = "Patient Document";
					String attachFile = null;

					ServerDocumentVo document = doc.getServerDocument();
					if (document != null)
					{
						attachFile = (getPDFStorePath() + document.getFileName()).replace("/", "\\");//WDEV-13366
					}

					try
					{
						new SendMail().sendSSLMessage(gpMail, emailSubjectTxt, emailMsgTxt, attachFile);
					}
					catch (MessagingException e)
					{
						errorS = "Could not email document because of a messaging exception.";
						e.printStackTrace();
					}
				}
			}
			if (errorS != null)
			{
				errors.add(getDocumentError(docsForEmail.get(i)));
			}
			
			//	WDEV-14174
			if(doc.getEmailStatus() == null || DocumentEmailStatus.NOT_SENT.equals(doc.getEmailStatus()))
			{
				doc.setEmailStatus(errorS != null ? DocumentEmailStatus.NOT_SENT : DocumentEmailStatus.SENT);
			}
		}

		return errors;//	WDEV-14174
	}
	//wdev-16298
	private String getnhsNumber(PatientIdCollection patidcoll)
	{
		if( patidcoll == null || patidcoll.size() == 0)
			return "";
		for(int i = 0; i < patidcoll.size();i++)
		{
			if( PatIdType.NHSN.equals(patidcoll.get(i).getType()))
			{
				java.lang.StringBuffer nhsn = new java.lang.StringBuffer("");
				String str = patidcoll.get(i).getIdValue().replace(" ", "");
				if ( str.length() > 6)
				{
					nhsn.append(str.substring(0, 3));
					nhsn.append(" ");
					nhsn.append(str.substring(3, 6));
					nhsn.append(" ");
					nhsn.append(str.substring(6));
						
					return nhsn.toString();
				}			
				else
					return patidcoll.get(i).getIdValue();
				//return patidcoll.get(i).getIdValue();
			}
		}
		for(int i = 0; i < patidcoll.size();i++)
		{
			if( PatIdType.HOSPNUM.equals(patidcoll.get(i).getType()))
				return PatIdType.HOSPNUM.getIItemText()+" : " +patidcoll.get(i).getIdValue();
		}
		return "";
	}
	//-----------

	private void print(DocumentAndPatientWrapperVoCollection docs, PatientDocumentErrorVoCollection errors)
	{
		form.getGlobalContext().Core.setPatientDocumentsErrors(errors);
		if ((docs == null || docs.size() == 0) && errors != null && errors.size() > 0)// 	WDEV-15599
		{
			engine.open(form.getForms().Core.PatientDocumentErrors,new Object[]{errors});
			return;
		}

		engine.open(form.getForms().Core.MultiPrintDialog, new Object[] {docs});
	}

	
	private PatientDocumentVo lockPatientDoc(PatientDocumentVo patientDocument, boolean changeToCompleted, DocumentStatus status)
	{
		if (patientDocument == null)
			throw new CodingRuntimeException("Trying to lock null patient document");

		String rtfFileName = null;

		PatientDocumentStatusVo finalS = new PatientDocumentStatusVo();
		if (changeToCompleted && status != null)//	WDEV-14174
		{
			finalS.setCorrespondenceStatus(status);//	WDEV-13912, 	WDEV-14174
			finalS.setRecordingDateTime(new DateTime());
			finalS.setRecordingUser((MemberOfStaffShortVo) domain.getMosUser());
		}

		ServerDocumentVo document = patientDocument.getServerDocument();
		String pdfFileName = null;
		if (document != null)
		{
			rtfFileName = document.getFileName();
			pdfFileName = convertRtfToPdf(rtfFileName);
			
			if(pdfFileName == null)//	WDEV-15400
				return null;

			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
						
			document.setFileName(year + "\\" + month + "\\" + day + "\\" + pdfFileName);
			document.setFileType(FileType.PDF);
		}

		patientDocument.setServerDocument(document);
		if (changeToCompleted && status != null)//	WDEV-14174
		{
			if (!patientDocument.getDocumentStatusHistoryIsNotNull())
				patientDocument.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
			patientDocument.getDocumentStatusHistory().add(finalS);
			patientDocument.setCurrentDocumentStatus(finalS);
		}

		String[] errs = patientDocument.validate();
		if (errs != null && errs.length > 0)
		{
			return null;
		}
		PatientDocumentVo result = null;
		
		try
		{
			if(!checkIfPdfFileExist(pdfFileName, rtfFileName))//WDEV-15400
			{
				int year  = new DateTime().getDate().getYear();
				int month = new DateTime().getDate().getMonth();
				int day   = new DateTime().getDate().getDay();
				deleteFile(getPDFStorePath() + year + "\\" + month + "\\" + day + "\\" + pdfFileName);
				return null;
			}
		}
		catch (Exception e)
		{
			return null;
		}
		
		try
		{
			result = domain.savePatientDocument(patientDocument);
		}
		catch (StaleObjectException e)
		{
			// Delete converted file (Simulating transaction)
			
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
			
			deleteFile(getPDFStorePath() + year + "\\" + month + "\\" + day + "\\" + pdfFileName);//WDEV-13366, //WDEV-15400
			if (ConfigFlag.UI.CORRESPONDENCE_ARCHIVE_RTF_FILES.getValue())
			{
				deleteFile(getArchiveStorePath() + year + "\\" + month + "\\" + day + "\\" + pdfFileName.substring(0, pdfFileName.lastIndexOf('.')) + ".rtf");
			}	
			
			e.printStackTrace();
			return null;
		}

		if (rtfFileName != null)
		{
			deleteFile(getWorkAreaPath() + rtfFileName);//WDEV-13366
		}
		
		return result;
	}

	private void archiveRtfFile(String pdfFileName, String rtfFileName) throws Exception
	{
		FileChannel inChan = null;
		FileChannel outChan = null;
		
		int year  = new DateTime().getDate().getYear();
		int month = new DateTime().getDate().getMonth();
		int day   = new DateTime().getDate().getDay();
		
		try
		{
			if (ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue() == null ||
					ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue().trim().length() == 0)
			{
				throw new Exception("ARCHIVE_STORE_PATH config flag is not set");
			}
			
			if (ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue() == null ||
					ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue().trim().length() == 0)
			{
				File file = new File(ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue());
				if (Boolean.FALSE.equals(file.exists()))
				{
					throw new Exception(file + " directory not exist");
				}
			}
			
			try {
				inChan = new FileInputStream(getPDFStorePath() + year + "\\" + month + "\\" + day + "\\" + pdfFileName).getChannel();
			}
			catch (FileNotFoundException e){
				throw new Exception("Can't read " +  pdfFileName + " pdf file");
			}
			
			inChan.close();
			inChan = null;
						
			try {
				inChan = new FileInputStream(getWorkAreaPath() + rtfFileName).getChannel();
			}
			catch (FileNotFoundException e){
				throw new Exception("Can't read " +  pdfFileName + " rtf file");
			}
			
			boolean retry = false;
			boolean success = false;
			
			while (!success)
			{
				success = true;
				
				File destinationFile = new File(ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue() + 
						"\\" +
						new DateTime().getDate().getYear() +
						"\\" +
						new DateTime().getDate().getMonth() +
						"\\" +
						new DateTime().getDate().getDay() +
						"\\" +
						pdfFileName.substring(0, pdfFileName.lastIndexOf('.')) + 
						".rtf");
				
				if (!destinationFile.exists())
				{
					try
					{
						File parentDir = destinationFile.getParentFile();
						if (!parentDir.exists()) {
							parentDir.mkdirs();
						}
						
						destinationFile.createNewFile();
					}
					catch (IOException e)
					{
						success = false;
						if (retry)
						{
							throw new Exception("Could not create the document in work area. An I/O error occurred");
						}
					}					
				}

				if (success)
				{
					try
					{
						outChan = new RandomAccessFile(destinationFile, "rw").getChannel();
					}
					catch (FileNotFoundException e)
					{
						success = false;
						if (retry)
						{
							throw new Exception("Could not create the document in work area. An I/O error occurred");
						}
					}					
				}
				
				if (!success)
				{
					retry  = true;
					wait(1000);
				}
			}

			FileLock outLock = null;
			try
			{
				outLock = outChan.tryLock();
			}
			catch (IOException e)
			{
				throw new Exception("An I/O error occured . Please contact your administrator");
			}
			if (!(outLock != null && outLock.isValid()))
			{
				throw new Exception("Unable to complete checked out at the moment . Try again later");
			}
			
			try
			{
				int maxCount = 64 * 1024;
				long size;

				size = inChan.size();

				long position = 0;
				while (position < size)
				{
					position += inChan.transferTo(position, maxCount, outChan);
				}
			}
			catch (IOException e)
			{
				throw new Exception("An I/O error occured during copy");
			}
			finally
			{
				outLock.release();			
			}
		}
		catch (Exception e)
		{
			throw new Exception(e);
		}
		finally
		{
			tryClose(inChan);
			tryClose(outChan);			
		}
	}
	
	//WDEV-15400
	private boolean checkIfPdfFileExist(String pdfFileName, String rtfFileName) 
	{
		int year  = new DateTime().getDate().getYear();
		int month = new DateTime().getDate().getMonth();
		int day   = new DateTime().getDate().getDay();
		
		File pdfFile = new File(getPDFStorePath() + year + "\\" + month + "\\" + day + "\\" + pdfFileName);
		boolean nonNullFileExistAnd = pdfFile.exists() && (pdfFile.length() > 0);
		
		if (nonNullFileExistAnd)
		{
			long startCheck= System.currentTimeMillis();
			FileInputStream fin = null;
		    FileChannel ch = null;
		    try 
		    {
		        fin = new FileInputStream(pdfFile);
		        ch = fin.getChannel();
		        
		        byte fileContent[] = new byte[(int)pdfFile.length()];
                fin.read(fileContent);

                fin.close();
		        ch.close();

		        long start = System.currentTimeMillis();
				PdfReader pdfReader = new PdfReader(fileContent);  
			    String textFromPdfFilePageOne = PdfTextExtractor.getTextFromPage(pdfReader, 1);
			    long end = System.currentTimeMillis();								
				System.out.println("Reading first pdf page time : " + (new Float(end-start))/1000 + " seconds");
				
				if (Boolean.FALSE.equals(ConfigFlag.GEN.RELEASE_MODE.getValue()))
				{
					System.out.println(pdfFile + " first page content:");
					System.out.println(textFromPdfFilePageOne);
				}
				
				long endCheck = System.currentTimeMillis();								
				System.out.println("Total time for checking if file is on the share : " + (new Float(endCheck - startCheck)) / 1000 + " seconds");	
				
				//If CORRESPONDENCE_ARCHIVE_RTF_FILES is set try to archive file
				if (ConfigFlag.UI.CORRESPONDENCE_ARCHIVE_RTF_FILES.getValue())
				{
					archiveRtfFile(pdfFileName, rtfFileName);
				}				
		    }
		    catch (Exception e) 
		    {
		        e.printStackTrace();
		        return false;
		    }	
		    
		}
		
		return nonNullFileExistAnd;
	}

	private String generateName()
	{
		String str = "";

		try
		{
			// Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			// Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			// Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			// Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}

	private byte[] readFile(String filePath)
	{
		File pdf = new File(filePath);
		if (!pdf.exists())
		{
			
			return null;
		}
		long size = pdf.length();

		if (size == 0)
		{
			return null;
		}
		FileInputStream fileInputStream = null;
		byte[] buffer = null;
		try
		{
			fileInputStream = new FileInputStream(pdf);

			int bytesAvailable = fileInputStream.available();

			int maxBufferSize = (int) size;

			int bufferSize = Math.min(bytesAvailable, maxBufferSize);

			buffer = new byte[bufferSize];

			int bytesRead = fileInputStream.read(buffer, 0, bufferSize);

			while (bytesRead > 0)
			{
				bytesAvailable = fileInputStream.available();
				bufferSize = Math.min(bytesAvailable, maxBufferSize);
				bytesRead = fileInputStream.read(buffer, 0, bufferSize);
			}

		}
		catch (IOException e)
		{
			buffer = null;
			errorS = "I/O exception while reading file";
			e.printStackTrace();
		}
		finally
		{
			if (fileInputStream != null)
			{
				try
				{
					fileInputStream.close();
				}
				catch (IOException e1)
				{// Do Nothing

				}
			}
		}
		
		return buffer;
	}

	private boolean isStale(PatientDocumentVo patientDocument)
	{
		if (patientDocument == null || !patientDocument.getServerDocumentIsNotNull() || !patientDocument.getServerDocument().getFileNameIsNotNull())
			return false;
		File rtfFile = new File(patientDocument.getServerDocument().getFileName());

		if (!rtfFile.exists())
		{
			if (domain.isStaleObjectException(patientDocument))
				return true;
		}

		return false;
	}

	private String convertRtfToPdf(String inputFileName)
	{
		if (inputFileName == null || inputFileName.length() == 0)
			return null;

		int inputFileTypesIndex = inputFileName.lastIndexOf(".");
		if (inputFileTypesIndex < 0)
			return null;
		
		String inputFileType = inputFileName.substring(inputFileTypesIndex + 1);
		
		int lastIndexOf = inputFileName.lastIndexOf("/");
		if (lastIndexOf < 0)
		{
			lastIndexOf = inputFileName.lastIndexOf("\\");
		}
		
		String pdfFileName = generateName() + ".pdf";//WDEV-13366
		
		byte[] buffer = readFile(getWorkAreaPath() + inputFileName);//WDEV-13366
		if (buffer == null || (buffer != null && buffer.length == 0))
			return null;

		ByteArrayOutputStream outStream = null;//WDEV-13366

		try
		{
			outStream = new ByteArrayOutputStream();//WDEV-13366
			
			ConversionHelper helper = new ConversionHelper();
			helper.convert(buffer, inputFileType, outStream);				
		}
		catch (Exception e)
		{
			e.printStackTrace();
			pdfFileName = null;
		}
		finally
		{
			if (outStream != null)
			{
				try
				{
					outStream.close();
				}
				catch (IOException e)
				{
					// Do Nothing
				}
			}
		}
		
		if(pdfFileName == null)//WDEV-15400
			return null;

		//WDEV-13366 - starts here
		try 
		{								
			engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), outStream.toByteArray(), pdfFileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\");
		}
		catch (Exception e)
		{
			pdfFileName = null; 
		}
		finally
		{
			if (outStream != null)
			{
				try
				{
					outStream.close();
				}
				catch (IOException e)
				{
					// Do Nothing
				}
			}
		}
		if(pdfFileName != null && pdfFileName.length() > 0)
			return pdfFileName;
		
		return null;
		////WDEV-13366 - ends here
	}

	private void gridSelectionChanged()
	{
		updateControlsState();
	}

	private void clearSearchCriteria()
	{
		form.getGlobalContext().Core.setDocumentWorklistSearchCriteria(null);
	}

	private void initialize(Object[] args) throws PresentationLogicException
	{
		if (!(domain.getMosUser() instanceof MemberOfStaffShortVo))
			throw new PresentationLogicException("You must be a member of staff to open this form.");
		
		//WDEV-12643
		if(!ConfigFlag.UI.CORRESPONDENCE_KEEP_PATIENT_SELECTED.getValue() && (args == null || args.length == 0 || !NEW_DOCUMENT.equals(args[0])))//	WDEV-13794
			form.getGlobalContext().Core.setPatientShort(null);

		//WDEV-13634
		removeFromCategoryLookup();
		
		form.ccResponsible().initialize(MosType.HCP);
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());//WDEV-11810
		form.cmbIdType().setValue(dispIdType);

		boolean isHCP = false;//WDEV-13909
		form.ccAuthor().initialize(MosType.HCP);
		if (domain.getHcpLiteUser() instanceof HcpLiteVo)
		{
			form.ccAuthor().setValue((HcpLiteVo) domain.getHcpLiteUser());
			isHCP = true;//WDEV-13909
		}

		form.ccTypist().initialize(MosType.ALL);
		if (!isHCP && domain.getMosUser() instanceof MemberOfStaffShortVo)//WDEV-13909
		{
			form.ccTypist().setValue((MemberOfStaffShortVo) domain.getMosUser());
		}
		populateDocumentStatus();
		populateDefaultValuesInSearchCriteria();
		populateLocations();
		
		//WDEV-12643, 	WDEV-13794
		if(ConfigFlag.UI.CORRESPONDENCE_KEEP_PATIENT_SELECTED.getValue())
			initClearCheckBox();
		
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getDocumentWorklistSearchCriteria() == null)	//WDEV-12510
		{
			//WDEV-11810 String hospNo = null;
			//WDEV-11810 if ((hospNo = getHospNo(form.getGlobalContext().Core.getPatientShort())) != null)
			//WDEV-11810{
			form.getGlobalContext().Core.setDocumentWorklistSearchCriteria(new DocumentWorklistSearchCriteriaVo());
			form.getGlobalContext().Core.getDocumentWorklistSearchCriteria().setPatient(form.getGlobalContext().Core.getPatientShort());
			form.getGlobalContext().Core.getDocumentWorklistSearchCriteria().setExcludeCompleted(true);
			//WDEV-11810}
		}
		
		form.grdDocuments().setAuthorCaption(ConfigFlag.UI.DISPLAY_AUTHORINGHCP_OR_RESPHCP_ON_DOCUMENT_WORKLIST.getValue().equals("Responsible HCP")?"Responsible":"Author");
	}
	
	//WDEV-13634
	private void removeFromCategoryLookup() 
	{
		for(int i=form.cmbDocType().getValues().size() - 1; i>=0; i--)
		{
			if(form.cmbDocType().getValues().get(i) == null)
				continue;
			
			if(DocumentCategory.HISTORICAL.equals(form.cmbDocType().getValues().get(i))
				|| DocumentCategory.ASSESSMENT.equals(form.cmbDocType().getValues().get(i))
				|| DocumentCategory.RACPCSUMMARY.equals(form.cmbDocType().getValues().get(i)))
			{
				form.cmbDocType().removeRow((DocumentCategory) form.cmbDocType().getValues().get(i));
			}
		}
	}

	private void initClearCheckBox()
	{
		if (form.getGlobalContext().Core.getKeepPatientInContextIsNotNull())
		{
			form.chkClear().setValue(form.getGlobalContext().Core.getKeepPatientInContext().booleanValue());
		}
		else
		{
			form.chkClear().setValue(ConfigFlag.UI.CORRESPONDENCE_KEEP_PATIENT_SELECTED.getValue());
			form.getGlobalContext().Core.setKeepPatientInContext(form.chkClear().getValue());
		}
	}

	private void populateDocumentStatus()
	{
		form.cmbDocStatus().newRow(DocumentStatus.DRAFT, DocumentStatus.DRAFT.getText());
		form.cmbDocStatus().newRow(DocumentStatus.FOR_REVIEW, DocumentStatus.FOR_REVIEW.getText());
		form.cmbDocStatus().newRow(DocumentStatus.FOR_UPDATE, DocumentStatus.FOR_UPDATE.getText());
		form.cmbDocStatus().newRow(DocumentStatus.READY_TO_SEND, DocumentStatus.READY_TO_SEND.getText());
		form.cmbDocStatus().newRow(DocumentStatus.COMPLETED, DocumentStatus.COMPLETED.getText());
	}

	private void populateLocations()
	{
		ILocation[] locs = domain.listActiveHospitalsLite();
		if (locs != null)
		{
			for (int i = 0; i < locs.length; i++)
			{
				form.cmbLocation().newRow(locs[i], locs[i].getName().toString());
			}
		}
	}

	/* WDEV-11810
	private String getHospNo(PatientShort patient)
	{
		if (patient == null)
			return null;

		if (!patient.getIdentifiersIsNotNull())
			return null;

		for (int i = 0; i < patient.getIdentifiers().size(); i++)
		{
			PatientId ident = patient.getIdentifiers().get(i);
			if (ident == null)
				continue;
			if (PatIdType.NHSN.equals(ident.getType()))
				return ident.getIdValue();
		}

		return null;
	}*/

	public void newInstance() throws PresentationLogicException
	{
		if (!form.getGlobalContext().Core.getPatientShortIsNotNull())
			throw new CodingRuntimeException("New button should not be enabled if no patient is selected");
		
		engine.open(form.getForms().Core.PatientCorrespondenceTemplates);
	}

	public void updateControlsState()
	{
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		
		form.lblIDType().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_PATIENT_ID_SEARCH_FIELD.getValue()); //WDEV-12643, WDEV-13794
		form.lblIDValue().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_PATIENT_ID_SEARCH_FIELD.getValue());	//WDEV-12643, WDEV-13794
		
		if (isViewMode)
		{
			form.qmbClinic().setEnabled(form.cmbLocation().getValue() != null);
			form.chkPatOnly().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_VIEW_DOCUMENTS_FOR_PATIENT_CHECKBOX.getValue());	//WDEV-12643, 	WDEV-13794
			form.chkPatOnly().setEnabled(form.getGlobalContext().Core.getPatientShortIsNotNull());//WDEV-11810
			form.cmbIdType().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_PATIENT_ID_SEARCH_FIELD.getValue());	//WDEV-12643, WDEV-13794
			form.txtPatId().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_PATIENT_ID_SEARCH_FIELD.getValue());	//WDEV-12643, WDEV-13794
			form.cmbIdType().setEnabled(!form.chkPatOnly().getValue());//WDEV-11810
			form.txtPatId().setEnabled(!form.chkPatOnly().getValue());//WDEV-11810
			
			form.chkClear().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_KEEP_SELECTED_PATIENT_CHECKBOX.getValue());	//WDEV-12643
			
			form.btnBatchC().setVisible(ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_BATCH_BUTTON.getValue());	//	WDEV-12643, WDEV-13794
		}
		
		form.getContextMenus().Core.getDocumentWorklistMenuSELECT_ALLItem().setVisible(isViewMode);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuDESELECT_ALLItem().setVisible(isViewMode);//WDEV-14174
		
		form.getContextMenus().Core.getDocumentWorklistMenuNEW_DOCUMENTItem().setVisible(isViewMode);	//WDEV-12643, WDEV-13794
		form.getContextMenus().Core.getDocumentWorklistMenuDELETEItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuEDITItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuSELECT_PATIENTItem().setVisible(isViewMode);		//WDEV-12643, WDEV-13794

		form.getContextMenus().Core.getDocumentWorklistMenuVIEWItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuPRINTItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuEMAILItem().setVisible(isViewMode);

		form.getContextMenus().Core.getDocumentWorklistMenuFOR_REVIEWItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuFOR_UPDATEItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENDItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuCOMPLETEDItem().setVisible(isViewMode);
		
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem().setVisible(isViewMode);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem().setVisible(isViewMode);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCHItem().setVisible(isViewMode);//WDEV-14174

		boolean isRowSelected = form.grdDocuments().getSelectedRow() != null;
		boolean documentFinal = isDocumentFinal(form.grdDocuments().getValue());
		boolean areDocumentsSelected = areDocumentsSelected();
		boolean areAllDocumentsSelected = areAllDocumentsSelected();//WDEV-14174

		form.getContextMenus().Core.getDocumentWorklistMenuSELECT_ALLItem().setEnabled(isViewMode && form.grdDocuments().getRows().size() > 0 && !areAllDocumentsSelected);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuDESELECT_ALLItem().setEnabled(isViewMode && areDocumentsSelected);//WDEV-14174
		
		form.getContextMenus().Core.getDocumentWorklistMenuNEW_DOCUMENTItem().setEnabled(isRowSelected || form.getGlobalContext().Core.getPatientShortIsNotNull());	//WDEV-12643, WDEV-13794
		form.getContextMenus().Core.getDocumentWorklistMenuDELETEItem().setEnabled(isRowSelected && !documentFinal);
		form.getContextMenus().Core.getDocumentWorklistMenuEDITItem().setEnabled(isRowSelected && !documentFinal);
		form.getContextMenus().Core.getDocumentWorklistMenuSELECT_PATIENTItem().setEnabled(isRowSelected);	//WDEV-12643

		form.getContextMenus().Core.getDocumentWorklistMenuVIEWItem().setEnabled(isRowSelected && documentFinal);
		form.getContextMenus().Core.getDocumentWorklistMenuPRINTItem().setEnabled(isRowSelected && documentFinal);
		form.getContextMenus().Core.getDocumentWorklistMenuEMAILItem().setEnabled(isRowSelected && documentFinal && form.getLocalContext().getPatientGPIsNotNull());//	WDEV-14174

		form.getContextMenus().Core.getDocumentWorklistMenuFOR_REVIEWItem().setEnabled(isViewMode && isRowSelected && canChangeToReview());
		form.getContextMenus().Core.getDocumentWorklistMenuFOR_UPDATEItem().setEnabled(isViewMode && isRowSelected && canChangeToUpdate());
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENDItem().setEnabled(isViewMode && isRowSelected && canChangeToReady());
		form.getContextMenus().Core.getDocumentWorklistMenuCOMPLETEDItem().setEnabled(isViewMode && isRowSelected && canChangeToCompleted());

		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_COMPLETEItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_COMPLETEItem().setEnabled(isViewMode && areDocumentsSelected && !areNonReadyToSendDocumentsSelected());

		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_EMAILItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_EMAILItem().setEnabled(isViewMode && areDocumentsSelected);

		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_PRINTItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuBATCH_PRINTItem().setEnabled(isViewMode && areDocumentsSelected);
		
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem().setEnabled(isViewMode && areDocumentsSelected);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem().setEnabled(isViewMode && areDocumentsSelected);//WDEV-14174
		form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCHItem().setEnabled(isViewMode && areDocumentsSelected);//WDEV-14174

		form.getContextMenus().Core.getDocumentWorklistMenuSETPATHItem().setVisible(isViewMode);
		form.getContextMenus().Core.getDocumentWorklistMenuSETPATHItem().setEnabled(isViewMode && ConfigFlag.GEN.AUTODETECT_DOCUMENT_EDITOR.getValue() == false);	//WDEV-12231
	}

	//WDEV-14174
	private boolean areAllDocumentsSelected() 
	{
		if(form.grdDocuments().getRows().size() == 0)
			return false;
		
		for (int i = 0; i < form.grdDocuments().getRows().size(); i++)
		{
			if (!form.grdDocuments().getRows().get(i).getSelect())
				return false;
		} 
		
		return true;
	}

	private boolean canChangeToCompleted()
	{
		if (!isStatusAccessible())
			return false;
		if (DocumentStatus.READY_TO_SEND.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		return false;
	}

	private boolean isDocumentFinal(PatientDocumentforDocumentWorklistVo value)
	{
		if (value == null || !value.getCurrentDocumentStatusIsNotNull())
			return false;

		return DocumentStatus.COMPLETED.equals(value.getCurrentDocumentStatus().getCorrespondenceStatus()) || DocumentStatus.READY_TO_SEND.equals(value.getCurrentDocumentStatus().getCorrespondenceStatus());
	}

	private boolean isDocumentFinal(PatientDocumentVo value)
	{
		if (value == null || !value.getCurrentDocumentStatusIsNotNull())
			return false;

		return DocumentStatus.COMPLETED.equals(value.getCurrentDocumentStatus().getCorrespondenceStatus()) || DocumentStatus.READY_TO_SEND.equals(value.getCurrentDocumentStatus().getCorrespondenceStatus());
	}

	private boolean canChangeToReady()
	{
		if (!isStatusAccessible())
			return false;
		if (DocumentStatus.DRAFT.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		if (DocumentStatus.FOR_REVIEW.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		if (DocumentStatus.FOR_UPDATE.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		return false;
	}

	private boolean canChangeToUpdate()
	{
		if (!isStatusAccessible())
			return false;
		if (DocumentStatus.FOR_REVIEW.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		return false;
	}

	private boolean canChangeToReview()
	{
		if (!isStatusAccessible())
			return false;
		if (DocumentStatus.DRAFT.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		if (DocumentStatus.FOR_UPDATE.equals(form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatus()))
			return true;
		return false;
	}

	private void editInstance()
	{
		if (form.getLocalContext().getSelectedDocumentIsNotNull())
		{
			if (!validateNonFinalDocument(form.getLocalContext().getSelectedDocument()))
				return;

			// is curent document locked ?
			if (isDocCheckoutByMe(form.getLocalContext().getSelectedDocument()))
			{
				showContinueEditMsg();
				return;
			}

			if (isDocCheckedOutBySomeoneElse(form.getLocalContext().getSelectedDocument()))
			{
				//WDEV-12205
				MemberOfStaffLiteVo lockedUser = domain.getLockedUser(form.getLocalContext().getSelectedDocument().getLockedByUser());
				String sLockedUser = lockedUser != null ? lockedUser.getIMosName() : "";
				String sLockedDate = form.getLocalContext().getSelectedDocument().getLockedOnDateTimeIsNotNull() ? form.getLocalContext().getSelectedDocument().getLockedOnDateTime().toString() : "";
				
				engine.showMessage("The document has been checked out by " + sLockedUser + " since " + sLockedDate, "Cannot edit document", MessageButtons.OK, MessageIcon.WARNING); //wdev-14260
				return;
			}
			
			//WDEV-13546
			if(form.getLocalContext().getOldSelectedDocumentIsNotNull() 
				&& form.getLocalContext().getOldSelectedDocument().getID_PatientDocument().equals(form.getLocalContext().getSelectedDocument().getID_PatientDocument()) 
				&& form.getLocalContext().getOldSelectedDocument().getVersion_PatientDocument() != form.getLocalContext().getSelectedDocument().getVersion_PatientDocument())
			{
				if (isPatientDocumentReallyChanged(form.getLocalContext().getOldSelectedDocument(), form.getLocalContext().getSelectedDocument()))//WDEV-13546
				{
					engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
					open();
					return;
				}
			}
			// Verify that wordpath is set

			// try and checkout

			form.getLocalContext().setSelectedDocument(checkoutDoc(form.getLocalContext().getSelectedDocument()));
			if (!form.getLocalContext().getSelectedDocumentIsNotNull())
			{
				engine.showErrors(new String[] { errorS });
				open();
				return;
			}

			// if success edit

			//

			openDocForEditFromWorkArea(form.getLocalContext().getSelectedDocument());
		}
	}

	private void showContinueEditMsg()
	{
		form.getLocalContext().setContinueEditMessageBoxId(engine.showMessage("You already have checked out this document.\nDo you want to continue editing it? \n('No' will undo checked out and 'Cancel' will take no action)", "Document already checked out", MessageButtons.YESNOCANCEL, MessageIcon.INFORMATION));
	}

	private boolean isDocCheckoutByMe(PatientDocumentVo doc)
	{
		return (doc.getIsLockedForEditingIsNotNull() && doc.getIsLockedForEditing() && doc.getLockedByUser().equals(domain.getMosUser()));
	}

	private boolean isDocCheckedOutBySomeoneElse(PatientDocumentVo doc)
	{
		return (doc.getIsLockedForEditingIsNotNull() && doc.getIsLockedForEditing() && !doc.getLockedByUser().equals(domain.getMosUser()));
	}

	private void openDocForEditFromWorkArea(PatientDocumentVo doc)
	{
		validateNonFinalDocument(doc);

		String winPath = engine.getLocalSettings().getWordEditorPath();

		if ((winPath == null || winPath.length() == 0) && ConfigFlag.GEN.AUTODETECT_DOCUMENT_EDITOR.getValue() == false)	 //WDEV-12231
		{
			form.getLocalContext().setShouldOpenAfterPathIsSet(true);
			engine.open(form.getForms().Core.LocalSettingsDialog);
			return;
		}
		
		selectPatient(doc.getPatient());

		String filePath = (getCheckOutWorkArea() + doc.getServerDocument().getFileName()).replace("/", "\\");//WDEV-13366
		
		form.getGlobalContext().Core.setPatientCorrespondence(doc);
		engine.open(form.getForms().Core.PatientDocumentEdit, false);
		
		if(ConfigFlag.GEN.AUTODETECT_DOCUMENT_EDITOR.getValue() == true)	//WDEV-12231
			engine.runExternalApplication(filePath, true, false);
		else
			engine.runExternalApplication(winPath + " " + filePath, false);
	}
	
	private void selectPatient(PatientRefVo patient)
	{
		if (patient == null)
			return;
		if (patient.equals(form.getGlobalContext().Core.getPatientShort()))
			return;
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patient));
	}
	
	private boolean validateNonFinalDocument(PatientDocumentVo selectedDocument)
	{
		if (selectedDocument == null)
			throw new CodingRuntimeException("Trying to validate null document");
		
		String[] errors = selectedDocument.validate();
		if (errors != null && errors.length > 0)
		{
			throw new CodingRuntimeException("The document is not valid. Posible data corruption");

		}
		if (isDocumentFinal(selectedDocument) || !FileType.DOC.equals(selectedDocument.getServerDocument().getFileType()))
		{
			//This is a stale exception
			engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
			form.getLocalContext().setSelectedDocument(null);
			form.getLocalContext().setOldSelectedDocument(null);//WDEV-13546
			open();
			return false;
			
		}
		
		return true;
	}

	private PatientDocumentVo checkoutDoc(PatientDocumentVo doc)
	{
		validateNonFinalDocument(doc);

		String fileName = doc.getServerDocument().getFileName();
		String sourceFilePath = (getWorkAreaPath() + fileName).replace("/", "\\");//WDEV-13366
		String destinationFilePath = (getCheckOutWorkArea() + fileName).replace("/", "\\");//WDEV-13366
		FileChannel inChan = null;
		FileChannel outChan = null;
		PatientDocumentVo result = null;
		// prepare for read
		try
		{
			try
			{
				inChan = new FileInputStream(sourceFilePath).getChannel();
			}
			catch (FileNotFoundException e)
			{
				
					errorS = "Unable to find file in Document Store";
			
				throw e;
			}

			//It might be a latency issue so if at first if fails , wait a sec and try again
			// create work area document and path
			boolean retry = false;
			boolean success = false;
			while (!success)
			{
				success = true;
				
				File destinationFile = new File(destinationFilePath);
				if (!destinationFile.exists())
					try
				{
						File parentDir = destinationFile.getParentFile();
						if (!parentDir.exists())
							parentDir.mkdirs();
						destinationFile.createNewFile();
				}
				catch (IOException e)
				{
					System.out.println("File does not exist and cannot be created: "+e.getMessage());
					success = false;
					if (retry)
					{
						errorS = "Could not create the document in work area. An I/O error occurred";
						throw e;
					}
				}
				finally
				{
					//tryClose(inChan);
					tryClose(outChan);
				}

				// prepare for write
				if (success)
				{
					try
					{
						outChan = new RandomAccessFile(destinationFile, "rw").getChannel();
					}
					catch (FileNotFoundException e)
					{
						System.out.println("File exists but write access cannot be obtained: "+e.getMessage());
						success = false;
						if (retry)
						{
							errorS = "Could not create the document in work area. An I/O error occurred";
							throw e;
						}
					}					
				}
				
				if (!success)
				{
					retry  = true;
					System.out.println("Could not create file. Sleep a sec");
					wait(1000);
				}
			}

			FileLock outLock = null;
			try
			{

				outLock = outChan.tryLock();
			}
			catch (IOException e)
			{
				errorS = "An I/O error occured . Please contact your administrator";
				throw e;
			}
			if (!(outLock != null && outLock.isValid()))
			{
				errorS = "Unable to complete checked out at the moment . Try again later";
				throw new CodingRuntimeException("Lock is null or invalid");
			}

			// save
			doc.setIsLockedForEditing(true);
			doc.setLockedByUser((MemberOfStaffRefVo) domain.getMosUser());
			doc.setLockedOnDateTime(new DateTime());
			doc.validate();

			try
			{
				result = domain.savePatientDocument(doc);
			}
			catch (StaleObjectException e)
			{
				errorS = ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue();
				throw e;

			}

			// Everything is fine . do the copy
			try
			{
				int maxCount = 64 * 1024;
				long size;

				size = inChan.size();

				long position = 0;
				while (position < size)
				{
					position += inChan.transferTo(position, maxCount, outChan);
				}
			}
			catch (IOException e)
			{
				errorS = "An I/O error occured during copy. The file remains checked out";
				throw e;

			}
			finally
			{
				outLock.release();
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			if (isStale(result))
			{
				errorS = ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue();
			}
			if (errorS == null)
			{
				errorS = "An unknown error occured";
			}
			result = null;
		}
		finally
		{
			tryClose(inChan);
			tryClose(outChan);
		}
		
		return result;
	}

	private void tryClose(FileChannel inChan)
	{
		if (inChan != null)
			try
			{
				inChan.close();
			}
			catch (IOException e1)
			{

			}
	}

	private boolean isStatusAccessible()
	{
		return form.grdDocuments().getValue()!=null && form.grdDocuments().getValue().getCurrentDocumentStatusIsNotNull() && form.grdDocuments().getValue().getCurrentDocumentStatus().getCorrespondenceStatusIsNotNull();
	}

	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.FILE_SERVER_URL.getValue();//WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}

	private String getWorkAreaPath()
	{
		String storePath = ConfigFlag.GEN.MAXIMS_DOCUMENT_WORK_AREA.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}
	
	//WDEV-13366
	private String getPDFStorePath()
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}
	
	private String getArchiveStorePath()
	{
		String storePath = ConfigFlag.GEN.ARCHIVE_STORE_PATH.getValue();

		if (!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";

		return storePath;
	}
	
	//WDEV-13366
	private String getCheckOutWorkArea()
	{
		String checkOutPath = getWorkAreaPath() + CHECKOUT_FOLDER;
		
		File checkout = new File(checkOutPath);
		
		if(!checkout.exists())
			checkout.mkdirs();
		
		String newCheckOutPath = checkout.getPath();
		
		if (!(newCheckOutPath.endsWith("/") || newCheckOutPath.endsWith("\\")))
			newCheckOutPath = newCheckOutPath + "/";

		return newCheckOutPath;
	}

	public void open()
	{
		open(false);
	}

	public void open(boolean firstRun)
	{

		if (form.getGlobalContext().Core.getDocumentWorklistSearchCriteriaIsNotNull())
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().Core.getDocumentWorklistSearchCriteria());
			doSearch(!firstRun);
		}

		form.setMode(FormMode.VIEW);
	}

	private void populateDefaultValuesInSearchCriteria()
	{
		Date today = new Date();
		form.dteTo().setValue(today);
		form.dteFrom().setValue(((Date) today.clone()).addDay(ConfigFlag.UI.DOCUMENT_WORKLIST_DEFAULT_EVENT_START_DATE_INTERVAL.getValue()*(-1))); //wdev-13920
		form.chkExcludeCompleted().setValue(true);
	}

	private boolean doSearch(boolean showErrors)
	{
		form.grdDocuments().getRows().clear();
		if (isSearchCriteriaValid(showErrors))
		{
			populateScreenFromData(domain.listPatientDocuments(populateSearchCriteriaDataFromScreen()));
			if (form.getLocalContext().getSelectedDocumentIsNotNull())
			{
				form.grdDocuments().setValue(getRowValueFromGrid(form.getLocalContext().getSelectedDocument()));
				gridSelectionChanged();
			}
			if (form.grdDocuments().getRows().size() == 0 && showErrors)
				engine.showMessage("No documents found.");
			return true;
		}
		
		return false;
	}

	private PatientDocumentforDocumentWorklistVo getRowValueFromGrid(PatientDocumentVo selectedDocument)
	{
		for (int i = 0; i < form.grdDocuments().getRows().size(); i++)
		{
			PatientDocumentforDocumentWorklistVo value = form.grdDocuments().getRows().get(i).getValue();
			if (value.equals(selectedDocument))
				return value;
		}
		
		return null;
	}

	private void populateSearchCriteriaScreenFromData(DocumentWorklistSearchCriteriaVo criteria)
	{
		clearScreen();
		if (criteria == null)
			return;
		form.ccResponsible().setValue(criteria.getResponsible());
		form.ccAuthor().setValue(criteria.getAuthor());
		form.ccTypist().setValue(criteria.getTypist());
		form.cmbLocation().setValue(criteria.getLocation());
		if (criteria.getClinicIsNotNull())
		{
			form.qmbClinic().newRow(criteria.getClinic(), criteria.getClinic().getClinicName());
			form.qmbClinic().setValue(criteria.getClinic());
		}
		form.cmbDocStatus().setValue(criteria.getDocumentStatus());
		form.cmbDocType().setValue(criteria.getDocumentType());
		form.cmbSpecialty().setValue(criteria.getSpecialty());
		form.dteFrom().setValue(criteria.getDateFrom());
		form.dteTo().setValue(criteria.getDateTo());
		form.chkExcludeCompleted().setValue(criteria.getExcludeCompleted());
		//WDEV-11810 Start
		if (criteria.getPatientIdIsNotNull())
		{
			form.cmbIdType().setValue(criteria.getPatientId().getType());
			form.txtPatId().setValue(criteria.getPatientId().getValue());
		}
		
		if (ConfigFlag.UI.DOCUMENT_WORKLIST_DISPLAY_VIEW_DOCUMENTS_FOR_PATIENT_CHECKBOX.getValue() && form.getGlobalContext().Core.getPatientShortIsNotNull() && criteria.getPatientIsNotNull())//WDEV-13794
		{
			form.chkPatOnly().setValue(true);
		}
		//WDEV-11810 End
	}

	private DocumentWorklistSearchCriteriaVo populateSearchCriteriaDataFromScreen()
	{
		DocumentWorklistSearchCriteriaVo criteria = new DocumentWorklistSearchCriteriaVo();
		criteria.setResponsible(form.ccResponsible().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccResponsible().getValue() : null);
		criteria.setAuthor(form.ccAuthor().getValue() instanceof HcpLiteVo ? (HcpLiteVo) form.ccAuthor().getValue() : null);
		criteria.setTypist(form.ccTypist().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo) form.ccTypist().getValue() : null);
		criteria.setLocation(form.cmbLocation().getValue());
		criteria.setClinic(form.qmbClinic().getValue());
		criteria.setDocumentStatus(form.cmbDocStatus().getValue());
		criteria.setDocumentType(form.cmbDocType().getValue());
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setDateFrom(form.dteFrom().getValue());
		criteria.setDateTo(form.dteTo().getValue());
		criteria.setExcludeCompleted(form.chkExcludeCompleted().getValue());
		//WDEV-11810 criteria.setHospNo(form.txtHospNo().getValue());
		//WDEV-11810 Start
		criteria.setPatient(form.chkPatOnly().getValue()?form.getGlobalContext().Core.getPatientShort():null);
		
		if (form.txtPatId().getValue()!=null)
		{
			PatientIdListVo patId = new PatientIdListVo();
			patId.setType(form.cmbIdType().getValue());
			patId.setValue(form.txtPatId().getValue());
			criteria.setPatientId(patId);
		}
		//WDEV-11810 End
		return criteria;
	}

	private boolean isSearchCriteriaValid(boolean showErrors)
	{
		Date dateFrom = form.dteFrom().getValue();//WDEV-13593
		Date dateTo = form.dteTo().getValue();//WDEV-13593
		
		//WDEV-13593
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			if (showErrors)
			{
				showValidationError("Event Date from can not be greater than Event Date to");
			}
			
			return false;
		}
		
		if (form.cmbLocation().getValue() != null && form.qmbClinic().getValue() == null)
		{
			if (showErrors)
			{
				showValidationError("Clinic is mandatory if you select a Location");
			}
			return false;
		}
		if (form.chkExcludeCompleted().getValue() && DocumentStatus.COMPLETED.equals(form.cmbDocStatus().getValue()))
		{
			if (showErrors)
			{
				showValidationError("'Exclude completed documents' and 'Completed' are mutually exclusive search options");
			}
			return false;
		}

		if (isAtLeastOneSearchFieldCompleted())
			return true;

		if (showErrors)
		{
			showValidationError("Complete at least one search field.");
		}
		return false;
	}

	private boolean isAtLeastOneSearchFieldCompleted()
	{
		return form.ccAuthor().getValue() != null || form.ccTypist().getValue() != null || form.qmbClinic().getValue() != null ||
		form.cmbDocStatus().getValue() != null || form.cmbDocType().getValue() != null || form.cmbSpecialty().getValue() != null ||
		form.dteFrom().getValue() != null || form.dteTo().getValue() != null ||	form.ccResponsible().getValue() != null || 
		form.chkPatOnly().getValue()==true || form.txtPatId().getValue()!=null;//WDEV-11810
	}

	private void showValidationError(String message)
	{
		engine.showMessage(message, "Validation error", MessageButtons.OK, MessageIcon.ERROR);
	}

	private void clear()
	{
		form.grdDocuments().getRows().clear();
	}

	private void clearScreen()
	{
		clear();
		form.ccResponsible().setValue(null);
		form.ccAuthor().setValue(null);
		form.ccTypist().setValue(null);
		form.cmbLocation().setValue(null);
		form.qmbClinic().clear();
		form.cmbDocStatus().setValue(null);
		form.cmbDocType().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.chkExcludeCompleted().setValue(null);//WDEV-13590
		//WDEV-11810form.txtHospNo().setValue(null);
		form.txtPatId().setValue(null);
		form.chkPatOnly().setValue(null);
	}

	private void populateScreenFromData(PatientDocumentforDocumentWorklistVoCollection patDocs)
	{
		clear();
		form.grdDocuments().setAuthorCaption(ConfigFlag.UI.DISPLAY_AUTHORINGHCP_OR_RESPHCP_ON_DOCUMENT_WORKLIST.getValue().equals("Responsible HCP")?"Responsible":"Author");
		for (int i = 0; patDocs != null && i < patDocs.size(); i++)
		{
			newPatDocRow(patDocs.get(i));
		}
	}

	private void newPatDocRow(PatientDocumentforDocumentWorklistVo patientDocument)
	{
		if (patientDocument == null)
			return;

		grdDocumentsRow newRow = form.grdDocuments().getRows().newRow();
		newRow.setValue(patientDocument);
		
		boolean nameNotNull = patientDocument.getPatientIsNotNull() && patientDocument.getPatient().getNameIsNotNull();
		newRow.setSurname(nameNotNull && patientDocument.getPatient().getName().getSurnameIsNotNull() ? patientDocument.getPatient().getName().getSurname() : "");
		//WDEV-12012
		newRow.setTooltipForSurname(nameNotNull && patientDocument.getPatient().getName().getSurnameIsNotNull() ? patientDocument.getPatient().getName().getSurname() : "");
		
		newRow.setForename(nameNotNull && patientDocument.getPatient().getName().getForenameIsNotNull() ? patientDocument.getPatient().getName().getForename() : "");
		//WDEV-12012
		newRow.setTooltipForForename(nameNotNull && patientDocument.getPatient().getName().getForenameIsNotNull() ? patientDocument.getPatient().getName().getForename() : "");
		
		newRow.setNHSNo(getNHSNumber(patientDocument.getPatient()));
		//WDEV-12012
		newRow.setTooltipForNHSNo(getNHSNumber(patientDocument.getPatient()));
		
		//WDEV-12012 - starts here
		String documentTitle = "";
		
		if(patientDocument.getCategoryIsNotNull())
			documentTitle += patientDocument.getCategory().getText();
		
		if(patientDocument.getNameIsNotNull())
			documentTitle += " - " + patientDocument.getName();
		
		newRow.setColTitle(documentTitle);
		newRow.setTooltipForColTitle(documentTitle);
		
		String typistInitials = patientDocument.getRecordingUser() != null ? patientDocument.getRecordingUser().getInitials() : null;//WDEV-14174
			
		//WDEV-12012 - ends here
		if (ConfigFlag.UI.DISPLAY_AUTHORINGHCP_OR_RESPHCP_ON_DOCUMENT_WORKLIST.getValue().equals("Responsible HCP"))
		{
			String responsable = (patientDocument.getResponsibleHCP() != null ? patientDocument.getResponsibleHCP().getIHcpName() : "") + (typistInitials != null ? " (" + typistInitials + ")": "");//WDEV-14174
			newRow.setAuthor(responsable);//WDEV-14174
			newRow.setTooltipForAuthor(responsable);//WDEV-12319, WDEV-14174
			
		}
		else
		{
			String authoring = (patientDocument.getAuthoringHCP() != null ? patientDocument.getAuthoringHCP().getIHcpName() : "") + (typistInitials != null ? " (" + typistInitials + ")": "");//WDEV-14174
			newRow.setAuthor(authoring);//WDEV-14174
			newRow.setTooltipForAuthor(authoring);	//WDEV-12319, WDEV-14174
		}
			
		newRow.setDate(patientDocument.getDocumentDate());
		//WDEV-12012
		newRow.setTooltipForDate(patientDocument.getDocumentDate() != null ? patientDocument.getDocumentDate().toString() : null);
		
		newRow.setStatus(patientDocument.getCurrentDocumentStatusIsNotNull() && patientDocument.getCurrentDocumentStatus().getCorrespondenceStatusIsNotNull() ? patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus().getText() : "");
		//WDEV-12012, WDEV-15957
		if(patientDocument.getCopyPatientOnCorrespondenceIsNotNull())
		{
			newRow.setTooltipForStatus((patientDocument.getCurrentDocumentStatusIsNotNull() && patientDocument.getCurrentDocumentStatus().getCorrespondenceStatusIsNotNull() ? patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus().getText() : "") + ", Copy Letter to Patient: " + (Boolean.TRUE.equals(patientDocument.getCopyPatientOnCorrespondence()) ? "Yes" : "No"));
		}
		else
		{
			newRow.setTooltipForStatus(patientDocument.getCurrentDocumentStatusIsNotNull() && patientDocument.getCurrentDocumentStatus().getCorrespondenceStatusIsNotNull() ? patientDocument.getCurrentDocumentStatus().getCorrespondenceStatus().getText() : "");
		}
		
		//WDEV-11714
		newRow.setColNoOfCopies(patientDocument.getNoOfCopies());
		
		newRow.setColPrinted((patientDocument.getWasPrintedIsNotNull() && patientDocument.getWasPrinted()) ? form.getImages().Correspondence.FinaliseAndPrint16 : null);//	WDEV-14174
		newRow.setTooltipForColPrinted((patientDocument.getWasPrintedIsNotNull() && patientDocument.getWasPrinted()) ? "Printed" : null);//	WDEV-14174
		
		newRow.setColEmailed(DocumentEmailStatus.SENT.equals(patientDocument.getEmailStatus()) ? form.getImages().Correspondence.FinaliseAndEmail16 : (DocumentEmailStatus.NOT_SENT.equals(patientDocument.getEmailStatus()) ? form.getImages().Correspondence.Email_not_send : null));//	WDEV-14174
		newRow.setTooltipForColEmailed(DocumentEmailStatus.SENT.equals(patientDocument.getEmailStatus()) ? DocumentEmailStatus.SENT.getText() : (DocumentEmailStatus.NOT_SENT.equals(patientDocument.getEmailStatus()) ? DocumentEmailStatus.NOT_SENT.getText() : null));//	WDEV-14174
	}

	private String getNHSNumber(PatientForDocumentWorklistVo patient)
	{
		if (patient == null)
			return null;
		if (!patient.getIdentifiersIsNotNull())
			return null;
		for (int i = 0; i < patient.getIdentifiers().size(); i++)
		{
			if (PatIdType.NHSN.equals(patient.getIdentifiers().get(i).getType()))
			{
				return patient.getIdentifiers().get(i).getValue();
			}
		}
		
		return null;
	}

	private void changePath()
	{
		engine.open(form.getForms().Core.LocalSettingsDialog);
	}

	private void deleteInstance()
	{
		if (!form.getLocalContext().getSelectedDocumentIsNotNull())
			throw new CodingRuntimeException("There is no document to delete");

		//WDEV-13546
		if(form.getLocalContext().getOldSelectedDocumentIsNotNull() 
			&& form.getLocalContext().getOldSelectedDocument().getID_PatientDocument().equals(form.getLocalContext().getSelectedDocument().getID_PatientDocument()) 
			&& form.getLocalContext().getOldSelectedDocument().getVersion_PatientDocument() != form.getLocalContext().getSelectedDocument().getVersion_PatientDocument())
		{
			if(isPatientDocumentReallyChanged(form.getLocalContext().getOldSelectedDocument(), form.getLocalContext().getSelectedDocument()))
			{
				engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
				open();
				return;
			}
		}
		
		if (form.chkClear().getValue())
			selectPatient(form.getLocalContext().getSelectedDocument().getPatient());
		
		PatientDocumentVo doc = form.getLocalContext().getSelectedDocument();
		doc.validate();
		if (!doc.isValidated())
			throw new CodingRuntimeException("The document you want to delete is not valid");

		if (doc.getIsLockedForEditingIsNotNull() && doc.getIsLockedForEditing())
		{
			if (doc.getLockedByUser().equals(domain.getMosUser()))
			{
				engine.showMessage("You are editing this document. Please finish that operation before deleting.", "Cannot delete document", MessageButtons.OK, MessageIcon.WARNING);  //wdev-14260
			}
			else
			{
				// show is opened by other
				//WDEV-12205
				MemberOfStaffLiteVo lockedUser = domain.getLockedUser(doc.getLockedByUser());
				String sLockedUser = lockedUser != null ? lockedUser.getIMosName() : "";
				String sLockedDate = form.getLocalContext().getSelectedDocument().getLockedOnDateTimeIsNotNull() ? form.getLocalContext().getSelectedDocument().getLockedOnDateTime().toString() : "";
				engine.showMessage("The document has been checked out by " + sLockedUser + " since " + sLockedDate, "Cannot delete document", MessageButtons.OK, MessageIcon.WARNING);  //wdev-14260  //WDEV-14274
			}
			open();
			return;
		}

		String filePath = doc.getServerDocument().getFileName();
		form.getLocalContext().setSelectedDocument(null);
		form.getLocalContext().setOldSelectedDocument(null);//WDEV-13546

		FileLock lock = null;
		FileChannel chan = null;

		try
		{
			try
			{
				chan = new RandomAccessFile(getWorkAreaPath() + filePath, "rw").getChannel();//WDEV-13366
				lock = chan.tryLock();
			}
			catch (FileNotFoundException e)
			{
				engine.showErrors(new String[] { "Could not find file in document store" });
				throw e;
			}
			catch (IOException e)
			{
				engine.showErrors(new String[] { "A I/O exception occured while deleting this file" });
				throw e;
			}
			try
			{
				domain.deletePatientDocument(doc);
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showErrors(new String[] { "Could not delete file " + e.getMessage() });
				throw e;
			}
			catch (StaleObjectException e)
			{
				engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });

				throw e;
			}
			lock.release();

			if (chan != null)
			{
				try
				{
					chan.close();
				}
				catch (IOException e)
				{
					// Nevermind
				}
			}
			
			deleteFile(getWorkAreaPath() + filePath);//WDEV-13366
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			if (chan != null)
				try
				{
					chan.close();
				}
				catch (IOException e)
				{
					// Nevermind
				}
		}
	
		open();
	}

	//	WDEV-13546
	private boolean isPatientDocumentReallyChanged(PatientDocumentforDocumentWorklistVo oldSelectedDocument, PatientDocumentVo selectedDocument) 
	{
		if(oldSelectedDocument == null || selectedDocument == null)
			return false;
		
		if(oldSelectedDocument.getCurrentDocumentStatusIsNotNull() && !oldSelectedDocument.getCurrentDocumentStatus().equals(selectedDocument.getCurrentDocumentStatus()))
			return true;
		
		if((oldSelectedDocument.getNoOfCopies() == null && selectedDocument.getNoOfCopiesIsNotNull()) 
			|| (oldSelectedDocument.getNoOfCopiesIsNotNull() && !oldSelectedDocument.getNoOfCopies().equals(selectedDocument.getNoOfCopies())))
			return true;
		
		return false;
	}

	private DocumentEmailStatus emailInstance()//	WDEV-14174
	{
		if (form.chkClear().getValue())
			selectPatient(form.getLocalContext().getSelectedDocument().getPatient());
		else
			form.getGlobalContext().Core.setPatientShort(null);
		
		if (!form.getLocalContext().getSelectedDocumentIsNotNull())
			throw new CodingRuntimeException("No Document selected");
		if (!form.getLocalContext().getSelectedDocument().getPatientIsNotNull())
			throw new CodingRuntimeException("The Document selected is not linked to a patient");

		//GpLiteVo patientGp = domain.getPatientGp(form.getLocalContext().getSelectedDocument().getPatient()); 	WDEV-14174

		if (form.getLocalContext().getPatientGP() == null)//	WDEV-14174
		{
			engine.showErrors(new String[] { "" + (form.grdDocuments().getValue().getPatient().getName() != null ? form.grdDocuments().getValue().getPatient().getName().toString() : null) + " doesn't have a Gp." });
			return DocumentEmailStatus.NOT_SENT;//	WDEV-14174
		}
		
		
		String gpMail = getGpMailAddress(form.getLocalContext().getPatientGP());

		if (gpMail == null || gpMail.length() == 0)
		{
			engine.showErrors(new String[] { "Patient's Gp, " + (form.getLocalContext().getPatientGP().getName() != null ? form.getLocalContext().getPatientGP().getName().toString() : null) + ", doesn't have an email address." });
			return DocumentEmailStatus.NOT_SENT;//	WDEV-14174
		}

		//String emailSubjectTxt = EMAIL_SUBJECT + form.grdDocuments().getValue().getPatient().getName().getSurname();//WDEV-13753
		String emailSubjectTxt = null;
		//wdev-16298
		try 
		{ 
			AppSiteVo site = domain.getSite();
			if(site.getSite().equals(ApplicationSiteName.RCHT))
			{
				emailSubjectTxt = EMAIL_SUBJECT + getnhsNumber(form.grdDocuments().getValue().getPatient().getIdentifiers()) + " - Hospital Correspondence";
			}
			else
			{
				emailSubjectTxt = EMAIL_SUBJECT + form.grdDocuments().getValue().getPatient().getName().getSurname();//WDEV-13753
			}
		
		} 
		catch (DomainInterfaceException e) 
		{ 
			engine.showMessage(e.getMessage()); 
		} 

		//----------------
		String emailMsgTxt = "Patient Document";
		String attachFile = null;

		if (form.getLocalContext().getSelectedDocumentIsNotNull())
		{
			ServerDocumentVo document = form.getLocalContext().getSelectedDocument().getServerDocument();
			if (document != null)
			{
				attachFile = (getPDFStorePath() + document.getFileName()).replace("/", "\\");//WDEV-13366
			}
		}

		try
		{
			new SendMail().sendSSLMessage(gpMail, emailSubjectTxt, emailMsgTxt, attachFile);
		}
		catch (MessagingException e)
		{
			engine.showErrors(new String[] { "Mail could not be sent." });
			e.printStackTrace();
			return DocumentEmailStatus.NOT_SENT;//	WDEV-14174
		}
		
		engine.showMessage("Mail sent successfull to " + (form.getLocalContext().getPatientGP().getName() != null ? form.getLocalContext().getPatientGP().getName().toString() : null), "", MessageButtons.OK, MessageIcon.INFORMATION);
		
		return DocumentEmailStatus.SENT;//	WDEV-14174
	}

	private String getGpMailAddress(GpLiteVo patientGp)
	{
		if (patientGp == null)
			return null;

		String mail = null;

		if (patientGp.getCommChannelsIsNotNull())
		{
			for (int i = 0; i < patientGp.getCommChannels().size(); i++)
			{
				if (patientGp.getCommChannels().get(i) == null)
					continue;

				if (ChannelType.EMAIL.equals(patientGp.getCommChannels().get(i).getChannelType()) && patientGp.getCommChannels().get(i).getCommValue() != null)
				{
					mail = patientGp.getCommChannels().get(i).getCommValue();
				}
			}
		}

		return mail;
	}

	private void printInstance()
	{
		if (!form.getLocalContext().getSelectedDocumentIsNotNull())
			return;
		if (!isDocumentFinal(form.getLocalContext().getSelectedDocument()))
			throw new CodingRuntimeException("Printing a draft document not allowed");

		form.getLocalContext().setNotBatchPrint(true);
		DocumentAndPatientWrapperVoCollection documents = new DocumentAndPatientWrapperVoCollection();
		DocumentAndPatientWrapperVo doc = new DocumentAndPatientWrapperVo();
		doc.setDocument(form.getLocalContext().getSelectedDocument());
		doc.setPatient(form.grdDocuments().getValue().getPatient());

		documents.add(doc);
		
		//WDEV-12643
		if(ConfigFlag.UI.CORRESPONDENCE_KEEP_PATIENT_SELECTED.getValue())//WDEV-13794
			selectPatient(form.getLocalContext().getSelectedDocument().getPatient());
		
		print(documents, null);
	}

	private void viewInstance()
	{
		if (form.getLocalContext().getSelectedDocumentIsNotNull())
		{
			ServerDocumentVo document = form.getLocalContext().getSelectedDocument().getServerDocument();
			if (document != null)
			{
				String fileName = document.getFileName();
				String fullPath = getMaximsDocumentStorePath();

				if (FileType.DOC.equals(document.getFileType()))
				{
					throw new CodingRuntimeException("Trying to view a draft document not allowed");
				}

				fullPath += fileName;
				
				selectPatient(form.getLocalContext().getSelectedDocument().getPatient());
				engine.open(form.getForms().Core.PatientDocumentView, new Object[] { fullPath.replace("/", "\\") });
			}
		}
	}

	private boolean deleteFile(String fileToDelete)
	{
		File file = new File(fileToDelete);
		if (file.exists())
		{
			boolean wasDeleted = file.delete();
			if (!wasDeleted)
			{
				file.deleteOnExit();
			}
		}
		
		return true;
	}
	
	private PatientDocumentVo changeStatus(DocumentStatus newStatus, PatientDocumentVo doc, boolean showErrors,boolean isBatch)
	{	
		if (doc == null)
			throw new CodingRuntimeException("There is no document selected to change status for");

		if (!isBatch)
		{
			if (form.chkClear().getValue())
				selectPatient(doc.getPatient());
			else
				form.getGlobalContext().Core.setPatientShort(null);
		}
		
		errorS = null;

		if (isDocCheckoutByMe(doc))
		{
			errorS = "Could not change status.\nThe document is  checked out by you";
			if (showErrors)
			{
				showContinueEditMsg();
				return doc;
			}
			
			return null;
		}

		if (isDocCheckedOutBySomeoneElse(doc))
		{
			errorS = "Could not change status.\nThe document is checked out by someone else";
			if (showErrors)
				engine.showMessage(errorS, "Cannot change status", MessageButtons.OK, MessageIcon.WARNING);  //wdev-14260
			
			return null;
		}
		
		//WDEV-13546
		if(!isBatch && form.getLocalContext().getOldSelectedDocumentIsNotNull() 
				&& form.getLocalContext().getOldSelectedDocument().getID_PatientDocument().equals(doc.getID_PatientDocument()) 
				&& doc.getVersion_PatientDocument() != form.getLocalContext().getOldSelectedDocument().getVersion_PatientDocument())
		{
			if (showErrors && isPatientDocumentReallyChanged(form.getLocalContext().getOldSelectedDocument(), form.getLocalContext().getSelectedDocument()))//WDEV-13546
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Unable to change status", MessageButtons.OK, MessageIcon.ERROR);
				open();
				return null;
			}
		}

		PatientDocumentStatusVo newDocStatus = new PatientDocumentStatusVo();
		newDocStatus.setCorrespondenceStatus(newStatus);
		newDocStatus.setRecordingDateTime(new DateTime());
		newDocStatus.setRecordingUser((MemberOfStaffLiteVo) domain.getMosUser());

		if (!doc.getDocumentStatusHistoryIsNotNull())
		{
			doc.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
		}
		doc.getDocumentStatusHistory().add(newDocStatus);
		doc.setCurrentDocumentStatus(newDocStatus);

		String[] errors = doc.validate();
		if (errors != null && errors.length > 0 )
		{
			errorS = "Could not change status.\nThe document is not valid";
			if (showErrors)
				engine.showErrors(errors);
			return null;
		}
		
		PatientDocumentVo patDoc = null;
		if (newStatus.equals(DocumentStatus.READY_TO_SEND))
		{
			if (isStale(doc))
			{
				errorS ="Could not finalise document.\nThe document has been modified by another user";
				if (showErrors)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Unable to change status", MessageButtons.OK, MessageIcon.ERROR);
					open();
				}
				return null;
			}
			patDoc = lockPatientDoc(doc, false, null);//	WDEV-14174
			if (patDoc == null)
			{
				errorS = "Could not finalise document";
				if (showErrors)
				{
					engine.showErrors(new String[] { errorS});
					open();
				}
				return null;
			}
		}
		else
		{
			try
			{
				patDoc = domain.savePatientDocument(doc);
			}
			catch (StaleObjectException e)
			{
				errorS= "Could not change status.\nThe document has been modified by another user";
				if (showErrors)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Unable to change status", MessageButtons.OK, MessageIcon.ERROR);
					open();
				}
				return null;
			}
		}

		return patDoc;
	}

	private String undoCheckOut(PatientDocumentVo doc) throws StaleObjectException
	{
		validateNonFinalDocument(doc);

		String fileName = doc.getServerDocument().getFileName();
		if (!deleteFile((getCheckOutWorkArea() + fileName).replace("/", "\\")))//WDEV-13753
		{
			if (isStale(doc))
			{
				return ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue();
			}
			return "Could not remove document from work area.\nPlease make sure that Microsoft Word is closed\nDocument will remain checked-out";
		}

		doc.setIsLockedForEditing(false);
		doc.setLockedByUser(null);
		doc.setLockedOnDateTime(null);
		doc.validate();

		form.getLocalContext().setSelectedDocument(domain.savePatientDocument(doc));

		return null;
	}

	private void batchEmail(DocumentStatus status)//	WDEV-14174
	{
		if (!areDocumentsSelected())
		{
			engine.showMessage("Please select some documents first");
			return;
		}
		DocumentAndPatientWrapperVoCollection docs = getSelectedDocsWithPatient();

		PatientDocumentErrorVoCollection errors = lockDraftDocuments(docs, status);//	WDEV-14174

		errors = email(docs, errors);//	WDEV-14174
		savePatientDocuments(docs, errors, true);//	WDEV-14174,  	WDEV-15599
		open();
	}

	//	WDEV-14174,  	WDEV-15599
	private PatientDocumentErrorVoCollection savePatientDocuments(DocumentAndPatientWrapperVoCollection docs, PatientDocumentErrorVoCollection errors, boolean showErrors) 
	{
		errorS = null;
		
		if(docs != null)// 	WDEV-15599
		{
			for(int i=0; i<docs.size(); i++)
			{
				PatientDocumentVo doc = docs.get(i).getDocument();
				
				String[] validationErrors = doc.validate();
				if(validationErrors != null && validationErrors.length > 0)
				{
					errorS="Patient document could not be updated with 'Printed' or 'Sent Email' status.";
					if(errors == null)
					{
						errors = new PatientDocumentErrorVoCollection();
					}
					errors.add(getDocumentError(docs.get(i)));
					
					continue;
				}
				try 
				{
					docs.get(i).setDocument(domain.savePatientDocument(doc));
				} 
				catch (StaleObjectException e) 
				{
					e.printStackTrace();
					errorS="Patient document could not be updated with 'Printed' or 'Sent Email' status.";
					
					if(errors == null)
					{
						errors = new PatientDocumentErrorVoCollection();
					}
					
					errors.add(getDocumentError(docs.get(i)));
				}
			}
		}
		
		if (errors != null && errors.size() > 0 && showErrors)// 	WDEV-15599
		{
			engine.open(form.getForms().Core.PatientDocumentErrors,new Object[]{errors});
		}
		
		return errors;// 	WDEV-15599
	}

	private PatientDocumentErrorVoCollection lockDraftDocuments(DocumentAndPatientWrapperVoCollection docs, DocumentStatus status)
	{		
		PatientDocumentErrorVoCollection errors = new PatientDocumentErrorVoCollection();
		for (int i = docs.size() - 1; i >= 0; i--)
		{
			PatientDocumentVo lockedPatientDoc = null;
			DocumentAndPatientWrapperVo doc = docs.get(i);
			
			if(doc == null)//	WDEV-13546
				continue;
			
			//	WDEV-13546
			if(Boolean.TRUE.equals(doc.getIsStale()))
			{
				errorS = "Could not finalise document.\nThe document has been modified by another user";
			}
			else if (isDocumentFinal(doc.getDocument()))
			{
				lockedPatientDoc = getFinalDocument(status, doc);//	WDEV-14174
			}
			else
			{
				errorS = null;
				if (isDocCheckoutByMe(doc.getDocument()))
				{
					errorS = "Could not finalise document.\nDocument is checked out by you";

				}
				else if (isDocCheckedOutBySomeoneElse(doc.getDocument()))
				{
					errorS = "Could not finalise document.\nDocument is checked out by someone else";
				}
				else
				{
					lockedPatientDoc = lockPatientDoc(doc.getDocument(), true, status);//	WDEV-14174
				}

			}

			if (lockedPatientDoc == null)
			{
				if (errorS==null)
					errorS="Could not finalise document.";
				errors.add(getDocumentError(doc));
				docs.remove(i);
				continue;
			}
			
			doc.setDocument(lockedPatientDoc);
		}	
		
		return errors;
	}

	//	WDEV-14174
	private PatientDocumentVo getFinalDocument(DocumentStatus status, DocumentAndPatientWrapperVo doc) 
	{
		PatientDocumentVo lockedPatientDoc = doc.getDocument();
		
		if (status != null && lockedPatientDoc.getCurrentDocumentStatus() != null && !status.equals(lockedPatientDoc.getCurrentDocumentStatus().getCorrespondenceStatus()) && !DocumentStatus.COMPLETED.equals(lockedPatientDoc.getCurrentDocumentStatus().getCorrespondenceStatus()))
		{
			PatientDocumentStatusVo finalS = new PatientDocumentStatusVo();
			finalS.setCorrespondenceStatus(status);
			finalS.setRecordingDateTime(new DateTime());
			finalS.setRecordingUser((MemberOfStaffShortVo) domain.getMosUser());
			
			if (!lockedPatientDoc.getDocumentStatusHistoryIsNotNull())
			{
				lockedPatientDoc.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
			}
			
			lockedPatientDoc.getDocumentStatusHistory().add(finalS);
			lockedPatientDoc.setCurrentDocumentStatus(finalS);
			
			String[] errs = lockedPatientDoc.validate();
			if (errs != null && errs.length > 0)
			{
				return null;
			}

			try
			{
				lockedPatientDoc = domain.savePatientDocument(lockedPatientDoc);
			}
			catch (StaleObjectException e)
			{
				e.printStackTrace();
				return null;
			}
				
		}
		
		return lockedPatientDoc;
	}

	private PatientDocumentErrorVo getDocumentError(DocumentAndPatientWrapperVo docP)
	{
		if(docP == null)//wdev-13546
			return null;
		
		PatientDocumentErrorVo errorVo = new PatientDocumentErrorVo();
		errorVo.setDocumentDate(docP.getDocument() != null ? docP.getDocument().getDocumentDate() : null);//WDEV-13546
		errorVo.setDocumentName(docP.getDocument() != null ? docP.getDocument().getName() : null);//wdev-13546
		errorVo.setPatient(docP.getPatient().getName());
		errorVo.setIdentifiers(docP.getPatient().getIdentifiers());
		errorVo.setError(errorS);
		
		return errorVo;
	}

	private void batchChangeStatus()
	{
		if (!areDocumentsSelected())
		{
			engine.showMessage("Please select some documents first");
			return;
		}
		if (areNonReadyToSendDocumentsSelected())
		{
			engine.showMessage("Please select only ready to send documents");
		}

		DocumentAndPatientWrapperVoCollection selectedDocs = getSelectedDocsWithPatient();
		PatientDocumentErrorVoCollection errors = new PatientDocumentErrorVoCollection();
		for (int i = 0; i < selectedDocs.size(); i++)
		{
			errorS = null;
			if(selectedDocs.get(i) == null)//	WDEV-13546
				continue;
			
			if(Boolean.TRUE.equals(selectedDocs.get(i).getIsStale()))//	WDEV-13546
			{
				errorS ="Could not change status.\nThe document has been modified by another user";
				errors.add(getDocumentError(selectedDocs.get(i)));
			}
			else if (changeStatus(DocumentStatus.COMPLETED, selectedDocs.get(i).getDocument(), false,true) == null && errorS !=null )
			{
				errors.add(getDocumentError(selectedDocs.get(i)));
			}
		}
		
		if (errors.size() >0)
		{
			engine.open(form.getForms().Core.PatientDocumentErrors,new Object[]{errors});
		}
		
		open();
	}

	private DocumentAndPatientWrapperVoCollection getSelectedDocsWithPatient()
	{
		DocumentAndPatientWrapperVoCollection result = new DocumentAndPatientWrapperVoCollection();
		for (int i = 0; i < form.grdDocuments().getRows().size(); i++)
		{
			if (form.grdDocuments().getRows().get(i).getSelect())
			{
				DocumentAndPatientWrapperVo record = new DocumentAndPatientWrapperVo();
				record.setPatient(form.grdDocuments().getRows().get(i).getValue().getPatient());
				record.setIsStale(false);//	WDEV-13546
				try
				{
					record.setDocument(domain.getPatientDocument(form.grdDocuments().getRows().get(i).getValue()));
				
					if(record.getDocumentIsNotNull() 
							&& form.grdDocuments().getRows().get(i).getValue() != null 
							&& form.grdDocuments().getRows().get(i).getValue().getID_PatientDocument().equals(record.getDocument().getID_PatientDocument())
							&& form.grdDocuments().getRows().get(i).getValue().getVersion_PatientDocument() != record.getDocument().getVersion_PatientDocument())//	WDEV-13546
					{
						if(isPatientDocumentReallyChanged(form.grdDocuments().getRows().get(i).getValue(), record.getDocument()))
						{
							record.setIsStale(true);
						}
					}
					
				}
				catch (StaleObjectException e)
				{
					record.setIsStale(true);//	WDEV-13546
				}
				
				result.add(record);
			}
		}

		return result;
	}

	// send mail class
	private class SendMail
	{
		private SendMail()
		{
			Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());

			SMTP_HOST_NAME = ConfigFlag.FW.SMTP_SERVER.getValue();
			SMTP_PORT = ConfigFlag.FW.SMTP_PORT.getValue();
			SMTP_AUTH = ConfigFlag.FW.SMTP_AUTH.getValue();
			emailFromAddress = ConfigFlag.FW.SMTP_SENDER.getValue();
		}

		public void sendSSLMessage(String recipient, String subject, String message, String atach) throws MessagingException
		{
			System.out.println("Send email to: " + recipient + " with subject :" + subject + " and message : " + message + " and attach file: " + atach);

			boolean debug = false;
			Properties props = new Properties();
			props.put("mail.host", SMTP_HOST_NAME);
			props.put("mail.smtp.auth", "true");
			props.put("mail.debug", "false");
			props.put("mail.smtp.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.port", SMTP_PORT);
			props.put("mail.smtp.socketFactory.fallback", "false");

			Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator()
			{
				protected PasswordAuthentication getPasswordAuthentication()
				{
					String[] auth = SMTP_AUTH.split(":");
					return new PasswordAuthentication(auth[0], auth[1]);
				}
			});

			session.setDebug(debug);

			Message msg = new MimeMessage(session);
			InternetAddress addressFrom = new InternetAddress(emailFromAddress);
			msg.setFrom(addressFrom);

			InternetAddress addressTo = new InternetAddress(recipient);
			msg.setRecipient(Message.RecipientType.TO, addressTo);

			// Setting the Subject and Content Type
			msg.setSubject(subject);
			msg.setContent(message, "text/plain");

			// create and fill the first message part
			MimeBodyPart firstMsgBodyPart = new MimeBodyPart();
			firstMsgBodyPart.setText("");//WDEV-13753

			// create the second message part
			MimeBodyPart secondMsgBodyPart = new MimeBodyPart();

			// attach the file to the message
			FileDataSource fds = new FileDataSource(atach);
			secondMsgBodyPart.setDataHandler(new DataHandler(fds));
			secondMsgBodyPart.setFileName(fds.getName());

			// create the Multipart and add its parts to it
			Multipart mp = new MimeMultipart();
			mp.addBodyPart(firstMsgBodyPart);
			mp.addBodyPart(secondMsgBodyPart);

			// add the Multipart to the message
			msg.setContent(mp);

			// set the Date: header
			msg.setSentDate(new java.util.Date());

			Transport tr = session.getTransport("smtp");
			tr.connect(SMTP_HOST_NAME, SMTP_PORT, null, null);
			msg.saveChanges();
			tr.sendMessage(msg, msg.getAllRecipients());
			tr.close();
		}
	}

	@Override
	protected void onGrdDocumentsGridCheckBoxClicked(int column, grdDocumentsRow row, boolean isChecked) throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override//WDEV-11810
	protected void onChkPatOnlyValueChanged() throws PresentationLogicException
	{
		if (form.chkPatOnly().getValue())
			form.txtPatId().setValue(null);
		updateControlsState();
	}

	@Override
	protected void onChkClearValueChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setKeepPatientInContext(form.chkClear().getValue());
	}
	
	//WDEV-14174
	class PatientDocAuthoringComparator implements Comparator<PatientDocumentforDocumentWorklistVo>
	{
		private int order = 1;
		public PatientDocAuthoringComparator()
		{
			order = 1;
		}
		public PatientDocAuthoringComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(PatientDocumentforDocumentWorklistVo o1, PatientDocumentforDocumentWorklistVo o2)
		{
			if (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getAuthoringHCPIsNotNull() && o2 != null && o2.getAuthoringHCPIsNotNull())
					return order*o1.getAuthoringHCP().compareTo(o2.getAuthoringHCP());
			}
			else if(!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()))
			{
				if(o1 != null && o1.getResponsibleHCPIsNotNull() && o2 != null && o2.getResponsibleHCPIsNotNull())
					return order*o1.getResponsibleHCP().compareTo(o2.getResponsibleHCP());
			}
			
			if (o1 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o1.getResponsibleHCPIsNotNull()))
				return -1 * order;
			
			if (o2 == null || (AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getAuthoringHCPIsNotNull()) || (!AUTHORING_HCP.equals(ConfigFlag.UI.DISPLAYED_HCP_ON_PATIENT_DOCUMENT_FORM.getValue()) && !o2.getResponsibleHCPIsNotNull()))
				return order;
			
			return 0;
		}	
	}

	//WDEV-14174
	@Override
	protected void onGrdDocumentsGridHeaderClicked(int column) throws PresentationLogicException 
	{
		PatientDocumentforDocumentWorklistVoCollection values = form.grdDocuments().getValues();
		form.grdDocuments().getRows().clear();
		
		switch (column)
		{
			case AUTHORING_HCP_COLUMN:
				form.getLocalContext().setAuthoringSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getAuthoringSortOrder()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
				values.sort(new PatientDocAuthoringComparator(form.getLocalContext().getAuthoringSortOrder()));
			break;
			
			default:
			break;
		}
		
		populateScreenFromData(values);
	}
}
