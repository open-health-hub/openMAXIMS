//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.documentworklist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbIdTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PatIdType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PatIdType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PatIdType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PatIdType getValue()
		{
			return (ims.core.vo.lookups.PatIdType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PatIdType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.framework.interfaces.ILocation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.framework.interfaces.ILocation value)
		{
			return super.control.removeRow(value);
		}
		public ims.framework.interfaces.ILocation getValue()
		{
			return (ims.framework.interfaces.ILocation)super.control.getValue();
		}
		public void setValue(ims.framework.interfaces.ILocation value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDocStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DocumentStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DocumentStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DocumentStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DocumentStatus getValue()
		{
			return (ims.core.vo.lookups.DocumentStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DocumentStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDocTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DocumentCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DocumentCategory getValue()
		{
			return (ims.core.vo.lookups.DocumentCategory)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DocumentCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbClinicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ClinicLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ClinicLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ClinicLiteVo getValue()
		{
			return (ims.core.vo.ClinicLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ClinicLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdDocumentsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDocumentsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isSurnameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showSurnameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForSurname(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getSurname()
		{
			return (String)super.row.get(0);
		}
		public void setSurname(String value)
		{
			super.row.set(0, value);
		}
		public void setCellSurnameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isForenameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showForenameOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForForename(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getForename()
		{
			return (String)super.row.get(1);
		}
		public void setForename(String value)
		{
			super.row.set(1, value);
		}
		public void setCellForenameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setNHSNoReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isNHSNoReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showNHSNoOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForNHSNo(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getNHSNo()
		{
			return (String)super.row.get(2);
		}
		public void setNHSNo(String value)
		{
			super.row.set(2, value);
		}
		public void setCellNHSNoTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColTitleReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColTitleReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColTitleOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColTitle(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColTitle()
		{
			return (String)super.row.get(3);
		}
		public void setColTitle(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColTitleTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setAuthorReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isAuthorReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showAuthorOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForAuthor(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getAuthor()
		{
			return (String)super.row.get(4);
		}
		public void setAuthor(String value)
		{
			super.row.set(4, value);
		}
		public void setCellAuthorTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setDateReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isDateReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showDateOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForDate(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.framework.utils.Date getDate()
		{
			return (ims.framework.utils.Date)super.row.get(5);
		}
		public void setDate(ims.framework.utils.Date value)
		{
			super.row.set(5, value);
		}
		public void setCellDateTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColPrintedReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColPrintedReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColPrintedOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColPrinted(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.framework.utils.Image getColPrinted()
		{
			return (ims.framework.utils.Image)super.row.get(6);
		}
		public void setColPrinted(ims.framework.utils.Image value)
		{
			super.row.set(6, value);
		}
		public void setCellColPrintedTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColEmailedReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColEmailedReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColEmailedOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColEmailed(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Image getColEmailed()
		{
			return (ims.framework.utils.Image)super.row.get(7);
		}
		public void setColEmailed(ims.framework.utils.Image value)
		{
			super.row.set(7, value);
		}
		public void setCellColEmailedTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isStatusReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showStatusOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForStatus(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getStatus()
		{
			return (String)super.row.get(8);
		}
		public void setStatus(String value)
		{
			super.row.set(8, value);
		}
		public void setCellStatusTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setColNoOfCopiesReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isColNoOfCopiesReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showColNoOfCopiesOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForColNoOfCopies(String value)
		{
			super.row.setTooltip(9, value);
		}
		public Integer getColNoOfCopies()
		{
			return (Integer)super.row.get(9);
		}
		public void setColNoOfCopies(Integer value)
		{
			super.row.set(9, value);
		}
		public void setCellColNoOfCopiesTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isSelectReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showSelectOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForSelect(String value)
		{
			super.row.setTooltip(10, value);
		}
		public boolean getSelect()
		{
			return ((Boolean)super.row.get(10)).booleanValue();
		}
		public void setSelect(boolean value)
		{
			super.row.set(10, new Boolean(value));
		}
		public void setCellSelectTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.core.vo.PatientDocumentforDocumentWorklistVo getValue()
		{
			return (ims.core.vo.PatientDocumentforDocumentWorklistVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDocumentforDocumentWorklistVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDocumentsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDocumentsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDocumentsRow get(int index)
		{
			return new grdDocumentsRow(super.collection.get(index));
		}
		public grdDocumentsRow newRow()
		{
			return new grdDocumentsRow(super.collection.newRow());
		}
		public grdDocumentsRow newRow(boolean autoSelect)
		{
			return new grdDocumentsRow(super.collection.newRow(autoSelect));
		}
		public grdDocumentsRow newRowAt(int index)
		{
			return new grdDocumentsRow(super.collection.newRowAt(index));
		}
		public grdDocumentsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDocumentsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDocumentsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setAuthorCaption(String value)
		{
			this.grid.setColumnCaption(4, value);
		}
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.PatientDocumentforDocumentWorklistVoCollection getValues()
		{
			ims.core.vo.PatientDocumentforDocumentWorklistVoCollection listOfValues = new ims.core.vo.PatientDocumentforDocumentWorklistVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDocumentforDocumentWorklistVo getValue()
		{
			return (ims.core.vo.PatientDocumentforDocumentWorklistVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDocumentforDocumentWorklistVo value)
		{
			super.grid.setValue(value);
		}
		public grdDocumentsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDocumentsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDocumentsRowCollection getRows()
		{
			return new grdDocumentsRowCollection(super.grid.getRows());
		}
		public grdDocumentsRow getRowByValue(ims.core.vo.PatientDocumentforDocumentWorklistVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDocumentsRow(row);
		}
		public void setSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setNHSNoHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getNHSNoHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColTitleHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColTitleHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setAuthorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getAuthorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColPrintedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColPrintedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColEmailedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColEmailedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setColNoOfCopiesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getColNoOfCopiesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'Core.KeepPatientInContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.DocumentWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.DocumentWorklistSearchCriteriaVo' of the global context variable 'Core.DocumentWorklistSearchCriteria' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(175);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuDocumentWorklistMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuDocumentWorklistMenuSELECT_ALLItem = factory.createMenuItem(startControlID.intValue() + 1, "Select All", true, false, null, false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680017)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuSELECT_ALLItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuDESELECT_ALLItem = factory.createMenuItem(startControlID.intValue() + 2, "Deselect All", true, false, null, false, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680018)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuDESELECT_ALLItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuNEW_DOCUMENTItem = factory.createMenuItem(startControlID.intValue() + 3, "New Document", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680015)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuNEW_DOCUMENTItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Document", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680001)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuEDITItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuDELETEItem = factory.createMenuItem(startControlID.intValue() + 5, "Delete Document", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680002)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuDELETEItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuSELECT_PATIENTItem = factory.createMenuItem(startControlID.intValue() + 6, "Select Patient", true, false, new Integer(110107), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680016)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuSELECT_PATIENTItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuVIEWItem = factory.createMenuItem(startControlID.intValue() + 7, "View Document", true, false, new Integer(102223), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680009)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuVIEWItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuPRINTItem = factory.createMenuItem(startControlID.intValue() + 8, "Print Document", true, false, new Integer(102556), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680010)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuPRINTItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuEMAILItem = factory.createMenuItem(startControlID.intValue() + 9, "Email to Patient GP", true, false, new Integer(111155), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680011)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuEMAILItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuFOR_REVIEWItem = factory.createMenuItem(startControlID.intValue() + 10, "Mark For Review", true, false, new Integer(111151), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680004)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuFOR_REVIEWItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuFOR_UPDATEItem = factory.createMenuItem(startControlID.intValue() + 11, "Mark For Update", true, false, new Integer(111152), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680005)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuFOR_UPDATEItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SENDItem = factory.createMenuItem(startControlID.intValue() + 12, "Mark Ready To Send", true, false, new Integer(111153), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680006)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SENDItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuCOMPLETEDItem = factory.createMenuItem(startControlID.intValue() + 13, "Mark Completed", true, false, new Integer(111154), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680008)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuCOMPLETEDItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem = factory.createMenuItem(startControlID.intValue() + 14, "Mark Ready To Send and print all selected documents", true, false, new Integer(111156), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680019)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem = factory.createMenuItem(startControlID.intValue() + 15, "Mark Ready To Send and email all selected documents", true, false, new Integer(111157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680020)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem = factory.createMenuItem(startControlID.intValue() + 16, "Mark Ready To Send, print and e-mail all selected documents", true, false, new Integer(111158), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680021)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_PRINTItem = factory.createMenuItem(startControlID.intValue() + 17, "Finalise and print all selected documents", true, false, new Integer(111156), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680012)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_PRINTItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_EMAILItem = factory.createMenuItem(startControlID.intValue() + 18, "Finalise and email all selected documents", true, false, new Integer(111157), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680013)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_EMAILItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_COMPLETEItem = factory.createMenuItem(startControlID.intValue() + 19, "Mark all selected Documents as Completed", true, false, new Integer(102558), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680014)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuBATCH_COMPLETEItem);
		contextMenus.Core.contextMenuDocumentWorklistMenuSETPATHItem = factory.createMenuItem(startControlID.intValue() + 20, "Set Editor Path", true, false, new Integer(103152), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3680007)))
			contextMenus.Core.contextMenuDocumentWorklistMenu.add(contextMenus.Core.contextMenuDocumentWorklistMenuSETPATHItem);
		form.registerMenu(contextMenus.Core.contextMenuDocumentWorklistMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 120, 6, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccResponsibleForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_ccResponsibleControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(120), new Integer(6), new Integer(280), new Integer(20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1), m_ccResponsibleForm, instance1 } );
		ims.framework.Control m_ccResponsibleControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1), m_ccResponsibleForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccResponsibleControl);
		Menu[] menus1 = m_ccResponsibleForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 120, 54, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccTypistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 2003, skipContextValidation);
		//ims.framework.Control m_ccTypistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(120), new Integer(54), new Integer(280), new Integer(20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2003), m_ccTypistForm, instance2 } );
		ims.framework.Control m_ccTypistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2003), m_ccTypistForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccTypistControl);
		Menu[] menus2 = m_ccTypistForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}
		ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 120, 30, 280, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccAuthorForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance3, startTabIndex.intValue() + 1002, skipContextValidation);
		//ims.framework.Control m_ccAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(120), new Integer(30), new Integer(280), new Integer(20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1002), m_ccAuthorForm, instance3 } );
		ims.framework.Control m_ccAuthorControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1002), m_ccAuthorForm, instance3, Boolean.FALSE } );
		super.addControl(m_ccAuthorControl);
		Menu[] menus3 = m_ccAuthorForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus3.length; x++)
		{
			form.registerMenu(menus3[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 400, 128, 102, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient ID Value:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 400, 104, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient ID Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 640, 80, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "O/P Clinic:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 400, 80, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Event Date from:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 400, 56, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 400, 32, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Document Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 8, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Document Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Typist:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 168, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3018), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Clinic Letter Batch Create", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 528, 126, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 3014), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 528, 78, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 3011), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 664, 78, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3012), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 528, 102, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbIdTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3013), ControlState.UNKNOWN, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.FALSE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbIdTypeTemp);
		cmbIdTypeComboBox cmbIdType = (cmbIdTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIdTypeComboBox.class, m_cmbIdTypeTemp);
		super.addComboBox(cmbIdType);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 78, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 3004), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 528, 6, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbDocStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3008), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDocStatusTemp);
		cmbDocStatusComboBox cmbDocStatus = (cmbDocStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDocStatusComboBox.class, m_cmbDocStatusTemp);
		super.addComboBox(cmbDocStatus);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 528, 54, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3010), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 528, 30, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbDocTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3009), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDocTypeTemp);
		cmbDocTypeComboBox cmbDocType = (cmbDocTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDocTypeComboBox.class, m_cmbDocTypeTemp);
		super.addComboBox(cmbDocType);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 120, 102, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 3005), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbClinicTemp);
		qmbClinicComboBox qmbClinic = (qmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicComboBox.class, m_qmbClinicTemp);
		super.addComboBox(qmbClinic);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 120, 128, 272, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 3006), ControlState.UNKNOWN, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Exclude completed documents", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 440, 603, 360, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3019), ControlState.UNKNOWN, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Keep selected Patient Record Open after viewing\\editing document", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 120, 150, 272, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 3007), ControlState.UNKNOWN, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View documents for selected patient", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 832, 408, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDocumentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 3017), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(50), Boolean.TRUE, contextMenus.Core.contextMenuDocumentWorklistMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDocumentsTemp);
		grdDocumentsGrid grdDocuments = (grdDocumentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDocumentsGrid.class, m_grdDocumentsTemp);
		grdDocuments.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.setSurnameHeaderTooltip("Surname");
		grdDocuments.addStringColumn("Forename", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.setForenameHeaderTooltip("Forename");
		grdDocuments.addStringColumn("NHS No", 0, 0, 80, true, false, 1, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.setNHSNoHeaderTooltip("NHS No");
		grdDocuments.addStringColumn("Document\nTitle", 0, 0, 110, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.setColTitleHeaderTooltip("Document Title");
		grdDocuments.addStringColumn("Author", 0, 0, 120, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.addDateColumn("Event\nDate", 0, 0, 70, true, true, null, false, 1, false);
		grdDocuments.setDateHeaderTooltip("Event Date");
		grdDocuments.addImageColumn(" ", 0, 0, 30, true, 0);
		grdDocuments.addImageColumn(" ", 0, 0, 30, true, 0);
		grdDocuments.addStringColumn("Document\nStatus", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDocuments.setStatusHeaderTooltip("Document Status");
		grdDocuments.addIntColumn("Copies", 0, 0, 45, true, true, null, false, 0, false);
		grdDocuments.setColNoOfCopiesHeaderTooltip("Copies");
		grdDocuments.addBoolColumn(" Select", 0, 0, -1, false, true, 0, true);
		grdDocuments.setSelectHeaderTooltip(" Select");
		super.addGrid(grdDocuments);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 808, 6, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 3016), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 776, 6, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 3015), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccResponsible()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccResponsibleValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccResponsibleVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccResponsibleVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccResponsibleEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccResponsibleEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccTypist()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccTypistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccTypistVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccTypistVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccTypistEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccTypistEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public ims.core.forms.mosquery.IComponent ccAuthor()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccAuthorValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccAuthorVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccAuthorVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccAuthorEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccAuthorEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Label lblIDValue()
	{
		return (Label)super.getControl(3);
	}
	public Label lblIDType()
	{
		return (Label)super.getControl(4);
	}
	public Button btnBatchC()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtPatId()
	{
		return (TextBox)super.getControl(16);
	}
	public DateControl dteFrom()
	{
		return (DateControl)super.getControl(17);
	}
	public DateControl dteTo()
	{
		return (DateControl)super.getControl(18);
	}
	public cmbIdTypeComboBox cmbIdType()
	{
		return (cmbIdTypeComboBox)super.getComboBox(0);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(1);
	}
	public cmbDocStatusComboBox cmbDocStatus()
	{
		return (cmbDocStatusComboBox)super.getComboBox(2);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(3);
	}
	public cmbDocTypeComboBox cmbDocType()
	{
		return (cmbDocTypeComboBox)super.getComboBox(4);
	}
	public qmbClinicComboBox qmbClinic()
	{
		return (qmbClinicComboBox)super.getComboBox(5);
	}
	public CheckBox chkExcludeCompleted()
	{
		return (CheckBox)super.getControl(25);
	}
	public CheckBox chkClear()
	{
		return (CheckBox)super.getControl(26);
	}
	public CheckBox chkPatOnly()
	{
		return (CheckBox)super.getControl(27);
	}
	public grdDocumentsGrid grdDocuments()
	{
		return (grdDocumentsGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(29);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(30);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PatientCorrespondenceTemplates = new LocalFormName(102358);
				ClinicLetterBatchCreate = new LocalFormName(102306);
				LocalSettingsDialog = new LocalFormName(102102);
				MultiPrintDialog = new LocalFormName(102141);
				PatientDocumentView = new LocalFormName(102335);
				PatientDocumentEdit = new LocalFormName(102363);
				PatientDocumentErrors = new LocalFormName(102364);
			}
			public final FormName PatientCorrespondenceTemplates;
			public final FormName ClinicLetterBatchCreate;
			public final FormName LocalSettingsDialog;
			public final FormName MultiPrintDialog;
			public final FormName PatientDocumentView;
			public final FormName PatientDocumentEdit;
			public final FormName PatientDocumentErrors;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Correspondence = new CorrespondenceImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final class CorrespondenceImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceImages()
			{
				FinaliseAndEmail16 = new ImageHelper(111157, "Images/Correspondence/finalise_email_16x16.png", new Integer(16), new Integer(16));
				FinaliseAndPrint16 = new ImageHelper(111156, "Images/Correspondence/finalise_print_16x16.png", new Integer(16), new Integer(16));
				Email_not_send = new ImageHelper(111159, "Images/Correspondence/email_not_sent.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FinaliseAndEmail16;
			public final ims.framework.utils.Image FinaliseAndPrint16;
			public final ims.framework.utils.Image Email_not_send;
		}
		public final CoreImages Core;
		public final CorrespondenceImages Correspondence;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedDocument = new ims.framework.ContextVariable("SelectedDocument", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier + "");
			cxl_ShouldOpenAfterPathIsSet = new ims.framework.ContextVariable("ShouldOpenAfterPathIsSet", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__ShouldOpenAfterPathIsSet_" + componentIdentifier + "");
			cxl_DocumentsForPrint = new ims.framework.ContextVariable("DocumentsForPrint", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__DocumentsForPrint_" + componentIdentifier + "");
			cxl_LockErrorMessageBoxId = new ims.framework.ContextVariable("LockErrorMessageBoxId", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__LockErrorMessageBoxId_" + componentIdentifier + "");
			cxl_ContinueEditMessageBoxId = new ims.framework.ContextVariable("ContinueEditMessageBoxId", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__ContinueEditMessageBoxId_" + componentIdentifier + "");
			cxl_LockErrorEmailMessageBoxId = new ims.framework.ContextVariable("LockErrorEmailMessageBoxId", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__LockErrorEmailMessageBoxId_" + componentIdentifier + "");
			cxl_DocumentsForEmail = new ims.framework.ContextVariable("DocumentsForEmail", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__DocumentsForEmail_" + componentIdentifier + "");
			cxl_NotBatchPrint = new ims.framework.ContextVariable("NotBatchPrint", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__NotBatchPrint_" + componentIdentifier + "");
			cxl_OldSelectedDocument = new ims.framework.ContextVariable("OldSelectedDocument", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier + "");
			cxl_AuthoringSortOrder = new ims.framework.ContextVariable("AuthoringSortOrder", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__AuthoringSortOrder_" + componentIdentifier + "");
			cxl_PatientGP = new ims.framework.ContextVariable("PatientGP", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__PatientGP_" + componentIdentifier + "");
			cxl_DeleteDocumentMessageBoxId = new ims.framework.ContextVariable("DeleteDocumentMessageBoxId", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__DeleteDocumentMessageBoxId_" + componentIdentifier + "");
			cxl_DeleteDocumentMessageConfirmationId = new ims.framework.ContextVariable("DeleteDocumentMessageConfirmationId", prefix + "_lv_Core.DocumentWorklist.__internal_x_context__DeleteDocumentMessageConfirmationId_" + componentIdentifier + "");
		}
		
		public boolean getSelectedDocumentIsNotNull()
		{
			return !cxl_SelectedDocument.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVo getSelectedDocument()
		{
			return (ims.core.vo.PatientDocumentVo)cxl_SelectedDocument.getValue(context);
		}
		public void setSelectedDocument(ims.core.vo.PatientDocumentVo value)
		{
			cxl_SelectedDocument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDocument = null;
		public boolean getShouldOpenAfterPathIsSetIsNotNull()
		{
			return !cxl_ShouldOpenAfterPathIsSet.getValueIsNull(context);
		}
		public Boolean getShouldOpenAfterPathIsSet()
		{
			return (Boolean)cxl_ShouldOpenAfterPathIsSet.getValue(context);
		}
		public void setShouldOpenAfterPathIsSet(Boolean value)
		{
			cxl_ShouldOpenAfterPathIsSet.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShouldOpenAfterPathIsSet = null;
		public boolean getDocumentsForPrintIsNotNull()
		{
			return !cxl_DocumentsForPrint.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentVoCollection getDocumentsForPrint()
		{
			return (ims.core.vo.PatientDocumentVoCollection)cxl_DocumentsForPrint.getValue(context);
		}
		public void setDocumentsForPrint(ims.core.vo.PatientDocumentVoCollection value)
		{
			cxl_DocumentsForPrint.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DocumentsForPrint = null;
		public boolean getLockErrorMessageBoxIdIsNotNull()
		{
			return !cxl_LockErrorMessageBoxId.getValueIsNull(context);
		}
		public Integer getLockErrorMessageBoxId()
		{
			return (Integer)cxl_LockErrorMessageBoxId.getValue(context);
		}
		public void setLockErrorMessageBoxId(Integer value)
		{
			cxl_LockErrorMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LockErrorMessageBoxId = null;
		public boolean getContinueEditMessageBoxIdIsNotNull()
		{
			return !cxl_ContinueEditMessageBoxId.getValueIsNull(context);
		}
		public Integer getContinueEditMessageBoxId()
		{
			return (Integer)cxl_ContinueEditMessageBoxId.getValue(context);
		}
		public void setContinueEditMessageBoxId(Integer value)
		{
			cxl_ContinueEditMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ContinueEditMessageBoxId = null;
		public boolean getLockErrorEmailMessageBoxIdIsNotNull()
		{
			return !cxl_LockErrorEmailMessageBoxId.getValueIsNull(context);
		}
		public Integer getLockErrorEmailMessageBoxId()
		{
			return (Integer)cxl_LockErrorEmailMessageBoxId.getValue(context);
		}
		public void setLockErrorEmailMessageBoxId(Integer value)
		{
			cxl_LockErrorEmailMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LockErrorEmailMessageBoxId = null;
		public boolean getDocumentsForEmailIsNotNull()
		{
			return !cxl_DocumentsForEmail.getValueIsNull(context);
		}
		public ims.core.vo.DocumentAndPatientWrapperVoCollection getDocumentsForEmail()
		{
			return (ims.core.vo.DocumentAndPatientWrapperVoCollection)cxl_DocumentsForEmail.getValue(context);
		}
		public void setDocumentsForEmail(ims.core.vo.DocumentAndPatientWrapperVoCollection value)
		{
			cxl_DocumentsForEmail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DocumentsForEmail = null;
		public boolean getNotBatchPrintIsNotNull()
		{
			return !cxl_NotBatchPrint.getValueIsNull(context);
		}
		public Boolean getNotBatchPrint()
		{
			return (Boolean)cxl_NotBatchPrint.getValue(context);
		}
		public void setNotBatchPrint(Boolean value)
		{
			cxl_NotBatchPrint.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NotBatchPrint = null;
		public boolean getOldSelectedDocumentIsNotNull()
		{
			return !cxl_OldSelectedDocument.getValueIsNull(context);
		}
		public ims.core.vo.PatientDocumentforDocumentWorklistVo getOldSelectedDocument()
		{
			return (ims.core.vo.PatientDocumentforDocumentWorklistVo)cxl_OldSelectedDocument.getValue(context);
		}
		public void setOldSelectedDocument(ims.core.vo.PatientDocumentforDocumentWorklistVo value)
		{
			cxl_OldSelectedDocument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OldSelectedDocument = null;
		public boolean getAuthoringSortOrderIsNotNull()
		{
			return !cxl_AuthoringSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getAuthoringSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_AuthoringSortOrder.getValue(context);
		}
		public void setAuthoringSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_AuthoringSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AuthoringSortOrder = null;
		public boolean getPatientGPIsNotNull()
		{
			return !cxl_PatientGP.getValueIsNull(context);
		}
		public ims.core.vo.GpLiteVo getPatientGP()
		{
			return (ims.core.vo.GpLiteVo)cxl_PatientGP.getValue(context);
		}
		public void setPatientGP(ims.core.vo.GpLiteVo value)
		{
			cxl_PatientGP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientGP = null;
		public boolean getDeleteDocumentMessageBoxIdIsNotNull()
		{
			return !cxl_DeleteDocumentMessageBoxId.getValueIsNull(context);
		}
		public Integer getDeleteDocumentMessageBoxId()
		{
			return (Integer)cxl_DeleteDocumentMessageBoxId.getValue(context);
		}
		public void setDeleteDocumentMessageBoxId(Integer value)
		{
			cxl_DeleteDocumentMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeleteDocumentMessageBoxId = null;
		public boolean getDeleteDocumentMessageConfirmationIdIsNotNull()
		{
			return !cxl_DeleteDocumentMessageConfirmationId.getValueIsNull(context);
		}
		public Integer getDeleteDocumentMessageConfirmationId()
		{
			return (Integer)cxl_DeleteDocumentMessageConfirmationId.getValue(context);
		}
		public void setDeleteDocumentMessageConfirmationId(Integer value)
		{
			cxl_DeleteDocumentMessageConfirmationId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeleteDocumentMessageConfirmationId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DocumentWorklistMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int SELECT_ALL = 1;
				public static final int DESELECT_ALL = 2;
				public static final int NEW_DOCUMENT = 3;
				public static final int EDIT = 4;
				public static final int DELETE = 5;
				public static final int SELECT_PATIENT = 6;
				public static final int VIEW = 7;
				public static final int PRINT = 8;
				public static final int EMAIL = 9;
				public static final int FOR_REVIEW = 10;
				public static final int FOR_UPDATE = 11;
				public static final int READY_TO_SEND = 12;
				public static final int COMPLETED = 13;
				public static final int READY_TO_SENT_BATCH_PRINT = 14;
				public static final int READY_TO_SEND_BATCH_EMAIL = 15;
				public static final int READY_TO_SEND_BATCH = 16;
				public static final int BATCH_PRINT = 17;
				public static final int BATCH_EMAIL = 18;
				public static final int BATCH_COMPLETE = 19;
				public static final int SETPATH = 20;
			}
			public void disableAllDocumentWorklistMenuMenuItems()
			{
				this.contextMenuDocumentWorklistMenuSELECT_ALLItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuDESELECT_ALLItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuNEW_DOCUMENTItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuEDITItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuDELETEItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuSELECT_PATIENTItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuVIEWItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuPRINTItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuEMAILItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuFOR_REVIEWItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuFOR_UPDATEItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SENDItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuCOMPLETEDItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuBATCH_PRINTItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuBATCH_EMAILItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuBATCH_COMPLETEItem.setEnabled(false);
				this.contextMenuDocumentWorklistMenuSETPATHItem.setEnabled(false);
			}
			public void hideAllDocumentWorklistMenuMenuItems()
			{
				this.contextMenuDocumentWorklistMenuSELECT_ALLItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuDESELECT_ALLItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuNEW_DOCUMENTItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuEDITItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuDELETEItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuSELECT_PATIENTItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuVIEWItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuPRINTItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuEMAILItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuFOR_REVIEWItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuFOR_UPDATEItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SENDItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuCOMPLETEDItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuBATCH_PRINTItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuBATCH_EMAILItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuBATCH_COMPLETEItem.setVisible(false);
				this.contextMenuDocumentWorklistMenuSETPATHItem.setVisible(false);
			}
			private Menu contextMenuDocumentWorklistMenu;
			public ReadOnlyMenuItem getDocumentWorklistMenuSELECT_ALLItem()
			{
				return this.contextMenuDocumentWorklistMenuSELECT_ALLItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuSELECT_ALLItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuDESELECT_ALLItem()
			{
				return this.contextMenuDocumentWorklistMenuDESELECT_ALLItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuDESELECT_ALLItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuNEW_DOCUMENTItem()
			{
				return this.contextMenuDocumentWorklistMenuNEW_DOCUMENTItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuNEW_DOCUMENTItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuEDITItem()
			{
				return this.contextMenuDocumentWorklistMenuEDITItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuEDITItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuDELETEItem()
			{
				return this.contextMenuDocumentWorklistMenuDELETEItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuDELETEItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuSELECT_PATIENTItem()
			{
				return this.contextMenuDocumentWorklistMenuSELECT_PATIENTItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuSELECT_PATIENTItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuVIEWItem()
			{
				return this.contextMenuDocumentWorklistMenuVIEWItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuVIEWItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuPRINTItem()
			{
				return this.contextMenuDocumentWorklistMenuPRINTItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuPRINTItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuEMAILItem()
			{
				return this.contextMenuDocumentWorklistMenuEMAILItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuEMAILItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuFOR_REVIEWItem()
			{
				return this.contextMenuDocumentWorklistMenuFOR_REVIEWItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuFOR_REVIEWItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuFOR_UPDATEItem()
			{
				return this.contextMenuDocumentWorklistMenuFOR_UPDATEItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuFOR_UPDATEItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuREADY_TO_SENDItem()
			{
				return this.contextMenuDocumentWorklistMenuREADY_TO_SENDItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuREADY_TO_SENDItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuCOMPLETEDItem()
			{
				return this.contextMenuDocumentWorklistMenuCOMPLETEDItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuCOMPLETEDItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem()
			{
				return this.contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem()
			{
				return this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuREADY_TO_SEND_BATCHItem()
			{
				return this.contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuREADY_TO_SEND_BATCHItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuBATCH_PRINTItem()
			{
				return this.contextMenuDocumentWorklistMenuBATCH_PRINTItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuBATCH_PRINTItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuBATCH_EMAILItem()
			{
				return this.contextMenuDocumentWorklistMenuBATCH_EMAILItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuBATCH_EMAILItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuBATCH_COMPLETEItem()
			{
				return this.contextMenuDocumentWorklistMenuBATCH_COMPLETEItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuBATCH_COMPLETEItem;
			public ReadOnlyMenuItem getDocumentWorklistMenuSETPATHItem()
			{
				return this.contextMenuDocumentWorklistMenuSETPATHItem;
			}
			private MenuItem contextMenuDocumentWorklistMenuSETPATHItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[136];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-ID", "ID_PatientDocument");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-REFERRAL", "Referral");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-NAME", "Name");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-STATUS", "Status");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-CLINIC", "Clinic");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PatientCorrespondence", "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-ID", "ID_PatientDocument");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-PATIENT", "Patient");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CARECONTEXT", "CareContext");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-REFERRAL", "Referral");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-NAME", "Name");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CATEGORY", "Category");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-STATUS", "Status");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-SPECIALTY", "Specialty");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-CLINIC", "Clinic");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__SelectedDocument_" + componentIdentifier, "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-ID", "ID_PatientDocument");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-NAME", "Name");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-CATEGORY", "Category");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__OldSelectedDocument_" + componentIdentifier, "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.DocumentWorklist.__internal_x_context__PatientGP_" + componentIdentifier, "BO-1006100001-ID", "ID_Gp");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
