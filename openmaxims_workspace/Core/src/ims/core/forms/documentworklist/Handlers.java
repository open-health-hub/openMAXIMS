//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.documentworklist;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected String[] getLookupUsageErrors();
	abstract protected void bindcmbIdTypeLookup();
	abstract protected void defaultcmbIdTypeLookupValue();
	abstract protected void bindcmbDocStatusLookup();
	abstract protected void defaultcmbDocStatusLookupValue();
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void bindcmbDocTypeLookup();
	abstract protected void defaultcmbDocTypeLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkClearValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbIdTypeValueSet(Object value);
	abstract protected void onChkPatOnlyValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbClinicTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnBatchCClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDocumentsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDocumentsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDocumentsGridCheckBoxClicked(int column, GenForm.grdDocumentsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDocStatusValueSet(Object value);
	abstract protected void oncmbSpecialtyValueSet(Object value);
	abstract protected void oncmbDocTypeValueSet(Object value);
	abstract protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setMessageBoxClosedEvent(new MessageBoxClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onMessageBoxClosed(messageBoxId, result);
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				// Checking lookups usage
				if(getLookupUsageErrors() != null && getLookupUsageErrors().length > 0)
					throw new ims.framework.exceptions.FormMandatoryLookupMissingException(ims.framework.exceptions.FormMandatoryLookupMissingException.getError(getLookupUsageErrors()));
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.chkClear().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkClearValueChanged();
			}
		});
		this.form.cmbIdType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbIdTypeValueSet(value);
			}
		});
		this.form.chkPatOnly().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkPatOnlyValueChanged();
			}
		});
		this.form.qmbClinic().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbClinicTextSubmited(value);
			}
		});
		this.form.btnBatchC().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnBatchCClick();
			}
		});
		this.form.grdDocuments().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDocumentsGridHeaderClicked(column);
			}
		});
		this.form.grdDocuments().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDocumentsSelectionChanged();
			}
		});
		this.form.grdDocuments().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDocumentsGridCheckBoxClicked(column, new GenForm.grdDocumentsRow(row), isChecked);
			}
		});
		this.form.cmbLocation().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbLocationValueChanged();
			}
		});
		this.form.cmbDocStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDocStatusValueSet(value);
			}
		});
		this.form.cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
		this.form.cmbDocType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDocTypeValueSet(value);
			}
		});
		this.form.imbClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearClick();
			}
		});
		this.form.imbSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchClick();
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuSELECT_ALLItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SELECT_ALL, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuDESELECT_ALLItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.DESELECT_ALL, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuNEW_DOCUMENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.NEW_DOCUMENT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuEDITItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.EDIT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuDELETEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.DELETE, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuSELECT_PATIENTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SELECT_PATIENT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuVIEWItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.VIEW, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuPRINTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.PRINT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuEMAILItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.EMAIL, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuFOR_REVIEWItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.FOR_REVIEW, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuFOR_UPDATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.FOR_UPDATE, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuCOMPLETEDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.COMPLETED, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SENT_BATCH_PRINTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SENT_BATCH_PRINT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCH_EMAILItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND_BATCH_EMAIL, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuREADY_TO_SEND_BATCHItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.READY_TO_SEND_BATCH, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuBATCH_PRINTItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_PRINT, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuBATCH_EMAILItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_EMAIL, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuBATCH_COMPLETEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.BATCH_COMPLETE, sender);
			}
		});
		this.form.getContextMenus().Core.getDocumentWorklistMenuSETPATHItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.DocumentWorklistMenu.SETPATH, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbIdTypeLookup();
		bindcmbSpecialtyLookup();
		bindcmbDocTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbIdTypeLookup();
		bindcmbDocStatusLookup();
		bindcmbSpecialtyLookup();
		bindcmbDocTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbIdTypeLookupValue();
		defaultcmbDocStatusLookupValue();
		defaultcmbSpecialtyLookupValue();
		defaultcmbDocTypeLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
