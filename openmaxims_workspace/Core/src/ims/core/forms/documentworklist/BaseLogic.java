//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.documentworklist;

public abstract class BaseLogic extends Handlers
{
	private java.util.ArrayList lookupUsageErrors;

	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.DocumentWorklist.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.DocumentWorklist domain)
	{
		setContext(engine, form);
		this.domain = domain;
		if(domain.getLookupService().countLookupInstances(ims.core.vo.lookups.SpecialtyCollection.class, ims.core.vo.lookups.Specialty.class, 621, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'Specialty' (ID: 1021005) must have at least one active instance configured.");
		}
		if(domain.getLookupService().countLookupInstances(ims.core.vo.lookups.DocumentCategoryCollection.class, ims.core.vo.lookups.DocumentCategory.class, 1021220, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'DocumentCategory' (ID: 1021220) must have at least one active instance configured.");
		}
		if(domain.getLookupService().countLookupInstances(ims.core.vo.lookups.DocumentStatusCollection.class, ims.core.vo.lookups.DocumentStatus.class, 1021127, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'DocumentStatus' (ID: 1021127) must have at least one active instance configured.");
		}
	}
	public final String[] getLookupUsageErrors()
	{
		if(lookupUsageErrors == null)
			return null;
		String[] errors = new String[lookupUsageErrors.size()];
		for(int x = 0; x < lookupUsageErrors.size(); x++)
		{
			errors[x] = (String)lookupUsageErrors.get(x);
		}
		return errors;
	}
	protected final void oncmbIdTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIdType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatIdType existingInstance = (ims.core.vo.lookups.PatIdType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIdTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatIdType)
		{
			ims.core.vo.lookups.PatIdType instance = (ims.core.vo.lookups.PatIdType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIdTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatIdType existingInstance = (ims.core.vo.lookups.PatIdType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIdType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIdTypeLookup()
	{
		this.form.cmbIdType().clear();
		ims.core.vo.lookups.PatIdTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatIdType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIdType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIdTypeLookupValue(int id)
	{
		ims.core.vo.lookups.PatIdType instance = ims.core.vo.lookups.LookupHelper.getPatIdTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIdType().setValue(instance);
	}
	protected final void defaultcmbIdTypeLookupValue()
	{
		this.form.cmbIdType().setValue((ims.core.vo.lookups.PatIdType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatIdType.class, engine.getFormName().getID(), ims.core.vo.lookups.PatIdType.TYPE_ID));
	}
	protected final void oncmbDocStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDocStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DocumentStatus existingInstance = (ims.core.vo.lookups.DocumentStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDocStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DocumentStatus)
		{
			ims.core.vo.lookups.DocumentStatus instance = (ims.core.vo.lookups.DocumentStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDocStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DocumentStatus existingInstance = (ims.core.vo.lookups.DocumentStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDocStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDocStatusLookup()
	{
		this.form.cmbDocStatus().clear();
		ims.core.vo.lookups.DocumentStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDocumentStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDocStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDocStatusLookupValue(int id)
	{
		ims.core.vo.lookups.DocumentStatus instance = ims.core.vo.lookups.LookupHelper.getDocumentStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDocStatus().setValue(instance);
	}
	protected final void defaultcmbDocStatusLookupValue()
	{
		this.form.cmbDocStatus().setValue((ims.core.vo.lookups.DocumentStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DocumentStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.DocumentStatus.TYPE_ID));
	}
	protected final void oncmbSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyLookup()
	{
		this.form.cmbSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSpecialty().setValue(instance);
	}
	protected final void defaultcmbSpecialtyLookupValue()
	{
		this.form.cmbSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbDocTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDocType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DocumentCategory existingInstance = (ims.core.vo.lookups.DocumentCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDocTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.DocumentCategory)
		{
			ims.core.vo.lookups.DocumentCategory instance = (ims.core.vo.lookups.DocumentCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDocTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.DocumentCategory existingInstance = (ims.core.vo.lookups.DocumentCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDocType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDocTypeLookup()
	{
		this.form.cmbDocType().clear();
		ims.core.vo.lookups.DocumentCategoryCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDocumentCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDocType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDocTypeLookupValue(int id)
	{
		ims.core.vo.lookups.DocumentCategory instance = ims.core.vo.lookups.LookupHelper.getDocumentCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDocType().setValue(instance);
	}
	protected final void defaultcmbDocTypeLookupValue()
	{
		this.form.cmbDocType().setValue((ims.core.vo.lookups.DocumentCategory)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.DocumentCategory.class, engine.getFormName().getID(), ims.core.vo.lookups.DocumentCategory.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.DocumentWorklist domain;
}
