//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.vitalsignsmonitoring;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbObservationComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.VitalSignMonitoringGroupVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.VitalSignMonitoringGroupVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.VitalSignMonitoringGroupVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.VitalSignMonitoringGroupVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.VitalSignMonitoringGroupVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.VitalSignMonitoringGroupVo getValue()
			{
				return (ims.core.vo.VitalSignMonitoringGroupVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.VitalSignMonitoringGroupVo value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbDurationComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringDuration value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringDuration value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringDuration value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringDuration value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.VitalSignsMonitoringDuration value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.VitalSignsMonitoringDuration getValue()
			{
				return (ims.core.vo.lookups.VitalSignsMonitoringDuration)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.VitalSignsMonitoringDuration value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbFrequencyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringFrequency value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringFrequency value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringFrequency value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.VitalSignsMonitoringFrequency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.VitalSignsMonitoringFrequency value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.VitalSignsMonitoringFrequency getValue()
			{
				return (ims.core.vo.lookups.VitalSignsMonitoringFrequency)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.VitalSignsMonitoringFrequency value)
			{
				super.control.setValue(value);
			}
		}
		public static class qmbStoppedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.HcpLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.HcpLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.HcpLiteVo getValue()
			{
				return (ims.core.vo.HcpLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.HcpLiteVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class qmbRequestedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.HcpLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.HcpLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.HcpLiteVo getValue()
			{
				return (ims.core.vo.HcpLiteVo)super.control.getValue();
			}
			public void setValue(ims.core.vo.HcpLiteVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class grdVitalsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdVitalsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(0);
			}
			public boolean getColSelect()
			{
				return ((Boolean)super.row.get(0)).booleanValue();
			}
			public void setColSelect(boolean value)
			{
				super.row.set(0, new Boolean(value));
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColVitalSignReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColVitalSignReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColVitalSignOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.VSType getColVitalSign()
			{
				return (ims.core.vo.lookups.VSType)super.row.get(1);
			}
			public void setColVitalSign(ims.core.vo.lookups.VSType value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColVitalSignTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColFrequencyReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColFrequencyReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColFrequencyOpened()
			{
				super.row.showOpened(2);
			}
			public ims.core.vo.lookups.VitalSignsMonitoringFrequency getColFrequency()
			{
				return (ims.core.vo.lookups.VitalSignsMonitoringFrequency)super.row.get(2);
			}
			public void setColFrequency(ims.core.vo.lookups.VitalSignsMonitoringFrequency value)
			{
				super.row.set(2, value, true);
			}
			public void setCellColFrequencyTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public ims.core.vo.VitalSignItemFrequencyVo getValue()
			{
				return (ims.core.vo.VitalSignItemFrequencyVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.VitalSignItemFrequencyVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdVitalsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdVitalsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdVitalsRow get(int index)
			{
				return new grdVitalsRow(super.collection.get(index));
			}
			public grdVitalsRow newRow()
			{
				return new grdVitalsRow(super.collection.newRow());
			}
			public grdVitalsRow newRow(boolean autoSelect)
			{
				return new grdVitalsRow(super.collection.newRow(autoSelect));
			}
			public grdVitalsRow newRowAt(int index)
			{
				return new grdVitalsRow(super.collection.newRowAt(index));
			}
			public grdVitalsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdVitalsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdVitalsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public ims.core.vo.VitalSignItemFrequencyVoCollection getValues()
			{
				ims.core.vo.VitalSignItemFrequencyVoCollection listOfValues = new ims.core.vo.VitalSignItemFrequencyVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.VitalSignItemFrequencyVo getValue()
			{
				return (ims.core.vo.VitalSignItemFrequencyVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.VitalSignItemFrequencyVo value)
			{
				super.grid.setValue(value);
			}
			public grdVitalsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdVitalsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdVitalsRowCollection getRows()
			{
				return new grdVitalsRowCollection(super.grid.getRows());
			}
			public grdVitalsRow getRowByValue(ims.core.vo.VitalSignItemFrequencyVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdVitalsRow(row);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColVitalSignHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColVitalSignHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColVitalSignComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
			public void setColFrequencyHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColFrequencyHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public GridComboBox ColFrequencyComboBox()
			{
				return new GridComboBox(super.grid, 2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 400, 208, 392, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 14, skipContextValidation);
			//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(400), new Integer(208), new Integer(392), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 14), m_customControlAuthoringInfoForm, instance1 } );
			ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 14), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlAuthoringInfoControl);
			Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 408, 162, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Stopped By:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 408, 42, 58, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Duration:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 408, 90, 48, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Details:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 408, 186, 99, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Stop Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 408, 18, 101, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Start Date/Time:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 66, 86, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Requested By:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 138, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Observations Required:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 537, 90, 240, 62, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Time Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 537, 184, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 537, 16, 240, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbObservationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbObservationTemp);
			cmbObservationComboBox cmbObservation = (cmbObservationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbObservationComboBox.class, m_cmbObservationTemp);
			super.addComboBox(cmbObservation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 624, 40, 152, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_cmbDurationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbDurationTemp);
			cmbDurationComboBox cmbDuration = (cmbDurationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDurationComboBox.class, m_cmbDurationTemp);
			super.addComboBox(cmbDuration);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 160, 40, 200, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbFrequencyTemp);
			cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
			super.addComboBox(cmbFrequency);
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 537, 160, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_qmbStoppedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbStoppedTemp);
			qmbStoppedComboBox qmbStopped = (qmbStoppedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbStoppedComboBox.class, m_qmbStoppedTemp);
			super.addComboBox(qmbStopped);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 537, 64, 240, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_qmbRequestedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbRequestedTemp);
			qmbRequestedComboBox qmbRequested = (qmbRequestedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbRequestedComboBox.class, m_qmbRequestedTemp);
			super.addComboBox(qmbRequested);
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 344, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdVitalsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdVitalsTemp);
			grdVitalsGrid grdVitals = (grdVitalsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVitalsGrid.class, m_grdVitalsTemp);
			grdVitals.addBoolColumn(" ", 0, 0, 25, false, true, 0, false);
			grdVitals.addComboBoxColumn("OBS", 0, 0, 180, true, true, false, false, true, -1);
			grdVitals.addComboBoxColumn("Frequency", 0, 0, -1, false, true, false, false, true, -1);
			super.addGrid(grdVitals);
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 537, 40, 71, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlAuthoringInfoVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlAuthoringInfoVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlAuthoringInfoEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlAuthoringInfoEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public TextBox txtDetails()
		{
			return (TextBox)super.getControl(9);
		}
		public DateTimeControl dtimStopped()
		{
			return (DateTimeControl)super.getControl(10);
		}
		public DateTimeControl dtimStart()
		{
			return (DateTimeControl)super.getControl(11);
		}
		public cmbObservationComboBox cmbObservation()
		{
			return (cmbObservationComboBox)super.getComboBox(0);
		}
		public cmbDurationComboBox cmbDuration()
		{
			return (cmbDurationComboBox)super.getComboBox(1);
		}
		public cmbFrequencyComboBox cmbFrequency()
		{
			return (cmbFrequencyComboBox)super.getComboBox(2);
		}
		public qmbStoppedComboBox qmbStopped()
		{
			return (qmbStoppedComboBox)super.getComboBox(3);
		}
		public qmbRequestedComboBox qmbRequested()
		{
			return (qmbRequestedComboBox)super.getComboBox(4);
		}
		public grdVitalsGrid grdVitals()
		{
			return (grdVitalsGrid)super.getGrid(0);
		}
		public IntBox intDuration()
		{
			return (IntBox)super.getControl(18);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColObservationReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColObservationReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColObservationOpened()
		{
			super.row.showOpened(0);
		}
		public String getColObservation()
		{
			return (String)super.row.get(0);
		}
		public void setColObservation(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColObservationTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColFrequencyReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColFrequencyReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColFrequencyOpened()
		{
			super.row.showOpened(1);
		}
		public String getColFrequency()
		{
			return (String)super.row.get(1);
		}
		public void setColFrequency(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColFrequencyTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColStartDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColStartDateTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColStartDateTimeOpened()
		{
			super.row.showOpened(2);
		}
		public String getColStartDateTime()
		{
			return (String)super.row.get(2);
		}
		public void setColStartDateTime(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColStartDateTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(3);
		}
		public String getColDuration()
		{
			return (String)super.row.get(3);
		}
		public void setColDuration(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColDetailsReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColDetailsOpened()
		{
			super.row.showOpened(4);
		}
		public String getColDetails()
		{
			return (String)super.row.get(4);
		}
		public void setColDetails(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColDetailsTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.VitalSignMonitoringVo getValue()
		{
			return (ims.core.vo.VitalSignMonitoringVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.VitalSignMonitoringVo value)
		{
			super.row.setValue(value);
		}
		public grdDetailsRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdDetailsRow(super.row.getParent());
		}
		public grdDetailsRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdDetailsRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdDetailsRowCollection collection;
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdDetailsRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdDetailsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdDetailsRow[] result = new GenForm.grdDetailsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdDetailsRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdDetailsRow[] getAllRows(GenForm.grdDetailsRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdDetailsRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdDetailsRow[] result = new GenForm.grdDetailsRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdDetailsRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdDetailsRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdDetailsRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.VitalSignMonitoringVoCollection getValues()
		{
			ims.core.vo.VitalSignMonitoringVoCollection listOfValues = new ims.core.vo.VitalSignMonitoringVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.VitalSignMonitoringVo getValue()
		{
			return (ims.core.vo.VitalSignMonitoringVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.VitalSignMonitoringVo value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(ims.core.vo.VitalSignMonitoringVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColObservationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColObservationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColFrequencyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColFrequencyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColStartDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColStartDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}

	public static class Group1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 168, 8, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "View All Records", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper21.getX(), anchoringHelper21.getY(), anchoringHelper21.getWidth(), "View Current Records", startTabIndex.intValue() + 1);
		}
		public void setText(Group1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public Group1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return Group1Enumeration.None;
				case 0: return Group1Enumeration.rdoAll;
				case 1: return Group1Enumeration.rdoCurrent;
			}
			return null;
		}
		public void setValue(Group1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(Group1Enumeration.None.id);
		}
		public boolean isEnabled(Group1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(Group1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(Group1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(Group1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class Group1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static Group1Enumeration None = new Group1Enumeration(-1);
		public static Group1Enumeration rdoAll = new Group1Enumeration(0);
		public static Group1Enumeration rdoCurrent = new Group1Enumeration(1);
		private Group1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((Group1Enumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getVitalSignsMonitoring();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 816, 296, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctn);
		ctnContainer ctn = (ctnContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnContainer.class, m_ctn, factory);
		ims.framework.utils.SizeInfo m_ctnDesignSize = new ims.framework.utils.SizeInfo(816, 296);
		ims.framework.utils.SizeInfo m_ctnRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
		ctn.setContext(form, appForm, m_ctn, loader, startControlID, m_ctnDesignSize, m_ctnRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn);

		// Button Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addTreeColumn("Observation Required", 0, 180, false, true);
		grdDetails.addStringColumn("Frequency", 0, 0, 150, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Start Date/Time", 0, 0, 130, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Duration", 0, 0, 90, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn("Details", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);

		// RadioButton Controls
		RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroup1);
		Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
		Group1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Group1);
	}


	public ctnContainer ctn()
	{
		return (ctnContainer)super.getContainer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(1);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public Group1RadioButton Group1()
	{
		return (Group1RadioButton)super.getRadioButton(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_VitalSignMonitoringGroup = new ims.framework.ContextVariable("VitalSignMonitoringGroup", prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignMonitoringGroup_" + componentIdentifier + "");
			cxl_VitalSignsMonitoring = new ims.framework.ContextVariable("VitalSignsMonitoring", prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier + "");
			cxl_LastRecord = new ims.framework.ContextVariable("LastRecord", prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier + "");
		}
		
		public boolean getVitalSignMonitoringGroupIsNotNull()
		{
			return !cxl_VitalSignMonitoringGroup.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignMonitoringGroupVo getVitalSignMonitoringGroup()
		{
			return (ims.core.vo.VitalSignMonitoringGroupVo)cxl_VitalSignMonitoringGroup.getValue(context);
		}
		public void setVitalSignMonitoringGroup(ims.core.vo.VitalSignMonitoringGroupVo value)
		{
			cxl_VitalSignMonitoringGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VitalSignMonitoringGroup = null;
		public boolean getVitalSignsMonitoringIsNotNull()
		{
			return !cxl_VitalSignsMonitoring.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignMonitoringVo getVitalSignsMonitoring()
		{
			return (ims.core.vo.VitalSignMonitoringVo)cxl_VitalSignsMonitoring.getValue(context);
		}
		public void setVitalSignsMonitoring(ims.core.vo.VitalSignMonitoringVo value)
		{
			cxl_VitalSignsMonitoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VitalSignsMonitoring = null;
		public boolean getLastRecordIsNotNull()
		{
			return !cxl_LastRecord.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignMonitoringVo getLastRecord()
		{
			return (ims.core.vo.VitalSignMonitoringVo)cxl_LastRecord.getValue(context);
		}
		public void setLastRecord(ims.core.vo.VitalSignMonitoringVo value)
		{
			cxl_LastRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastRecord = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[100];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-SEENBY", "SeenBy");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.ClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignMonitoringGroup_" + componentIdentifier, "BO-1028100022-ID", "ID_VitalSignMonitoringGroup");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignMonitoringGroup_" + componentIdentifier, "BO-1028100022-GROUPNAME", "GroupName");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignMonitoringGroup_" + componentIdentifier, "BO-1028100022-ISACTIVE", "IsActive");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-ID", "ID_VitalSignsMonitoring");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-CLINICALCONTACT", "ClinicalContact");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-CARECONTEXT", "CareContext");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-GROUPFREQUENCY", "GroupFrequency");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-STARTDATETIME", "StartDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-DURATIONVALUE", "DurationValue");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-DURATIONUNIT", "DurationUnit");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-REQUESTDETAILS", "RequestDetails");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__VitalSignsMonitoring_" + componentIdentifier, "BO-1003100073-STOPPEDDATETIME", "StoppedDateTime");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-ID", "ID_VitalSignsMonitoring");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-CLINICALCONTACT", "ClinicalContact");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-CARECONTEXT", "CareContext");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-GROUPFREQUENCY", "GroupFrequency");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-STARTDATETIME", "StartDateTime");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-DURATIONVALUE", "DurationValue");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-DURATIONUNIT", "DurationUnit");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-REQUESTDETAILS", "RequestDetails");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.VitalSignsMonitoring.__internal_x_context__LastRecord_" + componentIdentifier, "BO-1003100073-STOPPEDDATETIME", "StoppedDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
