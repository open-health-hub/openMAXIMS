//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.45 build 2382.34788)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.selectitems;

import ims.admin.vo.SelectItemVo;
import ims.admin.vo.SelectItemVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		populateGrid(form.getGlobalContext().Core.getItems());
	}

	private void populateGrid(SelectItemVoCollection voCollItems)
	{
		if(voCollItems == null)
		{
			engine.showMessage("No items available for selection");
			engine.close(DialogResult.CANCEL);
			return;
		}
			
		for(int i=0;i<voCollItems.size();i++)
		{
			GenForm.grdItemsRow row = form.grdItems().getRows().newRow();
			row.setColText(voCollItems.get(i).getItem().getIGenericItemInfoName());
			row.setColSelected(voCollItems.get(i).getSelected().booleanValue());
			
			row.setExpandedImage(voCollItems.get(i).getItemImage());
			row.setCollapsedImage(voCollItems.get(i).getItemImage());
			
			if(voCollItems.get(i).getItemsIsNotNull())
			{
				row.setColSelectedReadOnly(true);
				SelectItemVo childItem = null;
				for(int p=0;p<voCollItems.get(i).getItems().size();p++)
				{
					childItem = voCollItems.get(i).getItems().get(p);
					GenForm.grdItemsRow cRow = row.getRows().newRow();
					cRow.setColText(childItem.getItem().getIGenericItemInfoName());
					cRow.setColSelected(childItem.getSelected().booleanValue());
					cRow.setExpandedImage(childItem.getItemImage());
					cRow.setCollapsedImage(childItem.getItemImage());
					cRow.setValue(childItem);
				}
				row.setExpanded(true);
			}
			row.setValue(voCollItems.get(i));
			
		}
	}
	
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SelectItemVoCollection voCollItems = null;
		for(int i=0;i<form.grdItems().getRows().size();i++)
		{
			GenForm.grdItemsRow row = form.grdItems().getRows().get(i);
			SelectItemVo voSelectItem = row.getValue();
			voSelectItem.setSelected(new Boolean(row.getColSelected()));
			
			for(int p=0;p<row.getRows().size();p++)
			{
				SelectItemVo voChildItem = row.getRows().get(p).getValue();
				voChildItem.setSelected(new Boolean(row.getRows().get(p).getColSelected()));
				
				SelectItemVoCollection voCollChildItems = voSelectItem.getItems();
				if(voCollChildItems == null)
					voCollChildItems = new SelectItemVoCollection();
				
				voCollChildItems.add(voChildItem);
				voSelectItem.setItems(voCollChildItems);
			}
			
			if(voCollItems == null)
				voCollItems = new SelectItemVoCollection();
			
			voCollItems.add(voSelectItem);
		}
				
		form.getGlobalContext().Core.setItems(voCollItems);
		engine.close(DialogResult.OK);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onChkSelectAllValueChanged() throws PresentationLogicException 
	{
		
		for(int i = 0 ; i < form.grdItems().getRows().size() ; i++)
		{
			GenForm.grdItemsRow row = form.grdItems().getRows().get(i);
			row.setColSelected(form.chkSelectAll().getValue());
				
			for(int p = 0 ; p < row.getRows().size() ; p++)
				row.getRows().get(p).setColSelected(form.chkSelectAll().getValue());
		}
	}
}
