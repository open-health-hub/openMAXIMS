//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3729.19612)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.dbimagedisplay;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import ims.admin.vo.AppImageVo;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.PatientImageVo;
import ims.framework.utils.Base64;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	/**
	* setValue
	*/
	public void setValue(ims.core.patient.vo.PatientRefVo value)
	{
		//New Patient
		if (value == null) 
		{
			form.imgDisplay().setValue(form.getImages().Core.NoPatientImage);			
			return;
		}
		//Existing Patient
		else
		{
			form.imgDisplay().setVisible(true);
		
			try 
			{
				String sessionID = engine.getSessionId();
				int patientID = value.getID_Patient();
				PatientImageVo patientImage = domain.getPatientImage(patientID);	   	  		
		  	
				AppDBImageVo dbImageVo = patientImage.getDBPhoto();
				
				//Existing Patient with no image
				if (dbImageVo == null)
				{
					form.imgDisplay().setValue(form.getImages().Core.NoPatientImage);	
					return;
				}
				
				String encodedImage = dbImageVo.getImageData();
				String type = dbImageVo.getImageType().getText();	  		  		  	
		  	
				decodeFromBase64(encodedImage, sessionID, type);
			} 
			catch (IOException error) 
			{		
				engine.showMessage(error.getMessage());
			}
		}
	}	
	
	public void clearCache()
	{
		// TODO: Add your code here.
	}
	
	private String decodeFromBase64(String content, String sessionID, String imageType) throws IOException
	{
		byte[] decBytes = Base64.decode(content);

		if (decBytes == null || (decBytes != null && decBytes.length == 0)) 
		{
			engine.showMessage("Base64 image size is zero");
			return null;
		}
		//Get CurrentTimeMillis() segment
	    String str = Long.toHexString(System.currentTimeMillis());
	    while (str.length () < 12)
        {
            str = '0' + str;
        }
		
		String image = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase();
		ArrayList<String> patientPhotoTempFiles = form.getGlobalContext().Core.getPatientPhotoTempFilesIsNotNull() ? form.getGlobalContext().Core.getPatientPhotoTempFiles() :  new ArrayList<String>();
		patientPhotoTempFiles.add(image);
		form.getGlobalContext().Core.setPatientPhotoTempFiles(patientPhotoTempFiles);
		
		try
		{		
			FileOutputStream fos = new FileOutputStream(image);				
			fos.write(decBytes);
			fos.close();	
			
			AppImageVo vo = new AppImageVo();
			
			if (ConfigFlag.GEN.APPLICATION_URL.getValue() == "")
			{			
				vo.setImagePath(EnvironmentConfig.getAplicationURL() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase()).replace("\\", "/"));
			}
			else
			{
				vo.setImagePath(ConfigFlag.GEN.APPLICATION_URL.getValue() + (ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "_" +sessionID + "." + imageType.toLowerCase()).replace("\\", "/"));
			}
			
			form.imgDisplay().setValue(vo);		
			form.getLocalContext().setDisplayedImage(vo);
		}		
		catch(FileNotFoundException exception) {			
			System.out.println("FileNotFoundException : " + exception);
		}		
		catch(IOException ioexception) {						
			System.out.println("IOException : " + ioexception);
		}
						
		return null;			
	}

	public AppImageVo getValue() 
	{
		return form.getLocalContext().getDisplayedImage();
	}

	public void setDBImage(AppDBImageVo image) 
	{
		if (image == null)
		{
			form.imgDisplay().setValue(form.getImages().Core.NoPatientImage);
			return;
		}
		
		try
		{
			String sessionID = engine.getSessionId();
			String encodedImage = image.getImageData();
			String type = image.getImageType().getText();	  		  		  	
  	
			decodeFromBase64(encodedImage, sessionID, type);
		}
		catch (IOException error) 
		{		
			engine.showMessage(error.getMessage());
		}		
	}
}
