//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.45 build 2421.18554)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.secsconfig;

import ims.clinical.vo.SECSConfigurationVo;
import ims.clinical.vo.SECSConfigurationVoCollection;
import ims.clinical.vo.SECSLookupConfigVo;
import ims.clinical.vo.SECSLookupScoreVo;
import ims.clinical.vo.SECSLookupScoreVoCollection;
import ims.clinical.vo.SECSRangeConfigVo;
import ims.clinical.vo.SECSRangeScoreVo;
import ims.clinical.vo.SECSRangeScoreVoCollection;
import ims.clinical.vo.SECSVo;
import ims.clinical.vo.SECSVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.secsconfig.GenForm.lyrDetailLayer.tabScoreContainer.grdScoreRow;
import ims.core.vo.lookups.ConsciousLevel;
import ims.core.vo.lookups.ConsciousLevelCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientCausingConcern;
import ims.core.vo.lookups.PatientCausingConcernCollection;
import ims.core.vo.lookups.SECSTypes;
import ims.core.vo.lookups.SECSTypesCollection;
import ims.core.vo.lookups.UrineOutput;
import ims.core.vo.lookups.UrineOutputCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final Integer DYN_COLPARAMETER = new Integer(1);
	private static final Integer DYN_COLCONFIGTYPE = new Integer(2);
	private static final Integer DYN_COLVALUES = new Integer(3);
	
	private static final Integer DYN_COLGREATERTHAN = new Integer(4);
	private static final Integer DYN_COLLESSTHAN = new Integer(5);
	private static final Integer DYN_COLSCORE = new Integer(6);
	private static final Integer DYN_COLWARNING = new Integer(7);
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		//wdev-13392
		form.setMode(FormMode.VIEW);
		form.dyngrdSecs().setSelectable(true);
		populateParameterCombo(null);
		SECSVoCollection tempVoCol =  domain.getSecsColection();
		SECSVo tempVo = null;
		if(tempVoCol != null && tempVoCol.size() > 0)
		{
			tempVo = tempVoCol.get(0);
			if(tempVoCol.size() > 1)
				engine.showMessage("There are more than one SECS Configuration records in database");
		}
		populateScreenFromData(tempVo);
		//-------------------
		//open();		
	}
	
	public void initialize() throws FormOpenException
	{
		initialiseDynamicGrids();
		form.getContextMenus().getGenericGridAddItem().setText("Add Parameter");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Parameter");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Parameter");
		form.getLocalContext().setSelectedInstance(null);	//wdev-13392
	}

	protected void onDyngrdSecsRowSelectionChanged(DynamicGridRow row)
	{
		dyngrdSecsSelectionChanged();
	}
	
	private void dyngrdSecsSelectionChanged()
	{
		populateConfigInstanceControls((SECSConfigurationVo)form.dyngrdSecs().getValue());
		updateControlsState();
	}
	
	private void populateConfigInstanceControls(SECSConfigurationVo voSecsConfig)
	{
		clearConfigInstanceControls();
		if(voSecsConfig != null)
		{
			if(voSecsConfig.getTypeIsNotNull())
			{
				form.cmbParameter().setValue(voSecsConfig.getType());
				if(isRange(voSecsConfig.getType()))
				{	
					//display range data
					form.lyrDetail().tabRange().dyngrdRangeScore().getRows().clear();
					SECSRangeConfigVo voRangeConfig = voSecsConfig.getRangeConfig();
					if(voRangeConfig == null || voRangeConfig.getRangeScores() == null)
						throw new CodingRuntimeException("Range Config or Range Scores is null");
				
					SECSRangeScoreVoCollection voCollRangeScores = voRangeConfig.getRangeScores();
					for(int i=0;i<voCollRangeScores.size();i++)
					{
						SECSRangeScoreVo voScore = voCollRangeScores.get(i);
						DynamicGridRow row = form.lyrDetail().tabRange().dyngrdRangeScore().getRows().newRow();
						
						DynamicCellType cellRangeType = DynamicCellType.INT; 
						if(voSecsConfig.getType().equals(SECSTypes.TEMPERATURE))
							cellRangeType = DynamicCellType.DECIMAL;
						
						DynamicGridCell cellGreaterThan = row.getCells().newCell(getRangeColumn(DYN_COLGREATERTHAN), cellRangeType);
						DynamicGridCell cellLessThan = row.getCells().newCell(getRangeColumn(DYN_COLLESSTHAN), cellRangeType);
						
						if(cellRangeType.equals(DynamicCellType.DECIMAL))
						{
							cellGreaterThan.setValue(voScore.getGreaterThanDecValue());
							cellLessThan.setValue(voScore.getLessThanDecValue());
						}
						else
						{
							cellGreaterThan.setValue(voScore.getGreaterThanIntValue());
							cellLessThan.setValue(voScore.getLessThanIntValue());	
						}
						
						DynamicGridCell cellScore = row.getCells().newCell(getRangeColumn(DYN_COLSCORE), DynamicCellType.INT);
						cellScore.setValue(voScore.getScore());
	
						DynamicGridCell cellWarning = row.getCells().newCell(getRangeColumn(DYN_COLWARNING), DynamicCellType.WRAPTEXT);
						cellWarning.setStringMaxLength(255);
						cellWarning.setValue(voScore.getWarningText());
						
	
						row.setValue(voScore);
					}
					
					form.lyrDetail().showtabRange();
				}
				else if(isScore(voSecsConfig.getType()))
				{
					//display lookup data
					form.lyrDetail().tabScore().grdScore().getRows().clear();
					SECSLookupConfigVo voLookupConfig = voSecsConfig.getLookupConfig();
					if(voLookupConfig == null || voLookupConfig.getLookupScores() == null)
						throw new CodingRuntimeException("Lookup Config or Lookup Scores is null");
					
					SECSLookupScoreVoCollection voCollLookupScores = voLookupConfig.getLookupScores();
					for(int i=0;i<voCollLookupScores.size();i++)
					{
						SECSLookupScoreVo voScore = voCollLookupScores.get(i);
						grdScoreRow row = form.lyrDetail().tabScore().grdScore().getRows().newRow();
						
						row.setColScore(voScore.getScore());
						row.setColHidden(voScore.getLookupInstance());
						if(voScore.getLookupInstanceIsNotNull())
							row.setColText(voScore.getLookupInstance().getText());						
						row.setValue(voScore);
					}
					form.lyrDetail().showtabScore();
				}
				/*	WDEV-12769else
				{
					//fill oxygen data
					SECSOxygenSatsVo voOxygenSats = voSecsConfig.getOxygenSatsConfig();
					if(voOxygenSats == null)
						throw new CodingRuntimeException("Oxygen Config is null");
					
					form.lyrDetail().tabOxygen().intFractionRate().setValue(voOxygenSats.getFractionRate());
					form.lyrDetail().tabOxygen().intMinNormal().setValue(voOxygenSats.getStartNormalRange()) ;
					form.lyrDetail().tabOxygen().intMaxNormal().setValue(voOxygenSats.getStartNormalRangeOnOxygen());
					
					form.lyrDetail().showtabOxygen();
				}*/
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
			{
				newConfigRecord();
				hideContextMenu();
				form.dyngrdSecs().setEnabled(false);
			}
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
			{
				updateConfigRecord();
				hideContextMenu();
				form.dyngrdSecs().setEnabled(false);
				
			}
			break;
			case GenForm.ContextMenus.GenericGrid.Remove :
			{
				removeConfigRecord();
			}
			break;
		}
	}
	
	private void removeConfigRecord()
	{
		SECSConfigurationVo voConfig = (SECSConfigurationVo) form.dyngrdSecs().getSelectedRow().getValue();
		form.getLocalContext().getSelectedInstance().getConfiguration().remove(voConfig);
		
		form.dyngrdSecs().getRows().remove(form.dyngrdSecs().getSelectedRow());
		form.dyngrdSecs().setValue(null);
		
		form.getLocalContext().getSelectedInstance().validate();
		doSave(form.getLocalContext().getSelectedInstance());
		open();
	}

	private void updateConfigRecord()
	{
		enableConfigInstanceControls();
	}

	private void enableConfigInstanceControls()
	{
		form.lyrDetail().tabRange().dyngrdRangeScore().setEnabled(true);
		form.lyrDetail().tabRange().dyngrdRangeScore().setReadOnly(false);
		form.lyrDetail().tabRange().dyngrdRangeScore().setSelectable(true);
		
		form.lyrDetail().tabScore().grdScore().setEnabled(true);
		form.lyrDetail().tabScore().grdScore().setReadOnly(false);
		
		form.lyrDetail().tabOxygen().intFractionRate().setEnabled(true);
		form.lyrDetail().tabOxygen().intMinNormal().setEnabled(true);
		form.lyrDetail().tabOxygen().intMaxNormal().setEnabled(true);
		
		//WDEV-4703 
		
		form.lyrDetail().tabRange().btnAddRange().setEnabled(form.cmbParameter().getValue()!= null);
	}
	
	private void newConfigRecord()
	{
		clearConfigInstanceControls();
		populateParameterCombo(getUsedItemsLookupCollection());
		enableConfigInstanceControls();
		form.cmbParameter().setEnabled(true);
		form.cmbParameter().showOpened();
		form.dyngrdSecs().setValue(null);
		form.dyngrdSecs().setSelectable(false);
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
		form.dyngrdSecs().setReadOnly(true);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	public void open()
	{	
		form.setMode(FormMode.VIEW);
		form.dyngrdSecs().setSelectable(true);
		populateParameterCombo(null);
					
		populateScreenFromData(domain.getSecs());					
	}
	
	private void populateScreenFromData(SECSVo secs)
	{
		clear();
		
		if(secs != null)
		{
			form.getLocalContext().setSelectedInstance(secs);
			form.intTotalScore().setValue(secs.getEWSTriggerScore());
			if(secs.getEWSProtocolIsNotNull())
				form.txtProtocol().setValue(secs.getEWSProtocol().getName());
			
			populateGridFromData(secs.getConfiguration());
			
			form.btnNew().setEnabled(false);
			form.btnUpdate().setEnabled(true);
		}
		else
		{
			form.btnNew().setEnabled(true);
			form.btnUpdate().setEnabled(false);
		}
	}

	public void clear()
	{
		clearConfigInstanceControls();
	}
	
	private void populateGridFromData(SECSConfigurationVoCollection voCollSECSConfig)
	{
		if (voCollSECSConfig == null)
			return;
		
		form.dyngrdSecs().getRows().clear();

		//sorted by type
		voCollSECSConfig.sort();
		
		SECSConfigurationVo voSecsConfig = null;
		for (int i = 0; i < voCollSECSConfig.size(); i++)
		{
			voSecsConfig = voCollSECSConfig.get(i);
			DynamicGridRow parentRow = form.dyngrdSecs().getRows().newRow();
			DynamicGridCell cellParameter = parentRow.getCells().newCell( getColumn(DYN_COLPARAMETER) , DynamicCellType.LABEL);
			if(voSecsConfig.getTypeIsNotNull())
			{
				cellParameter.setValue(voSecsConfig.getType().getText());
				cellParameter.setIdentifier(voSecsConfig.getType());
				cellParameter.setWidth(150);
				
			}
			
			parentRow.setValue(voSecsConfig);
			parentRow.setExpanded(true);
		
			if(voSecsConfig.getRangeConfigIsNotNull())
			{
				DynamicGridRow childRow = parentRow.getRows().newRow();
				childRow.setSelectable(false);
				DynamicGridCell cellConfigType = childRow.getCells().newCell( getColumn(DYN_COLCONFIGTYPE) , DynamicCellType.LABEL);
				cellConfigType.setValue("Range(s):");
				cellConfigType.setWidth(100);
				
				if(voSecsConfig.getRangeConfig().getRangeScoresIsNotNull())
				{
					DynamicGridCell cellValues = childRow.getCells().newCell( getColumn(DYN_COLVALUES) , DynamicCellType.LABEL);
					for(int p=0;p<voSecsConfig.getRangeConfig().getRangeScores().size();p++)
					{
						SECSRangeScoreVo score = voSecsConfig.getRangeConfig().getRangeScores().get(p);
						
						//WDEV-17333
						if (score.getWarningText() == null)
						{
							score.setWarningText(" ");
						}
						
						cellValues.setValue((cellValues.getValue() != null ? cellValues.getValue() : "") + "\n" + score.toString());
						cellValues.setWidth(300);
					}
				}
			}
			else if(voSecsConfig.getLookupConfigIsNotNull())
			{
				DynamicGridRow childRow = parentRow.getRows().newRow();
				childRow.setSelectable(false);
				DynamicGridCell cellConfigType = childRow.getCells().newCell( getColumn(DYN_COLCONFIGTYPE) , DynamicCellType.LABEL);
				cellConfigType.setValue("Lookup(s):");
				cellConfigType.setWidth(100);
				
				if(voSecsConfig.getLookupConfig().getLookupScoresIsNotNull())
				{
					DynamicGridCell cellValues = childRow.getCells().newCell( getColumn(DYN_COLVALUES) , DynamicCellType.LABEL);
					for(int p=0;p<voSecsConfig.getLookupConfig().getLookupScores().size();p++)
					{
						SECSLookupScoreVo score = voSecsConfig.getLookupConfig().getLookupScores().get(p);
						cellValues.setValue((cellValues.getValue() != null ? cellValues.getValue() : "") + "\n" + score.toString());
						cellValues.setWidth(300);
					}
				}
			}
			else if(voSecsConfig.getOxygenSatsConfigIsNotNull())
			{
				DynamicGridRow childRow = parentRow.getRows().newRow();
				childRow.setSelectable(false);
				DynamicGridCell cellConfigType = childRow.getCells().newCell( getColumn(DYN_COLCONFIGTYPE) , DynamicCellType.LABEL);
				cellConfigType.setValue("Oxygen Sats:");
				cellConfigType.setWidth(100);
				DynamicGridCell cellValues = childRow.getCells().newCell( getColumn(DYN_COLVALUES) , DynamicCellType.LABEL);
				cellValues.setValue(voSecsConfig.getOxygenSatsConfig().toString());
				cellValues.setWidth(300);
			}
		}
		
	}

	private DynamicGridColumn getColumn(Integer dynColIdentifier)
	{
		return form.dyngrdSecs().getColumns().getByIdentifier(dynColIdentifier);
	}

	private void initialiseDynamicGrids()
	{
		form.dyngrdSecs().clear();
		
		DynamicGridColumn col1 = form.dyngrdSecs().getColumns().newColumn("Parameter", DYN_COLPARAMETER);
		col1.setWidth(150);
		col1.setDynamicWidthSupported(true);
		
		DynamicGridColumn col2 = form.dyngrdSecs().getColumns().newColumn("", DYN_COLCONFIGTYPE);
		col2.setWidth(0);
		col2.setDynamicWidthSupported(true);

		DynamicGridColumn col3 = form.dyngrdSecs().getColumns().newColumn("", DYN_COLVALUES);
		col3.setWidth(-1);
		col3.setDynamicWidthSupported(true);
		
		
		form.lyrDetail().tabRange().dyngrdRangeScore().clear();
		
		DynamicGridColumn colRange1 = form.lyrDetail().tabRange().dyngrdRangeScore().getColumns().newColumn("Greater Than", DYN_COLGREATERTHAN);
		colRange1.setWidth(100);
		
		DynamicGridColumn colRange2 = form.lyrDetail().tabRange().dyngrdRangeScore().getColumns().newColumn("Less Than", DYN_COLLESSTHAN);
		colRange2.setWidth(100);
		
		DynamicGridColumn colRange3 = form.lyrDetail().tabRange().dyngrdRangeScore().getColumns().newColumn("Score", DYN_COLSCORE);
		colRange3.setWidth(100);
		
		DynamicGridColumn colRange4 = form.lyrDetail().tabRange().dyngrdRangeScore().getColumns().newColumn("Warning", DYN_COLWARNING);
		colRange4.setWidth(-1);
		

	}

	public void populateParameterCombo( SECSTypesCollection usedItemsLookupCollection )
	{
		form.cmbParameter().clear();
		SECSTypesCollection lookupCollection = LookupHelper.getSECSTypes(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			boolean bAllowAdd = true;
			if(usedItemsLookupCollection != null)
			{
				for(int p=0;p<usedItemsLookupCollection.size();p++)
				{
					if(lookupCollection.get(x).equals(usedItemsLookupCollection.get(p)))
					{
						bAllowAdd = false;
						break;
					}
				}
			}
			if(bAllowAdd)
				form.cmbParameter().newRow(lookupCollection.get(x), lookupCollection.get(x).getText());
		}
	}
	
	public void clearConfigInstanceControls()
	{		
		//oxygen
		form.lyrDetail().tabOxygen().intFractionRate().setValue(null);
		form.lyrDetail().tabOxygen().intMinNormal().setValue(null);
		form.lyrDetail().tabOxygen().intMaxNormal().setValue(null);
		
		//range
		form.lyrDetail().tabRange().dyngrdRangeScore().getRows().clear();
		
		//lookups
		form.lyrDetail().tabScore().grdScore().getRows().clear();
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		SECSVo voSecs = form.getLocalContext().getSelectedInstance();
		if (voSecs == null)
			voSecs = new SECSVo();

		populateDataFromScreen(voSecs);
		String[] arrErrors = voSecs.validate(validateUIRules());
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		return doSave(voSecs);
	}

	private boolean doSave(SECSVo voSecs)
	{
		try
		{
			domain.saveSECS(voSecs);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		
		
		return true;
	}
	
	private void populateDataFromScreen(SECSVo voSecs)
	{
		voSecs.setEWSTriggerScore(form.intTotalScore().getValue());
		voSecs.setConfiguration(populateConfigurationDataFromScreen(voSecs.getConfiguration()));
	}

	/** 
	 * @param configurationVoCollection
	 * @return
	 */
	private SECSConfigurationVoCollection populateConfigurationDataFromScreen(SECSConfigurationVoCollection voCollSecsConfig)
	{
		if(voCollSecsConfig == null)
			voCollSecsConfig = new SECSConfigurationVoCollection();
		
		if(form.cmbParameter().getValue() != null)
		{
			SECSConfigurationVo voConfig = getConfigRecord(voCollSecsConfig, form.cmbParameter().getValue());
			voConfig.setType(form.cmbParameter().getValue());
			if(form.cmbParameter().getValue().equals(SECSTypes.TEMPERATURE) || form.cmbParameter().getValue().equals(SECSTypes.SYSTOLICBP) || form.cmbParameter().getValue().equals(SECSTypes.RESPIRATORYRATE) || form.cmbParameter().getValue().equals(SECSTypes.PULSE) || form.cmbParameter().getValue().equals(SECSTypes.OXYGENSATS)) //	WDEV-12769
			{
				SECSRangeConfigVo voRangeConfig = voConfig.getRangeConfig();
				if(voRangeConfig == null)
					voRangeConfig = new SECSRangeConfigVo();
				
				//fill range data
				SECSRangeScoreVoCollection voCollRangeScores = new SECSRangeScoreVoCollection();
				for(int i=0;i<form.lyrDetail().tabRange().dyngrdRangeScore().getRows().size();i++)
				{
					DynamicGridRow row = form.lyrDetail().tabRange().dyngrdRangeScore().getRows().get(i);
					SECSRangeScoreVo voScore = (SECSRangeScoreVo) row.getValue();
					if(voScore == null)
						voScore = new SECSRangeScoreVo();
					
					if(form.cmbParameter().getValue().equals(SECSTypes.TEMPERATURE))
					{
						voScore.setGreaterThanDecValue((Float) row.getCells().get(getRangeColumn(DYN_COLGREATERTHAN)).getValue());
						voScore.setLessThanDecValue((Float) row.getCells().get(getRangeColumn(DYN_COLLESSTHAN)).getValue());
					}
					else
					{
						voScore.setGreaterThanIntValue((Integer) row.getCells().get(getRangeColumn(DYN_COLGREATERTHAN)).getValue());
						voScore.setLessThanIntValue((Integer) row.getCells().get(getRangeColumn(DYN_COLLESSTHAN)).getValue());						
					}
					voScore.setScore((Integer) row.getCells().get(getRangeColumn(DYN_COLSCORE)).getValue());
					voScore.setWarningText((String) row.getCells().get(getRangeColumn(DYN_COLWARNING)).getValue());
					voCollRangeScores.add(voScore);
				}
				
				voRangeConfig.setRangeScores(voCollRangeScores);
				voConfig.setRangeConfig(voRangeConfig);
				voConfig.setIsActive(true);
				voCollSecsConfig.add(voConfig);
			}
			/*	WDEV-12769else if(form.cmbParameter().getValue().equals(SECSTypes.OXYGENSATS))
			{
				//fill oxygen data
				SECSOxygenSatsVo voOxygenSats = voConfig.getOxygenSatsConfig();
				if(voOxygenSats == null)
					voOxygenSats = new SECSOxygenSatsVo();
				
				voOxygenSats.setFractionRate(form.lyrDetail().tabOxygen().intFractionRate().getValue());
				voOxygenSats.setStartNormalRange(form.lyrDetail().tabOxygen().intMinNormal().getValue());
				voOxygenSats.setStartNormalRangeOnOxygen(form.lyrDetail().tabOxygen().intMaxNormal().getValue());
				voConfig.setOxygenSatsConfig(voOxygenSats);
				voConfig.setIsActive(true);
				voCollSecsConfig.add(voConfig);
			}*/
			else
			{
				//fill lookup data
				SECSLookupConfigVo voLookupConfig = voConfig.getLookupConfig();
				if(voLookupConfig == null)
					voLookupConfig = new SECSLookupConfigVo();
				
				SECSLookupScoreVoCollection voCollLookupScores = new SECSLookupScoreVoCollection();
				for(int i=0;i<form.lyrDetail().tabScore().grdScore().getRows().size();i++)
				{
					grdScoreRow row = form.lyrDetail().tabScore().grdScore().getRows().get(i);
					SECSLookupScoreVo voScore = row.getValue();
					if(voScore == null)
						voScore = new SECSLookupScoreVo();
					
					voScore.setLookupInstance(row.getColHidden());
					voScore.setScore(row.getColScore());
					voCollLookupScores.add(voScore);
				}
				
				voLookupConfig.setLookupType(getLookupType(form.cmbParameter().getValue()));
				voLookupConfig.setLookupScores(voCollLookupScores);
				voConfig.setLookupConfig(voLookupConfig);
				voConfig.setIsActive(true);
				voCollSecsConfig.add(voConfig);
			}
		}

		return voCollSecsConfig;
	}

	private DynamicGridColumn getRangeColumn(Integer dynColIdentifier)
	{
		return form.lyrDetail().tabRange().dyngrdRangeScore().getColumns().getByIdentifier(dynColIdentifier);
	}

	private LookupTypeVo getLookupType(SECSTypes type)
	{
		if(type == null)
			throw new CodingRuntimeException("type is null in method getLookupType");
		
		if(type.equals(SECSTypes.PATIENT_CONCERN))
			return new LookupTypeVo(PatientCausingConcern.TYPE_ID);
		if(type.equals(SECSTypes.URINE_OUTPUT))
			return new LookupTypeVo(UrineOutput.TYPE_ID);
		if(type.equals(SECSTypes.CONSCIOUS_LEVEL))
			return new LookupTypeVo(ConsciousLevel.TYPE_ID);
		
		return null;
	}

	/**
	 * if a record exists then retrieve it for type else create new
	 * @param voCollSecsConfig
	 * @param type 
	 * @return
	 */
	private SECSConfigurationVo getConfigRecord(SECSConfigurationVoCollection voCollSecsConfig, SECSTypes type)
	{
		for(int i=0; i<voCollSecsConfig.size(); i++)
		{
			if(voCollSecsConfig.get(i).getTypeIsNotNull() && voCollSecsConfig.get(i).getType().equals(type))
				return voCollSecsConfig.get(i);
		}
		
		return new SECSConfigurationVo();
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		if (allowNew())
		{
			form.getLocalContext().setSelectedInstance(new SECSVo());
			form.intTotalScore().setValue(null);
			form.txtProtocol().setValue(null);
			clearConfigInstanceControls();
			form.dyngrdSecs().setValue(null);
			form.setMode(FormMode.EDIT);
		}
	}
	
	public boolean allowNew()
	{
		boolean allowNew = true;
		
		populateParameterCombo(getUsedItemsLookupCollection());
		if(form.cmbParameter().getValues().size() == 0)
		{
			allowNew = false;
			engine.showErrors("Parameters", new String[]{"All Parameter have been Configured"});
			if(form.dyngrdSecs().getValue() != null)
				dyngrdSecsSelectionChanged();
		}	
		return allowNew;
	}

	private SECSTypesCollection getUsedItemsLookupCollection()
	{
		if(form.dyngrdSecs().getRows().size() == 0)
			return null;
		
		SECSTypesCollection collLookups = new SECSTypesCollection();
		if(form.getLocalContext().getSelectedInstance() != null)
		{
			SECSConfigurationVoCollection voCollConfig = form.getLocalContext().getSelectedInstance().getConfiguration();
			if(voCollConfig != null)
			{
				for(int i=0;i<voCollConfig.size();i++)
				{
					collLookups.add(voCollConfig.get(i).getType());
				}
			}
		} 

		return collLookups;
	}

	public void updateInstance()
	{
		updateControlsState();
		form.setMode(FormMode.EDIT);
	}

	public void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{			
			form.dyngrdSecs().setSelectable(true);
			form.lyrDetail().tabRange().dyngrdRangeScore().setSelectable(false);
			if(form.dyngrdSecs().getValue() != null)
			{
				form.btnUpdate().setEnabled(true);
			}
		}
		
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.dyngrdSecs().setSelectable(true);
			form.btnNew().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.lyrDetail().tabRange().dyngrdRangeScore().setEnabled(false);
			form.lyrDetail().tabScore().grdScore().setEnabled(false);
			
			form.lyrDetail().tabOxygen().intFractionRate().setEnabled(false);
			form.lyrDetail().tabOxygen().intMinNormal().setEnabled(false);
			form.lyrDetail().tabOxygen().intMaxNormal().setEnabled(false);
		}

		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT) && !areAllParametersUsed());
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.dyngrdSecs().getSelectedRow() != null);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.dyngrdSecs().getSelectedRow() != null);
	}

	private boolean areAllParametersUsed()
	{
		SECSTypesCollection collSECSTypes = getUsedItemsLookupCollection();
		if(collSECSTypes==null)
			return false;
		
		int usedItems = collSECSTypes.size();
		
		if(usedItems > 0 && usedItems == form.cmbParameter().getValues().size())
			return true;
			
		return false;
	}

	public String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		//validating that a type has been set for each parameter
		if(form.getLocalContext().getSelectedInstanceIsNotNull())
		{
			SECSConfigurationVoCollection voCollConfig = form.getLocalContext().getSelectedInstance().getConfiguration();
			if(voCollConfig != null)
			{
				for(int i=0;i<voCollConfig.size();i++)
				{
					if(voCollConfig.get(i).getType() == null)
					{
						errors.add("Parameter is a mandatory field");
						break;
					}
					else
					{
						if(isRange(voCollConfig.get(i).getType()))
						{
							if(voCollConfig.get(i).getRangeConfigIsNotNull() && voCollConfig.get(i).getRangeConfig().getRangeScoresIsNotNull())
							{
								for(int p=0;p<voCollConfig.get(i).getRangeConfig().getRangeScores().size();p++)
								{
									SECSRangeScoreVo score = voCollConfig.get(i).getRangeConfig().getRangeScores().get(p);
									if(score.getGreaterThanIntValueIsNotNull() && score.getLessThanIntValueIsNotNull())
									{
										if(score.getGreaterThanIntValue().intValue() >= score.getLessThanIntValue().intValue())
										{
											errors.add("'Greater Than' value must be less than 'Less Than' value.");
											break;
										}
									}
									if(score.getWarningTextIsNotNull() && score.getWarningText().length()>255){
										errors.add("Warning text should be less than 255 characters in length.");
										break;
									}
								}
							}
						}
					}
				}
			}
		}
			
			
		if((form.lyrDetail().tabOxygen().intMaxNormal().getValue() != null && form.lyrDetail().tabOxygen().intFractionRate().getValue() == null) || (form.lyrDetail().tabOxygen().intMaxNormal().getValue() == null && form.lyrDetail().tabOxygen().intFractionRate().getValue() != null))
			errors.add("'Min. Normal Oxygen Sats Level on Oxygen' and 'Fraction Rate' must be both entered or not at all");
			
		String[] arrErrors = null;
		if(errors.size() > 0)
		{
			arrErrors = new String[errors.size()];
			for(int i=0;i<errors.size();i++)
				arrErrors[i] = errors.get(i);
		}
		
		return arrErrors;
	}

	private boolean isRange(SECSTypes value)
	{
		return value != null && (value.equals(SECSTypes.PULSE) || value.equals(SECSTypes.RESPIRATORYRATE) || value.equals(SECSTypes.SYSTOLICBP) || value.equals(SECSTypes.TEMPERATURE) || value.equals(SECSTypes.OXYGENSATS));//	WDEV-12769
	}
	
	private boolean isScore(SECSTypes value)
	{
		return value != null && (value.equals(SECSTypes.PATIENT_CONCERN) || value.equals(SECSTypes.URINE_OUTPUT) || value.equals(SECSTypes.CONSCIOUS_LEVEL));
	}

	protected void onBtnProtocolClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Assessment.SearchAndSelectAssessmentDialog);
	}

	/** 
	 * Check type of record and launch corresponding tab
	 */
	protected void onCmbParameterValueChanged() throws PresentationLogicException
	{
		cmbParameterValueChanged();
	}

	private void cmbParameterValueChanged()
	{
		if(form.cmbParameter().getValue() != null)
		{
			clearTabs(false);
			if(isRange(form.cmbParameter().getValue()))
			{
				form.lyrDetail().showtabRange();
				if(form.getMode().equals(FormMode.EDIT))
					form.lyrDetail().tabRange().btnAddRange().setEnabled(true);
			}
			
			else if(isScore(form.cmbParameter().getValue()))
			{
				form.lyrDetail().showtabScore();
				
				loadScoresGrid(form.cmbParameter().getValue());
			}
			/*	WDEV-12769else 
				form.lyrDetail().showtabOxygen();*/
		}
		else
		{
			
			form.lyrDetail().tabRange().btnAddRange().setEnabled(false);
			clearTabs(true);
		}
	}

	private void clearTabs(boolean bClearVisibleTab)
	{
		if(bClearVisibleTab)
		{
			//range
			form.lyrDetail().tabRange().dyngrdRangeScore().getRows().clear();
			//lookups
			form.lyrDetail().tabScore().grdScore().getRows().clear();
			//oxygen
			form.lyrDetail().tabOxygen().intFractionRate().setValue(null);
			form.lyrDetail().tabOxygen().intMinNormal().setValue(null);
			form.lyrDetail().tabOxygen().intMaxNormal().setValue(null);
		}
		else
		{
			if(form.lyrDetail().tabOxygen().isHeaderVisible())
			{
				//range
				form.lyrDetail().tabRange().dyngrdRangeScore().getRows().clear();
				//lookups
				form.lyrDetail().tabScore().grdScore().getRows().clear();
			}
			else if(form.lyrDetail().tabRange().isHeaderVisible())
			{
				//oxygen
				form.lyrDetail().tabOxygen().intFractionRate().setValue(null);
				form.lyrDetail().tabOxygen().intMinNormal().setValue(null);
				form.lyrDetail().tabOxygen().intMaxNormal().setValue(null);
				
				//lookups
				form.lyrDetail().tabScore().grdScore().getRows().clear();
			}
			else
			{
				//oxygen
				form.lyrDetail().tabOxygen().intFractionRate().setValue(null);
				form.lyrDetail().tabOxygen().intMinNormal().setValue(null);
				form.lyrDetail().tabOxygen().intMaxNormal().setValue(null);
				
				//range
				form.lyrDetail().tabRange().dyngrdRangeScore().getRows().clear();
			}
		}
	}

	private void loadScoresGrid(SECSTypes type)
	{
		form.lyrDetail().tabScore().grdScore().getRows().clear();
		if(type.equals(SECSTypes.PATIENT_CONCERN))
		{
			PatientCausingConcernCollection collConcerns = LookupHelper.getPatientCausingConcern(domain.getLookupService());
			for(int i=0; i<collConcerns.size(); i++)
			{
				grdScoreRow row = form.lyrDetail().tabScore().grdScore().getRows().newRow();
				row.setColHidden(collConcerns.getIndex(i));
				row.setColText(collConcerns.getIndex(i).getText());
			}
		}
		else if(type.equals(SECSTypes.CONSCIOUS_LEVEL))
		{
			ConsciousLevelCollection collConscious = LookupHelper.getConsciousLevel(domain.getLookupService());
			for(int i=0; i<collConscious.size(); i++)
			{
				grdScoreRow row = form.lyrDetail().tabScore().grdScore().getRows().newRow();
				row.setColHidden(collConscious.getIndex(i));
				row.setColText(collConscious.getIndex(i).getText());
			}
		}
		else if(type.equals(SECSTypes.URINE_OUTPUT))
		{
			UrineOutputCollection collUrine = LookupHelper.getUrineOutput(domain.getLookupService());
			for(int i=0; i<collUrine.size(); i++)
			{
				grdScoreRow row = form.lyrDetail().tabScore().grdScore().getRows().newRow();
				row.setColHidden(collUrine.getIndex(i));
				row.setColText(collUrine.getIndex(i).getText());
			}
		}
		
		if(form.lyrDetail().tabScore().grdScore().getRows().size() == 0)
		{
			engine.showMessage("No instances configured for '" + type.getText() + "'");
			form.cmbParameter().setValue(null);
		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Core.getSelectedUserAssessmentLiteIsNotNull())
			{
				form.txtProtocol().setValue(form.getGlobalContext().Core.getSelectedUserAssessmentLite().getName());
				form.getLocalContext().getSelectedInstance().setEWSProtocol(form.getGlobalContext().Core.getSelectedUserAssessmentLite());
			}	
			else
			{
				form.txtProtocol().setValue(null);
				form.getLocalContext().getSelectedInstance().setEWSProtocol(null);
			}
		}	
	}

	protected void onBtnAddRangeClick() throws PresentationLogicException
	{
		if(form.cmbParameter().getValue() == null)
			throw new CodingRuntimeException("Add button should not be enabled when no parameter is selected");
		
		addRangeRow();
	}

	private void addRangeRow()
	{
		DynamicGridRow row = form.lyrDetail().tabRange().dyngrdRangeScore().getRows().newRow();
		
		DynamicCellType cellRangeType = DynamicCellType.INT; 
		if(form.cmbParameter().getValue().equals(SECSTypes.TEMPERATURE))
			cellRangeType = DynamicCellType.DECIMAL;
		
		row.getCells().newCell(getRangeColumn(DYN_COLGREATERTHAN), cellRangeType);
		row.getCells().newCell(getRangeColumn(DYN_COLLESSTHAN), cellRangeType);
		row.getCells().newCell(getRangeColumn(DYN_COLSCORE), DynamicCellType.INT);
		row.getCells().newCell(getRangeColumn(DYN_COLWARNING), DynamicCellType.WRAPTEXT).setStringMaxLength(255);
		
	}

	protected void onBtnAddScoreClick() throws PresentationLogicException
	{
		form.lyrDetail().tabScore().grdScore().getRows().newRow();
	}

	protected void onBtnRemoveRangeClick() throws PresentationLogicException
	{
		form.lyrDetail().tabRange().dyngrdRangeScore().getRows().remove(form.lyrDetail().tabRange().dyngrdRangeScore().getSelectedRow());
		form.lyrDetail().tabRange().btnRemoveRange().setEnabled(false);
	}

	protected void onBtnRemoveScoreClick() throws PresentationLogicException
	{
		form.lyrDetail().tabScore().grdScore().removeSelectedRow();
	}

	protected void onDyngrdRangeScoreRowSelectionChanged(DynamicGridRow row)
	{
		if(form.getMode().equals(FormMode.EDIT))
			form.lyrDetail().tabRange().btnRemoveRange().setEnabled(true);
	}
	private void hideContextMenu()
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(false);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
	}
}
