//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignspulse;

import ims.core.vo.VSPulse;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;
import ims.framework.utils.graphing.GraphingPulse;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		//WDEV-14429
		if(isVitalSignsPulseForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoPulseByDay);
		form.btnUpdate().setEnabled(false);
		// form.btnPrint().setEnabled(false);
		
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			form.lnkReturn().setTooltip("Return to Baseline Observations");
		}
		else
		{
			form.lnkReturn().setTooltip("Return to Vital Signs");
		}
		//ends here 

		if (form.getGlobalContext().Core.getVitalSign() != null && form.getGlobalContext().Core.getVitalSign().getPulse() != null)
		{
			form.dteShowByDay().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//	WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);
			// form.btnPrint().setEnabled(true);
			listPulse();
		}
		else
		{
			try
			{
				onRadioButtongrpShowByValueChanged();
			}
			catch (PresentationLogicException e)
			{
				throw new DomainRuntimeException();
			}
		}

		form.chkLegend().setValue(form.grhPulse().legendIsShown());

		updatePrevNextButtons();
		dateIntervalStatus();//	WDEV-13117
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);

		dateIntervalStatus();
		updatePrevNextButtons();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();

		VSPulse voPulse = new VSPulse();

		voPulse.setPulseRateRadial(form.intPulseRadial().getValue());
		voPulse.setPulseRateApex(form.intPulseApex().getValue());
		voPulse.setIsIrregular(new Boolean(form.chkIrregularPulse().getValue()));

		voVitalSign.setPulse(voPulse);

		String[] arrErrors = voVitalSign.validate();

		if (arrErrors == null)
		{
			try
			{
				domain.modifyPulse(voVitalSign);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;
		}

		form.getGlobalContext().Core.setVitalSign(voVitalSign);
		form.setMode(FormMode.VIEW);
		listPulse();
		dateIntervalStatus();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.btnUpdate().setEnabled(false);
		form.dteShowByDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		form.btnNext().setEnabled(false);
		form.btnPrev().setEnabled(false);
		// form.btnPrint().setEnabled(false);
	}

	protected void onBtnViewClick() throws PresentationLogicException
	{
		if (form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoPulseByDay))
		{
			if (form.dteShowByDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if (form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;
			}
			if (form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}

		clearFields();
		listPulse();
	}

	protected void onBtnPrintClick() throws PresentationLogicException
	{

	}

	private void clearFields()
	{
		form.intPulseRadial().setValue(null);
		form.intPulseApex().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.txtHCP().setValue("");
		form.chkIrregularPulse().setValue(false);
	}

	private void listPulse()
	{
		VitalSignsVoCollection voCollVitalSigns = null;
		String subTitle = "Pulse";
		if (form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoPulseByDay))
		{
			voCollVitalSigns = domain.listPulse(form.dteShowByDay().getValue(), form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Pulse for " + form.dteShowByDay().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitalSigns = domain.listPulse(form.dteFrom().getValue(), form.dteTo().getValue(), form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Pulse between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " + form.dteTo().getValue().toString(DateFormat.STANDARD);
		}

		form.lblPulse().setValue(subTitle);
		form.grhPulse().clearAllPoints();

		form.grhPulse().showYAxisValues();
		
		form.grhPulse().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());

		VitalSignsVo voVitalSign;
		GraphingPulse point;
		if (voCollVitalSigns != null)
		{
			voCollVitalSigns.sort(SortOrder.ASCENDING);

			int nIndex = voCollVitalSigns.size() - 1;

			for (int i = 0; i < voCollVitalSigns.size(); i++)
			{
				voVitalSign = voCollVitalSigns.get(i);

				point = new GraphingPulse(voVitalSign.getVitalsTakenDateTime(), voVitalSign.getPulse().getPulseRateRadial(), voVitalSign.getPulse().getPulseRateApex(), voVitalSign.getPulse().getIsIrregular(), voVitalSign);
				form.grhPulse().addPoint(point);

				if (form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}

			form.getLocalContext().setPulses(voCollVitalSigns);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentPulse();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setPulses(null);
			form.btnUpdate().setEnabled(false);
			// form.btnPrint().setEnabled(false);
		}
	}

	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException
	{
		if (form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoPulseByDay))
		{
			form.dteShowByDay().setEnabled(true);
			form.dteShowByDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);

		}
		else
		{
			form.dteShowByDay().setEnabled(false);
			form.dteShowByDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());

		}
		onBtnViewClick();
	}

	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();

		form.btnUpdate().setEnabled(true);
		// form.btnPrint().setEnabled(true);

		form.intPulseRadial().setValue(voVitalSign.getPulse().getPulseRateRadial());
		form.intPulseApex().setValue(voVitalSign.getPulse().getPulseRateApex());
		if(voVitalSign.getPulse().getIsIrregular() == null) //WDEV-2010
			form.chkIrregularPulse().setValue(false);
		else
			form.chkIrregularPulse().setValue(voVitalSign.getPulse().getIsIrregular().booleanValue());
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime().getTime());
		if (voVitalSign.getAuthoringInformation()!=null && voVitalSign.getAuthoringInformation().getAuthoringHcp() != null)
		form.txtHCP().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
	}

	private void refresh()
	{
		clearFields();
		listPulse();
		form.setMode(FormMode.VIEW);
	}

	protected void onGrhPulsePointClicked(GraphingPoint point)
	{
		if (point.getType() == GraphingPointType.PULSE)
		{
			GraphingPulse pointPulse = (GraphingPulse) point;
			form.getLocalContext().setvitalSign((VitalSignsVo) pointPulse.getTag());
			displayRecord((VitalSignsVo) pointPulse.getTag());
			form.btnUpdate().setEnabled(true);

			// update the Prev/Next buttons
			VitalSignsVoCollection voPulses = form.getLocalContext().getPulses();
			for (int i = 0; i < voPulses.size(); i++)
			{
				if (form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voPulses.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}
	}

	private void displayCurrentPulse()
	{
		VitalSignsVoCollection voPulses = form.getLocalContext().getPulses();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		if (voPulses == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voPulses.size())
			return;

		form.getLocalContext().setvitalSign(voPulses.get(nIndex.intValue()));
		displayRecord(voPulses.get(nIndex.intValue()));

		updatePrevNextButtons();
	}

	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voCollPulse = form.getLocalContext().getPulses();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);

		if (voCollPulse == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}

		if (nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if (nIndex.intValue() >= voCollPulse.size() - 1)
			form.btnNext().setEnabled(false);
	}

	protected void onBtnNextClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentPulse();
	}

	protected void onBtnPrevClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentPulse();
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDay().setEnabled(GenForm.grpShowByEnumeration.rdoPulseByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoPulseByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoPulseByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}

	protected void onChkLegendValueChanged() throws PresentationLogicException
	{
		form.grhPulse().showLegend(form.chkLegend().getValue());
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsPulseForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			engine.open(form.getForms().Core.BaselineObservations);
			
		}
		//ends here
		
		
		else if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}

	//WDEV-14429
	private boolean isVitalSignsPulseForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsPulseForTriage))
			return true;
		
		return false;
	}
}
