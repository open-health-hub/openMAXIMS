//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.selectmedication;

import ims.admin.helper.Keywords;
import ims.core.vo.KeywordVo;
import ims.core.vo.KeywordVoCollection;
import ims.core.vo.MedicationVo;
import ims.framework.enumerations.DialogResult;
import ims.vo.interfaces.IDMDValue;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		
//		boolean allowVTMSelection = engine.getParentDialogFormName().equals(form.getForms().RefMan.Presentation);		
		
		boolean hotlistSearchOnly = false;
		if(form.getGlobalContext().Core.SelectMedication.getHotlistSearchOnlyIsNotNull())
		{
			hotlistSearchOnly = form.getGlobalContext().Core.SelectMedication.getHotlistSearchOnly();
		}
		form.ccDMDSearch().initialize(form.getGlobalContext().RefMan.getSelectedSpecialty(), true, hotlistSearchOnly);
	}
	@Override
	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setSelectionValue();
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onCcDMDSearchValueChanged() 
	{
		updateControlsState();
	}
	private void updateControlsState()
	{
		form.btnSelect().setEnabled(hasSelection());
	}
	private boolean hasSelection()
	{
		return form.ccDMDSearch().getValue() != null;		
	}
	private void setSelectionValue()
	{
		form.getGlobalContext().Core.SelectMedication.setSelectedMedication(getMedication());
	}
	private MedicationVo getMedication() 
	{
		IDMDValue selection = form.ccDMDSearch().getValue();
		if(selection == null)
			return null;
		
		MedicationVo result = new MedicationVo();
		
		result.setMedicationName(selection.getIDMDValueText());
		result.setIsActive(true);
		
		/*
		TaxonomyMapCollection taxonomy = new TaxonomyMapCollection();
		
		TaxonomyMap vtm = new TaxonomyMap();
		vtm.setTaxonomyName(TaxonomyType.VTM);
		vtm.setTaxonomyCode(String.valueOf(form.ccDMDSearch().getVTM().getID_VTM()));
		taxonomy.add(vtm);
		
		if(selection.getIDMDValueType() == DMDType.VMP || selection.getIDMDValueType() == DMDType.AMP)
		{
			TaxonomyMap vmp = new TaxonomyMap();
			vmp.setTaxonomyName(TaxonomyType.VMP);
			vmp.setTaxonomyCode(String.valueOf(form.ccDMDSearch().getVMP().getID_VMP()));
			taxonomy.add(vmp);
		}
		
		if(selection.getIDMDValueType() == DMDType.AMP)
		{
			TaxonomyMap amp = new TaxonomyMap();
			amp.setTaxonomyName(TaxonomyType.AMP);
			amp.setTaxonomyCode(String.valueOf(form.ccDMDSearch().getAMP().getID_AMP()));
			taxonomy.add(amp);
		}
		
		result.setTaxonomyMap(taxonomy);
		*/
		
		KeywordVoCollection keywords = new KeywordVoCollection();
		String[] keywordStrings = Keywords.generateKeywords(selection.getIDMDValueText());
		for(int x = 0; x < keywordStrings.length; x++)
		{
			KeywordVo keyword = new KeywordVo();
			keyword.setKeyword(keywordStrings[x]);
			keywords.add(keyword);
		}
		result.setKeywords(keywords);
		
		return result;
	}
}
