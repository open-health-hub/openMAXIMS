//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.charttypedetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.ChartTypeDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.ChartTypeDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected void clearScreen()
	{
		this.form.intAboveBand().setValue(null);
		this.form.intBelowBand().setValue(null);
		this.form.chkActive().setValue(false);
		this.form.txtDescription().setValue("");
		this.form.txtName().setValue("");
	}
	protected void populateScreenFromData(ims.core.vo.ChartTypeVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.intAboveBand().setValue(value.getAboveBandPercentIsNotNull() ? value.getAboveBandPercent() : null);
		this.form.intBelowBand().setValue(value.getBelowBandPercentIsNotNull() ? value.getBelowBandPercent() : null);
		if(value.getIsActiveIsNotNull())
			this.form.chkActive().setValue(value.getIsActive().booleanValue());
		this.form.txtDescription().setValue(value.getDescriptionIsNotNull() ? value.getDescription(): null);
		this.form.txtName().setValue(value.getNameIsNotNull() ? value.getName(): null);
	}
	protected ims.core.vo.ChartTypeVo populateDataFromScreen(ims.core.vo.ChartTypeVo value)
	{
		if(value == null)
			value = new ims.core.vo.ChartTypeVo();

		value.setAboveBandPercent(this.form.intAboveBand().getValue());
		value.setBelowBandPercent(this.form.intBelowBand().getValue());
		value.setIsActive(new Boolean(this.form.chkActive().getValue()));
		value.setDescription(this.form.txtDescription().getValue());
		value.setName(this.form.txtName().getValue());

		return value;
	}
	protected ims.core.vo.ChartTypeVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.core.vo.ChartTypeVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.ChartTypeDetails domain;
}
