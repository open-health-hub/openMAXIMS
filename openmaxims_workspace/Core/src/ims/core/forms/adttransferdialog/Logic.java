//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.53 build 2663.17474)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.adttransferdialog;

import java.util.ArrayList;

import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.MedicRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args == null || args.length == 0 || !(args[0] instanceof InpatientEpisodeVo))
			throw new CodingRuntimeException("Transfer Dialog cannot be launched without being passed an Inpatient Episode");

		form.getLocalContext().setInpatEpis((InpatientEpisodeVo)args[0]);
		initialise();		
	}
	
	private void initialise()
	{
		InpatientEpisodeVo epis = form.getLocalContext().getInpatEpis();
		
		form.txtWard().setValue(epis.getPasEvent().getLocation().getName());
		if (epis.getPasEvent().getConsultant() != null)
			form.txtCons().setValue(epis.getPasEvent().getConsultant().getName().toString());
		if (epis.getPasEvent().getSpecialty() != null)
			form.txtSpec().setValue(epis.getPasEvent().getSpecialty().getText());
		LocationLiteVo parentHosp = domain.getParentHospital(epis.getPasEvent().getLocation());
		if (parentHosp != null)
			form.txtHosp().setValue(parentHosp.getName());
		
		fillHospitalCombo();		
		form.cmbHosp().setValue(parentHosp);
		fillWardCombo();
		form.cmbWard().setValue(epis.getPasEvent().getLocation());
		form.cmbSpec().setValue(epis.getPasEvent().getSpecialty());
	}
	
	private void fillHospitalCombo()
	{
		form.cmbHosp().clear();
		form.cmbWard().clear();
		LocationLiteVoCollection coll = domain.listHospitals();
		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbHosp().newRow(coll.get(i), coll.get(i).getName());
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] msgs = validateInputs();
		if (msgs != null && msgs.length > 0)
		{
			engine.showErrors(msgs);
			return;			
		}
		PatientRefVo pat = form.getLocalContext().getInpatEpis().getPasEvent().getPatient();
		LocationRefVo ward = form.cmbWard().getValue();
		MedicRefVo cons = form.qmbCons().getValue();
		try
		{
			domain.transferInpatient(pat, ward, cons);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	private String[] validateInputs()
	{
		ArrayList<String> errs = new ArrayList<String>();
		if (form.cmbWard().getValue() == null)
			errs.add("Ward must be specified.");
		if (form.qmbCons().getValue() == null)
			errs.add("Consultant must be specified.");
		
		return errs.toArray(new String[errs.size()]);
	}

	@Override
	protected void onQmbConsTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbCons().clear();

		if (value != null)
		{
			MedicLiteVo med = null;
			MedicLiteVoCollection voMedicColl = domain.listConsultants(value);
			if (voMedicColl != null)
			{
				for (int i = 0; i < voMedicColl.size(); i++)
				{
					med = voMedicColl.get(i);
					form.qmbCons().newRow(med, med.toString());			
				}
			}
			if (voMedicColl != null &&
					voMedicColl.size() == 1)
							form.qmbCons().setValue(voMedicColl.get(0));
			else if (voMedicColl != null &&
						voMedicColl.size() > 1)
							form.qmbCons().showOpened();
		}
	}
	@Override
	protected void onCmbHospValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHosp().getValue() == null)
			return;
		
		fillWardCombo();
	}
	
	private void fillWardCombo()
	{
		if (form.cmbHosp().getValue() == null)
			return;
		
		form.cmbWard().clear();
		LocationLiteVoCollection coll = domain.listWardsForHospital(form.cmbHosp().getValue());
		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbWard().newRow(coll.get(i), coll.get(i).getName());
		}
		
	}
}
