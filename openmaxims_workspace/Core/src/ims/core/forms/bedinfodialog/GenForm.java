//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedinfodialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPatientContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 472, 392, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 376, 392, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Tel Work:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 104, 88, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/01/1970", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOD:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 472, 32, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alert Details", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Alerts:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 472, 368, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 472, 240, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 376, 368, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Tel Home:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 376, 240, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Name:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 472, 344, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 472, 328, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 472, 312, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 472, 296, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 472, 280, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 472, 264, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 376, 264, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NOK Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 104, 368, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "(0404 -12456789)", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 368, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Telephone:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 240, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 240, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Name:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 344, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 328, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 104, 312, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 104, 296, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 104, 280, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 104, 264, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 264, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "GP Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 328, 64, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Male", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 280, 64, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gender:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 216, 167, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Local Authority of Residence", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 216, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "L.A.R:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 104, 192, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 104, 176, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 5", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 104, 160, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 4", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 104, 144, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 3", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 104, 128, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 2", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address Line 1", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 224, 64, 19, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "38", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 104, 64, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/01/1970", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 248, 40, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "123456", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "123456", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 192, 64, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Age:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 192, 40, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NHS No:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 248, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(2)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 24, 416, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public Label lblNOKWorkPhone()
			{
				return (Label)super.getControl(0);
			}
			public Label lblDOD()
			{
				return (Label)super.getControl(2);
			}
			public Label lblDODlabel()
			{
				return (Label)super.getControl(3);
			}
			public Label lblAlerts()
			{
				return (Label)super.getControl(4);
			}
			public Label lblNOKPhoneInfo()
			{
				return (Label)super.getControl(6);
			}
			public Label lblNOKNameInfo()
			{
				return (Label)super.getControl(7);
			}
			public Label lblNokPostCode()
			{
				return (Label)super.getControl(10);
			}
			public Label lblNOKAddress5Info()
			{
				return (Label)super.getControl(11);
			}
			public Label lblNOKAddress4Info()
			{
				return (Label)super.getControl(12);
			}
			public Label lblNOKAddress3Info()
			{
				return (Label)super.getControl(13);
			}
			public Label lblNOKAddress2Info()
			{
				return (Label)super.getControl(14);
			}
			public Label lblNOKAddress1Info()
			{
				return (Label)super.getControl(15);
			}
			public Label lblGPPhoneInfo()
			{
				return (Label)super.getControl(17);
			}
			public Label lblGPNameInfo()
			{
				return (Label)super.getControl(19);
			}
			public Label lblGPPostCode()
			{
				return (Label)super.getControl(21);
			}
			public Label lblGPAddress5Info()
			{
				return (Label)super.getControl(22);
			}
			public Label lblGPAddress4Info()
			{
				return (Label)super.getControl(23);
			}
			public Label lblGPAddress3Info()
			{
				return (Label)super.getControl(24);
			}
			public Label lblGPAddress2Info()
			{
				return (Label)super.getControl(25);
			}
			public Label lblGPAddress1Info()
			{
				return (Label)super.getControl(26);
			}
			public Label lblGenderInfo()
			{
				return (Label)super.getControl(28);
			}
			public Label lblLARInfo()
			{
				return (Label)super.getControl(30);
			}
			public Label lblPatientPostcodeInfo()
			{
				return (Label)super.getControl(32);
			}
			public Label lblPatientAddress5Info()
			{
				return (Label)super.getControl(33);
			}
			public Label lblPatientAddress4Info()
			{
				return (Label)super.getControl(34);
			}
			public Label lblPatientAddress3Info()
			{
				return (Label)super.getControl(35);
			}
			public Label lblPatientAddress2Info()
			{
				return (Label)super.getControl(36);
			}
			public Label lblPatientAddress1Info()
			{
				return (Label)super.getControl(37);
			}
			public Label lblAgeInfo()
			{
				return (Label)super.getControl(38);
			}
			public Label lblDOBInfo()
			{
				return (Label)super.getControl(39);
			}
			public Label lblNHSNoInfo()
			{
				return (Label)super.getControl(40);
			}
			public Label lblHospNoInfo()
			{
				return (Label)super.getControl(41);
			}
			public Label lblPatientNameInfo()
			{
				return (Label)super.getControl(47);
			}
			public Button btnEditPatient()
			{
				return (Button)super.getControl(48);
			}
		}
		public static class tabTransferContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrTransferLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbCCOInSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class grdTransferInRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdTransferInRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColNameReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColNameReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColNameOpened()
						{
							super.row.showOpened(0);
						}
						public String getColName()
						{
							return (String)super.row.get(0);
						}
						public void setColName(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColNameTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColWardReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColWardReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColWardOpened()
						{
							super.row.showOpened(1);
						}
						public String getColWard()
						{
							return (String)super.row.get(1);
						}
						public void setColWard(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColWardTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColSpecialtyReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColSpecialtyReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColSpecialtyOpened()
						{
							super.row.showOpened(2);
						}
						public String getColSpecialty()
						{
							return (String)super.row.get(2);
						}
						public void setColSpecialty(String value)
						{
							super.row.set(2, value);
						}
						public void setCellColSpecialtyTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColConsultantReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColConsultantReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColConsultantOpened()
						{
							super.row.showOpened(3);
						}
						public String getColConsultant()
						{
							return (String)super.row.get(3);
						}
						public void setColConsultant(String value)
						{
							super.row.set(3, value);
						}
						public void setCellColConsultantTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public void setColRequestDateReadOnly(boolean value)
						{
							super.row.setReadOnly(4, value);
						}
						public boolean isColRequestDateReadOnly()
						{
							return super.row.isReadOnly(4);
						}
						public void showColRequestDateOpened()
						{
							super.row.showOpened(4);
						}
						public String getColRequestDate()
						{
							return (String)super.row.get(4);
						}
						public void setColRequestDate(String value)
						{
							super.row.set(4, value);
						}
						public void setCellColRequestDateTooltip(String value)
						{
							super.row.setTooltip(4, value);
						}
						public ims.core.vo.PendingTransfersLiteVo getValue()
						{
							return (ims.core.vo.PendingTransfersLiteVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdTransferInRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdTransferInRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdTransferInRow get(int index)
						{
							return new grdTransferInRow(super.collection.get(index));
						}
						public grdTransferInRow newRow()
						{
							return new grdTransferInRow(super.collection.newRow());
						}
						public grdTransferInRow newRow(boolean autoSelect)
						{
							return new grdTransferInRow(super.collection.newRow(autoSelect));
						}
						public grdTransferInRow newRowAt(int index)
						{
							return new grdTransferInRow(super.collection.newRowAt(index));
						}
						public grdTransferInRow newRowAt(int index, boolean autoSelect)
						{
							return new grdTransferInRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdTransferInGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.core.vo.PendingTransfersLiteVoCollection getValues()
						{
							ims.core.vo.PendingTransfersLiteVoCollection listOfValues = new ims.core.vo.PendingTransfersLiteVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.PendingTransfersLiteVo getValue()
						{
							return (ims.core.vo.PendingTransfersLiteVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							super.grid.setValue(value);
						}
						public grdTransferInRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdTransferInRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdTransferInRowCollection getRows()
						{
							return new grdTransferInRowCollection(super.grid.getRows());
						}
						public grdTransferInRow getRowByValue(ims.core.vo.PendingTransfersLiteVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdTransferInRow(row);
						}
						public void setColNameHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColNameHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColWardHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColWardHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColSpecialtyHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColSpecialtyHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColConsultantHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColConsultantHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
						public void setColRequestDateHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(4, value);
						}
						public String getColRequestDateHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(4);
						}
					}
				
					public static class TICaseFolderYesNoRadioButton extends RadioButtonBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
						{
							if(startTabIndex == null)
								throw new RuntimeException("Invalid startTabIndex ");
							RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 232, 312, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(0, anchoringHelper50.getX(), anchoringHelper50.getY(), anchoringHelper50.getWidth(), "No", startTabIndex.intValue() + 1038);
							RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 176, 312, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(1, anchoringHelper51.getX(), anchoringHelper51.getY(), anchoringHelper51.getWidth(), "Yes", startTabIndex.intValue() + 1036);
						}
						public void setText(TICaseFolderYesNoEnumeration option, String value)
						{
							if(option != null && option.id >= 0 && value != null)
								control.setText(option.id, value);
						}
						public TICaseFolderYesNoEnumeration getValue()
						{
							switch (super.control.getValue())
							{
								case -1: return TICaseFolderYesNoEnumeration.None;
								case 0: return TICaseFolderYesNoEnumeration.rdoTINo;
								case 1: return TICaseFolderYesNoEnumeration.rdoTIYes;
							}
							return null;
						}
						public void setValue(TICaseFolderYesNoEnumeration value)
						{
							if(value != null)
								super.control.setValue(value.id);
							else
								super.control.setValue(TICaseFolderYesNoEnumeration.None.id);
						}
						public boolean isEnabled(TICaseFolderYesNoEnumeration option)
						{
							return super.control.isEnabled(option.id);
						}
						public void setEnabled(TICaseFolderYesNoEnumeration option, boolean value)
						{
							super.control.setEnabled(option.id, value);
						}
						public boolean isVisible(TICaseFolderYesNoEnumeration option)
						{
							return super.control.isVisible(option.id);
						}
						public void setVisible(TICaseFolderYesNoEnumeration option, boolean value)
						{
							super.control.setVisible(option.id, value);
						}
						public void setVisible(boolean value)
						{
							super.control.setVisible(value);
						}
						public void setEnabled(boolean value)
						{
							super.control.setEnabled(value);
						}
					}
					public static class TICaseFolderYesNoEnumeration implements java.io.Serializable
					{
						private static final long serialVersionUID = 1L;
						public static TICaseFolderYesNoEnumeration None = new TICaseFolderYesNoEnumeration(-1);
						public static TICaseFolderYesNoEnumeration rdoTINo = new TICaseFolderYesNoEnumeration(0);
						public static TICaseFolderYesNoEnumeration rdoTIYes = new TICaseFolderYesNoEnumeration(1);
						private TICaseFolderYesNoEnumeration(int id)
						{
							this.id = id;
						}
						public boolean equals(Object o)
						{
							return this.id == ((TICaseFolderYesNoEnumeration)o).id;
						}
						private int id;
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 132, 232, 184, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ims.framework.FormUiLogic m_ccInConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper52.getSize(), instance1, startTabIndex.intValue() + 14, skipContextValidation);
						//ims.framework.Control m_ccInConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(132), new Integer(232), new Integer(184), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 14), m_ccInConsultantForm, instance1 } );
						ims.framework.Control m_ccInConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1050),  new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 14), m_ccInConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccInConsultantControl);
						Menu[] menus1 = m_ccInConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 280, 312, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Update Casefolder Location", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 324, 256, 110, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Est. Discharge Date :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 324, 232, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Ward Type:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 280, 109, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Transfer Date/Time :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 56, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Specialty :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 65, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Consultant :", new Integer(0), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 352, 312, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 1040), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 444, 256, 116, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 132, 280, 136, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 132, 256, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbCCOInSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbCCOInSpecialtyTemp);
						cmbCCOInSpecialtyComboBox cmbCCOInSpecialty = (cmbCCOInSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOInSpecialtyComboBox.class, m_cmbCCOInSpecialtyTemp);
						super.addComboBox(cmbCCOInSpecialty);
						RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 444, 232, 196, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ComboBox m_cmbWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbWardTypeTemp);
						cmbWardTypeComboBox cmbWardType = (cmbWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardTypeComboBox.class, m_cmbWardTypeTemp);
						super.addComboBox(cmbWardType);
						RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 132, 256, 168, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ComboBox m_cmbInSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInSpecialtyTemp);
						cmbInSpecialtyComboBox cmbInSpecialty = (cmbInSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInSpecialtyComboBox.class, m_cmbInSpecialtyTemp);
						super.addComboBox(cmbInSpecialty);
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 324, 280, 236, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Allocate Source Bed For Cleaning", Boolean.FALSE, null}));
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 648, 206, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdTransferInTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdTransferInTemp);
						grdTransferInGrid grdTransferIn = (grdTransferInGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTransferInGrid.class, m_grdTransferInTemp);
						grdTransferIn.addStringColumn("Patient Name", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Current Ward", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Specialty", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Consultant", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTransferIn.addStringColumn("Request Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdTransferIn);
				
						// RadioButton Controls
						RadioButton tmpTICaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
						super.addControl(tmpTICaseFolderYesNo);
						TICaseFolderYesNoRadioButton TICaseFolderYesNo = (TICaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(TICaseFolderYesNoRadioButton.class, tmpTICaseFolderYesNo);
						TICaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
						super.addRadioButton(TICaseFolderYesNo);
					}
		
					public ims.core.forms.mosquery.IComponent ccInConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccInConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccInConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccInConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccInConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccInConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblTICaseComment()
					{
						return (Label)super.getControl(1);
					}
					public Label lblTIUpdateCasefolder()
					{
						return (Label)super.getControl(2);
					}
					public Label lbl1()
					{
						return (Label)super.getControl(3);
					}
					public Label lbl2()
					{
						return (Label)super.getControl(4);
					}
					public Label lbl5()
					{
						return (Label)super.getControl(5);
					}
					public Label lbl9()
					{
						return (Label)super.getControl(6);
					}
					public Label lbl10()
					{
						return (Label)super.getControl(7);
					}
					public TextBox txtTICaseComment()
					{
						return (TextBox)super.getControl(8);
					}
					public DateControl dteDischarge()
					{
						return (DateControl)super.getControl(9);
					}
					public DateTimeControl dtimTransfer()
					{
						return (DateTimeControl)super.getControl(10);
					}
					public cmbCCOInSpecialtyComboBox cmbCCOInSpecialty()
					{
						return (cmbCCOInSpecialtyComboBox)super.getComboBox(0);
					}
					public cmbWardTypeComboBox cmbWardType()
					{
						return (cmbWardTypeComboBox)super.getComboBox(1);
					}
					public cmbInSpecialtyComboBox cmbInSpecialty()
					{
						return (cmbInSpecialtyComboBox)super.getComboBox(2);
					}
					public CheckBox chkAllocateSourceBed()
					{
						return (CheckBox)super.getControl(14);
					}
					public grdTransferInGrid grdTransferIn()
					{
						return (grdTransferInGrid)super.getGrid(0);
					}
					public TICaseFolderYesNoRadioButton TICaseFolderYesNo()
					{
						return (TICaseFolderYesNoRadioButton)super.getRadioButton(0);
					}
				}
				public static class tabOutContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbCCOOutSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutTransferComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbOutHospitalComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 440, 176, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ims.framework.FormUiLogic m_ccOutConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper68.getSize(), instance1, startTabIndex.intValue() + 1052, skipContextValidation);
						//ims.framework.Control m_ccOutConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(440), new Integer(176), new Integer(224), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1052), m_ccOutConsultantForm, instance1 } );
						ims.framework.Control m_ccOutConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1068),  new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1052), m_ccOutConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccOutConsultantControl);
						Menu[] menus1 = m_ccOutConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 208, 304, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Logged In MOS>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 16, 304, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer By :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 336, 178, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 336, 202, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Requested Date/Time :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 336, 24, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hospital : ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 336, 88, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Destination Ward : ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 336, 154, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward Type:", new Integer(1), null, new Integer(0)}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 208, 270, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 2062), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 440, 200, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbCCOOutSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 2058), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbCCOOutSpecialtyTemp);
						cmbCCOOutSpecialtyComboBox cmbCCOOutSpecialty = (cmbCCOOutSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOOutSpecialtyComboBox.class, m_cmbCCOOutSpecialtyTemp);
						super.addComboBox(cmbCCOOutSpecialty);
						RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 440, 200, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbOutSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 2055), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbOutSpecialtyTemp);
						cmbOutSpecialtyComboBox cmbOutSpecialty = (cmbOutSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutSpecialtyComboBox.class, m_cmbOutSpecialtyTemp);
						super.addComboBox(cmbOutSpecialty);
						RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 440, 86, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbOutTransferTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 1046), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutTransferTemp);
						cmbOutTransferComboBox cmbOutTransfer = (cmbOutTransferComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutTransferComboBox.class, m_cmbOutTransferTemp);
						super.addComboBox(cmbOutTransfer);
						RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 440, 152, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						ComboBox m_cmbOutWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 1049), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutWardTypeTemp);
						cmbOutWardTypeComboBox cmbOutWardType = (cmbOutWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutWardTypeComboBox.class, m_cmbOutWardTypeTemp);
						super.addComboBox(cmbOutWardType);
						RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 440, 22, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbOutHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbOutHospitalTemp);
						cmbOutHospitalComboBox cmbOutHospital = (cmbOutHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutHospitalComboBox.class, m_cmbOutHospitalTemp);
						super.addComboBox(cmbOutHospital);
				
						// HTML Viewer Controls
						RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 64, 88, 240, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
						RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 64, 24, 240, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public ims.core.forms.mosquery.IComponent ccOutConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccOutConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccOutConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccOutConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccOutConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccOutConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblLoggedInHcp()
					{
						return (Label)super.getControl(1);
					}
					public Label lbl22()
					{
						return (Label)super.getControl(5);
					}
					public DateTimeControl dtimOutTransfer()
					{
						return (DateTimeControl)super.getControl(11);
					}
					public cmbCCOOutSpecialtyComboBox cmbCCOOutSpecialty()
					{
						return (cmbCCOOutSpecialtyComboBox)super.getComboBox(0);
					}
					public cmbOutSpecialtyComboBox cmbOutSpecialty()
					{
						return (cmbOutSpecialtyComboBox)super.getComboBox(1);
					}
					public cmbOutTransferComboBox cmbOutTransfer()
					{
						return (cmbOutTransferComboBox)super.getComboBox(2);
					}
					public cmbOutWardTypeComboBox cmbOutWardType()
					{
						return (cmbOutWardTypeComboBox)super.getComboBox(3);
					}
					public cmbOutHospitalComboBox cmbOutHospital()
					{
						return (cmbOutHospitalComboBox)super.getComboBox(4);
					}
					public HTMLViewer htmWard()
					{
						return (HTMLViewer)super.getControl(17);
					}
					public HTMLViewer htmHospital()
					{
						return (HTMLViewer)super.getControl(18);
					}
				}
				public static class tabConsultantContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbCCOConsultantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PASSpecialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PASSpecialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PASSpecialty getValue()
						{
							return (ims.core.vo.lookups.PASSpecialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PASSpecialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbConsultantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 280, 99, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ims.framework.FormUiLogic m_ccConsultantAcceptingForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper87.getSize(), instance1, startTabIndex.intValue() + 2065, skipContextValidation);
						//ims.framework.Control m_ccConsultantAcceptingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(280), new Integer(99), new Integer(224), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2065), m_ccConsultantAcceptingForm, instance1 } );
						ims.framework.Control m_ccConsultantAcceptingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1088),  new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2065), m_ccConsultantAcceptingForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccConsultantAcceptingControl);
						Menu[] menus1 = m_ccConsultantAcceptingForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 280, 64, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Consultant>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 149, 64, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current Consultant :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 131, 178, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Transfer :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 206, 139, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 136, 101, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Accepting Consultant :", new Integer(1), null, new Integer(0)}));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 280, 176, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 3075), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 280, 137, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbCCOConsultantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 3071), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbCCOConsultantSpecialtyTemp);
						cmbCCOConsultantSpecialtyComboBox cmbCCOConsultantSpecialty = (cmbCCOConsultantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCCOConsultantSpecialtyComboBox.class, m_cmbCCOConsultantSpecialtyTemp);
						super.addComboBox(cmbCCOConsultantSpecialty);
						RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 280, 137, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbConsultantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 3068), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbConsultantSpecialtyTemp);
						cmbConsultantSpecialtyComboBox cmbConsultantSpecialty = (cmbConsultantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbConsultantSpecialtyComboBox.class, m_cmbConsultantSpecialtyTemp);
						super.addComboBox(cmbConsultantSpecialty);
					}
		
					public ims.core.forms.mosquery.IComponent ccConsultantAccepting()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccConsultantAcceptingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccConsultantAcceptingVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccConsultantAcceptingVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccConsultantAcceptingEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccConsultantAcceptingEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblCurrentCons()
					{
						return (Label)super.getControl(1);
					}
					public Label lbl6()
					{
						return (Label)super.getControl(4);
					}
					public DateTimeControl dtimConsultantTransfer()
					{
						return (DateTimeControl)super.getControl(6);
					}
					public cmbCCOConsultantSpecialtyComboBox cmbCCOConsultantSpecialty()
					{
						return (cmbCCOConsultantSpecialtyComboBox)super.getComboBox(0);
					}
					public cmbConsultantSpecialtyComboBox cmbConsultantSpecialty()
					{
						return (cmbConsultantSpecialtyComboBox)super.getComboBox(1);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 368, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabIn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"In", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabInContainer m_tabInContainer = (tabInContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInContainer.class, m_tabIn, factory);
					super.addContainer(m_tabIn, m_tabInContainer);
					ims.framework.utils.SizeInfo m_tabInDesignSize = new ims.framework.utils.SizeInfo(672, 368);
					ims.framework.utils.SizeInfo m_tabInRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper96.getWidth(), anchoringHelper96.getHeight());
					m_tabInContainer.setContext(form, appForm, m_tabIn, loader, form_images_local, startControlID, m_tabInDesignSize, m_tabInRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 368, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabOut = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Out", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabOutContainer m_tabOutContainer = (tabOutContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutContainer.class, m_tabOut, factory);
					super.addContainer(m_tabOut, m_tabOutContainer);
					ims.framework.utils.SizeInfo m_tabOutDesignSize = new ims.framework.utils.SizeInfo(672, 368);
					ims.framework.utils.SizeInfo m_tabOutRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper97.getWidth(), anchoringHelper97.getHeight());
					m_tabOutContainer.setContext(form, appForm, m_tabOut, loader, form_images_local, startControlID, m_tabOutDesignSize, m_tabOutRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 672, 368, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabConsultant = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Consultant", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabConsultantContainer m_tabConsultantContainer = (tabConsultantContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConsultantContainer.class, m_tabConsultant, factory);
					super.addContainer(m_tabConsultant, m_tabConsultantContainer);
					ims.framework.utils.SizeInfo m_tabConsultantDesignSize = new ims.framework.utils.SizeInfo(672, 368);
					ims.framework.utils.SizeInfo m_tabConsultantRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper98.getWidth(), anchoringHelper98.getHeight());
					m_tabConsultantContainer.setContext(form, appForm, m_tabConsultant, loader, form_images_local, startControlID, m_tabConsultantDesignSize, m_tabConsultantRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabIn().setVisible(false);
					tabOut().setVisible(false);
					tabConsultant().setVisible(false);
				}
				public void settabInEnabled(boolean value)
				{
					tabIn().setEnabled(value);
				}
				public void settabOutEnabled(boolean value)
				{
					tabOut().setEnabled(value);
				}
				public void settabConsultantEnabled(boolean value)
				{
					tabConsultant().setEnabled(value);
				}
				public void showtabIn()
				{
					tabOut().setVisible(false);
					tabConsultant().setVisible(false);
					tabIn().setVisible(true);
				}
				public void showtabOut()
				{
					tabIn().setVisible(false);
					tabConsultant().setVisible(false);
					tabOut().setVisible(true);
				}
				public void showtabConsultant()
				{
					tabIn().setVisible(false);
					tabOut().setVisible(false);
					tabConsultant().setVisible(true);
				}
		
				public tabInContainer tabIn()
				{
					return (tabInContainer)super.layers.get(0);
				}
				public tabOutContainer tabOut()
				{
					return (tabOutContainer)super.layers.get(1);
				}
				public tabConsultantContainer tabConsultant()
				{
					return (tabConsultantContainer)super.layers.get(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrTransferLayer m_lyrTransferLayer = (lyrTransferLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTransferLayer.class, this, factory);
				super.addLayer(m_lyrTransferLayer);
				m_lyrTransferLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 424, 400, 104, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 3077), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 544, 400, 128, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 3081), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public lyrTransferLayer lyrTransfer()
			{
				return (lyrTransferLayer)super.getLayer(0);
			}
			public Button btnCancelTransfer()
			{
				return (Button)super.getControl(3);
			}
			public Button btnTransfer()
			{
				return (Button)super.getControl(4);
			}
		}
		public static class tabDischargeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDischargeReasonForClosureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ReasonForBedClosure getValue()
				{
					return (ims.core.vo.lookups.ReasonForBedClosure)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.TreatmentDeferredReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.TreatmentDeferredReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.TreatmentDeferredReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.TreatmentDeferredReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.TreatmentDeferredReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.TreatmentDeferredReason getValue()
				{
					return (ims.core.vo.lookups.TreatmentDeferredReason)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.TreatmentDeferredReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDischargeDestinationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
				{
					return super.control.removeRow(value);
				}
				public ims.coe.vo.lookups.DischargeDestination getValue()
				{
					return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
				}
				public void setValue(ims.coe.vo.lookups.DischargeDestination value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMethodDischargeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MethodOfDischarge value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MethodOfDischarge getValue()
				{
					return (ims.core.vo.lookups.MethodOfDischarge)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MethodOfDischarge value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class grpTreatmentPostponedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 392, 176, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper101.getX(), anchoringHelper101.getY(), anchoringHelper101.getWidth(), "No", startTabIndex.intValue() + 3100);
					RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 320, 176, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper102.getX(), anchoringHelper102.getY(), anchoringHelper102.getWidth(), "Yes", startTabIndex.intValue() + 3098);
				}
				public void setText(grpTreatmentPostponedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpTreatmentPostponedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpTreatmentPostponedEnumeration.None;
						case 0: return grpTreatmentPostponedEnumeration.rdoNoTreat;
						case 1: return grpTreatmentPostponedEnumeration.rdoYesTreat;
					}
					return null;
				}
				public void setValue(grpTreatmentPostponedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpTreatmentPostponedEnumeration.None.id);
				}
				public boolean isEnabled(grpTreatmentPostponedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpTreatmentPostponedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpTreatmentPostponedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpTreatmentPostponedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpTreatmentPostponedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpTreatmentPostponedEnumeration None = new grpTreatmentPostponedEnumeration(-1);
				public static grpTreatmentPostponedEnumeration rdoNoTreat = new grpTreatmentPostponedEnumeration(0);
				public static grpTreatmentPostponedEnumeration rdoYesTreat = new grpTreatmentPostponedEnumeration(1);
				private grpTreatmentPostponedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpTreatmentPostponedEnumeration)o).id;
				}
				private int id;
			}
		
			public static class grp18StoppedRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 392, 288, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper103.getX(), anchoringHelper103.getY(), anchoringHelper103.getWidth(), "No", startTabIndex.intValue() + 3110);
					RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 320, 288, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper104.getX(), anchoringHelper104.getY(), anchoringHelper104.getWidth(), "Yes", startTabIndex.intValue() + 3108);
				}
				public void setText(grp18StoppedEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grp18StoppedEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grp18StoppedEnumeration.None;
						case 0: return grp18StoppedEnumeration.rdoNoStopped;
						case 1: return grp18StoppedEnumeration.rdoYesStopped;
					}
					return null;
				}
				public void setValue(grp18StoppedEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grp18StoppedEnumeration.None.id);
				}
				public boolean isEnabled(grp18StoppedEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grp18StoppedEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grp18StoppedEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grp18StoppedEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grp18StoppedEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grp18StoppedEnumeration None = new grp18StoppedEnumeration(-1);
				public static grp18StoppedEnumeration rdoNoStopped = new grp18StoppedEnumeration(0);
				public static grp18StoppedEnumeration rdoYesStopped = new grp18StoppedEnumeration(1);
				private grp18StoppedEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grp18StoppedEnumeration)o).id;
				}
				private int id;
			}
		
			public static class grp18RunningRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 392, 248, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper105.getX(), anchoringHelper105.getY(), anchoringHelper105.getWidth(), "No", startTabIndex.intValue() + 3106);
					RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 320, 248, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper106.getX(), anchoringHelper106.getY(), anchoringHelper106.getWidth(), "Yes", startTabIndex.intValue() + 3104);
				}
				public void setText(grp18RunningEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grp18RunningEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grp18RunningEnumeration.None;
						case 0: return grp18RunningEnumeration.rdoNoRunning;
						case 1: return grp18RunningEnumeration.rdoYesRunning;
					}
					return null;
				}
				public void setValue(grp18RunningEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grp18RunningEnumeration.None.id);
				}
				public boolean isEnabled(grp18RunningEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grp18RunningEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grp18RunningEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grp18RunningEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grp18RunningEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grp18RunningEnumeration None = new grp18RunningEnumeration(-1);
				public static grp18RunningEnumeration rdoNoRunning = new grp18RunningEnumeration(0);
				public static grp18RunningEnumeration rdoYesRunning = new grp18RunningEnumeration(1);
				private grp18RunningEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grp18RunningEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 104, 378, 202, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Re-opening  Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 104, 346, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Closure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 104, 272, 208, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "18 week clock stopped on Admission\nfor the patient, is this correct?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 104, 240, 184, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "18 week clock is still running for\nthe patient, is this correct?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 104, 208, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 104, 176, 151, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Was Treatment Deferred?", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Death :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 104, 144, 172, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Actual Discharge Date/Time :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 104, 80, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 104, 48, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Discharge :", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 419, 416, 136, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 3119), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "VTE Risk Assessment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 560, 416, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 3123), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 424, 288, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 424, 248, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 424, 176, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper122 = new RuntimeAnchoring(designSize, runtimeSize, 320, 376, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper122.getX()), new Integer(anchoringHelper122.getY()), new Integer(anchoringHelper122.getWidth()), new Integer(anchoringHelper122.getHeight()), new Integer(startTabIndex.intValue() + 3116), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper123 = new RuntimeAnchoring(designSize, runtimeSize, 320, 112, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper123.getX()), new Integer(anchoringHelper123.getY()), new Integer(anchoringHelper123.getWidth()), new Integer(anchoringHelper123.getHeight()), new Integer(startTabIndex.intValue() + 3094), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper124 = new RuntimeAnchoring(designSize, runtimeSize, 320, 144, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper124.getX()), new Integer(anchoringHelper124.getY()), new Integer(anchoringHelper124.getWidth()), new Integer(anchoringHelper124.getHeight()), new Integer(startTabIndex.intValue() + 3096), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper125 = new RuntimeAnchoring(designSize, runtimeSize, 320, 344, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbDischargeReasonForClosureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper125.getX()), new Integer(anchoringHelper125.getY()), new Integer(anchoringHelper125.getWidth()), new Integer(anchoringHelper125.getHeight()), new Integer(startTabIndex.intValue() + 3114), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeReasonForClosureTemp);
				cmbDischargeReasonForClosureComboBox cmbDischargeReasonForClosure = (cmbDischargeReasonForClosureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeReasonForClosureComboBox.class, m_cmbDischargeReasonForClosureTemp);
				super.addComboBox(cmbDischargeReasonForClosure);
				RuntimeAnchoring anchoringHelper126 = new RuntimeAnchoring(designSize, runtimeSize, 320, 208, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper126.getX()), new Integer(anchoringHelper126.getY()), new Integer(anchoringHelper126.getWidth()), new Integer(anchoringHelper126.getHeight()), new Integer(startTabIndex.intValue() + 3102), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbReasonTemp);
				cmbReasonComboBox cmbReason = (cmbReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonComboBox.class, m_cmbReasonTemp);
				super.addComboBox(cmbReason);
				RuntimeAnchoring anchoringHelper127 = new RuntimeAnchoring(designSize, runtimeSize, 320, 80, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDischargeDestinationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper127.getX()), new Integer(anchoringHelper127.getY()), new Integer(anchoringHelper127.getWidth()), new Integer(anchoringHelper127.getHeight()), new Integer(startTabIndex.intValue() + 3091), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeDestinationTemp);
				cmbDischargeDestinationComboBox cmbDischargeDestination = (cmbDischargeDestinationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeDestinationComboBox.class, m_cmbDischargeDestinationTemp);
				super.addComboBox(cmbDischargeDestination);
				RuntimeAnchoring anchoringHelper128 = new RuntimeAnchoring(designSize, runtimeSize, 320, 48, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbMethodDischargeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1123), new Integer(anchoringHelper128.getX()), new Integer(anchoringHelper128.getY()), new Integer(anchoringHelper128.getWidth()), new Integer(anchoringHelper128.getHeight()), new Integer(startTabIndex.intValue() + 3087), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbMethodDischargeTemp);
				cmbMethodDischargeComboBox cmbMethodDischarge = (cmbMethodDischargeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodDischargeComboBox.class, m_cmbMethodDischargeTemp);
				super.addComboBox(cmbMethodDischarge);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper129 = new RuntimeAnchoring(designSize, runtimeSize, 320, 312, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1124), new Integer(anchoringHelper129.getX()), new Integer(anchoringHelper129.getY()), new Integer(anchoringHelper129.getWidth()), new Integer(anchoringHelper129.getHeight()), new Integer(startTabIndex.intValue() + 3112), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Allocate Bed For Cleaning", Boolean.TRUE, null}));
		
				// RadioButton Controls
				RadioButton tmpgrpTreatmentPostponed = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1125), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpTreatmentPostponed);
				grpTreatmentPostponedRadioButton grpTreatmentPostponed = (grpTreatmentPostponedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpTreatmentPostponedRadioButton.class, tmpgrpTreatmentPostponed);
				grpTreatmentPostponed.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpTreatmentPostponed);
				RadioButton tmpgrp18Stopped = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1126), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpgrp18Stopped);
				grp18StoppedRadioButton grp18Stopped = (grp18StoppedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grp18StoppedRadioButton.class, tmpgrp18Stopped);
				grp18Stopped.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grp18Stopped);
				RadioButton tmpgrp18Running = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1127), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpgrp18Running);
				grp18RunningRadioButton grp18Running = (grp18RunningRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grp18RunningRadioButton.class, tmpgrp18Running);
				grp18Running.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grp18Running);
			}

			public Label lblEstimatedReopening()
			{
				return (Label)super.getControl(0);
			}
			public Label lblReasonForClosure()
			{
				return (Label)super.getControl(1);
			}
			public Label lblStopped()
			{
				return (Label)super.getControl(2);
			}
			public Label lblRunning()
			{
				return (Label)super.getControl(3);
			}
			public Label lblReason()
			{
				return (Label)super.getControl(4);
			}
			public Label lblTreatment()
			{
				return (Label)super.getControl(5);
			}
			public Label lblDischargeDod()
			{
				return (Label)super.getControl(6);
			}
			public Label lblDischargeDateTime()
			{
				return (Label)super.getControl(7);
			}
			public Button btnVTERiskAssesssment()
			{
				return (Button)super.getControl(10);
			}
			public Button btnDischarge()
			{
				return (Button)super.getControl(11);
			}
			public TextBox txt18WeekStop()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txt18WeekRun()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtTreatDeferr()
			{
				return (TextBox)super.getControl(14);
			}
			public DateTimeControl dtimDischargeEstimatedReopening()
			{
				return (DateTimeControl)super.getControl(15);
			}
			public DateTimeControl dtimDod()
			{
				return (DateTimeControl)super.getControl(16);
			}
			public DateTimeControl dtimDischarge()
			{
				return (DateTimeControl)super.getControl(17);
			}
			public cmbDischargeReasonForClosureComboBox cmbDischargeReasonForClosure()
			{
				return (cmbDischargeReasonForClosureComboBox)super.getComboBox(0);
			}
			public cmbReasonComboBox cmbReason()
			{
				return (cmbReasonComboBox)super.getComboBox(1);
			}
			public cmbDischargeDestinationComboBox cmbDischargeDestination()
			{
				return (cmbDischargeDestinationComboBox)super.getComboBox(2);
			}
			public cmbMethodDischargeComboBox cmbMethodDischarge()
			{
				return (cmbMethodDischargeComboBox)super.getComboBox(3);
			}
			public CheckBox chkAllocateForCleaning()
			{
				return (CheckBox)super.getControl(22);
			}
			public grpTreatmentPostponedRadioButton grpTreatmentPostponed()
			{
				return (grpTreatmentPostponedRadioButton)super.getRadioButton(0);
			}
			public grp18StoppedRadioButton grp18Stopped()
			{
				return (grp18StoppedRadioButton)super.getRadioButton(1);
			}
			public grp18RunningRadioButton grp18Running()
			{
				return (grp18RunningRadioButton)super.getRadioButton(2);
			}
		}
		public static class tabAdmissionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper130 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 688, 408, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAdmitForm = loader.loadComponent(102291, appForm, startControlID * 10 + 4000, anchoringHelper130.getSize(), instance1, startTabIndex.intValue() + 3126, skipContextValidation);
				//ims.framework.Control m_ccAdmitControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1128), new Integer(8), new Integer(8), new Integer(688), new Integer(408), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3126), m_ccAdmitForm, instance1 } );
				ims.framework.Control m_ccAdmitControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1129),  new Integer(anchoringHelper130.getX()), new Integer(anchoringHelper130.getY()), new Integer(anchoringHelper130.getWidth()), new Integer(anchoringHelper130.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3126), m_ccAdmitForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAdmitControl);
				Menu[] menus1 = m_ccAdmitForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Button Controls
				RuntimeAnchoring anchoringHelper131 = new RuntimeAnchoring(designSize, runtimeSize, 512, 416, 152, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1130), new Integer(anchoringHelper131.getX()), new Integer(anchoringHelper131.getY()), new Integer(anchoringHelper131.getWidth()), new Integer(anchoringHelper131.getHeight()), new Integer(startTabIndex.intValue() + 4132), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Admit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public ims.core.forms.bedadmissioncomponent.IComponent ccAdmit()
			{
				return (ims.core.forms.bedadmissioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAdmitValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAdmitVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAdmitVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAdmitEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAdmitEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Button btnAdmit()
			{
				return (Button)super.getControl(1);
			}
		}
		public static class tabHomeLeaveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper132 = new RuntimeAnchoring(designSize, runtimeSize, 32, 152, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1131), new Integer(anchoringHelper132.getX()), new Integer(anchoringHelper132.getY()), new Integer(anchoringHelper132.getWidth()), new Integer(anchoringHelper132.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Time of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper133 = new RuntimeAnchoring(designSize, runtimeSize, 32, 120, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1132), new Integer(anchoringHelper133.getX()), new Integer(anchoringHelper133.getY()), new Integer(anchoringHelper133.getWidth()), new Integer(anchoringHelper133.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Date of Return:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper134 = new RuntimeAnchoring(designSize, runtimeSize, 32, 64, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1133), new Integer(anchoringHelper134.getX()), new Integer(anchoringHelper134.getY()), new Integer(anchoringHelper134.getWidth()), new Integer(anchoringHelper134.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time on Home Leave:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper135 = new RuntimeAnchoring(designSize, runtimeSize, 32, 32, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1134), new Integer(anchoringHelper135.getX()), new Integer(anchoringHelper135.getY()), new Integer(anchoringHelper135.getWidth()), new Integer(anchoringHelper135.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date on Home Leave:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper136 = new RuntimeAnchoring(designSize, runtimeSize, 560, 400, 104, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1135), new Integer(anchoringHelper136.getX()), new Integer(anchoringHelper136.getY()), new Integer(anchoringHelper136.getWidth()), new Integer(anchoringHelper136.getHeight()), new Integer(startTabIndex.intValue() + 5218), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, " Home Leave", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper137 = new RuntimeAnchoring(designSize, runtimeSize, 200, 120, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1136), new Integer(anchoringHelper137.getX()), new Integer(anchoringHelper137.getY()), new Integer(anchoringHelper137.getWidth()), new Integer(anchoringHelper137.getHeight()), new Integer(startTabIndex.intValue() + 5210), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper138 = new RuntimeAnchoring(designSize, runtimeSize, 200, 32, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1137), new Integer(anchoringHelper138.getX()), new Integer(anchoringHelper138.getY()), new Integer(anchoringHelper138.getWidth()), new Integer(anchoringHelper138.getHeight()), new Integer(startTabIndex.intValue() + 5202), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper139 = new RuntimeAnchoring(designSize, runtimeSize, 200, 152, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1138), new Integer(anchoringHelper139.getX()), new Integer(anchoringHelper139.getY()), new Integer(anchoringHelper139.getWidth()), new Integer(anchoringHelper139.getHeight()), new Integer(startTabIndex.intValue() + 5214), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				RuntimeAnchoring anchoringHelper140 = new RuntimeAnchoring(designSize, runtimeSize, 200, 64, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1139), new Integer(anchoringHelper140.getX()), new Integer(anchoringHelper140.getY()), new Integer(anchoringHelper140.getWidth()), new Integer(anchoringHelper140.getHeight()), new Integer(startTabIndex.intValue() + 5206), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));
			}

			public Button btnHome()
			{
				return (Button)super.getControl(4);
			}
			public DateControl dteHLReturnDate()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteHLDate()
			{
				return (DateControl)super.getControl(6);
			}
			public TimeControl timHLReturnTime()
			{
				return (TimeControl)super.getControl(7);
			}
			public TimeControl timHLTime()
			{
				return (TimeControl)super.getControl(8);
			}
		}
		public static class tabCloseBedContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbLastChangedUserComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCloseReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.ReasonForBedClosure value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.ReasonForBedClosure getValue()
				{
					return (ims.core.vo.lookups.ReasonForBedClosure)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.ReasonForBedClosure value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbUserComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper141 = new RuntimeAnchoring(designSize, runtimeSize, 96, 104, 179, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1140), new Integer(anchoringHelper141.getX()), new Integer(anchoringHelper141.getY()), new Integer(anchoringHelper141.getWidth()), new Integer(anchoringHelper141.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Status Last Changed User:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper142 = new RuntimeAnchoring(designSize, runtimeSize, 96, 72, 215, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1141), new Integer(anchoringHelper142.getX()), new Integer(anchoringHelper142.getY()), new Integer(anchoringHelper142.getWidth()), new Integer(anchoringHelper142.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed Status Last Changed Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper143 = new RuntimeAnchoring(designSize, runtimeSize, 96, 264, 199, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1142), new Integer(anchoringHelper143.getX()), new Integer(anchoringHelper143.getY()), new Integer(anchoringHelper143.getWidth()), new Integer(anchoringHelper143.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Re-opening Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper144 = new RuntimeAnchoring(designSize, runtimeSize, 96, 232, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1143), new Integer(anchoringHelper144.getX()), new Integer(anchoringHelper144.getY()), new Integer(anchoringHelper144.getWidth()), new Integer(anchoringHelper144.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Closure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper145 = new RuntimeAnchoring(designSize, runtimeSize, 96, 200, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1144), new Integer(anchoringHelper145.getX()), new Integer(anchoringHelper145.getY()), new Integer(anchoringHelper145.getWidth()), new Integer(anchoringHelper145.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Closure Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper146 = new RuntimeAnchoring(designSize, runtimeSize, 96, 168, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1145), new Integer(anchoringHelper146.getX()), new Integer(anchoringHelper146.getY()), new Integer(anchoringHelper146.getWidth()), new Integer(anchoringHelper146.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Closed By:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper147 = new RuntimeAnchoring(designSize, runtimeSize, 272, 400, 152, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1146), new Integer(anchoringHelper147.getX()), new Integer(anchoringHelper147.getY()), new Integer(anchoringHelper147.getWidth()), new Integer(anchoringHelper147.getHeight()), new Integer(startTabIndex.intValue() + 4149), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requires Cleaning", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper148 = new RuntimeAnchoring(designSize, runtimeSize, 24, 400, 104, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1147), new Integer(anchoringHelper148.getX()), new Integer(anchoringHelper148.getY()), new Integer(anchoringHelper148.getWidth()), new Integer(anchoringHelper148.getHeight()), new Integer(startTabIndex.intValue() + 4148), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Re-Open", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper149 = new RuntimeAnchoring(designSize, runtimeSize, 560, 400, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1148), new Integer(anchoringHelper149.getX()), new Integer(anchoringHelper149.getY()), new Integer(anchoringHelper149.getWidth()), new Integer(anchoringHelper149.getHeight()), new Integer(startTabIndex.intValue() + 4150), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close Bed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper150 = new RuntimeAnchoring(designSize, runtimeSize, 312, 72, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1149), new Integer(anchoringHelper150.getX()), new Integer(anchoringHelper150.getY()), new Integer(anchoringHelper150.getWidth()), new Integer(anchoringHelper150.getHeight()), new Integer(startTabIndex.intValue() + 4135), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper151 = new RuntimeAnchoring(designSize, runtimeSize, 312, 264, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1150), new Integer(anchoringHelper151.getX()), new Integer(anchoringHelper151.getY()), new Integer(anchoringHelper151.getWidth()), new Integer(anchoringHelper151.getHeight()), new Integer(startTabIndex.intValue() + 4146), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper152 = new RuntimeAnchoring(designSize, runtimeSize, 312, 200, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1151), new Integer(anchoringHelper152.getX()), new Integer(anchoringHelper152.getY()), new Integer(anchoringHelper152.getWidth()), new Integer(anchoringHelper152.getHeight()), new Integer(startTabIndex.intValue() + 4144), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper153 = new RuntimeAnchoring(designSize, runtimeSize, 312, 104, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbLastChangedUserTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1152), new Integer(anchoringHelper153.getX()), new Integer(anchoringHelper153.getY()), new Integer(anchoringHelper153.getWidth()), new Integer(anchoringHelper153.getHeight()), new Integer(startTabIndex.intValue() + 4140), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLastChangedUserTemp);
				cmbLastChangedUserComboBox cmbLastChangedUser = (cmbLastChangedUserComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLastChangedUserComboBox.class, m_cmbLastChangedUserTemp);
				super.addComboBox(cmbLastChangedUser);
				RuntimeAnchoring anchoringHelper154 = new RuntimeAnchoring(designSize, runtimeSize, 312, 232, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbCloseReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1153), new Integer(anchoringHelper154.getX()), new Integer(anchoringHelper154.getY()), new Integer(anchoringHelper154.getWidth()), new Integer(anchoringHelper154.getHeight()), new Integer(startTabIndex.intValue() + 4145), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbCloseReasonTemp);
				cmbCloseReasonComboBox cmbCloseReason = (cmbCloseReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCloseReasonComboBox.class, m_cmbCloseReasonTemp);
				super.addComboBox(cmbCloseReason);
				RuntimeAnchoring anchoringHelper155 = new RuntimeAnchoring(designSize, runtimeSize, 312, 168, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbUserTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1154), new Integer(anchoringHelper155.getX()), new Integer(anchoringHelper155.getY()), new Integer(anchoringHelper155.getWidth()), new Integer(anchoringHelper155.getHeight()), new Integer(startTabIndex.intValue() + 4142), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbUserTemp);
				cmbUserComboBox cmbUser = (cmbUserComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUserComboBox.class, m_cmbUserTemp);
				super.addComboBox(cmbUser);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper156 = new RuntimeAnchoring(designSize, runtimeSize, 96, 144, 416, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1155), new Integer(anchoringHelper156.getX()), new Integer(anchoringHelper156.getY()), new Integer(anchoringHelper156.getWidth()), new Integer(anchoringHelper156.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public Label lbl32()
			{
				return (Label)super.getControl(0);
			}
			public Label lbl34()
			{
				return (Label)super.getControl(1);
			}
			public Label lblEstReOpenDT()
			{
				return (Label)super.getControl(2);
			}
			public Label lbReason()
			{
				return (Label)super.getControl(3);
			}
			public Label lblCloseDT()
			{
				return (Label)super.getControl(4);
			}
			public Label lblClosedBy()
			{
				return (Label)super.getControl(5);
			}
			public Button btnAssign()
			{
				return (Button)super.getControl(6);
			}
			public Button btnReOpen()
			{
				return (Button)super.getControl(7);
			}
			public Button btnClose()
			{
				return (Button)super.getControl(8);
			}
			public DateTimeControl dtimLastChanged()
			{
				return (DateTimeControl)super.getControl(9);
			}
			public DateTimeControl dtimEstReOpen()
			{
				return (DateTimeControl)super.getControl(10);
			}
			public DateTimeControl dtimClose()
			{
				return (DateTimeControl)super.getControl(11);
			}
			public cmbLastChangedUserComboBox cmbLastChangedUser()
			{
				return (cmbLastChangedUserComboBox)super.getComboBox(0);
			}
			public cmbCloseReasonComboBox cmbCloseReason()
			{
				return (cmbCloseReasonComboBox)super.getComboBox(1);
			}
			public cmbUserComboBox cmbUser()
			{
				return (cmbUserComboBox)super.getComboBox(2);
			}
		}
		public static class tabEstimatedDischargeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper157 = new RuntimeAnchoring(designSize, runtimeSize, 80, 146, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1156), new Integer(anchoringHelper157.getX()), new Integer(anchoringHelper157.getY()), new Integer(anchoringHelper157.getWidth()), new Integer(anchoringHelper157.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Ready Date :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper158 = new RuntimeAnchoring(designSize, runtimeSize, 80, 50, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1157), new Integer(anchoringHelper158.getX()), new Integer(anchoringHelper158.getY()), new Integer(anchoringHelper158.getWidth()), new Integer(anchoringHelper158.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Revised Stay:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper159 = new RuntimeAnchoring(designSize, runtimeSize, 80, 80, 159, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1158), new Integer(anchoringHelper159.getX()), new Integer(anchoringHelper159.getY()), new Integer(anchoringHelper159.getWidth()), new Integer(anchoringHelper159.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated Discharge Date :", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper160 = new RuntimeAnchoring(designSize, runtimeSize, 448, 400, 104, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1159), new Integer(anchoringHelper160.getX()), new Integer(anchoringHelper160.getY()), new Integer(anchoringHelper160.getWidth()), new Integer(anchoringHelper160.getHeight()), new Integer(startTabIndex.intValue() + 4160), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper161 = new RuntimeAnchoring(designSize, runtimeSize, 560, 400, 104, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1160), new Integer(anchoringHelper161.getX()), new Integer(anchoringHelper161.getY()), new Integer(anchoringHelper161.getWidth()), new Integer(anchoringHelper161.getHeight()), new Integer(startTabIndex.intValue() + 4163), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper162 = new RuntimeAnchoring(designSize, runtimeSize, 256, 144, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1161), new Integer(anchoringHelper162.getX()), new Integer(anchoringHelper162.getY()), new Integer(anchoringHelper162.getWidth()), new Integer(anchoringHelper162.getHeight()), new Integer(startTabIndex.intValue() + 4158), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper163 = new RuntimeAnchoring(designSize, runtimeSize, 256, 78, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1162), new Integer(anchoringHelper163.getX()), new Integer(anchoringHelper163.getY()), new Integer(anchoringHelper163.getWidth()), new Integer(anchoringHelper163.getHeight()), new Integer(startTabIndex.intValue() + 3120), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper164 = new RuntimeAnchoring(designSize, runtimeSize, 256, 112, 160, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1163), new Integer(anchoringHelper164.getX()), new Integer(anchoringHelper164.getY()), new Integer(anchoringHelper164.getWidth()), new Integer(anchoringHelper164.getHeight()), new Integer(startTabIndex.intValue() + 4155), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Confirm Discharge", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper165 = new RuntimeAnchoring(designSize, runtimeSize, 256, 48, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1164), new Integer(anchoringHelper165.getX()), new Integer(anchoringHelper165.getY()), new Integer(anchoringHelper165.getWidth()), new Integer(anchoringHelper165.getHeight()), new Integer(startTabIndex.intValue() + 4153), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(2)}));
			}

			public Label lblDischargeReadyDate()
			{
				return (Label)super.getControl(0);
			}
			public Label lblEstRevisedStay()
			{
				return (Label)super.getControl(1);
			}
			public Button btnClearEstimate()
			{
				return (Button)super.getControl(3);
			}
			public Button btnSaveEstDischarge()
			{
				return (Button)super.getControl(4);
			}
			public DateControl dteDischargeReady()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteEstDischarge()
			{
				return (DateControl)super.getControl(6);
			}
			public CheckBox chkConfirm()
			{
				return (CheckBox)super.getControl(7);
			}
			public IntBox intEstRevisedStay()
			{
				return (IntBox)super.getControl(8);
			}
		}
		public static class tabBedMoveContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPatientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColAgeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColAgeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColAgeOpened()
				{
					super.row.showOpened(4);
				}
				public String getColAge()
				{
					return (String)super.row.get(4);
				}
				public void setColAge(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColAgeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsRow get(int index)
				{
					return new grdPatientsRow(super.collection.get(index));
				}
				public grdPatientsRow newRow()
				{
					return new grdPatientsRow(super.collection.newRow());
				}
				public grdPatientsRow newRow(boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsRow newRowAt(int index)
				{
					return new grdPatientsRow(super.collection.newRowAt(index));
				}
				public grdPatientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsRowCollection getRows()
				{
					return new grdPatientsRowCollection(super.grid.getRows());
				}
				public grdPatientsRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColAgeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColAgeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper166 = new RuntimeAnchoring(designSize, runtimeSize, 520, 400, 144, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1165), new Integer(anchoringHelper166.getX()), new Integer(anchoringHelper166.getY()), new Integer(anchoringHelper166.getWidth()), new Integer(anchoringHelper166.getHeight()), new Integer(startTabIndex.intValue() + 4166), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer to Bed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper167 = new RuntimeAnchoring(designSize, runtimeSize, 28, 24, 640, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1166), new Integer(anchoringHelper167.getX()), new Integer(anchoringHelper167.getY()), new Integer(anchoringHelper167.getWidth()), new Integer(anchoringHelper167.getHeight()), new Integer(startTabIndex.intValue() + 4129), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsTemp);
				grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
				grdPatients.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Age", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatients);
			}

			public Button btnInternalTransfer()
			{
				return (Button)super.getControl(0);
			}
			public grdPatientsGrid grdPatients()
			{
				return (grdPatientsGrid)super.getGrid(0);
			}
		}
		public static class tabInfantsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrInfantsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInfantTransferContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbInfantSpecialtyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.Specialty value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.Specialty value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.Specialty getValue()
						{
							return (ims.core.vo.lookups.Specialty)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.Specialty value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantWardComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantWardTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.WardType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.WardType value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.WardType getValue()
						{
							return (ims.core.vo.lookups.WardType)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.WardType value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantHospitalComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.LocationLiteVo value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.LocationLiteVo value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.LocationLiteVo getValue()
						{
							return (ims.core.vo.LocationLiteVo)super.control.getValue();
						}
						public void setValue(ims.core.vo.LocationLiteVo value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper168 = new RuntimeAnchoring(designSize, runtimeSize, 376, 100, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ims.framework.FormUiLogic m_ccInfantConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 5000, anchoringHelper168.getSize(), instance1, startTabIndex.intValue() + 4174, skipContextValidation);
						//ims.framework.Control m_ccInfantConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1167), new Integer(376), new Integer(100), new Integer(216), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4174), m_ccInfantConsultantForm, instance1 } );
						ims.framework.Control m_ccInfantConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1168),  new Integer(anchoringHelper168.getX()), new Integer(anchoringHelper168.getY()), new Integer(anchoringHelper168.getWidth()), new Integer(anchoringHelper168.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4174), m_ccInfantConsultantForm, instance1, Boolean.FALSE } );
						super.addControl(m_ccInfantConsultantControl);
						Menu[] menus1 = m_ccInfantConsultantForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
				
						// Label Controls
						RuntimeAnchoring anchoringHelper169 = new RuntimeAnchoring(designSize, runtimeSize, 288, 192, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1169), new Integer(anchoringHelper169.getX()), new Integer(anchoringHelper169.getY()), new Integer(anchoringHelper169.getWidth()), new Integer(anchoringHelper169.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Logged In MOS>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper170 = new RuntimeAnchoring(designSize, runtimeSize, 96, 192, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1170), new Integer(anchoringHelper170.getX()), new Integer(anchoringHelper170.getY()), new Integer(anchoringHelper170.getWidth()), new Integer(anchoringHelper170.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer By :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper171 = new RuntimeAnchoring(designSize, runtimeSize, 120, 18, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1171), new Integer(anchoringHelper171.getX()), new Integer(anchoringHelper171.getY()), new Integer(anchoringHelper171.getWidth()), new Integer(anchoringHelper171.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Hospital>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper172 = new RuntimeAnchoring(designSize, runtimeSize, 64, 18, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1172), new Integer(anchoringHelper172.getX()), new Integer(anchoringHelper172.getY()), new Integer(anchoringHelper172.getWidth()), new Integer(anchoringHelper172.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper173 = new RuntimeAnchoring(designSize, runtimeSize, 264, 102, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1173), new Integer(anchoringHelper173.getX()), new Integer(anchoringHelper173.getY()), new Integer(anchoringHelper173.getWidth()), new Integer(anchoringHelper173.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper174 = new RuntimeAnchoring(designSize, runtimeSize, 264, 129, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1174), new Integer(anchoringHelper174.getX()), new Integer(anchoringHelper174.getY()), new Integer(anchoringHelper174.getWidth()), new Integer(anchoringHelper174.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper175 = new RuntimeAnchoring(designSize, runtimeSize, 96, 160, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1175), new Integer(anchoringHelper175.getX()), new Integer(anchoringHelper175.getY()), new Integer(anchoringHelper175.getWidth()), new Integer(anchoringHelper175.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer Requested Date/Time :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper176 = new RuntimeAnchoring(designSize, runtimeSize, 264, 18, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1176), new Integer(anchoringHelper176.getX()), new Integer(anchoringHelper176.getY()), new Integer(anchoringHelper176.getWidth()), new Integer(anchoringHelper176.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hospital : ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper177 = new RuntimeAnchoring(designSize, runtimeSize, 264, 46, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1177), new Integer(anchoringHelper177.getX()), new Integer(anchoringHelper177.getY()), new Integer(anchoringHelper177.getWidth()), new Integer(anchoringHelper177.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Destination Ward : ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper178 = new RuntimeAnchoring(designSize, runtimeSize, 120, 46, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1178), new Integer(anchoringHelper178.getX()), new Integer(anchoringHelper178.getY()), new Integer(anchoringHelper178.getWidth()), new Integer(anchoringHelper178.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<Current Ward>", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper179 = new RuntimeAnchoring(designSize, runtimeSize, 64, 46, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1179), new Integer(anchoringHelper179.getX()), new Integer(anchoringHelper179.getY()), new Integer(anchoringHelper179.getWidth()), new Integer(anchoringHelper179.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current :", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper180 = new RuntimeAnchoring(designSize, runtimeSize, 264, 74, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1180), new Integer(anchoringHelper180.getX()), new Integer(anchoringHelper180.getY()), new Integer(anchoringHelper180.getWidth()), new Integer(anchoringHelper180.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward Type:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper181 = new RuntimeAnchoring(designSize, runtimeSize, 520, 208, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1181), new Integer(anchoringHelper181.getX()), new Integer(anchoringHelper181.getY()), new Integer(anchoringHelper181.getWidth()), new Integer(anchoringHelper181.getHeight()), new Integer(startTabIndex.intValue() + 5180), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, " Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper182 = new RuntimeAnchoring(designSize, runtimeSize, 288, 160, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1182), new Integer(anchoringHelper182.getX()), new Integer(anchoringHelper182.getY()), new Integer(anchoringHelper182.getWidth()), new Integer(anchoringHelper182.getHeight()), new Integer(startTabIndex.intValue() + 5178), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper183 = new RuntimeAnchoring(designSize, runtimeSize, 376, 127, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbInfantSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1183), new Integer(anchoringHelper183.getX()), new Integer(anchoringHelper183.getY()), new Integer(anchoringHelper183.getWidth()), new Integer(anchoringHelper183.getHeight()), new Integer(startTabIndex.intValue() + 5176), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbInfantSpecialtyTemp);
						cmbInfantSpecialtyComboBox cmbInfantSpecialty = (cmbInfantSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantSpecialtyComboBox.class, m_cmbInfantSpecialtyTemp);
						super.addComboBox(cmbInfantSpecialty);
						RuntimeAnchoring anchoringHelper184 = new RuntimeAnchoring(designSize, runtimeSize, 376, 44, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1184), new Integer(anchoringHelper184.getX()), new Integer(anchoringHelper184.getY()), new Integer(anchoringHelper184.getWidth()), new Integer(anchoringHelper184.getHeight()), new Integer(startTabIndex.intValue() + 4171), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantWardTemp);
						cmbInfantWardComboBox cmbInfantWard = (cmbInfantWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantWardComboBox.class, m_cmbInfantWardTemp);
						super.addComboBox(cmbInfantWard);
						RuntimeAnchoring anchoringHelper185 = new RuntimeAnchoring(designSize, runtimeSize, 376, 72, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						ComboBox m_cmbInfantWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1185), new Integer(anchoringHelper185.getX()), new Integer(anchoringHelper185.getY()), new Integer(anchoringHelper185.getWidth()), new Integer(anchoringHelper185.getHeight()), new Integer(startTabIndex.intValue() + 4173), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantWardTypeTemp);
						cmbInfantWardTypeComboBox cmbInfantWardType = (cmbInfantWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantWardTypeComboBox.class, m_cmbInfantWardTypeTemp);
						super.addComboBox(cmbInfantWardType);
						RuntimeAnchoring anchoringHelper186 = new RuntimeAnchoring(designSize, runtimeSize, 376, 16, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1186), new Integer(anchoringHelper186.getX()), new Integer(anchoringHelper186.getY()), new Integer(anchoringHelper186.getWidth()), new Integer(anchoringHelper186.getHeight()), new Integer(startTabIndex.intValue() + 4169), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantHospitalTemp);
						cmbInfantHospitalComboBox cmbInfantHospital = (cmbInfantHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantHospitalComboBox.class, m_cmbInfantHospitalTemp);
						super.addComboBox(cmbInfantHospital);
					}
		
					public ims.core.forms.mosquery.IComponent ccInfantConsultant()
					{
						return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccInfantConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccInfantConsultantVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccInfantConsultantVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccInfantConsultantEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccInfantConsultantEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
					public Label lblInfantMos()
					{
						return (Label)super.getControl(1);
					}
					public Label lblInfantCurrentHosp()
					{
						return (Label)super.getControl(3);
					}
					public Label lbl39()
					{
						return (Label)super.getControl(6);
					}
					public Label lblInfantCurrentWard()
					{
						return (Label)super.getControl(10);
					}
					public Button btnInfantTransfer()
					{
						return (Button)super.getControl(13);
					}
					public DateTimeControl dtimInfantTransferRequest()
					{
						return (DateTimeControl)super.getControl(14);
					}
					public cmbInfantSpecialtyComboBox cmbInfantSpecialty()
					{
						return (cmbInfantSpecialtyComboBox)super.getComboBox(0);
					}
					public cmbInfantWardComboBox cmbInfantWard()
					{
						return (cmbInfantWardComboBox)super.getComboBox(1);
					}
					public cmbInfantWardTypeComboBox cmbInfantWardType()
					{
						return (cmbInfantWardTypeComboBox)super.getComboBox(2);
					}
					public cmbInfantHospitalComboBox cmbInfantHospital()
					{
						return (cmbInfantHospitalComboBox)super.getComboBox(3);
					}
				}
				public static class tabInfantDischargeContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbInfantDischargeDestComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.coe.vo.lookups.DischargeDestination value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.coe.vo.lookups.DischargeDestination value)
						{
							return super.control.removeRow(value);
						}
						public ims.coe.vo.lookups.DischargeDestination getValue()
						{
							return (ims.coe.vo.lookups.DischargeDestination)super.control.getValue();
						}
						public void setValue(ims.coe.vo.lookups.DischargeDestination value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInfantMethodDischargeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.MethodOfDischarge value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.MethodOfDischarge value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.MethodOfDischarge getValue()
						{
							return (ims.core.vo.lookups.MethodOfDischarge)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.MethodOfDischarge value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper187 = new RuntimeAnchoring(designSize, runtimeSize, 84, 96, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1187), new Integer(anchoringHelper187.getX()), new Integer(anchoringHelper187.getY()), new Integer(anchoringHelper187.getWidth()), new Integer(anchoringHelper187.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Death :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper188 = new RuntimeAnchoring(designSize, runtimeSize, 84, 128, 133, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1188), new Integer(anchoringHelper188.getX()), new Integer(anchoringHelper188.getY()), new Integer(anchoringHelper188.getWidth()), new Integer(anchoringHelper188.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date/Time :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper189 = new RuntimeAnchoring(designSize, runtimeSize, 84, 64, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1189), new Integer(anchoringHelper189.getX()), new Integer(anchoringHelper189.getY()), new Integer(anchoringHelper189.getWidth()), new Integer(anchoringHelper189.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Destination :", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper190 = new RuntimeAnchoring(designSize, runtimeSize, 84, 32, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1190), new Integer(anchoringHelper190.getX()), new Integer(anchoringHelper190.getY()), new Integer(anchoringHelper190.getWidth()), new Integer(anchoringHelper190.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Method of Discharge :", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper191 = new RuntimeAnchoring(designSize, runtimeSize, 520, 192, 104, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1191), new Integer(anchoringHelper191.getX()), new Integer(anchoringHelper191.getY()), new Integer(anchoringHelper191.getWidth()), new Integer(anchoringHelper191.getHeight()), new Integer(startTabIndex.intValue() + 5200), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Date Time Controls
						RuntimeAnchoring anchoringHelper192 = new RuntimeAnchoring(designSize, runtimeSize, 300, 96, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1192), new Integer(anchoringHelper192.getX()), new Integer(anchoringHelper192.getY()), new Integer(anchoringHelper192.getWidth()), new Integer(anchoringHelper192.getHeight()), new Integer(startTabIndex.intValue() + 5189), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper193 = new RuntimeAnchoring(designSize, runtimeSize, 300, 128, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1193), new Integer(anchoringHelper193.getX()), new Integer(anchoringHelper193.getY()), new Integer(anchoringHelper193.getWidth()), new Integer(anchoringHelper193.getHeight()), new Integer(startTabIndex.intValue() + 5195), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper194 = new RuntimeAnchoring(designSize, runtimeSize, 300, 64, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantDischargeDestTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1194), new Integer(anchoringHelper194.getX()), new Integer(anchoringHelper194.getY()), new Integer(anchoringHelper194.getWidth()), new Integer(anchoringHelper194.getHeight()), new Integer(startTabIndex.intValue() + 5186), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantDischargeDestTemp);
						cmbInfantDischargeDestComboBox cmbInfantDischargeDest = (cmbInfantDischargeDestComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantDischargeDestComboBox.class, m_cmbInfantDischargeDestTemp);
						super.addComboBox(cmbInfantDischargeDest);
						RuntimeAnchoring anchoringHelper195 = new RuntimeAnchoring(designSize, runtimeSize, 300, 32, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInfantMethodDischargeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1195), new Integer(anchoringHelper195.getX()), new Integer(anchoringHelper195.getY()), new Integer(anchoringHelper195.getWidth()), new Integer(anchoringHelper195.getHeight()), new Integer(startTabIndex.intValue() + 5184), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbInfantMethodDischargeTemp);
						cmbInfantMethodDischargeComboBox cmbInfantMethodDischarge = (cmbInfantMethodDischargeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInfantMethodDischargeComboBox.class, m_cmbInfantMethodDischargeTemp);
						super.addComboBox(cmbInfantMethodDischarge);
					}
		
					public Label lblInfantDod()
					{
						return (Label)super.getControl(0);
					}
					public Label lblInfantDischargeDateTime()
					{
						return (Label)super.getControl(1);
					}
					public Button btnInfantDischarge()
					{
						return (Button)super.getControl(4);
					}
					public DateTimeControl dtimInfantDod()
					{
						return (DateTimeControl)super.getControl(5);
					}
					public DateTimeControl dtimInfantDischarge()
					{
						return (DateTimeControl)super.getControl(6);
					}
					public cmbInfantDischargeDestComboBox cmbInfantDischargeDest()
					{
						return (cmbInfantDischargeDestComboBox)super.getComboBox(0);
					}
					public cmbInfantMethodDischargeComboBox cmbInfantMethodDischarge()
					{
						return (cmbInfantMethodDischargeComboBox)super.getComboBox(1);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper196 = new RuntimeAnchoring(designSize, runtimeSize, 20, 168, 648, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabInfantTransfer = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1196), new Integer(anchoringHelper196.getX()), new Integer(anchoringHelper196.getY()), new Integer(anchoringHelper196.getWidth()), new Integer(anchoringHelper196.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Transfer", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabInfantTransferContainer m_tabInfantTransferContainer = (tabInfantTransferContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantTransferContainer.class, m_tabInfantTransfer, factory);
					super.addContainer(m_tabInfantTransfer, m_tabInfantTransferContainer);
					ims.framework.utils.SizeInfo m_tabInfantTransferDesignSize = new ims.framework.utils.SizeInfo(648, 280);
					ims.framework.utils.SizeInfo m_tabInfantTransferRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper196.getWidth(), anchoringHelper196.getHeight());
					m_tabInfantTransferContainer.setContext(form, appForm, m_tabInfantTransfer, loader, form_images_local, startControlID, m_tabInfantTransferDesignSize, m_tabInfantTransferRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper197 = new RuntimeAnchoring(designSize, runtimeSize, 20, 168, 648, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabInfantDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1197), new Integer(anchoringHelper197.getX()), new Integer(anchoringHelper197.getY()), new Integer(anchoringHelper197.getWidth()), new Integer(anchoringHelper197.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Discharge", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabInfantDischargeContainer m_tabInfantDischargeContainer = (tabInfantDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantDischargeContainer.class, m_tabInfantDischarge, factory);
					super.addContainer(m_tabInfantDischarge, m_tabInfantDischargeContainer);
					ims.framework.utils.SizeInfo m_tabInfantDischargeDesignSize = new ims.framework.utils.SizeInfo(648, 280);
					ims.framework.utils.SizeInfo m_tabInfantDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper197.getWidth(), anchoringHelper197.getHeight());
					m_tabInfantDischargeContainer.setContext(form, appForm, m_tabInfantDischarge, loader, form_images_local, startControlID, m_tabInfantDischargeDesignSize, m_tabInfantDischargeRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabInfantTransfer().setVisible(false);
					tabInfantDischarge().setVisible(false);
				}
				public void settabInfantTransferEnabled(boolean value)
				{
					tabInfantTransfer().setEnabled(value);
				}
				public void settabInfantDischargeEnabled(boolean value)
				{
					tabInfantDischarge().setEnabled(value);
				}
				public void showtabInfantTransfer()
				{
					tabInfantDischarge().setVisible(false);
					tabInfantTransfer().setVisible(true);
				}
				public void showtabInfantDischarge()
				{
					tabInfantTransfer().setVisible(false);
					tabInfantDischarge().setVisible(true);
				}
		
				public tabInfantTransferContainer tabInfantTransfer()
				{
					return (tabInfantTransferContainer)super.layers.get(0);
				}
				public tabInfantDischargeContainer tabInfantDischarge()
				{
					return (tabInfantDischargeContainer)super.layers.get(1);
				}
			}
			public static class grdInfantsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInfantsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSurname()
				{
					return (String)super.row.get(0);
				}
				public void setColSurname(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColForename()
				{
					return (String)super.row.get(1);
				}
				public void setColForename(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDisplayIdReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDisplayIdReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDisplayIdOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDisplayId()
				{
					return (String)super.row.get(2);
				}
				public void setColDisplayId(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDisplayIdTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSexReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSexReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSexOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSex()
				{
					return (String)super.row.get(3);
				}
				public void setColSex(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSexTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColLocationReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColLocationOpened()
				{
					super.row.showOpened(4);
				}
				public String getColLocation()
				{
					return (String)super.row.get(4);
				}
				public void setColLocation(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColLocationTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(5);
				}
				public String getColDOB()
				{
					return (String)super.row.get(5);
				}
				public void setColDOB(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInfantsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInfantsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInfantsRow get(int index)
				{
					return new grdInfantsRow(super.collection.get(index));
				}
				public grdInfantsRow newRow()
				{
					return new grdInfantsRow(super.collection.newRow());
				}
				public grdInfantsRow newRow(boolean autoSelect)
				{
					return new grdInfantsRow(super.collection.newRow(autoSelect));
				}
				public grdInfantsRow newRowAt(int index)
				{
					return new grdInfantsRow(super.collection.newRowAt(index));
				}
				public grdInfantsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInfantsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInfantsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public void setColDisplayIdCaption(String value)
				{
					this.grid.setColumnCaption(2, value);
				}
				public ims.core.vo.InpatientEpisodeLiteVoCollection getValues()
				{
					ims.core.vo.InpatientEpisodeLiteVoCollection listOfValues = new ims.core.vo.InpatientEpisodeLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.InpatientEpisodeLiteVo getValue()
				{
					return (ims.core.vo.InpatientEpisodeLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdInfantsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInfantsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInfantsRowCollection getRows()
				{
					return new grdInfantsRowCollection(super.grid.getRows());
				}
				public grdInfantsRow getRowByValue(ims.core.vo.InpatientEpisodeLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInfantsRow(row);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDisplayIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDisplayIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSexHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSexHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrInfantsLayer m_lyrInfantsLayer = (lyrInfantsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrInfantsLayer.class, this, factory);
				super.addLayer(m_lyrInfantsLayer);
				m_lyrInfantsLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper198 = new RuntimeAnchoring(designSize, runtimeSize, 28, 16, 640, 136, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInfantsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1198), new Integer(anchoringHelper198.getX()), new Integer(anchoringHelper198.getY()), new Integer(anchoringHelper198.getWidth()), new Integer(anchoringHelper198.getHeight()), new Integer(startTabIndex.intValue() + 4167), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInfantsTemp);
				grdInfantsGrid grdInfants = (grdInfantsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInfantsGrid.class, m_grdInfantsTemp);
				grdInfants.addStringColumn("Surname", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Forename", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("NHS No.", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Sex", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("Location", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInfants.addStringColumn("DOB", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInfants);
			}

			public lyrInfantsLayer lyrInfants()
			{
				return (lyrInfantsLayer)super.getLayer(0);
			}
			public grdInfantsGrid grdInfants()
			{
				return (grdInfantsGrid)super.getGrid(0);
			}
		}
		public static class tabAdmissionDetailContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPatientStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PatientStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PatientStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PatientStatus getValue()
				{
					return (ims.core.vo.lookups.PatientStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PatientStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceOfReferralComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SourceOfReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SourceOfReferral value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SourceOfReferral getValue()
				{
					return (ims.core.vo.lookups.SourceOfReferral)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SourceOfReferral value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbWardComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAdmWardTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.WardType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.WardType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.WardType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.WardType getValue()
				{
					return (ims.core.vo.lookups.WardType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.WardType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMethodOfAdmissionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.MethodOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.MethodOfAdmission value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.MethodOfAdmission getValue()
				{
					return (ims.core.vo.lookups.MethodOfAdmission)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.MethodOfAdmission value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceOfAdmissionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SourceOfAdmission value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SourceOfAdmission value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SourceOfAdmission getValue()
				{
					return (ims.core.vo.lookups.SourceOfAdmission)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SourceOfAdmission value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbAdmSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class CaseFolderYesNoRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper199 = new RuntimeAnchoring(designSize, runtimeSize, 216, 208, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper199.getX(), anchoringHelper199.getY(), anchoringHelper199.getWidth(), "No", startTabIndex.intValue() + 5190);
					RuntimeAnchoring anchoringHelper200 = new RuntimeAnchoring(designSize, runtimeSize, 168, 208, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper200.getX(), anchoringHelper200.getY(), anchoringHelper200.getWidth(), "Yes", startTabIndex.intValue() + 5187);
				}
				public void setText(CaseFolderYesNoEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public CaseFolderYesNoEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return CaseFolderYesNoEnumeration.None;
						case 0: return CaseFolderYesNoEnumeration.rdoNo;
						case 1: return CaseFolderYesNoEnumeration.rdoYes;
					}
					return null;
				}
				public void setValue(CaseFolderYesNoEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(CaseFolderYesNoEnumeration.None.id);
				}
				public boolean isEnabled(CaseFolderYesNoEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(CaseFolderYesNoEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(CaseFolderYesNoEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(CaseFolderYesNoEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class CaseFolderYesNoEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static CaseFolderYesNoEnumeration None = new CaseFolderYesNoEnumeration(-1);
				public static CaseFolderYesNoEnumeration rdoNo = new CaseFolderYesNoEnumeration(0);
				public static CaseFolderYesNoEnumeration rdoYes = new CaseFolderYesNoEnumeration(1);
				private CaseFolderYesNoEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((CaseFolderYesNoEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper201 = new RuntimeAnchoring(designSize, runtimeSize, 144, 178, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccReferringConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 6000, anchoringHelper201.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1199), new Integer(144), new Integer(178), new Integer(192), new Integer(20), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccReferringConsultantForm, instance1 } );
				ims.framework.Control m_ccReferringConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1200),  new Integer(anchoringHelper201.getX()), new Integer(anchoringHelper201.getY()), new Integer(anchoringHelper201.getWidth()), new Integer(anchoringHelper201.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccReferringConsultantForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReferringConsultantControl);
				Menu[] menus1 = m_ccReferringConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper202 = new RuntimeAnchoring(designSize, runtimeSize, 144, 43, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 7000, anchoringHelper202.getSize(), instance2, -1, skipContextValidation);
				//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1201), new Integer(144), new Integer(43), new Integer(192), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccConsultantForm, instance2 } );
				ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1202),  new Integer(anchoringHelper202.getX()), new Integer(anchoringHelper202.getY()), new Integer(anchoringHelper202.getWidth()), new Integer(anchoringHelper202.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_ccConsultantForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccConsultantControl);
				Menu[] menus2 = m_ccConsultantForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper203 = new RuntimeAnchoring(designSize, runtimeSize, 264, 208, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1203), new Integer(anchoringHelper203.getX()), new Integer(anchoringHelper203.getY()), new Integer(anchoringHelper203.getWidth()), new Integer(anchoringHelper203.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comment :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper204 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 141, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1204), new Integer(anchoringHelper204.getX()), new Integer(anchoringHelper204.getY()), new Integer(anchoringHelper204.getWidth()), new Integer(anchoringHelper204.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Update Casefolder Location", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper205 = new RuntimeAnchoring(designSize, runtimeSize, 344, 153, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1205), new Integer(anchoringHelper205.getX()), new Integer(anchoringHelper205.getY()), new Integer(anchoringHelper205.getWidth()), new Integer(anchoringHelper205.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Status:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper206 = new RuntimeAnchoring(designSize, runtimeSize, 24, 180, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1206), new Integer(anchoringHelper206.getX()), new Integer(anchoringHelper206.getY()), new Integer(anchoringHelper206.getWidth()), new Integer(anchoringHelper206.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referring Consultant:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper207 = new RuntimeAnchoring(designSize, runtimeSize, 24, 153, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1207), new Integer(anchoringHelper207.getX()), new Integer(anchoringHelper207.getY()), new Integer(anchoringHelper207.getWidth()), new Integer(anchoringHelper207.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source Of Referral:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper208 = new RuntimeAnchoring(designSize, runtimeSize, 344, 99, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1208), new Integer(anchoringHelper208.getX()), new Integer(anchoringHelper208.getY()), new Integer(anchoringHelper208.getWidth()), new Integer(anchoringHelper208.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Est. Discharge Date :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper209 = new RuntimeAnchoring(designSize, runtimeSize, 344, 18, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1209), new Integer(anchoringHelper209.getX()), new Integer(anchoringHelper209.getY()), new Integer(anchoringHelper209.getWidth()), new Integer(anchoringHelper209.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Ward Type:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper210 = new RuntimeAnchoring(designSize, runtimeSize, 24, 18, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1210), new Integer(anchoringHelper210.getX()), new Integer(anchoringHelper210.getY()), new Integer(anchoringHelper210.getWidth()), new Integer(anchoringHelper210.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper211 = new RuntimeAnchoring(designSize, runtimeSize, 344, 72, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1211), new Integer(anchoringHelper211.getX()), new Integer(anchoringHelper211.getY()), new Integer(anchoringHelper211.getWidth()), new Integer(anchoringHelper211.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Method of Admission :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper212 = new RuntimeAnchoring(designSize, runtimeSize, 344, 45, 116, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1212), new Integer(anchoringHelper212.getX()), new Integer(anchoringHelper212.getY()), new Integer(anchoringHelper212.getWidth()), new Integer(anchoringHelper212.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Source of Admission : ", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper213 = new RuntimeAnchoring(designSize, runtimeSize, 24, 126, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1213), new Integer(anchoringHelper213.getX()), new Integer(anchoringHelper213.getY()), new Integer(anchoringHelper213.getWidth()), new Integer(anchoringHelper213.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Admission :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper214 = new RuntimeAnchoring(designSize, runtimeSize, 24, 99, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1214), new Integer(anchoringHelper214.getX()), new Integer(anchoringHelper214.getY()), new Integer(anchoringHelper214.getWidth()), new Integer(anchoringHelper214.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admit Date/Time :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper215 = new RuntimeAnchoring(designSize, runtimeSize, 24, 72, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1215), new Integer(anchoringHelper215.getX()), new Integer(anchoringHelper215.getY()), new Integer(anchoringHelper215.getWidth()), new Integer(anchoringHelper215.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper216 = new RuntimeAnchoring(designSize, runtimeSize, 24, 45, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1216), new Integer(anchoringHelper216.getX()), new Integer(anchoringHelper216.getY()), new Integer(anchoringHelper216.getWidth()), new Integer(anchoringHelper216.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(0), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper217 = new RuntimeAnchoring(designSize, runtimeSize, 352, 208, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1217), new Integer(anchoringHelper217.getX()), new Integer(anchoringHelper217.getY()), new Integer(anchoringHelper217.getWidth()), new Integer(anchoringHelper217.getHeight()), new Integer(startTabIndex.intValue() + 5193), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper218 = new RuntimeAnchoring(designSize, runtimeSize, 144, 124, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1218), new Integer(anchoringHelper218.getX()), new Integer(anchoringHelper218.getY()), new Integer(anchoringHelper218.getWidth()), new Integer(anchoringHelper218.getHeight()), new Integer(startTabIndex.intValue() + 4172), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(32), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper219 = new RuntimeAnchoring(designSize, runtimeSize, 464, 97, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1219), new Integer(anchoringHelper219.getX()), new Integer(anchoringHelper219.getY()), new Integer(anchoringHelper219.getWidth()), new Integer(anchoringHelper219.getHeight()), new Integer(startTabIndex.intValue() + 5182), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper220 = new RuntimeAnchoring(designSize, runtimeSize, 144, 97, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1220), new Integer(anchoringHelper220.getX()), new Integer(anchoringHelper220.getY()), new Integer(anchoringHelper220.getWidth()), new Integer(anchoringHelper220.getHeight()), new Integer(startTabIndex.intValue() + 4170), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper221 = new RuntimeAnchoring(designSize, runtimeSize, 464, 151, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbPatientStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1221), new Integer(anchoringHelper221.getX()), new Integer(anchoringHelper221.getY()), new Integer(anchoringHelper221.getWidth()), new Integer(anchoringHelper221.getHeight()), new Integer(startTabIndex.intValue() + 4164), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatientStatusTemp);
				cmbPatientStatusComboBox cmbPatientStatus = (cmbPatientStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatientStatusComboBox.class, m_cmbPatientStatusTemp);
				super.addComboBox(cmbPatientStatus);
				RuntimeAnchoring anchoringHelper222 = new RuntimeAnchoring(designSize, runtimeSize, 144, 151, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSourceOfReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1222), new Integer(anchoringHelper222.getX()), new Integer(anchoringHelper222.getY()), new Integer(anchoringHelper222.getWidth()), new Integer(anchoringHelper222.getHeight()), new Integer(startTabIndex.intValue() + 4151), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceOfReferralTemp);
				cmbSourceOfReferralComboBox cmbSourceOfReferral = (cmbSourceOfReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfReferralComboBox.class, m_cmbSourceOfReferralTemp);
				super.addComboBox(cmbSourceOfReferral);
				RuntimeAnchoring anchoringHelper223 = new RuntimeAnchoring(designSize, runtimeSize, 144, 16, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1223), new Integer(anchoringHelper223.getX()), new Integer(anchoringHelper223.getY()), new Integer(anchoringHelper223.getWidth()), new Integer(anchoringHelper223.getHeight()), new Integer(startTabIndex.intValue() + 4147), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbWardTemp);
				cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
				super.addComboBox(cmbWard);
				RuntimeAnchoring anchoringHelper224 = new RuntimeAnchoring(designSize, runtimeSize, 464, 16, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbAdmWardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1224), new Integer(anchoringHelper224.getX()), new Integer(anchoringHelper224.getY()), new Integer(anchoringHelper224.getWidth()), new Integer(anchoringHelper224.getHeight()), new Integer(startTabIndex.intValue() + 5175), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAdmWardTypeTemp);
				cmbAdmWardTypeComboBox cmbAdmWardType = (cmbAdmWardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmWardTypeComboBox.class, m_cmbAdmWardTypeTemp);
				super.addComboBox(cmbAdmWardType);
				RuntimeAnchoring anchoringHelper225 = new RuntimeAnchoring(designSize, runtimeSize, 464, 70, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbMethodOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1225), new Integer(anchoringHelper225.getX()), new Integer(anchoringHelper225.getY()), new Integer(anchoringHelper225.getWidth()), new Integer(anchoringHelper225.getHeight()), new Integer(startTabIndex.intValue() + 5179), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMethodOfAdmissionTemp);
				cmbMethodOfAdmissionComboBox cmbMethodOfAdmission = (cmbMethodOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMethodOfAdmissionComboBox.class, m_cmbMethodOfAdmissionTemp);
				super.addComboBox(cmbMethodOfAdmission);
				RuntimeAnchoring anchoringHelper226 = new RuntimeAnchoring(designSize, runtimeSize, 464, 43, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbSourceOfAdmissionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1226), new Integer(anchoringHelper226.getX()), new Integer(anchoringHelper226.getY()), new Integer(anchoringHelper226.getWidth()), new Integer(anchoringHelper226.getHeight()), new Integer(startTabIndex.intValue() + 5177), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceOfAdmissionTemp);
				cmbSourceOfAdmissionComboBox cmbSourceOfAdmission = (cmbSourceOfAdmissionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceOfAdmissionComboBox.class, m_cmbSourceOfAdmissionTemp);
				super.addComboBox(cmbSourceOfAdmission);
				RuntimeAnchoring anchoringHelper227 = new RuntimeAnchoring(designSize, runtimeSize, 144, 70, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAdmSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1227), new Integer(anchoringHelper227.getX()), new Integer(anchoringHelper227.getY()), new Integer(anchoringHelper227.getWidth()), new Integer(anchoringHelper227.getHeight()), new Integer(startTabIndex.intValue() + 4168), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAdmSpecialtyTemp);
				cmbAdmSpecialtyComboBox cmbAdmSpecialty = (cmbAdmSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAdmSpecialtyComboBox.class, m_cmbAdmSpecialtyTemp);
				super.addComboBox(cmbAdmSpecialty);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper228 = new RuntimeAnchoring(designSize, runtimeSize, 344, 180, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1228), new Integer(anchoringHelper228.getX()), new Integer(anchoringHelper228.getY()), new Integer(anchoringHelper228.getWidth()), new Integer(anchoringHelper228.getHeight()), new Integer(startTabIndex.intValue() + 4161), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Chaplain", Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpCaseFolderYesNo = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1229), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpCaseFolderYesNo);
				CaseFolderYesNoRadioButton CaseFolderYesNo = (CaseFolderYesNoRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(CaseFolderYesNoRadioButton.class, tmpCaseFolderYesNo);
				CaseFolderYesNo.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(CaseFolderYesNo);
			}

			public ims.core.forms.mosquery.IComponent ccReferringConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReferringConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReferringConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReferringConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReferringConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReferringConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccConsultant()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccConsultantVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccConsultantVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccConsultantEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccConsultantEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblCaseComment()
			{
				return (Label)super.getControl(2);
			}
			public Label lblUpdateCasefolder()
			{
				return (Label)super.getControl(3);
			}
			public Label lbl13()
			{
				return (Label)super.getControl(4);
			}
			public Label lbl15()
			{
				return (Label)super.getControl(5);
			}
			public Label lbl16()
			{
				return (Label)super.getControl(6);
			}
			public TextBox txtCaseComment()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtReasonForAdmission()
			{
				return (TextBox)super.getControl(17);
			}
			public DateControl dteAdmEstDischarge()
			{
				return (DateControl)super.getControl(18);
			}
			public DateTimeControl dtimAdmission()
			{
				return (DateTimeControl)super.getControl(19);
			}
			public cmbPatientStatusComboBox cmbPatientStatus()
			{
				return (cmbPatientStatusComboBox)super.getComboBox(0);
			}
			public cmbSourceOfReferralComboBox cmbSourceOfReferral()
			{
				return (cmbSourceOfReferralComboBox)super.getComboBox(1);
			}
			public cmbWardComboBox cmbWard()
			{
				return (cmbWardComboBox)super.getComboBox(2);
			}
			public cmbAdmWardTypeComboBox cmbAdmWardType()
			{
				return (cmbAdmWardTypeComboBox)super.getComboBox(3);
			}
			public cmbMethodOfAdmissionComboBox cmbMethodOfAdmission()
			{
				return (cmbMethodOfAdmissionComboBox)super.getComboBox(4);
			}
			public cmbSourceOfAdmissionComboBox cmbSourceOfAdmission()
			{
				return (cmbSourceOfAdmissionComboBox)super.getComboBox(5);
			}
			public cmbAdmSpecialtyComboBox cmbAdmSpecialty()
			{
				return (cmbAdmSpecialtyComboBox)super.getComboBox(6);
			}
			public CheckBox chkChaplain()
			{
				return (CheckBox)super.getControl(27);
			}
			public CaseFolderYesNoRadioButton CaseFolderYesNo()
			{
				return (CaseFolderYesNoRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper229 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabPatient = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1230), new Integer(anchoringHelper229.getX()), new Integer(anchoringHelper229.getY()), new Integer(anchoringHelper229.getWidth()), new Integer(anchoringHelper229.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Patient Details", new Integer(startControlID.intValue() + 2), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPatientContainer m_tabPatientContainer = (tabPatientContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientContainer.class, m_tabPatient, factory);
			super.addContainer(m_tabPatient, m_tabPatientContainer);
			ims.framework.utils.SizeInfo m_tabPatientDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabPatientRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper229.getWidth(), anchoringHelper229.getHeight());
			m_tabPatientContainer.setContext(form, appForm, m_tabPatient, loader, form_images_local, startControlID, m_tabPatientDesignSize, m_tabPatientRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper230 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabTransfer = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1231), new Integer(anchoringHelper230.getX()), new Integer(anchoringHelper230.getY()), new Integer(anchoringHelper230.getWidth()), new Integer(anchoringHelper230.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Transfer", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTransferContainer m_tabTransferContainer = (tabTransferContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTransferContainer.class, m_tabTransfer, factory);
			super.addContainer(m_tabTransfer, m_tabTransferContainer);
			ims.framework.utils.SizeInfo m_tabTransferDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabTransferRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper230.getWidth(), anchoringHelper230.getHeight());
			m_tabTransferContainer.setContext(form, appForm, m_tabTransfer, loader, form_images_local, startControlID, m_tabTransferDesignSize, m_tabTransferRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper231 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1232), new Integer(anchoringHelper231.getX()), new Integer(anchoringHelper231.getY()), new Integer(anchoringHelper231.getWidth()), new Integer(anchoringHelper231.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Discharge", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargeContainer m_tabDischargeContainer = (tabDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeContainer.class, m_tabDischarge, factory);
			super.addContainer(m_tabDischarge, m_tabDischargeContainer);
			ims.framework.utils.SizeInfo m_tabDischargeDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper231.getWidth(), anchoringHelper231.getHeight());
			m_tabDischargeContainer.setContext(form, appForm, m_tabDischarge, loader, form_images_local, startControlID, m_tabDischargeDesignSize, m_tabDischargeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper232 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabAdmission = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1233), new Integer(anchoringHelper232.getX()), new Integer(anchoringHelper232.getY()), new Integer(anchoringHelper232.getWidth()), new Integer(anchoringHelper232.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Admit", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAdmissionContainer m_tabAdmissionContainer = (tabAdmissionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdmissionContainer.class, m_tabAdmission, factory);
			super.addContainer(m_tabAdmission, m_tabAdmissionContainer);
			ims.framework.utils.SizeInfo m_tabAdmissionDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabAdmissionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper232.getWidth(), anchoringHelper232.getHeight());
			m_tabAdmissionContainer.setContext(form, appForm, m_tabAdmission, loader, form_images_local, startControlID, m_tabAdmissionDesignSize, m_tabAdmissionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper233 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabHomeLeave = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1234), new Integer(anchoringHelper233.getX()), new Integer(anchoringHelper233.getY()), new Integer(anchoringHelper233.getWidth()), new Integer(anchoringHelper233.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Home Leave", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabHomeLeaveContainer m_tabHomeLeaveContainer = (tabHomeLeaveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHomeLeaveContainer.class, m_tabHomeLeave, factory);
			super.addContainer(m_tabHomeLeave, m_tabHomeLeaveContainer);
			ims.framework.utils.SizeInfo m_tabHomeLeaveDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabHomeLeaveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper233.getWidth(), anchoringHelper233.getHeight());
			m_tabHomeLeaveContainer.setContext(form, appForm, m_tabHomeLeave, loader, form_images_local, startControlID, m_tabHomeLeaveDesignSize, m_tabHomeLeaveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper234 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabCloseBed = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1235), new Integer(anchoringHelper234.getX()), new Integer(anchoringHelper234.getY()), new Integer(anchoringHelper234.getWidth()), new Integer(anchoringHelper234.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Bed Maintenance", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCloseBedContainer m_tabCloseBedContainer = (tabCloseBedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCloseBedContainer.class, m_tabCloseBed, factory);
			super.addContainer(m_tabCloseBed, m_tabCloseBedContainer);
			ims.framework.utils.SizeInfo m_tabCloseBedDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabCloseBedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper234.getWidth(), anchoringHelper234.getHeight());
			m_tabCloseBedContainer.setContext(form, appForm, m_tabCloseBed, loader, form_images_local, startControlID, m_tabCloseBedDesignSize, m_tabCloseBedRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper235 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabEstimatedDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1236), new Integer(anchoringHelper235.getX()), new Integer(anchoringHelper235.getY()), new Integer(anchoringHelper235.getWidth()), new Integer(anchoringHelper235.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Estimated Discharge", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabEstimatedDischargeContainer m_tabEstimatedDischargeContainer = (tabEstimatedDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEstimatedDischargeContainer.class, m_tabEstimatedDischarge, factory);
			super.addContainer(m_tabEstimatedDischarge, m_tabEstimatedDischargeContainer);
			ims.framework.utils.SizeInfo m_tabEstimatedDischargeDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabEstimatedDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper235.getWidth(), anchoringHelper235.getHeight());
			m_tabEstimatedDischargeContainer.setContext(form, appForm, m_tabEstimatedDischarge, loader, form_images_local, startControlID, m_tabEstimatedDischargeDesignSize, m_tabEstimatedDischargeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper236 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabBedMove = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1237), new Integer(anchoringHelper236.getX()), new Integer(anchoringHelper236.getY()), new Integer(anchoringHelper236.getWidth()), new Integer(anchoringHelper236.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Bed Move", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBedMoveContainer m_tabBedMoveContainer = (tabBedMoveContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBedMoveContainer.class, m_tabBedMove, factory);
			super.addContainer(m_tabBedMove, m_tabBedMoveContainer);
			ims.framework.utils.SizeInfo m_tabBedMoveDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabBedMoveRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper236.getWidth(), anchoringHelper236.getHeight());
			m_tabBedMoveContainer.setContext(form, appForm, m_tabBedMove, loader, form_images_local, startControlID, m_tabBedMoveDesignSize, m_tabBedMoveRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper237 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabInfants = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1238), new Integer(anchoringHelper237.getX()), new Integer(anchoringHelper237.getY()), new Integer(anchoringHelper237.getWidth()), new Integer(anchoringHelper237.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Infants", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInfantsContainer m_tabInfantsContainer = (tabInfantsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInfantsContainer.class, m_tabInfants, factory);
			super.addContainer(m_tabInfants, m_tabInfantsContainer);
			ims.framework.utils.SizeInfo m_tabInfantsDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabInfantsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper237.getWidth(), anchoringHelper237.getHeight());
			m_tabInfantsContainer.setContext(form, appForm, m_tabInfants, loader, form_images_local, startControlID, m_tabInfantsDesignSize, m_tabInfantsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper238 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 704, 480, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabAdmissionDetail = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1239), new Integer(anchoringHelper238.getX()), new Integer(anchoringHelper238.getY()), new Integer(anchoringHelper238.getWidth()), new Integer(anchoringHelper238.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Admission Detail", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAdmissionDetailContainer m_tabAdmissionDetailContainer = (tabAdmissionDetailContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdmissionDetailContainer.class, m_tabAdmissionDetail, factory);
			super.addContainer(m_tabAdmissionDetail, m_tabAdmissionDetailContainer);
			ims.framework.utils.SizeInfo m_tabAdmissionDetailDesignSize = new ims.framework.utils.SizeInfo(704, 480);
			ims.framework.utils.SizeInfo m_tabAdmissionDetailRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper238.getWidth(), anchoringHelper238.getHeight());
			m_tabAdmissionDetailContainer.setContext(form, appForm, m_tabAdmissionDetail, loader, form_images_local, startControlID, m_tabAdmissionDetailDesignSize, m_tabAdmissionDetailRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
		}
		public void settabPatientEnabled(boolean value)
		{
			tabPatient().setEnabled(value);
		}
		public void settabTransferEnabled(boolean value)
		{
			tabTransfer().setEnabled(value);
		}
		public void settabDischargeEnabled(boolean value)
		{
			tabDischarge().setEnabled(value);
		}
		public void settabAdmissionEnabled(boolean value)
		{
			tabAdmission().setEnabled(value);
		}
		public void settabHomeLeaveEnabled(boolean value)
		{
			tabHomeLeave().setEnabled(value);
		}
		public void settabCloseBedEnabled(boolean value)
		{
			tabCloseBed().setEnabled(value);
		}
		public void settabEstimatedDischargeEnabled(boolean value)
		{
			tabEstimatedDischarge().setEnabled(value);
		}
		public void settabBedMoveEnabled(boolean value)
		{
			tabBedMove().setEnabled(value);
		}
		public void settabInfantsEnabled(boolean value)
		{
			tabInfants().setEnabled(value);
		}
		public void settabAdmissionDetailEnabled(boolean value)
		{
			tabAdmissionDetail().setEnabled(value);
		}
		public void showtabPatient()
		{
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabPatient().setVisible(true);
		}
		public void showtabTransfer()
		{
			tabPatient().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabTransfer().setVisible(true);
		}
		public void showtabDischarge()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabDischarge().setVisible(true);
		}
		public void showtabAdmission()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabAdmission().setVisible(true);
		}
		public void showtabHomeLeave()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabHomeLeave().setVisible(true);
		}
		public void showtabCloseBed()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabCloseBed().setVisible(true);
		}
		public void showtabEstimatedDischarge()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabEstimatedDischarge().setVisible(true);
		}
		public void showtabBedMove()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabBedMove().setVisible(true);
		}
		public void showtabInfants()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabAdmissionDetail().setVisible(false);
			tabInfants().setVisible(true);
		}
		public void showtabAdmissionDetail()
		{
			tabPatient().setVisible(false);
			tabTransfer().setVisible(false);
			tabDischarge().setVisible(false);
			tabAdmission().setVisible(false);
			tabHomeLeave().setVisible(false);
			tabCloseBed().setVisible(false);
			tabEstimatedDischarge().setVisible(false);
			tabBedMove().setVisible(false);
			tabInfants().setVisible(false);
			tabAdmissionDetail().setVisible(true);
		}

		public tabPatientContainer tabPatient()
		{
			return (tabPatientContainer)super.layers.get(0);
		}
		public tabTransferContainer tabTransfer()
		{
			return (tabTransferContainer)super.layers.get(1);
		}
		public tabDischargeContainer tabDischarge()
		{
			return (tabDischargeContainer)super.layers.get(2);
		}
		public tabAdmissionContainer tabAdmission()
		{
			return (tabAdmissionContainer)super.layers.get(3);
		}
		public tabHomeLeaveContainer tabHomeLeave()
		{
			return (tabHomeLeaveContainer)super.layers.get(4);
		}
		public tabCloseBedContainer tabCloseBed()
		{
			return (tabCloseBedContainer)super.layers.get(5);
		}
		public tabEstimatedDischargeContainer tabEstimatedDischarge()
		{
			return (tabEstimatedDischargeContainer)super.layers.get(6);
		}
		public tabBedMoveContainer tabBedMove()
		{
			return (tabBedMoveContainer)super.layers.get(7);
		}
		public tabInfantsContainer tabInfants()
		{
			return (tabInfantsContainer)super.layers.get(8);
		}
		public tabAdmissionDetailContainer tabAdmissionDetail()
		{
			return (tabAdmissionDetailContainer)super.layers.get(9);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(736, 616);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper239 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 728, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1240), new Integer(anchoringHelper239.getX()), new Integer(anchoringHelper239.getY()), new Integer(anchoringHelper239.getWidth()), new Integer(anchoringHelper239.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper240 = new RuntimeAnchoring(designSize, runtimeSize, 368, 8, 344, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1241), new Integer(anchoringHelper240.getX()), new Integer(anchoringHelper240.getY()), new Integer(anchoringHelper240.getWidth()), new Integer(anchoringHelper240.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(2), ""}));

		// Layer Clasess
		lyrDetailLayer m_lyrDetailLayer = (lyrDetailLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailLayer.class, this, factory);
		super.addLayer(m_lyrDetailLayer);
		m_lyrDetailLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper241 = new RuntimeAnchoring(designSize, runtimeSize, 184, 56, 288, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1242), new Integer(anchoringHelper241.getX()), new Integer(anchoringHelper241.getY()), new Integer(anchoringHelper241.getWidth()), new Integer(anchoringHelper241.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Patient Details to Display", new Integer(1), null, new Integer(2)}));
		RuntimeAnchoring anchoringHelper242 = new RuntimeAnchoring(designSize, runtimeSize, 480, 87, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1243), new Integer(anchoringHelper242.getX()), new Integer(anchoringHelper242.getY()), new Integer(anchoringHelper242.getWidth()), new Integer(anchoringHelper242.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Name", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper243 = new RuntimeAnchoring(designSize, runtimeSize, 376, 87, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1244), new Integer(anchoringHelper243.getX()), new Integer(anchoringHelper243.getY()), new Integer(anchoringHelper243.getWidth()), new Integer(anchoringHelper243.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Destination Ward :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper244 = new RuntimeAnchoring(designSize, runtimeSize, 480, 24, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1245), new Integer(anchoringHelper244.getX()), new Integer(anchoringHelper244.getY()), new Integer(anchoringHelper244.getWidth()), new Integer(anchoringHelper244.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title Forename Surname", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper245 = new RuntimeAnchoring(designSize, runtimeSize, 376, 45, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1246), new Integer(anchoringHelper245.getX()), new Integer(anchoringHelper245.getY()), new Integer(anchoringHelper245.getWidth()), new Integer(anchoringHelper245.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty : ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper246 = new RuntimeAnchoring(designSize, runtimeSize, 480, 66, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1247), new Integer(anchoringHelper246.getX()), new Integer(anchoringHelper246.getY()), new Integer(anchoringHelper246.getWidth()), new Integer(anchoringHelper246.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "20/06/2008 10:00", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper247 = new RuntimeAnchoring(designSize, runtimeSize, 480, 45, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1248), new Integer(anchoringHelper247.getX()), new Integer(anchoringHelper247.getY()), new Integer(anchoringHelper247.getWidth()), new Integer(anchoringHelper247.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty Text", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper248 = new RuntimeAnchoring(designSize, runtimeSize, 376, 24, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1249), new Integer(anchoringHelper248.getX()), new Integer(anchoringHelper248.getY()), new Integer(anchoringHelper248.getWidth()), new Integer(anchoringHelper248.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant : ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper249 = new RuntimeAnchoring(designSize, runtimeSize, 376, 66, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1250), new Integer(anchoringHelper249.getX()), new Integer(anchoringHelper249.getY()), new Integer(anchoringHelper249.getWidth()), new Integer(anchoringHelper249.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimate Discharge :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper250 = new RuntimeAnchoring(designSize, runtimeSize, 40, 96, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1251), new Integer(anchoringHelper250.getX()), new Integer(anchoringHelper250.getY()), new Integer(anchoringHelper250.getWidth()), new Integer(anchoringHelper250.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblAddress2", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper251 = new RuntimeAnchoring(designSize, runtimeSize, 24, 80, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1252), new Integer(anchoringHelper251.getX()), new Integer(anchoringHelper251.getY()), new Integer(anchoringHelper251.getWidth()), new Integer(anchoringHelper251.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblAddress1", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper252 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 102, 26, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1253), new Integer(anchoringHelper252.getX()), new Integer(anchoringHelper252.getY()), new Integer(anchoringHelper252.getWidth()), new Integer(anchoringHelper252.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "lblPatient", new Integer(1), null, new Integer(2)}));
		RuntimeAnchoring anchoringHelper253 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 88, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1254), new Integer(anchoringHelper253.getX()), new Integer(anchoringHelper253.getY()), new Integer(anchoringHelper253.getWidth()), new Integer(anchoringHelper253.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No.", new Integer(0), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper254 = new RuntimeAnchoring(designSize, runtimeSize, 112, 10, 104, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1255), new Integer(anchoringHelper254.getX()), new Integer(anchoringHelper254.getY()), new Integer(anchoringHelper254.getWidth()), new Integer(anchoringHelper254.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1234567890", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper255 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 64, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1256), new Integer(anchoringHelper255.getX()), new Integer(anchoringHelper255.getY()), new Integer(anchoringHelper255.getWidth()), new Integer(anchoringHelper255.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NHS No:", new Integer(0), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper256 = new RuntimeAnchoring(designSize, runtimeSize, 112, 32, 104, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1257), new Integer(anchoringHelper256.getX()), new Integer(anchoringHelper256.getY()), new Integer(anchoringHelper256.getWidth()), new Integer(anchoringHelper256.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "1234567890", new Integer(1), null, new Integer(1)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlPatientDetails()
	{
		return (Panel)super.getControl(0);
	}
	public Panel pnlInpatientDetails()
	{
		return (Panel)super.getControl(1);
	}
	public lyrDetailLayer lyrDetail()
	{
		return (lyrDetailLayer)super.getLayer(0);
	}
	public Label lblNoPatient()
	{
		return (Label)super.getControl(12);
	}
	public Label lblWardBanner()
	{
		return (Label)super.getControl(13);
	}
	public Label lblDestWard()
	{
		return (Label)super.getControl(14);
	}
	public Label lblConsultantBanner()
	{
		return (Label)super.getControl(15);
	}
	public Label lblSpecialty()
	{
		return (Label)super.getControl(16);
	}
	public Label lblEstDsichargeBanner()
	{
		return (Label)super.getControl(17);
	}
	public Label lblSpecialtyBanner()
	{
		return (Label)super.getControl(18);
	}
	public Label lblConsultant()
	{
		return (Label)super.getControl(19);
	}
	public Label lblDischarge()
	{
		return (Label)super.getControl(20);
	}
	public Label lblAddress2Banner()
	{
		return (Label)super.getControl(21);
	}
	public Label lblAddress1Banner()
	{
		return (Label)super.getControl(22);
	}
	public Label lblPatientNameBanner()
	{
		return (Label)super.getControl(23);
	}
	public Label lblHosp()
	{
		return (Label)super.getControl(24);
	}
	public Label lblHospitalNoBanner()
	{
		return (Label)super.getControl(25);
	}
	public Label lblNhs()
	{
		return (Label)super.getControl(26);
	}
	public Label lblNhsNoBanner()
	{
		return (Label)super.getControl(27);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Clinical = new ClinicalForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectItems = new LocalFormName(102229);
				DemographicsDialog = new LocalFormName(102321);
			}
			public final FormName SelectItems;
			public final FormName DemographicsDialog;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				VTERiskAssessmentDialog = new LocalFormName(123238);
			}
			public final FormName VTERiskAssessmentDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				PatientElectiveListAndTCIForCancellationDialog = new LocalFormName(134235);
			}
			public final FormName PatientElectiveListAndTCIForCancellationDialog;
		}

		public CoreForms Core;
		public ClinicalForms Clinical;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Critical = new ImageHelper(102249, "Images/Core/Critical.gif", new Integer(16), new Integer(16));
				Transfer = new ImageHelper(102323, "Images/Core/transfer.png", new Integer(23), new Integer(23));
				Discharge = new ImageHelper(102324, "Images/Core/discharge.png", new Integer(23), new Integer(23));
				HomeLeave = new ImageHelper(102326, "Images/Core/homeleave.png", new Integer(23), new Integer(23));
				ReturnFromHome = new ImageHelper(102325, "Images/Core/returnhome.png", new Integer(23), new Integer(23));
				ClinicalData = new ImageHelper(102327, "Images/Core/clinicaldata.png", new Integer(23), new Integer(23));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Save = new ImageHelper(102199, "Images/Core/Save.gif", new Integer(18), new Integer(18));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Critical;
			public final ims.framework.utils.Image Transfer;
			public final ims.framework.utils.Image Discharge;
			public final ims.framework.utils.Image HomeLeave;
			public final ims.framework.utils.Image ReturnFromHome;
			public final ims.framework.utils.Image ClinicalData;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Save;
			public final ims.framework.utils.Image Edit;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				StaffBlack = new ImageHelper(103128, "Images/Admin/user_black.png", new Integer(16), new Integer(16));
				BedClose24 = new ImageHelper(103263, "Images/Admin/hospital_bed_close_24.png", new Integer(24), new Integer(24));
				BedNext24 = new ImageHelper(103265, "Images/Admin/hospital_bed_next_24.png", new Integer(24), new Integer(24));
				BedOpen24 = new ImageHelper(103266, "Images/Admin/hospital_bed_ok_24.png", new Integer(24), new Integer(24));
				BedReload24 = new ImageHelper(103264, "Images/Admin/hospital_bed_reload_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image StaffBlack;
			public final ims.framework.utils.Image BedClose24;
			public final ims.framework.utils.Image BedNext24;
			public final ims.framework.utils.Image BedOpen24;
			public final ims.framework.utils.Image BedReload24;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_BedStatus = new ims.framework.ContextVariable("BedStatus", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__BedStatus_" + componentIdentifier + "");
			cxl_Hospitals = new ims.framework.ContextVariable("Hospitals", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__Hospitals_" + componentIdentifier + "");
			cxl_PendingTransferOut = new ims.framework.ContextVariable("PendingTransferOut", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier + "");
			cxl_CloseBedStatus = new ims.framework.ContextVariable("CloseBedStatus", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier + "");
			cxl_RtpStat = new ims.framework.ContextVariable("RtpStat", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__RtpStat_" + componentIdentifier + "");
			cxl_PlBlk = new ims.framework.ContextVariable("PlBlk", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PlBlk_" + componentIdentifier + "");
			cxl_Infants = new ims.framework.ContextVariable("Infants", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__Infants_" + componentIdentifier + "");
			cxl_PendingInfantTransfer = new ims.framework.ContextVariable("PendingInfantTransfer", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier + "");
			cxl_IsReadOnly = new ims.framework.ContextVariable("IsReadOnly", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__IsReadOnly_" + componentIdentifier + "");
			cxl_VTERiskAssessmnetWorklistVo = new ims.framework.ContextVariable("VTERiskAssessmnetWorklistVo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmnetWorklistVo_" + componentIdentifier + "");
			cxl_ShowVTERiskAssessmentButton = new ims.framework.ContextVariable("ShowVTERiskAssessmentButton", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__ShowVTERiskAssessmentButton_" + componentIdentifier + "");
			cxl_InpatientEpForVTERiskAssessmentVo = new ims.framework.ContextVariable("InpatientEpForVTERiskAssessmentVo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier + "");
			cxl_VTEShouldCreate = new ims.framework.ContextVariable("VTEShouldCreate", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTEShouldCreate_" + componentIdentifier + "");
			cxl_UserHasRight = new ims.framework.ContextVariable("UserHasRight", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__UserHasRight_" + componentIdentifier + "");
			cxl_EditVTERiskAssessmentFromInpatientEpisode = new ims.framework.ContextVariable("EditVTERiskAssessmentFromInpatientEpisode", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__EditVTERiskAssessmentFromInpatientEpisode_" + componentIdentifier + "");
			cxl_VTERiskAssessmentNotCompleted = new ims.framework.ContextVariable("VTERiskAssessmentNotCompleted", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentNotCompleted_" + componentIdentifier + "");
			cxl_showVTERiskButtonAFterEditPatientDetails = new ims.framework.ContextVariable("showVTERiskButtonAFterEditPatientDetails", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__showVTERiskButtonAFterEditPatientDetails_" + componentIdentifier + "");
			cxl_VTERiskAssessmentShortVo = new ims.framework.ContextVariable("VTERiskAssessmentShortVo", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier + "");
			cxl_MessageBoxAdmission = new ims.framework.ContextVariable("MessageBoxAdmission", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxAdmission_" + componentIdentifier + "");
			cxl_MessageBoxDischarge = new ims.framework.ContextVariable("MessageBoxDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxDischarge_" + componentIdentifier + "");
			cxl_PatientElectiveListDischarge = new ims.framework.ContextVariable("PatientElectiveListDischarge", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier + "");
			cxl_MessageBoxPELCheck = new ims.framework.ContextVariable("MessageBoxPELCheck", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__MessageBoxPELCheck_" + componentIdentifier + "");
			cxl_InpatientEpisodeSpecialty = new ims.framework.ContextVariable("InpatientEpisodeSpecialty", prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpisodeSpecialty_" + componentIdentifier + "");
		}
		
		public boolean getBedStatusIsNotNull()
		{
			return !cxl_BedStatus.getValueIsNull(context);
		}
		public ims.core.vo.lookups.BedStatus getBedStatus()
		{
			return (ims.core.vo.lookups.BedStatus)cxl_BedStatus.getValue(context);
		}
		public void setBedStatus(ims.core.vo.lookups.BedStatus value)
		{
			cxl_BedStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BedStatus = null;
		public boolean getHospitalsIsNotNull()
		{
			return !cxl_Hospitals.getValueIsNull(context);
		}
		public ims.core.vo.LocationLiteVoCollection getHospitals()
		{
			return (ims.core.vo.LocationLiteVoCollection)cxl_Hospitals.getValue(context);
		}
		public void setHospitals(ims.core.vo.LocationLiteVoCollection value)
		{
			cxl_Hospitals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Hospitals = null;
		public boolean getPendingTransferOutIsNotNull()
		{
			return !cxl_PendingTransferOut.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVo getPendingTransferOut()
		{
			return (ims.core.vo.PendingTransfersLiteVo)cxl_PendingTransferOut.getValue(context);
		}
		public void setPendingTransferOut(ims.core.vo.PendingTransfersLiteVo value)
		{
			cxl_PendingTransferOut.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingTransferOut = null;
		public boolean getCloseBedStatusIsNotNull()
		{
			return !cxl_CloseBedStatus.getValueIsNull(context);
		}
		public ims.core.vo.BedSpaceStateStatusVo getCloseBedStatus()
		{
			return (ims.core.vo.BedSpaceStateStatusVo)cxl_CloseBedStatus.getValue(context);
		}
		public void setCloseBedStatus(ims.core.vo.BedSpaceStateStatusVo value)
		{
			cxl_CloseBedStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CloseBedStatus = null;
		public boolean getRtpStatIsNotNull()
		{
			return !cxl_RtpStat.getValueIsNull(context);
		}
		public String getRtpStat()
		{
			return (String)cxl_RtpStat.getValue(context);
		}
		public void setRtpStat(String value)
		{
			cxl_RtpStat.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RtpStat = null;
		public boolean getPlBlkIsNotNull()
		{
			return !cxl_PlBlk.getValueIsNull(context);
		}
		public String getPlBlk()
		{
			return (String)cxl_PlBlk.getValue(context);
		}
		public void setPlBlk(String value)
		{
			cxl_PlBlk.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PlBlk = null;
		public boolean getInfantsIsNotNull()
		{
			return !cxl_Infants.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeLiteVoCollection getInfants()
		{
			return (ims.core.vo.InpatientEpisodeLiteVoCollection)cxl_Infants.getValue(context);
		}
		public void setInfants(ims.core.vo.InpatientEpisodeLiteVoCollection value)
		{
			cxl_Infants.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Infants = null;
		public boolean getPendingInfantTransferIsNotNull()
		{
			return !cxl_PendingInfantTransfer.getValueIsNull(context);
		}
		public ims.core.vo.PendingTransfersLiteVo getPendingInfantTransfer()
		{
			return (ims.core.vo.PendingTransfersLiteVo)cxl_PendingInfantTransfer.getValue(context);
		}
		public void setPendingInfantTransfer(ims.core.vo.PendingTransfersLiteVo value)
		{
			cxl_PendingInfantTransfer.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PendingInfantTransfer = null;
		public boolean getIsReadOnlyIsNotNull()
		{
			return !cxl_IsReadOnly.getValueIsNull(context);
		}
		public Boolean getIsReadOnly()
		{
			return (Boolean)cxl_IsReadOnly.getValue(context);
		}
		public void setIsReadOnly(Boolean value)
		{
			cxl_IsReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsReadOnly = null;
		public boolean getVTERiskAssessmnetWorklistVoIsNotNull()
		{
			return !cxl_VTERiskAssessmnetWorklistVo.getValueIsNull(context);
		}
		public ims.core.vo.VTERiskAssessmentWorklistVo getVTERiskAssessmnetWorklistVo()
		{
			return (ims.core.vo.VTERiskAssessmentWorklistVo)cxl_VTERiskAssessmnetWorklistVo.getValue(context);
		}
		public void setVTERiskAssessmnetWorklistVo(ims.core.vo.VTERiskAssessmentWorklistVo value)
		{
			cxl_VTERiskAssessmnetWorklistVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTERiskAssessmnetWorklistVo = null;
		public boolean getShowVTERiskAssessmentButtonIsNotNull()
		{
			return !cxl_ShowVTERiskAssessmentButton.getValueIsNull(context);
		}
		public Boolean getShowVTERiskAssessmentButton()
		{
			return (Boolean)cxl_ShowVTERiskAssessmentButton.getValue(context);
		}
		public void setShowVTERiskAssessmentButton(Boolean value)
		{
			cxl_ShowVTERiskAssessmentButton.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowVTERiskAssessmentButton = null;
		public boolean getInpatientEpForVTERiskAssessmentVoIsNotNull()
		{
			return !cxl_InpatientEpForVTERiskAssessmentVo.getValueIsNull(context);
		}
		public ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo getInpatientEpForVTERiskAssessmentVo()
		{
			return (ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo)cxl_InpatientEpForVTERiskAssessmentVo.getValue(context);
		}
		public void setInpatientEpForVTERiskAssessmentVo(ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo value)
		{
			cxl_InpatientEpForVTERiskAssessmentVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpForVTERiskAssessmentVo = null;
		public boolean getVTEShouldCreateIsNotNull()
		{
			return !cxl_VTEShouldCreate.getValueIsNull(context);
		}
		public Boolean getVTEShouldCreate()
		{
			return (Boolean)cxl_VTEShouldCreate.getValue(context);
		}
		public void setVTEShouldCreate(Boolean value)
		{
			cxl_VTEShouldCreate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTEShouldCreate = null;
		public boolean getUserHasRightIsNotNull()
		{
			return !cxl_UserHasRight.getValueIsNull(context);
		}
		public Boolean getUserHasRight()
		{
			return (Boolean)cxl_UserHasRight.getValue(context);
		}
		public void setUserHasRight(Boolean value)
		{
			cxl_UserHasRight.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserHasRight = null;
		public boolean getEditVTERiskAssessmentFromInpatientEpisodeIsNotNull()
		{
			return !cxl_EditVTERiskAssessmentFromInpatientEpisode.getValueIsNull(context);
		}
		public Boolean getEditVTERiskAssessmentFromInpatientEpisode()
		{
			return (Boolean)cxl_EditVTERiskAssessmentFromInpatientEpisode.getValue(context);
		}
		public void setEditVTERiskAssessmentFromInpatientEpisode(Boolean value)
		{
			cxl_EditVTERiskAssessmentFromInpatientEpisode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditVTERiskAssessmentFromInpatientEpisode = null;
		public boolean getVTERiskAssessmentNotCompletedIsNotNull()
		{
			return !cxl_VTERiskAssessmentNotCompleted.getValueIsNull(context);
		}
		public Boolean getVTERiskAssessmentNotCompleted()
		{
			return (Boolean)cxl_VTERiskAssessmentNotCompleted.getValue(context);
		}
		public void setVTERiskAssessmentNotCompleted(Boolean value)
		{
			cxl_VTERiskAssessmentNotCompleted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTERiskAssessmentNotCompleted = null;
		public boolean getshowVTERiskButtonAFterEditPatientDetailsIsNotNull()
		{
			return !cxl_showVTERiskButtonAFterEditPatientDetails.getValueIsNull(context);
		}
		public Boolean getshowVTERiskButtonAFterEditPatientDetails()
		{
			return (Boolean)cxl_showVTERiskButtonAFterEditPatientDetails.getValue(context);
		}
		public void setshowVTERiskButtonAFterEditPatientDetails(Boolean value)
		{
			cxl_showVTERiskButtonAFterEditPatientDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_showVTERiskButtonAFterEditPatientDetails = null;
		public boolean getVTERiskAssessmentShortVoIsNotNull()
		{
			return !cxl_VTERiskAssessmentShortVo.getValueIsNull(context);
		}
		public ims.clinical.vo.VTERiskAssessmentShortVo getVTERiskAssessmentShortVo()
		{
			return (ims.clinical.vo.VTERiskAssessmentShortVo)cxl_VTERiskAssessmentShortVo.getValue(context);
		}
		public void setVTERiskAssessmentShortVo(ims.clinical.vo.VTERiskAssessmentShortVo value)
		{
			cxl_VTERiskAssessmentShortVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VTERiskAssessmentShortVo = null;
		public boolean getMessageBoxAdmissionIsNotNull()
		{
			return !cxl_MessageBoxAdmission.getValueIsNull(context);
		}
		public Integer getMessageBoxAdmission()
		{
			return (Integer)cxl_MessageBoxAdmission.getValue(context);
		}
		public void setMessageBoxAdmission(Integer value)
		{
			cxl_MessageBoxAdmission.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxAdmission = null;
		public boolean getMessageBoxDischargeIsNotNull()
		{
			return !cxl_MessageBoxDischarge.getValueIsNull(context);
		}
		public Integer getMessageBoxDischarge()
		{
			return (Integer)cxl_MessageBoxDischarge.getValue(context);
		}
		public void setMessageBoxDischarge(Integer value)
		{
			cxl_MessageBoxDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDischarge = null;
		public boolean getPatientElectiveListDischargeIsNotNull()
		{
			return !cxl_PatientElectiveListDischarge.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListBedAdmissionVo getPatientElectiveListDischarge()
		{
			return (ims.RefMan.vo.PatientElectiveListBedAdmissionVo)cxl_PatientElectiveListDischarge.getValue(context);
		}
		public void setPatientElectiveListDischarge(ims.RefMan.vo.PatientElectiveListBedAdmissionVo value)
		{
			cxl_PatientElectiveListDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveListDischarge = null;
		public boolean getMessageBoxPELCheckIsNotNull()
		{
			return !cxl_MessageBoxPELCheck.getValueIsNull(context);
		}
		public Integer getMessageBoxPELCheck()
		{
			return (Integer)cxl_MessageBoxPELCheck.getValue(context);
		}
		public void setMessageBoxPELCheck(Integer value)
		{
			cxl_MessageBoxPELCheck.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxPELCheck = null;
		public boolean getInpatientEpisodeSpecialtyIsNotNull()
		{
			return !cxl_InpatientEpisodeSpecialty.getValueIsNull(context);
		}
		public ims.core.vo.lookups.Specialty getInpatientEpisodeSpecialty()
		{
			return (ims.core.vo.lookups.Specialty)cxl_InpatientEpisodeSpecialty.getValue(context);
		}
		public void setInpatientEpisodeSpecialty(ims.core.vo.lookups.Specialty value)
		{
			cxl_InpatientEpisodeSpecialty.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InpatientEpisodeSpecialty = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[142];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ID", "ID_Location");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.ADTWard", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISCONFIRMEDDISCHARGE", "IsConfirmedDischarge");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-CONFIRMEDDISCHARGEDATETIME", "ConfirmedDischargeDateTime");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISMATERNITYINPATIENT", "IsMaternityInpatient");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-ISONHOMELEAVE", "IsOnHomeLeave");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDDATEOFRETURN", "ExpectedDateOfReturn");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-EXPECTEDTIMEOFRETURN", "ExpectedTimeOfReturn");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VACATEDBEDNUMBER", "VacatedBedNumber");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-DATEONHOMELEAVE", "DateOnHomeLeave");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedWaitingAreaPatient", "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.VTERiskAssessmentShortVo", "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ID", "ID_DischargedEpisode");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDATETIME", "DischargeDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ISACTIVE", "IsActive");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEDESTINATION", "DischargeDestination");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-METHODOFDISCHARGE", "MethodOfDischarge");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-WASTREATMENTDEFERRED", "WasTreatmentDeferred");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-TREATMENTDEFERREDREASON", "TreatmentDeferredReason");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-EIGHTEENWEEKCLOCKSTOPPED", "EighteenWeekClockStopped");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-ADMISSIONDETAIL", "AdmissionDetail");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.DischargeEpisodeBedInfo", "BO-1014100006-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-ISMATERNITY", "IsMaternity");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-NOOFINFANTS", "NoOfInfants");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedBedSpaceState", "BO-1014100009-COMMENT", "Comment");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-ID", "ID_PendingTransfers");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-TRANSFERREQUESTDATETIME", "TransferRequestDateTime");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-CURRENTSTATUS", "CurrentStatus");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-WARDTYPE", "WardType");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-CONSULTANT", "Consultant");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-SPECIALTY", "Specialty");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingTransferOut_" + componentIdentifier, "BO-1014100013-PASSPECIALTY", "PASSpecialty");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-ID", "ID_BedSpaceStateStatus");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-BEDSTATUS", "BedStatus");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-STATUSDATETIME", "StatusDateTime");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-REASONFORCLOSURE", "ReasonForClosure");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__CloseBedStatus_" + componentIdentifier, "BO-1014100010-ESTREOPENINGDATETIME", "EstReopeningDateTime");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-ID", "ID_PendingTransfers");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-TRANSFERREQUESTDATETIME", "TransferRequestDateTime");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-CURRENTSTATUS", "CurrentStatus");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-WARDTYPE", "WardType");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-CONSULTANT", "Consultant");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-SPECIALTY", "Specialty");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PendingInfantTransfer_" + componentIdentifier, "BO-1014100013-PASSPECIALTY", "PASSpecialty");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmnetWorklistVo_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmnetWorklistVo_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmnetWorklistVo_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-PASEVENT", "PasEvent");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__InpatientEpForVTERiskAssessmentVo_" + componentIdentifier, "BO-1014100000-VTERISKASSESSMENT", "VTERiskAssessment");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier, "BO-1072100100-ID", "ID_VTERiskAssessment");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__VTERiskAssessmentShortVo_" + componentIdentifier, "BO-1072100100-VTEASSESSMENTSTATUS", "VTEAssessmentStatus");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.BedInfoDialog.__internal_x_context__PatientElectiveListDischarge_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
