//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bedinfodialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.core.domain.BedInfoDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.BedInfoDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbWardTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbWardTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.WardType)
		{
			ims.core.vo.lookups.WardType instance = (ims.core.vo.lookups.WardType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbWardTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbWardTypeLookup()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().clear();
		ims.core.vo.lookups.WardTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getWardType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbWardTypeLookupValue(int id)
	{
		ims.core.vo.lookups.WardType instance = ims.core.vo.lookups.LookupHelper.getWardTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValue(instance);
	}
	protected final void defaultcmbWardTypeLookupValue()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabIn().cmbWardType().setValue((ims.core.vo.lookups.WardType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.WardType.class, engine.getFormName().getID(), ims.core.vo.lookups.WardType.TYPE_ID));
	}
	protected final void oncmbOutWardTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOutWardTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.WardType)
		{
			ims.core.vo.lookups.WardType instance = (ims.core.vo.lookups.WardType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOutWardTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOutWardTypeLookup()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().clear();
		ims.core.vo.lookups.WardTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getWardType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOutWardTypeLookupValue(int id)
	{
		ims.core.vo.lookups.WardType instance = ims.core.vo.lookups.LookupHelper.getWardTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValue(instance);
	}
	protected final void defaultcmbOutWardTypeLookupValue()
	{
		this.form.lyrDetail().tabTransfer().lyrTransfer().tabOut().cmbOutWardType().setValue((ims.core.vo.lookups.WardType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.WardType.class, engine.getFormName().getID(), ims.core.vo.lookups.WardType.TYPE_ID));
	}
	protected final void oncmbDischargeReasonForClosureValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForBedClosure existingInstance = (ims.core.vo.lookups.ReasonForBedClosure)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDischargeReasonForClosureLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ReasonForBedClosure)
		{
			ims.core.vo.lookups.ReasonForBedClosure instance = (ims.core.vo.lookups.ReasonForBedClosure)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDischargeReasonForClosureLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForBedClosure existingInstance = (ims.core.vo.lookups.ReasonForBedClosure)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDischargeReasonForClosureLookup()
	{
		this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().clear();
		ims.core.vo.lookups.ReasonForBedClosureCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getReasonForBedClosure(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDischargeReasonForClosureLookupValue(int id)
	{
		ims.core.vo.lookups.ReasonForBedClosure instance = ims.core.vo.lookups.LookupHelper.getReasonForBedClosureInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().setValue(instance);
	}
	protected final void defaultcmbDischargeReasonForClosureLookupValue()
	{
		this.form.lyrDetail().tabDischarge().cmbDischargeReasonForClosure().setValue((ims.core.vo.lookups.ReasonForBedClosure)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ReasonForBedClosure.class, engine.getFormName().getID(), ims.core.vo.lookups.ReasonForBedClosure.TYPE_ID));
	}
	protected final void oncmbReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabDischarge().cmbReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TreatmentDeferredReason existingInstance = (ims.core.vo.lookups.TreatmentDeferredReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.TreatmentDeferredReason)
		{
			ims.core.vo.lookups.TreatmentDeferredReason instance = (ims.core.vo.lookups.TreatmentDeferredReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TreatmentDeferredReason existingInstance = (ims.core.vo.lookups.TreatmentDeferredReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabDischarge().cmbReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbReasonLookup()
	{
		this.form.lyrDetail().tabDischarge().cmbReason().clear();
		ims.core.vo.lookups.TreatmentDeferredReasonCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTreatmentDeferredReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabDischarge().cmbReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbReasonLookupValue(int id)
	{
		ims.core.vo.lookups.TreatmentDeferredReason instance = ims.core.vo.lookups.LookupHelper.getTreatmentDeferredReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabDischarge().cmbReason().setValue(instance);
	}
	protected final void defaultcmbReasonLookupValue()
	{
		this.form.lyrDetail().tabDischarge().cmbReason().setValue((ims.core.vo.lookups.TreatmentDeferredReason)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TreatmentDeferredReason.class, engine.getFormName().getID(), ims.core.vo.lookups.TreatmentDeferredReason.TYPE_ID));
	}
	protected final void oncmbDischargeDestinationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabDischarge().cmbDischargeDestination().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.DischargeDestination existingInstance = (ims.coe.vo.lookups.DischargeDestination)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDischargeDestinationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.coe.vo.lookups.DischargeDestination)
		{
			ims.coe.vo.lookups.DischargeDestination instance = (ims.coe.vo.lookups.DischargeDestination)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDischargeDestinationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.DischargeDestination existingInstance = (ims.coe.vo.lookups.DischargeDestination)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabDischarge().cmbDischargeDestination().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDischargeDestinationLookup()
	{
		this.form.lyrDetail().tabDischarge().cmbDischargeDestination().clear();
		ims.coe.vo.lookups.DischargeDestinationCollection lookupCollection = ims.coe.vo.lookups.LookupHelper.getDischargeDestination(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabDischarge().cmbDischargeDestination().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDischargeDestinationLookupValue(int id)
	{
		ims.coe.vo.lookups.DischargeDestination instance = ims.coe.vo.lookups.LookupHelper.getDischargeDestinationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabDischarge().cmbDischargeDestination().setValue(instance);
	}
	protected final void defaultcmbDischargeDestinationLookupValue()
	{
		this.form.lyrDetail().tabDischarge().cmbDischargeDestination().setValue((ims.coe.vo.lookups.DischargeDestination)domain.getLookupService().getDefaultInstance(ims.coe.vo.lookups.DischargeDestination.class, engine.getFormName().getID(), ims.coe.vo.lookups.DischargeDestination.TYPE_ID));
	}
	protected final void oncmbMethodDischargeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabDischarge().cmbMethodDischarge().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfDischarge existingInstance = (ims.core.vo.lookups.MethodOfDischarge)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMethodDischargeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MethodOfDischarge)
		{
			ims.core.vo.lookups.MethodOfDischarge instance = (ims.core.vo.lookups.MethodOfDischarge)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMethodDischargeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfDischarge existingInstance = (ims.core.vo.lookups.MethodOfDischarge)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabDischarge().cmbMethodDischarge().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMethodDischargeLookup()
	{
		this.form.lyrDetail().tabDischarge().cmbMethodDischarge().clear();
		ims.core.vo.lookups.MethodOfDischargeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMethodOfDischarge(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabDischarge().cmbMethodDischarge().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMethodDischargeLookupValue(int id)
	{
		ims.core.vo.lookups.MethodOfDischarge instance = ims.core.vo.lookups.LookupHelper.getMethodOfDischargeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabDischarge().cmbMethodDischarge().setValue(instance);
	}
	protected final void defaultcmbMethodDischargeLookupValue()
	{
		this.form.lyrDetail().tabDischarge().cmbMethodDischarge().setValue((ims.core.vo.lookups.MethodOfDischarge)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MethodOfDischarge.class, engine.getFormName().getID(), ims.core.vo.lookups.MethodOfDischarge.TYPE_ID));
	}
	protected final void oncmbCloseReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabCloseBed().cmbCloseReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForBedClosure existingInstance = (ims.core.vo.lookups.ReasonForBedClosure)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCloseReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ReasonForBedClosure)
		{
			ims.core.vo.lookups.ReasonForBedClosure instance = (ims.core.vo.lookups.ReasonForBedClosure)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCloseReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ReasonForBedClosure existingInstance = (ims.core.vo.lookups.ReasonForBedClosure)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabCloseBed().cmbCloseReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCloseReasonLookup()
	{
		this.form.lyrDetail().tabCloseBed().cmbCloseReason().clear();
		ims.core.vo.lookups.ReasonForBedClosureCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getReasonForBedClosure(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabCloseBed().cmbCloseReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCloseReasonLookupValue(int id)
	{
		ims.core.vo.lookups.ReasonForBedClosure instance = ims.core.vo.lookups.LookupHelper.getReasonForBedClosureInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabCloseBed().cmbCloseReason().setValue(instance);
	}
	protected final void defaultcmbCloseReasonLookupValue()
	{
		this.form.lyrDetail().tabCloseBed().cmbCloseReason().setValue((ims.core.vo.lookups.ReasonForBedClosure)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ReasonForBedClosure.class, engine.getFormName().getID(), ims.core.vo.lookups.ReasonForBedClosure.TYPE_ID));
	}
	protected final void oncmbInfantWardTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInfantWardTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.WardType)
		{
			ims.core.vo.lookups.WardType instance = (ims.core.vo.lookups.WardType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInfantWardTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInfantWardTypeLookup()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().clear();
		ims.core.vo.lookups.WardTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getWardType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInfantWardTypeLookupValue(int id)
	{
		ims.core.vo.lookups.WardType instance = ims.core.vo.lookups.LookupHelper.getWardTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setValue(instance);
	}
	protected final void defaultcmbInfantWardTypeLookupValue()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantTransfer().cmbInfantWardType().setValue((ims.core.vo.lookups.WardType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.WardType.class, engine.getFormName().getID(), ims.core.vo.lookups.WardType.TYPE_ID));
	}
	protected final void oncmbInfantDischargeDestValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.DischargeDestination existingInstance = (ims.coe.vo.lookups.DischargeDestination)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInfantDischargeDestLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.coe.vo.lookups.DischargeDestination)
		{
			ims.coe.vo.lookups.DischargeDestination instance = (ims.coe.vo.lookups.DischargeDestination)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInfantDischargeDestLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.coe.vo.lookups.DischargeDestination existingInstance = (ims.coe.vo.lookups.DischargeDestination)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInfantDischargeDestLookup()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().clear();
		ims.coe.vo.lookups.DischargeDestinationCollection lookupCollection = ims.coe.vo.lookups.LookupHelper.getDischargeDestination(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInfantDischargeDestLookupValue(int id)
	{
		ims.coe.vo.lookups.DischargeDestination instance = ims.coe.vo.lookups.LookupHelper.getDischargeDestinationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setValue(instance);
	}
	protected final void defaultcmbInfantDischargeDestLookupValue()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantDischargeDest().setValue((ims.coe.vo.lookups.DischargeDestination)domain.getLookupService().getDefaultInstance(ims.coe.vo.lookups.DischargeDestination.class, engine.getFormName().getID(), ims.coe.vo.lookups.DischargeDestination.TYPE_ID));
	}
	protected final void oncmbInfantMethodDischargeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfDischarge existingInstance = (ims.core.vo.lookups.MethodOfDischarge)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInfantMethodDischargeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MethodOfDischarge)
		{
			ims.core.vo.lookups.MethodOfDischarge instance = (ims.core.vo.lookups.MethodOfDischarge)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInfantMethodDischargeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfDischarge existingInstance = (ims.core.vo.lookups.MethodOfDischarge)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInfantMethodDischargeLookup()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().clear();
		ims.core.vo.lookups.MethodOfDischargeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMethodOfDischarge(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInfantMethodDischargeLookupValue(int id)
	{
		ims.core.vo.lookups.MethodOfDischarge instance = ims.core.vo.lookups.LookupHelper.getMethodOfDischargeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValue(instance);
	}
	protected final void defaultcmbInfantMethodDischargeLookupValue()
	{
		this.form.lyrDetail().tabInfants().lyrInfants().tabInfantDischarge().cmbInfantMethodDischarge().setValue((ims.core.vo.lookups.MethodOfDischarge)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MethodOfDischarge.class, engine.getFormName().getID(), ims.core.vo.lookups.MethodOfDischarge.TYPE_ID));
	}
	protected final void oncmbPatientStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientStatus)
		{
			ims.core.vo.lookups.PatientStatus instance = (ims.core.vo.lookups.PatientStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientStatus existingInstance = (ims.core.vo.lookups.PatientStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientStatusLookup()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().clear();
		ims.core.vo.lookups.PatientStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PatientStatus instance = ims.core.vo.lookups.LookupHelper.getPatientStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().setValue(instance);
	}
	protected final void defaultcmbPatientStatusLookupValue()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbPatientStatus().setValue((ims.core.vo.lookups.PatientStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientStatus.TYPE_ID));
	}
	protected final void oncmbSourceOfReferralValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfReferral existingInstance = (ims.core.vo.lookups.SourceOfReferral)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSourceOfReferralLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.SourceOfReferral)
		{
			ims.core.vo.lookups.SourceOfReferral instance = (ims.core.vo.lookups.SourceOfReferral)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSourceOfReferralLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfReferral existingInstance = (ims.core.vo.lookups.SourceOfReferral)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSourceOfReferralLookup()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().clear();
		ims.core.vo.lookups.SourceOfReferralCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSourceOfReferral(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSourceOfReferralLookupValue(int id)
	{
		ims.core.vo.lookups.SourceOfReferral instance = ims.core.vo.lookups.LookupHelper.getSourceOfReferralInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().setValue(instance);
	}
	protected final void defaultcmbSourceOfReferralLookupValue()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfReferral().setValue((ims.core.vo.lookups.SourceOfReferral)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.SourceOfReferral.class, engine.getFormName().getID(), ims.core.vo.lookups.SourceOfReferral.TYPE_ID));
	}
	protected final void oncmbAdmWardTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAdmWardTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.WardType)
		{
			ims.core.vo.lookups.WardType instance = (ims.core.vo.lookups.WardType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAdmWardTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.WardType existingInstance = (ims.core.vo.lookups.WardType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAdmWardTypeLookup()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().clear();
		ims.core.vo.lookups.WardTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getWardType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAdmWardTypeLookupValue(int id)
	{
		ims.core.vo.lookups.WardType instance = ims.core.vo.lookups.LookupHelper.getWardTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().setValue(instance);
	}
	protected final void defaultcmbAdmWardTypeLookupValue()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbAdmWardType().setValue((ims.core.vo.lookups.WardType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.WardType.class, engine.getFormName().getID(), ims.core.vo.lookups.WardType.TYPE_ID));
	}
	protected final void oncmbMethodOfAdmissionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfAdmission existingInstance = (ims.core.vo.lookups.MethodOfAdmission)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMethodOfAdmissionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MethodOfAdmission)
		{
			ims.core.vo.lookups.MethodOfAdmission instance = (ims.core.vo.lookups.MethodOfAdmission)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMethodOfAdmissionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MethodOfAdmission existingInstance = (ims.core.vo.lookups.MethodOfAdmission)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMethodOfAdmissionLookup()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().clear();
		ims.core.vo.lookups.MethodOfAdmissionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMethodOfAdmission(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMethodOfAdmissionLookupValue(int id)
	{
		ims.core.vo.lookups.MethodOfAdmission instance = ims.core.vo.lookups.LookupHelper.getMethodOfAdmissionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().setValue(instance);
	}
	protected final void defaultcmbMethodOfAdmissionLookupValue()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbMethodOfAdmission().setValue((ims.core.vo.lookups.MethodOfAdmission)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MethodOfAdmission.class, engine.getFormName().getID(), ims.core.vo.lookups.MethodOfAdmission.TYPE_ID));
	}
	protected final void oncmbSourceOfAdmissionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfAdmission existingInstance = (ims.core.vo.lookups.SourceOfAdmission)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSourceOfAdmissionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.SourceOfAdmission)
		{
			ims.core.vo.lookups.SourceOfAdmission instance = (ims.core.vo.lookups.SourceOfAdmission)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSourceOfAdmissionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SourceOfAdmission existingInstance = (ims.core.vo.lookups.SourceOfAdmission)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSourceOfAdmissionLookup()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().clear();
		ims.core.vo.lookups.SourceOfAdmissionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSourceOfAdmission(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSourceOfAdmissionLookupValue(int id)
	{
		ims.core.vo.lookups.SourceOfAdmission instance = ims.core.vo.lookups.LookupHelper.getSourceOfAdmissionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().setValue(instance);
	}
	protected final void defaultcmbSourceOfAdmissionLookupValue()
	{
		this.form.lyrDetail().tabAdmissionDetail().cmbSourceOfAdmission().setValue((ims.core.vo.lookups.SourceOfAdmission)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.SourceOfAdmission.class, engine.getFormName().getID(), ims.core.vo.lookups.SourceOfAdmission.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.core.domain.BedInfoDialog domain;
}
