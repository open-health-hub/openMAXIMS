//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.21 build 41021.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.supportnetworkprofessionalservices;

import java.util.ArrayList;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.NurseVo;
import ims.core.vo.PatientNoSupportNetworkServicesInfoVo;
import ims.core.vo.PatientNoSupportNetworkStatusInfoVo;
import ims.core.vo.PersonName;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.SuppNetworkServiceProfessionDetailVo;
import ims.core.vo.SupportNetworkProfessionalVo;
import ims.core.vo.SupportNetworkProfessionalVoCollection;
import ims.core.vo.SupportNetworkServicesVo;
import ims.core.vo.SupportNetworkServicesVoCollection;
import ims.core.vo.TherapistVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientSupportNetworkStatus;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceCategoryCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	private void initialize() {
		if (form.getGlobalContext().Core.getCurrentCareContext() == null)
		{
			form.btnCopyFrom().setVisible(false);

		}
		form.getLocalContext().setisTabProfessional(Boolean.TRUE);
	}

	private void initializeNoneAtPresent() 
	{		
		PatientNoSupportNetworkServicesInfoVo voPatientNoSupportNetworkServicesInfo = domain.getPatientNoSupportNetworkServicesInfo(form.getGlobalContext().Core.getPatientShort());
		PatientNoSupportNetworkStatusInfoVo  voPatientNoSupportNetworkStatusInfo = domain.getPatientNoSupportNetworkStatusInfo(form.getGlobalContext().Core.getPatientShort());
		
		form.getLocalContext().setPatientNoSupportNetworkServicesInfo(voPatientNoSupportNetworkServicesInfo);
		form.getLocalContext().setPatientNoSupportNetworkStatusInfo(voPatientNoSupportNetworkStatusInfo);
			
		if(voPatientNoSupportNetworkServicesInfo != null && 
				voPatientNoSupportNetworkServicesInfo.getSupportNetworkServiceStatusIsNotNull() && 
					voPatientNoSupportNetworkServicesInfo.getSupportNetworkServiceStatus().equals(PatientSupportNetworkStatus.NONEATPRESENT))						
		{			
			form.lyrProServices().tabServices().lblNoneAtPresentSer().setVisible(true);			
			form.lyrProServices().tabServices().lblNoneAtPresentSer().setTooltip(voPatientNoSupportNetworkServicesInfo.getAuthoringInformationIsNotNull()? voPatientNoSupportNetworkServicesInfo.getAuthoringInformation().toString("<br>") : "");
		}
		else
		{
			form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setVisible(false);
			form.lyrProServices().tabServices().lblNoneAtPresentSer().setVisible(false);
		}
		
		if (voPatientNoSupportNetworkStatusInfo != null && 
					voPatientNoSupportNetworkStatusInfo.getSupportNetworkStatusIsNotNull() && 
						voPatientNoSupportNetworkStatusInfo.getSupportNetworkStatus().equals(PatientSupportNetworkStatus.NONEATPRESENT))
		{
			form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setVisible(true);
			form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setTooltip(voPatientNoSupportNetworkStatusInfo.getAuthoringInformationIsNotNull() ? voPatientNoSupportNetworkStatusInfo.getAuthoringInformation().toString("<br>") : "");
		}
		else
		{
			form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setVisible(false);
			form.lyrProServices().tabServices().lblNoneAtPresentSer().setVisible(false);
		}		
	}

	private void open()
	{		
		form.lyrProServices().tabProfessional().grpProfFilter().setValue(GenForm.lyrProServicesLayer.tabProfessionalContainer.grpProfFilterEnumeration.rdoActiveProf);
		form.lyrProServices().tabServices().grpServiceFilter().setValue(GenForm.lyrProServicesLayer.tabServicesContainer.grpServiceFilterEnumeration.rdoActiveServices);
		form.btnCopyFrom().setVisible(false);
		form.btnUpdate().setEnabled(false);
		form.btnInactiveRecord().setEnabled(false);

		resetRIEContextVariable();
		form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().getLIPNewItem().setVisible(true); // always
																// allow new

		form.lyrProServices().tabProfessional().chkSupplyHcp().setEnabled(false);
		form.lyrProServices().tabServices().chkSupplyServiceDetail().setEnabled(false);

		form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
		form.lyrProServices().tabProfessional().qmbHcpName().setVisible(true);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(false);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setVisible(true);

		form.lyrProServices().tabProfessional().txtHcpName().setVisible(false);
		form.lyrProServices().tabProfessional().txtLocation().setVisible(false);

		form.lyrProServices().tabServices().cmbLocation().setEnabled(false);
		form.lyrProServices().tabServices().cmbLocation().setVisible(true);
		form.lyrProServices().tabServices().txtAreaLoc().setVisible(false);

		form.lyrProServices().settabProfessionalEnabled(true);
		form.lyrProServices().settabServicesEnabled(true);
		form.lyrProServices().tabProfessional().setHeaderEnabled(true);
		form.lyrProServices().tabServices().setHeaderEnabled(true);

		// check patient has GP deteails WDEV-1637
		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			form.getGlobalContext().Core.setGPDetails(domain.getGPDetails(form.getGlobalContext().Core.getPatientShort()));
			form.getGlobalContext().Core.setGPSurgery(domain.getGpSurgeryByPatient(form.getGlobalContext().Core.getPatientShort()));
			if (form.getGlobalContext().Core.getGPDetailsIsNotNull())
				form.lnkGPDetails().setVisible(true);
			else
				form.lnkGPDetails().setVisible(false);
		}

		form.btnUpdate().setEnabled(false);

		// set selection back
		if (form.lyrProServices().tabProfessional().isVisible())
		{
			listSupportNetworkProfessional(false);
			clearProfDetails();
			loadProfessionCombo();

			if (form.getLocalContext().getsupportNetworkProfessionalIsNotNull())
			{
				// need to get timestamp from record retrieved from List call.
				GenForm.lyrProServicesLayer.tabProfessionalContainer.grdProfessionalRow row = form.lyrProServices().tabProfessional().grdProfessional().getRowByValue(form.getLocalContext().getsupportNetworkProfessional());
				if (row != null && row.getValue() != null)
				{
					form.getLocalContext().setsupportNetworkProfessional(row.getValue());
					form.lyrProServices().tabProfessional().grdProfessional().setValue(form.getLocalContext().getsupportNetworkProfessional());
					populateInstanceControl(form.lyrProServices().tabProfessional().grdProfessional().getValue());
					form.btnUpdate().setEnabled(true);

				}
				else
					clearProfDetails();
			}
			//WDEV-17881 copy button disabled when there are active records in the grid
			form.btnCopyFrom().setEnabled(!foundActiveSupportNetworkProfessionals(form.lyrProServices().tabProfessional().grdProfessional().getValues()));
		}
		else
		{
			listSupportNetworkServices(false);
			clearServiceDetails();
			loadServiceCombo();

			if (form.getLocalContext().getsupportNetworkServiceIsNotNull())
			{
				// need to get timestamp from record retrieved from List call.
				GenForm.lyrProServicesLayer.tabServicesContainer.grdServicesRow row = form.lyrProServices().tabServices().grdServices().getRowByValue(form.getLocalContext().getsupportNetworkService());
				if (row != null && row.getValue() != null)
				{
					form.getLocalContext().setsupportNetworkService(row.getValue());
					form.lyrProServices().tabServices().grdServices().setValue(form.getLocalContext().getsupportNetworkService());
					populateInstanceControl(form.lyrProServices().tabServices().grdServices().getValue());
					form.btnUpdate().setEnabled(true);

				}
				else
					clearServiceDetails();
			}
			//WDEV-17881 copy button disabled when there are active records in the grid
			form.btnCopyFrom().setEnabled(!foundActiveSupportNetworkServices(form.lyrProServices().tabServices().grdServices().getValues()));
					
		}

		form.setMode(FormMode.VIEW);
		
		if (form.lyrProServices().tabProfessional().isVisible())
		{
			PatientNoSupportNetworkStatusInfoVo voPatientNoSupportNetworkStatusInfo = form.getLocalContext().getPatientNoSupportNetworkStatusInfo();
			
			if(voPatientNoSupportNetworkStatusInfo!=null && 
					(voPatientNoSupportNetworkStatusInfo.getSupportNetworkStatusIsNotNull() && 
							voPatientNoSupportNetworkStatusInfo.getSupportNetworkStatus().equals(PatientSupportNetworkStatus.NONEATPRESENT))){
				
				form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setVisible(true);
			}
			else
				form.lyrProServices().tabProfessional().lblNoneAtPresentPro().setVisible(false);
		}
		else
		{
			PatientNoSupportNetworkServicesInfoVo voPatientNoSupportNetworkServicesInfo = form.getLocalContext().getPatientNoSupportNetworkServicesInfo();
			
			if(voPatientNoSupportNetworkServicesInfo !=null && 
					(voPatientNoSupportNetworkServicesInfo.getSupportNetworkServiceStatusIsNotNull() && 
							voPatientNoSupportNetworkServicesInfo.getSupportNetworkServiceStatus().equals(PatientSupportNetworkStatus.NONEATPRESENT))){
				
				form.lyrProServices().tabServices().lblNoneAtPresentSer().setVisible(true);
			}
			else
				form.lyrProServices().tabServices().lblNoneAtPresentSer().setVisible(false);
		}
		
	}

	private void loadProfessionCombo()
	{
		HcpDisTypeCollection coll = LookupHelper.getHcpDisType(domain.getLookupService());
		TreeNode[] rootNodes = coll.getRootNodes();
		if (rootNodes != null)
		{
			for (int i = 0; i < rootNodes.length; i++)
			{
				HcpDisType lkParent = (HcpDisType) rootNodes[i];
				if (lkParent.isActive() == true)
					form.lyrProServices().tabProfessional().cmbProfessional().newRow(lkParent, lkParent.getText());
			}
		}
	}

	private void loadServiceCombo()
	{
		ServiceCategoryCollection excludedColl = new ServiceCategoryCollection();
		excludedColl.add(ServiceCategory.PATHOLOGY_DISCIPLINE);
		excludedColl.add(ServiceCategory.RADIOLOGY_MODALITY);
		// WDEV-1913
		ServiceVoCollection voCollService = domain.listService(excludedColl);
		form.lyrProServices().tabServices().cmbService().clear();

		for (int i = 0; i < voCollService.size(); i++)
			form.lyrProServices().tabServices().cmbService().newRow(voCollService.get(i), voCollService.get(i).getServiceName());

	}

	private void listSupportNetworkProfessional(boolean bFromPrevoiousEpisode)
	{
		SupportNetworkProfessionalVoCollection voColl = null;
		if (bFromPrevoiousEpisode == false)
		{
			Boolean bActiveOnly = Boolean.FALSE;
			if (form.lyrProServices().tabProfessional().grpProfFilter().getValue().equals(GenForm.lyrProServicesLayer.tabProfessionalContainer.grpProfFilterEnumeration.rdoActiveProf))
				bActiveOnly = Boolean.TRUE;

			/*
			 * if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			 * voColl =
			 * domain.listSupportNetworkProfessionalByCareContext(form.getGlobalContext().Core.getCurrentCareContext(),
			 * bActiveOnly); else voColl =
			 * domain.listSupportNetworkProfessionalByPatient(bActiveOnly,
			 * form.getGlobalContext().Core.getPatientShort());
			 */

			// WDEV-2257 - previous commented code did it selectively by
			// CareContext or Patient
			voColl = domain.listSupportNetworkProfessionalByPatient(bActiveOnly, form.getGlobalContext().Core.getPatientShort());
		}
		else
		{
			voColl = form.getGlobalContext().COE.getSupportNetworkProfessionalCollection();
		}

		SupportNetworkProfessionalVo voProf = null;
		GenForm.lyrProServicesLayer.tabProfessionalContainer.grdProfessionalRow row = null;

		form.lyrProServices().tabProfessional().grdProfessional().getRows().clear();

		if (voColl == null)
			return;

		boolean bActiveProfessionals = false;
		for (int i = 0; i < voColl.size(); i++)
		{
			voProf = voColl.get(i);
			row = form.lyrProServices().tabProfessional().grdProfessional().getRows().newRow();

			if (voProf.getMOSIsNotNull())
			{
				row.setColName(voProf.getMOS().toString());
			}
			else if (voProf.getSuppliedProfessionalIsNotNull())
			{
				row.setColName(voProf.getSuppliedProfessional().getName());
				row.setColWorkPhone(voProf.getSuppliedProfessional().getWorkPhone());
			}

			if (voProf.getHcpSubTypeIsNotNull())
				row.setColProfessionService(voProf.getHcpSubType().getText());

			if (voProf.getCurrentLocationIsNotNull() && voProf.getCurrentLocation().getAddressIsNotNull())
			{
				row.setColWorkPhone(voProf.getCurrentLocation().getAddress().getPhone());
			}

			if (voProf.getIsCurrActiveProfSupp().booleanValue()){
				row.setColIsActive(form.getImages().Core.AnswerBox_Yes);
				bActiveProfessionals = true;
			}
			else
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_No);
				row.setBackColor(Color.LightGray);
			}

			row.setValue(voProf);
		}
		
		form.getLocalContext().setActiveProfessionals(bActiveProfessionals);

		SupportNetworkProfessionalVo voSupportNetworkProfessional = form.getLocalContext().getsupportNetworkProfessional();
		if (voSupportNetworkProfessional != null && form.lyrProServices().tabProfessional().grdProfessional().getRowByValue(voSupportNetworkProfessional) != null)
		{
			form.lyrProServices().tabProfessional().grdProfessional().setValue(voSupportNetworkProfessional);
			grdProSelectionChanged();
		}
	}

	private void checkPreviousEpisodes()
	{
		CareContextShortVoCollection voContexts = form.getGlobalContext().Core.getSupportNetworkPreviousCareContexts();
		if (voContexts == null)
			voContexts = domain.listCareContexts(form.getGlobalContext().Core.getPatientShort());

		if (voContexts != null && voContexts.size() > 1)
		{
			if (form.lyrProServices().tabProfessional().isVisible())
			{
				if (!foundActiveSupportNetworkProfessionals(form.lyrProServices().tabProfessional().grdProfessional().getValues())) //WDEV-17881
				{
					form.getGlobalContext().Core.setSupportNetworkPreviousCareContexts(voContexts);
					form.btnCopyFrom().setVisible(true);
				}
				else
				{
					form.btnCopyFrom().setVisible(false);
				}
			}
			if (form.lyrProServices().tabServices().isVisible())
			{
				if (!foundActiveSupportNetworkServices(form.lyrProServices().tabServices().grdServices().getValues())) //WDEV-17881
				{
					form.getGlobalContext().Core.setSupportNetworkPreviousCareContexts(voContexts);
					form.btnCopyFrom().setVisible(true);
				}
				else
				{
					form.btnCopyFrom().setVisible(false);
				}
			}
		}
	}

	private void clearProfDetails()
	{
		form.lyrProServices().tabProfessional().cmbProfessional().setValue(null);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(null);
		form.lyrProServices().tabProfessional().qmbHcpName().setValue(null);
		form.lyrProServices().tabProfessional().cmbHcpSubType().setValue(null);
		form.lyrProServices().tabProfessional().txtHcpName().setValue(null);
		form.lyrProServices().tabProfessional().chkSupplyHcp().setValue(false);
		form.lyrProServices().tabProfessional().txtAddressPro().setValue(null);
		form.lyrProServices().tabProfessional().txtEmailPro().setValue(null);
		form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(null);
		form.lyrProServices().tabProfessional().customControlAuth().setValue(null);
		form.lyrProServices().tabProfessional().txtWorkPh().setValue(null);
		form.lyrProServices().tabProfessional().txtLocation().setValue(null);
		form.getGlobalContext().COE.setSupportNetworkSelectedLocation(null);
	}

	private boolean saveProfessional()
	{
		SupportNetworkProfessionalVo voProf = form.getLocalContext().getsupportNetworkProfessional();
		
		ArrayList<String> screenErrors = new ArrayList<String>();

		if (form.lyrProServices().tabProfessional().cmbProfessional().getValue() == null)
		{
			screenErrors.add("Profession is mandatory");
		}

		if (form.lyrProServices().tabProfessional().cmbHcpSubType().getValue() == null)
		{
			screenErrors.add("Type is mandatory");
		}

		if ((!form.lyrProServices().tabProfessional().chkSupplyHcp().getValue()) && form.lyrProServices().tabProfessional().qmbHcpName().isEnabled() && form.lyrProServices().tabProfessional().qmbHcpName().getValue() == null)
		{
			screenErrors.add("Hcp Name is mandatory");
		}
		else if ((form.lyrProServices().tabProfessional().chkSupplyHcp().getValue()) && (form.lyrProServices().tabProfessional().txtHcpName().getValue() == null))
		{
			screenErrors.add("Hcp Name is mandatory");
		}

		String[] sScreenErrors = screenErrors(screenErrors);
		String[] arrErrors = voProf.validate(sScreenErrors);
		if(arrErrors!=null)
		{
			engine.showErrors(arrErrors);
			SupportNetworkProfessionalVo voProfessional = new SupportNetworkProfessionalVo();
			form.getLocalContext().setsupportNetworkProfessional(voProfessional);
			return false;
		}

		try
		{
			// WDEV-2257 - save based on Patient Only
			domain.saveSupportNetworkProfessionaForPatient(voProf, form.getGlobalContext().Core.getPatientShort());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		savePatientNoSupportNetworkStatusInfo(false);

		return true;
	}

	private String[] screenErrors(ArrayList screenErrors) {
		String[] arrAllErrors = null;
		
		arrAllErrors = new String[screenErrors.size()];		
			
		for(int i=0;i<screenErrors.size();i++)
			arrAllErrors[i] = (String)screenErrors.get(i);	
				
		return arrAllErrors;
	}

	private void populateProfessionalDataFromScreen()
	{
		SupportNetworkProfessionalVo voProf = form.getLocalContext().getsupportNetworkProfessional();

		if(voProf.getIsCurrActiveProfSupp()==null)
			voProf.setIsCurrActiveProfSupp(Boolean.TRUE);

		// Professional details
		if (form.lyrProServices().tabProfessional().chkSupplyHcp().getValue())
		{
			if (voProf.getSuppliedProfessional() == null)
			{
				voProf.setProfession(form.lyrProServices().tabProfessional().cmbProfessional().getValue());
				voProf.setHcpSubType(form.lyrProServices().tabProfessional().cmbHcpSubType().getValue());
				voProf.setAuthorngInfo(form.lyrProServices().tabProfessional().customControlAuth().getValue());

				SuppNetworkServiceProfessionDetailVo voNetProfDetail = new SuppNetworkServiceProfessionDetailVo();
				voNetProfDetail.setAddress(form.lyrProServices().tabProfessional().txtAddressPro().getValue());
				voNetProfDetail.setEmailAddress(form.lyrProServices().tabProfessional().txtEmailPro().getValue());
				voNetProfDetail.setMobilePhone(form.lyrProServices().tabProfessional().txtMobilePhPro().getValue());
				voNetProfDetail.setName(form.lyrProServices().tabProfessional().txtHcpName().getValue());
				voNetProfDetail.setServiceLocation(form.lyrProServices().tabProfessional().txtLocation().getValue());
				voNetProfDetail.setWorkPhone(form.lyrProServices().tabProfessional().txtWorkPh().getValue());
				voProf.setSuppliedProfessional(voNetProfDetail);
				voProf.setMOS(null);
				voProf.setCurrentLocation(null);
			}
			else
			{
				// update location & details
				voProf.getSuppliedProfessional().setServiceLocation(form.lyrProServices().tabProfessional().txtLocation().getValue());
				voProf.getSuppliedProfessional().setAddress(form.lyrProServices().tabProfessional().txtAddressPro().getValue());
				voProf.getSuppliedProfessional().setMobilePhone(form.lyrProServices().tabProfessional().txtMobilePhPro().getValue());
				voProf.getSuppliedProfessional().setWorkPhone(form.lyrProServices().tabProfessional().txtWorkPh().getValue());
				voProf.getSuppliedProfessional().setEmailAddress(form.lyrProServices().tabProfessional().txtEmailPro().getValue());
				voProf.getSuppliedProfessional().setName(form.lyrProServices().tabProfessional().txtHcpName().getValue()); //WDEV-17560
			}
		}
		else
		{
			if (voProf.getMOS() == null)
			{
				voProf.setProfession(form.lyrProServices().tabProfessional().cmbProfessional().getValue());
				voProf.setHcpSubType(form.lyrProServices().tabProfessional().cmbHcpSubType().getValue());
				voProf.setAuthorngInfo(form.lyrProServices().tabProfessional().customControlAuth().getValue());

				MemberOfStaffShortVo voMOSShort = new MemberOfStaffShortVo();

				if (form.getLocalContext().getvoMemberOfStaffShort() != null)
					voMOSShort = form.getLocalContext().getvoMemberOfStaffShort();
				else
				{
					voMOSShort.setHcp(form.lyrProServices().tabProfessional().qmbHcpName().getValue());
					if (voMOSShort.getHcpIsNotNull())
					{
						voMOSShort.setName(voMOSShort.getHcp().getName());
						if (voMOSShort.getHcp().getMosIsNotNull())
						{
							voMOSShort.setPasCode(voMOSShort.getHcp().getMos().getPasCode());
							voMOSShort.setEmailAddress(voMOSShort.getHcp().getMos().getEmailAddress());
							voMOSShort.setBleep(voMOSShort.getHcp().getMos().getBleep());
						}
					}
				}
				voProf.setMOS(voMOSShort.countFieldsWithValue() > 0 ? voMOSShort : null);
				voProf.setSuppliedProfessional(null);
				voProf.setCurrentLocation(form.lyrProServices().tabProfessional().cmbLocationHcp().getValue());
			}
			else
			{
				// update location only
				voProf.setCurrentLocation(form.lyrProServices().tabProfessional().cmbLocationHcp().getValue());
			}
		}

		form.getLocalContext().setsupportNetworkProfessional(voProf);
	}

	protected void onQmbHcpNameValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		//wdev-10989
		form.getGlobalContext().COE.setSupportNetworkSelectedLocation(null);
		form.lyrProServices().tabProfessional().cmbLocationHcp().clear();
		//-----------
		loadLocationsForMos(false);
	}

	private void loadLocationsForMos(boolean bUpdate)
	{
		if (!bUpdate)
			clearProfessionalReadOnlyDetails();

		Hcp voHcp = form.lyrProServices().tabProfessional().qmbHcpName().getValue();

		MemberOfStaffShortVo voMosShort = voHcp != null ? voHcp.getMos() : null;
		form.getGlobalContext().COE.setSupportNetworkMos(voMosShort);

		if (voMosShort != null)
		{

			form.getLocalContext().setvoMemberOfStaffShort(voMosShort);

			LocShortVo voLoc = form.getGlobalContext().COE.getSupportNetworkSelectedLocation();
			// When Searching get the PrimaryLocation from the selected HCP (not
			// from context)
			if (voLoc == null || bUpdate)
			{
				LocShortVoCollection voLocShortVoColl = domain.listLocationsForMemberOfStaff(voHcp.getMos());

				if (voLocShortVoColl != null)
				{
					for (int i = 0; i < voLocShortVoColl.size(); i++)
					{
						if (form.lyrProServices().tabProfessional().qmbHcpName().getValue().getMosIsNotNull())
						{
							if ((voHcp.getMos().getPrimaryLocationIsNotNull()) && (voHcp.getMos().getPrimaryLocation().equals(voLocShortVoColl.get(i))))
								form.lyrProServices().tabProfessional().cmbLocationHcp().newRow(voLocShortVoColl.get(i), voLocShortVoColl.get(i).getName(), Color.Green);
							else
								form.lyrProServices().tabProfessional().cmbLocationHcp().newRow(voLocShortVoColl.get(i), voLocShortVoColl.get(i).getName(), Color.Black);
						}
					}

					if (!bUpdate)
						form.lyrProServices().tabProfessional().cmbLocationHcp().showOpened();
				}
			}
			else
			{
				form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(voLoc);
				setProfessionAddress(voLoc);
			}

			form.lyrProServices().tabProfessional().txtEmailPro().setValue(voMosShort.getEmailAddress());
			form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(voMosShort.getMobile());

		}

	}

	private void setProfessionAddress(LocShortVo voLoc)
	{
		form.lyrProServices().tabProfessional().txtAddressPro().setValue("");
		form.lyrProServices().tabProfessional().txtWorkPh().setValue("");

		if (voLoc == null)
			return;

		if (voLoc.getAddressIsNotNull())
		{
			String strAddress = voLoc.getAddress().toDisplayStringForMultiLineTextBox();
			form.lyrProServices().tabProfessional().txtAddressPro().setValue(strAddress);
			form.lyrProServices().tabProfessional().txtWorkPh().setValue(voLoc.getAddress().getPhone());
		}
	}

	protected void onCmbProfessionServiceValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		cmbProfSerChangedValue();
	}

	private void cmbProfSerChangedValue()
	{
		form.lyrProServices().tabProfessional().cmbHcpSubType().clear();
		form.lyrProServices().tabProfessional().qmbHcpName().clear();
		form.getGlobalContext().COE.setSupportNetworkSelectedLocation(null);
		form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
		setProfessionAddress(null);
		clearProfessionalReadOnlyDetails();
		if (form.lyrProServices().tabProfessional().cmbProfessional().getValue() == null)
		{
			return;
		}

		TreeNode[] childNodes = form.lyrProServices().tabProfessional().cmbProfessional().getValue().getChildren();
		if (childNodes != null)
		{
			for (int p = 0; p < childNodes.length; p++)
			{
				HcpDisType lkChild = (HcpDisType) childNodes[p];
				if (lkChild.isActive() == true)
				{
					form.lyrProServices().tabProfessional().cmbHcpSubType().newRow(lkChild, lkChild.getText());
				}
			}
		}
	}

	protected void onGridProSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		grdProSelectionChanged();
	}

	private void grdProSelectionChanged()
	{
		form.getLocalContext().setsupportNetworkService(null);
		form.getLocalContext().setsupportNetworkProfessional(form.lyrProServices().tabProfessional().grdProfessional().getValue());
		//---------------------------------------
		populateInstanceControl(form.getLocalContext().getsupportNetworkProfessional());
		//---------------------------------------
		if (form.lyrProServices().tabProfessional().grdProfessional().getValue().getIsCurrActiveProfSupp().booleanValue())
		{
			form.btnInactiveRecord().setEnabled(true);
			form.btnInactiveRecord().setVisible(true);// WDEV-1022
			form.btnUpdate().setEnabled(true);
			form.getContextMenus().getLIPUpdateItem().setVisible(true); //wdev-9625
		}
		else
		{
			form.btnInactiveRecord().setEnabled(false);
			form.btnInactiveRecord().setVisible(true);// WDEV-1022
			form.btnUpdate().setEnabled(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false); //wdev-9625
		}

		//form.btnUpdate().setEnabled(true);
		//populateInstanceControl(form.getLocalContext().getsupportNetworkProfessional());
	}

	private void populateInstanceControl(SupportNetworkProfessionalVo voProf)
	{
		clearProfDetails();
		form.getLocalContext().setRieRecord(voProf);
		form.getContextMenus().getLIPUpdateItem().setVisible(true);

		// profession
		if (voProf.getProfessionIsNotNull())
		{
			form.lyrProServices().tabProfessional().cmbProfessional().newRow(voProf.getProfession(), voProf.getProfession().getText());
			form.lyrProServices().tabProfessional().cmbProfessional().setValue(voProf.getProfession());
		}

		if (voProf.getHcpSubTypeIsNotNull())
		{
			// hcp type
			form.lyrProServices().tabProfessional().cmbHcpSubType().newRow(voProf.getHcpSubType(), voProf.getHcpSubType().getText());
			form.lyrProServices().tabProfessional().cmbHcpSubType().setValue(voProf.getHcpSubType());
		}

		if ((voProf.getSuppliedProfessional() == null) && (voProf.getMOSIsNotNull()))
		{
			form.lyrProServices().tabProfessional().chkSupplyHcp().setValue(false);
			// supplied from ref to MOS
			form.lyrProServices().tabProfessional().qmbHcpName().newRow(voProf.getMOS().getHcp(), voProf.getMOS().getHcp().toString());
			form.lyrProServices().tabProfessional().qmbHcpName().setValue(voProf.getMOS().getHcp());
			form.lyrProServices().tabProfessional().txtEmailPro().setValue(voProf.getMOS().getEmailAddress());
			form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(voProf.getMOS().getMobile());

			form.getGlobalContext().COE.setSupportNetworkSelectedLocation(voProf.getCurrentLocation());
			
			form.lyrProServices().tabProfessional().txtHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().txtHcpName().setVisible(false);
			form.lyrProServices().tabProfessional().txtLocation().setVisible(false);
			form.lyrProServices().tabProfessional().qmbHcpName().setVisible(true);
			form.lyrProServices().tabProfessional().cmbLocationHcp().setVisible(true);

			if (voProf.getCurrentLocationIsNotNull())
			{
				form.lyrProServices().tabProfessional().cmbLocationHcp().newRow(voProf.getCurrentLocation(), voProf.getCurrentLocation().getName(), Color.Black);
				form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(voProf.getCurrentLocation());
				showLocationProf();

			}
		}
		else if (voProf.getSuppliedProfessionalIsNotNull())
		{
			form.lyrProServices().tabProfessional().chkSupplyHcp().setValue(true);

			form.lyrProServices().tabProfessional().txtHcpName().setValue(voProf.getSuppliedProfessional().getName());
			form.lyrProServices().tabProfessional().txtLocation().setValue(voProf.getSuppliedProfessional().getServiceLocation());
			form.lyrProServices().tabProfessional().txtAddressPro().setValue(voProf.getSuppliedProfessional().getAddress());
			form.lyrProServices().tabProfessional().txtWorkPh().setValue(voProf.getSuppliedProfessional().getWorkPhone());
			form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(voProf.getSuppliedProfessional().getMobilePhone());
			form.lyrProServices().tabProfessional().txtEmailPro().setValue(voProf.getSuppliedProfessional().getEmailAddress());

			form.lyrProServices().tabProfessional().txtHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().txtHcpName().setVisible(true);
			form.lyrProServices().tabProfessional().txtLocation().setVisible(true);
			form.lyrProServices().tabProfessional().qmbHcpName().setVisible(false);
			form.lyrProServices().tabProfessional().cmbLocationHcp().setVisible(false);

		}

		form.lyrProServices().tabProfessional().customControlAuth().setValue(voProf.getAuthorngInfo());

		form.btnUpdate().setEnabled(true);
		
	}

	protected void onQmbHcpNameTextSubmited(String value) throws PresentationLogicException
	{
		form.lyrProServices().tabProfessional().qmbHcpName().clear();
		// HcpFilter filter = new HcpFilter();
		MemberOfStaffShortVo filter = new MemberOfStaffShortVo();
		PersonName name = new PersonName();
		name.setSurname(value);
		// filter.setQueryName(name);
		// filter.setName(name);
		// filter.setHcpType(form.lyrProServices().tabProfessional().cmbProfessional().getValue());

		Hcp voHcp = new Hcp();
		HcpDisType disType = form.lyrProServices().tabProfessional().cmbProfessional().getValue();
		// When Profession = "Other Discipline" id=-62, then use the subtyype as
		// a filer for the hcptype (that's the way it's implented in MOSAdmin)
		if (isOtherDiscipline(disType))
			disType = form.lyrProServices().tabProfessional().cmbHcpSubType().getValue();
		voHcp.setHcpType(disType);
		voHcp.setQueryName(name);
		filter.setName(name);
		//WDEV-2304 
		filter.setIsActive(Boolean.TRUE);
		filter.setHcp(voHcp);

		// cmHcpCollection hcpColl =
		// domain.listMembersOfStaff().listHcps(filter,form.lyrProServices().tabProfessional().cmbHcpSubType().getValue());
		// 08/09/2005 - List the MOS with Primary Locations (avoids an extra
		// call when we select the HCP)
		MemberOfStaffShortVoCollection mosColl = domain.listMembersOfStaffWithPrimaryLocations(filter,form.lyrProServices().tabProfessional().cmbHcpSubType().getValue());	//wdev-11144

		for (int i = 0; i < mosColl.size(); i++)
		{
			MemberOfStaffShortVo voMOSResult = new MemberOfStaffShortVo();
			Hcp voHcpResult = new Hcp();

			voMOSResult = mosColl.get(i);
			voHcpResult = voMOSResult.getHcp();
			if (isHcpType(voHcpResult))
				form.lyrProServices().tabProfessional().qmbHcpName().newRow(voHcpResult, voHcpResult.getName().toString());
		}
		int size = form.lyrProServices().tabProfessional().qmbHcpName().getValues().size();
		if (size == 1)
		{
			Hcp voHcpResult = (Hcp) form.lyrProServices().tabProfessional().qmbHcpName().getValues().get(0);
			form.lyrProServices().tabProfessional().qmbHcpName().setValue(voHcpResult);
			onQmbHcpNameValueChanged();
		}
		else if (size > 1)
		{
			form.lyrProServices().tabProfessional().qmbHcpName().showOpened();
		}
	}

	// Check if the type is the same
	private boolean isHcpType(Hcp voHcpResult)
	{
		if (voHcpResult == null)
			return false;
		HcpDisType hcpType = form.lyrProServices().tabProfessional().cmbProfessional().getValue();
		HcpDisType hcpSubType = form.lyrProServices().tabProfessional().cmbHcpSubType().getValue();
		// Don't check "Other Discipline"
		if (hcpType != null && isOtherDiscipline(hcpType) == false)
		{
			if (hcpSubType != null && voHcpResult != null && voHcpResult.getID_HcpIsNotNull())
			{
				HcpFilter filter = new HcpFilter();
				filter.setID_Hcp(voHcpResult.getID_Hcp());
				Hcp voHcp = domain.getHcp(filter);
				if (voHcp != null)
				{
					if (voHcp instanceof NurseVo)
					{
						if (hcpSubType.equals(((NurseVo) voHcp).getNurseType()))
							return true;
					}
					if (voHcp instanceof MedicVo)
					{
						if (hcpSubType.equals(((MedicVo) voHcp).getMedicType()))
							return true;
					}
					if (voHcp instanceof TherapistVo)
					{
						if (hcpSubType.equals(((TherapistVo) voHcp).getTherapistType()))
							return true;
					}

					return false;
				}
			}
		}

		return true;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{
			if (form.getLocalContext().getisTabProfessional().equals(Boolean.TRUE))
			{
				SupportNetworkProfessionalVo voProf = form.getLocalContext().getsupportNetworkProfessional();
				voProf.setIsCurrActiveProfSupp(Boolean.FALSE);
				form.getLocalContext().setsupportNetworkProfessional(voProf);
				if (saveProfessional())
				{
					open();
				}
			}
			else if (form.getLocalContext().getisTabProfessional().equals(Boolean.FALSE))
			{
				SupportNetworkServicesVo voService = form.getLocalContext().getsupportNetworkService();
				voService.setIsCurrentlyActive(Boolean.FALSE);
				form.getLocalContext().setsupportNetworkService(voService);
				if (saveService())
				{
					open();
				}
			}
		}
		else if (formName.equals(form.getForms().Core.SupportNetworkProfessionalDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SupportNetworkProfessionalVoCollection voColl = form.getGlobalContext().COE.getSupportNetworkProfessionalCollection();
				if (voColl != null)
				{
					form.getGlobalContext().COE.setSupportNetworkProfessionalCollection(voColl);

					try
					{
						domain.copyPreviousProfessionalData(form.getGlobalContext().COE.getSupportNetworkProfessionalCollection(), form.getGlobalContext().Core.getCurrentCareContext());
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						open();
						return;
					}
					open();
				}
			}
			if (result.equals(DialogResult.CANCEL))
			{
				open();
			}
		}
		else if (formName.equals(form.getForms().Core.SupportNetworkServicesDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				SupportNetworkServicesVoCollection voColl = form.getGlobalContext().COE.getSupportNetworkServiceCollection();
				if (form.getGlobalContext().COE.getSupportNetworkServiceCollection() != null)
				{
					form.getGlobalContext().COE.setSupportNetworkServiceCollection(voColl);

					try
					{
						domain.copyPreviousServiceData(form.getGlobalContext().COE.getSupportNetworkServiceCollection(), form.getGlobalContext().Core.getCurrentCareContext());
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						open();
						return;
					}
					open();
				}
			}
			if (result.equals(DialogResult.CANCEL))
			{
				open();
			}
		}
	}

	private void listSupportNetworkServices(boolean bFromPrevoiousEpisode)
	{
		SupportNetworkServicesVoCollection voColl = null;
		if (bFromPrevoiousEpisode == false)
		{
			Boolean bActiveOnly = Boolean.FALSE;
			if (form.lyrProServices().tabServices().grpServiceFilter().getValue().equals(GenForm.lyrProServicesLayer.tabServicesContainer.grpServiceFilterEnumeration.rdoActiveServices))
				bActiveOnly = Boolean.TRUE;

			/*
			 * if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			 * voColl =
			 * domain.listSupportNetworkServiceByCareContext(form.getGlobalContext().Core.getCurrentCareContext(),
			 * bActiveOnly); else voColl =
			 * domain.listSupportNetworkServicesByPatient(bActiveOnly,
			 * form.getGlobalContext().Core.getPatientShort());
			 */

			// WDEV-2257 - previous commented code did it selectively by
			// CareContext or Patient
			voColl = domain.listSupportNetworkServicesByPatient(bActiveOnly, form.getGlobalContext().Core.getPatientShort());
		}
		else
		{
			voColl = form.getGlobalContext().COE.getSupportNetworkServiceCollection();
		}

		SupportNetworkServicesVo voService = null;
		GenForm.lyrProServicesLayer.tabServicesContainer.grdServicesRow row = null;

		form.lyrProServices().tabServices().grdServices().getRows().clear();

		if (voColl == null)
			return;

		boolean bActiveSupports = false;
		for (int i = 0; i < voColl.size(); i++)
		{
			voService = voColl.get(i);
			row = form.lyrProServices().tabServices().grdServices().getRows().newRow();
			if (voService.getLocationServiceIsNotNull())
			{
				if (voService.getLocationService().getServiceIsNotNull())
					row.setColServiceType(voService.getLocationService().getService().getServiceName());

				if (voService.getLocationService().getContactIsNotNull())
				{
					row.setColPhoneNo(voService.getLocationService().getContact().getContactNumber());
					if (voService.getLocationService().getContact().getNameIsNotNull())
					{
						row.setColContactPerson(voService.getLocationService().getContact().getName().toString());
					}
				}
			}
			else
			{
				if (voService.getSuppliedServiceIsNotNull())
				{
					/*
					 * if
					 * (voService.getSuppliedService().getServiceLocationIsNotNull())
					 * row.setColServiceType(voService.getServiceIsNotNull()?voService.getService().getServiceName():null);
					 */

					row.setColServiceType(voService.getServiceIsNotNull() ? voService.getService().getServiceName() : "");

					if (voService.getSuppliedService().getWorkPhoneIsNotNull())
					{
						row.setColPhoneNo(voService.getSuppliedService().getWorkPhone());
						if (voService.getSuppliedService().getNameIsNotNull())
						{
							row.setColContactPerson(voService.getSuppliedService().getName().toString());
						}
					}

					row.setColContactPerson(voService.getSuppliedService().getName());
				}
			}

			row.setColFrequency(voService.getFrequencyOfService());

			if (voService.getIsCurrentlyActive().booleanValue()){
				row.setColIsActive(form.getImages().Core.AnswerBox_Yes);
				bActiveSupports = true;
			}
			else
			{
				row.setColIsActive(form.getImages().Core.AnswerBox_No);
				row.setBackColor(Color.LightGray);
			}

			row.setValue(voService);
		}
		
		form.getLocalContext().setActiveSupports(bActiveSupports);

		SupportNetworkServicesVo voSupportNetworkServices = form.getLocalContext().getsupportNetworkService();
		// Check to see if the record is displayed in the grid
		if (voSupportNetworkServices != null && form.lyrProServices().tabServices().grdServices().getRowByValue(voSupportNetworkServices) != null)
		{
			form.lyrProServices().tabServices().grdServices().setValue(voSupportNetworkServices);
			grdServicesSelectionChanged();
		}
	}
	
	//WDEV-17881
	private boolean foundActiveSupportNetworkServices(SupportNetworkServicesVo[] voColl)
	{
		if (voColl != null)
		{		
			for (int i=0;i< voColl.length; i++)
			{
				if (Boolean.TRUE.equals(voColl[i].getIsCurrentlyActive()))
				{
					return true;
				}
			}
		}
		return false;
	}

	private boolean foundActiveSupportNetworkProfessionals(SupportNetworkProfessionalVo[] voColl)
	{
		if (voColl != null)
		{	
			for (int i=0;i< voColl.length; i++)
			{
				if (Boolean.TRUE.equals(voColl[i].getIsCurrActiveProfSupp()))
				{
					return true;
				}
			}
		}
		return false;
	}

	private boolean saveService()
	{
		SupportNetworkServicesVo voService = form.getLocalContext().getsupportNetworkService();

		ArrayList screenErrors = new ArrayList();
		
		if (form.lyrProServices().tabServices().cmbService().getValue() == null)
		{
			screenErrors.add("Please select a Service Type");
		}

		if ((!form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue()) && form.lyrProServices().tabServices().cmbLocation().getValue() == null)
		{
			screenErrors.add("Please select a Location");
		}
		
		if ((form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue()) && form.lyrProServices().tabServices().txtAreaLoc().getValue() == null)
		{
			screenErrors.add("Please state a Location");
		}

		String[] sScreenErrors = screenErrors(screenErrors);
		if(sScreenErrors.length > 0)
		{
			engine.showErrors(sScreenErrors);
			return false;
		}
		
		String[] arrErrors = voService.validate();
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try
		{
			// WDEV-2257 - save based on Patient Only
			domain.saveSupportNetworkServicesForPatient(voService, form.getGlobalContext().Core.getPatientShort());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		savePatientNoSupportNetworkServicesInfo(false);

		return true;
	}

	private void populateServiceDataFromScreen()
	{
		SupportNetworkServicesVo voService = form.getLocalContext().getsupportNetworkService();

		if (voService.getID_SupportNetworkServices() == null)
		{
			voService.setIsCurrentlyActive(Boolean.TRUE);
			voService.setFrequencyOfService(form.lyrProServices().tabServices().txtFrequency().getValue());
			voService.setComments(form.lyrProServices().tabServices().txtCommentsService().getValue());

			if (form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue())
			{
				SuppNetworkServiceProfessionDetailVo voServiceProf = new SuppNetworkServiceProfessionDetailVo();

				voServiceProf.setAddress(form.lyrProServices().tabServices().txtAddressService().getValue());
				voServiceProf.setName(form.lyrProServices().tabServices().txtContactPerson().getValue());
				voServiceProf.setServiceLocation(form.lyrProServices().tabServices().txtAreaLoc().getValue());
				voServiceProf.setWorkPhone(form.lyrProServices().tabServices().txtPhoneNoService().getValue());
				// supplied area/location
				voService.setSuppliedService(voServiceProf);
			}
			else
			{
				if (form.getLocalContext().getlocationService() != null)
					voService.setLocationService(form.getLocalContext().getlocationService());
				voService.setSuppliedService(null);
			}
			voService.setAuthoringInfo(form.lyrProServices().tabServices().customControlAuthSer().getValue());
			voService.setService(form.lyrProServices().tabServices().cmbService().getValue());
		}
		else
		{
			voService.setFrequencyOfService(form.lyrProServices().tabServices().txtFrequency().getValue());
			voService.setComments(form.lyrProServices().tabServices().txtCommentsService().getValue());
			
			//WDEV-17560
			if (form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue() && voService.getSuppliedService() != null)
			{
				voService.getSuppliedService().setAddress(form.lyrProServices().tabServices().txtAddressService().getValue());
				voService.getSuppliedService().setName(form.lyrProServices().tabServices().txtContactPerson().getValue());
				voService.getSuppliedService().setServiceLocation(form.lyrProServices().tabServices().txtAreaLoc().getValue());
				voService.getSuppliedService().setWorkPhone(form.lyrProServices().tabServices().txtPhoneNoService().getValue());
			}
		}
		form.getLocalContext().setsupportNetworkService(voService);
	}

	private void clearServiceDetails()
	{
		form.lyrProServices().tabServices().cmbService().setValue(null);
		form.lyrProServices().tabServices().cmbLocation().setValue(null);
		form.lyrProServices().tabServices().cmbLocation().clear();
		form.lyrProServices().tabServices().txtAreaLoc().setValue(null);
		form.lyrProServices().tabServices().chkSupplyServiceDetail().setValue(false);
		form.lyrProServices().tabServices().txtFrequency().setValue(null);
		form.lyrProServices().tabServices().txtContactPerson().setValue(null);
		form.lyrProServices().tabServices().txtPhoneNoService().setValue(null);
		form.lyrProServices().tabServices().txtAddressService().setValue(null);
		form.lyrProServices().tabServices().txtCommentsService().setValue(null);
		form.lyrProServices().tabServices().customControlAuthSer().setValue(null);
	}

	protected void onGrdServicesSelectionChanged() throws PresentationLogicException
	{
		grdServicesSelectionChanged();
	}

	private void grdServicesSelectionChanged()
	{
		form.getLocalContext().setsupportNetworkProfessional(null);
		form.getLocalContext().setsupportNetworkService(form.lyrProServices().tabServices().grdServices().getValue());
		//-----------------------------------------------------------------------
		populateInstanceControl(form.getLocalContext().getsupportNetworkService());
		//-------------------------------------------------------------------------
		if (form.lyrProServices().tabServices().grdServices().getValue().getIsCurrentlyActive().booleanValue())
		{
			form.btnInactiveRecord().setEnabled(true);
			form.btnUpdate().setEnabled(true);
			form.btnInactiveRecord().setVisible(true); // WDEV-1913
			form.btnUpdate().setVisible(true); // WDEV-1913
			form.getContextMenus().getLIPUpdateItem().setVisible(true); //wdev-9625
		}
		else
		{
			form.btnInactiveRecord().setEnabled(false);
			form.btnUpdate().setEnabled(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false); //wdev-9625
		}
		//populateInstanceControl(form.getLocalContext().getsupportNetworkService());
	}

	private void populateInstanceControl(SupportNetworkServicesVo voService)
	{
		clearServiceDetails();

		form.getLocalContext().setRieRecord(voService);
		form.getContextMenus().getLIPUpdateItem().setVisible(true);

		if (voService.getLocationService() != null)
		{
			if (voService.getLocationService().getService() != null)
			{
				form.lyrProServices().tabServices().cmbService().newRow(voService.getLocationService().getService(), voService.getLocationService().getService().getServiceName());
				form.lyrProServices().tabServices().cmbService().setValue(voService.getLocationService().getService());
			}
			cmbServiceValueChanged();
		}

		if (voService.getSuppliedServiceIsNotNull())
		{
			form.lyrProServices().tabServices().chkSupplyServiceDetail().setValue(true);
			form.lyrProServices().tabServices().txtAddressService().setValue(voService.getSuppliedService().getAddress());
			form.lyrProServices().tabServices().txtAreaLoc().setValue(voService.getSuppliedService().getServiceLocation());
			form.lyrProServices().tabServices().txtContactPerson().setValue(voService.getSuppliedService().getName());
			form.lyrProServices().tabServices().txtPhoneNoService().setValue(voService.getSuppliedService().getWorkPhone());
			if (voService.getServiceIsNotNull() && voService.getService().getServiceNameIsNotNull())
			{
				form.lyrProServices().tabServices().cmbService().newRow(voService.getService(), voService.getService().getServiceName());
				form.lyrProServices().tabServices().cmbService().setValue(voService.getService());
			}

			form.lyrProServices().tabServices().txtAreaLoc().setVisible(true);
			form.lyrProServices().tabServices().cmbLocation().setVisible(false);

		}
		else if (voService.getLocationServiceIsNotNull())
		{
			form.lyrProServices().tabServices().chkSupplyServiceDetail().setValue(false);
			if (voService.getLocationService().getLocation() != null)
			{
				if (locationExistsInCombo(voService.getLocationService().getLocation()) == false)
					form.lyrProServices().tabServices().cmbLocation().newRow(voService.getLocationService().getLocation(), voService.getLocationService().getLocation().getName());

				form.lyrProServices().tabServices().cmbLocation().setValue(voService.getLocationService().getLocation());
			}

			form.lyrProServices().tabServices().txtAreaLoc().setVisible(false);
			form.lyrProServices().tabServices().cmbLocation().setVisible(true);

			cmbLocationValueChanged();
		}

		form.lyrProServices().tabServices().customControlAuthSer().setValue(voService.getAuthoringInfo());
		form.lyrProServices().tabServices().txtFrequency().setValue(voService.getFrequencyOfService());
		form.lyrProServices().tabServices().txtCommentsService().setValue(voService.getComments());
		form.btnUpdate().setEnabled(true);
	}

	private boolean locationExistsInCombo(LocShortVo location)
	{
		LocShortVo loc = null;
		for (int i = 0; i < form.lyrProServices().tabServices().cmbLocation().getValues().size(); i++)
		{
			loc = (LocShortVo) form.lyrProServices().tabServices().cmbLocation().getValues().get(i);

			if (loc.getID_Location().equals(location.getID_Location()))
				return true;
		}

		return false;
	}

	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		cmbServiceValueChanged();
	}

	private void cmbServiceValueChanged()
	{
		form.lyrProServices().tabServices().cmbLocation().clear();
		clearServicesReadOnlyDetails();

		if (form.lyrProServices().tabServices().cmbService().getValue() == null)
			return;

		LocShortVoCollection voCollLoc = domain.listLocations(form.lyrProServices().tabServices().cmbService().getValue());
		LocShortVo voLoc = null;

		if (voCollLoc == null)
			return;

		for (int i = 0; i < voCollLoc.size(); i++)
		{
			voLoc = voCollLoc.get(i);

			form.lyrProServices().tabServices().cmbLocation().newRow(voLoc, voLoc.getName());
		}

	}

	protected void onCmbLocationValueChanged() throws PresentationLogicException
	{
		cmbLocationValueChanged();
	}

	private void cmbLocationValueChanged()
	{
		LocShortVo voLoc = form.lyrProServices().tabServices().cmbLocation().getValue();
		if (voLoc != null)
		{
			if (voLoc.getAddressIsNotNull())
				form.lyrProServices().tabServices().txtAddressService().setValue(voLoc.getAddress().toDisplayStringForMultiLineTextBox());

			LocationServiceVo voLocService = domain.getLocationService(voLoc, form.lyrProServices().tabServices().cmbService().getValue());

			if (voLocService == null)
				return;

			form.getLocalContext().setlocationService(voLocService);
			if (voLocService.getContact() != null)
			{
				if (voLocService.getContact().getNameIsNotNull())
					form.lyrProServices().tabServices().txtContactPerson().setValue(voLocService.getContact().getName().toString());
				form.lyrProServices().tabServices().txtPhoneNoService().setValue(voLocService.getContact().getContactNumber());
			}
		}
		else
			form.lyrProServices().tabServices().txtAddressService().setValue(null);

	}

	protected void onCmbHcpSubTypeValueChanged() throws PresentationLogicException
	{
		form.lyrProServices().tabProfessional().qmbHcpName().clear();
		clearProfessionalReadOnlyDetails();

		if (form.lyrProServices().tabProfessional().cmbHcpSubType().getValue() == null)
		{
			form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(false);
			return;
		}

		form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(true);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(true);
	}

	private void clearProfessionalReadOnlyDetails()
	{
		form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(null);
		form.lyrProServices().tabProfessional().txtAddressPro().setValue(null);
		form.lyrProServices().tabProfessional().txtWorkPh().setValue(null);
		form.lyrProServices().tabProfessional().txtEmailPro().setValue(null);
		form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(null);
	}

	private void clearServicesReadOnlyDetails()
	{
		form.lyrProServices().tabServices().txtContactPerson().setValue(null);
		form.lyrProServices().tabServices().txtPhoneNoService().setValue(null);
		form.lyrProServices().tabServices().txtAddressService().setValue(null);
	}

	private boolean isOtherDiscipline(HcpDisType disType)
	{
		return disType != null && disType.equals(HcpDisType.OTHER);
	}

	private void resetRIEContextVariable()
	{
		form.getLocalContext().setRieRecord(null);
	}

	protected void onRadioButtongrpProfFilterValueChanged() throws PresentationLogicException
	{
		form.lyrProServices().tabProfessional().grdProfessional().setValue(null);
		clearProfDetails();
		form.btnUpdate().setEnabled(false);
		listSupportNetworkProfessional(false);
	}

	protected void onRadioButtongrpServiceFilterValueChanged() throws PresentationLogicException
	{
		form.lyrProServices().tabServices().grdServices().setValue(null);
		clearServiceDetails();
		form.btnUpdate().setEnabled(false);
		listSupportNetworkServices(false);
	}

	protected void onlyrProServicesTabChanged(LayerBridge tab)
	{
		if(form.getMode().equals(FormMode.EDIT))
			return;
		
		if (tab.equals(form.lyrProServices().tabProfessional()))
			form.getLocalContext().setisTabProfessional(Boolean.TRUE);
		else if (tab.equals(form.lyrProServices().tabServices()))
			form.getLocalContext().setisTabProfessional(Boolean.FALSE);
		open();
	}

	protected void onCmbLocationHcpValueChanged() throws PresentationLogicException
	{
		showLocationProf();
	}

	private void showLocationProf()
	{
		setProfessionAddress(form.lyrProServices().tabProfessional().cmbLocationHcp().getValue());
		// form.lyrProServices().tabProfessional().btnMore().setEnabled(form.lyrProServices().tabProfessional().cmbLocationHcp().getValue()
		// != null && form.getMode().equals(FormMode.EDIT));
		form.getGlobalContext().COE.setSupportNetworkSelectedLocation(form.lyrProServices().tabProfessional().cmbLocationHcp().getValue());
	}

	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	private void newInstance()
	{
		form.btnInactiveRecord().setVisible(false);// WDEV-1022
		form.btnUpdate().setEnabled(false);
		form.setMode(FormMode.EDIT);
		form.getContextMenus().hideAllLIPMenuItems();

		if (form.lyrProServices().tabProfessional().isVisible())
		{
			clearProfDetails();
			form.lyrProServices().settabServicesEnabled(false);
			form.lyrProServices().tabServices().setHeaderEnabled(false);
			form.lyrProServices().tabProfessional().customControlAuth().setIsRequiredPropertyToControls(Boolean.TRUE);
			form.lyrProServices().tabProfessional().cmbLocationHcp().clear();
			
			SupportNetworkProfessionalVo voProf = new SupportNetworkProfessionalVo();

			form.lyrProServices().tabProfessional().customControlAuth().initializeComponent();
			form.getLocalContext().setsupportNetworkProfessional(voProf);
			form.lyrProServices().tabProfessional().grdProfessional().setValue(null);

			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				checkPreviousEpisodes();

			form.lyrProServices().tabProfessional().chkSupplyHcp().setEnabled(true);
			form.lyrProServices().tabProfessional().cmbProfessional().setEnabled(true);
			form.lyrProServices().tabProfessional().cmbHcpSubType().setEnabled(true);
			form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(true);

			form.lyrProServices().tabProfessional().txtHcpName().setVisible(false);
			form.lyrProServices().tabProfessional().qmbHcpName().setVisible(true);
			form.lyrProServices().tabProfessional().cmbHcpSubType().setVisible(true);

			form.lyrProServices().tabProfessional().txtLocation().setVisible(false);
			form.lyrProServices().tabProfessional().cmbLocationHcp().setVisible(true);
			
			if(form.getLocalContext().getPatientNoSupportNetworkStatusInfo() == null)					
			{
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setVisible(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setEnabled(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setValue(false);
			}
			else if(form.getLocalContext().getPatientNoSupportNetworkStatusInfo().getSupportNetworkStatus() == null)
			{
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setVisible(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setEnabled(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setValue(false);
			}
			else if(!form.getLocalContext().getActiveProfessionals() && form.getLocalContext().getPatientNoSupportNetworkStatusInfo().getSupportNetworkStatus().equals(PatientSupportNetworkStatus.HASSUPPORT)){
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setVisible(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setEnabled(true);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setValue(false);
			}
			else
			{
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setValue(false);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setVisible(false);
			}

		}
		else
		{
			clearServiceDetails();
			form.lyrProServices().settabProfessionalEnabled(false);
			form.lyrProServices().tabProfessional().setHeaderEnabled(false);
			form.lyrProServices().tabServices().customControlAuthSer().setIsRequiredPropertyToControls(Boolean.TRUE);

			SupportNetworkServicesVo voService = new SupportNetworkServicesVo();

			form.lyrProServices().tabServices().customControlAuthSer().initializeComponent();
			form.getLocalContext().setsupportNetworkService(voService);
			form.lyrProServices().tabServices().grdServices().setValue(null);

			if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				checkPreviousEpisodes();

			form.lyrProServices().tabServices().chkSupplyServiceDetail().setEnabled(true);
			form.lyrProServices().tabServices().cmbLocation().setEnabled(true);
			form.lyrProServices().tabServices().cmbService().setEnabled(true);

			form.lyrProServices().tabServices().txtAreaLoc().setVisible(false);
			form.lyrProServices().tabServices().cmbLocation().setVisible(true);
			
			if(form.getLocalContext().getPatientNoSupportNetworkServicesInfo() == null)
			{
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setVisible(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setEnabled(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setValue(false);
			}
			else if(form.getLocalContext().getPatientNoSupportNetworkServicesInfo().getSupportNetworkServiceStatus()==null)
			{
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setVisible(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setEnabled(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setValue(false);
			}
			else if(!form.getLocalContext().getActiveSupports() && form.getLocalContext().getPatientNoSupportNetworkServicesInfo().getSupportNetworkServiceStatus().equals(PatientSupportNetworkStatus.HASSUPPORT))
			{
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setVisible(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setEnabled(true);
				form.lyrProServices().tabServices().chkNoneAtPresentSer().setValue(false);
			}
			else
			{
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setValue(false);
				form.lyrProServices().tabProfessional().chkNoneAtPresentPro().setVisible(false);
			}
		}

		enableAuthoringHCPCustomControls();
		form.lyrProServices().tabServices().txtFrequency().setEnabled(true);
		form.lyrProServices().tabServices().txtCommentsService().setEnabled(true	);		
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		form.btnInactiveRecord().setVisible(false);// WDEV-1022
		form.btnUpdate().setEnabled(false);
		form.getContextMenus().hideAllLIPMenuItems();

		form.lyrProServices().tabProfessional().cmbProfessional().setEnabled(false);
		form.lyrProServices().tabProfessional().txtHcpName().setEnabled(false);

		if (form.lyrProServices().tabProfessional().isVisible())
		{
			form.lyrProServices().settabServicesEnabled(false);
			form.lyrProServices().tabServices().setHeaderEnabled(false);

			// only allow update of location and HCP Name (for manually entered HCPs)
			if (form.getLocalContext().getsupportNetworkProfessional().getSuppliedProfessionalIsNotNull())
			{
				form.lyrProServices().tabProfessional().txtLocation().setEnabled(true);
				form.lyrProServices().tabProfessional().txtAddressPro().setEnabled(true);
				form.lyrProServices().tabProfessional().txtWorkPh().setEnabled(true);
				form.lyrProServices().tabProfessional().txtEmailPro().setEnabled(true);
				form.lyrProServices().tabProfessional().txtMobilePhPro().setEnabled(true);
				form.lyrProServices().tabProfessional().txtHcpName().setEnabled(true); //WDEV-17560
			}
			else
			{
				LocShortVo voLoc = form.lyrProServices().tabProfessional().cmbLocationHcp().getValue();
				loadLocationsForMos(true);
				form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(true);
				if (voLoc != null)
					form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(voLoc);

			}
		}
		else
		{
			form.lyrProServices().settabProfessionalEnabled(false);
			form.lyrProServices().tabProfessional().setHeaderEnabled(false);

			form.lyrProServices().tabServices().txtFrequency().setEnabled(true);
			form.lyrProServices().tabServices().txtCommentsService().setEnabled(true);		
			
			if (form.getLocalContext().getsupportNetworkService().getSuppliedServiceIsNotNull())
			{
				form.lyrProServices().tabServices().cmbLocation().setEnabled(true);
				//WDEV-17560
				form.lyrProServices().tabServices().txtAddressService().setEnabled(true);
				form.lyrProServices().tabServices().txtAreaLoc().setEnabled(true);
				form.lyrProServices().tabServices().txtContactPerson().setEnabled(true);
				form.lyrProServices().tabServices().txtPhoneNoService().setEnabled(true);
			}			
		}

	}

	protected void onBtnCopyFromClick() throws PresentationLogicException
	{
		if (form.lyrProServices().tabProfessional().isVisible())
		{
			engine.open(form.getForms().Core.SupportNetworkProfessionalDialog);
		}
		else
		{
			engine.open(form.getForms().Core.SupportNetworkServicesDialog);
		}
	}

	protected void onBtnInactiveRecordClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setYesNoDialogMessage("Are you sure you wish to inactivate this record");
		engine.open(form.getForms().Core.YesNoDialog);
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (form.lyrProServices().tabProfessional().isVisible())
		{
			if(form.lyrProServices().tabProfessional().chkNoneAtPresentPro().getValue()){
				savePatientNoSupportNetworkStatusInfo(true);
				open();
				return;
			}
			
			populateProfessionalDataFromScreen();
			if (saveProfessional())
			{
				open();
			}
		}
		else
		{
			if(form.lyrProServices().tabServices().chkNoneAtPresentSer().isVisible() &&
					form.lyrProServices().tabServices().chkNoneAtPresentSer().getValue())
			{
				savePatientNoSupportNetworkServicesInfo(true);
				open();
				return;
			}
			
			populateServiceDataFromScreen();
			if (saveService())
			{
				open();
			}
		}
	}

	private void savePatientNoSupportNetworkServicesInfo(boolean bNonePresent) 
	{
		PatientNoSupportNetworkServicesInfoVo voPatientNoSupportNetworkServicesInfo = form.getLocalContext().getPatientNoSupportNetworkServicesInfo();
		
		if(voPatientNoSupportNetworkServicesInfo==null)
			voPatientNoSupportNetworkServicesInfo = new PatientNoSupportNetworkServicesInfoVo();
			
		voPatientNoSupportNetworkServicesInfo.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		if(form.lyrProServices().tabProfessional().isVisible())
		{
			if(bNonePresent)			
				voPatientNoSupportNetworkServicesInfo.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientNoSupportNetworkServicesInfo.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		else{
			if(bNonePresent)
				voPatientNoSupportNetworkServicesInfo.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientNoSupportNetworkServicesInfo.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		
		AuthoringInformationVo vo = new AuthoringInformationVo();
		vo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		vo.setAuthoringDateTime(new DateTime());
		voPatientNoSupportNetworkServicesInfo.setAuthoringInformation(vo);
		
		try
		{
			voPatientNoSupportNetworkServicesInfo = domain.savePatientNoSupportNetworkServicesInfo(voPatientNoSupportNetworkServicesInfo);
			form.getLocalContext().setPatientNoSupportNetworkServicesInfo(voPatientNoSupportNetworkServicesInfo);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}	
	}
	
	private void savePatientNoSupportNetworkStatusInfo(boolean bNonePresent) 
	{
		PatientNoSupportNetworkStatusInfoVo voPatientNoSupportNetworkStatusInfo = form.getLocalContext().getPatientNoSupportNetworkStatusInfo();
		
		if(voPatientNoSupportNetworkStatusInfo==null)
			voPatientNoSupportNetworkStatusInfo = new PatientNoSupportNetworkStatusInfoVo();
			
		voPatientNoSupportNetworkStatusInfo.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		if(form.lyrProServices().tabProfessional().isVisible())
		{
			if(bNonePresent)			
				voPatientNoSupportNetworkStatusInfo.setSupportNetworkStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientNoSupportNetworkStatusInfo.setSupportNetworkStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		else{
			if(bNonePresent)
				voPatientNoSupportNetworkStatusInfo.setSupportNetworkStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientNoSupportNetworkStatusInfo.setSupportNetworkStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		
		AuthoringInformationVo vo = new AuthoringInformationVo();
		vo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		vo.setAuthoringDateTime(new DateTime());
		voPatientNoSupportNetworkStatusInfo.setAuthoringInformation(vo);
		
		try
		{
			voPatientNoSupportNetworkStatusInfo = domain.savePatientNoSupportNetworkStatusInfo(voPatientNoSupportNetworkStatusInfo);
			form.getLocalContext().setPatientNoSupportNetworkStatusInfo(voPatientNoSupportNetworkStatusInfo);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}	
	}
	
	/*private void savePatientCoreClinicalData(boolean bNonePresent) 
	{
		PatientCoreClinicalDataVo voPatientCoreClinicalData = form.getLocalContext().getPatientCoreClinicalDataVo();
		if(voPatientCoreClinicalData==null)
			voPatientCoreClinicalData = new PatientCoreClinicalDataVo();
		
		voPatientCoreClinicalData.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		if(form.lyrProServices().tabProfessional().isVisible())
		{
			if(bNonePresent)			
				voPatientCoreClinicalData.setSupportNetworkStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientCoreClinicalData.setSupportNetworkStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		else{
			if(bNonePresent)
				voPatientCoreClinicalData.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.NONEATPRESENT);
			else
				voPatientCoreClinicalData.setSupportNetworkServiceStatus(PatientSupportNetworkStatus.HASSUPPORT);
		}
		
		AuthoringInformationVo vo = new AuthoringInformationVo();
		vo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		vo.setAuthoringDateTime(new DateTime());
		voPatientCoreClinicalData.setSnServiceAuthoringInformation(vo);
		
		try
		{
			voPatientCoreClinicalData = domain.savePatientCoreClinicalData(voPatientCoreClinicalData);
			form.getLocalContext().setPatientCoreClinicalDataVo(voPatientCoreClinicalData);
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		
	}*/
	

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.LIP.New:
				newInstance();
				break;
			
			case GenForm.ContextMenus.LIP.Update:
				updateInstance();
				break;
		}
	}

	protected void onLnkGPDetailsClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setParentFormMode(FormMode.VIEW);
		engine.open(form.getForms().Core.GPDetails);
	}

	protected void onChkSupplyHcpValueChanged() throws PresentationLogicException
	{
		form.lyrProServices().tabProfessional().qmbHcpName().setValue(null);
		form.lyrProServices().tabProfessional().qmbHcpName().clear();
		form.lyrProServices().tabProfessional().cmbLocationHcp().setValue(null);
		form.lyrProServices().tabProfessional().cmbLocationHcp().clear();
		form.lyrProServices().tabProfessional().txtHcpName().setValue(null);
		form.lyrProServices().tabProfessional().txtLocation().setValue(null);
		form.lyrProServices().tabProfessional().txtAddressPro().setValue(null);
		form.lyrProServices().tabProfessional().txtEmailPro().setValue(null);
		form.lyrProServices().tabProfessional().txtMobilePhPro().setValue(null);
		form.lyrProServices().tabProfessional().txtWorkPh().setValue(null);
		
		boolean isHcpDetailsSupplied = form.lyrProServices().tabProfessional().chkSupplyHcp().getValue();
		boolean isProfAndTypeSupplied = (form.lyrProServices().tabProfessional().cmbProfessional().getValue()!=null
				&& form.lyrProServices().tabProfessional().cmbHcpSubType().getValue()!=null);
		
		form.lyrProServices().tabProfessional().qmbHcpName().setVisible(!isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(!isHcpDetailsSupplied && isProfAndTypeSupplied);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setVisible(!isHcpDetailsSupplied);

		form.lyrProServices().tabProfessional().txtHcpName().setVisible(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtHcpName().setEnabled(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtLocation().setVisible(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtLocation().setEnabled(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtAddressPro().setEnabled(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtEmailPro().setEnabled(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtMobilePhPro().setEnabled(isHcpDetailsSupplied);
		form.lyrProServices().tabProfessional().txtWorkPh().setEnabled(isHcpDetailsSupplied);
		
	}

	protected void onChkSupplyServiceDetailValueChanged() throws PresentationLogicException
	{
		form.lyrProServices().tabServices().cmbLocation().setValue(null);
		form.lyrProServices().tabServices().txtAreaLoc().setValue(null);
		form.lyrProServices().tabServices().txtAddressService().setValue(null);
		form.lyrProServices().tabServices().txtContactPerson().setValue(null);
		form.lyrProServices().tabServices().txtPhoneNoService().setValue(null);
		
		form.lyrProServices().tabServices().cmbLocation().setVisible(!form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
		form.lyrProServices().tabServices().txtAreaLoc().setVisible(form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
		form.lyrProServices().tabServices().txtAreaLoc().setEnabled(form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
		form.lyrProServices().tabServices().txtAddressService().setEnabled(form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
		form.lyrProServices().tabServices().txtContactPerson().setEnabled(form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
		form.lyrProServices().tabServices().txtPhoneNoService().setEnabled(form.lyrProServices().tabServices().chkSupplyServiceDetail().getValue());
	
	}

	protected void onFormModeChanged()
	{
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		boolean viewMode = form.getMode().equals(FormMode.VIEW);

		if (editMode)
		{
			form.lyrProServices().tabServices().txtAreaLoc().setEnabled(false);
		}

		if (viewMode)
		{
			initializeNoneAtPresent();
			form.lyrProServices().tabServices().txtAreaLoc().setEnabled(false);
			form.lyrProServices().tabServices().cmbLocation().setEnabled(false);
			form.lyrProServices().tabProfessional().txtLocation().setEnabled(false);
			form.lyrProServices().tabProfessional().txtHcpName().setEnabled(false);
			form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(false);
		}
	}

	private void enableAuthoringHCPCustomControls()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.lyrProServices().tabProfessional().setcustomControlAuthEnabled(isProfessionalAuthoringHCPEnabled());
			form.lyrProServices().tabServices().setcustomControlAuthSerEnabled(isServicesAuthoringHCPEnabled());
		}

		enableProfessionalHCPName();
	}

	private void enableProfessionalHCPName()
	{
		SupportNetworkProfessionalVo voProf = form.getLocalContext().getsupportNetworkProfessional();
		form.lyrProServices().tabProfessional().txtHcpName().setVisible(voProf != null && voProf.getSuppliedProfessionalIsNotNull() ? true : false);
	}

	private boolean isProfessionalAuthoringHCPEnabled()
	{
		SupportNetworkProfessionalVo voSupportNetworkProfessional = form.getLocalContext().getsupportNetworkProfessional();
		return voSupportNetworkProfessional == null || voSupportNetworkProfessional.getID_SupportNetworkProfessional() == null;
	}

	private boolean isServicesAuthoringHCPEnabled()
	{
		SupportNetworkServicesVo voSupportNetworkServices = form.getLocalContext().getsupportNetworkService();
		return voSupportNetworkServices == null || voSupportNetworkServices.getID_SupportNetworkServices() == null;
	}

	@Override
	protected void onChkNoneAtPresentProValueChanged() throws PresentationLogicException 
	{
		if(form.lyrProServices().tabProfessional().chkNoneAtPresentPro().getValue())
		{
			clearProfDetails();
			enableProfControls(false);
			form.lyrProServices().tabProfessional().setcustomControlAuthEnabled(false);
		}		
		else
		{
			enableProfControls(true);
			form.lyrProServices().tabProfessional().setcustomControlAuthEnabled(true);
		}
		
		onChkSupplyHcpValueChanged();//WDEV-17560
	}

	private void enableProfControls(boolean enable) 
	{
		form.lyrProServices().tabProfessional().cmbProfessional().setEnabled(enable);
		form.lyrProServices().tabProfessional().cmbLocationHcp().setEnabled(enable);
		form.lyrProServices().tabProfessional().qmbHcpName().setEnabled(enable);
		form.lyrProServices().tabProfessional().cmbHcpSubType().setEnabled(enable);
		form.lyrProServices().tabProfessional().txtHcpName().setEnabled(enable);
		form.lyrProServices().tabProfessional().chkSupplyHcp().setEnabled(enable);
		form.lyrProServices().tabProfessional().txtLocation().setEnabled(enable);
	}

	@Override
	protected void onChkNoneAtPresentSerValueChanged() throws PresentationLogicException 
	{
		if(form.lyrProServices().tabServices().chkNoneAtPresentSer().getValue())
		{
			clearServiceDetails();
			enableServicesControls(false);
			onChkSupplyServiceDetailValueChanged(); //WDEV-17560
		}		
		else
		{
			enableServicesControls(true);
		}
	}

	private void enableServicesControls(boolean enable) 
	{
		form.lyrProServices().tabServices().cmbService().setEnabled(enable);
		form.lyrProServices().tabServices().cmbLocation().setEnabled(enable);
		form.lyrProServices().tabServices().txtFrequency().setEnabled(enable);
		form.lyrProServices().tabServices().txtCommentsService().setEnabled(enable);
		form.lyrProServices().tabServices().setcustomControlAuthSerEnabled(enable);
		form.lyrProServices().tabServices().chkSupplyServiceDetail().setEnabled(enable);
	}
}
