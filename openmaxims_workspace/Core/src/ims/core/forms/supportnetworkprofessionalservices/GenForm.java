//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.supportnetworkprofessionalservices;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrProServicesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabProfessionalContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbProfessionalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHcpSubTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLocationHcpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortVo getValue()
				{
					return (ims.core.vo.LocShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbHcpNameComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.Hcp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.Hcp value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.Hcp getValue()
				{
					return (ims.core.vo.Hcp)super.control.getValue();
				}
				public void setValue(ims.core.vo.Hcp value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdProfessionalRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProfessionalRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProfessionServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProfessionServiceReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProfessionServiceOpened()
				{
					super.row.showOpened(1);
				}
				public String getColProfessionService()
				{
					return (String)super.row.get(1);
				}
				public void setColProfessionService(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProfessionServiceTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColWorkPhoneReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColWorkPhoneReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColWorkPhoneOpened()
				{
					super.row.showOpened(2);
				}
				public String getColWorkPhone()
				{
					return (String)super.row.get(2);
				}
				public void setColWorkPhone(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColWorkPhoneTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColIsActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColIsActiveReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColIsActiveOpened()
				{
					super.row.showOpened(3);
				}
				public ims.framework.utils.Image getColIsActive()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColIsActive(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColIsActiveTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.SupportNetworkProfessionalVo getValue()
				{
					return (ims.core.vo.SupportNetworkProfessionalVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProfessionalRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProfessionalRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProfessionalRow get(int index)
				{
					return new grdProfessionalRow(super.collection.get(index));
				}
				public grdProfessionalRow newRow()
				{
					return new grdProfessionalRow(super.collection.newRow());
				}
				public grdProfessionalRow newRow(boolean autoSelect)
				{
					return new grdProfessionalRow(super.collection.newRow(autoSelect));
				}
				public grdProfessionalRow newRowAt(int index)
				{
					return new grdProfessionalRow(super.collection.newRowAt(index));
				}
				public grdProfessionalRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProfessionalRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProfessionalGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.SupportNetworkProfessionalVo[] getValues()
				{
					ims.core.vo.SupportNetworkProfessionalVo[] listOfValues = new ims.core.vo.SupportNetworkProfessionalVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.SupportNetworkProfessionalVo getValue()
				{
					return (ims.core.vo.SupportNetworkProfessionalVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					super.grid.setValue(value);
				}
				public grdProfessionalRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProfessionalRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProfessionalRowCollection getRows()
				{
					return new grdProfessionalRowCollection(super.grid.getRows());
				}
				public grdProfessionalRow getRowByValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProfessionalRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProfessionServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProfessionServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColWorkPhoneHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColWorkPhoneHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColIsActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColIsActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
		
			public static class grpProfFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 112, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "View All", startTabIndex.intValue() + 3);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "View Active", startTabIndex.intValue() + 2);
				}
				public void setText(grpProfFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpProfFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpProfFilterEnumeration.None;
						case 0: return grpProfFilterEnumeration.rdoAllProf;
						case 1: return grpProfFilterEnumeration.rdoActiveProf;
					}
					return null;
				}
				public void setValue(grpProfFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpProfFilterEnumeration.None.id);
				}
				public boolean isEnabled(grpProfFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpProfFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpProfFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpProfFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpProfFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpProfFilterEnumeration None = new grpProfFilterEnumeration(-1);
				public static grpProfFilterEnumeration rdoAllProf = new grpProfFilterEnumeration(0);
				public static grpProfFilterEnumeration rdoActiveProf = new grpProfFilterEnumeration(1);
				private grpProfFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpProfFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 792, 184, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Professional Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 496, 448, 304, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_customControlAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 24, skipContextValidation);
				//ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(496), new Integer(448), new Integer(304), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 24), m_customControlAuthForm, instance1 } );
				ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 24), m_customControlAuthForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthControl);
				Menu[] menus1 = m_customControlAuthForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 664, 8, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "None at Present", new Integer(1), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 384, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Profession:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 408, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 456, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HCP Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 480, 57, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 280, 480, 78, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Work Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 280, 384, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 504, 408, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "E-mail Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 504, 384, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Mobile Phone:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 96, 456, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 96, 480, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 360, 480, 128, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 360, 384, 128, 88, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 608, 384, 176, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 608, 408, 176, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 96, 384, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbProfessionalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbProfessionalTemp);
				cmbProfessionalComboBox cmbProfessional = (cmbProfessionalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProfessionalComboBox.class, m_cmbProfessionalTemp);
				super.addComboBox(cmbProfessional);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 96, 408, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbHcpSubTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHcpSubTypeTemp);
				cmbHcpSubTypeComboBox cmbHcpSubType = (cmbHcpSubTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpSubTypeComboBox.class, m_cmbHcpSubTypeTemp);
				super.addComboBox(cmbHcpSubType);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 96, 480, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbLocationHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLocationHcpTemp);
				cmbLocationHcpComboBox cmbLocationHcp = (cmbLocationHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationHcpComboBox.class, m_cmbLocationHcpTemp);
				super.addComboBox(cmbLocationHcp);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 456, 168, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_qmbHcpNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbHcpNameTemp);
				qmbHcpNameComboBox qmbHcpName = (qmbHcpNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHcpNameComboBox.class, m_qmbHcpNameTemp);
				super.addComboBox(qmbHcpName);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 24, 360, 120, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"None at Present", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 96, 440, 144, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Enter HCP Details:", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 792, 296, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProfessionalTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProfessionalTemp);
				grdProfessionalGrid grdProfessional = (grdProfessionalGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProfessionalGrid.class, m_grdProfessionalTemp);
				grdProfessional.addStringColumn("Name", 0, 0, 240, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.addStringColumn("Profession", 0, 0, 320, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.addStringColumn("Work Phone", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.addImageColumn(" ", 0, 1, -1, true, 0);
				super.addGrid(grdProfessional);
		
				// RadioButton Controls
				RadioButton tmpgrpProfFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpProfFilter);
				grpProfFilterRadioButton grpProfFilter = (grpProfFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpProfFilterRadioButton.class, tmpgrpProfFilter);
				grpProfFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpProfFilter);
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuth()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblNoneAtPresentPro()
			{
				return (Label)super.getControl(2);
			}
			public TextBox txtHcpName()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtLocation()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtWorkPh()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtAddressPro()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtMobilePhPro()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtEmailPro()
			{
				return (TextBox)super.getControl(16);
			}
			public cmbProfessionalComboBox cmbProfessional()
			{
				return (cmbProfessionalComboBox)super.getComboBox(0);
			}
			public cmbHcpSubTypeComboBox cmbHcpSubType()
			{
				return (cmbHcpSubTypeComboBox)super.getComboBox(1);
			}
			public cmbLocationHcpComboBox cmbLocationHcp()
			{
				return (cmbLocationHcpComboBox)super.getComboBox(2);
			}
			public qmbHcpNameComboBox qmbHcpName()
			{
				return (qmbHcpNameComboBox)super.getComboBox(3);
			}
			public CheckBox chkNoneAtPresentPro()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkSupplyHcp()
			{
				return (CheckBox)super.getControl(22);
			}
			public grdProfessionalGrid grdProfessional()
			{
				return (grdProfessionalGrid)super.getGrid(0);
			}
			public grpProfFilterRadioButton grpProfFilter()
			{
				return (grpProfFilterRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabServicesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortVo getValue()
				{
					return (ims.core.vo.LocShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdServicesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServicesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColServiceTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColServiceTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColServiceTypeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColServiceType()
				{
					return (String)super.row.get(0);
				}
				public void setColServiceType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColServiceTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColContactPersonReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColContactPersonReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColContactPersonOpened()
				{
					super.row.showOpened(1);
				}
				public String getColContactPerson()
				{
					return (String)super.row.get(1);
				}
				public void setColContactPerson(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColContactPersonTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPhoneNoReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPhoneNoReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPhoneNoOpened()
				{
					super.row.showOpened(2);
				}
				public String getColPhoneNo()
				{
					return (String)super.row.get(2);
				}
				public void setColPhoneNo(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPhoneNoTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColFrequencyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColFrequencyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColFrequencyOpened()
				{
					super.row.showOpened(3);
				}
				public String getColFrequency()
				{
					return (String)super.row.get(3);
				}
				public void setColFrequency(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColFrequencyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColIsActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColIsActiveReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColIsActiveOpened()
				{
					super.row.showOpened(4);
				}
				public ims.framework.utils.Image getColIsActive()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setColIsActive(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellColIsActiveTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.SupportNetworkServicesVo getValue()
				{
					return (ims.core.vo.SupportNetworkServicesVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServicesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServicesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServicesRow get(int index)
				{
					return new grdServicesRow(super.collection.get(index));
				}
				public grdServicesRow newRow()
				{
					return new grdServicesRow(super.collection.newRow());
				}
				public grdServicesRow newRow(boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRow(autoSelect));
				}
				public grdServicesRow newRowAt(int index)
				{
					return new grdServicesRow(super.collection.newRowAt(index));
				}
				public grdServicesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServicesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.SupportNetworkServicesVo[] getValues()
				{
					ims.core.vo.SupportNetworkServicesVo[] listOfValues = new ims.core.vo.SupportNetworkServicesVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.SupportNetworkServicesVo getValue()
				{
					return (ims.core.vo.SupportNetworkServicesVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					super.grid.setValue(value);
				}
				public grdServicesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServicesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServicesRowCollection getRows()
				{
					return new grdServicesRowCollection(super.grid.getRows());
				}
				public grdServicesRow getRowByValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServicesRow(row);
				}
				public void setColServiceTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColServiceTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColContactPersonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColContactPersonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPhoneNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPhoneNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColFrequencyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColFrequencyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColIsActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColIsActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
		
			public static class grpServiceFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper27.getX(), anchoringHelper27.getY(), anchoringHelper27.getWidth(), "View Active", startTabIndex.intValue() + 1026);
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 104, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper28.getX(), anchoringHelper28.getY(), anchoringHelper28.getWidth(), "View All", startTabIndex.intValue() + 1027);
				}
				public void setText(grpServiceFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpServiceFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpServiceFilterEnumeration.None;
						case 0: return grpServiceFilterEnumeration.rdoActiveServices;
						case 1: return grpServiceFilterEnumeration.rdoAllServices;
					}
					return null;
				}
				public void setValue(grpServiceFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpServiceFilterEnumeration.None.id);
				}
				public boolean isEnabled(grpServiceFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpServiceFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpServiceFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpServiceFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpServiceFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpServiceFilterEnumeration None = new grpServiceFilterEnumeration(-1);
				public static grpServiceFilterEnumeration rdoActiveServices = new grpServiceFilterEnumeration(0);
				public static grpServiceFilterEnumeration rdoAllServices = new grpServiceFilterEnumeration(1);
				private grpServiceFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpServiceFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 328, 792, 192, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Service Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 480, 440, 320, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_customControlAuthSerForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper30.getSize(), instance1, startTabIndex.intValue() + 1046, skipContextValidation);
				//ims.framework.Control m_customControlAuthSerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(480), new Integer(440), new Integer(320), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1046), m_customControlAuthSerForm, instance1 } );
				ims.framework.Control m_customControlAuthSerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1028),  new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1046), m_customControlAuthSerForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthSerControl);
				Menu[] menus1 = m_customControlAuthSerForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 672, 8, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "None at Present", new Integer(1), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 50, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 24, 424, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Area / Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 24, 448, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Contact Person:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 24, 472, 101, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Contact Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 280, 448, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 284, 376, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 488, 376, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Comments:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 120, 424, 152, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 120, 448, 152, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 120, 472, 152, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 344, 448, 128, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1042), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 344, 376, 128, 66, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(160), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 560, 376, 224, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 120, 376, 152, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbServiceTemp);
				cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
				super.addComboBox(cmbService);
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 120, 424, 152, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1036), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbLocationTemp);
				cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
				super.addComboBox(cmbLocation);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 24, 352, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"None At Present", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 120, 400, 152, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Enter Service  Details:", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 792, 288, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdServicesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuLIP, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServicesTemp);
				grdServicesGrid grdServices = (grdServicesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServicesGrid.class, m_grdServicesTemp);
				grdServices.addStringColumn("Service", 0, 0, 185, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.addStringColumn("Contact Person", 0, 0, 250, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.addStringColumn("Phone Number", 0, 0, 145, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.addStringColumn("Frequency of Service", 0, 0, 145, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.addImageColumn(" ", 0, 1, -1, true, 0);
				super.addGrid(grdServices);
		
				// RadioButton Controls
				RadioButton tmpgrpServiceFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpServiceFilter);
				grpServiceFilterRadioButton grpServiceFilter = (grpServiceFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpServiceFilterRadioButton.class, tmpgrpServiceFilter);
				grpServiceFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpServiceFilter);
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuthSer()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthSerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthSerVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthSerVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthSerEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthSerEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblNoneAtPresentSer()
			{
				return (Label)super.getControl(2);
			}
			public TextBox txtAreaLoc()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtContactPerson()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtPhoneNoService()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtFrequency()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtAddressService()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtCommentsService()
			{
				return (TextBox)super.getControl(15);
			}
			public cmbServiceComboBox cmbService()
			{
				return (cmbServiceComboBox)super.getComboBox(0);
			}
			public cmbLocationComboBox cmbLocation()
			{
				return (cmbLocationComboBox)super.getComboBox(1);
			}
			public CheckBox chkNoneAtPresentSer()
			{
				return (CheckBox)super.getControl(18);
			}
			public CheckBox chkSupplyServiceDetail()
			{
				return (CheckBox)super.getControl(19);
			}
			public grdServicesGrid grdServices()
			{
				return (grdServicesGrid)super.getGrid(0);
			}
			public grpServiceFilterRadioButton grpServiceFilter()
			{
				return (grpServiceFilterRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabProfessional = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Professional", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabProfessionalContainer m_tabProfessionalContainer = (tabProfessionalContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProfessionalContainer.class, m_tabProfessional, factory);
			super.addContainer(m_tabProfessional, m_tabProfessionalContainer);
			ims.framework.utils.SizeInfo m_tabProfessionalDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabProfessionalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper50.getWidth(), anchoringHelper50.getHeight());
			m_tabProfessionalContainer.setContext(form, appForm, m_tabProfessional, loader, form_images_local, contextMenus, startControlID, m_tabProfessionalDesignSize, m_tabProfessionalRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabServices = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Services", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabServicesContainer m_tabServicesContainer = (tabServicesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabServicesContainer.class, m_tabServices, factory);
			super.addContainer(m_tabServices, m_tabServicesContainer);
			ims.framework.utils.SizeInfo m_tabServicesDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabServicesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper51.getWidth(), anchoringHelper51.getHeight());
			m_tabServicesContainer.setContext(form, appForm, m_tabServices, loader, form_images_local, contextMenus, startControlID, m_tabServicesDesignSize, m_tabServicesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabProfessional().setVisible(false);
			tabServices().setVisible(false);
		}
		public void settabProfessionalEnabled(boolean value)
		{
			tabProfessional().setEnabled(value);
		}
		public void settabServicesEnabled(boolean value)
		{
			tabServices().setEnabled(value);
		}
		public void showtabProfessional()
		{
			tabServices().setVisible(false);
			tabProfessional().setVisible(true);
		}
		public void showtabServices()
		{
			tabProfessional().setVisible(false);
			tabServices().setVisible(true);
		}

		public tabProfessionalContainer tabProfessional()
		{
			return (tabProfessionalContainer)super.layers.get(0);
		}
		public tabServicesContainer tabServices()
		{
			return (tabServicesContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getRieRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuLIP = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuLIPNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPNewItem);
		contextMenus.contextMenuLIPUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLIP.add(contextMenus.contextMenuLIPUpdateItem);
		form.registerMenu(contextMenus.contextMenuLIP);


		// Layer Clasess
		lyrProServicesLayer m_lyrProServicesLayer = (lyrProServicesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrProServicesLayer.class, this, factory);
		super.addLayer(m_lyrProServicesLayer);
		m_lyrProServicesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 2047), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 88, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 2048), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 168, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 2049), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Copy From", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 384, 592, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 2050), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 2051), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 2052), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Link Controls
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"GP Details", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrProServicesLayer lyrProServices()
	{
		return (lyrProServicesLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCopyFrom()
	{
		return (Button)super.getControl(4);
	}
	public Button btnInactiveRecord()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Link lnkGPDetails()
	{
		return (Link)super.getControl(8);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
				SupportNetworkServicesDialog = new LocalFormName(101181);
				SupportNetworkProfessionalDialog = new LocalFormName(101180);
				GPDetails = new LocalFormName(102127);
			}
			public final FormName YesNoDialog;
			public final FormName SupportNetworkServicesDialog;
			public final FormName SupportNetworkProfessionalDialog;
			public final FormName GPDetails;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
			}
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Yes;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_supportNetworkProfessional = new ims.framework.ContextVariable("supportNetworkProfessional", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__supportNetworkProfessional_" + componentIdentifier + "");
			cxl_supportNetworkService = new ims.framework.ContextVariable("supportNetworkService", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__supportNetworkService_" + componentIdentifier + "");
			cxl_locationService = new ims.framework.ContextVariable("locationService", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__locationService_" + componentIdentifier + "");
			cxl_voMemberOfStaffShort = new ims.framework.ContextVariable("voMemberOfStaffShort", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier + "");
			cxl_RieRecord = new ims.framework.ContextVariable("RieRecord", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__RieRecord_" + componentIdentifier + "");
			cxl_isTabProfessional = new ims.framework.ContextVariable("isTabProfessional", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__isTabProfessional_" + componentIdentifier + "");
			cxl_ActiveProfessionals = new ims.framework.ContextVariable("ActiveProfessionals", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__ActiveProfessionals_" + componentIdentifier + "");
			cxl_ActiveSupports = new ims.framework.ContextVariable("ActiveSupports", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__ActiveSupports_" + componentIdentifier + "");
			cxl_PatientNoSupportNetworkServicesInfo = new ims.framework.ContextVariable("PatientNoSupportNetworkServicesInfo", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier + "");
			cxl_PatientNoSupportNetworkStatusInfo = new ims.framework.ContextVariable("PatientNoSupportNetworkStatusInfo", prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier + "");
		}
		
		public boolean getsupportNetworkProfessionalIsNotNull()
		{
			return !cxl_supportNetworkProfessional.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkProfessionalVo getsupportNetworkProfessional()
		{
			return (ims.core.vo.SupportNetworkProfessionalVo)cxl_supportNetworkProfessional.getValue(context);
		}
		public void setsupportNetworkProfessional(ims.core.vo.SupportNetworkProfessionalVo value)
		{
			cxl_supportNetworkProfessional.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_supportNetworkProfessional = null;
		public boolean getsupportNetworkServiceIsNotNull()
		{
			return !cxl_supportNetworkService.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkServicesVo getsupportNetworkService()
		{
			return (ims.core.vo.SupportNetworkServicesVo)cxl_supportNetworkService.getValue(context);
		}
		public void setsupportNetworkService(ims.core.vo.SupportNetworkServicesVo value)
		{
			cxl_supportNetworkService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_supportNetworkService = null;
		public boolean getlocationServiceIsNotNull()
		{
			return !cxl_locationService.getValueIsNull(context);
		}
		public ims.core.vo.LocationServiceVo getlocationService()
		{
			return (ims.core.vo.LocationServiceVo)cxl_locationService.getValue(context);
		}
		public void setlocationService(ims.core.vo.LocationServiceVo value)
		{
			cxl_locationService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_locationService = null;
		public boolean getvoMemberOfStaffShortIsNotNull()
		{
			return !cxl_voMemberOfStaffShort.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffShortVo getvoMemberOfStaffShort()
		{
			return (ims.core.vo.MemberOfStaffShortVo)cxl_voMemberOfStaffShort.getValue(context);
		}
		public void setvoMemberOfStaffShort(ims.core.vo.MemberOfStaffShortVo value)
		{
			cxl_voMemberOfStaffShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voMemberOfStaffShort = null;
		public boolean getRieRecordIsNotNull()
		{
			return !cxl_RieRecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRieRecord()
		{
			return (ims.vo.ValueObject)cxl_RieRecord.getValue(context);
		}
		public void setRieRecord(ims.vo.ValueObject value)
		{
			cxl_RieRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RieRecord = null;
		public boolean getisTabProfessionalIsNotNull()
		{
			return !cxl_isTabProfessional.getValueIsNull(context);
		}
		public Boolean getisTabProfessional()
		{
			return (Boolean)cxl_isTabProfessional.getValue(context);
		}
		public void setisTabProfessional(Boolean value)
		{
			cxl_isTabProfessional.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isTabProfessional = null;
		public boolean getActiveProfessionalsIsNotNull()
		{
			return !cxl_ActiveProfessionals.getValueIsNull(context);
		}
		public Boolean getActiveProfessionals()
		{
			return (Boolean)cxl_ActiveProfessionals.getValue(context);
		}
		public void setActiveProfessionals(Boolean value)
		{
			cxl_ActiveProfessionals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveProfessionals = null;
		public boolean getActiveSupportsIsNotNull()
		{
			return !cxl_ActiveSupports.getValueIsNull(context);
		}
		public Boolean getActiveSupports()
		{
			return (Boolean)cxl_ActiveSupports.getValue(context);
		}
		public void setActiveSupports(Boolean value)
		{
			cxl_ActiveSupports.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveSupports = null;
		public boolean getPatientNoSupportNetworkServicesInfoIsNotNull()
		{
			return !cxl_PatientNoSupportNetworkServicesInfo.getValueIsNull(context);
		}
		public ims.core.vo.PatientNoSupportNetworkServicesInfoVo getPatientNoSupportNetworkServicesInfo()
		{
			return (ims.core.vo.PatientNoSupportNetworkServicesInfoVo)cxl_PatientNoSupportNetworkServicesInfo.getValue(context);
		}
		public void setPatientNoSupportNetworkServicesInfo(ims.core.vo.PatientNoSupportNetworkServicesInfoVo value)
		{
			cxl_PatientNoSupportNetworkServicesInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientNoSupportNetworkServicesInfo = null;
		public boolean getPatientNoSupportNetworkStatusInfoIsNotNull()
		{
			return !cxl_PatientNoSupportNetworkStatusInfo.getValueIsNull(context);
		}
		public ims.core.vo.PatientNoSupportNetworkStatusInfoVo getPatientNoSupportNetworkStatusInfo()
		{
			return (ims.core.vo.PatientNoSupportNetworkStatusInfoVo)cxl_PatientNoSupportNetworkStatusInfo.getValue(context);
		}
		public void setPatientNoSupportNetworkStatusInfo(ims.core.vo.PatientNoSupportNetworkStatusInfoVo value)
		{
			cxl_PatientNoSupportNetworkStatusInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientNoSupportNetworkStatusInfo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class LIP implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Update = 2;
		}
		public void disableAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setEnabled(false);
			this.contextMenuLIPUpdateItem.setEnabled(false);
		}
		public void hideAllLIPMenuItems()
		{
			this.contextMenuLIPNewItem.setVisible(false);
			this.contextMenuLIPUpdateItem.setVisible(false);
		}
		private Menu contextMenuLIP;
		public MenuItem getLIPNewItem()
		{
			return this.contextMenuLIPNewItem;
		}
		private MenuItem contextMenuLIPNewItem;
		public MenuItem getLIPUpdateItem()
		{
			return this.contextMenuLIPUpdateItem;
		}
		private MenuItem contextMenuLIPUpdateItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[112];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ID", "ID_Location");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-NAME", "Name");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-TYPE", "Type");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ID", "ID_Location");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-NAME", "Name");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ISACTIVE", "IsActive");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-TYPE", "Type");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.GPSurgery", "BO-1007100002-ALLSECUREACCOMMODATION", "AllSecureAccommodation");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-INITIALS", "Initials");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-STAFFTYPE", "StaffType");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-ISACTIVE", "IsActive");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkMos", "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-STAFFTYPE", "StaffType");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-ISACTIVE", "IsActive");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-ID", "ID_PatientNoSupportNetworkServicesInfo");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-PATIENT", "Patient");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-SUPPORTNETWORKSERVICESTATUS", "SupportNetworkServiceStatus");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-ID", "ID_PatientNoSupportNetworkStatusInfo");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-PATIENT", "Patient");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.SupportNetworkProfessionalServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-SUPPORTNETWORKSTATUS", "SupportNetworkStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
