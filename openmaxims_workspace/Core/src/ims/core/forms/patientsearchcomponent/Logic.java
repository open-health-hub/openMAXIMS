//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.65 build 3187.17423)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.patientsearchcomponent;

import java.util.Comparator;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.enums.PatientSearchEvent;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateFormat;
import ims.framework.utils.PartialDate;


public class Logic extends BaseLogic
{
	private static final Integer COL_SURNAME = new Integer(1);
	private static final Integer COL_FORENAME = new Integer(2);
	private static final Integer COL_IDENTIFIER = new Integer(3);
	private static final Integer COL_SEX = new Integer(4);
	private static final Integer COL_AGE = new Integer(5);
	private static final Integer COL_DOB = new Integer(6);
	private static final Integer COL_ADDRESS = new Integer(7);	
	private static final Integer COL_OPTIONAL = new Integer(8);

	private void setDefaults()
	{
		//form.Surname().setFocus();
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.PatientID().setValue(dispIdType);
		form.Identifier().setValue("");
		
		if (!ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue())
		{
			form.txtAddress().setVisible(false);
			form.cmbCounty().setVisible(false);
			form.lblAddress().setVisible(false);
			form.lblCounty().setVisible(false);
		}
		
		//WDEV-18576
		boolean showPostCodeandSwapControls = !ConfigFlag.UI.DISPLAY_ADDRESS_AND_COUNTY_PATIENT_SEARCH.getValue();
		
		form.lblPostCode().setVisible(showPostCodeandSwapControls);
		form.txtPostCode().setVisible(showPostCodeandSwapControls);
		form.chkSwap().setVisible(showPostCodeandSwapControls);
		
		// If this is local demographics, the newpatient button is enabled, otherwise it is disabled
		if (form.getLocalContext().getAllowNewPatientIsNotNull() && form.getLocalContext().getAllowNewPatient())
		{
			form.imbNewPatient().setVisible(true);
			form.imbNewPatient().setEnabled(true);
		}
		else
		{
			form.imbNewPatient().setVisible(false);
			form.imbNewPatient().setEnabled(false);
		}
		
		/*PatientFilter filter = form.getGlobalContext().Core.getPatientFilter();
		
		if (filter != null)
		{
			form.Surname().setValue(filter.getSurname());
			form.Forename().setValue(filter.getForename());
			form.DOB().setValue(filter.getDob());
			form.Sex().setValue(filter.getSex());
			if (filter.getPersId() != null)
			{
				form.Surname().setValue(null);
				form.Forename().setValue(null);
				form.DOB().setValue(null);
				form.Sex().setValue(null);

				form.PatientID().setValue(filter.getPersId().getType());
				form.Identifier().setValue(filter.getPersId().getValue());		
				form.Identifier().setFocus();
			}
		}*/
	}

	private void formatPatientResultsGrid()
	{
		boolean bDisplayOptionalCol = ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue();
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		
		form.dyngrdPatient().clear();
		form.dyngrdPatient().setReadOnly(true);//WDEV-15958
		
		form.dyngrdPatient().setSelectable(true);
		
		DynamicGridColumn column = form.dyngrdPatient().getColumns().newColumn("Surname");
		column.setIdentifier(COL_SURNAME);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);

		column = form.dyngrdPatient().getColumns().newColumn("Forename");
		column.setIdentifier(COL_FORENAME);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatient().getColumns().newColumn(dispIdType.getText());
		column.setIdentifier(COL_IDENTIFIER);
		column.setWidth(100);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatient().getColumns().newColumn("Sex");
		column.setIdentifier(COL_SEX);
		column.setWidth(50);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		column = form.dyngrdPatient().getColumns().newColumn("Age");
		column.setIdentifier(COL_AGE);
		column.setWidth(35);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-15958
		
		column = form.dyngrdPatient().getColumns().newColumn("DOB");
		column.setIdentifier(COL_DOB);
		column.setWidth(70);
		column.setCanGrow(true);
		column.setSortMode(SortMode.MANUAL);//WDEV-15958

		column = form.dyngrdPatient().getColumns().newColumn("Address");
		column.setIdentifier(COL_ADDRESS);
		if (bDisplayOptionalCol)
			column.setWidth(275);
		else
			column.setWidth(-1);
		column.setCanGrow(true);
		column.setSortMode(SortMode.AUTOMATIC);
		
		if (bDisplayOptionalCol)
		{
			String strOptional = "Ward"; // Default Column Name
			if(ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT")) 
			{
				strOptional = "Contact No.";
			}
			column = form.dyngrdPatient().getColumns().newColumn(strOptional);
			column.setIdentifier(COL_OPTIONAL);
			column.setWidth(-1);
		}
		
	}

	private void clearSearchFields(boolean bClearIdentifier)
	{
		form.Surname().setValue("");
		form.Forename().setValue("");
		form.DOB().setValue(null);
		form.Sex().setValue(null);
		//WDEV-10995
		form.txtAddress().setValue(null);
		form.cmbCounty().setValue(null);
		
		//WDEV-18576
		form.txtPostCode().setValue(null);
		form.chkSwap().setValue(Boolean.FALSE);
		
		if(bClearIdentifier)
			form.Identifier().setValue("");
	}

	protected void onImbResetClick() throws PresentationLogicException 
	{
		clearResults();
		form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);
	}

	private void clearResults() 
	{
		form.dyngrdPatient().getRows().clear();
		clearSearchFields(true);
		form.PatientID().setValue(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
		form.Identifier().setValue(null);
		
		//WDEV-18576
		form.txtPostCode().setValue(null);
		form.chkSwap().setValue(Boolean.FALSE);
		
		//form.getGlobalContext().Core.setPatientFilter(null);
	
		//Clear the selected patient information in the Engine
		//form.getGlobalContext().Core.clearPatientShort();
		//form.getGlobalContext().Core.setPatientToBeDisplayed(null);
		//engine.setPatientInfo("Please enter Patient ID or Surname and/or Forename");
		engine.setPatientInfo("");   //wdev-14281
		form.getLocalContext().setPatientFilter(null);
		form.getLocalContext().setSelectedPatient(null);
		form.lblTotal().setValue("Total : " + form.dyngrdPatient().getRows().size());
	}

	protected void onImbSearchClick() throws PresentationLogicException 
	{
		doSearch();
	}

	private void doSearch()
	{
		form.dyngrdPatient().getRows().clear();
		form.lblTotal().setValue("Total : " + form.dyngrdPatient().getRows().size());//WDEV-15958
		
		if (form.Identifier().getValue() != null && form.Identifier().getValue().length() > 0)
		{
			if (form.PatientID().getValue() == null)
			{
				engine.showMessage("Please select a Patient ID Type");
				form.PatientID().setFocus();
				form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
				return;
			}
			clearSearchFields(false);
		}
		else if (form.txtPostCode().getValue() == null || form.txtPostCode().getValue().trim().length() == 0) //WDEV-18576
		{
			// If it is a local search strip out the non-alpha except % chars before validation
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
					&& (form.Surname().getValue() == null || form.Surname().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Surname");  //wdev-17892
				form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
				return;
			}
			else if (form.Surname().getValue() == null || form.Surname().getValue().length() == 0)
			{
				engine.showMessage("Please enter a valid Surname");			//wdev-17892
				form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
				return;
			}

			// Mandatory Search on forname
			if((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL"))
					&&(ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())
					&&(form.Forename().getValue() == null || form.Forename().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				   engine.showMessage("Please enter a valid Forename"); //wdev-17892
				   form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
				   return;
			}
			
			else if((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue())&&
				 (form.Forename().getValue() == null || form.Forename().getValue().length() == 0))
			{
				   engine.showMessage("Please enter a valid Forename");  //wdev-17892
				   form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
				   return;
			}
		}		
		
		setPatientFilterDetails();
		
		PatientShortCollection psColl = null;
		
		try {
			//psColl = domain.searchPatients(form.getGlobalContext().Core.getPatientFilter());
			psColl = domain.searchPatients(form.getLocalContext().getPatientFilter());
		} catch (DomainInterfaceException e) {
			engine.showMessage(e.getMessage());
			form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
			return;
		}
		
		if (psColl.size() == 0) 
		{
			engine.showMessage("No patients found");
			form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);//WDEV-15958
			return;
		}	

		populateGridWithPatients(psColl);
		form.getLocalContext().setLastEvent(PatientSearchEvent.NONE);
	}

	private void populateGridWithPatients(PatientShortCollection psColl)
	{
		for (int i = 0; i< psColl.size(); i++)
		{
			PatientShort ps = psColl.get(i);
			DynamicGridRow row = form.dyngrdPatient().getRows().newRow();
			
			if (ps.getName() != null)
			{
				//surname should probably be part of minimum data on registration
				//and so negate the need for this.
				if (ps.getName().getSurnameIsNotNull() ) 
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_SURNAME), DynamicCellType.STRING);
					cellLabel.setValue(ps.getName().getSurname());
					
					//Using this as there is no specific flag to say this is NTPF!!!
					if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
						cellLabel.setTooltip(ps.getNTPFDisplayString());
				}
				
				if (ps.getName().getForenameIsNotNull() ) 
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_FORENAME), DynamicCellType.STRING);
					cellLabel.setValue(ps.getName().getForename());

					//Using this as there is no specific flag to say this is NTPF!!!
					if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
						cellLabel.setTooltip(ps.getNTPFDisplayString());
				}
			}
			
			if (ps.getDisplayId() != null) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_IDENTIFIER), DynamicCellType.STRING);
				cellLabel.setValue(ps.getDisplayId().getValue());				

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
			
			if (ps.getSex() != null) 
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_SEX), DynamicCellType.STRING);
				cellLabel.setValue(ps.getSex().getText());				

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
			
			if (ps.getAge() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_AGE), DynamicCellType.INT);
				cellLabel.setValue(ps.getAge());

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
			if (ps.getDob() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_DOB), DynamicCellType.STRING);
				cellLabel.setValue(ps.getDob().toString(DateFormat.STANDARD));

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
			if (ps.getAddress() != null)
			{
				DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_ADDRESS), DynamicCellType.STRING);
				cellLabel.setValue(ps.getAddress().toDisplayString());

				//Using this as there is no specific flag to say this is NTPF!!!
				if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					cellLabel.setTooltip(ps.getNTPFDisplayString());
			}
			
			if (ConfigFlag.UI.DISPLAY_OPTIONAL_COLUMN_PATIENT_SEARCH.getValue())
			{
				if(ConfigFlag.UI.PAT_SEARCH_OPTIONAL_COL_TYPE.getValue().equalsIgnoreCase("CONTACT"))  
				{
					if (ps.getCommChannelsIsNotNull() && ps.getMobile() != null)
					{
						DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
						cellLabel.setValue(ps.getMobile().getCommValue());

						//Using this as there is no specific flag to say this is NTPF!!!
						if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
							cellLabel.setTooltip(ps.getNTPFDisplayString());
					}
				}
				else if (ps.getWard() != null)
				{
					DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatient().getColumns().getByIdentifier(COL_OPTIONAL), DynamicCellType.STRING);
					cellLabel.setValue(ps.getWard().toString());

					//Using this as there is no specific flag to say this is NTPF!!!
					if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
						cellLabel.setTooltip(ps.getNTPFDisplayString());
				}
			}

			row.setValue(ps);
			
			if(ps.getAssociatedPatientIsNotNull())
			{
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
			}
			
			if (ps.getIsDead().booleanValue())
			{
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
			}
		}
		form.lblTotal().setValue("Total : " + form.dyngrdPatient().getRows().size());	
	}

	protected void onImbNewPatientClick() throws PresentationLogicException
	{
		// WDEV - 9924
		// Clear local context for selected patient - we are creating a new one
		form.getLocalContext().setLastEvent(PatientSearchEvent.NEW_PATIENT);

		form.getLocalContext().setSelectedPatient(null);
		
		setPatientFilterDetails();
		PatientShort voPatShort = new PatientShort();
		form.getGlobalContext().Core.setPatientToBeDisplayed(voPatShort);

		form.fireCustomControlValueChanged();
	}

	private void setPatientFilterDetails()
	{
		PatientFilter voPatFilter = new PatientFilter();
		
		//WDEV-17588
		if (form.getGlobalContext().Core.getPatientFilter() != null && Boolean.TRUE.equals(form.getGlobalContext().Core.getPatientFilter().getExcludeDeceasedPatients()))
		{
			voPatFilter.setExcludeDeceasedPatients(Boolean.TRUE);
		}
		
		if (form.Identifier().getValue() != null && form.Identifier().getValue().length() > 0)
		{
			if (form.PatientID().getValue() == null)
			{
				engine.showMessage("Please select a Patient ID Type");
				form.PatientID().setFocus();
				return;
			}
			PatientId pid = new PatientId();
			pid.setType(form.PatientID().getValue());	
			pid.setValue(form.Identifier().getValue());			
			voPatFilter.setPersId(pid);
		
		}
		else
		{
			voPatFilter.setForename(form.Forename().getValue());
			voPatFilter.setSurname(form.Surname().getValue());
			voPatFilter.setSex(form.Sex().getValue());
			voPatFilter.setDob(form.DOB().getValue());
			voPatFilter.setAddress(form.txtAddress().getValue());
			voPatFilter.setCounty(form.cmbCounty().getValue());
			voPatFilter.setPostCode(form.txtPostCode().getValue());
		}
		
		form.getGlobalContext().Core.setPatientFilter(voPatFilter);
		form.getLocalContext().setPatientFilter(voPatFilter);
	}

	protected void onDyngrdPatientRowSelectionChanged(DynamicGridRow row)
	{
		if(row == null)
			return;
		
		if ( row.getValue() instanceof PatientShort) 
		{
			setPatientFilterDetails();
			//form.getGlobalContext().Core.clearPatientShort();
			PatientShort ps = (PatientShort)form.dyngrdPatient().getValue();
			//form.getGlobalContext().Core.setPatientToBeDisplayed(ps);
			form.getLocalContext().setSelectedPatient(ps);
			form.getLocalContext().setLastEvent(PatientSearchEvent.PATIENT_SELECTED);
			form.fireCustomControlValueChanged();
		}
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		
	}
	
	
	//------------------- Component Interface methods ---------------------------
	
	
	public PatientShort getSelectedPatient() 
	{
		return form.getLocalContext().getSelectedPatient();
	}

	public void initialize(Boolean allowNewPatient) 
	{
		form.getLocalContext().setAllowNewPatient(allowNewPatient);
		
		setDefaults();
		formatPatientResultsGrid();
	}

	public void clear() 
	{
		clearResults();
	}

	public PatientSearchEvent getEvent() 
	{
		if(!form.getLocalContext().getLastEventIsNotNull())
			return PatientSearchEvent.NONE;
		
		return form.getLocalContext().getLastEvent();
	}

	//WDEV-15958 - start here
	public void setFilterCriteria(PatientFilter filter)
	{
		if (filter==null)
			return;
		
    	form.Surname().setValue(filter.getSurname());
    	form.Forename().setValue(filter.getForename());
    	form.DOB().setValue(filter.getDob());
    	form.Sex().setValue(filter.getSex());
    	if (filter.getPersId() != null)
    	{
    		form.Surname().setValue(null);
    		form.Forename().setValue(null);
    		form.DOB().setValue(null);
    		form.Sex().setValue(null);
    
    		form.PatientID().setValue(filter.getPersId().getType());
    		form.Identifier().setValue(filter.getPersId().getValue());		
    		form.Identifier().setFocus();
    	}
		
	}
	
	@Override
	protected void onDyngrdPatientColumnHeaderClicked(DynamicGridColumn column) //WDEV-15958
	{
		// Manual sort after DOB
		if(column.getIdentifier().equals(COL_DOB))
		{
			if (form.getLocalContext().getSortOrderDOB() == null || !form.getLocalContext().getSortOrderDOB().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrderDOB(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderDOB(SortOrder.DESCENDING);
			
			populateGridWithPatients(manualSortDOB(form.getLocalContext().getSortOrderDOB()));
		}
	
		// Manual sort after age
		if (COL_AGE.equals(column.getIdentifier()))
		{
			if (!SortOrder.ASCENDING.equals(form.getLocalContext().getSortOrderAge()))
				form.getLocalContext().setSortOrderAge(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrderAge(SortOrder.DESCENDING);
			
			populateGridWithPatients(manualSortAge(form.getLocalContext().getSortOrderAge()));
		}
	}
	
	private PatientShortCollection manualSortAge(SortOrder sortOrderAge)
	{
		PatientShortCollection patients = new PatientShortCollection();
		
		for(int i = 0;i < form.dyngrdPatient().getRows().size();i++)
		{
			patients.add((PatientShort) form.dyngrdPatient().getRows().get(i).getValue());
		}
		
		form.dyngrdPatient().getRows().clear();
		patients.sort(new AgeComparator(sortOrderAge));
		return patients;
	}

	private PatientShortCollection manualSortDOB(SortOrder sortOrder)
	{
		PatientShortCollection patients = new PatientShortCollection();
		
		for(int i = 0;i < form.dyngrdPatient().getRows().size();i++)
		{
			patients.add((PatientShort) form.dyngrdPatient().getRows().get(i).getValue());
		}
		form.dyngrdPatient().getRows().clear();
		patients.sort(new DobComparator(sortOrder));
		return patients;
	}
	
	public class AgeComparator implements Comparator
	{
		private int direction = 1;
		
		public AgeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AgeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		
		public int compare(Object ob1, Object ob2) 
		{
			Integer age1 = null;
			Integer age2 = null;
			if(ob1 instanceof PatientShort )
			{
				PatientShort ps1 = (PatientShort)ob1;
				age1 = ps1.getAge();
			}
			if(ob2 instanceof PatientShort)
			{
				PatientShort ps2 = (PatientShort)ob2;
				age2 = ps2.getAge();
			}
			
			if(age1 != null && age2!=null)
				return  age1.compareTo(age2)*direction;
			
			if (age1 != null && !(age2!=null))
				return direction;
			
			if (age2!=null && !(age1 != null))
				return -1 * direction;
			
			return 0;
		}
		
	}
	
	public class DobComparator implements Comparator
	{
		private int direction = 1;
		
		public DobComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public DobComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			PartialDate pdate1 = null;
			PartialDate pdate2 = null;
			if(ob1 instanceof PatientShort )
			{
				PatientShort ps1 = (PatientShort)ob1;
				pdate1 = ps1.getDob();
			}
			if(ob2 instanceof PatientShort)
			{
				PatientShort ps2 = (PatientShort)ob2;
				pdate2 = ps2.getDob();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//WDEV-15958 - end here

	@Override
	protected void onChkSwapValueChanged() throws PresentationLogicException
	{
		if (Boolean.TRUE.equals(form.chkSwap().getValue()) && (form.Surname().getValue() != null || form.Forename().getValue() != null))
		{
			String temp = form.Surname().getValue();
			
			form.Surname().setValue(form.Forename().getValue());
			form.Forename().setValue(temp);
			
			doSearch();
		}
		
	}
}
