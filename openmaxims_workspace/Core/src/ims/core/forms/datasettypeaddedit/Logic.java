//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2418.19363)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.datasettypeaddedit;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DataSetTypeVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		DataSetTypeVo ds = form.getGlobalContext().Core.getDataSetRecord();

		if(form.getGlobalContext().Core.getDataSetRecordIsNotNull())
		{
			populateScreenFromData(ds);
		}
		else
		{
			form.chkActive().setValue(true);
		}

		boolean valuesDifferByGender = false;
		
		if(ds != null)
		{
			if(ds.getNormalBandMaxValueMaleIsNotNull() && !ds.getNormalBandMaxValueFemaleIsNotNull())
			{
				valuesDifferByGender = true;
			}
			if(!ds.getNormalBandMaxValueMaleIsNotNull() && ds.getNormalBandMaxValueFemaleIsNotNull())
			{
				valuesDifferByGender = true;
			}
			if(ds.getNormalBandMaxValueMaleIsNotNull() && ds.getNormalBandMaxValueFemaleIsNotNull() && !ds.getNormalBandMaxValueMale().equals(ds.getNormalBandMaxValueFemale()))
			{
				valuesDifferByGender = true;
			}
	
			if(ds.getNormalBandMinValueMaleIsNotNull() && !ds.getNormalBandMinValueFemaleIsNotNull())
			{
				valuesDifferByGender = true;
			}
			if(!ds.getNormalBandMinValueMaleIsNotNull() && ds.getNormalBandMinValueFemaleIsNotNull())
			{
				valuesDifferByGender = true;
			}
			if(ds.getNormalBandMinValueMaleIsNotNull() && ds.getNormalBandMinValueFemaleIsNotNull() && !ds.getNormalBandMinValueMale().equals(ds.getNormalBandMinValueFemale()))
			{
				valuesDifferByGender = true;
			}
		}
		
		form.chkGender().setValue(valuesDifferByGender);
		genderChanged();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(doSave())
		{
			engine.close(DialogResult.OK);
		}
			
	}
	private boolean doSave()
	{
		if(form.decBandMaxValue().getValue() == null)
		{
			engine.showMessage("The Male Normal band maximum value is mandatory");
			form.decBandMaxValue().setFocus();
			return false;
		}
		if(form.decBandMinValue().getValue() == null)
		{
			engine.showMessage("The Male Normal band minimum value is mandatory");
			form.decBandMinValue().setFocus();
			return false;
		}
		if(form.decBandMaxValue().getValue().floatValue() < form.decBandMinValue().getValue().floatValue())
		{
			engine.showMessage("The Male Normal band maximum value should be greater than Male Normal band minimum value !");
			form.decBandMaxValue().setFocus();
			return false;
		}
		
		if(form.cmbUnitOfMeasure().getValue() == null)
		{
			engine.showMessage("The Unit of Measure is mandatory");
			form.cmbUnitOfMeasure().setFocus();
			return false;
		}
		if(form.chkGender().getValue() == true)
		{
			if(form.decMaxFemale().getValue() == null)
			{
				engine.showMessage("The Female Normal band maximum value is mandatory");
				form.decMaxFemale().setFocus();
				return false;
			}
			if(form.decMinFemale().getValue() == null)
			{
				engine.showMessage("The Female Normal band minimum value is mandatory");
				form.decMinFemale().setFocus();
				return false;
			}
			
			if(form.decMaxFemale().getValue().floatValue() < form.decMinFemale().getValue().floatValue())
			{
				engine.showMessage("The Female Normal band maximum value should be greater than Female Normal band minimum value !");
				form.decMinFemale().setFocus();
				return false;
			}
		}
		
		if (form.intMinFactor().getValue() == null)
		{
			engine.showMessage("The Minimum Factor is mandatory");
			form.intMinFactor().setFocus();
			return false;
		}
		
		if (form.intMaxFactor().getValue() == null)
		{
			engine.showMessage("The Maximum Factor is mandatory");
			form.intMaxFactor().setFocus();
			return false;
		}
		
		if (form.intMinFactor().getValue() != null && form.intMinFactor().getValue().intValue() <= 1)
		{
			engine.showMessage("The Minimum Factor should be greater than 1");
			form.intMinFactor().setFocus();
			return false;
		}
		
		if (form.intMaxFactor().getValue() != null && form.intMaxFactor().getValue().intValue() <= 1)
		{
			engine.showMessage("The Maximum Factor should be greater than 1");
			form.intMaxFactor().setFocus();
			return false;
		}
		
		if (form.intMinFactor().getValue() != null && form.intMaxFactor().getValue() != null && form.intMinFactor().getValue().intValue() > form.intMaxFactor().getValue().intValue())
		{
			engine.showMessage("The Maximum Factor should be greater than Minimum Factor");
			form.intMaxFactor().setFocus();
			return false;
		}
				
		
		DataSetTypeVo record = populateDataFromScreen(form.getGlobalContext().Core.getDataSetRecord());
		
		if(form.chkGender().getValue() == false)
		{
			record.setNormalBandMaxValueFemale(record.getNormalBandMaxValueMale());
			record.setNormalBandMinValueFemale(record.getNormalBandMinValueMale());
		}
		
		String[] arrErrors = record.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getGlobalContext().Core.setDataSetRecord(domain.saveDataSetType(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			record = domain.getDataSetType(record);
			
			populateScreenFromData(record);
			form.getGlobalContext().Core.setDataSetRecord(record);
			
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("A Dataset type already exists for the name provided. Please chose a different name.");
			return false;
		}
		
		return true;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onChkGenderValueChanged() throws PresentationLogicException
	{
		genderChanged();
	}
	private void genderChanged()
	{
		boolean b;
		if(form.chkGender().getValue())
		{
			//values differ from male to female
			b = true;
		}
		else
		{
			b = false;
		}

		form.lblFemaleMax().setVisible(b);
		form.lblFemaleMin().setVisible(b);
		form.lblMaleMax().setVisible(b);
		form.lblMaleMin().setVisible(b);
		form.decMaxFemale().setVisible(b);
		form.decMinFemale().setVisible(b);
	}
}
