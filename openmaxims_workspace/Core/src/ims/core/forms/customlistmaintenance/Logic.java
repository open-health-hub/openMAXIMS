//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.forms.customlistmaintenance;

import ims.configuration.gen.ConfigFlag;
import ims.core.forms.customlistmaintenance.GenForm.lyrCustomListSearchLayer.tabCustomListDetailsContainer.grdCustomListRow;
import ims.core.forms.customlistmaintenance.GenForm.lyrCustomListSearchLayer.tabCustomListDetailsContainer.grdPatientsDetailsRow;
import ims.core.forms.customlistmaintenance.GenForm.lyrCustomListSearchLayer.tabCustomListSearchContainer.grdPatientsRow;
import ims.core.vo.CustomListVo;
import ims.core.vo.CustomListVoCollection;
import ims.core.vo.MDTPatientCustomListVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.PatientId;
import ims.core.vo.PatientShort;
import ims.core.vo.PatientShortCollection;
import ims.core.vo.lookups.PatIdType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateFormat;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	@Override
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	private void initialize() {
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
		form.getContextMenus().Core.hideAllCustomListMenuItems();
		form.getContextMenus().Core.getCustomListCREATEItem().setVisible(true);
		form.btnEdit().setVisible(false);
		form.lyrCustomListSearch().tabCustomListSearch().chkActiveOnly().setValue(true);
		form.lyrCustomListSearch().tabCustomListSearch().imbSearchCustomList().setAsDefaultButton();
		form.setMode(FormMode.VIEW);
	}
	@Override
	protected void onImbClearCustomListClick() throws PresentationLogicException {
		clear();
		form.getContextMenus().Core.hideAllCustomListMenuItems();
		form.getContextMenus().Core.getCustomListCREATEItem().setVisible(true);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
		//form.lyrCustomListSearch().tabCustomListDetails().imbAdd().setEnabled(false);
		if(form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);
	}

	private void clear()
	{
		clearCustomListCriteria();
		clearCustomList();
	}

	private void clearCustomListCriteria() {
		form.lyrCustomListSearch().tabCustomListSearch().cmbListType().setValue(null);
		form.lyrCustomListSearch().tabCustomListSearch().txtListName().setValue(null);
		form.lyrCustomListSearch().tabCustomListSearch().cmbSpecialty().setValue(null);
		form.lyrCustomListSearch().tabCustomListSearch().dteDate().setValue(null);
		form.lyrCustomListSearch().tabCustomListSearch().customControlMos().setValue(null);
	}
	private void clearCustomList()
	{
		form.lyrCustomListSearch().tabCustomListSearch().grdPatients().getRows().clear();
	}
	@Override
	protected void onImbSearchCustomListClick() throws PresentationLogicException {
		searchCustomList();
	}
	private void searchCustomList() {
		clearCustomList();
		form.getContextMenus().Core.hideAllCustomListMenuItems();
		form.getContextMenus().Core.getCustomListCREATEItem().setVisible(true);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
		if(form.getMode().equals(FormMode.VIEW))
			form.btnEdit().setVisible(false);

		populateListControl(domain.listCustomListTypes(populateFilter()));
	}

	private void populateListControl(CustomListVoCollection collCustomListVo) {
		if (collCustomListVo != null)
		{
			if (collCustomListVo.size() == 0)
			{
				engine.showMessage("No matching Custom List entries found.");
				return;
			}
			
			for (int i = 0; i < collCustomListVo.size(); i++)
			{
				CustomListVo voCustomListType = collCustomListVo.get(i);
				grdPatientsRow row = form.lyrCustomListSearch().tabCustomListSearch().grdPatients().getRows().newRow();

				if(voCustomListType.getListTypeIsNotNull())
					row.setColListType(voCustomListType.getListType().toString());
				if(voCustomListType.getListNameIsNotNull())
					row.setColListName(voCustomListType.getListName());
				if(voCustomListType.getSpecialtyIsNotNull())
					row.setColSpecialty(voCustomListType.getSpecialty().toString());
				if(voCustomListType.getDateIsNotNull())
					row.setColDate(voCustomListType.getDate().toString());
				if(voCustomListType.getListOwnerIsNotNull())
					row.setColListOwner(voCustomListType.getListOwner().toString());
				if(voCustomListType.getIsActiveIsNotNull())
					row.setColStatus(voCustomListType.getIsActive());
			
				row.setValue(voCustomListType);
			}
		}
		else
			engine.showMessage("No results match search criteria");
		
	}
	private CustomListVo populateFilter() {
		CustomListVo voFilter = new CustomListVo();
		
		voFilter.setListType(form.lyrCustomListSearch().tabCustomListSearch().cmbListType().getValue());
		voFilter.setListName(form.lyrCustomListSearch().tabCustomListSearch().txtListName().getValue());
		voFilter.setSpecialty(form.lyrCustomListSearch().tabCustomListSearch().cmbSpecialty().getValue());
		voFilter.setDate(form.lyrCustomListSearch().tabCustomListSearch().dteDate().getValue());
		voFilter.setListOwner((MemberOfStaffLiteVo) form.lyrCustomListSearch().tabCustomListSearch().customControlMos().getValue());
		if(form.lyrCustomListSearch().tabCustomListSearch().chkActiveOnly().getValue())
			voFilter.setIsActive(true);
		
		return voFilter;
	}
	@Override
	protected void onFormModeChanged() 
	{
		if(form.getMode().equals(FormMode.EDIT)){
			enableCustomListCriteriaDetails();
		}
	}
	
	private void enableCustomListCriteriaDetails() {
		form.lyrCustomListSearch().tabCustomListDetails().cmbListTypeDetails().setEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().txtListNameDetails().setEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().cmbSpecialtyDetails().setEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().setcustomControlMosDetailsEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().chkActiveOnlydetails().setEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().dteDateDetails().setEnabled(true);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{

		MDTPatientCustomListVo voPatientCustomList = new MDTPatientCustomListVo();
		if(form.getLocalContext().getPatientCustomListVoIsNotNull())
			voPatientCustomList = form.getLocalContext().getPatientCustomListVo();
		
		CustomListVo voCustomList = new CustomListVo();
		if(form.getLocalContext().getSelectedCustomListIsNotNull())
			voCustomList = form.getLocalContext().getSelectedCustomList();
		
		voCustomList = populateCustomListVo(voCustomList);
		
		if(form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size()==0){
			engine.showMessage("At least 1 Patient is required for a Custom List.");
			return;
		}
		PatientShortCollection collPatientShort = new PatientShortCollection();
		for (int i = 0; i < form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size(); i++)
		{
			voPatientCustomList.setCustomListType(voCustomList);
			grdCustomListRow row = form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().get(i);
			if (row.getValue() != null)
				collPatientShort.add(row.getValue());			
		}
		
		if(ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("DTO"))
		{
			for(int i = 0; i< collPatientShort.size();i++)
			{
				if(collPatientShort.get(i).getID_Patient() == null)
				{
					PatientShort temPat = null;
					try
					{
						temPat = domain.getPatient(collPatientShort.get(i));
					}
					catch(StaleObjectException e)
					{
						engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						return;
					}
					catch (DomainInterfaceException exc)	//WDEV-11223
					{
						engine.showMessage(exc.getMessage());
						return;
					}
					
					collPatientShort.set(i,temPat);
				}
					
			}
		}
		
		voPatientCustomList.setPatients(collPatientShort);
		
		ArrayList<String> screenErrors = new ArrayList<String>();
		
		if (form.lyrCustomListSearch().tabCustomListDetails().cmbSpecialtyDetails().getValue()==null)
			screenErrors.add("Specialty is mandatory.");
		if (form.lyrCustomListSearch().tabCustomListDetails().dteDateDetails().getValue()==null)
			screenErrors.add("Date is mandatory.");
		
		String[] errors = voPatientCustomList.getCustomListType().validate();

		if(errors != null)
		{	
			for(int i=0; i<errors.length; i++){
				screenErrors.add(i, errors[i]);
			}
		}
		String[] arrErrors = voPatientCustomList.validate();
		String[] arrScreenAndVoErrors = addScreenErrorsToVOErrors(screenErrors, arrErrors);
		if (arrScreenAndVoErrors.length == 0)
		{
			try 
			{
				voPatientCustomList = domain.saveCustomList(voCustomList, voPatientCustomList);
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
		else
		{
			engine.showErrors("Error", arrScreenAndVoErrors);
			return;
		}
				
		clearPatientSearch();
		form.lyrCustomListSearch().showtabCustomListSearch();
		form.lyrCustomListSearch().tabCustomListSearch().setHeaderEnabled(true);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(true);
		form.setMode(FormMode.VIEW);
		form.btnEdit().setVisible(false);
		searchCustomList();
	}
	
	private String[] addScreenErrorsToVOErrors(ArrayList screenErrors, String[] arrErrors)
	{
		String[] arrAllErrors = null;

		if (arrErrors != null)
		{
			arrAllErrors = new String[screenErrors.size() + arrErrors.length];
			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);

			int i = 0;
			for (int p = screenErrors.size(); p < arrAllErrors.length; p++)
			{
				arrAllErrors[p] = arrErrors[i];
				i++;
			}
		}
		else
		{
			arrAllErrors = new String[screenErrors.size()];

			for (int i = 0; i < screenErrors.size(); i++)
				arrAllErrors[i] = (String) screenErrors.get(i);
		}

		return arrAllErrors;
	}
	
	private CustomListVo populateCustomListVo(CustomListVo voCustomList) {
		voCustomList.setListType(form.lyrCustomListSearch().tabCustomListDetails().cmbListTypeDetails().getValue());
		voCustomList.setListName(form.lyrCustomListSearch().tabCustomListDetails().txtListNameDetails().getValue());
		voCustomList.setSpecialty(form.lyrCustomListSearch().tabCustomListDetails().cmbSpecialtyDetails().getValue());
		voCustomList.setDate(form.lyrCustomListSearch().tabCustomListDetails().dteDateDetails().getValue());
		voCustomList.setListOwner((MemberOfStaffLiteVo) form.lyrCustomListSearch().tabCustomListDetails().customControlMosDetails().getValue());
		voCustomList.setIsActive(form.lyrCustomListSearch().tabCustomListDetails().chkActiveOnlydetails().getValue());
		
		return voCustomList;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearPatientSearch();
		form.setMode(FormMode.VIEW);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
		form.lyrCustomListSearch().showtabCustomListSearch();
		form.lyrCustomListSearch().tabCustomListSearch().setHeaderEnabled(true);
		form.lyrCustomListSearch().tabCustomListSearch().imbSearchCustomList().setAsDefaultButton();
		searchCustomList();
	}
	@Override
	protected void onGrdPatientsSelectionChanged() throws PresentationLogicException {
		form.getContextMenus().Core.getCustomListVIEW_EDITItem().setVisible(true);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
		form.btnEdit().setVisible(false);
	}
	@Override
	protected void onImbFindDetailsClick() throws PresentationLogicException {
		clearPatientSearch();
	}
	private void clearPatientSearch() {
		form.lyrCustomListSearch().tabCustomListDetails().txtSurname().setValue("");
		form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().setValue("");
		form.lyrCustomListSearch().tabCustomListDetails().txtName().setValue("");
		form.lyrCustomListSearch().tabCustomListDetails().pdtDate().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().clear();
		form.lyrCustomListSearch().tabCustomListDetails().lblTotal().setValue("Total : 0");
		if(form.getMode().equals(FormMode.EDIT))
			form.lyrCustomListSearch().tabCustomListDetails().imbAdd().setEnabled(false);
	}
	@Override
	protected void onImbSearchDetailsClick() throws PresentationLogicException {
		//WDEV-10854 prevent search on details tab whe disabled
		if(form.lyrCustomListSearch().tabCustomListDetails().iscustomControlMosDetailsEnabled()){
			if (validateSearchCriteria())
				populateGridWithPatients(search());
			
			form.lyrCustomListSearch().tabCustomListDetails().imbAdd().setEnabled(false);
		}
		else
			searchCustomList();
			
	}

	private void populateGridWithPatients(PatientShortCollection voCollPatientShort)
	{
		if (voCollPatientShort == null)
			return;

		for (int i = 0; i < voCollPatientShort.size(); i++)
		{
			PatientShort voPatShort = voCollPatientShort.get(i);
			grdPatientsDetailsRow row = form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().newRow();

			if (voPatShort.getName() != null)
			{
				if (voPatShort.getName().getSurnameIsNotNull())
				{
					row.setSurname(voPatShort.getName().getSurname());
					row.setTooltipForSurname(voPatShort.getName().getSurname());
				}
				if (voPatShort.getName().getForenameIsNotNull())
				{
					row.setName(voPatShort.getName().getForename());
					row.setTooltipForName(voPatShort.getName().getForename());
				}
			}

			if (voPatShort.getDisplayId() != null)
			{
				row.setHospitalNumber(voPatShort.getDisplayId().getValue());
				row.setTooltipForHospitalNumber(voPatShort.getDisplayId().getValue());
			}
			
			if (voPatShort.getDob() != null)
				row.setDOB(voPatShort.getDob().toString(DateFormat.STANDARD));

			row.setValue(voPatShort);

			if (voPatShort.getAssociatedPatientIsNotNull())
				row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());

			if (voPatShort.getIsDead().booleanValue())
				row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());
		}
		form.lyrCustomListSearch().tabCustomListDetails().lblTotal().setValue("Total : " + form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size());
	}
	private PatientShortCollection search()
	{
		form.getLocalContext().setSelectedPatient(null);
		
		form.lyrCustomListSearch().tabCustomListDetails().lblTotal().setValue("Total : " + form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size());
		form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().clear();

		PatientFilter voFilter = getPatientFilterDetails();
		PatientShortCollection voCollPatientShort = null;

		try
		{
			voCollPatientShort = domain.searchPatients(voFilter);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return null;
		}

		if (voCollPatientShort.size() == 0)
		{
			engine.showMessage("No patients found");
			return null;
		}

		return voCollPatientShort;
	}
	private PatientFilter getPatientFilterDetails()
	{
		PatientFilter voPatFilter = new PatientFilter();

		if (form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().getValue() != null && form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().getValue().length() > 0)
		{
			PatientId pid = new PatientId();
			pid.setType(PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()));
			pid.setValue(form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().getValue());
			voPatFilter.setPersId(pid);
		}
		else
		{
			voPatFilter.setForename(form.lyrCustomListSearch().tabCustomListDetails().txtName().getValue());
			voPatFilter.setSurname(form.lyrCustomListSearch().tabCustomListDetails().txtSurname().getValue());
			voPatFilter.setDob(form.lyrCustomListSearch().tabCustomListDetails().pdtDate().getValue());
		}

		return voPatFilter;
	}
	private boolean validateSearchCriteria()
	{
		if (form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().getValue() != null && form.lyrCustomListSearch().tabCustomListDetails().txtDisplayId().getValue().length() > 0)
			clearSearchCriteriaFields();
		else
		{

			// If it is a local search strip out the non-alpha except % chars
			// before validation
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (form.lyrCustomListSearch().tabCustomListDetails().txtSurname().getValue() == null || form.lyrCustomListSearch().tabCustomListDetails().txtSurname().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Surname search string");
				return false;
			}
			else if (form.lyrCustomListSearch().tabCustomListDetails().txtSurname().getValue() == null || form.lyrCustomListSearch().tabCustomListDetails().txtSurname().getValue().length() == 0)
			{
				engine.showMessage("Please enter a Surname search string");
				return false;
			}

			// Mandatory Search on forname
			if ((ConfigFlag.DOM.PATIENT_SEARCH_TYPE.getValue().equals("LOCAL")) && (ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.lyrCustomListSearch().tabCustomListDetails().txtName().getValue() == null || form.lyrCustomListSearch().tabCustomListDetails().txtName().getValue().replaceAll("[^a-zA-Z%]", "").length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}

			else if ((ConfigFlag.UI.SEARCH_REQ_FORENAME.getValue()) && (form.lyrCustomListSearch().tabCustomListDetails().txtName().getValue() == null || form.lyrCustomListSearch().tabCustomListDetails().txtName().getValue().length() == 0))
			{
				engine.showMessage("Please enter a valid Forename search string");
				return false;
			}
		}

		return true;
	}
	private void clearSearchCriteriaFields()
	{
		form.lyrCustomListSearch().tabCustomListDetails().txtSurname().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().txtName().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().pdtDate().setValue(null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException {
		switch (menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.CustomList.CREATE:
				createCustomList();
				form.lyrCustomListSearch().tabCustomListDetails().imbSearchDetails().setAsDefaultButton();
			break;
			case GenForm.ContextMenus.CoreNamespace.CustomList.VIEW_EDIT:
				form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(true);
				form.lyrCustomListSearch().showtabCustomListDetails();
				form.btnEdit().setVisible(true);
				form.getLocalContext().setSelectedCustomList(form.lyrCustomListSearch().tabCustomListSearch().grdPatients().getValue());
				form.getLocalContext().setPatientCustomListVo(domain.getCustomList(form.lyrCustomListSearch().tabCustomListSearch().grdPatients().getValue()));
				populateDetailsScreen();
			break;
				
			default :
				break;
		}
		
	}
	private void editCustomList() {
		form.lyrCustomListSearch().tabCustomListSearch().setHeaderEnabled(false);
		form.setMode(FormMode.EDIT);
		
	}
	private void populateDetailsScreen() {
		CustomListVo voCustomList = form.getLocalContext().getSelectedCustomList();
		if(voCustomList==null)
			return;
		form.lyrCustomListSearch().tabCustomListDetails().cmbListTypeDetails().setValue(voCustomList.getListType());
		form.lyrCustomListSearch().tabCustomListDetails().txtListNameDetails().setValue(voCustomList.getListName());
		form.lyrCustomListSearch().tabCustomListDetails().cmbSpecialtyDetails().setValue(voCustomList.getSpecialty());
		form.lyrCustomListSearch().tabCustomListDetails().dteDateDetails().setValue(voCustomList.getDate());
		form.lyrCustomListSearch().tabCustomListDetails().customControlMosDetails().setValue(voCustomList.getListOwner());
		form.lyrCustomListSearch().tabCustomListDetails().chkActiveOnlydetails().setValue(voCustomList.getIsActive());
		
		MDTPatientCustomListVo voPatientCustomList = form.getLocalContext().getPatientCustomListVo();
		
		if(voPatientCustomList!=null && voPatientCustomList.getPatientsIsNotNull()){
			PatientShortCollection collPatientShort = voPatientCustomList.getPatients().sort(SortOrder.ASCENDING);
		
			form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().clear();
			if(collPatientShort!=null)
				for (int i = 0; i < collPatientShort.size(); i++) 
				{
					grdCustomListRow row = form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().newRow();
					
					PatientShort patientShort = collPatientShort.get(i);
					if(patientShort.getName().getForenameIsNotNull())
						row.setColForename(patientShort.getName().getForename());
					row.setColSurname(patientShort.getName().getSurname());
					if(patientShort.getDobIsNotNull())
						row.setColDOB(patientShort.getDob().toString(DateFormat.STANDARD));
					if (patientShort.getDisplayId() != null)
						row.setColHospNum(patientShort.getDisplayId().getValue());
			
					row.setValue(patientShort);
				}
		}
	}
	private void createCustomList() {
		clearDetails();
		form.lyrCustomListSearch().tabCustomListDetails().chkActiveOnlydetails().setValue(true);
		form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(true);
		form.lyrCustomListSearch().showtabCustomListDetails();
		form.lyrCustomListSearch().tabCustomListSearch().setHeaderEnabled(false);
		form.setMode(FormMode.EDIT);
		
		form.getLocalContext().setSelectedCustomList(null);
		form.getLocalContext().setPatientCustomListVo(null);		
	}
	private void clearDetails() {
		form.lyrCustomListSearch().tabCustomListDetails().cmbListTypeDetails().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().txtListNameDetails().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().cmbSpecialtyDetails().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().dteDateDetails().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().customControlMosDetails().setValue(null);
		form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().clear();
	}
	@Override
	protected void onImbRemoveClick() throws PresentationLogicException {
		removePatient();
		updateImbRemoveStatus();
	}

	private void removePatient()
	{
		if (form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size() == 0)
		{
			engine.showMessage("There are no patients selected to Remove from the Custom List");
			return;
		}

		int selCount = 0;

		int i = 0;
		while (i < form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size())
		{
			if (form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().get(i).getColSelect() == true)
			{
				selCount++;
				form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().remove(i);
			}
			else
				i++;
		}

		if (selCount == 0)
		{
			engine.showMessage("There are no patients selected to remove from the Custom List");
			return;
		}
	}

	@Override
	protected void onImbAddClick() throws PresentationLogicException {
		newPatient();
		updateImbAddStatus();
		
	}
	private void updateImbAddStatus() 
	{
		if (form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size() > 0)
		{
			boolean found = false; 
			for (int i = 0; i < form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size(); i++) 
			{
				if (form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().get(i).getColSelect())
				{
					found = true;
					break;
				}
			}
			form.lyrCustomListSearch().tabCustomListDetails().imbAdd().setEnabled(found);
		}
		else
			form.lyrCustomListSearch().tabCustomListDetails().imbAdd().setEnabled(false);
	}
	private void newPatient() {
		if (form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size() == 0)
		{
			engine.showMessage("There are no patients selected to add to the Custom List");
			return;
		}

		int selCount = 0;

		int i = 0;
		while (i < form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().size())
		{
			if (form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().get(i).getColSelect() == true)
			{
				selCount++;
				grdCustomListRow row = form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().newRow();
				grdPatientsDetailsRow pRow = form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().get(i);

				PatientShort patientShort = pRow.getValue();
				if(patientShort.getName().getForenameIsNotNull())
					row.setColForename(patientShort.getName().getForename());
				row.setColSurname(patientShort.getName().getSurname());
				if(patientShort.getDobIsNotNull())
					row.setColDOB(patientShort.getDob().toString(DateFormat.STANDARD));
				if (patientShort.getDisplayId() != null)
					row.setColHospNum(patientShort.getDisplayId().getValue());

				row.setValue(patientShort);
				form.lyrCustomListSearch().tabCustomListDetails().grdPatientsDetails().getRows().remove(i);
			}
			else
				i++;
		}

		if (selCount == 0)
		{
			engine.showMessage("There are no patients selected to add to the Custom List");
			return;
		}
		
	}
	@Override
	protected void onGrdPatientsDetailsGridCheckBoxClicked(int column, grdPatientsDetailsRow row, boolean isChecked) throws PresentationLogicException {
		updateImbAddStatus();		
	}

	private void updateImbRemoveStatus() 
	{
		boolean found = false;
		boolean hasRecords = form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size() > 0 ? true : false;
		
		if (hasRecords)
		{			
			for (int i = 0; i < form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().size(); i++) 
			{
				if (form.lyrCustomListSearch().tabCustomListDetails().grdCustomList().getRows().get(i).getColSelect())
				{
					found = true;
					break;
				}
			}		
		}
		
		form.lyrCustomListSearch().tabCustomListDetails().imbRemove().setEnabled(found || (hasRecords && found));		
	}
	@Override
	protected void onBtnEditClick() throws PresentationLogicException {
		form.lyrCustomListSearch().showtabCustomListDetails();
		editCustomList();	
		form.lyrCustomListSearch().tabCustomListDetails().imbSearchDetails().setAsDefaultButton();
	}
	@Override
	protected void onGrdCustomListGridCheckBoxClicked(int column, grdCustomListRow row, boolean isChecked) throws PresentationLogicException {
		updateImbRemoveStatus();		
	}
	@Override
	protected void onlyrCustomListSearchTabChanged(LayerBridge tab) {
		if(tab.equals(form.lyrCustomListSearch().tabCustomListSearch())){
			searchCustomList();
			form.lyrCustomListSearch().tabCustomListDetails().setHeaderEnabled(false);
			form.lyrCustomListSearch().showtabCustomListSearch();
			form.lyrCustomListSearch().tabCustomListSearch().setHeaderEnabled(true);
			form.lyrCustomListSearch().tabCustomListSearch().imbSearchCustomList().setAsDefaultButton();
		}
	}
}
