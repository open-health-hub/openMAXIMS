//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.customlistmaintenance;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrCustomListSearchLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabCustomListSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbListTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.CustomListType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.CustomListType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.CustomListType getValue()
				{
					return (ims.core.vo.lookups.CustomListType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.CustomListType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdPatientsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColListTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColListTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColListTypeOpened()
				{
					super.row.showOpened(0);
				}
				public String getColListType()
				{
					return (String)super.row.get(0);
				}
				public void setColListType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColListTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColListNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColListNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColListNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColListName()
				{
					return (String)super.row.get(1);
				}
				public void setColListName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColListNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSpecialtyReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSpecialtyOpened()
				{
					super.row.showOpened(2);
				}
				public String getColSpecialty()
				{
					return (String)super.row.get(2);
				}
				public void setColSpecialty(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColSpecialtyTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(3);
				}
				public String getColDate()
				{
					return (String)super.row.get(3);
				}
				public void setColDate(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColListOwnerReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColListOwnerReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColListOwnerOpened()
				{
					super.row.showOpened(4);
				}
				public String getColListOwner()
				{
					return (String)super.row.get(4);
				}
				public void setColListOwner(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColListOwnerTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(5);
				}
				public boolean getColStatus()
				{
					return ((Boolean)super.row.get(5)).booleanValue();
				}
				public void setColStatus(boolean value)
				{
					super.row.set(5, new Boolean(value));
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.CustomListVo getValue()
				{
					return (ims.core.vo.CustomListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.CustomListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsRow get(int index)
				{
					return new grdPatientsRow(super.collection.get(index));
				}
				public grdPatientsRow newRow()
				{
					return new grdPatientsRow(super.collection.newRow());
				}
				public grdPatientsRow newRow(boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsRow newRowAt(int index)
				{
					return new grdPatientsRow(super.collection.newRowAt(index));
				}
				public grdPatientsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.CustomListVoCollection getValues()
				{
					ims.core.vo.CustomListVoCollection listOfValues = new ims.core.vo.CustomListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.CustomListVo getValue()
				{
					return (ims.core.vo.CustomListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.CustomListVo value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsRowCollection getRows()
				{
					return new grdPatientsRowCollection(super.grid.getRows());
				}
				public grdPatientsRow getRowByValue(ims.core.vo.CustomListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsRow(row);
				}
				public void setColListTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColListTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColListNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColListNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColListOwnerHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColListOwnerHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 456, 56, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlMosForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
				//ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(456), new Integer(56), new Integer(240), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_customControlMosForm, instance1 } );
				ims.framework.Control m_customControlMosControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 7), m_customControlMosForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosControl);
				Menu[] menus1 = m_customControlMosForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 376, 32, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 376, 56, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 32, 80, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 32, 56, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 32, 32, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type: ", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 104, 56, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 456, 32, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 104, 80, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 104, 32, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbListTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbListTypeTemp);
				cmbListTypeComboBox cmbListType = (cmbListTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeComboBox.class, m_cmbListTypeTemp);
				super.addComboBox(cmbListType);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 456, 80, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 129, 776, 408, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuCustomList, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsTemp);
				grdPatientsGrid grdPatients = (grdPatientsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsGrid.class, m_grdPatientsTemp);
				grdPatients.addStringColumn("List type ", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("List Name ", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Specialty", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addStringColumn("List Owner", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatients.addBoolColumn("Status", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdPatients);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 752, 26, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 720, 26, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, null, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.mosquery.IComponent customControlMos()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlMosValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlMosVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlMosEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlMosEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public TextBox txtListName()
			{
				return (TextBox)super.getControl(7);
			}
			public DateControl dteDate()
			{
				return (DateControl)super.getControl(8);
			}
			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(0);
			}
			public cmbListTypeComboBox cmbListType()
			{
				return (cmbListTypeComboBox)super.getComboBox(1);
			}
			public CheckBox chkActiveOnly()
			{
				return (CheckBox)super.getControl(11);
			}
			public grdPatientsGrid grdPatients()
			{
				return (grdPatientsGrid)super.getGrid(0);
			}
			public ImageButton imbClearCustomList()
			{
				return (ImageButton)super.getControl(13);
			}
			public ImageButton imbSearchCustomList()
			{
				return (ImageButton)super.getControl(14);
			}
		}
		public static class tabCustomListDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyDetailsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbListTypeDetailsComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.CustomListType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.CustomListType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.CustomListType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.CustomListType getValue()
				{
					return (ims.core.vo.lookups.CustomListType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.CustomListType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdPatientsDetailsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientsDetailsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColSelect(String value)
				{
					super.row.setTooltip(0, value);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setHospitalNumberReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isHospitalNumberReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showHospitalNumberOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForHospitalNumber(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getHospitalNumber()
				{
					return (String)super.row.get(1);
				}
				public void setHospitalNumber(String value)
				{
					super.row.set(1, value);
				}
				public void setCellHospitalNumberTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSurnameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSurnameOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForSurname(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getSurname()
				{
					return (String)super.row.get(2);
				}
				public void setSurname(String value)
				{
					super.row.set(2, value);
				}
				public void setCellSurnameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setNameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isNameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showNameOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForName(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getName()
				{
					return (String)super.row.get(3);
				}
				public void setName(String value)
				{
					super.row.set(3, value);
				}
				public void setCellNameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isDOBReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showDOBOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForDOB(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getDOB()
				{
					return (String)super.row.get(4);
				}
				public void setDOB(String value)
				{
					super.row.set(4, value);
				}
				public void setCellDOBTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientsDetailsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientsDetailsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientsDetailsRow get(int index)
				{
					return new grdPatientsDetailsRow(super.collection.get(index));
				}
				public grdPatientsDetailsRow newRow()
				{
					return new grdPatientsDetailsRow(super.collection.newRow());
				}
				public grdPatientsDetailsRow newRow(boolean autoSelect)
				{
					return new grdPatientsDetailsRow(super.collection.newRow(autoSelect));
				}
				public grdPatientsDetailsRow newRowAt(int index)
				{
					return new grdPatientsDetailsRow(super.collection.newRowAt(index));
				}
				public grdPatientsDetailsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientsDetailsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientsDetailsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public void setHospitalNumberCaption(String value)
				{
					this.grid.setColumnCaption(1, value);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.PatientShortCollection getValues()
				{
					ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.grid.setValue(value);
				}
				public grdPatientsDetailsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientsDetailsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientsDetailsRowCollection getRows()
				{
					return new grdPatientsDetailsRowCollection(super.grid.getRows());
				}
				public grdPatientsDetailsRow getRowByValue(ims.core.vo.PatientShort value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientsDetailsRow(row);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setHospitalNumberHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getHospitalNumberHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public static class grdCustomListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdCustomListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(0);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSurnameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSurnameOpened()
				{
					super.row.showOpened(1);
				}
				public String getColSurname()
				{
					return (String)super.row.get(1);
				}
				public void setColSurname(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColSurnameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColForenameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColForenameOpened()
				{
					super.row.showOpened(2);
				}
				public String getColForename()
				{
					return (String)super.row.get(2);
				}
				public void setColForename(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColForenameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDOBReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDOBReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDOBOpened()
				{
					super.row.showOpened(3);
				}
				public String getColDOB()
				{
					return (String)super.row.get(3);
				}
				public void setColDOB(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDOBTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColHospNumReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColHospNumReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColHospNumOpened()
				{
					super.row.showOpened(4);
				}
				public String getColHospNum()
				{
					return (String)super.row.get(4);
				}
				public void setColHospNum(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColHospNumTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdCustomListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdCustomListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdCustomListRow get(int index)
				{
					return new grdCustomListRow(super.collection.get(index));
				}
				public grdCustomListRow newRow()
				{
					return new grdCustomListRow(super.collection.newRow());
				}
				public grdCustomListRow newRow(boolean autoSelect)
				{
					return new grdCustomListRow(super.collection.newRow(autoSelect));
				}
				public grdCustomListRow newRowAt(int index)
				{
					return new grdCustomListRow(super.collection.newRowAt(index));
				}
				public grdCustomListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdCustomListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdCustomListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.PatientShortCollection getValues()
				{
					ims.core.vo.PatientShortCollection listOfValues = new ims.core.vo.PatientShortCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientShort getValue()
				{
					return (ims.core.vo.PatientShort)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientShort value)
				{
					super.grid.setValue(value);
				}
				public grdCustomListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdCustomListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdCustomListRowCollection getRows()
				{
					return new grdCustomListRowCollection(super.grid.getRows());
				}
				public grdCustomListRow getRowByValue(ims.core.vo.PatientShort value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdCustomListRow(row);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDOBHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDOBHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColHospNumHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColHospNumHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 360, 400, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,"Search Patients", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 776, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 456, 56, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlMosDetailsForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper18.getSize(), instance1, startTabIndex.intValue() + 1021, skipContextValidation);
				//ims.framework.Control m_customControlMosDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(456), new Integer(56), new Integer(328), new Integer(20), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1021), m_customControlMosDetailsForm, instance1 } );
				ims.framework.Control m_customControlMosDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1021), m_customControlMosDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosDetailsControl);
				Menu[] menus1 = m_customControlMosDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 32, 248, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DOB:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 32, 222, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital No.:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 32, 196, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 32, 170, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 32, 512, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 176, 304, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 384, 32, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 384, 56, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 32, 80, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 32, 56, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 32, 32, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Type: ", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 112, 220, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 2028), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 112, 194, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 2026), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 112, 168, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 2024), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 112, 56, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 456, 32, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// PartialDateBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 112, 248, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 2030), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 112, 80, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyDetailsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbSpecialtyDetailsTemp);
				cmbSpecialtyDetailsComboBox cmbSpecialtyDetails = (cmbSpecialtyDetailsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyDetailsComboBox.class, m_cmbSpecialtyDetailsTemp);
				super.addComboBox(cmbSpecialtyDetails);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 112, 32, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbListTypeDetailsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbListTypeDetailsTemp);
				cmbListTypeDetailsComboBox cmbListTypeDetails = (cmbListTypeDetailsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListTypeDetailsComboBox.class, m_cmbListTypeDetailsTemp);
				super.addComboBox(cmbListTypeDetails);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 456, 80, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 2023), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 32, 307, 328, 197, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdPatientsDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 2034), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientsDetailsTemp);
				grdPatientsDetailsGrid grdPatientsDetails = (grdPatientsDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientsDetailsGrid.class, m_grdPatientsDetailsTemp);
				grdPatientsDetails.addBoolColumn(" ", 0, 0, 20, false, true, 0, true);
				grdPatientsDetails.addStringColumn("Hosp. No.", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatientsDetails.addStringColumn("Surname", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatientsDetails.addStringColumn("Name", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatientsDetails.addStringColumn("DOB", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatientsDetails);
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 440, 136, 352, 400, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdCustomListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 2040), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdCustomListTemp);
				grdCustomListGrid grdCustomList = (grdCustomListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCustomListGrid.class, m_grdCustomListTemp);
				grdCustomList.addBoolColumn(" ", 0, 0, 20, false, true, 0, true);
				grdCustomList.addStringColumn("Surname", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCustomList.addStringColumn("Forename", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCustomList.addStringColumn("DOB", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCustomList.addStringColumn("Hosp. No.", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdCustomList);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 328, 240, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 2032), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 296, 240, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search for patients matching 'Search Criteria'", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 384, 184, 48, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 2038), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Admin.LeftArrowEnabled24, form_images_local.Admin.LeftArrowDisabled24, "Remove patient from Custom List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 384, 144, 48, 30, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 2036), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Admin.RightArrowEnabled24, form_images_local.Admin.RightArrowDisabled24, "Add patient to Custom List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 32, 280, 328, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
			}

			public ims.core.forms.mosquery.IComponent customControlMosDetails()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setcustomControlMosDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean iscustomControlMosDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setcustomControlMosDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean iscustomControlMosDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public Label lbl16()
			{
				return (Label)super.getControl(4);
			}
			public Label lblTotal()
			{
				return (Label)super.getControl(7);
			}
			public TextBox txtDisplayId()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtSurname()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtListNameDetails()
			{
				return (TextBox)super.getControl(17);
			}
			public DateControl dteDateDetails()
			{
				return (DateControl)super.getControl(18);
			}
			public PartialDateBox pdtDate()
			{
				return (PartialDateBox)super.getControl(19);
			}
			public cmbSpecialtyDetailsComboBox cmbSpecialtyDetails()
			{
				return (cmbSpecialtyDetailsComboBox)super.getComboBox(0);
			}
			public cmbListTypeDetailsComboBox cmbListTypeDetails()
			{
				return (cmbListTypeDetailsComboBox)super.getComboBox(1);
			}
			public CheckBox chkActiveOnlydetails()
			{
				return (CheckBox)super.getControl(22);
			}
			public grdPatientsDetailsGrid grdPatientsDetails()
			{
				return (grdPatientsDetailsGrid)super.getGrid(0);
			}
			public grdCustomListGrid grdCustomList()
			{
				return (grdCustomListGrid)super.getGrid(1);
			}
			public ImageButton imbFindDetails()
			{
				return (ImageButton)super.getControl(25);
			}
			public ImageButton imbSearchDetails()
			{
				return (ImageButton)super.getControl(26);
			}
			public ImageButton imbRemove()
			{
				return (ImageButton)super.getControl(27);
			}
			public ImageButton imbAdd()
			{
				return (ImageButton)super.getControl(28);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCustomListSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Custom List Search", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCustomListSearchContainer m_tabCustomListSearchContainer = (tabCustomListSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCustomListSearchContainer.class, m_tabCustomListSearch, factory);
			super.addContainer(m_tabCustomListSearch, m_tabCustomListSearchContainer);
			ims.framework.utils.SizeInfo m_tabCustomListSearchDesignSize = new ims.framework.utils.SizeInfo(816, 576);
			ims.framework.utils.SizeInfo m_tabCustomListSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper46.getWidth(), anchoringHelper46.getHeight());
			m_tabCustomListSearchContainer.setContext(form, appForm, m_tabCustomListSearch, loader, form_images_local, contextMenus, startControlID, m_tabCustomListSearchDesignSize, m_tabCustomListSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCustomListDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Custom List Details", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCustomListDetailsContainer m_tabCustomListDetailsContainer = (tabCustomListDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCustomListDetailsContainer.class, m_tabCustomListDetails, factory);
			super.addContainer(m_tabCustomListDetails, m_tabCustomListDetailsContainer);
			ims.framework.utils.SizeInfo m_tabCustomListDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 576);
			ims.framework.utils.SizeInfo m_tabCustomListDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper47.getWidth(), anchoringHelper47.getHeight());
			m_tabCustomListDetailsContainer.setContext(form, appForm, m_tabCustomListDetails, loader, form_images_local, contextMenus, startControlID, m_tabCustomListDetailsDesignSize, m_tabCustomListDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabCustomListSearch().setVisible(false);
			tabCustomListDetails().setVisible(false);
		}
		public void settabCustomListSearchEnabled(boolean value)
		{
			tabCustomListSearch().setEnabled(value);
		}
		public void settabCustomListDetailsEnabled(boolean value)
		{
			tabCustomListDetails().setEnabled(value);
		}
		public void showtabCustomListSearch()
		{
			tabCustomListDetails().setVisible(false);
			tabCustomListSearch().setVisible(true);
		}
		public void showtabCustomListDetails()
		{
			tabCustomListSearch().setVisible(false);
			tabCustomListDetails().setVisible(true);
		}

		public tabCustomListSearchContainer tabCustomListSearch()
		{
			return (tabCustomListSearchContainer)super.layers.get(0);
		}
		public tabCustomListDetailsContainer tabCustomListDetails()
		{
			return (tabCustomListDetailsContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuCustomList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuCustomListCREATEItem = factory.createMenuItem(startControlID.intValue() + 1, "Create new custom list ", true, false, new Integer(102149), true, false);
		contextMenus.Core.contextMenuCustomList.add(contextMenus.Core.contextMenuCustomListCREATEItem);
		contextMenus.Core.contextMenuCustomListVIEW_EDITItem = factory.createMenuItem(startControlID.intValue() + 2, "View/Edit custom list ", true, false, new Integer(102150), true, false);
		contextMenus.Core.contextMenuCustomList.add(contextMenus.Core.contextMenuCustomListVIEW_EDITItem);
		form.registerMenu(contextMenus.Core.contextMenuCustomList);


		// Layer Clasess
		lyrCustomListSearchLayer m_lyrCustomListSearchLayer = (lyrCustomListSearchLayer)LayerFlyweightFactory.getInstance().createLayer(lyrCustomListSearchLayer.class, this, factory);
		super.addLayer(m_lyrCustomListSearchLayer);
		m_lyrCustomListSearchLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 2042), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 674, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 2043), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 754, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 2044), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrCustomListSearchLayer lyrCustomListSearch()
	{
		return (lyrCustomListSearchLayer)super.getLayer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				RightDisabled = new ImageHelper(102113, "Images/Core/right_disabled.gif", new Integer(16), new Integer(16));
				Right = new ImageHelper(102112, "Images/Core/right.gif", new Integer(16), new Integer(16));
				Left = new ImageHelper(102110, "Images/Core/left.gif", new Integer(16), new Integer(16));
				LeftDisabled = new ImageHelper(102111, "Images/Core/left_disabled.gif", new Integer(16), new Integer(16));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				EpisodeOfCare = new ImageHelper(102255, "Images/Core/EpisodeOfCare.gif", new Integer(16), new Integer(16));
				CareContext = new ImageHelper(102252, "Images/Core/CareContext.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image RightDisabled;
			public final ims.framework.utils.Image Right;
			public final ims.framework.utils.Image Left;
			public final ims.framework.utils.Image LeftDisabled;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image EpisodeOfCare;
			public final ims.framework.utils.Image CareContext;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				LeftArrowDisabled24 = new ImageHelper(103361, "Images/Admin/arrow_left_disabled_24.png", new Integer(24), new Integer(24));
				LeftArrowEnabled24 = new ImageHelper(103360, "Images/Admin/arrow_left_enabled_24.png", new Integer(24), new Integer(24));
				RightArrowDisabled24 = new ImageHelper(103363, "Images/Admin/arrow_right_disabled_24.png", new Integer(24), new Integer(24));
				RightArrowEnabled24 = new ImageHelper(103362, "Images/Admin/arrow_right_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image LeftArrowDisabled24;
			public final ims.framework.utils.Image LeftArrowEnabled24;
			public final ims.framework.utils.Image RightArrowDisabled24;
			public final ims.framework.utils.Image RightArrowEnabled24;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedPatient = new ims.framework.ContextVariable("SelectedPatient", prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier + "");
			cxl_SelectedCustomList = new ims.framework.ContextVariable("SelectedCustomList", prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier + "");
			cxl_PatientCustomListVo = new ims.framework.ContextVariable("PatientCustomListVo", prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__PatientCustomListVo_" + componentIdentifier + "");
		}
		
		public boolean getSelectedPatientIsNotNull()
		{
			return !cxl_SelectedPatient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getSelectedPatient()
		{
			return (ims.core.vo.PatientShort)cxl_SelectedPatient.getValue(context);
		}
		public void setSelectedPatient(ims.core.vo.PatientShort value)
		{
			cxl_SelectedPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPatient = null;
		public boolean getSelectedCustomListIsNotNull()
		{
			return !cxl_SelectedCustomList.getValueIsNull(context);
		}
		public ims.core.vo.CustomListVo getSelectedCustomList()
		{
			return (ims.core.vo.CustomListVo)cxl_SelectedCustomList.getValue(context);
		}
		public void setSelectedCustomList(ims.core.vo.CustomListVo value)
		{
			cxl_SelectedCustomList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCustomList = null;
		public boolean getPatientCustomListVoIsNotNull()
		{
			return !cxl_PatientCustomListVo.getValueIsNull(context);
		}
		public ims.core.vo.MDTPatientCustomListVo getPatientCustomListVo()
		{
			return (ims.core.vo.MDTPatientCustomListVo)cxl_PatientCustomListVo.getValue(context);
		}
		public void setPatientCustomListVo(ims.core.vo.MDTPatientCustomListVo value)
		{
			cxl_PatientCustomListVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientCustomListVo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CustomList implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CREATE = 1;
				public static final int VIEW_EDIT = 2;
			}
			public void disableAllCustomListMenuItems()
			{
				this.contextMenuCustomListCREATEItem.setEnabled(false);
				this.contextMenuCustomListVIEW_EDITItem.setEnabled(false);
			}
			public void hideAllCustomListMenuItems()
			{
				this.contextMenuCustomListCREATEItem.setVisible(false);
				this.contextMenuCustomListVIEW_EDITItem.setVisible(false);
			}
			private Menu contextMenuCustomList;
			public ReadOnlyMenuItem getCustomListCREATEItem()
			{
				return this.contextMenuCustomListCREATEItem;
			}
			private MenuItem contextMenuCustomListCREATEItem;
			public ReadOnlyMenuItem getCustomListVIEW_EDITItem()
			{
				return this.contextMenuCustomListVIEW_EDITItem;
			}
			private MenuItem contextMenuCustomListVIEW_EDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[93];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-ID", "ID_CustomList");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-LISTTYPE", "ListType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-LISTNAME", "ListName");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-SPECIALTY", "Specialty");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-DATE", "Date");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__SelectedCustomList_" + componentIdentifier, "BO-1028100050-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__PatientCustomListVo_" + componentIdentifier, "BO-1003100101-ID", "ID_MDTPatientCustomList");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__PatientCustomListVo_" + componentIdentifier, "BO-1003100101-CUSTOMLISTTYPE", "CustomListType");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.CustomListMaintenance.__internal_x_context__PatientCustomListVo_" + componentIdentifier, "BO-1003100101-LISTORDER", "ListOrder");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
