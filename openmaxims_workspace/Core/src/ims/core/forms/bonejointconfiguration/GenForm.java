//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.bonejointconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrBoneJointLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabBoneContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdBoneGenealFindingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBoneGenealFindingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColGeneralFindingsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColGeneralFindingsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColGeneralFindingsOpened()
				{
					super.row.showOpened(0);
				}
				public ims.spinalinjuries.vo.lookups.GeneralFindingsBone getColGeneralFindings()
				{
					return (ims.spinalinjuries.vo.lookups.GeneralFindingsBone)super.row.get(0);
				}
				public void setColGeneralFindings(ims.spinalinjuries.vo.lookups.GeneralFindingsBone value)
				{
					super.row.set(0, value);
				}
				public void setCellColGeneralFindingsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.spinalinjuries.vo.lookups.GeneralFindingsBone getValue()
				{
					return (ims.spinalinjuries.vo.lookups.GeneralFindingsBone)super.row.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.GeneralFindingsBone value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBoneGenealFindingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBoneGenealFindingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBoneGenealFindingsRow get(int index)
				{
					return new grdBoneGenealFindingsRow(super.collection.get(index));
				}
				public grdBoneGenealFindingsRow newRow()
				{
					return new grdBoneGenealFindingsRow(super.collection.newRow());
				}
				public grdBoneGenealFindingsRow newRow(boolean autoSelect)
				{
					return new grdBoneGenealFindingsRow(super.collection.newRow(autoSelect));
				}
				public grdBoneGenealFindingsRow newRowAt(int index)
				{
					return new grdBoneGenealFindingsRow(super.collection.newRowAt(index));
				}
				public grdBoneGenealFindingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBoneGenealFindingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBoneGenealFindingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.spinalinjuries.vo.lookups.GeneralFindingsBone[] getValues()
				{
					ims.spinalinjuries.vo.lookups.GeneralFindingsBone[] listOfValues = new ims.spinalinjuries.vo.lookups.GeneralFindingsBone[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.spinalinjuries.vo.lookups.GeneralFindingsBone getValue()
				{
					return (ims.spinalinjuries.vo.lookups.GeneralFindingsBone)super.grid.getValue();
				}
				public void setValue(ims.spinalinjuries.vo.lookups.GeneralFindingsBone value)
				{
					super.grid.setValue(value);
				}
				public grdBoneGenealFindingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBoneGenealFindingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBoneGenealFindingsRowCollection getRows()
				{
					return new grdBoneGenealFindingsRowCollection(super.grid.getRows());
				}
				public grdBoneGenealFindingsRow getRowByValue(ims.spinalinjuries.vo.lookups.GeneralFindingsBone value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBoneGenealFindingsRow(row);
				}
				public void setColGeneralFindingsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColGeneralFindingsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdBonesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBonesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColBonesReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColBonesReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColBonesOpened()
				{
					super.row.showOpened(0);
				}
				public ims.spinalinjuries.vo.lookups.MskBones getColBones()
				{
					return (ims.spinalinjuries.vo.lookups.MskBones)super.row.get(0);
				}
				public void setColBones(ims.spinalinjuries.vo.lookups.MskBones value)
				{
					super.row.set(0, value);
				}
				public void setCellColBonesTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBonesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBonesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBonesRow get(int index)
				{
					return new grdBonesRow(super.collection.get(index));
				}
				public grdBonesRow newRow()
				{
					return new grdBonesRow(super.collection.newRow());
				}
				public grdBonesRow newRow(boolean autoSelect)
				{
					return new grdBonesRow(super.collection.newRow(autoSelect));
				}
				public grdBonesRow newRowAt(int index)
				{
					return new grdBonesRow(super.collection.newRowAt(index));
				}
				public grdBonesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBonesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBonesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdBonesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBonesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBonesRowCollection getRows()
				{
					return new grdBonesRowCollection(super.grid.getRows());
				}
				public grdBonesRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBonesRow(row);
				}
				public void setColBonesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColBonesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 232, 192, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdBoneGenealFindingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdBoneGenealFindingsTemp);
				grdBoneGenealFindingsGrid grdBoneGenealFindings = (grdBoneGenealFindingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBoneGenealFindingsGrid.class, m_grdBoneGenealFindingsTemp);
				grdBoneGenealFindings.addStringColumn("General Findings", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBoneGenealFindings.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdBoneGenealFindings);
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 280, 16, 512, 192, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdBonesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdBonesTemp);
				grdBonesGrid grdBones = (grdBonesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBonesGrid.class, m_grdBonesTemp);
				grdBones.addStringColumn("Bones", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBones.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdBones);
			}

			public grdBoneGenealFindingsGrid grdBoneGenealFindings()
			{
				return (grdBoneGenealFindingsGrid)super.getGrid(0);
			}
			public grdBonesGrid grdBones()
			{
				return (grdBonesGrid)super.getGrid(1);
			}
		}
		public static class tabJointContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbGroupTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdJointsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdJointsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColJointsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColJointsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColJointsOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getColJoints()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellColJointsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.MskJointVo getValue()
				{
					return (ims.core.vo.MskJointVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.MskJointVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdJointsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdJointsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdJointsRow get(int index)
				{
					return new grdJointsRow(super.collection.get(index));
				}
				public grdJointsRow newRow()
				{
					return new grdJointsRow(super.collection.newRow());
				}
				public grdJointsRow newRow(boolean autoSelect)
				{
					return new grdJointsRow(super.collection.newRow(autoSelect));
				}
				public grdJointsRow newRowAt(int index)
				{
					return new grdJointsRow(super.collection.newRowAt(index));
				}
				public grdJointsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdJointsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdJointsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.core.vo.MskJointVo[] getValues()
				{
					ims.core.vo.MskJointVo[] listOfValues = new ims.core.vo.MskJointVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.MskJointVo getValue()
				{
					return (ims.core.vo.MskJointVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.MskJointVo value)
				{
					super.grid.setValue(value);
				}
				public grdJointsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdJointsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdJointsRowCollection getRows()
				{
					return new grdJointsRowCollection(super.grid.getRows());
				}
				public grdJointsRow getRowByValue(ims.core.vo.MskJointVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdJointsRow(row);
				}
				public void setColJointsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColJointsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grdJointGeneralFindingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdJointGeneralFindingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColGeneralFindingsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColGeneralFindingsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColGeneralFindingsOpened()
				{
					super.row.showOpened(0);
				}
				public ims.spinalinjuries.vo.lookups.GeneralFindingsJoint getColGeneralFindings()
				{
					return (ims.spinalinjuries.vo.lookups.GeneralFindingsJoint)super.row.get(0);
				}
				public void setColGeneralFindings(ims.spinalinjuries.vo.lookups.GeneralFindingsJoint value)
				{
					super.row.set(0, value);
				}
				public void setCellColGeneralFindingsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdJointGeneralFindingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdJointGeneralFindingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdJointGeneralFindingsRow get(int index)
				{
					return new grdJointGeneralFindingsRow(super.collection.get(index));
				}
				public grdJointGeneralFindingsRow newRow()
				{
					return new grdJointGeneralFindingsRow(super.collection.newRow());
				}
				public grdJointGeneralFindingsRow newRow(boolean autoSelect)
				{
					return new grdJointGeneralFindingsRow(super.collection.newRow(autoSelect));
				}
				public grdJointGeneralFindingsRow newRowAt(int index)
				{
					return new grdJointGeneralFindingsRow(super.collection.newRowAt(index));
				}
				public grdJointGeneralFindingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdJointGeneralFindingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdJointGeneralFindingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdJointGeneralFindingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdJointGeneralFindingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdJointGeneralFindingsRowCollection getRows()
				{
					return new grdJointGeneralFindingsRowCollection(super.grid.getRows());
				}
				public grdJointGeneralFindingsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdJointGeneralFindingsRow(row);
				}
				public void setColGeneralFindingsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColGeneralFindingsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Area:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbGroupTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbGroupTypeTemp);
				cmbGroupTypeComboBox cmbGroupType = (cmbGroupTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGroupTypeComboBox.class, m_cmbGroupTypeTemp);
				super.addComboBox(cmbGroupType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 272, 15, 520, 192, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdJointsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuBoneJointConfig, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdJointsTemp);
				grdJointsGrid grdJoints = (grdJointsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdJointsGrid.class, m_grdJointsTemp);
				grdJoints.addMutableComboBoxColumn("Joints", 0, 0, -1, false, true, true, false, true, true, -1);
				super.addGrid(grdJoints);
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 232, 150, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
				Grid m_grdJointGeneralFindingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdJointGeneralFindingsTemp);
				grdJointGeneralFindingsGrid grdJointGeneralFindings = (grdJointGeneralFindingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdJointGeneralFindingsGrid.class, m_grdJointGeneralFindingsTemp);
				grdJointGeneralFindings.addStringColumn("General Findings", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdJointGeneralFindings.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdJointGeneralFindings);
			}

			public cmbGroupTypeComboBox cmbGroupType()
			{
				return (cmbGroupTypeComboBox)super.getComboBox(0);
			}
			public grdJointsGrid grdJoints()
			{
				return (grdJointsGrid)super.getGrid(0);
			}
			public grdJointGeneralFindingsGrid grdJointGeneralFindings()
			{
				return (grdJointGeneralFindingsGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 816, 248, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabBone = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Bone Grouping Details", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabBoneContainer m_tabBoneContainer = (tabBoneContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBoneContainer.class, m_tabBone, factory);
			super.addContainer(m_tabBone, m_tabBoneContainer);
			ims.framework.utils.SizeInfo m_tabBoneDesignSize = new ims.framework.utils.SizeInfo(816, 248);
			ims.framework.utils.SizeInfo m_tabBoneRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabBoneContainer.setContext(form, appForm, m_tabBone, loader, form_images_local, contextMenus, startControlID, m_tabBoneDesignSize, m_tabBoneRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 816, 248, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabJoint = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Joint Grouping Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabJointContainer m_tabJointContainer = (tabJointContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabJointContainer.class, m_tabJoint, factory);
			super.addContainer(m_tabJoint, m_tabJointContainer);
			ims.framework.utils.SizeInfo m_tabJointDesignSize = new ims.framework.utils.SizeInfo(816, 248);
			ims.framework.utils.SizeInfo m_tabJointRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabJointContainer.setContext(form, appForm, m_tabJoint, loader, form_images_local, contextMenus, startControlID, m_tabJointDesignSize, m_tabJointRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabBone().setVisible(false);
			tabJoint().setVisible(false);
		}
		public void showtabBone()
		{
			tabJoint().setVisible(false);
			tabBone().setVisible(true);
		}
		public void showtabJoint()
		{
			tabBone().setVisible(false);
			tabJoint().setVisible(true);
		}

		public tabBoneContainer tabBone()
		{
			return (tabBoneContainer)super.layers.get(0);
		}
		public tabJointContainer tabJoint()
		{
			return (tabJointContainer)super.layers.get(1);
		}
	}
	public static class grdMuscleJointRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMuscleJointRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColBoneOrJointReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColBoneOrJointReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColBoneOrJointOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getColBoneOrJoint()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellColBoneOrJointTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getColName()
		{
			return (String)super.row.get(1);
		}
		public void setColName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDescriptionReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDescriptionOpened()
		{
			super.row.showOpened(2);
		}
		public String getColDescription()
		{
			return (String)super.row.get(2);
		}
		public void setColDescription(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColDescriptionTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColGroupTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColGroupTypeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColGroupTypeOpened()
		{
			super.row.showOpened(3);
		}
		public ims.framework.controls.GridMutableComboBox getColGroupType()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 3);
		}
		public void setCellColGroupTypeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColActiveReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColActiveOpened()
		{
			super.row.showOpened(4);
		}
		public boolean getColActive()
		{
			return ((Boolean)super.row.get(4)).booleanValue();
		}
		public void setColActive(boolean value)
		{
			super.row.set(4, new Boolean(value));
		}
		public void setCellColActiveTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.MskGroupVo getValue()
		{
			return (ims.core.vo.MskGroupVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MskGroupVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMuscleJointRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMuscleJointRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMuscleJointRow get(int index)
		{
			return new grdMuscleJointRow(super.collection.get(index));
		}
		public grdMuscleJointRow newRow()
		{
			return new grdMuscleJointRow(super.collection.newRow());
		}
		public grdMuscleJointRow newRow(boolean autoSelect)
		{
			return new grdMuscleJointRow(super.collection.newRow(autoSelect));
		}
		public grdMuscleJointRow newRowAt(int index)
		{
			return new grdMuscleJointRow(super.collection.newRowAt(index));
		}
		public grdMuscleJointRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMuscleJointRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMuscleJointGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.MskGroupVo[] getValues()
		{
			ims.core.vo.MskGroupVo[] listOfValues = new ims.core.vo.MskGroupVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.MskGroupVo getValue()
		{
			return (ims.core.vo.MskGroupVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MskGroupVo value)
		{
			super.grid.setValue(value);
		}
		public grdMuscleJointRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMuscleJointRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMuscleJointRowCollection getRows()
		{
			return new grdMuscleJointRowCollection(super.grid.getRows());
		}
		public grdMuscleJointRow getRowByValue(ims.core.vo.MskGroupVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMuscleJointRow(row);
		}
		public void setColBoneOrJointHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColBoneOrJointHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColGroupTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColGroupTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuBoneJointConfig = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuBoneJointConfigADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Joint", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuBoneJointConfig.add(contextMenus.contextMenuBoneJointConfigADDItem);
		contextMenus.contextMenuBoneJointConfigUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Joint", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuBoneJointConfig.add(contextMenus.contextMenuBoneJointConfigUPDATEItem);
		contextMenus.contextMenuBoneJointConfigDIGITItem = factory.createMenuItem(startControlID.intValue() + 3, "Configure Hand Movements", true, false, new Integer(102251), true, false);
		contextMenus.contextMenuBoneJointConfig.add(contextMenus.contextMenuBoneJointConfigDIGITItem);
		contextMenus.contextMenuBoneJointConfigREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Joint", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuBoneJointConfig.add(contextMenus.contextMenuBoneJointConfigREMOVEItem);
		form.registerMenu(contextMenus.contextMenuBoneJointConfig);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 5, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 8, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 11, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 12, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrBoneJointLayer m_lyrBoneJointLayer = (lyrBoneJointLayer)LayerFlyweightFactory.getInstance().createLayer(lyrBoneJointLayer.class, this, factory);
		super.addLayer(m_lyrBoneJointLayer);
		m_lyrBoneJointLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"View Active", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 816, 288, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMuscleJointTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdMuscleJointTemp);
		grdMuscleJointGrid grdMuscleJoint = (grdMuscleJointGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMuscleJointGrid.class, m_grdMuscleJointTemp);
		grdMuscleJoint.addMutableComboBoxColumn("Type", 0, 0, 85, false, true, true, false, false, true, -1);
		grdMuscleJoint.addStringColumn("Name", 0, 0, 170, false, false, 1, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMuscleJoint.addStringColumn("Description", 0, 0, 400, false, false, 0, 100, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMuscleJoint.addMutableComboBoxColumn("Area", 0, 0, 100, true, true, true, false, false, true, -1);
		grdMuscleJoint.addBoolColumn("Active", 0, 1, -1, false, true, 1, true);
		super.addGrid(grdMuscleJoint);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrBoneJointLayer lyrBoneJoint()
	{
		return (lyrBoneJointLayer)super.getLayer(0);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(5);
	}
	public CheckBox chkActiveRecords()
	{
		return (CheckBox)super.getControl(6);
	}
	public grdMuscleJointGrid grdMuscleJoint()
	{
		return (grdMuscleJointGrid)super.getGrid(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(102178, "Images/Core/EditDisabled16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MskGroupRecord = new ims.framework.ContextVariable("MskGroupRecord", prefix + "_lv_Core.BoneJointConfiguration.__internal_x_context__MskGroupRecord_" + componentIdentifier + "");
			cxl_UpdatingMovement = new ims.framework.ContextVariable("UpdatingMovement", prefix + "_lv_Core.BoneJointConfiguration.__internal_x_context__UpdatingMovement_" + componentIdentifier + "");
		}
		
		public boolean getMskGroupRecordIsNotNull()
		{
			return !cxl_MskGroupRecord.getValueIsNull(context);
		}
		public ims.core.vo.MskGroupVo getMskGroupRecord()
		{
			return (ims.core.vo.MskGroupVo)cxl_MskGroupRecord.getValue(context);
		}
		public void setMskGroupRecord(ims.core.vo.MskGroupVo value)
		{
			cxl_MskGroupRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MskGroupRecord = null;
		public boolean getUpdatingMovementIsNotNull()
		{
			return !cxl_UpdatingMovement.getValueIsNull(context);
		}
		public Boolean getUpdatingMovement()
		{
			return (Boolean)cxl_UpdatingMovement.getValue(context);
		}
		public void setUpdatingMovement(Boolean value)
		{
			cxl_UpdatingMovement.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatingMovement = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class BoneJointConfig implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int UPDATE = 2;
			public static final int DIGIT = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllBoneJointConfigMenuItems()
		{
			this.contextMenuBoneJointConfigADDItem.setEnabled(false);
			this.contextMenuBoneJointConfigUPDATEItem.setEnabled(false);
			this.contextMenuBoneJointConfigDIGITItem.setEnabled(false);
			this.contextMenuBoneJointConfigREMOVEItem.setEnabled(false);
		}
		public void hideAllBoneJointConfigMenuItems()
		{
			this.contextMenuBoneJointConfigADDItem.setVisible(false);
			this.contextMenuBoneJointConfigUPDATEItem.setVisible(false);
			this.contextMenuBoneJointConfigDIGITItem.setVisible(false);
			this.contextMenuBoneJointConfigREMOVEItem.setVisible(false);
		}
		private Menu contextMenuBoneJointConfig;
		public MenuItem getBoneJointConfigADDItem()
		{
			return this.contextMenuBoneJointConfigADDItem;
		}
		private MenuItem contextMenuBoneJointConfigADDItem;
		public MenuItem getBoneJointConfigUPDATEItem()
		{
			return this.contextMenuBoneJointConfigUPDATEItem;
		}
		private MenuItem contextMenuBoneJointConfigUPDATEItem;
		public MenuItem getBoneJointConfigDIGITItem()
		{
			return this.contextMenuBoneJointConfigDIGITItem;
		}
		private MenuItem contextMenuBoneJointConfigDIGITItem;
		public MenuItem getBoneJointConfigREMOVEItem()
		{
			return this.contextMenuBoneJointConfigREMOVEItem;
		}
		private MenuItem contextMenuBoneJointConfigREMOVEItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 5;
			public static final int Update = 6;
			public static final int Remove = 7;
			public static final int View = 8;
			public static final int MoveUp = 9;
			public static final int MoveDown = 10;
			public static final int Replace = 11;
			public static final int Confirm = 12;
			public static final int EDIT_VIEW_ICP_ACTIONS = 13;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
