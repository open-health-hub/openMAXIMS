//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50107.1300)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//15/03/2005 - Extra functionality added along with some bug fixes
package ims.core.forms.bonejointconfiguration;

import ims.core.forms.bonejointconfiguration.GenForm.grdMuscleJointRow;
import ims.core.forms.bonejointconfiguration.GenForm.lyrBoneJointLayer.tabJointContainer.grdJointsRow;
import ims.core.vo.MskGroupVo;
import ims.core.vo.MskGroupVoCollection;
import ims.core.vo.MskJointVo;
import ims.core.vo.MskJointVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.spinalinjuries.vo.lookups.GeneralFindingsBone;
import ims.spinalinjuries.vo.lookups.GeneralFindingsBoneCollection;
import ims.spinalinjuries.vo.lookups.GeneralFindingsJoint;
import ims.spinalinjuries.vo.lookups.GeneralFindingsJointCollection;
import ims.spinalinjuries.vo.lookups.LookupHelper;
import ims.spinalinjuries.vo.lookups.MSKGroupType;
import ims.spinalinjuries.vo.lookups.MSKGroupTypeCollection;
import ims.spinalinjuries.vo.lookups.MskBones;
import ims.spinalinjuries.vo.lookups.MskBonesCollection;
import ims.configuration.gen.ConfigFlag;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	private void open()
	{
		open(null);
	}
	private void open(Integer groupID) 
	{
		
		clearScreen();
		loadGroupTypes();
		form.getLocalContext().setMskGroupRecord(null);
		populateBoneJointGrid(domain.listMskGroup(new Boolean(form.chkActiveRecords().getValue())), groupID);
		//WDEV-16283 
		updateControlsState();
	}

	private void loadGroupTypes() 
	{
		form.lyrBoneJoint().tabJoint().cmbGroupType().clear();		
		MSKGroupTypeCollection coll =  LookupHelper.getMSKGroupType(domain.getLookupService()); 
		for (int i=0; i < coll.size(); i++)
			form.lyrBoneJoint().tabJoint().cmbGroupType().newRow(coll.get(i).toString(), coll.get(i).toString());		
	}


	private void populateBoneJointGrid(MskGroupVoCollection collection, Integer groupID)
	{
		form.grdMuscleJoint().getRows().clear();
		
		if (collection == null)
			return; 
		
		GenForm.grdMuscleJointRow row = null;
		MskGroupVo selMskGroupVo=null;
		
		for(int i=0;i<collection.size();i++)
		{
			if (form.chkActiveRecords().getValue() 
					&& !collection.get(i).getIsActive().booleanValue()) 
			{
				continue;
			}

			row = form.grdMuscleJoint().getRows().newRow();
			row.getColBoneOrJoint().newRow("Bone","Bone");
			row.getColBoneOrJoint().newRow("Joint","Joint");
		
			MSKGroupTypeCollection collGroupTypes =  LookupHelper.getMSKGroupType(domain.getLookupService());			

			row.getColGroupType().clear();
			for (int x =0; x < collGroupTypes.size(); x++)
				row.getColGroupType().newRow(collGroupTypes.get(x), collGroupTypes.get(x).getText());
			
			row.getColGroupType().setValue(collection.get(i).getGroupType());			
			row.setColActive(collection.get(i).getIsActive().booleanValue());						
			
			if(collection.get(i).getIsJoint().equals(Boolean.FALSE))
				row.getColBoneOrJoint().setValue("Bone");
			else
				row.getColBoneOrJoint().setValue("Joint");
			
			row.setColGroupTypeReadOnly(true);
			
			row.setColDescription(collection.get(i).getDescription());
			row.setColName(collection.get(i).getName());
			row.setValue(collection.get(i));	
			if(groupID != null && collection.get(i).getID_MskGroups().equals(groupID))
				selMskGroupVo = collection.get(i);
		}
		
		//Select the value saved
		if(selMskGroupVo != null)
		{
			form.grdMuscleJoint().setValue(selMskGroupVo);
			try {onGrdMuscleJointSelectionChanged();} 
			catch (PresentationLogicException e){e.printStackTrace();}
		}
	}
	
	private void clearScreen() 
	{
		loadLookupsIntoGrids();
		form.lyrBoneJoint().tabJoint().grdJoints().getRows().clear();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateGroup();
	}

	private void updateGroup() 
	{
		int rowIndex = form.grdMuscleJoint().getSelectedRowIndex();
		if (rowIndex < 0)
			return;
		
		//disable the rest of the rows
		for(int i=0; i<form.grdMuscleJoint().getRows().size(); i++)
		{
			//if(i != rowIndex)
				form.grdMuscleJoint().getRows().get(i).setColBoneOrJointReadOnly(true);
				form.grdMuscleJoint().getRows().get(i).setColNameReadOnly(true);
		}
		
		
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		
		open(form.grdMuscleJoint().getValue() != null?form.grdMuscleJoint().getValue().getID_MskGroups():null);		
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		save();
	}

	private void save() 
	{
		MskGroupVo voGroup, savedGroupVo = null;
		
		//Find the row that is not readonly (as the user might select a different one)
		//GenForm.grdMuscleJointRow row = form.grdMuscleJoint().getRows().get(form.grdMuscleJoint().getSelectedRowIndex());
		GenForm.grdMuscleJointRow row = null;
		for(int i=0; i<form.grdMuscleJoint().getRows().size(); i++)
			if(form.grdMuscleJoint().getRows().get(i).isReadOnly() == false)
			{
				row = form.grdMuscleJoint().getRows().get(i);
				break;
			}
		
		voGroup = row.getValue();
		if (voGroup== null)
			voGroup = new MskGroupVo();
		//Check name to pe unique for type
		String name;
		Object type;
		for(int i=0; i<form.grdMuscleJoint().getRows().size(); i++)
		{
			name = form.grdMuscleJoint().getRows().get(i).getColName();
			type = form.grdMuscleJoint().getRows().get(i).getColBoneOrJoint().getValue();
			Boolean Active = form.grdMuscleJoint().getRows().get(i).getColActive();
			
			for(int j=0; j<form.grdMuscleJoint().getRows().size(); j++)
			{
				if ( j != i &&
						Active == true &&
						form.grdMuscleJoint().getRows().get(j).getColActive() == true &&
						form.grdMuscleJoint().getRows().get(j).getColBoneOrJoint().getValue() != null &&
							form.grdMuscleJoint().getRows().get(j).getColBoneOrJoint().getValue().equals(type) &&
								form.grdMuscleJoint().getRows().get(j).getColName() != null &&
									form.grdMuscleJoint().getRows().get(j).getColName().equals(name))
				{
					engine.showMessage("Name must be unique for type!");
					return;
				}
			}
		}
		
		if(row == null)
		{
			engine.showMessage("Please enter a row in the grid before saving");
			return;
		}
		
		if(row.getColBoneOrJoint().getValue()==null){
			engine.showMessage("Please choose a Type.");
			return;	
		}
				
		boolean bJoint = row.getColBoneOrJoint().getValue().equals("Joint");
		if (bJoint == true)
		{
			if (form.lyrBoneJoint().tabJoint().cmbGroupType().getValue() == null && voGroup.getID_MskGroups() == null)
			{
				engine.showMessage("Please choose an area before saving");
				return;				
			}
			else if(form.lyrBoneJoint().tabJoint().cmbGroupType().getValue() == null && voGroup.getID_MskGroupsIsNotNull() && row.getColActive() == true )
			{
				engine.showMessage("Please choose an area before saving");
				return;
			}
		}
			
		
		
		//Had to place it in code as Vo is used in more forms
		if(row.getColName() == null)
		{
			engine.showMessage("Please enter a 'Name'");
			return;
		}
		voGroup.setName(row.getColName());
		voGroup.setDescription(row.getColDescription());
		voGroup.setIsActive(new Boolean(row.getColActive()));

		voGroup.setIsJoint(new Boolean(bJoint));
				
		if (bJoint == true)
			populateInstanceDataForJoint(voGroup);
		else
			populateInstanceDataForBone(voGroup);
		
		String[] arrErrors = voGroup.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
			
		try 
		{
			savedGroupVo = domain.saveMskGroup(voGroup);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
			
		form.setMode(FormMode.VIEW);
		open(savedGroupVo!=null?savedGroupVo.getID_MskGroups():null);
	}


	private void populateInstanceDataForBone(MskGroupVo voGroup) 
	{
		if (voGroup == null) return;
		
		voGroup.setBoneGeneralFindings(populateBoneGeneralDataFromScreen());
		voGroup.setBones(populateBoneDataFromScreen());
	}

	private void populateInstanceDataForJoint(MskGroupVo voGroup)
	{
		if (voGroup == null) return;
		
		voGroup.setGroupType(getGroupType(form.lyrBoneJoint().tabJoint().cmbGroupType().getValue()));
		voGroup.setJointGeneralFindings(populateJointGeneralDataFromScreen());
		voGroup.setJoints(populateJointDataFromScreen());
	}


	private MSKGroupType getGroupType(String value) 
	{
		MSKGroupType lkp = null;

		MSKGroupTypeCollection coll = LookupHelper.getMSKGroupType(domain.getLookupService());
		for (int i=0; i < coll.size(); i++)
		{
			if (coll.get(i).toString().equals(value))
			{
				lkp = coll.get(i);
			}
		}
		
		return lkp;
	}

	private MskJointVoCollection populateJointDataFromScreen() 
	{	
		MskJointVoCollection coll = new MskJointVoCollection();
		GenForm.lyrBoneJointLayer.tabJointContainer.grdJointsRow row = null;
		for(int i=0;i<form.lyrBoneJoint().tabJoint().grdJoints().getRows().size();i++)
		{
			row = form.lyrBoneJoint().tabJoint().grdJoints().getRows().get(i); 
			if (row.getColJoints().getValue() != null)
				coll.add((MskJointVo) row.getColJoints().getValue());
		}
	
		return coll;
	}

	private void populateJointControls(MskJointVoCollection coll) 
	{	
		if (coll == null) return;
		
		MskJointVo item;
		GenForm.lyrBoneJointLayer.tabJointContainer.grdJointsRow row = null;
		for(int i = 0 ; i < coll.size() ; i++)
		{
			item = coll.get(i);
			row = form.lyrBoneJoint().tabJoint().grdJoints().getRows().newRow();
			row.getColJoints().newRow(item, item.getName());
			row.getColJoints().setValue(item);
			row.setValue(item);
		}
	}

	private GeneralFindingsJointCollection populateJointGeneralDataFromScreen() 
	{
		GeneralFindingsJointCollection coll = new GeneralFindingsJointCollection();
		GeneralFindingsJoint item;
		GenForm.lyrBoneJointLayer.tabJointContainer.grdJointGeneralFindingsRow row = null;
		for(int i=0;i<form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().size();i++)
		{
			row = form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().get(i);
			if(row.getColSelect() == true)
			{
				item = row.getColGeneralFindings();
				coll.add(item);
			}
		}
	
		return coll;
	}

	private void populateGeneralFindingsControls(GeneralFindingsJointCollection coll) 
	{
		if (coll == null) return;
		
		GeneralFindingsJoint item;
		GenForm.lyrBoneJointLayer.tabJointContainer.grdJointGeneralFindingsRow row = null;
		for(int j = 0 ; j < coll.size() ; j++)
		{
			item = coll.get(j);
			
			for(int i = 0 ; i < form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().size() ; i++)
			{
				row = form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().get(i);
				
				if(row.getColGeneralFindings().equals(item))
					row.setColSelect(true);
				
				if(i == form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().size())
				{
					row = form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().newRow();
					row.setColGeneralFindings(item);
					row.setColSelect(true);
				}
			}
		}
	}

	private MskBonesCollection populateBoneDataFromScreen() 
	{
		MskBonesCollection coll = new MskBonesCollection();
		MskBones item;
		GenForm.lyrBoneJointLayer.tabBoneContainer.grdBonesRow row = null;
		for(int i=0;i<form.lyrBoneJoint().tabBone().grdBones().getRows().size();i++)
		{
			row = form.lyrBoneJoint().tabBone().grdBones().getRows().get(i);
			if(row.getColSelect() == true)
			{
				item = row.getColBones();
				coll.add(item);
			}
		}
		return coll;
	}
	private void populateBoneGridFromData(MskBonesCollection coll) 
	{
		if (coll == null) return;
		
		MskBones item;
		GenForm.lyrBoneJointLayer.tabBoneContainer.grdBonesRow row = null;
		for(int j = 0 ; j < coll.size() ; j++)
		{
			item = coll.get(j);
			
			for(int i = 0 ; i < form.lyrBoneJoint().tabBone().grdBones().getRows().size() ; i++)
			{
				row = form.lyrBoneJoint().tabBone().grdBones().getRows().get(i);
				
				if(row.getColBones().equals(item))
					row.setColSelect(true);
				
				if(i == form.lyrBoneJoint().tabBone().grdBones().getRows().size())
				{
					row = form.lyrBoneJoint().tabBone().grdBones().getRows().newRow();
					row.setColBones(item);
					row.setColSelect(true);
				}
			}
		}
	}
	
	private GeneralFindingsBoneCollection populateBoneGeneralDataFromScreen() 
	{
		GeneralFindingsBoneCollection coll = new GeneralFindingsBoneCollection();
		GeneralFindingsBone item;
		GenForm.lyrBoneJointLayer.tabBoneContainer.grdBoneGenealFindingsRow row = null;
		for(int i=0;i<form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().size();i++)
		{
			row = form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().get(i);
			if(row.getColSelect() == true)
			{
				item = row.getColGeneralFindings();
				coll.add(item);
			}
		}
		
		return coll;
	}
	
	private void populateBoneGeneralGridFromData(GeneralFindingsBoneCollection coll) 
	{
		if (coll == null) return;

		GeneralFindingsBone item;
		GenForm.lyrBoneJointLayer.tabBoneContainer.grdBoneGenealFindingsRow row = null;
			
		for(int j = 0 ; j < coll.size() ; j++)
		{
			item = coll.get(j);
				
			for(int i = 0 ; i < form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().size() ; i++)
			{
				row = form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().get(i);
	
				if(row.getColGeneralFindings().equals(item))
					row.setColSelect(true);
				
				if(i == form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().size())
				{
					row = form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().newRow();
					row.setColGeneralFindings(item);
					row.setColSelect(true);
				}
			}
		}
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newGroup();
	}

	private void newGroup() 
	{
		this.clearScreen();
		
		form.getLocalContext().setMskGroupRecord(new MskGroupVo());
		GenForm.grdMuscleJointRow row = form.grdMuscleJoint().getRows().newRow();
		row.setColActive(true);
		row.getColBoneOrJoint().newRow("Bone","Bone");
		row.getColBoneOrJoint().newRow("Joint","Joint");
		row.getColBoneOrJoint().setValue("Bone");
		
		form.lyrBoneJoint().showtabBone();
		
		MskGroupVo voMskGroupVo = new MskGroupVo();
		voMskGroupVo.setIsJoint(Boolean.FALSE);
		row.setValue(voMskGroupVo);
		//Set readonly the rest of the rows
		for(int i=0; i<form.grdMuscleJoint().getRows().size(); i++)
		{
			if(!form.grdMuscleJoint().getRows().get(i).getValue().equals(voMskGroupVo))
				form.grdMuscleJoint().getRows().get(i).setReadOnly(true);
		}
		
		listAvailableGroupTypes();
		form.grdMuscleJoint().setValue(voMskGroupVo);
		
		form.setMode(FormMode.EDIT);		
	}
	
	protected void onGrdMuscleJointSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		groupSelectionChanged();
	}

	private void groupSelectionChanged() 
	{
		//Identify a newly added record
		if(form.grdMuscleJoint().getValue() == null || form.grdMuscleJoint().getValue().getID_MskGroupsIsNotNull() == false || form.getMode().equals(FormMode.EDIT))
			return;		
		
		clearScreen();
		
		if(form.grdMuscleJoint().getValue().getIsJoint().booleanValue() == true)
		{
			form.lyrBoneJoint().showtabJoint();
			populateInstanceControls(form.grdMuscleJoint().getValue(), false);
		}
		else
		{
			form.lyrBoneJoint().showtabBone();
			populateInstanceControls(form.grdMuscleJoint().getValue(),true);			
		}
		
		updateControlsState();
		
		
	}

	private void populateInstanceControls(MskGroupVo voGroup, boolean bBoneSelected) 
	{
		if (voGroup == null) return;
		
		if (bBoneSelected == false) 
		{
			form.lyrBoneJoint().tabJoint().cmbGroupType().setValue(voGroup.getGroupType() == null ? null : form.grdMuscleJoint().getValue().getGroupType().toString());
			
			populateGeneralFindingsControls(voGroup.getJointGeneralFindings() != null ? voGroup.getJointGeneralFindings() : null );
			populateJointControls(voGroup.getJoints() != null ? voGroup.getJoints() : null);
		}
		else
		{
			populateBoneGridFromData(form.grdMuscleJoint().getValue().getBones()); 
			populateBoneGeneralGridFromData(form.grdMuscleJoint().getValue().getBoneGeneralFindings()); 					
		}
	}
	

	protected void onChkActiveRecordsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onGrdMuscleJointMutableComboBoxSelected(Object value) 
	{
		if(value.equals("Bone"))
			form.lyrBoneJoint().showtabBone();
		else
			form.lyrBoneJoint().showtabJoint();
	}

	
	

	//Load only the parents
	private void populateBoneGeneralFindings()
	{
		//bones tab
		form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().clear();
		GeneralFindingsBoneCollection collGenBones = LookupHelper.getGeneralFindingsBone(domain.getLookupService());
		TreeNode[] rootNodes = collGenBones.getRootNodes();
		//Load root nodes
		if(rootNodes != null)
		{
			for(int i=0; i<rootNodes.length; i++)
			{
				GenForm.lyrBoneJointLayer.tabBoneContainer.grdBoneGenealFindingsRow row = form.lyrBoneJoint().tabBone().grdBoneGenealFindings().getRows().newRow();
				row.setColGeneralFindings((GeneralFindingsBone)rootNodes[i]);
			}
		}
	}
	
	private void populateBones()
	{
		form.lyrBoneJoint().tabBone().grdBones().getRows().clear();
		MskBonesCollection collBones = LookupHelper.getMskBones(domain.getLookupService());
		for(int i=0;i<collBones.size();i++)
		{
			GenForm.lyrBoneJointLayer.tabBoneContainer.grdBonesRow row =  form.lyrBoneJoint().tabBone().grdBones().getRows().newRow();
			row.setColBones(collBones.get(i));
		}
	}
	
	private void populateJointGeneralFinding()
	{
		//	joints tab	
		form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().clear();
		GeneralFindingsJointCollection collGenJoints = LookupHelper.getGeneralFindingsJoint(domain.getLookupService());
		TreeNode[] rootNodes = collGenJoints.getRootNodes();
		if(rootNodes != null)
		{
			for(int i=0;i<rootNodes.length;i++)
			{
				GenForm.lyrBoneJointLayer.tabJointContainer.grdJointGeneralFindingsRow row = form.lyrBoneJoint().tabJoint().grdJointGeneralFindings().getRows().newRow();
				row.setColGeneralFindings((GeneralFindingsJoint)rootNodes[i]);
			}
		}
	}
	

	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	private void updateControlsState() 
	{	
		//WDEV-16283
		if (form.getMode().equals(FormMode.VIEW))
		form.btnUpdate().setVisible(form.grdMuscleJoint().getSelectedRowIndex() >= 0);
		
		boolean bAddnew = form.getMode().equals(FormMode.EDIT) && 
		  				  form.getLocalContext().getMskGroupRecordIsNotNull() &&
						form.getLocalContext().getMskGroupRecord().getID_MskGroups() == null; 
				
		form.lyrBoneJoint().tabJoint().cmbGroupType().setEnabled(bAddnew);
				
		if (form.getMode().equals(FormMode.EDIT))
		{
			disableOtherRows();
		}		
		
		updateContextMenuState();		
	}

	private void updateContextMenuState()
	{
		boolean bViewing = form.getMode().equals(FormMode.VIEW);
		boolean bListRowSelected = form.grdMuscleJoint().getValue() != null;

		form.getContextMenus().getGenericGridAddItem().setVisible(bViewing);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(bViewing && bListRowSelected);
				
		boolean bJointRowSelected = form.lyrBoneJoint().tabJoint().grdJoints().getValue() != null;
		form.getContextMenus().getBoneJointConfigADDItem().setVisible(!bViewing);
		form.getContextMenus().getBoneJointConfigUPDATEItem().setVisible(!bViewing && bJointRowSelected);
		form.getContextMenus().getBoneJointConfigREMOVEItem().setVisible(!bViewing && bJointRowSelected);
	}

	protected void onGrdMuscleJointMutableComboBoxSelected(int column, grdMuscleJointRow row, Object value) throws PresentationLogicException 
	{
		if(value!=null)
			if(value.equals("Bone"))
				form.lyrBoneJoint().showtabBone();
			else
				form.lyrBoneJoint().showtabJoint();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		
		if (sender.equals(form.grdMuscleJoint()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					newGroup();
					break;
				case GenForm.ContextMenus.GenericGrid.Update:
					updateGroup();
					break;
			}
		}
		
		else if (sender.equals(form.lyrBoneJoint().tabJoint().grdJoints()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.BoneJointConfig.ADD:
					newJoint();
					break;
				case GenForm.ContextMenus.BoneJointConfig.REMOVE:
					removeJoint();
					break;
			}
		}
		
		updateControlsState();
	}
	
	
	private void removeJoint() 
	{
		form.lyrBoneJoint().tabJoint().grdJoints().removeSelectedRow();		
	}

	private void newJoint() 
	{
		if (form.lyrBoneJoint().tabJoint().cmbGroupType().getValue() == null)
		{
			engine.showMessage("Please select an Area first!");
			return;
		}
		
		GenForm.lyrBoneJointLayer.tabJointContainer.grdJointsRow row = form.lyrBoneJoint().tabJoint().grdJoints().getRows().newRow();
		form.lyrBoneJoint().tabJoint().grdJoints().setReadOnly(false);
		row.setReadOnly(false);
	}

	private void listAvailableGroupTypes()
	{				
		form.lyrBoneJoint().tabJoint().cmbGroupType().clear();		
		MSKGroupTypeCollection coll =  LookupHelper.getMSKGroupType(domain.getLookupService()); 
		for (int i=0; i < coll.size(); i++)
		{			
			if (!(groupExists(coll.get(i), null)))
			{
				// Check whether the current group is currenly used and active.				
				form.lyrBoneJoint().tabJoint().cmbGroupType().newRow(coll.getIndex(i).getIItemText(), coll.getIndex(i).getIItemText());				
			}
		}
		
	}

	private boolean groupExists(MSKGroupType groupType, Integer selectedIndex) 
	{
		if (groupType == null) return false;
		
		boolean bExists = false;
		
		for (int x=0; x < form.grdMuscleJoint().getRows().size(); x++)
		{
			if (form.grdMuscleJoint().getRows().get(x).getColGroupType().getValue() != null)
			{
				MSKGroupType lkp = (MSKGroupType) form.grdMuscleJoint().getRows().get(x).getColGroupType().getValue();
				if ((!groupType.equals(MSKGroupType.DIGIT)) &&  groupType.getId() ==  lkp.getId() && form.grdMuscleJoint().getRows().get(x).getColActive() == true && ((selectedIndex != null && !(selectedIndex == x)) || selectedIndex == null))
				{
					bExists = true;
					break;
				}
			}
		}
		
		return bExists;
	}

	protected void onCmbGroupTypeValueChanged() throws PresentationLogicException 
	{
		updateControlsState();		
	}

	protected void onGrdJointsGridQueryComboBoxTextSubmited(int column, grdJointsRow row, String text) throws PresentationLogicException 
	{
		row.getColJoints().clear();	
		row.setValue(null);
		String strJoint = row.getColJoints().getEditedText() == null ? "" : row.getColJoints().getEditedText();		
		MskJointVoCollection voCollJoints =  domain.listJoints(strJoint);
		
		MskJointVoCollection voCollJointsDigitType =  domain.listJointWithGroupTypeDigit(Boolean.TRUE);
		MskJointVoCollection voCollJointAlreadyUsed = domain.listJointWithGroupTypeDigit(Boolean.FALSE); 
		
		if (voCollJoints == null)
			return;
		
		int amountAdded = 0;
		MskJointVo voFirstMskJoint = new MskJointVo();
		for (int x=0; x < voCollJoints.size(); x++)
		{
			boolean bFound = false;
			//For each joint retrieved in the list call
			//Check that they are not already associated with this group before adding.
			for (int y=0; y < voCollJointAlreadyUsed.size(); y++)
			{
				if (voCollJoints.get(x).equals(voCollJointAlreadyUsed.get(y)))
				{
					for (int i = 0; i < voCollJointsDigitType.size(); i++)
					{
						if (voCollJoints.get(x).equals(voCollJointsDigitType.get(i)) &&
								form.lyrBoneJoint().tabJoint().cmbGroupType().getValue().equals("Digit"))
						{
							row.getColJoints().newRow(voCollJoints.get(x), voCollJoints.get(x).getName());
							row.setValue(voCollJoints.get(x));
							if(amountAdded == 0)
								voFirstMskJoint = voCollJoints.get(x);
							amountAdded++;
						}
					}
					
					bFound = true;
					break;
				}
			}
			
			if (bFound == false)
			{
				row.getColJoints().newRow(voCollJoints.get(x), voCollJoints.get(x).getName());
				row.setValue(voCollJoints.get(x));
				if(amountAdded == 0)
					voFirstMskJoint = voCollJoints.get(x);
				amountAdded++;
			}
		}
		
		
		if (amountAdded == 1)
			row.getColJoints().setValue(voFirstMskJoint);
		else if(amountAdded > 1)
			row.getColJoints().showOpened();	
		else if(amountAdded == 0)
			engine.showMessage("No new joints for this search criteria were configured.");
	}

	private void initialize() 
	{
		loadLookupsIntoGrids();
		form.chkActiveRecords().setValue(true);
	}

	private void loadLookupsIntoGrids() 
	{
		//Bone Tab
		populateBoneGeneralFindings();
		populateBones();
		//Joints tab
		populateJointGeneralFinding();		
	}

	private void disableOtherRows()
	{
		//disable the rest of the rows
		for(int i=0; i<form.grdMuscleJoint().getRows().size(); i++)
		{
			if(i != form.grdMuscleJoint().getSelectedRowIndex())
			{
				form.grdMuscleJoint().getRows().get(i).setReadOnly(true);
				form.grdMuscleJoint().getRows().get(i).setSelectable(false);
			}
		}
		
	}

	protected void onGrdMuscleJointGridCheckBoxClicked(int column, grdMuscleJointRow row, boolean isChecked) throws PresentationLogicException 
	{
		if (groupExists((MSKGroupType) row.getColGroupType().getValue(), form.grdMuscleJoint().getSelectedRowIndex()))
		{
			String str = "An Active Joint Grouping for the area '" + ((MSKGroupType) row.getColGroupType().getValue()).getText() + "' already exists";
			engine.showMessage(str);
			row.setColActive(false);
		}				
	}

}
