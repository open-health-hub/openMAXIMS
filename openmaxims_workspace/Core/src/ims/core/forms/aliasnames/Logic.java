//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.21 build 41008.1030)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.aliasnames;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PersonNameCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		if (form.getGlobalContext().Core.getOtherNamesIsNotNull())	
		{
			PersonNameCollection names = form.getGlobalContext().Core.getOtherNames();
		
			GenForm.grdNamesRow row;

			if (names != null)
			{
				for (int i = 0; i < names.size(); i++)
				{
					ims.core.vo.PersonName name = names.get(i);

					row = form.grdNames().getRows().newRow();
					
					if (name.getNameTypeIsNotNull())
						row.setcolNameType(name.getNameType().getText());
					
					if (name.getForenameIsNotNull()) //WDEV-14050 
						{
						row.setcolName(name.getForename() + " " + name.getSurname());
						}
					else row.setcolName(name.getSurname());
					
				}
			}
		}
		
		// Unless using local patient registration, this form should go to view mode only
		if (!ConfigFlag.DOM.LOCAL_PATIENT_REGISTRATION.getValue() || form.getGlobalContext().Core.getParentFormMode().equals(FormMode.VIEW))
			form.setMode(FormMode.VIEW);	
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
