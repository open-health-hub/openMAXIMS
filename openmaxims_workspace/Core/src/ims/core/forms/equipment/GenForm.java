//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.equipment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbFundedComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentAdaptationsFundedBy getValue()
			{
				return (ims.core.vo.lookups.EquipmentAdaptationsFundedBy)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentAdaptationsFundedBy value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbLoanComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationLoan value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationLoan value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationLoan value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationLoan value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentAdaptationLoan value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentAdaptationLoan getValue()
			{
				return (ims.core.vo.lookups.EquipmentAdaptationLoan)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentAdaptationLoan value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSuppliedForComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentAdaptationSuppliedFor getValue()
			{
				return (ims.core.vo.lookups.EquipmentAdaptationSuppliedFor)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentAdaptationSuppliedFor value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSupplierComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSupplier value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSupplier value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSupplier value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentAdaptationSupplier value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentAdaptationSupplier value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentAdaptationSupplier getValue()
			{
				return (ims.core.vo.lookups.EquipmentAdaptationSupplier)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentAdaptationSupplier value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbEquipment2ComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentType getValue()
			{
				return (ims.core.vo.lookups.EquipmentType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentType value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbEquipment1ComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.EquipmentType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.EquipmentType value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.EquipmentType getValue()
			{
				return (ims.core.vo.lookups.EquipmentType)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.EquipmentType value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 312, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 5, skipContextValidation);
			//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(8), new Integer(312), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthoringInfoForm, instance1 } );
			ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 5), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
			super.addControl(m_customControlAuthoringInfoControl);
			Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 93, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Equipment Name:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 576, 69, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Funded by:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 576, 42, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Loan:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 576, 18, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Supplied For:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 320, 69, 88, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Date Supplied:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 320, 42, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Date Required:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 320, 18, 55, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Supplier:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 69, 100, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Equipment Type:", new Integer(1), null, new Integer(0)}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 416, 67, 144, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 416, 40, 144, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 656, 67, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			ComboBox m_cmbFundedTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbFundedTemp);
			cmbFundedComboBox cmbFunded = (cmbFundedComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFundedComboBox.class, m_cmbFundedTemp);
			super.addComboBox(cmbFunded);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 656, 40, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			ComboBox m_cmbLoanTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbLoanTemp);
			cmbLoanComboBox cmbLoan = (cmbLoanComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLoanComboBox.class, m_cmbLoanTemp);
			super.addComboBox(cmbLoan);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 656, 16, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			ComboBox m_cmbSuppliedForTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSuppliedForTemp);
			cmbSuppliedForComboBox cmbSuppliedFor = (cmbSuppliedForComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSuppliedForComboBox.class, m_cmbSuppliedForTemp);
			super.addComboBox(cmbSuppliedFor);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 416, 16, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_cmbSupplierTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSupplierTemp);
			cmbSupplierComboBox cmbSupplier = (cmbSupplierComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSupplierComboBox.class, m_cmbSupplierTemp);
			super.addComboBox(cmbSupplier);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 144, 91, 160, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbEquipment2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbEquipment2Temp);
			cmbEquipment2ComboBox cmbEquipment2 = (cmbEquipment2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEquipment2ComboBox.class, m_cmbEquipment2Temp);
			super.addComboBox(cmbEquipment2);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 144, 67, 160, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			ComboBox m_cmbEquipment1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbEquipment1Temp);
			cmbEquipment1ComboBox cmbEquipment1 = (cmbEquipment1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEquipment1ComboBox.class, m_cmbEquipment1Temp);
			super.addComboBox(cmbEquipment1);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setcustomControlAuthoringInfoVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean iscustomControlAuthoringInfoVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setcustomControlAuthoringInfoEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean iscustomControlAuthoringInfoEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public DateControl dteSupplied()
		{
			return (DateControl)super.getControl(9);
		}
		public DateControl dteRequired()
		{
			return (DateControl)super.getControl(10);
		}
		public cmbFundedComboBox cmbFunded()
		{
			return (cmbFundedComboBox)super.getComboBox(0);
		}
		public cmbLoanComboBox cmbLoan()
		{
			return (cmbLoanComboBox)super.getComboBox(1);
		}
		public cmbSuppliedForComboBox cmbSuppliedFor()
		{
			return (cmbSuppliedForComboBox)super.getComboBox(2);
		}
		public cmbSupplierComboBox cmbSupplier()
		{
			return (cmbSupplierComboBox)super.getComboBox(3);
		}
		public cmbEquipment2ComboBox cmbEquipment2()
		{
			return (cmbEquipment2ComboBox)super.getComboBox(4);
		}
		public cmbEquipment1ComboBox cmbEquipment1()
		{
			return (cmbEquipment1ComboBox)super.getComboBox(5);
		}
	}
	public static class grdEquipmentRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdEquipmentRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColEquipmentParentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColEquipmentParentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColEquipmentParentOpened()
		{
			super.row.showOpened(0);
		}
		public String getColEquipmentParent()
		{
			return (String)super.row.get(0);
		}
		public void setColEquipmentParent(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColEquipmentParentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColEquipmentChildReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColEquipmentChildReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColEquipmentChildOpened()
		{
			super.row.showOpened(1);
		}
		public String getColEquipmentChild()
		{
			return (String)super.row.get(1);
		}
		public void setColEquipmentChild(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColEquipmentChildTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColSupplierReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColSupplierReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColSupplierOpened()
		{
			super.row.showOpened(2);
		}
		public String getColSupplier()
		{
			return (String)super.row.get(2);
		}
		public void setColSupplier(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColSupplierTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDateRequiredReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDateRequiredReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDateRequiredOpened()
		{
			super.row.showOpened(3);
		}
		public String getColDateRequired()
		{
			return (String)super.row.get(3);
		}
		public void setColDateRequired(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColDateRequiredTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColDateSuppliedReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColDateSuppliedReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColDateSuppliedOpened()
		{
			super.row.showOpened(4);
		}
		public String getColDateSupplied()
		{
			return (String)super.row.get(4);
		}
		public void setColDateSupplied(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColDateSuppliedTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColSuppliedForReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColSuppliedForReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColSuppliedForOpened()
		{
			super.row.showOpened(5);
		}
		public String getColSuppliedFor()
		{
			return (String)super.row.get(5);
		}
		public void setColSuppliedFor(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColSuppliedForTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColLoanReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColLoanReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColLoanOpened()
		{
			super.row.showOpened(6);
		}
		public String getColLoan()
		{
			return (String)super.row.get(6);
		}
		public void setColLoan(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColLoanTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColFundedbyReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColFundedbyReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColFundedbyOpened()
		{
			super.row.showOpened(7);
		}
		public String getColFundedby()
		{
			return (String)super.row.get(7);
		}
		public void setColFundedby(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColFundedbyTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.core.vo.EquipmentVo getValue()
		{
			return (ims.core.vo.EquipmentVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.EquipmentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdEquipmentRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdEquipmentRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdEquipmentRow get(int index)
		{
			return new grdEquipmentRow(super.collection.get(index));
		}
		public grdEquipmentRow newRow()
		{
			return new grdEquipmentRow(super.collection.newRow());
		}
		public grdEquipmentRow newRow(boolean autoSelect)
		{
			return new grdEquipmentRow(super.collection.newRow(autoSelect));
		}
		public grdEquipmentRow newRowAt(int index)
		{
			return new grdEquipmentRow(super.collection.newRowAt(index));
		}
		public grdEquipmentRow newRowAt(int index, boolean autoSelect)
		{
			return new grdEquipmentRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdEquipmentGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.EquipmentVo[] getValues()
		{
			ims.core.vo.EquipmentVo[] listOfValues = new ims.core.vo.EquipmentVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.EquipmentVo getValue()
		{
			return (ims.core.vo.EquipmentVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.EquipmentVo value)
		{
			super.grid.setValue(value);
		}
		public grdEquipmentRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdEquipmentRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdEquipmentRowCollection getRows()
		{
			return new grdEquipmentRowCollection(super.grid.getRows());
		}
		public grdEquipmentRow getRowByValue(ims.core.vo.EquipmentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdEquipmentRow(row);
		}
		public void setColEquipmentParentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColEquipmentParentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColEquipmentChildHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColEquipmentChildHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColSupplierHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColSupplierHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDateRequiredHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDateRequiredHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColDateSuppliedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColDateSuppliedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColSuppliedForHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColSuppliedForHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColLoanHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColLoanHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColFundedbyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColFundedbyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}

	public static class groupFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 114, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "View All", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 18, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "View Active", startTabIndex.intValue() + 1);
		}
		public void setText(groupFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public groupFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return groupFilterEnumeration.None;
				case 0: return groupFilterEnumeration.rdoAll;
				case 1: return groupFilterEnumeration.rdoActive;
			}
			return null;
		}
		public void setValue(groupFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(groupFilterEnumeration.None.id);
		}
		public boolean isEnabled(groupFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(groupFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(groupFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(groupFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class groupFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static groupFilterEnumeration None = new groupFilterEnumeration(-1);
		public static groupFilterEnumeration rdoAll = new groupFilterEnumeration(0);
		public static groupFilterEnumeration rdoActive = new groupFilterEnumeration(1);
		private groupFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((groupFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getVoEquipment();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 816, 136, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 136);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 360, 592, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 672, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 752, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 408, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdEquipmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdEquipmentTemp);
		grdEquipmentGrid grdEquipment = (grdEquipmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEquipmentGrid.class, m_grdEquipmentTemp);
		grdEquipment.addStringColumn("Equipment", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Type", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Supplier", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Date Required", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Date Supplied", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Supplied for", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Loan", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEquipment.addStringColumn("Funded by", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdEquipment);

		// RadioButton Controls
		RadioButton tmpgroupFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpgroupFilter);
		groupFilterRadioButton groupFilter = (groupFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupFilterRadioButton.class, tmpgroupFilter);
		groupFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(groupFilter);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnInactivate()
	{
		return (Button)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(5);
	}
	public grdEquipmentGrid grdEquipment()
	{
		return (grdEquipmentGrid)super.getGrid(0);
	}
	public groupFilterRadioButton groupFilter()
	{
		return (groupFilterRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Equipment = new LocalFormName(102142);
				Equipment2 = new LocalFormName(102218);
				InactivationComment = new LocalFormName(102330);
			}
			public final FormName Equipment;
			public final FormName Equipment2;
			public final FormName InactivationComment;
		}

		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_VoEquipment = new ims.framework.ContextVariable("VoEquipment", prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier + "");
			cxl_contactVo = new ims.framework.ContextVariable("contactVo", prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier + "");
		}
		
		public boolean getVoEquipmentIsNotNull()
		{
			return !cxl_VoEquipment.getValueIsNull(context);
		}
		public ims.core.vo.EquipmentVo getVoEquipment()
		{
			return (ims.core.vo.EquipmentVo)cxl_VoEquipment.getValue(context);
		}
		public void setVoEquipment(ims.core.vo.EquipmentVo value)
		{
			cxl_VoEquipment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VoEquipment = null;
		public boolean getcontactVoIsNotNull()
		{
			return !cxl_contactVo.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactVo getcontactVo()
		{
			return (ims.core.vo.ClinicalContactVo)cxl_contactVo.getValue(context);
		}
		public void setcontactVo(ims.core.vo.ClinicalContactVo value)
		{
			cxl_contactVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_contactVo = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[90];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-ID", "ID_Equipment");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-TYPE", "Type");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-SUPPLIER", "Supplier");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-DATEREQUIRED", "DateRequired");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-DATESUPPLIED", "DateSupplied");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-SUPPLIEDFOR", "SuppliedFor");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-LOAN", "Loan");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-FUNDEDBY", "FundedBy");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-CARECONTEXT", "CareContext");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-INACTIVE", "Inactive");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__VoEquipment_" + componentIdentifier, "BO-1008100001-INACTIVATIONREASON", "InactivationReason");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ID", "ID_ClinicalContact");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-SPECIALTY", "Specialty");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-SEENBY", "SeenBy");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.Equipment.__internal_x_context__contactVo_" + componentIdentifier, "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
