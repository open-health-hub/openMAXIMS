//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.addtocustomlistdialog;

import ims.configuration.gen.ConfigFlag;

import ims.core.forms.addtocustomlistdialog.GenForm.grdCustomListRow;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.CustomListVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientCustomItemVo;
import ims.core.vo.PatientCustomItemVoCollection;
import ims.core.vo.PatientCustomListVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(ConfigFlag.UI.CUSTOM_PATIENT_LIST_ACCESS_TYPE.getValue().equals("HCP"))//WDEV-14238  
		{
			if(domain.getHcpLiteUser()==null) //WDEV-9696 
			{
				form.getLocalContext().setErrorMessage(engine.showMessage("Operation not allowed. User is not HCP.", "", MessageButtons.OK, MessageIcon.INFORMATION));			
				return;
			}
		}
		listCustomLists();
		form.btnSave().setEnabled(false);
	}
	
	private void listCustomLists()
	{
		form.grdCustomList().getRows().clear();
		
		CustomListVoCollection voColl = domain.listCustomLists((MemberOfStaffRefVo)domain.getMosUser());
		if (voColl != null && voColl.size() > 0 )
		{
			for (int i = 0 ; i < voColl.size() ; i++)
			{
				grdCustomListRow row = form.grdCustomList().getRows().newRow();
				row.setColList(voColl.get(i).getListName());
				row.setValue(voColl.get(i));
			}
		}
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PatientCustomListVo voWorkList = domain.getPatientCustomList(form.grdCustomList().getSelectedRow().getValue());

		if (voWorkList != null
			&& domain.checkIfPatientIsAlreadyOnList(form.getGlobalContext().Core.getPatientShort(), voWorkList))
		{
			engine.showMessage("Your patient is already on the chosen Custom List");
			return;
		}
		
		if (voWorkList == null)
		{
			voWorkList = new PatientCustomListVo();
			voWorkList.setCustomList(form.grdCustomList().getSelectedRow().getValue());
			voWorkList.setListEntry(new PatientCustomItemVoCollection());
		}
		
		PatientCustomItemVo voItem = new PatientCustomItemVo();
		voItem.setPatient(form.getGlobalContext().Core.getPatientShort());
		voItem.setAddedBy((MemberOfStaffLiteVo) domain.getMosUser());
		voItem.setAddedDateTime(new DateTime());
		
		voWorkList.getListEntry().add(voItem);
		
		String[] errors = voWorkList.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			domain.savePatientCustomList(voWorkList);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		} 
		engine.close(DialogResult.OK);
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onGrdCustomListSelectionChanged() throws PresentationLogicException 
	{
		form.btnSave().setEnabled(true);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)
			throws PresentationLogicException {
		// TODO Auto-generated method stub
		if(form.getLocalContext().getErrorMessageIsNotNull() && form.getLocalContext().getErrorMessage() == messageBoxId)
		{
			if(DialogResult.OK.equals(result))
				engine.close(DialogResult.ABORT);
		}
	}
}
