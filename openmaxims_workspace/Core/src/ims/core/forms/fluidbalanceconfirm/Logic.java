//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2426.28575)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.fluidbalanceconfirm;

import ims.clinicaladmin.helper.DailyPatternAndShiftsHelper;
import ims.clinicaladmin.vo.DailyPatternConfigVo;
import ims.clinicaladmin.vo.SignatoryPeriodConfigVo;
import ims.core.vo.DailyFluidBalanceVo;
import ims.core.vo.FluidBalanceInstanceVo;
import ims.core.vo.FluidBalanceInstanceVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.SignatoryShiftDetailsVo;
import ims.core.vo.lookups.DailyTimePeriods;
import ims.core.vo.lookups.DailyTimePeriodsCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		populateScreenFromData();
	}
	
	private void populateScreenFromData() 
	{
		GenForm.grdShiftRow rowShift = null;
		GenForm.grdShiftRow rowInstance = null;
			
		SignatoryShiftDetailsVo voShift = form.getGlobalContext().Core.getChosenSignatoryShiftDetailsVo();
		DailyFluidBalanceVo voDFB = form.getGlobalContext().Core.getCurrentDailyFluidBalanceVo();

		clearLocalContexts();
			
		//display parent
		if(voShift != null && voDFB != null)
		{
			rowShift = form.grdShift().getRows().newRow();
			rowShift.setValue(voShift);

			if(voShift.getStartTimeIsNotNull())
				rowShift.setColDate(getConfiguredTime(voShift.getStartTime()) + "  " + getConfiguredTime(voShift.getEndTime()));
					
			rowShift.setValue(voShift);

			FluidBalanceInstanceVoCollection voInstanceColl = voDFB.getFluidBalanceInstances();
			if (voInstanceColl != null)
			{
				voInstanceColl.sort(SortOrder.ASCENDING);
				for(int j = 0 ; j < voInstanceColl.size() ; j++)
				{
					if (isFluidBalanceInThisShift(voShift, voInstanceColl.get(j)) )
					{
						rowInstance = rowShift.getRows().newRow();
						FluidBalanceInstanceVo voFluidBalInst = voInstanceColl.get(j);
								
						if(voFluidBalInst.getFluidBalanceDate() != null && voFluidBalInst.getStartTime() != null)
							rowInstance.setColDate(voFluidBalInst.getFluidBalanceDate().toString() + "  " + voFluidBalInst.getStartTime().toString());
						if(voFluidBalInst.getTotalIntake() != null)
							rowInstance.setColTotalIn(voFluidBalInst.getTotalIntake().toString() + " / " + calculateTotalInput(voFluidBalInst));
						if(voFluidBalInst.getTotalOutput() != null)
							rowInstance.setColTotalOut(voFluidBalInst.getTotalOutput().toString()+ " / " + calculateTotalOutput(voFluidBalInst));
						if(voFluidBalInst.getBalanceIsNotNull()) 
							rowInstance.setColBalance(calculateTotalBalance(voFluidBalInst.getBalance()));
								
						if(voFluidBalInst.getVentilationChartIsNotNull())
							rowInstance.setBackColor(Color.AliceBlue);
								
						rowInstance.setValue(voFluidBalInst);
					}
				}
				if(rowInstance != null)
					rowInstance.setBold(true);
			}
			form.grdShift().sort(0, SortOrder.DESCENDING);
			form.grdShift().expandAll();
			
			form.htmMissingPeriods().setHTML(createMissingPeriodsMessage(voDFB.getFluidBalanceInstances()));
		}
	}		

	private String createMissingPeriodsMessage(FluidBalanceInstanceVoCollection fluidBalanceInstances) 
	{
		SignatoryPeriodConfigVo voPeriod = form.getLocalContext().getCurrentSignatoryPeriodConfigVo();

		StringBuffer bfr = new StringBuffer();
				
		if(voPeriod!=null)
			for (int periods = 0 ; periods < voPeriod.getTimePeriods().size() ; periods++)
			{
				boolean bFound = false;
				for (int i = 0 ; i < fluidBalanceInstances.size() ; i++)
				{
					FluidBalanceInstanceVo voFluidBalInst = fluidBalanceInstances.get(i);
					
					if (voPeriod.getTimePeriods().get(periods).equals(voFluidBalInst.getTimePeriod()) )
						bFound = true;
				}
				if (!bFound)
				{
					bfr.append(getConfiguredTime(voPeriod.getTimePeriods().get(periods)));
					bfr.append(", ");
				}
			}
		if (bfr.length() == 0)
			return "";
		else
			return "<B>Note: There are no Fluid Balance records recorded for " + bfr.toString().substring(0, bfr.length() - 2) + "</B>";
	}

	//calculates the overall balance of Fluid Balance Instances
	private Integer calculateTotalBalance(Integer balance)
	{
		Integer totalBal = form.getLocalContext().getCurrentTotalBalance();
		if(balance != null)
		{
			int newBal = balance.intValue();
			if(totalBal != null)
				newBal = balance.intValue() + totalBal.intValue();
			form.getLocalContext().setCurrentTotalBalance(new Integer(newBal));
		}
		return form.getLocalContext().getCurrentTotalBalance();
	}
	
	//calculates the Total Output of a Fluid balance Instance
	private Integer calculateTotalOutput(FluidBalanceInstanceVo voFluidBal)
	{
		Integer totalOut = form.getLocalContext().getCurrentTotalOutput();
		if(voFluidBal.getTotalOutputIsNotNull())
		{
			int newTotal = voFluidBal.getTotalOutput().intValue();
			if(totalOut != null)
				newTotal += totalOut.intValue();
			form.getLocalContext().setCurrentTotalOutput(new Integer(newTotal));
		}
		return form.getLocalContext().getCurrentTotalOutput();
	}
	
	//calculates the Total Input of a Fluid balance Instance
	private Integer calculateTotalInput(FluidBalanceInstanceVo voFluidBal)
	{
		Integer totalInput = form.getLocalContext().getCurrentTotalInput();
		if(voFluidBal.getTotalIntakeIsNotNull())
		{
			int newTotal = voFluidBal.getTotalIntake().intValue();
			if(totalInput != null)
				newTotal += totalInput.intValue();
			form.getLocalContext().setCurrentTotalInput(new Integer(newTotal));
		}
		return form.getLocalContext().getCurrentTotalInput();
	}

	private boolean isFluidBalanceInThisShift(SignatoryShiftDetailsVo voShift, FluidBalanceInstanceVo voFluidBalInstance) 
	{
		DailyPatternConfigVo configVo = form.getGlobalContext().Core.getCurrentDailyPatternConfigVo();

		if (configVo.getSignatoryPeriodIsNotNull())
		{
			for (int j = 0 ; j < configVo.getSignatoryPeriod().size() ; j++)
			{
				SignatoryPeriodConfigVo voPeriod = configVo.getSignatoryPeriod().get(j);
				if (voPeriod.getTimePeriodsIsNotNull())
				{
					for (int i = 0 ; i < voPeriod.getTimePeriods().size() ; i++)
					{
						if (voShift.getStartTimeIsNotNull() && voShift.getStartTime().equals(voPeriod.getTimePeriods().get(i)))
						{
							//This is the correct configured Shift, save it to use creating the missing periods message
							if (form.getLocalContext().getCurrentSignatoryPeriodConfigVo() == null)
								form.getLocalContext().setCurrentSignatoryPeriodConfigVo(voPeriod);
							
							//Shift Found now see if the FluidBalanceInstanceVo is in this shift
							for (int k = 0 ; k < voPeriod.getTimePeriods().size() ; k++)
							{
								if (voFluidBalInstance.getTimePeriodIsNotNull() && voFluidBalInstance.getTimePeriod().equals(voPeriod.getTimePeriods().get(k)))
									return true;
							}
						}
					}
				}
			}
		}

		return false;
	}
	
	private String getConfiguredTime(DailyTimePeriods timePeriod) 
	{
		DailyPatternConfigVo configVo = form.getGlobalContext().Core.getCurrentDailyPatternConfigVo();
		
		if (configVo != null)
		{
			DailyTimePeriodsCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getDailyTimePeriods(domain.getLookupService());
			DailyPatternAndShiftsHelper helper = new DailyPatternAndShiftsHelper();
			if (configVo.getStartTime() != null)
			{
				lookupCollection = helper.configureCustomTimePeriods(configVo.getStartTime(), lookupCollection);
				
				if (lookupCollection != null)
				{
					for (int j = 0 ; j < lookupCollection.size() ; j ++)
					{
						if (timePeriod.equals(lookupCollection.get(j)) )
							return lookupCollection.get(j).getText();
					}
				}
			}
		}
		return "";
	}

	private void clearLocalContexts() 
	{
	}

	private void initialize() 
	{
		form.dtimConfirmed().setValue(new DateTime());
		if (domain.getHcpUser() != null)
		{
			Hcp hcpVo = (Hcp) domain.getHcpUser();
			HcpLiteVo liteVo = domain.getHcpLiteById(hcpVo);
			form.qmbConfirmed().newRow(liteVo, liteVo.getMos().getName().toShortForm());
			form.qmbConfirmed().setValue(liteVo);
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			engine.close(DialogResult.OK);
	}
	
	private boolean save() 
	{
		populateDataFromScreen();

		DailyFluidBalanceVo voBalanace = form.getLocalContext().getCurrentDailyFluidBalanceVo();
		
		String[] errors = voBalanace.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			voBalanace = domain.saveDailyFluidBalance(voBalanace);
		}
		catch (StaleObjectException sox)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		form.getGlobalContext().Core.setCurrentDailyFluidBalanceVo(voBalanace);
		
		return true;
	}

	private void populateDataFromScreen() 
	{
		SignatoryShiftDetailsVo voChosenSignatoryShiftDetails = form.getGlobalContext().Core.getChosenSignatoryShiftDetailsVo();
		DailyFluidBalanceVo voDFB = form.getGlobalContext().Core.getCurrentDailyFluidBalanceVo();
		
		DateTime dtNow = new DateTime();
		voChosenSignatoryShiftDetails.setSignedOffBy(form.qmbConfirmed().getValue());
		voChosenSignatoryShiftDetails.setDateTimeSigned(dtNow);
		
		for (int i = 0 ; i < voDFB.getFluidBalanceInstances().size() ; i++)
		{
			if (voDFB.getFluidBalanceInstances().get(i).getSignatoryShiftIsNotNull() 
					&& voDFB.getFluidBalanceInstances().get(i).getSignatoryShift().equals(voChosenSignatoryShiftDetails))
			{
				FluidBalanceInstanceVo voFluid = voDFB.getFluidBalanceInstances().get(i);
				
				voFluid.setConfirmingDateTime(dtNow);
				voFluid.setConfirmingHCP(form.qmbConfirmed().getValue());
				voFluid.setIsConfirmed(Boolean.TRUE);
				
				voDFB.getFluidBalanceInstances().set(i, voFluid);
			}
		}
		
		form.getLocalContext().setCurrentDailyFluidBalanceVo(voDFB);
	}
}
