//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.45 build 2277.30859)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.carespelldialog;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.admin.vo.ReferralRefVoCollection;
import ims.core.forms.carespelldialog.GenForm.GroupInpatientStatusEnumeration;
import ims.core.forms.carespelldialog.GenForm.grdReferralsRow;
import ims.core.vo.CareContextStatusHistoryVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.EpisodeOfCareHistoryVo;
import ims.core.vo.EpisodeOfCareHistoryVoCollection;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.InpatientEpisodeVoCollection;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PasEventVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.ReferralLiteVo;
import ims.core.vo.ReferralLiteVoCollection;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.CareSpellDialogMode;
import ims.core.vo.lookups.ContactType;
import ims.core.vo.lookups.ContactTypeCollection;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	private void open()
	{
		populateScreenFromData( form.getGlobalContext().Clinical.PatientSummary.getCareSpell());
	}
	
	private void populateScreenFromData(CareSpellVo voCareSpell)
	{
		clearScreen();
			
		if(voCareSpell == null)
		{
			loadContactsComboWithoutSpecificItems(true, false, false);
			setDefaultData();
			return;
		}
		form.dteCsStart().setValue(voCareSpell.getStartDate());
		form.dteCsEnd().setValue(voCareSpell.getEndDate());
		
		EpisodeofCareVo voEpisodeOfCare = null; 
		CareContextVo  voCareContext = null;
		ClinicalContactShortVo voClinContact = null;
		
		if(voCareSpell.getEpisodesIsNotNull() && form.getGlobalContext().Clinical.PatientSummary.getEpisodeOfCareIsNotNull())
		{
			for(int i=0;i<voCareSpell.getEpisodes().size();i++)
			{
				if(voCareSpell.getEpisodes().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getEpisodeOfCare()))
				{
					voEpisodeOfCare = voCareSpell.getEpisodes().get(i);
					break;
				}
			}
			
			voCareContext = null;
			if(voEpisodeOfCare != null && voEpisodeOfCare.getCareContextsIsNotNull() && form.getGlobalContext().Clinical.PatientSummary.getCareContextIsNotNull())
			{
				for(int i=0;i<voEpisodeOfCare.getCareContexts().size();i++)
				{
					if(voEpisodeOfCare.getCareContexts().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getCareContext()))
					{
						voCareContext = voEpisodeOfCare.getCareContexts().get(i);
						form.getLocalContext().setCareContext(voCareContext);
						break;
					}
				}
			}
			
			voClinContact = null;
			if(voCareContext != null && voCareContext.getClinicalContactsIsNotNull() && form.getGlobalContext().Clinical.PatientSummary.getClinicalContactIsNotNull())
			{
				for(int i=0;i<voCareContext.getClinicalContacts().size();i++)
				{
					if(voCareContext.getClinicalContacts().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getClinicalContact()))
					{
						voClinContact = voCareContext.getClinicalContacts().get(i);
						break;
					}
				}
			}
		}
			
		if(voEpisodeOfCare != null)
		{
			form.dteEcStart().setValue(voEpisodeOfCare.getStartDate());
			form.dteEcEnd().setValue(voEpisodeOfCare.getEndDate());
			form.cmbEcSpecialty().setValue(voEpisodeOfCare.getSpecialty());
			if(voEpisodeOfCare.getResponsibleHCPIsNotNull())
			{
				form.qmbEcRespHcp().newRow(voEpisodeOfCare.getResponsibleHCP(), voEpisodeOfCare.getResponsibleHCP().toString());
				form.qmbEcRespHcp().setValue(voEpisodeOfCare.getResponsibleHCP());
			}
			form.cmbEcRelationship().setValue(voEpisodeOfCare.getRelationship());
		}

		if(voCareContext != null)
		{
			form.dtimCtxStart().setValue(voCareContext.getStartDateTime());
			form.dtimCtxEnd().setValue(voCareContext.getEndDateTime());
			form.cmbCtxContextType().setValue(voCareContext.getContext());
			form.cmbCtxLocationType().setValue(voCareContext.getLocationType());
			
			if(ConfigFlag.UI.DISPLAY_BED_NUMBER_FOR_CARECONTEXT.getValue())
				form.txtBedNumber().setValue(voCareContext.getBedNumber());
			
				cmbCtxContextTypeValueChanged();
		}

		//business rule WDEV-973
		loadContactsComboWithoutSpecificItems(isRemoveSpinalMedicalAdmissionContatType(), isRemoveInpatientContactType(), isRemoveOutPatientContactType());

		if(voClinContact != null)
		{
			form.dtimConStart().setValue(voClinContact.getStartDateTime());
			form.dtimConEnd().setValue(voClinContact.getEndDateTime());
			if(voClinContact.getSeenByIsNotNull())
			{
				form.qmbConSeenBy().newRow(voClinContact.getSeenBy(), voClinContact.getSeenBy().toString());
				form.qmbConSeenBy().setValue(voClinContact.getSeenBy());
			}
			form.cmbConSpecialty().setValue(voClinContact.getSpecialty());
			form.cmbConContactType().setValue(voClinContact.getContactType());
		}
		
		if(ConfigFlag.GEN.LINK_REFERRALS_TO_EPISODE.getValue())
			if(voEpisodeOfCare != null && voEpisodeOfCare.getLinkedReferralsIsNotNull()){
				form.getLocalContext().setLinkedReferrals(null);
				ReferralLiteVoCollection collReferralLiteVo = new ReferralLiteVoCollection();
				for(int i=0;i<form.grdReferrals().getRows().size();i++)
				{
					ReferralLiteVo vo = form.grdReferrals().getRows().get(i).getValue();
					for(int j=0;j<voEpisodeOfCare.getLinkedReferrals().size();j++){
						if(voEpisodeOfCare.getLinkedReferrals().get(j).getID_Referral().equals(vo.getID_Referral())){
							if(voEpisodeOfCare.getCurrentReferralIsNotNull() && voEpisodeOfCare.getCurrentReferral().getID_Referral().equals(vo.getID_Referral()))	//WDEV-11655
								form.grdReferrals().getRows().get(i).setColPrimary(true);
							form.grdReferrals().getRows().get(i).setColLink(true);
							form.grdReferrals().getRows().get(i).setColLinkReadOnly(true);
							form.grdReferrals().getRows().get(i).setColPrimaryReadOnly(false);
							collReferralLiteVo.add(form.grdReferrals().getRows().get(i).getValue());
						}
					}
				}
				form.getLocalContext().setLinkedReferrals(collReferralLiteVo);				
			}
		
		setScreenMode();
		setDefaultData();
	}
	
	private boolean isRemoveOutPatientContactType()
	{
		return(form.cmbCtxContextType().getValue() != null && form.cmbCtxContextType().getValue().equals(ContextType.INPATIENT));
	}
	
	private boolean isRemoveInpatientContactType()
	{
		return(form.cmbCtxContextType().getValue() != null && form.cmbCtxContextType().getValue().equals(ContextType.OUTPATIENT));
	}
	
	private boolean isRemoveSpinalMedicalAdmissionContatType()
	{
		CareContextVo voCareContext = form.getLocalContext().getCareContext();
		
		boolean bRemoveSpinalMedAdmissionContactType = false;
		if(voCareContext != null)
		{
			if(voCareContext.getContextIsNotNull() && voCareContext.getContext().equals(ContextType.INPATIENT))
			{
				if(voCareContext.getClinicalContactsIsNotNull())
				{
					for(int i=0;i<voCareContext.getClinicalContacts().size();i++)
					{
						if(voCareContext.getClinicalContacts().get(i).getContactTypeIsNotNull() && voCareContext.getClinicalContacts().get(i).getContactType().equals(ContactType.SPINALMEDICALADMISSION))
						{
							return true;
						}
					}
				}
			}
			else
				bRemoveSpinalMedAdmissionContactType = true;
		}

		if(form.cmbCtxContextType().getValue() == null)
			bRemoveSpinalMedAdmissionContactType = true;
		else if(!form.cmbCtxContextType().getValue().equals(ContextType.INPATIENT))
			bRemoveSpinalMedAdmissionContactType = true;
		else
			bRemoveSpinalMedAdmissionContactType = false;
		
		
		return bRemoveSpinalMedAdmissionContactType;
	}
	
	private void loadContactsComboWithoutSpecificItems(boolean bRemoveSpinalMedAdmissionContactType, boolean bRemoveInpatientContactType, boolean bRemoveOutPatientContactType)
	{
		form.cmbConContactType().clear();
		
		ContactTypeCollection collContactType = LookupHelper.getContactType(domain.getLookupService());
		for(int i=0;i<collContactType.size();i++)
		{
			if(bRemoveSpinalMedAdmissionContactType && collContactType.get(i).equals(ContactType.SPINALMEDICALADMISSION))
				continue;
		
			if(bRemoveInpatientContactType && collContactType.get(i).equals(ContactType.INPATIENT))
				continue;

			if(bRemoveOutPatientContactType && collContactType.get(i).equals(ContactType.OUTPATIENT))
				continue;

			form.cmbConContactType().newRow(collContactType.get(i), collContactType.get(i).getText());
		}
	}
	
	private void setDefaultData()
	{
		CareSpellDialogMode mode = form.getGlobalContext().Core.getCareSpellDialogMode();
		if(mode.equals(CareSpellDialogMode.NEWCAREGROUPING))
		{
			form.dteCsStart().setValue(new Date());
		}
		else if(mode.equals(CareSpellDialogMode.NEWEPISODEOFCARE))
		{
			form.dteEcStart().setValue(new Date());
			HcpLiteVo hcp = getHcpUser();
			if(hcp != null)
			{
				form.qmbEcRespHcp().newRow(hcp, hcp.toString());
				form.qmbEcRespHcp().setValue(hcp);
				//WDEV-13974
				setDefaultSpecialtyOnNew(form.qmbEcRespHcp());
			}
		}
		else if(mode.equals(CareSpellDialogMode.ADDCONTACTCONTEXTDETAILS))
		{
			form.dtimCtxStart().setValue(new DateTime());
		}
		else if(mode.equals(CareSpellDialogMode.ADDCONTACT))
		{
			form.dtimConStart().setValue(new DateTime());
			
			HcpLiteVo hcp = getHcpUser();
			if(hcp != null)
			{
				form.qmbConSeenBy().newRow(hcp, hcp.toString());
				form.qmbConSeenBy().setValue(hcp);
				//WDEV-13967
				setDefaultSpecialtyOnNew(form.qmbConSeenBy());
				
			}
		}
	}
	
	private HcpLiteVo getHcpUser()
	{
		if(form.getLocalContext().getHcpUserIsNotNull())
			return form.getLocalContext().getHcpUser();
			
		Object hcp = domain.getHcpLiteUser();
		if(hcp != null)
			form.getLocalContext().setHcpUser((HcpLiteVo) hcp);
		
		return form.getLocalContext().getHcpUser();
	}
	
	private void setScreenMode()
	{
		CareSpellDialogMode mode = form.getGlobalContext().Core.getCareSpellDialogMode();
		
		if(mode.equals(CareSpellDialogMode.NEWEPISODEOFCARE) || mode.equals(CareSpellDialogMode.EDITEPISODEOFCARE))
		{
			form.dteCsStart().setEnabled(false);
		}
		else if(mode.equals(CareSpellDialogMode.ADDCONTACTCONTEXTDETAILS) || mode.equals(CareSpellDialogMode.EDITCONTACTCONTEXTDETAILS))
		{
			form.dteCsStart().setEnabled(false);
			
			form.dteEcStart().setEnabled(false);
			form.dteEcEnd().setEnabled(false);
			form.cmbEcSpecialty().setEnabled(false);
			form.qmbEcRespHcp().setEnabled(false);
			form.cmbEcRelationship().setEnabled(false);
		}
		else if(mode.equals(CareSpellDialogMode.ADDCONTACT) || mode.equals(CareSpellDialogMode.EDITCONTACT))
		{
			form.dteCsStart().setEnabled(false);
			
			form.dteEcStart().setEnabled(false);
			form.dteEcEnd().setEnabled(false);
			form.cmbEcSpecialty().setEnabled(false);
			form.qmbEcRespHcp().setEnabled(false);
			form.cmbEcRelationship().setEnabled(false);
			
			form.dtimCtxStart().setEnabled(false);
			form.dtimCtxEnd().setEnabled(false);
			form.cmbCtxContextType().setEnabled(false);
			form.cmbCtxLocationType().setEnabled(false);
			form.GroupInpatientStatus().setEnabled(false);
		}
		
		setControlStateForEndedItems();
	}
	
	//only check this according to a config flag and override anyway if the approle right 
	//is set to allow 'admin' users to enter data regardless  (WDEV-3578)
	private void setControlStateForEndedItems()
	{
		CareSpellDialogMode mode = form.getGlobalContext().Core.getCareSpellDialogMode();
		
		if(mode == null)
			throw new CodingRuntimeException("CareSpellDialogMode enumeration not supplied");
		//we dont care about any rules if the user is a clinical administrator 
		if(engine.hasRight(AppRight.CAN_ADD_CONTACT_AFTER_ENDDATE_SUPPLIED))
			return;
		
		if(ConfigFlag.UI.STOP_CLINICAL_DATACREATION_IFENDDATE_SUPPLIED.getValue())
		{
			//check if the selected item is ended and disable and clear all controls below
			if(mode.equals(CareSpellDialogMode.EDITEPISODEOFCARE) || mode.equals(CareSpellDialogMode.NEWEPISODEOFCARE))
			{	
				form.dtimCtxStart().setEnabled(form.dteEcEnd().getValue() == null);
				form.dtimCtxEnd().setEnabled(form.dteEcEnd().getValue() == null);
				form.cmbCtxContextType().setEnabled(form.dteEcEnd().getValue() == null);
				form.cmbCtxLocationType().setEnabled(form.dteEcEnd().getValue() == null);
				
				form.dtimConStart().setEnabled(form.dteEcEnd().getValue() == null);
				form.dtimConEnd().setEnabled(form.dteEcEnd().getValue() == null);
				form.qmbConSeenBy().setEnabled(form.dteEcEnd().getValue() == null);
				form.cmbConSpecialty().setEnabled(form.dteEcEnd().getValue() == null);
				form.cmbConContactType().setEnabled(form.dteEcEnd().getValue() == null);
					
				if(form.dteEcEnd().getValue() != null)
				{
					form.dtimCtxStart().setValue(null);
					form.dtimCtxEnd().setValue(null);
					form.cmbCtxContextType().setValue(null);
					form.cmbCtxLocationType().setValue(null);
					
					form.dtimConStart().setValue(null);
					form.dtimConEnd().setValue(null);
					form.qmbConSeenBy().setValue(null);
					form.cmbConSpecialty().setValue(null);
					form.cmbConContactType().setValue(null);
				}

				if(form.dtimCtxEnd().getValue() != null)
				{
					form.dtimConStart().setValue(null);
					form.dtimConEnd().setValue(null);
					form.qmbConSeenBy().setValue(null);
					form.cmbConSpecialty().setValue(null);
					form.cmbConContactType().setValue(null);
					
					form.dtimConStart().setEnabled(form.dtimCtxEnd().getValue() == null);
					form.dtimConEnd().setEnabled(form.dtimCtxEnd().getValue() == null);
					form.qmbConSeenBy().setEnabled(form.dtimCtxEnd().getValue() == null);
					form.cmbConSpecialty().setEnabled(form.dtimCtxEnd().getValue() == null);
					form.cmbConContactType().setEnabled(form.dtimCtxEnd().getValue() == null);
				}
			}
			else if(mode.equals(CareSpellDialogMode.EDITCONTACTCONTEXTDETAILS) || mode.equals(CareSpellDialogMode.ADDCONTACTCONTEXTDETAILS))
			{
				form.dtimConStart().setEnabled(form.dtimCtxEnd().getValue() == null);
				form.dtimConEnd().setEnabled(form.dtimCtxEnd().getValue() == null);
				form.qmbConSeenBy().setEnabled(form.dtimCtxEnd().getValue() == null);
				form.cmbConSpecialty().setEnabled(form.dtimCtxEnd().getValue() == null);
				form.cmbConContactType().setEnabled(form.dtimCtxEnd().getValue() == null);
				
				if(form.dtimCtxEnd().getValue() != null)
				{
					form.dtimConStart().setValue(null);
					form.dtimConEnd().setValue(null);
					form.qmbConSeenBy().setValue(null);
					form.cmbConSpecialty().setValue(null);
					form.cmbConContactType().setValue(null);
				}
			}
		}
	}
	private void clearScreen()
	{
		form.dteCsStart().setValue(null);
		form.dteCsEnd().setValue(null);
		
		form.dteEcStart().setValue(null);
		form.dteEcEnd().setValue(null);
		form.cmbEcSpecialty().setValue(null);
		form.qmbEcRespHcp().setValue(null);
		form.cmbEcRelationship().setValue(null);
		
		form.dtimCtxStart().setValue(null);
		form.dtimCtxEnd().setValue(null);
		form.cmbCtxContextType().setValue(null);
		form.cmbCtxLocationType().setValue(null);
		
		form.dtimConStart().setValue(null);
		form.dtimConEnd().setValue(null);
		form.qmbConSeenBy().setValue(null);
		form.cmbConSpecialty().setValue(null);
		form.cmbConContactType().setValue(null);
		
		if(ConfigFlag.GEN.LINK_REFERRALS_TO_EPISODE.getValue())
			form.getContextMenus().Core.disableAllReferralsMenuItems();
	}
	
	private void initialize()
	{
		form.GroupInpatientStatus().setValue(GenForm.GroupInpatientStatusEnumeration.rdoCurrent);
		form.GroupInpatientStatus().setVisible(false);
		form.lblCareSpell().setTextColor(Color.Purple);
		form.lblClinicalContact().setTextColor(Color.Purple);
		form.lblEpisodeOfCare().setTextColor(Color.Purple);
		form.lblContext().setTextColor(Color.Purple);
		
		if(!ConfigFlag.UI.DISPLAY_BED_NUMBER_FOR_CARECONTEXT.getValue()){
			form.lblBedNumber().setVisible(false);
			form.txtBedNumber().setVisible(false);
		}
			
		form.txtWorkflowID().setVisible(ConfigFlag.UI.CARE_SPELL_CREATE_PAS_EVENT_FROM_WORKFLOWID.getValue());
		form.lblPASWorkflowID().setVisible(ConfigFlag.UI.CARE_SPELL_CREATE_PAS_EVENT_FROM_WORKFLOWID.getValue());
	
		if(ConfigFlag.GEN.LINK_REFERRALS_TO_EPISODE.getValue())
			loadReferralsGrid();
		else
			form.grdReferrals().setVisible(false);
		
		form.cmbConSpecialty().setRequired(ConfigFlag.UI.SPECIALTY_MANDATORY_ON_CREATION_OF_A_CLINICAL_CONTACT.getValue());
	}
	
	private void loadReferralsGrid() {
		ReferralLiteVoCollection voCollReferrals = domain.listReferralsByPatient(form.getGlobalContext().Core.getPatientShort());
		
		for(int i=0;i<voCollReferrals.size();i++)
		{
			grdReferralsRow row = form.grdReferrals().getRows().newRow();
			if(voCollReferrals.get(i).getReferralReceivedDateIsNotNull())
				row.setColReceivedDate(voCollReferrals.get(i).getReferralReceivedDate().toString());
			if(voCollReferrals.get(i).getReferralTypeIsNotNull())
				row.setColReferralType(voCollReferrals.get(i).getReferralType().toString());
			if(voCollReferrals.get(i).getDetailsIsNotNull())
				row.setColDetails(voCollReferrals.get(i).getDetails());
			row.setValue(voCollReferrals.get(i));
		}
	}
	protected void onQmbConSeenByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchHcp(value, form.qmbConSeenBy());
	}
	
	private void searchHcp(String value, Object sender)
	{
		if(sender.equals(form.qmbConSeenBy()))
			form.qmbConSeenBy().clear();
		else if(sender.equals(form.qmbEcRespHcp()))
			form.qmbEcRespHcp().clear();
			
		HcpFilter filter = new HcpFilter();
		PersonName name = new PersonName();
		name.setSurname(value);
		filter.setQueryName(name);
		
		HcpLiteVoCollection coll = domain.listHcp(value);
		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				HcpLiteVo med = coll.get(i);
				if(sender.equals(form.qmbConSeenBy()))
					form.qmbConSeenBy().newRow(med, med.toString());		
				else if(sender.equals(form.qmbEcRespHcp()))
					form.qmbEcRespHcp().newRow(med, med.toString());	
			}
			if (coll.size() == 1)
			{
				if(sender.equals(form.qmbConSeenBy()))
				{
					form.qmbConSeenBy().setValue(coll.get(0));
					setDefaultSpecialtyOnNew(form.qmbConSeenBy());
				}
				else if(sender.equals(form.qmbEcRespHcp()))
				{
					form.qmbEcRespHcp().setValue(coll.get(0));
					setDefaultSpecialtyOnNew(form.qmbEcRespHcp());
				}				
			}
			else if (coll.size() > 1)
			{
				if(sender.equals(form.qmbConSeenBy()))
					form.qmbConSeenBy().showOpened();
				else if(sender.equals(form.qmbEcRespHcp()))
					form.qmbEcRespHcp().showOpened();
			}
		}
	}
	
	private void setDefaultSpecialtyOnNew(Object sender)
	{
		if(sender == null)
			throw new CodingRuntimeException("sender cannot be null in method setDefaultSpecialtyOnNew");
		
		CareSpellDialogMode mode = form.getGlobalContext().Core.getCareSpellDialogMode();
		if(mode.equals(CareSpellDialogMode.NEWCAREGROUPING) || mode.equals(CareSpellDialogMode.NEWEPISODEOFCARE) || mode.equals(CareSpellDialogMode.EDITEPISODEOFCARE)) //WDEV-13969
		{
			if(sender.equals(form.qmbEcRespHcp()) && form.qmbEcRespHcp().getValue() != null)
			{
				Specialty specialty = domain.getDefaultSpecialtyForHcp(form.qmbEcRespHcp().getValue());
				if(specialty != null)
					form.cmbEcSpecialty().setValue(specialty);
				
				else //WDEV-13974
				{
					form.cmbEcSpecialty().setValue(null);
				}
			}
			else if(sender.equals(form.qmbConSeenBy()) && form.qmbConSeenBy().getValue() != null)
			{
				Specialty specialty = domain.getDefaultSpecialtyForHcp(form.qmbConSeenBy().getValue());
				if(specialty != null)
					form.cmbConSpecialty().setValue(specialty);
				else //WDEV-13969
				{
					form.cmbConSpecialty().setValue(null);
				}
			}
			else if (form.qmbEcRespHcp().getValue() == null)//WDEV-13969
			{
				form.cmbEcSpecialty().setValue(null);
			}
			else if (form.qmbConSeenBy().getValue() == null)//WDEV-13969
			{
				form.cmbConSpecialty().setValue(null);
			}
		}		
		else if(mode.equals(CareSpellDialogMode.ADDCONTACTCONTEXTDETAILS) || mode.equals(CareSpellDialogMode.ADDCONTACT) || mode.equals(CareSpellDialogMode.EDITCONTACT) ) //WDEV-13969
		{
			if(sender.equals(form.qmbConSeenBy()) && form.qmbConSeenBy().getValue() != null)
			{
				Specialty specialty = domain.getDefaultSpecialtyForHcp(form.qmbConSeenBy().getValue());
				if(specialty != null)
					form.cmbConSpecialty().setValue(specialty);
				else //WDEV-13969
				{
					form.cmbConSpecialty().setValue(null);
				}
			}
			else if (form.qmbConSeenBy().getValue() == null)//WDEV-13969
			{
				form.cmbConSpecialty().setValue(null);
			}
		}
	}
	private PasEventShortVo getPASEvent()
	{
		if(form.txtWorkflowID().getValue() == null || form.txtWorkflowID().getValue().trim().length() == 0)
			return null;
		
		PasEventShortVo pasEvent = new PasEventShortVo();
		
		pasEvent.setEventDateTime(form.dtimCtxStart().getValue());
		pasEvent.setPasEventId(form.txtWorkflowID().getValue());
		pasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
		pasEvent.setEventType(PasEventType.INPATIENT);
		pasEvent.setSpecialty(form.cmbConSpecialty().getValue());
		
		return pasEvent;
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PasEventVo savedPasEvent = null;
		
		if(ConfigFlag.UI.CARE_SPELL_CREATE_PAS_EVENT_FROM_WORKFLOWID.getValue())
		{
			PasEventShortVo pasEvent = getPASEvent();
			if(pasEvent != null)
			{			
				String[] errors = pasEvent.validate();
				if(errors != null && errors.length > 0)
				{
					engine.showErrors("PAS Event not valid", errors);
				}
				
				try 
				{
					savedPasEvent = domain.savePASEvent(pasEvent);
				} 
				catch (StaleObjectException e) 
				{
					engine.showErrors("PAS Event save failed", new String[] { "PAS Event save failed: " + e.getMessage()} );
					return;
				}	
			}
		}
		
		CareSpellVo voCareSpell = populateDataFromScreen(form.getGlobalContext().Clinical.PatientSummary.getCareSpell(), savedPasEvent);
		
		if(voCareSpell == null)
			return;
		
		String[] arrErrors = voCareSpell.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		//separate validation  as fields need to be populated before this validation can take place
		arrErrors = validateUI();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		try
		{
			domain.saveCareSpell(voCareSpell);
		}
		catch (StaleObjectException e)
		{
			//WDEV-2969
			form.getGlobalContext().Core.setYesNoDialogMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.open(form.getForms().Core.OkDialog, "Data Warning");
			return;
		}
		
		engine.close(DialogResult.OK);
		
	}
	
	private String[] validateUI()
	{
		List<String> errors = new ArrayList<String>(); 
		
		if(form.dteEcStart().getValue() != null)
		{
			if(form.dteCsStart().getValue() != null)
			{
				if(form.dteEcStart().getValue().isLessThan(form.dteCsStart().getValue()))
					errors.add("Episode of Care 'Start Date' must not be before Problem Group 'Start Date'");
			}
		}
		else if(problemGroupLaterThanEpisodeOfCare())
			errors.add("Problem Group 'Start Date' must not be later than Episode of Care 'Start Date'");
			
		if(form.dtimCtxStart().getValue() != null && form.dtimCtxStart().getValue().getDate() != null)
		{
			if(form.dteEcStart().getValue() != null)
			{
				if(form.dtimCtxStart().getValue().getDate().isLessThan(form.dteEcStart().getValue()))
					errors.add("Care Context 'Start Date' must not be before Episode of Care 'Start Date'");
			}
		}
		
		if(form.dtimConStart().getValue() != null)
		{
			if(form.dtimCtxStart().getValue() != null)
			{
				if(form.dtimConStart().getValue().isLessThan(form.dtimCtxStart().getValue()))
					//WDEV-18207
					errors.add("Clinical Contact 'Seen Date/Time' must not be before Care Context 'Start Date'");
			}
		}
		
		// WDEV-13791
		if (form.dtimConStart().getValue() != null)
		{
			if (form.cmbConSpecialty().getValue() == null && ConfigFlag.UI.SPECIALTY_MANDATORY_ON_CREATION_OF_A_CLINICAL_CONTACT.getValue())
			{
				errors.add("Clinical Contact 'Specialty' is mandatory.");
			}
		}
		
		if(form.dteCsStart().getValue() != null && form.dteCsEnd().getValue() != null)
			if(form.dteCsStart().getValue().isGreaterThan(form.dteCsEnd().getValue()))
				errors.add("Care Spell 'Start Date' must not be after Care Spell 'End Date'");

		if(form.dteEcStart().getValue() != null && form.dteEcEnd().getValue() != null)
			if(form.dteEcStart().getValue().isGreaterThan(form.dteEcEnd().getValue()))
				errors.add("Episode Of Care 'Start Date' must not be after Episode Of Care 'End Date'");

		if(form.dtimCtxStart().getValue() != null && form.dtimCtxEnd().getValue() != null)
			if(form.dtimCtxStart().getValue().isGreaterThan(form.dtimCtxEnd().getValue()))
				errors.add("Care Context 'Start Date' must not be after Care Context 'End Date'");
		
		if(form.dtimConStart().getValue() != null && form.dtimConEnd().getValue() != null)
			if(form.dtimConStart().getValue().isGreaterThan(form.dtimConEnd().getValue()))
				//WDEV-18207
				errors.add("Clinical Contact 'Seen Date/Time' must not be after Clinical Contact 'End Date/Time'");
	
		if(isEpisodeDataEntered())
		{
			if(form.qmbEcRespHcp().getValue() == null)
				errors.add("Responsible HCP for 'Episode Of Care' is mandatory.");//WDEV-18207
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}
	
	//WDEV-7172 when problem group is being edited check against associated EpisodeOfCare dates
	private boolean problemGroupLaterThanEpisodeOfCare() {
		if(form.dteCsStart().getValue() != null)
		{
			CareSpellVo voCareSpell = form.getGlobalContext().Clinical.PatientSummary.getCareSpell();
			for(int i=0; voCareSpell != null && voCareSpell.getEpisodesIsNotNull() && i < voCareSpell.getEpisodes().size();i++)	//wdev-13248
			{
				if(voCareSpell.getEpisodes().get(i).getStartDateIsNotNull()
						&& voCareSpell.getEpisodes().get(i).getStartDate().isLessThan(form.dteCsStart().getValue()))
					return true;
			}
		}
	
		return false;
	}
	private boolean isEpisodeDataEntered()
	{
		return (form.dteEcStart().getValue() != null || form.dteEcEnd().getValue() != null || form.cmbEcSpecialty().getValue() != null || form.qmbEcRespHcp().getValue() != null || form.cmbEcRelationship().getValue() != null);
	}
	
	private CareSpellVo populateDataFromScreen(CareSpellVo voCareSpell, PasEventVo pasEvent	)
	{
		voCareSpell = populateCareSpellInstanceData(voCareSpell);
		
		EpisodeofCareVo voEpisodeOfCare = null;
		if(isEpisodeDataEntered())
		{
			//wdev-14029
			String[] arrErrors = new String[2];
			if( form.cmbEcSpecialty().getValue() == null)
			{
				arrErrors[0] = "Specialty is mandatory";
				
			}
			if(form.qmbEcRespHcp().getValue() == null)
			{
				arrErrors[1] = "Responsible HCP for 'Episode Of Care' is mandatory";
			}
			if(arrErrors[0] == null && arrErrors[1] == null)
				arrErrors = null;
			
			if(arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return null;
			}
			//--------------------
			voEpisodeOfCare = populateEpisodeOfCare(voCareSpell);
		}
		
		CareContextVo voCareContext = null;
		if(form.dtimCtxStart().getValue() != null || form.dtimCtxEnd().getValue() != null || form.cmbCtxContextType().getValue() != null || form.cmbCtxLocationType().getValue() != null)
		{
			voCareContext = populateCareContext(voEpisodeOfCare);
			if(voCareContext == null)
				return null;
		}
		
		if(ConfigFlag.UI.CARE_SPELL_CREATE_PAS_EVENT_FROM_WORKFLOWID.getValue() && pasEvent != null && voCareContext != null)
		{
			voCareContext.setPasEvent(pasEvent);
		}
		
		ClinicalContactShortVo voContactShort = null;
		if(form.dtimConStart().getValue() != null || form.dtimConEnd().getValue() != null || form.qmbConSeenBy().getValue() != null || form.cmbConSpecialty().getValue() != null || form.cmbConContactType().getValue() != null )
		{
			voContactShort = populateClinicalContact(voCareContext);
			if(voContactShort == null)
				return null;
		}
		
		if(ConfigFlag.GEN.LINK_REFERRALS_TO_EPISODE.getValue()){
			if(voEpisodeOfCare==null && linkedReferrals()>0){
				engine.showMessage("Please enter an Episode Of Care or unlink the referrals.");
				return null;
			}
			else if((voEpisodeOfCare!=null && voEpisodeOfCare.getID_EpisodeOfCare()==null) && linkedReferrals()>1){
				engine.showMessage("Only 1 linked referral can be selected for new Episode Of Care.");
				return null;
			}
						
			if(voEpisodeOfCare!=null){
				voEpisodeOfCare.setLinkedReferrals(populateLinkedReferrals());
				voEpisodeOfCare.setLinkedReferralsHistory(populateLinkedReferralsHistory(voEpisodeOfCare.getLinkedReferralsHistory()));
				voEpisodeOfCare.setCurrentReferral(populatePrimaryReferral());	//WDEV-11655
				if(voEpisodeOfCare.getLinkedReferralsIsNotNull() && voEpisodeOfCare.getLinkedReferrals().size()>0
						&& voEpisodeOfCare.getCurrentReferral()==null){			//WDEV-11655
					engine.showMessage("1 of the linked referrals must be marked as Primary.");
					return null;					
				}
			}
			if(primaryReferralNotLinked()){
				engine.showMessage("Referrals marked as Primary must be linked to episode.");
				return null;	
			}
		}
		
		return voCareSpell;
	}
	private boolean primaryReferralNotLinked() {
		for(int i=0;i<form.grdReferrals().getRows().size();i++)
		{
			if(form.grdReferrals().getRows().get(i).getColPrimary() && !form.grdReferrals().getRows().get(i).getColLink()){
				return true;
			}
		}
		
		return false;
	}
	private ReferralRefVo populatePrimaryReferral() {
		ReferralRefVo primaryReferral = new ReferralRefVo(); 
		for(int i=0;i<form.grdReferrals().getRows().size();i++)
		{
			if(form.grdReferrals().getRows().get(i).getColPrimary() && form.grdReferrals().getRows().get(i).getColLink()){
				primaryReferral = form.grdReferrals().getRows().get(i).getValue();
				return primaryReferral;
			}
		}
		
		return null;
	}
	private ReferralRefVoCollection populateLinkedReferralsHistory(ReferralRefVoCollection linkedReferralsHistory) {
		if(linkedReferralsHistory==null)
			linkedReferralsHistory = new ReferralRefVoCollection(); 
		for(int i=0;i<form.grdReferrals().getRows().size();i++)
		{
			if(form.grdReferrals().getRows().get(i).getColLink())
				if(linkedReferralsHistory.size()==0 || notAlreadyInHistory(linkedReferralsHistory, form.grdReferrals().getRows().get(i).getValue()))
					linkedReferralsHistory.add(form.grdReferrals().getRows().get(i).getValue());
		}
		return linkedReferralsHistory;
	}
	private boolean notAlreadyInHistory(ReferralRefVoCollection linkedReferralsHistory, ReferralLiteVo voReferral) {
		for(int i=0;i<linkedReferralsHistory.size();i++)
		{
			if(!linkedReferralsHistory.get(i).equals(voReferral))
				return true;
		}
		return false;
	}
	private ReferralRefVoCollection populateLinkedReferrals() {
		ReferralRefVoCollection collReferralRefVo = new ReferralRefVoCollection(); 
		for(int i=0;i<form.grdReferrals().getRows().size();i++)
		{
			if(form.grdReferrals().getRows().get(i).getColLink())
				collReferralRefVo.add(form.grdReferrals().getRows().get(i).getValue());
		}
		return collReferralRefVo;
	}
	private int linkedReferrals() {
		int linkedReferrals = 0;
		for(int i=0;i<form.grdReferrals().getRows().size();i++)
		{
			if(form.grdReferrals().getRows().get(i).getColLink())
				linkedReferrals++;
		}
		return linkedReferrals;
	}
	private ClinicalContactShortVo populateClinicalContact(CareContextVo voCareContext)
	{
		if(voCareContext == null)
		{
			engine.showMessage("Please enter Care Context information");
			return null;
		}	
		
		ClinicalContactShortVo voClinContactShort = null;
		if(form.getGlobalContext().Clinical.PatientSummary.getClinicalContactIsNotNull())
		{
			for(int i=0;i<voCareContext.getClinicalContacts().size();i++)
			{
				if(voCareContext.getClinicalContacts().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getClinicalContact()))
				{
					voClinContactShort = voCareContext.getClinicalContacts().get(i);
					populateClinicalContactInstanceData(voClinContactShort);
					break;
				}
			}
		}
		else
		{
			voClinContactShort = new ClinicalContactShortVo();
			populateClinicalContactInstanceData(voClinContactShort);
			voClinContactShort.setCareContext(voCareContext);
			if(voCareContext.getClinicalContacts() == null)
				voCareContext.setClinicalContacts(new ClinicalContactShortVoCollection());
			 
			//remove unsaved items before adding
			for(int i=voCareContext.getClinicalContacts().size(); i>0;i--)
			{
				if(voCareContext.getClinicalContacts().get(i-1).getID_ClinicalContact() == null)
					voCareContext.getClinicalContacts().remove(voCareContext.getClinicalContacts().get(i-1));
			}
			voCareContext.getClinicalContacts().add(voClinContactShort);
		}	
		
		return voClinContactShort;
	}
	
	private void populateClinicalContactInstanceData(ClinicalContactShortVo voClinContactShortVo)
	{
		voClinContactShortVo.setContactType(form.cmbConContactType().getValue());
		voClinContactShortVo.setEndDateTime(form.dtimConEnd().getValue());
		voClinContactShortVo.setStartDateTime(form.dtimConStart().getValue());
		voClinContactShortVo.setSeenBy(form.qmbConSeenBy().getValue());
		voClinContactShortVo.setSpecialty(form.cmbConSpecialty().getValue());
	}
	
	private CareContextVo populateCareContext(EpisodeofCareVo voEpisodeOfCare)
	{
		if(voEpisodeOfCare == null)
		{
			engine.showMessage("Please enter Episode of Care information");
			return null;
		}	
		CareContextVo voCareContext = null;
		if(form.getGlobalContext().Clinical.PatientSummary.getCareContextIsNotNull())
		{
			for(int i=0;i<voEpisodeOfCare.getCareContexts().size();i++)
			{
				if(voEpisodeOfCare.getCareContexts().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getCareContext()))
				{
					voCareContext = voEpisodeOfCare.getCareContexts().get(i);
					populateCareContextInstanceData(voCareContext);
					break;
				}
			}
		}
		else
		{
			voCareContext = new CareContextVo();
			populateCareContextInstanceData(voCareContext);
			voCareContext.setEpisodeOfCare(voEpisodeOfCare);
			if(voEpisodeOfCare.getCareContexts() == null)
				voEpisodeOfCare.setCareContexts(new CareContextVoCollection());
			
			//remove unsaved items before adding
			for(int i=voEpisodeOfCare.getCareContexts().size(); i>0; i--)
			{
				if(voEpisodeOfCare.getCareContexts().get(i-1).getID_CareContext() == null)
					voEpisodeOfCare.getCareContexts().remove(voEpisodeOfCare.getCareContexts().get(i-1));
			}
			voEpisodeOfCare.getCareContexts().add(voCareContext);
		}	
		
		return voCareContext;
	}
	
	private CareContextVo populateCareContextInstanceData(CareContextVo voCareContext)
	{
		if(voCareContext == null)
		{
			voCareContext = new CareContextVo();
			
			//WDEV-10231
			voCareContext.setCurrentStatus(new CareContextStatusHistoryVo());
			voCareContext.getCurrentStatus().setStatus(CareContextStatus.OPEN);
		}	
		
		
		voCareContext.setContext(form.cmbCtxContextType().getValue());
		voCareContext.setStartDateTime(form.dtimCtxStart().getValue());
		voCareContext.setEndDateTime(form.dtimCtxEnd().getValue());
		voCareContext.setLocationType(form.cmbCtxLocationType().getValue());	
		if(form.grdCtxPasEpisodes().getValue() != null)
			voCareContext.setPasEvent((PasEventVo)form.grdCtxPasEpisodes().getValue());
		
		if(ConfigFlag.UI.DISPLAY_BED_NUMBER_FOR_CARECONTEXT.getValue())
			voCareContext.setBedNumber(form.txtBedNumber().getValue());
		
		return voCareContext;
	}
	
	private EpisodeofCareVo populateEpisodeOfCare(CareSpellVo voCareSpell)
	{
		if(voCareSpell == null)
		{
			engine.showMessage("Please enter Care Spell information");
			return null;
		}
		
		EpisodeofCareVo voEpisodeOfCare = null;
		if(form.getGlobalContext().Clinical.PatientSummary.getEpisodeOfCareIsNotNull())
		{
			for(int i=0;i<voCareSpell.getEpisodes().size();i++)
			{
				if(voCareSpell.getEpisodes().get(i).equals(form.getGlobalContext().Clinical.PatientSummary.getEpisodeOfCare()))
				{
					voEpisodeOfCare = voCareSpell.getEpisodes().get(i);
					populateEpisodeOfCareInstanceData(voEpisodeOfCare);
					break;
				}
			}
		}
		else
		{
			voEpisodeOfCare = new EpisodeofCareVo();
			populateEpisodeOfCareInstanceData(voEpisodeOfCare);
			voEpisodeOfCare.setCareSpell(voCareSpell);
			if(voCareSpell.getEpisodes() == null)
				voCareSpell.setEpisodes(new  EpisodeofCareVoCollection());
			//remove unsaved items before adding
			for(int i=voCareSpell.getEpisodes().size(); i>0; i--)
			{
				if(voCareSpell.getEpisodes().get(i-1).getID_EpisodeOfCare() == null)
					voCareSpell.getEpisodes().remove(voCareSpell.getEpisodes().get(i-1));
			}
			voCareSpell.getEpisodes().add(voEpisodeOfCare);
		}	
		
		return voEpisodeOfCare;
	}
	
	private void populateEpisodeOfCareInstanceData(EpisodeofCareVo voEpisodeOfCare)
	{
		if(voEpisodeOfCare == null)
			voEpisodeOfCare = new EpisodeofCareVo();
		
		//wdev-13896
		if(voEpisodeOfCare.getID_EpisodeOfCareIsNotNull())
		{
			
			boolean fieldsSpecialtyAreEqual = false;
			boolean fieldsResponsibleHCPAreEqual = false;
				
			if(voEpisodeOfCare.getSpecialtyIsNotNull() && form.cmbEcSpecialty().getValue() != null && voEpisodeOfCare.getSpecialty().equals(form.cmbEcSpecialty().getValue()))
			{
				fieldsSpecialtyAreEqual = true;
			}
			else if(voEpisodeOfCare.getSpecialty() == null && form.cmbEcSpecialty().getValue() == null)
			{
				fieldsSpecialtyAreEqual = true;
			}
			if(voEpisodeOfCare.getResponsibleHCPIsNotNull() && form.qmbEcRespHcp().getValue() != null && form.qmbEcRespHcp().getValue().equals(voEpisodeOfCare.getResponsibleHCP()))
			{
				fieldsResponsibleHCPAreEqual = true;
			}
			else if(voEpisodeOfCare.getResponsibleHCP() == null && form.qmbEcRespHcp().getValue() == null)
			{
				fieldsResponsibleHCPAreEqual = true;
			}
			
			if( (fieldsSpecialtyAreEqual == false || fieldsResponsibleHCPAreEqual == false ) && form.cmbEcSpecialty().getValue() != null )
			{
				EpisodeOfCareHistoryVo voEpisodeHist = new EpisodeOfCareHistoryVo();
				voEpisodeHist.setEndDate(voEpisodeOfCare.getEndDate());
				voEpisodeHist.setRelationship(voEpisodeOfCare.getRelationship());
				voEpisodeHist.setSpecialty(voEpisodeOfCare.getSpecialty());
				voEpisodeHist.setStartDate(voEpisodeOfCare.getStartDate());
				voEpisodeHist.setResponsibleHCP(voEpisodeOfCare.getResponsibleHCP());
				EpisodeOfCareHistoryVoCollection voCollHist = voEpisodeOfCare.getEpisodeOfCareHistory();
				if(voCollHist == null)
					voCollHist = new EpisodeOfCareHistoryVoCollection();
				
				voCollHist.add(voEpisodeHist);
				voEpisodeOfCare.setEpisodeOfCareHistory(voCollHist);
				
			}
		}
		//-----------
		
		
		voEpisodeOfCare.setRelationship(form.cmbEcRelationship().getValue());
		voEpisodeOfCare.setSpecialty(form.cmbEcSpecialty().getValue());
		voEpisodeOfCare.setResponsibleHCP(form.qmbEcRespHcp().getValue());
		voEpisodeOfCare.setStartDate(form.dteEcStart().getValue());
		voEpisodeOfCare.setEndDate(form.dteEcEnd().getValue());
		
	}
	
	private CareSpellVo populateCareSpellInstanceData(CareSpellVo voCareSpell)
	{
		if(voCareSpell == null)
			voCareSpell = new CareSpellVo();
		
		voCareSpell.setStartDate(form.dteCsStart().getValue());
		voCareSpell.setEndDate(form.dteCsEnd().getValue());
		voCareSpell.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		return voCareSpell;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onQmbEcRespHcpTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		searchHcp(value, form.qmbEcRespHcp());
	}
	
	protected void onCmbCtxContextTypeValueChanged() throws PresentationLogicException
	{		
		cmbCtxContextTypeValueChanged();
	}
	private void cmbCtxContextTypeValueChanged()
	{
		loadContactsComboWithoutSpecificItems(isRemoveSpinalMedicalAdmissionContatType(), isRemoveInpatientContactType(), isRemoveOutPatientContactType());
		setRadioButtonState();
		listPasEvents();
	}
	
	private void setRadioButtonState()
	{
		ContextType type = form.cmbCtxContextType().getValue();
		if(type == null || type.equals(ContextType.OUTPATIENT))
			form.GroupInpatientStatus().setVisible(false);
		else if(type.equals(ContextType.INPATIENT))
		{
			form.GroupInpatientStatus().setVisible(true);
			if(form.dtimCtxEnd().getValue() != null)
				form.GroupInpatientStatus().setValue(GroupInpatientStatusEnumeration.rdoDischarged);
		}
	}
	
	private void listPasEvents()
	{
		form.grdCtxPasEpisodes().getRows().clear();
		
		ContextType type = form.cmbCtxContextType().getValue();
		if(type == null)
			return;
		
		Boolean isCurrent = null;
		
		if(type.equals(ContextType.INPATIENT))
			isCurrent = new Boolean(form.GroupInpatientStatus().getValue().equals(GenForm.GroupInpatientStatusEnumeration.rdoCurrent));
		
		PasEventVoCollection voCollPasEvents = null;
		InpatientEpisodeVoCollection voCollInpatEpis = null;
		
		if (ConfigFlag.UI.RETRIEVE_PAS_EPISODES_VIA_DTO.getValue() == false)
		{
			voCollPasEvents = domain.listPasEventsByTypeAndPatient(type, form.getGlobalContext().Core.getPatientShort(), isCurrent);
			populatePasEventGridFromData(voCollPasEvents);
		}
		else
		{
			voCollInpatEpis = domain.listInpatientEpisodes(form.getGlobalContext().Core.getPatientShort());
			populatePasEventGridFromData(voCollInpatEpis);
		}	
		automaticallySelectPasEventLinkedToCareContext();
	}
	
	private void automaticallySelectPasEventLinkedToCareContext()
	{
		if(form.getLocalContext().getCareContextIsNotNull() && form.getLocalContext().getCareContext().getPasEventIsNotNull())
			form.grdCtxPasEpisodes().setValue(form.getLocalContext().getCareContext().getPasEvent());
	}
	
	private void populatePasEventGridFromData(PasEventVoCollection voCollPasEvents)
	{
		if(voCollPasEvents == null)
			return;
		
		for(int i=0;i<voCollPasEvents.size();i++)
		{
			GenForm.grdCtxPasEpisodesRow row = form.grdCtxPasEpisodes().getRows().newRow();
			if(ConfigFlag.UI.SHOW_ATTENDING_HCP.getValue()&&voCollPasEvents.get(i).getAttendingHCPIsNotNull()) //WDEV-15907
				row.setColConsultant(voCollPasEvents.get(i).getAttendingHCP().toString());
			else if(voCollPasEvents.get(i).getConsultantIsNotNull())
				row.setColConsultant(voCollPasEvents.get(i).getConsultant().toString());
			if(voCollPasEvents.get(i).getEventDateTimeIsNotNull())
				row.setColEventDT(voCollPasEvents.get(i).getEventDateTime().toString());
			row.setValue(voCollPasEvents.get(i));
		}
	}
	
	private void populatePasEventGridFromData(InpatientEpisodeVoCollection voCollInpatEpis)
	{
		if(voCollInpatEpis == null)
			return;
		
		for(int i=0;i<voCollInpatEpis.size();i++)
		{
			GenForm.grdCtxPasEpisodesRow row = form.grdCtxPasEpisodes().getRows().newRow();
			if(voCollInpatEpis.get(i).getPasEventIsNotNull())
			{
				if (voCollInpatEpis.get(i).getPasEvent().getConsultantIsNotNull())
					row.setColConsultant(voCollInpatEpis.get(i).getPasEvent().getConsultant().toString());
				
				if (voCollInpatEpis.get(i).getPasEvent().getEventDateTimeIsNotNull())
					row.setColEventDT(voCollInpatEpis.get(i).getPasEvent().getEventDateTime().toString());
			}
				
			row.setValue(voCollInpatEpis.get(i).getPasEvent());
		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.OkDialog))
		{
			engine.close(DialogResult.CANCEL);
		}
	}

	protected void onDteEcEndValueChanged() throws PresentationLogicException
	{
		setControlStateForEndedItems();
	}

	protected void onDtimCtxEndValueChanged() throws PresentationLogicException
	{
		setControlStateForEndedItems();
	}
	
	protected void onQmbConSeenByValueChanged() throws PresentationLogicException
	{
		setDefaultSpecialtyOnNew(form.qmbConSeenBy());
	}
	
	protected void onQmbEcRespHcpValueChanged() throws PresentationLogicException
	{
		setDefaultSpecialtyOnNew(form.qmbEcRespHcp());
	}
	@Override
	protected void onRadioButtonGroupInpatientStatusValueChanged() throws PresentationLogicException 
	{
		listPasEvents();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException {
		switch(menuItemID)
		{
			case GenForm.ContextMenus.CoreNamespace.Referrals.UnlinkReferral:
				form.grdReferrals().getSelectedRow().setColLink(false);
				form.grdReferrals().getSelectedRow().setColLinkReadOnly(false);
				form.grdReferrals().getSelectedRow().setColPrimaryReadOnly(false);
				form.grdReferrals().getSelectedRow().setColPrimary(false);
				break;
		}
		
		updateControlsState();//WDEV-15290
	}
	
	//WDEV-15290
	private void updateControlsState() 
	{
		if(engine.hasRight(AppRight.CAN_UNLINK_REFERRAL_FROM_EPISODE) && form.grdReferrals().getSelectedRow() != null && form.grdReferrals().getSelectedRow().getColLink())
		{
			ReferralLiteVoCollection linkedReferrals = form.getLocalContext().getLinkedReferrals();
			ReferralLiteVo voReferralLite = form.grdReferrals().getSelectedRow().getValue();
			boolean alreadyLinked = alreadyLinked(linkedReferrals, voReferralLite);
			form.getContextMenus().Core.getReferralsUnlinkReferralItem().setVisible(alreadyLinked);
			form.getContextMenus().Core.getReferralsUnlinkReferralItem().setEnabled(alreadyLinked);
		}
		else
			form.getContextMenus().Core.getReferralsUnlinkReferralItem().setVisible(false);
	}
	
	@Override
	protected void onGrdReferralsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();//WDEV-15290
	}
	
	private boolean alreadyLinked(ReferralLiteVoCollection linkedReferrals, ReferralLiteVo voReferralLite) 
	{
		if(voReferralLite == null)
			return false;
		
		if(linkedReferrals!=null)
		{
			for(int i=0;i<linkedReferrals.size();i++)
			{
				if(linkedReferrals.get(i).equals(voReferralLite))
					return true;			
			}
		}
		
		return false;
	}
	@Override
	protected void onGrdReferralsGridCheckBoxClicked(int column, grdReferralsRow row, boolean isChecked) throws PresentationLogicException {
		if(column==3 && row.getColPrimary())
			for(int i=0;i<form.grdReferrals().getRows().size();i++)
			{
				grdReferralsRow otherRow = form.grdReferrals().getRows().get(i);
				if(!otherRow.getValue().equals(row.getValue()) && otherRow.getColPrimary())
						otherRow.setColPrimary(false);
			}
		if(column==4 && !row.getColLink())
			row.setColPrimary(false);
		else if(column==4 && row.getColLink() && form.grdReferrals().getRows().size()==1)
			row.setColPrimary(true);
		
	}
	
	
}
