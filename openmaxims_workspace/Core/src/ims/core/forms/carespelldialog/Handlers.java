//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.carespelldialog;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbConContactTypeLookup();
	abstract protected void defaultcmbConContactTypeLookupValue();
	abstract protected void bindcmbConSpecialtyLookup();
	abstract protected void defaultcmbConSpecialtyLookupValue();
	abstract protected void bindcmbCtxLocationTypeLookup();
	abstract protected void defaultcmbCtxLocationTypeLookupValue();
	abstract protected void bindcmbEcRelationshipLookup();
	abstract protected void defaultcmbEcRelationshipLookupValue();
	abstract protected void bindcmbEcSpecialtyLookup();
	abstract protected void defaultcmbEcSpecialtyLookupValue();
	abstract protected void bindcmbCtxContextTypeLookup();
	abstract protected void defaultcmbCtxContextTypeLookupValue();
	abstract protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdReferralsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdReferralsGridCheckBoxClicked(int column, GenForm.grdReferralsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onRadioButtonGroupInpatientStatusValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteEcEndValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbConContactTypeValueSet(Object value);
	abstract protected void onQmbConSeenByValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbConSeenByTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbConSpecialtyValueSet(Object value);
	abstract protected void oncmbCtxLocationTypeValueSet(Object value);
	abstract protected void oncmbEcRelationshipValueSet(Object value);
	abstract protected void onDtimCtxEndValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbEcSpecialtyValueSet(Object value);
	abstract protected void oncmbCtxContextTypeValueSet(Object value);
	abstract protected void onCmbCtxContextTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbEcRespHcpValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbEcRespHcpTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.grdReferrals().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdReferralsSelectionChanged();
			}
		});
		this.form.grdReferrals().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdReferralsGridCheckBoxClicked(column, new GenForm.grdReferralsRow(row), isChecked);
			}
		});
		this.form.GroupInpatientStatus().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onRadioButtonGroupInpatientStatusValueChanged();
			}
		});
		this.form.dteEcEnd().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteEcEndValueChanged();
			}
		});
		this.form.cmbConContactType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbConContactTypeValueSet(value);
			}
		});
		this.form.qmbConSeenBy().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConSeenByValueChanged();
			}
		});
		this.form.qmbConSeenBy().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbConSeenByTextSubmited(value);
			}
		});
		this.form.cmbConSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbConSpecialtyValueSet(value);
			}
		});
		this.form.cmbCtxLocationType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCtxLocationTypeValueSet(value);
			}
		});
		this.form.cmbEcRelationship().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbEcRelationshipValueSet(value);
			}
		});
		this.form.dtimCtxEnd().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDtimCtxEndValueChanged();
			}
		});
		this.form.cmbEcSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbEcSpecialtyValueSet(value);
			}
		});
		this.form.cmbCtxContextType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbCtxContextTypeValueSet(value);
			}
		});
		this.form.cmbCtxContextType().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbCtxContextTypeValueChanged();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.qmbEcRespHcp().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbEcRespHcpValueChanged();
			}
		});
		this.form.qmbEcRespHcp().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbEcRespHcpTextSubmited(value);
			}
		});
		this.form.getContextMenus().Core.getReferralsUnlinkReferralItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.CoreNamespace.Referrals.UnlinkReferral, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbConSpecialtyLookup();
		bindcmbCtxLocationTypeLookup();
		bindcmbEcRelationshipLookup();
		bindcmbEcSpecialtyLookup();
		bindcmbCtxContextTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbConContactTypeLookup();
		bindcmbConSpecialtyLookup();
		bindcmbCtxLocationTypeLookup();
		bindcmbEcRelationshipLookup();
		bindcmbEcSpecialtyLookup();
		bindcmbCtxContextTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbConContactTypeLookupValue();
		defaultcmbConSpecialtyLookupValue();
		defaultcmbCtxLocationTypeLookupValue();
		defaultcmbEcRelationshipLookupValue();
		defaultcmbEcSpecialtyLookupValue();
		defaultcmbCtxContextTypeLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
