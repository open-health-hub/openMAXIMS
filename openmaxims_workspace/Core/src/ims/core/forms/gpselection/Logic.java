//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 41210.1630)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.gpselection;

import ims.admin.vo.GPSearchCriteriaVo;
import ims.admin.vo.enums.GPAction;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.GP;
import ims.core.vo.GPLiteWithPracticesVo;
import ims.core.vo.GpLiteVo;
import ims.core.vo.GpPracticeLiteVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteShortVoCollection;
import ims.core.vo.OrgLiteVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.lookups.TaxonomyType;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		initialize();
	}

	private void initialize()
	{
		form.btnOK().setEnabled(false);
		form.customControlGPSearch().setSearchButtonAsDefault();

		if (form.getGlobalContext().OCRR.getGPSearchStringIsNotNull() && form.getGlobalContext().OCRR.getGPSearchString().length() > 0)
		{
			GPSearchCriteriaVo criteria = new GPSearchCriteriaVo();
			criteria.setSurname(form.getGlobalContext().OCRR.getGPSearchString());
			form.customControlGPSearch().setSearchCriteria(criteria);
			form.customControlGPSearch().search();
		}
	}

	// catch events coming from the gp search custom control
	protected void onCustomControlGPSearchValueChanged() throws PresentationLogicException
	{
		GPAction action = form.customControlGPSearch().getActionEvent();

		if (action != null)
		{
			if (action.equals(GPAction.SELECT))
			{
				getAndListDetails(form.customControlGPSearch().getValue());
				if(isGPSelectionOnly())
				{
					form.btnOK().setEnabled(true);
				}	
			}
			else if (action.equals(GPAction.CLEAR))
			{
				clear();
			}
			else if (action.equals(GPAction.SEARCH))
			{
				clear();
			}
		}
	}
	private boolean isGPSelectionOnly()
	{
		if(engine.getFormName().equals(form.getForms().Core.GpSelectionOnly))
			return true;
		return false;
	}
	private void clear()
	{
		form.trePracticesSurgeries().clear();
		form.btnOK().setEnabled(false);
	}

	private void getAndListDetails(GpLiteVo gpLite)
	{
		//populate a minimal vo from the database
		GPLiteWithPracticesVo voGp = domain.listGPS(gpLite);
		populateGPPracticeParents(voGp);
	}
	
	private void populateGPPracticeParents(GPLiteWithPracticesVo voGp)
	{
		clear();
		String gMCCode=null;
		
		if (voGp != null)
		{
			if(voGp.getCodeMappingsIsNotNull())
			{
				gMCCode=voGp.getCodeMappings().getMappingValue(TaxonomyType.NAT_GP_CODE);
			}
			if (voGp.getPractices() == null || voGp.getPractices().size() <= 0)
			{
				engine.showMessage("The GP has no associated practices.");
				return;
			}

			// populate the gp's practices on the tree
			for (int j = 0; j < voGp.getPractices().size(); j++)
			{
				GpPracticeLiteVo practice = voGp.getPractices().get(j).getPractice();
				
				if (practice != null && practice.getIsActiveIsNotNull() && practice.getIsActive().equals(Boolean.TRUE))
				{
					TreeNode node = form.trePracticesSurgeries().getNodes().add(practice, practice.getName() + displayPracticeAddress(practice.getAddress()), j + 1);
					
					if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue()) // only list surgeries if config flag allows
					{
						node.setEnabled(false);
						populateSurgeryChildren(practice, node,gMCCode);
					}
					else
					{
						node.setEnabled(true);
					}
					
				}
			}
			form.trePracticesSurgeries().collapseAll();
		}
	}
	
	private String displayPracticeAddress(PersonAddress address) 
	{
		if(address == null)
			return "";
		
		String practiceAddress = "";
		
		if(address.getLine1IsNotNull() && address.getLine1().length() > 0)
		{
			practiceAddress += " - " + address.getLine1();
		}
		if(address.getLine2IsNotNull() && address.getLine2().length() > 0)
		{
			if(practiceAddress.length() > 0)
			{
				practiceAddress += " " + address.getLine2();
			}
			else
			{
				practiceAddress += " - " + address.getLine2();
			}
		}
		if(address.getLine3IsNotNull() && address.getLine3().length() > 0)
		{
			if(practiceAddress.length() > 0)
			{
				practiceAddress += " " + address.getLine3();
			}
			else
			{
				practiceAddress += " - " + address.getLine3();
			}
		}
		if(address.getLine4IsNotNull() && address.getLine4().length() > 0)
		{
			if(practiceAddress.length() > 0)
			{
				practiceAddress += " " + address.getLine4();
			}
			else
			{
				practiceAddress += " - " + address.getLine4();
			}
		}
		if(address.getLine5IsNotNull() && address.getLine5().length() > 0)
		{
			if(practiceAddress.length() > 0)
			{
				practiceAddress += " " + address.getLine5();
			}
			else
			{
				practiceAddress += " - " + address.getLine5();
			}
		}
		if(address.getCountyIsNotNull() && address.getCounty().getText() != null && address.getCounty().getText().length() > 0)
		{
			if(practiceAddress.length() > 0)
			{
				practiceAddress += ", " + address.getCounty().getText();
			}
			else
			{
				practiceAddress += " - " + address.getCounty().getText();
			}
		}
		
		return practiceAddress;
	}

	private void populateSurgeryChildren(GpPracticeLiteVo practice, TreeNode node,String gMCCode)
	{
		//http://jira/browse/WDEV-13537
		LocSiteShortVoCollection heartsSurgeries=getHeartsSurgery(practice.getSurgeries(), gMCCode);
		if (heartsSurgeries!=null&&heartsSurgeries.size()>0)
		{
			for (LocSiteShortVo heartsSurgery : heartsSurgeries)
			{
				TreeNode newNode = node.getNodes().add(heartsSurgery, heartsSurgery.getName());
				newNode.setEnabled(true);
			}
		}
		else
		{
			LocSiteShortVo surgery = null;
			int index;
	
			for (int i = 0; i < practice.getSurgeries().size(); i++)
			{
				index = form.trePracticesSurgeries().getNodes().size() + 1;			
				surgery =  practice.getSurgeries().get(i);
				
				if (surgery.getIsActiveIsNotNull() && surgery.getIsActive().equals(Boolean.TRUE))
				{
					TreeNode newNode = node.getNodes().add(surgery, surgery.getName(), index);
					newNode.setEnabled(true);
				}
			}
		}
	}
	
	//http://jira/browse/WDEV-13537
	//returns the surgery to display 
	private LocSiteShortVoCollection getHeartsSurgery(LocSiteShortVoCollection surgeries,String gMCCode)
	{
		if(ConfigFlag.HL7.HEARTS_GP_MODEL.getValue()&&surgeries!=null)
		{
			LocSiteShortVoCollection surgeriesForGp = new LocSiteShortVoCollection();
			for (LocSiteShortVo surgery : surgeries)
			{
				if(surgery.getIsActiveIsNotNull() && 
						surgery.getIsActive().equals(Boolean.TRUE)&&
						surgery.getPasCode()!=null&&
						gMCCode!=null&&
						gMCCode.trim()!=null&&
						surgery.getPasCode().toUpperCase().matches("\\S+_"+gMCCode.trim().toUpperCase()+"_\\S+")) //http://jira/browse/WDEV-15535 changed filter from PAS to GMC 
				{
					surgeriesForGp.add(surgery);
				}
			}
			return surgeriesForGp;
		}
		return null;
	}
	
	protected void onTrePracticesSurgeriesTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		if (node == null)
			return;
		
		//allow the user to close the screen and save if a surgery is selected		
		if ( form.trePracticesSurgeries().getSelectedNode().isEnabled() )
		{
			form.btnOK().setEnabled(true);
		}
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		GP gridGP = form.customControlGPSearch().getFullGpVo(); // - this is unnecessarily large. 
		
		if(!isGPSelectionOnly())
		{
			LocSiteShortVo treSurgery = new LocSiteShortVo();
			
			if (ConfigFlag.DOM.GP_USE_SURGERIES.getValue())
			{
				treSurgery = (LocSiteShortVo) form.trePracticesSurgeries().getSelectedNode().getValue();
			}
			else // if not using surgeries, set the global context to be the first child surgery of the selected practice
			{
				GpPracticeLiteVo practice = (GpPracticeLiteVo) form.trePracticesSurgeries().getSelectedNode().getValue();
				if (practice.getSurgeriesIsNotNull() 
					&& practice.getSurgeries().size() > 0
					&& practice.getSurgeries().get(0) != null)
				{
					treSurgery = practice.getSurgeries().get(0);
				}
				
				form.getGlobalContext().Core.setGPPractice((OrgLiteVo) form.trePracticesSurgeries().getSelectedNode().getValue()); //WDEV-16051
			}
			
			form.getGlobalContext().Core.setGPSurgery(treSurgery);
		}
		form.getGlobalContext().Core.setGPDetails(gridGP);

		engine.close(DialogResult.OK);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
