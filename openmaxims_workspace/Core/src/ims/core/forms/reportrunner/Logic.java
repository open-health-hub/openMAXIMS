//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2543.28531)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.reportrunner;

import ims.admin.vo.ReportListVo;
import ims.admin.vo.ReportListVoCollection;
import ims.admin.vo.ReportSeedParsedVo;
import ims.admin.vo.ReportSeedParsedVoCollection;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportsCategoryListVo;
import ims.admin.vo.ReportsCategoryListVoCollection;
import ims.admin.vo.ReportsCategoryLiteVo;
import ims.admin.vo.ReportsCategoryLiteVoCollection;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.ReportBoRefVo;
import ims.core.helper.ReportSeedsHelper;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;
import org.dom4j.tree.DefaultElement;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;
public class Logic extends BaseLogic
{
	private static final Integer	INDEX_START			= new Integer(-1);
	private static final String		COLUMN_NAME			= "0";
	private static final String		COLUMN_DESCRIPTION	= "1";

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		
		form.htmDownload().setVisible(false);
	}

	protected void onBtnPreviewClick() throws PresentationLogicException
	{
		form.getLocalContext().setExportFormat(QueryBuilderClient.PDF);
		previewReport();
	}

	protected void onDyngrdReportsRowSelectionChanged(DynamicGridRow row)
	{
		enablePreviewButtons();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.ReportRunnerDialog) && result.equals(DialogResult.OK))
		{
			launchReport();
		}
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		searchReport();
	}
	
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.ctnFindReport().txtReport().setValue(null);
		form.ctnFindReport().txtTemplate().setValue(null);
		form.ctnFindReport().qmbCategory().setValue(null);
		form.ctnFindReport().qmbCategory().clear();
		
		form.dyngrdReports().getRows().clear();

		//clearBackgroundSelection(form.dyngrdReports().getRows());
		
		form.getLocalContext().setLastSearchString(null);
		form.getLocalContext().setLastSearchIndex(INDEX_START);
		form.getLocalContext().setFlatIndex(INDEX_START);
		
		enablePreviewButtons();
		
		form.htmDownload().setHTML("");
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
			{
				form.getLocalContext().setExportFormat(QueryBuilderClient.PDF);
				previewReport();
				break;
			}
				
		}
	}

	// -------- Private methods --------------------------------------------------

	private void initialize()
	{
		form.btnPreview().setImage(form.getImages().Core.PDFIcon);
		form.ctnFindReport().txtReport().setFocus();
		form.getContextMenus().getGenericGridAddItem().setIcon(form.getImages().Core.PDFIcon);
		form.getContextMenus().getGenericGridAddItem().setText("Preview");

		createDynamicGridColumns();
		enablePreviewButtons();
	}

	private void createDynamicGridColumns()
	{
		DynamicGridColumn columnName = form.dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(450);

		DynamicGridColumn columnDescription = form.dyngrdReports().getColumns().newColumn("Description", COLUMN_DESCRIPTION);
		columnDescription.setWidth(-1);
	}

	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdReports().getColumns().getByIdentifier(identifier);
	}

	private DynamicGridCell createCell(DynamicGridRow row, DynamicGridColumn column)
	{
		DynamicGridCell cell = row.getCells().get(column);
		if (cell == null)
		{
			cell = row.getCells().newCell(column, DynamicCellType.WRAPTEXT);
			cell.setReadOnly(true);
		}

		return cell;
	}
	
	private void previewReport()
	{
		getSelectedReport();
		
		ReportTemplateVo voReportTemplate = form.getLocalContext().getReportTemplateVo();
		if (voReportTemplate != null)
		{
			if (form.getGlobalContext().Admin.getReportSeedParsed() == null)
			{
				try
				{
					parseSeedsFromXML(voReportTemplate.getReport().getReportXml());
				}
				catch (DocumentException e)
				{
					engine.showMessage("Error deserializing Seeds: " + e.toString());
				}
			}

			engine.open(form.getForms().Core.ReportRunnerDialog);
		}
	}

	// ----------------------- Populate grid methods-------------------------
	private void populateReportsGrid()
	{
		ReportListVoCollection reportColl = domain.listReports();
		ReportsCategoryListVoCollection voReportsCategoryColl = domain.listCategories();

		populateCategoriesGrid(voReportsCategoryColl);
		populateReports(reportColl);
	}

	private void populateCategoriesGrid(ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		if (voReportsCategoryColl == null)
			return;

		addParentCategories(voReportsCategoryColl);
	}

	private void addParentCategories(ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		for (int i = 0; i < voReportsCategoryColl.size(); i++)
		{
			if(hasReports(voReportsCategoryColl.get(i)))
			{
				// Display the parent category - (when parent = null)
				if (voReportsCategoryColl.get(i).getParentCategory() == null)
					addCategory(null, voReportsCategoryColl.get(i));
				else
				{
					try
					{
						ReportsCategoryListVo rootCat = domain.getRootCategory(voReportsCategoryColl.get(i).getParentCategory());
						
						if(hasReports(rootCat))
							addCategory(null, rootCat);
					}
					catch (DomainInterfaceException e)
					{
						e.printStackTrace();
						engine.showMessage("Error getting root category for '" + voReportsCategoryColl.get(i).getName() + "' !\n" + e.toString());
					}
				}
			}
		}
	}

	private boolean hasReports(ReportsCategoryListVo reportsCategoryListVo)
	{
		if(reportsCategoryListVo.getReportsIsNotNull() && reportsCategoryListVo.getReports().size() > 0)
			return true;
		
		if(reportsCategoryListVo.getSubCategories() == null || reportsCategoryListVo.getSubCategories().size() == 0)
			return false;
		
		int count = reportsCategoryListVo.getSubCategories().size();
		for (int i = 0; i < count; i++)
		{
			if(hasReports(reportsCategoryListVo.getSubCategories().get(i)) == true)
				return true;
		}
		
		return false;
	}

	private void addCategory(DynamicGridRow rowParent, ReportsCategoryListVo voCategory)
	{
		if (voCategory == null)
			return;
		
		if(rowExists(voCategory))
			return;

		DynamicGridRow categoryRow = null;
		if (rowParent == null)
			categoryRow = form.dyngrdReports().getRows().newRow();
		else
			categoryRow = rowParent.getRows().newRow();

		categoryRow.setValue(voCategory);
		categoryRow.setSelectable(false);
		categoryRow.setCollapsedImage(form.getImages().Core.ReportCategory);
		categoryRow.setExpandedImage(form.getImages().Core.ReportCategory);

		DynamicGridCell cellName = createCell(categoryRow, getColumn(COLUMN_NAME));
		cellName.setValue(voCategory.getName());

		if (voCategory.getSubCategoriesIsNotNull() && voCategory.getSubCategories().size() > 0)
		{
			categoryRow.setExpanded(true);
			addSubcategories(categoryRow, voCategory.getSubCategories());
		}
	}

	private boolean rowExists(ReportsCategoryListVo voCategory)
	{
		if(voCategory == null || voCategory.getID_ReportsCategory() == null)
			return false;
		
		DynamicGridRowCollection rows = form.dyngrdReports().getRows();
		
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow dynamicGridRow = rows.get(i);
			Object value = dynamicGridRow.getValue();
			if (value instanceof ReportsCategoryListVo)
			{
				ReportsCategoryListVo voReportsCategory = (ReportsCategoryListVo) value;
				
				if( voCategory.getID_ReportsCategory().equals(voReportsCategory.getID_ReportsCategory()))
					return true;
			}
		}

		return false;
	}

	private void addSubcategories(DynamicGridRow rowParent, ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		for (int i = 0; i < voReportsCategoryColl.size(); i++)
		{
			if(hasReports(voReportsCategoryColl.get(i)))
				addCategory(rowParent, voReportsCategoryColl.get(i));
		}
	}

	private void populateReports(ReportListVoCollection reportColl)
	{
		if (reportColl == null)
			return;

		for (int i = 0; i < reportColl.size(); i++)
		{
			ReportListVo voReportList = reportColl.get(i);
			DynamicGridRow row = getReportRow(form.dyngrdReports().getRows(), voReportList);
			addReport(row, voReportList);
		}
	}

	private DynamicGridRow getReportRow(DynamicGridRowCollection parentRows, ReportListVo voReportList)
	{
		if (parentRows == null)
			return null;

		for (int i = 0; i < parentRows.size(); i++)
		{
			DynamicGridRow dynamicGridRow = parentRows.get(i);
			Object value = dynamicGridRow.getValue();
			if (value instanceof ReportsCategoryListVo)
			{
				ReportsCategoryListVo voReportsCategory = (ReportsCategoryListVo) value;
				if (voReportsCategory.getReports().indexOf(voReportList) >= 0)
				{
					return dynamicGridRow;
				}
			}

			if (dynamicGridRow.getRows() != null && dynamicGridRow.getRows().size() > 0)
			{
				DynamicGridRow row = getReportRow(dynamicGridRow.getRows(), voReportList);
				if (row != null)
					return row;
			}
		}

		return null;
	}

	private void addReport(DynamicGridRow rowParent, ReportListVo voReportList)
	{
		DynamicGridRow reportRow = null;
		if (rowParent == null)
			reportRow = form.dyngrdReports().getRows().newRow();
		else
			reportRow = rowParent.getRows().newRow();

		reportRow.setValue(voReportList);
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);

		DynamicGridCell cellName = createCell(reportRow, getColumn(COLUMN_NAME));
		cellName.setValue(voReportList.getReportName());

		DynamicGridCell cellDescription = createCell(reportRow, getColumn(COLUMN_DESCRIPTION));
		cellDescription.setValue(voReportList.getReportDescription());

		addTemplates(voReportList, reportRow);
	}

	private void addTemplates(ReportListVo voReportList, DynamicGridRow reportRow)
	{
		for (int i = 0; voReportList.getTemplatesIsNotNull() && i < voReportList.getTemplates().size(); i++)
		{
			if (Boolean.FALSE.equals(voReportList.getTemplates().get(i).getIsActive())) //WDEV-16693
				continue;
			
			ReportTemplateLiteVo reportTemplateLiteVo = voReportList.getTemplates().get(i);

			DynamicGridRow templateRow = reportRow.getRows().newRow();
			templateRow.setValue(reportTemplateLiteVo);
			templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
			templateRow.setExpandedImage(form.getImages().Core.TemplateReport);

			DynamicGridCell cellTemplateName = createCell(templateRow, getColumn(COLUMN_NAME));
			cellTemplateName.setValue(reportTemplateLiteVo.getName());

			DynamicGridCell cellTemplateDescription = createCell(templateRow, getColumn(COLUMN_DESCRIPTION));
			cellTemplateDescription.setValue(reportTemplateLiteVo.getDescription());
		}
	}

	// ----------------------- End Populate grid methods -----------------------

	private void enablePreviewButtons()
	{
		boolean enable = form.dyngrdReports().getValue() instanceof ReportTemplateLiteVo;
		form.btnPreview().setEnabled(enable);
		form.getContextMenus().getGenericGridAddItem().setVisible(enable);
		form.btnCSVPreview().setEnabled(enable);
	}

	private void getSelectedReport()
	{
		ReportBoRefVo prevReport = getReportRef(form.getLocalContext().getReportTemplateVo());

		if (form.dyngrdReports().getValue() instanceof ReportTemplateLiteVo)
		{
			form.getLocalContext().setReportTemplateVo(domain.getTemplate(((ReportTemplateLiteVo) form.dyngrdReports().getValue())));
		}

		ReportBoRefVo currentReport = getReportRef(form.getLocalContext().getReportTemplateVo());

		if (prevReport != null && prevReport.equals(currentReport) == false)
			form.getGlobalContext().Admin.setReportSeedParsed(null);
	}

	private ReportBoRefVo getReportRef(ReportTemplateVo reportTemplateVo)
	{
		if (reportTemplateVo == null)
			return null;

		return reportTemplateVo.getReport();
	}

	@SuppressWarnings({"rawtypes"})
	private void parseSeedsFromXML(String reportXML) throws DocumentException
	{
		String displayFields;
		String searchFields;
		
		Document document = DocumentHelper.parseText(reportXML);

		ReportSeedParsedVoCollection seeds = new ReportSeedParsedVoCollection();
		List list = document.selectNodes("//Project/Seeds/Seed");
		for (Iterator iter = list.iterator(); iter.hasNext();)
		{
			DefaultElement attribute = (DefaultElement) iter.next();

			ReportSeedParsedVo seed = new ReportSeedParsedVo();
			seed.setName(attribute.valueOf("Name"));
			seed.setType(attribute.valueOf("Type"));
			seed.setBOName(attribute.valueOf("BOName"));
			seed.setBOField(attribute.valueOf("BOField"));
			seed.setCanBeNull(new Boolean(attribute.valueOf("CanBeNull").equalsIgnoreCase("true")));
			
			//WDEV-12753
			Node node = attribute.selectSingleNode("Searchable");
			
			if(node != null)
			{
				seed.setSearchType(node.valueOf("@type"));
			
				// Split 'Search By' fields by comma
				searchFields = node.valueOf("@by");
				
				String[] sf = searchFields.split(",");
				for (int  i = 0; i < sf.length; i++)
				{
					if (sf[i] != null)
						sf[i] = sf[i].trim();
				}
				seed.setSearchBy(sf);
				
				
				displayFields = node.valueOf("@display");
				
				String[] df = displayFields.split(",");
				for (int i = 0; i < df.length; i++)
				{
					if(df[i] != null)
						df[i] = df[i].trim();
				}
				seed.setDisplayFields(df);
			}
			
			//System.out.println(java.util.Arrays.toString(df));
			
			seeds.add(seed);
		}

		form.getGlobalContext().Admin.setReportSeedParsed(seeds);
	}

	private void launchReport()
	{
		if (form.dyngrdReports().getValue() instanceof ReportTemplateLiteVo)
		{
			ReportTemplateVo template = domain.getTemplate((ReportTemplateLiteVo) form.dyngrdReports().getValue());

			String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
			String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

			QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

			ReportSeedParsedVoCollection voColl = form.getGlobalContext().Admin.getReportSeedParsed();
			for (int i = 0; voColl != null && i < voColl.size(); i++)
			{
				ReportSeedParsedVo voSeed = voColl.get(i);
				try
				{
					client.addSeed(new SeedValue(voSeed.getName(), getInstanceObject(voSeed), Class.forName(voSeed.getType())));
				}
				catch (ClassNotFoundException e)
				{
					engine.showMessage("Error building the report: " + e.toString());
				}
			}

			if(QueryBuilderClient.PDF.equals(form.getLocalContext().getExportFormat()))
			{
				String result = "";
				try
				{
					result = client.buildReportAsUrl(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, form.getLocalContext().getExportFormat(), "", 1);
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error building the report: " + e1.toString());
					return;
				}
	
				engine.openUrl(result);
			}
			else
			{
				byte[] result = null;
				try
				{
					result = client.buildReport(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, form.getLocalContext().getExportFormat(), "", 1);
				}
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error building the report: " + e1.toString());
					return;
				}

				SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
				String folderName = null;

				folderName = getDownloadFolder();
				
				Date now = new Date();
				String filePart = template.getName() + "_" + df.format(now) + ".csv";
				String fileName = folderName + filePart;
				String zipPart = template.getName() + "_" + df.format(now) + ".zip";
				String zipFileName = folderName + zipPart;

				FileOutputStream fos = null;
				try
				{
					fos = new FileOutputStream(fileName);
					fos.write(result);
					fos.flush();
					fos.close();
				}
				catch(Exception e)
				{
					System.out.println(e.toString());
					
					engine.showMessage(e.toString());
					return;
				}
				
				byte[] buf = new byte[1024];
				int len;
				
				File zipFile = new File(zipFileName);
				
				if(zipFile.exists() == false)
				{
					try
					{
						FileInputStream in = new FileInputStream(fileName); 
						ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
					    out.setLevel(Deflater.DEFAULT_COMPRESSION);
					    out.putNextEntry(new ZipEntry(filePart));
					    while ((len = in.read(buf)) > 0) 
					    { 
					    	out.write(buf, 0, len); 
					    } 
					    out.closeEntry();
					    out.close();
					    in.close();
					}
					catch (IllegalArgumentException iae)
					{
					      iae.printStackTrace();
					      engine.showMessage("Error creating zip file :" + iae.toString());
					}
					catch (FileNotFoundException fnfe)
					{
					      fnfe.printStackTrace();
					      engine.showMessage("Error creating zip file :" + fnfe.toString());
					}
					catch (IOException ioe)
					{
					      ioe.printStackTrace();
					      engine.showMessage("Error creating zip file :" + ioe.toString());
					}
				}
				
				form.htmDownload().setHTML("<b><a style=\"float: right\" href='" + engine.getRequestUrl() + "/download/" + zipPart + "'><font color='blue'>" + zipPart + "</font></a><span style=\"float: right\">Download file:  &nbsp;</span></b>");
				form.htmDownload().setEnabled(true);
				form.htmDownload().setVisible(true);
				
				
				//engine.showMessage("The report has been saved on the server at the following location: \r\n" + fileName);
			}
		}
	}

	private Object getInstanceObject(ReportSeedParsedVo voSeed)
	{
		ReportSeedsHelper reportSeeds = new ReportSeedsHelper(engine);
		return reportSeeds.getReportValue(voSeed);
	}

	private void searchReport()
	{
		//clearBackgroundSelection(form.dyngrdReports().getRows());
		
		form.dyngrdReports().getRows().clear();
		form.htmDownload().setHTML("");

		String reportName = form.ctnFindReport().txtReport().getValue();
		String templateName = form.ctnFindReport().txtTemplate().getValue();
		ReportsCategoryLiteVo cat = form.ctnFindReport().qmbCategory().getValue();
		
		if (reportName == null || reportName.length() == 0)
		{
			reportName = "%";
		}
		else
		{
			if(!reportName.startsWith("%"))
				reportName = "%" + reportName;
			if(!reportName.endsWith("%"))
				reportName = reportName + "%";
		}

		if (templateName == null || templateName.length() == 0)
		{
			templateName = "%";
		}
		else
		{
			if(!templateName.startsWith("%"))
				templateName = "%" + templateName;
			if(!templateName.endsWith("%"))
				templateName = templateName + "%";
		}

		ReportListVoCollection reportColl = domain.searchReports(reportName, templateName, cat);
		ReportsCategoryListVoCollection voReportsCategoryColl = domain.searchCategories(reportName, templateName, cat);

		populateCategoriesGrid(voReportsCategoryColl);
		populateReports(reportColl);
		
		if(form.dyngrdReports().getRows().size() == 1)
			form.dyngrdReports().getRows().get(0).setExpanded(true, true);
		
		enablePreviewButtons();
		
		if(reportColl == null || reportColl.size() == 0)
		{
			engine.showMessage("No results matching your search criteria were found !");
			return;
		}
	}

	private Integer findReport(String reportName)
	{
		if (reportName == null)
			return null;

		form.getLocalContext().setFlatIndex(INDEX_START);
		Integer reportIndex = getReportValue(reportName, form.dyngrdReports().getRows());
		return reportIndex;
	}

	private Integer getReportValue(String reportName, DynamicGridRowCollection rowColl)
	{
		if (reportName == null || rowColl == null)
			return null;

		for (int i = 0; rowColl != null && i < rowColl.size(); i++)
		{
			DynamicGridRow dynamicGridRow = rowColl.get(i);
			//Increment the flat index
			Integer lastIndex = form.getLocalContext().getFlatIndex();
			form.getLocalContext().setFlatIndex(new Integer(lastIndex.intValue() + 1));
		
			Integer index = getReport(reportName, dynamicGridRow);
			if (index != INDEX_START)
				return index;

			if (dynamicGridRow.getRows() != null && dynamicGridRow.getRows().size() > 0)
			{
				index = getReportValue(reportName, dynamicGridRow.getRows());
				if (index != INDEX_START)
					return index;
			}
		}

		return INDEX_START;
	}

	private Integer getReport(String reportName, DynamicGridRow dynamicGridRow)
	{
		if (reportName == null || dynamicGridRow == null)
			return null;

		if (dynamicGridRow.getValue() instanceof ReportListVo)
		{
			ReportListVo reportListVo = ((ReportListVo) dynamicGridRow.getValue());
			if (reportListVo.getReportName().toUpperCase().lastIndexOf(reportName.toUpperCase()) >= 0)
			{
				int initialIndex = form.getLocalContext().getLastSearchIndexIsNotNull() ? form.getLocalContext().getLastSearchIndex().intValue() : INDEX_START.intValue();
				Integer lastIndex = form.getLocalContext().getFlatIndex();
				if (lastIndex.equals(INDEX_START) == false && lastIndex != null && lastIndex.intValue() <= initialIndex)
					return INDEX_START;

				expandParents(dynamicGridRow);
				dynamicGridRow.setBackColor(Color.LightGray);
				return lastIndex;
			}
		}

		return INDEX_START;
	}

	private void expandParents(DynamicGridRow dynamicGridRow)
	{
		if (dynamicGridRow == null || dynamicGridRow.getParent() == null)
			return;

		dynamicGridRow.getParent().setExpanded(true);

		if (dynamicGridRow.getParent().getParent() != null)
			expandParents(dynamicGridRow.getParent());
	}

	private void clearBackgroundSelection(DynamicGridRowCollection coll)
	{
		if (coll == null)
			return;

		for (int i = 0; coll != null && i < coll.size(); i++)
		{
			coll.get(i).setBackColor(Color.Default);
			if (coll.get(i).getRows() != null && coll.get(i).getRows().size() > 0)
				clearBackgroundSelection(coll.get(i).getRows());
		}
	}

	@Override
	protected void onBtnCSVPreviewClick() throws PresentationLogicException
	{
		form.getLocalContext().setExportFormat(QueryBuilderClient.CSV);
		previewReport();
	}
	
	// -------- End Private Methods -------------------------------------------
	
	private String getOutputFolder() throws DomainInterfaceException 
	{
		if ( System.getProperty("catalina.home") == null)
		{
			throw new DomainInterfaceException("The JVM parameter 'catalina.home' was not found !");				
		}
		
		String folderName = System.getProperty("catalina.home") + "/TransactionExport/";				
		File folder = new File(folderName);
		
		if(folder.exists() == false)
		{
			boolean bSuccess = folder.mkdir();
			
			if(bSuccess == false)
				throw new DomainInterfaceException("I could not create the folder '" + folder.getAbsolutePath() + "' !");
		}
		
		return folderName;
	}
	
	private String getDownloadFolder()  
	{
		if ( EnvironmentConfig.getBaseUri() == null || EnvironmentConfig.getBaseUri().length() == 0)
		{
			return null;				
		}
		
		String folderName = EnvironmentConfig.getBaseUri() + "download/";				
		File folder = new File(folderName);
		
		if(folder.exists() == false)
		{
			boolean bSuccess = folder.mkdir();
			
			if(bSuccess == false)
			{
				System.out.println("I could not create the folder '" + folder.getAbsolutePath() + "' !");
				return null;
			}
		}
		
		return folderName;
	}

	@Override
	protected void onQmbCategoryTextSubmited(String value) throws PresentationLogicException
	{
		String cat = value;
		
		form.ctnFindReport().qmbCategory().clear();

		if(cat.length() > 48)
			cat = cat.substring(0, 48);
		
		if(!cat.startsWith("%"))
			cat = "%" + cat;
		if(!cat.endsWith("%"))
			cat = cat + "%";
		
		ReportsCategoryLiteVoCollection coll = domain.searchCategoryByName(cat);
		
		if(coll != null && coll.size() > 0)
		{
			for(ReportsCategoryLiteVo item : coll)
			{
				form.ctnFindReport().qmbCategory().newRow(item, item.getName());
			}
			
			if(coll.size() == 1)
				form.ctnFindReport().qmbCategory().setValue(coll.get(0));
			else
				form.ctnFindReport().qmbCategory().showOpened();
		}
	}
}
