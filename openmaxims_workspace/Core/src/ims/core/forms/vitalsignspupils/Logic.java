//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignspupils;

import ims.core.vo.VSPupils;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;
import ims.framework.utils.graphing.GraphingPupils;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException 
	{
		//WDEV-14429
		if(isVitalSignsPupilsForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoByDay); 
		form.btnUpdate().setEnabled(false);
		//form.btnPrint().setEnabled(false);
		
		if(form.getGlobalContext().Core.getVitalSign() != null  && form.getGlobalContext().Core.getVitalSign().getPupils() != null)
		{
			form.dteShowByDay().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			listPupils();	
		}
		else
		{
			try {
				onRadioButtongrpShowByValueChanged();
			} catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
		
		updatePrevNextButtons();
		dateIntervalStatus();//WDEV-13117
	}
	
	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			form.dteShowByDay().setEnabled(true);
			form.dteShowByDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		}
		else
		{
			form.dteShowByDay().setEnabled(false);
			form.dteShowByDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
		}	
		
		onBtnViewClick();			
	}

	protected void onBtnViewClick() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			if(form.dteShowByDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}

		clearFields();
		listPupils();			
	}
			
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(form.cmbReactionLeft().getValue() == null || form.cmbReactionRight().getValue()== null)
		{
			engine.showMessage("Please enter values for pupil reactions for both eyes");
			return;
		}
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();

		VSPupils voPupil = new VSPupils();

		voPupil.setPupilLeftReaction(form.cmbReactionLeft().getValue());
		voPupil.setPupilRightReaction(form.cmbReactionRight().getValue());
		voPupil.setPupilLeftSize(form.intSizeLeft().getValue());
		voPupil.setPupilRightSize(form.intSizeRight().getValue());

		voVitalSign.setPupils(voPupil);

		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try {
				domain.modifyPupils(voVitalSign);
			} catch (StaleObjectException e) {
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}

		form.getGlobalContext().Core.setVitalSign(voVitalSign);
		form.setMode(FormMode.VIEW);
		listPupils();
		dateIntervalStatus();
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{	
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);
		
		dateIntervalStatus();
		updatePrevNextButtons();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);	
		form.btnUpdate().setEnabled(false);	
		form.dteShowByDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		form.btnNext().setEnabled(false);
		form.btnPrev().setEnabled(false);
		//form.btnPrint().setEnabled(false);	
	}

	private void listPupils() 
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle = "Pupils";
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			voCollVitals = domain.listPupils(form.dteShowByDay().getValue(),form.getGlobalContext().Core.getCurrentCareContext()); 
			subTitle = "Pupils for " + form.dteShowByDay().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitals = domain.listPupils(form.dteFrom().getValue(),form.dteTo().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Pupils between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
		 
		form.lblPupils().setValue(subTitle);
		form.grhPupils().clearAllPoints();
		
		form.grhPupils().showYAxisValues();
		
		form.grhPupils().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());
		
		VitalSignsVo voVitalSign;
		GraphingPupils point;
		if(voCollVitals != null)
		{
			voCollVitals.sort(SortOrder.ASCENDING);
		
			int nIndex = voCollVitals.size() - 1;
		
			for(int i=0;i<voCollVitals.size();i++)
			{
				voVitalSign = voCollVitals.get(i);

				StringBuffer tempTooltip = new StringBuffer();
				if(voVitalSign.getPupilsIsNotNull())
				{
					if (voVitalSign.getPupils().getPupilLeftReactionIsNotNull())
					{
						tempTooltip.append("<b>Left Pupil Reaction: </b>" + voVitalSign.getPupils().getPupilLeftReaction().getText());
						tempTooltip.append("<br>");
					}
					
					if (voVitalSign.getPupils().getPupilRightReactionIsNotNull())
						tempTooltip.append("<b>Right Pupil Reaction: </b>" + voVitalSign.getPupils().getPupilRightReaction().getText());
				}

				point = new GraphingPupils(voVitalSign.getVitalsTakenDateTime(), 
						voVitalSign.getPupils().getPupilLeftSize(),
						voVitalSign.getPupils().getPupilLeftReactionIsNotNull() ? voVitalSign.getPupils().getPupilLeftReaction().getText() : "",
						voVitalSign.getPupils().getPupilRightSize(), 						 
						voVitalSign.getPupils().getPupilRightReactionIsNotNull() ? voVitalSign.getPupils().getPupilRightReaction().getText() : "",
						voVitalSign);
				form.grhPupils().addPoint(point);
			
				if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}

			form.getLocalContext().setPupils(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentPupils();
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setPupils(null);
			form.btnUpdate().setEnabled(false);
			//form.btnPrint().setEnabled(false);
		}
	}
	
	private void displayCurrentPupils()
	{
		VitalSignsVoCollection voPupils = form.getLocalContext().getPupils();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
	
		if(voPupils == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voPupils.size())
			return;

		form.getLocalContext().setvitalSign(voPupils.get(nIndex.intValue()));
		displayRecord(voPupils.get(nIndex.intValue()));
	
		updatePrevNextButtons();
	}
	
	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voPupils = form.getLocalContext().getPupils();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
	
		if(voPupils == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}
	
		if(nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if(nIndex.intValue() >= voPupils.size() - 1)
			form.btnNext().setEnabled(false);
	}
	
	protected void onImbRight8Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(8)); 	
	}

	protected void onImbLeft8Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(8)); 	
	}

	protected void onImbRight7Click() throws PresentationLogicException 
	{	 
		form.intSizeRight().setValue(new Integer(7)); 
	}

	protected void onImbLeft7Click() throws PresentationLogicException
	{
		form.intSizeLeft().setValue(new Integer(7));
	}

	protected void onImbRight6Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(6));  
	}

	protected void onImbLeft6Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(6));
	}

	protected void onImbRight5Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(5)); 
	}
	
	protected void onImbLeft5Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(5)); 
	}

	protected void onImbRight4Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(4)); 
	}

	protected void onImbLeft4Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(4)); 
	}

	protected void onImbRight3Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(3)); 
	}

	protected void onImbLeft3Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(3)); 	
	}

	protected void onImbRight2Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(2)); 
	}

	protected void onImbLeft2Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(2));
	}
	
	protected void onImbRight1Click() throws PresentationLogicException 
	{
		form.intSizeRight().setValue(new Integer(1)); 
	}

	protected void onImbLeft1Click() throws PresentationLogicException 
	{
		form.intSizeLeft().setValue(new Integer(1)); 
	}
	
	private void clearFields()
	{
		form.intSizeLeft().setValue(new Integer(0));
		form.intSizeRight().setValue(new Integer(0));
		form.cmbReactionLeft().setValue(null);
		form.cmbReactionRight().setValue(null);
		form.intSizeLeft().setValue(null);
		form.intSizeRight().setValue(null);
	}
	
	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();
		
		form.btnUpdate().setEnabled(true);
		//form.btnPrint().setEnabled(true);
			
		form.intSizeLeft().setValue(voVitalSign.getPupils().getPupilLeftSize());
		form.intSizeRight().setValue(voVitalSign.getPupils().getPupilRightSize());
		form.cmbReactionLeft().setValue(voVitalSign.getPupils().getPupilLeftReaction());
		form.cmbReactionRight().setValue(voVitalSign.getPupils().getPupilRightReaction());
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime().getTime());
		form.txtHCP().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
	}

	private void refresh()
	{
		clearFields();
		listPupils();
		form.setMode(FormMode.VIEW);
	}

	
	protected void onGrhPupilsPointClicked(GraphingPoint point) 
	{	
		if(point.getType() == GraphingPointType.PUPILS)
		{ 			
			GraphingPupils pointPupil= (GraphingPupils)point;
			form.getLocalContext().setvitalSign((VitalSignsVo)pointPupil.getTag());
			displayRecord((VitalSignsVo)pointPupil.getTag());
			form.btnUpdate().setEnabled(true);
			
			//update the Prev/Next buttons
		    VitalSignsVoCollection voPupils = form.getLocalContext().getPupils();
		    for(int i = 0; i < voPupils.size(); i++)
		    {
			    if(form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voPupils.get(i).getID_VitalSigns().intValue())
			    {
				    form.getLocalContext().setCurrentIndex(new Integer(i));
				    updatePrevNextButtons();
				    break;
			    }
		    }			
		}		
	}

	protected void onBtnNextClick() throws PresentationLogicException 
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentPupils();			
	}

	protected void onBtnPrevClick() throws PresentationLogicException 
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentPupils();		
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDay().setEnabled(GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}
	
	protected void onChkLegendValueChanged() throws PresentationLogicException
	{
		form.grhPupils().showLegend(form.chkDisplayLegend().getValue());
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsPupilsForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}

	//WDEV-14429
	private boolean isVitalSignsPupilsForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsPupilsForTriage))
			return true;
		
		return false;
	}
}
