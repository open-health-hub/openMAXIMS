//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.62 build 2971.25997)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.reportviewer;

import ims.admin.vo.ReportSeedParsedVo;
import ims.admin.vo.ReportSeedParsedVoCollection;
import ims.admin.vo.ReportSeedVo;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.helper.ReportSeedsHelper;
import ims.core.vo.GpShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.OrgShortVo;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.HcpDisType;
import ims.framework.IReportField;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.PartialDate;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;
import ims.vo.ValueObjectCollection;
import ims.vo.lookups.ClassHelper;

import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;
import org.dom4j.tree.DefaultElement;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	NAME_COLUMN			= "0";
	private static final String	VALUE_COLUMN		= "1";
	private static final String	MANDATORY_COLUMN	= "2";

	private static final String	INTEGER				= "java.lang.Integer";
	private static final String	BIG_INTEGER			= "java.math.BigInteger";
	private static final String	SHORT				= "java.lang.Short";
	private static final String	LONG				= "java.lang.Long";
	private static final String	BOOOLEAN			= "java.lang.Boolean";
	private static final String	STRING				= "java.lang.String";
	private static final String	BIG_DECIMAL			= "java.math.BigDecimal";
	private static final String	FLOAT				= "java.lang.Float";
	private static final String	DOUBLE				= "java.lang.Double";
	private static final String	UTIL_DATE			= "java.util.Date";
	private static final String	SQL_DATE			= "java.sql.Date";
	private static final String	SQL_TIME			= "java.sql.Time";
	
	@Override
	protected void onBtnPDFClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//check mandatory seeds
		for (int i = 0; i < form.ctnParams().dyngrdParams().getRows().size(); i++)
		{
			DynamicGridRow row = form.ctnParams().dyngrdParams().getRows().get(i);
			
			ReportSeedParsedVo seed = (ReportSeedParsedVo) row.getValue();
			
			if(seed.getCanBeNull().booleanValue() == false && row.getCells().get(getColumn(VALUE_COLUMN)).getValue() == null)
			{
				engine.showMessage("The seed '" + seed.getName() + "' is mandatory !");
				return;
			}
		}
		
		//build report
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		for (int i = 0; i < form.ctnParams().dyngrdParams().getRows().size(); i++)
		{
			DynamicGridRow row = form.ctnParams().dyngrdParams().getRows().get(i);
			ReportSeedParsedVo seed = (ReportSeedParsedVo) row.getValue();
			DynamicGridCell valueCell = row.getCells().get(getColumn(VALUE_COLUMN));
			
			seed = setSeedValue(valueCell, seed);
			
			try
			{
				Object value = row.getCells().get(getColumn(VALUE_COLUMN)).getValue();
				
				if(value instanceof ims.framework.utils.Date)
				{
					client.addSeed(new SeedValue(seed.getName(), ((ims.framework.utils.Date)value).getDate(), Class.forName(seed.getType())));					
				}
				else if(value instanceof ims.framework.utils.DateTime)
				{
					client.addSeed(new SeedValue(seed.getName(), ((ims.framework.utils.DateTime)value).getJavaDate(), Class.forName(seed.getType())));
				}
				else
				{
					client.addSeed(new SeedValue(seed.getName(), seed.getValue(), Class.forName(seed.getType())));
				}
			}
			catch (ClassNotFoundException e)
			{
				engine.showMessage("Error building the report: " + e.toString());
			}
			
		}

		ReportVo report = form.getLocalContext().getCurrentReport();
		
		ReportTemplateVo template = null;
		
		for (int i = 0; report != null &&  i < report.getTemplates().size(); i++)			//wdev-16393
		{
			if(report.getTemplates().get(i).getID_TemplateBo().equals(form.getLocalContext().getTemplateRef().getID_TemplateBo()))
			{
				template = report.getTemplates().get(i);
				break;
			}
		}
		
		if(template == null)
		{
			engine.showMessage("I could not find the template in the database ! (id = " + form.getLocalContext().getTemplateRef().getID_TemplateBo() + ")");
			return;
		}
		
		String result = "";
		try
		{
			result = client.buildReportAsUrlInlineFrame(report.getReportXml(), template.getTemplateXml(), urlReportServer, "PDF", "", 1);
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return;
		}
		
		form.htmReport().setHTML(result);
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if(args == null || args.length == 0)
			throw new PresentationLogicException("No template was assigned to this form !");
		
		TemplateBoRefVo templateRef = (TemplateBoRefVo) args[0];
		
		//templateRef.setID_TemplateBo(new Integer(2));
		
		ReportVo report = domain.getReport(templateRef);
		form.getLocalContext().setTemplateRef(templateRef);			//wdev-16393
		if(report == null)
		{
			form.htmReport().setHTML("<br><br><br><br><center><b>I could not get report for template id = " + templateRef.getID_TemplateBo() + "</b></center>");
			return;
		}
		
		form.getLocalContext().setCurrentReport(report);
		//form.getLocalContext().setTemplateRef(templateRef);
		
		createSeedColumns();
		populateDynamicGrid(report.getReportXml());
		populateSeedsFromContext();
	}
	
	private void populateSeedsFromContext()
	{
		ReportSeedVo voReportSeed = new ReportSeedVo();

		IReportField[] reportField = engine.getFormData(engine.getFormName(), voReportSeed.getIseeds(form.getLocalContext().getCurrentReport().getSeeds()), true);
		
		if (reportField != null)
		{
			String seedName;
			int pos;

			for (int i = 0; i < reportField.length; i++)
			{
				pos = reportField[i].getName().lastIndexOf('.');
				seedName = reportField[i].getName().substring(pos + 1);
				
				for (int j = 0; j < form.ctnParams().dyngrdParams().getRows().size(); j++)
				{
					DynamicGridRow row = form.ctnParams().dyngrdParams().getRows().get(j);
					ReportSeedParsedVo seed = (ReportSeedParsedVo) row.getValue();
					
					if(seed.getName().equalsIgnoreCase(seedName))
					{
						row.getCells().get(getColumn(VALUE_COLUMN)).setValue(reportField[i].getValue());
					}
				}
			}		
		}
		
		boolean reportSeeded = true;
		for (int i = 0; i < form.ctnParams().dyngrdParams().getRows().size(); i++)
		{
			DynamicGridRow row = form.ctnParams().dyngrdParams().getRows().get(i);
			
			if(row.getCells().get(getColumn(VALUE_COLUMN)).getValue() == null)
			{
				reportSeeded = false;
				break;
			}
		}
		
		if(reportSeeded == true)
		{
			form.ctnParams().setCollapsed(true);
			try
			{
				onBtnPDFClick();
			}
			catch (PresentationLogicException e)
			{
				e.printStackTrace();
				engine.showMessage(e.getMessage());
			}
		}
	}
	private void populateDynamicGrid(String reportXml)
	{
		ReportSeedParsedVoCollection seeds = null;
		
		try
		{
			seeds = parseSeedsFromXML(reportXml);
		}
		catch (DocumentException e)
		{
			e.printStackTrace();
			
			engine.showMessage(e.getMessage());
			return;
		}
		
		if(seeds == null)
			return;
		
		createSeedRows(seeds);
	}
	private void createSeedColumns()
	{
		form.ctnParams().dyngrdParams().clear();
		
		DynamicGridColumn nameCol = form.ctnParams().dyngrdParams().getColumns().newColumn("Name", NAME_COLUMN);
		nameCol.setWidth(250);
		nameCol.setBackColor(Color.Gray);
		nameCol.setReadOnly(true);

		DynamicGridColumn seedCol = form.ctnParams().dyngrdParams().getColumns().newColumn("Value", VALUE_COLUMN);
		seedCol.setWidth(205);
		
		DynamicGridColumn mandatoryCol = form.ctnParams().dyngrdParams().getColumns().newColumn("", MANDATORY_COLUMN);
		mandatoryCol.setWidth(-1);
		mandatoryCol.setAlignment(Alignment.CENTER);
	}
	
	@SuppressWarnings("unchecked")
	private ReportSeedParsedVoCollection parseSeedsFromXML(String reportXML) throws DocumentException
	{
		String searchFields;
		String displayFields;

		Document document = DocumentHelper.parseText(reportXML);

		ReportSeedParsedVoCollection seeds = new ReportSeedParsedVoCollection();
		List list = document.selectNodes("//Project/Seeds/Seed");
		for (Iterator iter = list.iterator(); iter.hasNext();)
		{
			DefaultElement attribute = (DefaultElement) iter.next();

			ReportSeedParsedVo seed = new ReportSeedParsedVo();
			seed.setName(attribute.valueOf("Name"));
			seed.setType(attribute.valueOf("Type"));
			seed.setBOName(attribute.valueOf("BOName"));
			seed.setBOField(attribute.valueOf("BOField"));
			seed.setCanBeNull(new Boolean(attribute.valueOf("CanBeNull").equalsIgnoreCase("true")));
			
			Node node = attribute.selectSingleNode("Searchable");
			if(node != null)
			{
				seed.setSearchType(node.valueOf("@type"));
			
				// Split 'Search By' fields by comma
				searchFields = node.valueOf("@by");
				
				String[] sf = searchFields.split(",");
				for (int  i = 0; i < sf.length; i++)
				{
					if (sf[i] != null)
						sf[i] = sf[i].trim();
				}
				seed.setSearchBy(sf);
				
				
				displayFields = node.valueOf("@display");
				
				String[] df = displayFields.split(",");
				for (int i = 0; i < df.length; i++)
				{
					if(df[i] != null)
						df[i] = df[i].trim();
				}
				seed.setDisplayFields(df);
			}
		
			seeds.add(seed);
		}
	
		return seeds;
	}
	
	private void createSeedRows(ReportSeedParsedVoCollection voColl)
	{
		if (voColl == null)
			return;

		for (int i = 0; i < voColl.size(); i++)
		{
			addSeed(voColl.get(i));
		}
	}

	private void addSeed(ReportSeedParsedVo voSeed)
	{
		if (voSeed == null)
			return;

		DynamicGridRow row = form.ctnParams().dyngrdParams().getRows().newRow();

		DynamicGridCell nameCell = row.getCells().newCell(getColumn(NAME_COLUMN), DynamicCellType.WRAPTEXT);
		nameCell.setValue(voSeed.getName());
		nameCell.setReadOnly(true);
		String seedName = getReportSeed().getCellName(voSeed);
		
		DynamicCellType cellType = getSeedSearchCellType(voSeed);

		Object value = getReportSeed().getValue(voSeed);

		DynamicGridCell valueCell = row.getCells().newCell(getColumn(VALUE_COLUMN), cellType);
		if (cellType.equals(DynamicCellType.QUERYCOMBOBOX))
		{
			if (value != null)
			{
				String displayString = (voSeed.getDisplayTextIsNotNull() && voSeed.getDisplayText().trim().length() > 0) ? voSeed.getDisplayText() : value.toString(); 
				valueCell.getItems().newItem(value, displayString);
			}
			valueCell.setMaxDropDownItems(6);	//wdev-16393
			valueCell.setIdentifier(getReportSeed().getIdentifier(voSeed));
			valueCell.setAutoPostBack(true);
		}

		if (cellType.equals(DynamicCellType.ENUMERATION))
		{
			// Get lookup values for search-able seed 
			if (voSeed.getSearchTypeIsNotNull() && voSeed.getSearchType().equalsIgnoreCase("S"))
			{
				if (voSeed.getBOName().equalsIgnoreCase("ims.domain.lookups.LookupInstance"))
				{
					if (voSeed.getSearchByIsNotNull() && voSeed.getSearchBy().length >= 1)
					{
						Integer lookupType = domain.getLokupType(voSeed.getSearchBy()[0]);
						
						if (lookupType != null)
						{
							populateComboInstance(valueCell, lookupType);
						}
					}
				}
			}
			else if(seedName.contains("_"))
			{
				String seedNameDisplay=seedName.substring(0, seedName.indexOf('_'));				
			    String  lookupType=seedName.substring(seedName.indexOf('_')+1,seedName.length());
			    seedName=seedNameDisplay;
				if(checkIfNumber(lookupType)) 
				{
					int type=Integer.valueOf(lookupType).intValue();
					nameCell.setValue(seedName);
					nameCell.setReadOnly(true);
									
					populateComboInstance(valueCell,type );						
				}			    
			}				
		}
		if(voSeed.getType().equalsIgnoreCase(INTEGER) && (voSeed.getName().equalsIgnoreCase("DOB") || voSeed.getName().equalsIgnoreCase("DOB_START") || voSeed.getName().equalsIgnoreCase("DOB_END") || voSeed.getName().equalsIgnoreCase("DATE_OF_BIRTH_FROM") || voSeed.getName().equalsIgnoreCase("DATE_OF_BIRTH_TO")))
		{
			cellType = DynamicCellType.PARTIALDATE;
		}
		else
			cellType = getReportSeed().getCellType(voSeed);

		valueCell.setReadOnly(false);
		
		boolean canBeNull = voSeed.getCanBeNull().booleanValue();
		
		if(canBeNull == false)
		{
			DynamicGridCell mandatoryCell = row.getCells().newCell(getColumn(MANDATORY_COLUMN), DynamicCellType.HTMLVIEW);
			mandatoryCell.setValue("<font color='#FF0000' size='3'>*</font>");
			mandatoryCell.setTooltip("Required");
			
			valueCell.setValidationMessage(voSeed.getName() + " is mandatory");
		}
		
		row.setValue(voSeed);
	}

	private DynamicCellType getSeedSearchCellType(ReportSeedParsedVo seed)
	{
		// If the seed is marked as 'search'-able seed
		if (seed.getSearchTypeIsNotNull())
		{
			// If the seed is 'search'-able partial date - search type will be the string "PD"
			if (seed.getSearchType().equalsIgnoreCase("PD"))
				return DynamicCellType.PARTIALDATE;
			
			// If the seed is 'search'-able by a collection of strings - the search type will be the string "S"
			if (seed.getSearchType().equalsIgnoreCase("S"))
			{
				// WDEV-14289'
				// For 'Lookup instance' we use a combo-box 
				if (seed.getBOName().equalsIgnoreCase("ims.domain.lookups.LookupInstance"))
				{
					return DynamicCellType.ENUMERATION;
				}
				
				return DynamicCellType.QUERYCOMBOBOX;
			}
		}

		// Keep this for old reports legacy
		if(seed.getType().equalsIgnoreCase(INTEGER) &&
				(seed.getName().equalsIgnoreCase("DOB") || seed.getName().equalsIgnoreCase("DOB_START") || seed.getName().equalsIgnoreCase("DOB_END")
				|| seed.getName().equalsIgnoreCase("DATE_OF_BIRTH_FROM") || seed.getName().equalsIgnoreCase("DATE_OF_BIRTH_TO") || "PD".equalsIgnoreCase(seed.getSearchType())))
		{
			return DynamicCellType.PARTIALDATE;
		}


		return getReportSeed().getCellType(seed);
	}

	private boolean checkIfNumber(String lookupType)
	{
		try
		{
			Integer.parseInt(lookupType);
		}
		catch (NumberFormatException ex)
		{
			return false;
		}

		return true;
	}

	private void populateComboInstance(DynamicGridCell valueCell, int lookupTypeId) 
	{
			
		LookupInstanceCollection instColl;
		
		instColl = domain.getLookupService().getLookupCollection(lookupTypeId, ClassHelper.getLookupCollectionClass(lookupTypeId), ClassHelper.getLookupClass(lookupTypeId), true, true);
		
	    if(instColl == null)
		return;
	    
	   
	    LookupInstVo[] roots = instColl.getRoots();	    
	    for (int i = 0; i < roots.length; i++)
		{
	    	valueCell.getItems().newItem(roots[i], roots[i].toString());
		}
	    valueCell.setAutoPostBack(true);	    	
	}

	private DynamicGridColumn getColumn(String columnIdentifier)
	{
		if (columnIdentifier == null)
			return null;

		return form.ctnParams().dyngrdParams().getColumns().getByIdentifier(columnIdentifier);
	}

	/*
	public DynamicCellType getCellType(ReportSeedParsedVo voReportSeed)
	{
		if (voReportSeed == null)
			return DynamicCellType.LABEL;

		String dataType = voReportSeed.getType();

		if (dataType == null)
			return DynamicCellType.LABEL;
		else if (dataType.equals(INTEGER) || dataType.equals(BIG_INTEGER) || dataType.equals(SHORT) || dataType.equals(LONG))
			return DynamicCellType.INT;
		else if (dataType.equals(BOOOLEAN))
			return DynamicCellType.BOOL;
		else if (dataType.equals(STRING))
			return DynamicCellType.STRING;
		else if (dataType.equals(BIG_DECIMAL) || dataType.equals(FLOAT) || dataType.equals(DOUBLE))
			return DynamicCellType.DECIMAL;
		else if (dataType.equals(SQL_DATE))
			return DynamicCellType.DATE;
		else if (dataType.equals(UTIL_DATE))
			return DynamicCellType.DATETIME;
		else if (dataType.equals(SQL_TIME))
			return DynamicCellType.TIME;

		return DynamicCellType.LABEL;
	}
	*/
	
	@Override
	protected void onDyngrdParamsCellTextSubmited(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		if (cell.getType().equals(DynamicCellType.QUERYCOMBOBOX))
		{
			Object identifier = cell.getIdentifier();
			if (identifier != null)
			{
				if (identifier.equals(ReportSeedsHelper.GP_BO))
				{
					listGps(cell);
				}

				if (identifier.equals(ReportSeedsHelper.HCP_BO))
				{
					listHCPs(cell, null);
				}

				if (identifier.equals(ReportSeedsHelper.MEDIC_BO))
				{
					listHCPs(cell, HcpDisType.MEDICAL);
				}

				if (identifier.equals(ReportSeedsHelper.MOS_BO))
				{
					listMOS(cell);
				}

				if (identifier.equals(ReportSeedsHelper.ORG_BO))
				{
					listOrganisation(cell);
				}

				if (identifier.equals(ReportSeedsHelper.LOCATION_BO))
				{
					listLocation(cell);
				}

				if (identifier.equals(ReportSeedsHelper.LOC_SITE_BO))
				{
					listLocSite(cell);
				}
			}
		}
	}

	private void listGps(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		populateCellItems(cell, domain.listGPsBySurname(cell.getTypedText()));
	}

	private void listHCPs(DynamicGridCell cell, HcpDisType hcpDisciplineType)
	{
		if (cell == null)
			return;

		HcpLiteVoCollection voColl = domain.listHcpLiteByNameAndDisciplineType(cell.getTypedText(), hcpDisciplineType);
		populateCellItems(cell, voColl);
	}

	private void listMOS(DynamicGridCell cell)
	{
		MemberOfStaffShortVo filter = new MemberOfStaffShortVo();
		PersonName personName = new PersonName();
		personName.setSurname(cell.getTypedText());
		filter.setName(personName);
		filter.setIsActive(Boolean.TRUE);

		populateCellItems(cell, domain.listMembersOfStaff(filter));
	}

	private void listOrganisation(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		OrgShortVo filter = new OrgShortVo();
		filter.setName(cell.getTypedText());
		filter.setIsActive(Boolean.TRUE);

		populateCellItems(cell, domain.listOrganisationsShort(filter));
	}

	private void listLocSite(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		populateCellItems(cell, domain.listLocSite(cell.getTypedText()));
	}

	private void listLocation(DynamicGridCell cell)
	{
		if (cell == null)
			return;

		populateCellItems(cell, domain.listLocationByName(cell.getTypedText()));
	}

	private void populateCellItems(DynamicGridCell cell, ValueObjectCollection voColl)
	{
		cell.getItems().clear();

		for (int i = 0; voColl != null && i < voColl.getItems().length; i++)
		{
			cell.getItems().newItem(voColl.getItems()[i]);
		}

		if (voColl != null && voColl.getItems() != null)
		{
			if (voColl.getItems().length == 1)
				cell.setValue(voColl.getItems()[0]);
			else if (voColl.getItems().length > 1)
				cell.showOpened();
		}
	}

	private ReportSeedsHelper getReportSeed()
	{
		return new ReportSeedsHelper(engine);
	}
	
	private ReportSeedParsedVo setSeedValue(DynamicGridCell valueCell, ReportSeedParsedVo seed)
	{
		if (valueCell == null)
			return seed;

		Object value = valueCell.getValue();
		
		// WDEV-16393
		// If the cell value is null then clear the seed value
		if (value == null)
		{
			seed.setValue(null);
			return seed;
		}
		
		if (value instanceof GpShortVo)
		{
			seed.setValue(((GpShortVo) value).getID_Gp().toString());
			seed.setGP(((GpShortVo) value));
		}
		else if (value instanceof HcpLiteVo)
		{
			seed.setValue(((HcpLiteVo) value).getID_Hcp().toString());
			seed.setHCP((HcpLiteVo) value);
		}
		else if (value instanceof MemberOfStaffShortVo)
		{
			seed.setValue(((MemberOfStaffShortVo) value).getID_MemberOfStaff().toString());
			seed.setMOS((MemberOfStaffShortVo) value);
		}
		else if (value instanceof OrgShortVo)
		{
			seed.setValue(((OrgShortVo) value).getID_Organisation().toString());
			seed.setOrganisation(((OrgShortVo) value));
		}
		else if (value instanceof LocSiteLiteVo)
		{
			seed.setValue(((LocSiteLiteVo) value).getID_Location().toString());
			seed.setLocSite((LocSiteLiteVo) value);
		}
		else if (value instanceof LocationLiteVo)
		{
			seed.setValue(((LocationLiteVo) value).getID_Location().toString());
			seed.setLocation((LocationLiteVo) value);
		}
		else if (value instanceof DateTime)
		{
			seed.setValue(((DateTime)value).toString(DateTimeFormat.ISO_SECS));
		}
		else if (value instanceof PartialDate && seed.getType().equalsIgnoreCase(INTEGER))
		{
			seed.setValue(((PartialDate)value).toInteger().toString());
		}
		else if (value instanceof LookupInstVo)
		{
			seed.setValue(String.valueOf(((LookupInstVo)value).getId()));
			seed.setDisplayText(((LookupInstVo)value).getText());
		}

		else
		{
			seed.setValue(value.toString());	
		}

		return seed;
	}
	
}
