//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientdetails;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Patient;
import ims.core.vo.PatientDetailsComponentVo;
import ims.core.vo.PatientFilter;
import ims.core.vo.lookups.NameType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Date;
import ims.framework.utils.Image;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	
	private static final Integer NONE = new Integer(0);
	private static final Integer BUTTON_OTHERNAMES = new Integer(1);
	private static final Integer BUTTON_ALIAS = new Integer(2);
	private static final Integer BUTTON_DECEASED = new Integer(3);

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setButtonAction(NONE);
		if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK"))
		{
			form.lblEthnicOrigin().setVisible(true);
			form.lblEthnicOrigin2().setVisible(true);
			form.cmbEthnic().setVisible(true);
			form.cmbEthnic().setEnabled(false);
			form.cmbOccupation().setVisible(false);
			form.lblOccupation().setVisible(false);
			
		}
		else if (ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("IRISH"))
		{
			
			form.lblEthnicOrigin().setVisible(false);
			form.lblEthnicOrigin2().setVisible(false);
			form.cmbEthnic().setVisible(false);
			form.cmbOccupation().setEnabled(false);
		}
		
		form.txtForename().setRequired(ConfigFlag.DOM.FORENAME1_IS_MANDATORY.getValue());//WDEV-12962
		form.btnDeceased().setVisible(false);//wdev-12966
		form.cmbSex().setRequired(ConfigFlag.DOM.GENDER_IS_MANDATORY_FOR_REGISTRATION.getValue());	//WDEV-12972
		
		//wdev-13000
		
		form.imbAlias().setVisible(ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue());
		
		form.getLocalContext().setDemographicDetailsCannotBeEdited(null);		//wdev-15845
		
		

	}
	
	protected void onImbAliasClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		setButtonAction(BUTTON_ALIAS);
		form.fireCustomControlValueChanged();
		
	}
	
	protected void onBtnDeceasedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		setButtonAction(BUTTON_DECEASED);
		form.fireCustomControlValueChanged();
	}
	
	protected void onImbOtherNamesClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
		setButtonAction(BUTTON_OTHERNAMES);
		form.fireCustomControlValueChanged();
	}
	public void setVisiblelblEthnicOrigin(Boolean visibleB)
	{
		// TODO: Add your code here.
	}

	public void setcmbEthnicVisble(Boolean isVisible)
	{
		form.cmbEthnic().setVisible(isVisible);
	}

	public void setcmbEthnicEnabled(Boolean enable)
	{
		form.cmbEthnic().setEnabled(enable);
	}

	public void setcmbOccupationVisible(Boolean visible)
	{
		form.cmbOccupation().setVisible(visible);
	}

	public void setlblOccupationVisible(Boolean visible)
	{
		form.lblOccupation().setVisible(visible);
	}

	public void setcmbOccupationEnabled(Boolean enabled)
	{
		form.cmbOccupation().setEnabled(enabled);
	}

	public void setIsRequiredtxtForename(Boolean required)
	{
		// TODO: Add your code here.
	}

	public void setcmbSexIsRequire(Boolean required)
	{
		// TODO: Add your code here.
	}

	public void setimbAliasVisible(Boolean visible)
	{
		
		form.imbAlias().setVisible(visible);
	}

	public void setimbOtherNamesVisible(Boolean visible)
	{
		form.imbOtherNames().setVisible(visible);
	}

	public void setdteDodVisible(Boolean visible)
	{
		form.dteDod().setVisible(visible);
	}

	public void setdteDodEnabled(Boolean enabled)
	{
		form.dteDod().setEnabled(enabled);
	}

	public void setPatientDetailsFromPatientFilter(PatientFilter patientFilter) 
	{
		form.txtSurname().setValue(patientFilter.getSurname());
		form.txtForename().setValue(patientFilter.getForename());
		if (patientFilter.getSexIsNotNull())
			form.cmbSex().setValue(patientFilter.getSex());
		form.pdtDOB().setValue(patientFilter.getDob());
		form.imbOtherNames().setVisible(false);
		
	}

	public void setbtnDeceasedText(String text) 
	{
		form.btnDeceased().setText(text);
		
	}

	public void setbtnDeceasedVisible(Boolean visible) 
	{
		form.btnDeceased().setVisible(visible);
		
	}

	public void clear() 
	{
		form.cmbTitle().setValue(null);
		form.txtSurname().setValue(null);
		form.txtForename().setValue(null);
		form.txtMiddleName().setValue(null);
		form.cmbSex().setValue(null);
		form.pdtDOB().setValue(null);
		form.txtAge().setValue(null);
		form.dteDod().setValue(null);
		form.cmbMarital().setValue(null);
		form.cmbOccupation().setValue(null);
		form.cmbReligion().setValue(null);
		form.cmbEthnic().setValue(null);
		
	}

	public Boolean populateScreenFromData(Patient pat) 
	{
		if (pat.getNameIsNotNull())
		{
			form.cmbTitle().setValue(pat.getName().getTitle());
			form.txtSurname().setValue(pat.getName().getSurname());
			form.txtForename().setValue(pat.getName().getForename());
			form.txtMiddleName().setValue(pat.getName().getMiddleName());
		}

		form.cmbSex().setValue(pat.getSex());
		form.pdtDOB().setValue(pat.getDob());
		form.txtAge().setValue(pat.calculateAgeText());
		form.dteDod().setValue(pat.getDod());

		if (engine.hasRight(AppRight.ALLOW_MARK_PATIENT_AS_DECEASED) && form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{
			form.btnDeceased().setText("Death Details");
			form.btnDeceased().setVisible(true);
			
			//WDEV-16548
			form.dteDod().setVisible(true);
			form.lblDod().setVisible(true);
			form.lblDod2().setVisible(true);
		}

		form.cmbMarital().setValue(pat.getMaritalStatus());
		form.cmbOccupation().setValue(pat.getOccupation());
		form.cmbReligion().setValue(pat.getReligion());
		form.cmbEthnic().setValue(pat.getEthnicOrigin());

		if (pat.getOtherNamesIsNotNull() && pat.getOtherNames().size() > 0)
		{
			if (pat.getMaidenName() != null)
			{
				form.imbOtherNames().setTooltip("<b>OTHER NAMES<br><br>Maiden Name:  </b>" + pat.getMaidenName().toString());
			}
			form.getGlobalContext().Core.setOtherNames(pat.getOtherNames());
		}
		else
		{
			form.imbOtherNames().setVisible(false);
			form.imbOtherNames().setTooltip("No Other Names");
		}

		if (ConfigFlag.DOM.USE_ALIAS_SURNAME_FUNCTIONALITY.getValue()) 
		{
			// WDEV-17457
			form.imbAlias().setTooltip("No Alias");
			form.imbAlias().setEnabledImage(form.getImages().Core.ZoomInfoEnabled24);
			form.imbAlias().setDisabledImage(form.getImages().Core.ZoomInfoDisabled24);

			form.getGlobalContext().Core.setAliasName(pat.getName(NameType.ALIAS) != null ? pat.getName(NameType.ALIAS).getSurname() : "");

			if (ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
			{
				//We have to do this DTO call to get ALIAS to Display - there is a time lag before the HL7inbound happens ... otherwise info on screen looks wrong 
				try 
				{
					if (form.getGlobalContext().Core.getPatientShort()!=null && form.getGlobalContext().Core.getPatientShort().getHospnum()!=null && form.getGlobalContext().Core.getPatientShort().getHospnum().getValue()!=null)//WDEV-17373
					{
						form.getGlobalContext().Core.setAliasName(domain.getCCOAlias(form.getGlobalContext().Core.getPatientShort().getHospnum().getValue()));
						
						//WDEV-17721
						if (form.getGlobalContext().Core.getAliasName() == null)
						{
							form.getGlobalContext().Core.setOtherNames(null);
							form.imbOtherNames().setTooltip("No Other Names");
						}
					}
				} 
				catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
					//wdev-15845
					if(e.getMessage() != null && e.getMessage().equals("Demographics details cannot be edited –- Please contact the system administrator with the details for this patient"))
					{
						setDemographicDetailsCannotBeEdited(Boolean.TRUE);
					}
					else
						setDemographicDetailsCannotBeEdited(null);
					//-----------
					return Boolean.FALSE;
				}
			}
			
			if (form.getGlobalContext().Core.getAliasNameIsNotNull() && form.getGlobalContext().Core.getAliasName().trim().length() > 0) // WDEV-17457
			{
				form.imbAlias().setTooltip("<b>ALIAS :</b>   " + form.getGlobalContext().Core.getAliasName());
				form.imbAlias().setEnabledImage(form.getImages().Core.AddFile16);
				form.imbAlias().setDisabledImage(form.getImages().Core.AddFile16Disable);
			}
			
		}
		
		return Boolean.TRUE;


	}

	public void setlblDodVisible(Boolean visible) 
	{
		form.lblDod().setVisible(visible);
		
	}

	public void setlblDod2Visible(Boolean visible) 
	{
		form.lblDod2().setVisible(visible);
		
	}

	public void setdteDodValue(Date value) 
	{
		form.dteDod().setValue(value);		
	}

	public Boolean dteDodIsVisible() 
	{
		return form.dteDod().isVisible();

	}

	public PatientDetailsComponentVo getPatientDetails() 
	{
		PatientDetailsComponentVo tempVo = new PatientDetailsComponentVo();
		tempVo.setTitle(form.cmbTitle().getValue());
		tempVo.setForename(form.txtForename().getValue());
		tempVo.setMiddleName(form.txtMiddleName().getValue());
		tempVo.setSurname(form.txtSurname().getValue());
		
		tempVo.setSex(form.cmbSex().getValue());
		tempVo.setDob(form.pdtDOB().getValue());
		tempVo.setDod(form.dteDod().getValue());
		tempVo.setMaritalStatus(form.cmbMarital().getValue());
		tempVo.setOccupation(form.cmbOccupation().getValue());
		tempVo.setReligion(form.cmbReligion().getValue());
		tempVo.setEthnicOrigin(form.cmbEthnic().getValue());
		
		return tempVo;
	}

	
	public void setimbAliasTooltip(String tooltip) 
	{
		form.imbAlias().setTooltip(tooltip);
		
	}

	
	public void setimbAliasEnabled(Boolean enabled) 
	{
		form.imbAlias().setEnabled(enabled);
		
	}

	public void setimbAliasEnabledImage(Image image) 
	{
		form.imbAlias().setEnabledImage(image);
		
	}

	public void setimbAliasDisabledImage(Image image) 
	{
		form.imbAlias().setDisabledImage(image);
		
	}

	//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
	public void setButtonAction(Integer action) 
	{
		form.getLocalContext().setButtonAction(action);
		
	}

	//0- none, 1-imbOtherNames, 2 - imbAlias, 3 - btnDeceased
	public Integer getButtonAction() 
	{
		
		return form.getLocalContext().getButtonAction();
	}

	public void setModeForm(FormMode mode) 
	{
		form.setMode(mode);
		
	}
	
	//wdev-15845
	public Boolean getDemographicDetailsCannotBeEdited()
	{
		return form.getLocalContext().getDemographicDetailsCannotBeEdited();
	}

	//wdev-15845
	public void setDemographicDetailsCannotBeEdited(Boolean canBeEdited)
	{
		form.getLocalContext().setDemographicDetailsCannotBeEdited(canBeEdited);
		
	}
}
