//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.clinicletterbatchcreate;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void bindcmbSSpecialtyLookup();
	abstract protected void defaultcmbSSpecialtyLookupValue();
	abstract protected void bindcmbDocTypeLookup();
	abstract protected void defaultcmbDocTypeLookupValue();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onlyrLetterCreateTabChanged(ims.framework.LayerBridge tab);
	abstract protected void onBtnOutpatientCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onQmbClinicTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbLocationValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNextClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearPatientClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbSearchPatientClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPatientSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdPatientGridCheckBoxClicked(int column, GenForm.lyrLetterCreateLayer.tabClinicListContainer.grdPatientRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnTemplateCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnGenerateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSpecialtyValueSet(Object value);
	abstract protected void oncmbSSpecialtyValueSet(Object value);
	abstract protected void oncmbDocTypeValueSet(Object value);
	abstract protected void onImbSearchTemplateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbClearTemplateClick() throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.lyrLetterCreate().tabClinicList().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrLetterCreatetabClinicListActivated();
			}
		});
		this.form.lyrLetterCreate().tabTemplate().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrLetterCreatetabTemplateActivated();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().btnOutpatientCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnOutpatientCancelClick();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().qmbClinic().setSearchEvent(new ComboBoxSearch()
		{
			private static final long serialVersionUID = 1L;
			public void handle(String value) throws ims.framework.exceptions.PresentationLogicException
			{
				onQmbClinicTextSubmited(value);
			}
		});
		this.form.lyrLetterCreate().tabClinicList().cmbLocation().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbLocationValueChanged();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().btnNext().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNextClick();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().imbClearPatient().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearPatientClick();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().imbSearchPatient().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchPatientClick();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().grdPatient().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPatientSelectionChanged();
			}
		});
		this.form.lyrLetterCreate().tabClinicList().grdPatient().setGridCheckBoxClickedEvent(new GridCheckBoxClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column, ims.framework.controls.GridRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdPatientGridCheckBoxClicked(column, new GenForm.lyrLetterCreateLayer.tabClinicListContainer.grdPatientRow(row), isChecked);
			}
		});
		this.form.lyrLetterCreate().tabTemplate().btnTemplateCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnTemplateCancelClick();
			}
		});
		this.form.lyrLetterCreate().tabTemplate().btnGenerate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnGenerateClick();
			}
		});
		this.form.lyrLetterCreate().tabTemplate().cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
		this.form.lyrLetterCreate().tabTemplate().cmbSSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSSpecialtyValueSet(value);
			}
		});
		this.form.lyrLetterCreate().tabTemplate().cmbDocType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDocTypeValueSet(value);
			}
		});
		this.form.lyrLetterCreate().tabTemplate().imbSearchTemplate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbSearchTemplateClick();
			}
		});
		this.form.lyrLetterCreate().tabTemplate().imbClearTemplate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbClearTemplateClick();
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbSpecialtyLookup();
		bindcmbSSpecialtyLookup();
		bindcmbDocTypeLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbSpecialtyLookup();
		bindcmbSSpecialtyLookup();
		bindcmbDocTypeLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbSpecialtyLookupValue();
		defaultcmbSSpecialtyLookupValue();
		defaultcmbDocTypeLookupValue();
	}
	private void onlyrLetterCreatetabClinicListActivated()
	{
		this.form.lyrLetterCreate().showtabClinicList();
		onlyrLetterCreateTabChanged(this.form.lyrLetterCreate().tabClinicList());
	}
	private void onlyrLetterCreatetabTemplateActivated()
	{
		this.form.lyrLetterCreate().showtabTemplate();
		onlyrLetterCreateTabChanged(this.form.lyrLetterCreate().tabTemplate());
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
