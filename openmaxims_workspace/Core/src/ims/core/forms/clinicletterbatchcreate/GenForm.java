//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.clinicletterbatchcreate;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrLetterCreateLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabClinicListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.interfaces.ILocation value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.interfaces.ILocation value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.interfaces.ILocation getValue()
				{
					return (ims.framework.interfaces.ILocation)super.control.getValue();
				}
				public void setValue(ims.framework.interfaces.ILocation value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbClinicComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ClinicLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ClinicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ClinicLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ClinicLiteVo getValue()
				{
					return (ims.core.vo.ClinicLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ClinicLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdPatientRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPatientRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDocCreateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDocCreateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDocCreateOpened()
				{
					super.row.showOpened(0);
				}
				public boolean getcolDocCreate()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setcolDocCreate(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellcolDocCreateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolHospnumReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolHospnumReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolHospnumOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolHospnum()
				{
					return (String)super.row.get(1);
				}
				public void setcolHospnum(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolHospnumTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSurnameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSurnameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSurnameOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolSurname()
				{
					return (String)super.row.get(2);
				}
				public void setcolSurname(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolSurnameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolForenameReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolForenameReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolForenameOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolForename()
				{
					return (String)super.row.get(3);
				}
				public void setcolForename(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolForenameTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolDobReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolDobReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolDobOpened()
				{
					super.row.showOpened(4);
				}
				public String getcolDob()
				{
					return (String)super.row.get(4);
				}
				public void setcolDob(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolDobTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolClinicReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolClinicReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolClinicOpened()
				{
					super.row.showOpened(5);
				}
				public String getcolClinic()
				{
					return (String)super.row.get(5);
				}
				public void setcolClinic(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolClinicTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolSpecialtyReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolSpecialtyOpened()
				{
					super.row.showOpened(6);
				}
				public String getcolSpecialty()
				{
					return (String)super.row.get(6);
				}
				public void setcolSpecialty(String value)
				{
					super.row.set(6, value);
				}
				public void setCellcolSpecialtyTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolClinicDateReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolClinicDateReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolClinicDateOpened()
				{
					super.row.showOpened(7);
				}
				public String getcolClinicDate()
				{
					return (String)super.row.get(7);
				}
				public void setcolClinicDate(String value)
				{
					super.row.set(7, value);
				}
				public void setCellcolClinicDateTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.core.vo.OutPatientListVo getValue()
				{
					return (ims.core.vo.OutPatientListVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.OutPatientListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPatientRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPatientRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPatientRow get(int index)
				{
					return new grdPatientRow(super.collection.get(index));
				}
				public grdPatientRow newRow()
				{
					return new grdPatientRow(super.collection.newRow());
				}
				public grdPatientRow newRow(boolean autoSelect)
				{
					return new grdPatientRow(super.collection.newRow(autoSelect));
				}
				public grdPatientRow newRowAt(int index)
				{
					return new grdPatientRow(super.collection.newRowAt(index));
				}
				public grdPatientRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPatientRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPatientGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public void setcolHospnumCaption(String value)
				{
					this.grid.setColumnCaption(1, value);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.OutPatientListVoCollection getValues()
				{
					ims.core.vo.OutPatientListVoCollection listOfValues = new ims.core.vo.OutPatientListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.OutPatientListVo getValue()
				{
					return (ims.core.vo.OutPatientListVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.OutPatientListVo value)
				{
					super.grid.setValue(value);
				}
				public grdPatientRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPatientRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPatientRowCollection getRows()
				{
					return new grdPatientRowCollection(super.grid.getRows());
				}
				public grdPatientRow getRowByValue(ims.core.vo.OutPatientListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPatientRow(row);
				}
				public void setcolDocCreateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDocCreateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolHospnumHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolHospnumHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSurnameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSurnameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolForenameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolForenameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolDobHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolDobHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolClinicHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolClinicHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolClinicDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolClinicDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 26, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 576, 26, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 26, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "O/P Clinic:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 733, 496, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 656, 496, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 616, 24, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 64, 24, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLocationTemp);
				cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
				super.addComboBox(cmbLocation);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 368, 24, 192, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbClinicTemp);
				qmbClinicComboBox qmbClinic = (qmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicComboBox.class, m_qmbClinicTemp);
				super.addComboBox(qmbClinic);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 56, 800, 432, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPatientTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPatientTemp);
				grdPatientGrid grdPatient = (grdPatientGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPatientGrid.class, m_grdPatientTemp);
				grdPatient.addBoolColumn("Select", 0, 0, 45, false, true, 0, true);
				grdPatient.addStringColumn("Hospital Number", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("Surname", 0, 0, 145, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("Forename", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("DOB", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("Clinic", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("Specialty", 0, 0, 115, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPatient.addStringColumn("Clinic Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPatient);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 776, 19, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear All", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 744, 19, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "List Outpatients matching search criteria", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Button btnOutpatientCancel()
			{
				return (Button)super.getControl(3);
			}
			public Button btnNext()
			{
				return (Button)super.getControl(4);
			}
			public DateControl dteClinicDate()
			{
				return (DateControl)super.getControl(5);
			}
			public cmbLocationComboBox cmbLocation()
			{
				return (cmbLocationComboBox)super.getComboBox(0);
			}
			public qmbClinicComboBox qmbClinic()
			{
				return (qmbClinicComboBox)super.getComboBox(1);
			}
			public grdPatientGrid grdPatient()
			{
				return (grdPatientGrid)super.getGrid(0);
			}
			public ImageButton imbClearPatient()
			{
				return (ImageButton)super.getControl(9);
			}
			public ImageButton imbSearchPatient()
			{
				return (ImageButton)super.getControl(10);
			}
		}
		public static class tabTemplateContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDocTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.DocumentCategory value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.DocumentCategory value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.DocumentCategory getValue()
				{
					return (ims.core.vo.lookups.DocumentCategory)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.DocumentCategory value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 288, 800, 200, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search Template", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 344, 276, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_ccResponsibleForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper14.getSize(), instance1, startTabIndex.intValue() + 2027, skipContextValidation);
				//ims.framework.Control m_ccResponsibleControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(120), new Integer(344), new Integer(276), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 2027), m_ccResponsibleForm, instance1 } );
				ims.framework.Control m_ccResponsibleControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 2027), m_ccResponsibleForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccResponsibleControl);
				Menu[] menus1 = m_ccResponsibleForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 480, 320, 320, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ims.framework.FormUiLogic m_ccTypistForm = loader.loadComponent(102256, appForm, startControlID * 10 + 2000, anchoringHelper15.getSize(), instance2, startTabIndex.intValue() + 1026, skipContextValidation);
				//ims.framework.Control m_ccTypistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(480), new Integer(320), new Integer(320), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1026), m_ccTypistForm, instance2 } );
				ims.framework.Control m_ccTypistControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016),  new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 1026), m_ccTypistForm, instance2, Boolean.FALSE } );
				super.addControl(m_ccTypistControl);
				Menu[] menus2 = m_ccTypistForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 320, 276, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAuthForm = loader.loadComponent(102256, appForm, startControlID * 10 + 3000, anchoringHelper16.getSize(), instance3, startTabIndex.intValue() + 25, skipContextValidation);
				//ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(120), new Integer(320), new Integer(276), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 25), m_ccAuthForm, instance3 } );
				ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018),  new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 25), m_ccAuthForm, instance3, Boolean.TRUE } );
				super.addControl(m_ccAuthControl);
				Menu[] menus3 = m_ccAuthForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Summary Notes:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 616, 346, 71, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Event Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 400, 346, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 346, 104, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 322, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 400, 322, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Typist Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 392, 66, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Document Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Template:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 733, 496, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 3032), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 656, 496, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Generate", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 608, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 688, 344, 96, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 3029), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 480, 344, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 3028), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 456, 64, 272, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbSSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSSpecialtyTemp);
				cmbSSpecialtyComboBox cmbSSpecialty = (cmbSSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSSpecialtyComboBox.class, m_cmbSSpecialtyTemp);
				super.addComboBox(cmbSSpecialty);
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 120, 64, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDocTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDocTypeTemp);
				cmbDocTypeComboBox cmbDocType = (cmbDocTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDocTypeComboBox.class, m_cmbDocTypeTemp);
				super.addComboBox(cmbDocType);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 120, 376, 664, 93, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 800, 176, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 742, 40, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search using given criteria", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 772, 40, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear Search Criteria", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.mosquery.IComponent ccResponsible()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccResponsibleValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccResponsibleVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccResponsibleVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccResponsibleEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccResponsibleEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccTypist()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(3)).getLogic();
			}
			public void setccTypistValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(3)).setValueChangedEvent(delegate);
			}
			public void setccTypistVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setVisible(value);
			}
			public boolean isccTypistVisible()
			{
				return ((ims.framework.Control)super.getControl(3)).isVisible();
			}
			public void setccTypistEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(3)).setEnabled(value);
			}
			public boolean isccTypistEnabled()
			{
				return ((ims.framework.Control)super.getControl(3)).isEnabled();
			}
			public ims.core.forms.mosquery.IComponent ccAuth()
			{
				return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(4)).getLogic();
			}
			public void setccAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(4)).setValueChangedEvent(delegate);
			}
			public void setccAuthVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setVisible(value);
			}
			public boolean isccAuthVisible()
			{
				return ((ims.framework.Control)super.getControl(4)).isVisible();
			}
			public void setccAuthEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(4)).setEnabled(value);
			}
			public boolean isccAuthEnabled()
			{
				return ((ims.framework.Control)super.getControl(4)).isEnabled();
			}
			public Label lblSummaryNote()
			{
				return (Label)super.getControl(5);
			}
			public Button btnTemplateCancel()
			{
				return (Button)super.getControl(14);
			}
			public Button btnGenerate()
			{
				return (Button)super.getControl(15);
			}
			public TextBox txtTemplate()
			{
				return (TextBox)super.getControl(16);
			}
			public DateControl dteDocDate()
			{
				return (DateControl)super.getControl(17);
			}
			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(0);
			}
			public cmbSSpecialtyComboBox cmbSSpecialty()
			{
				return (cmbSSpecialtyComboBox)super.getComboBox(1);
			}
			public cmbDocTypeComboBox cmbDocType()
			{
				return (cmbDocTypeComboBox)super.getComboBox(2);
			}
			public DynamicGrid dyngrdSummaryNotes()
			{
				return (DynamicGrid)super.getControl(21);
			}
			public DynamicGrid dyngrdReports()
			{
				return (DynamicGrid)super.getControl(22);
			}
			public ImageButton imbSearchTemplate()
			{
				return (ImageButton)super.getControl(23);
			}
			public ImageButton imbClearTemplate()
			{
				return (ImageButton)super.getControl(24);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinic List", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicListContainer m_tabClinicListContainer = (tabClinicListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicListContainer.class, m_tabClinicList, factory);
			super.addContainer(m_tabClinicList, m_tabClinicListContainer);
			ims.framework.utils.SizeInfo m_tabClinicListDesignSize = new ims.framework.utils.SizeInfo(824, 552);
			ims.framework.utils.SizeInfo m_tabClinicListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
			m_tabClinicListContainer.setContext(form, appForm, m_tabClinicList, loader, form_images_local, startControlID, m_tabClinicListDesignSize, m_tabClinicListRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTemplate = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Templates", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTemplateContainer m_tabTemplateContainer = (tabTemplateContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTemplateContainer.class, m_tabTemplate, factory);
			super.addContainer(m_tabTemplate, m_tabTemplateContainer);
			ims.framework.utils.SizeInfo m_tabTemplateDesignSize = new ims.framework.utils.SizeInfo(824, 552);
			ims.framework.utils.SizeInfo m_tabTemplateRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
			m_tabTemplateContainer.setContext(form, appForm, m_tabTemplate, loader, form_images_local, startControlID, m_tabTemplateDesignSize, m_tabTemplateRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabClinicList().setVisible(false);
			tabTemplate().setVisible(false);
		}
		public void settabClinicListEnabled(boolean value)
		{
			tabClinicList().setEnabled(value);
		}
		public void settabTemplateEnabled(boolean value)
		{
			tabTemplate().setEnabled(value);
		}
		public void showtabClinicList()
		{
			tabTemplate().setVisible(false);
			tabClinicList().setVisible(true);
		}
		public void showtabTemplate()
		{
			tabClinicList().setVisible(false);
			tabTemplate().setVisible(true);
		}

		public tabClinicListContainer tabClinicList()
		{
			return (tabClinicListContainer)super.layers.get(0);
		}
		public tabTemplateContainer tabTemplate()
		{
			return (tabTemplateContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.DocumentWorklistSearchCriteriaVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.DocumentWorklistSearchCriteriaVo' of the global context variable 'Core.DocumentWorklistSearchCriteria' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(824, 560);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrLetterCreateLayer m_lyrLetterCreateLayer = (lyrLetterCreateLayer)LayerFlyweightFactory.getInstance().createLayer(lyrLetterCreateLayer.class, this, factory);
		super.addLayer(m_lyrLetterCreateLayer);
		m_lyrLetterCreateLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrLetterCreateLayer lyrLetterCreate()
	{
		return (lyrLetterCreateLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PatientDocumentErrors = new LocalFormName(102364);
			}
			public final FormName PatientDocumentErrors;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ReportDesigner = new ImageHelper(102292, "Images/Core/ReportDesigner.gif", new Integer(16), new Integer(16));
				TemplateReport = new ImageHelper(102293, "Images/Core/TemplateReport.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ReportDesigner;
			public final ims.framework.utils.Image TemplateReport;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MinDate = new ims.framework.ContextVariable("MinDate", prefix + "_lv_Core.ClinicLetterBatchCreate.__internal_x_context__MinDate_" + componentIdentifier + "");
			cxl_MaxDate = new ims.framework.ContextVariable("MaxDate", prefix + "_lv_Core.ClinicLetterBatchCreate.__internal_x_context__MaxDate_" + componentIdentifier + "");
		}
		
		public boolean getMinDateIsNotNull()
		{
			return !cxl_MinDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getMinDate()
		{
			return (ims.framework.utils.Date)cxl_MinDate.getValue(context);
		}
		public void setMinDate(ims.framework.utils.Date value)
		{
			cxl_MinDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MinDate = null;
		public boolean getMaxDateIsNotNull()
		{
			return !cxl_MaxDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getMaxDate()
		{
			return (ims.framework.utils.Date)cxl_MaxDate.getValue(context);
		}
		public void setMaxDate(ims.framework.utils.Date value)
		{
			cxl_MaxDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MaxDate = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
