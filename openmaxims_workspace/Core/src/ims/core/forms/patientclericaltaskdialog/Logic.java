//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientclericaltaskdialog;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.forms.patientclericaltaskdialog.GenForm.grdPatClericalTaskRow;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientClericalTaskVo;
import ims.core.vo.PatientClericalTaskVoCollection;
import ims.core.vo.PatientListVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.ocrr.vo.lookups.PatientClericalTaskStatus;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onBtnTaskCompleteClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Object mos = domain.getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			form.ccCompleted().setValue((MemberOfStaffLiteVo)mos);
		}
		form.dtimCompleted().setValue(new DateTime());
			
		if (save(PatientClericalTaskStatus.COMPLETED))
		{
			open();
		}
	}

	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14080
		open();	
	}
	
	private void open() 
	{
			
		//WDEV-14080
		PatientClericalTaskVoCollection patClericalTaskCollection =null;
		
		if (form.getGlobalContext().Core.getPatientClericalTaskIsNotNull())
		{
			 patClericalTaskCollection = domain.getPatientClericalTasksByResultSelected(form.getGlobalContext().Core.getPatientClericalTask().getInvestigation());
		}else if (form.getGlobalContext().OCRR.getCurrentPathRadResultIsNotNull())
		{
			 patClericalTaskCollection = domain.getPatientClericalTasksByResultSelected(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
		}

		populateGrid(patClericalTaskCollection);
		
		if (form.getLocalContext().getlocalContextClericalTaskIsNotNull())
		{
			form.getLocalContext().setlocalContextClericalTask(domain.getPatientClericalTask(form.getLocalContext().getlocalContextClericalTask()));
		}
		
		populateInstanceControls(form.getLocalContext().getlocalContextClericalTask());
		
		form.setMode(FormMode.VIEW);
	}
	
	
	private void clearInstanceControls()//WDEV-14080
	{
		form.ccRequestor().clear();
		form.dtimRequested().setValue(null);
		form.ccAllocate().clear();
		form.txtComment().setValue(null);
		form.ccCompleted().clear();
		form.dtimCompleted().setValue(null);
	}

	//WDEV-14080
	private void populateGrid(PatientClericalTaskVoCollection patClericalTaskCollection) 
	{
		form.grdPatClericalTask().getRows().clear();
		if (patClericalTaskCollection==null)
		{
			return;
		}
		
		for (int i=0;i<patClericalTaskCollection.size();i++)
		{
			PatientClericalTaskVo patClericalTask = patClericalTaskCollection.get(i);
			
			if (patClericalTask==null)
			{
				continue;
			}
			
			grdPatClericalTaskRow row = form.grdPatClericalTask().getRows().newRow();
			row.setcolRequestor(patClericalTask.getRequestor().toString());
			row.setcolRequestedDateTime(patClericalTask.getRequestedDateTime().toString());
			row.setcolAllocatedTo(patClericalTask.getAllocatedTo().toString());
			row.setcolComment(patClericalTask.getComment());
			row.setTooltipForcolComment(patClericalTask.getComment());
			if (patClericalTask.getCompletedDateTimeIsNotNull())
			{
				row.setcolCompletedOn(patClericalTask.getCompletedDateTime().toString());
			}
			row.setValue(patClericalTask);
			
		}
		
		if (form.getLocalContext().getlocalContextClericalTaskIsNotNull())
		{
			form.getLocalContext().setlocalContextClericalTask(domain.getPatientClericalTask(form.getLocalContext().getlocalContextClericalTask()));
			
			form.grdPatClericalTask().setValue(form.getLocalContext().getlocalContextClericalTask());
		}	
	}
	
	//WDEV-14080
	private void populateInstanceControls(PatientClericalTaskVo patientClericalTask ) 
	{
		clearInstanceControls();
		
		if (patientClericalTask==null)
			return;
		
		form.ccRequestor().setValue(patientClericalTask.getRequestor());
		form.dtimRequested().setValue(patientClericalTask.getRequestedDateTime());
		form.ccAllocate().setValue(patientClericalTask.getAllocatedTo());
		form.txtComment().setValue(patientClericalTask.getComment());
		form.ccCompleted().setValue(patientClericalTask.getCompletedBy());
		form.dtimCompleted().setValue(patientClericalTask.getCompletedDateTime());
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save(PatientClericalTaskStatus.OUTSTANDING))
			open();
	}
	
	private boolean save(PatientClericalTaskStatus status) 
	{
			
		PatientClericalTaskVo patClericalToSave = populateDataFromScreen(form.getLocalContext().getlocalContextClericalTask());
		patClericalToSave.setStatus(status);

		String[] errors = patClericalToSave.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors); 
			return false;
		}
				
		//SOE for EDIT
		if (patClericalToSave.getID_PatientClericalTaskIsNotNull()&& domain.isStale(patClericalToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		try
		{	
			form.getLocalContext().setlocalContextClericalTask(domain.savePatientClericalTask(patClericalToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}	
	
		return true;		
	}

	private PatientClericalTaskVo populateDataFromScreen(PatientClericalTaskVo patClericalTask) 
	{
		if(patClericalTask == null)
			patClericalTask = new PatientClericalTaskVo();
		
		if (patClericalTask.getPatient()==null && form.getGlobalContext().Core.getPatientShortIsNotNull())//WDEV-14080
		{
			patClericalTask.setPatient(new PatientListVo(form.getGlobalContext().Core.getPatientShort().getID_Patient(), form.getGlobalContext().Core.getPatientShort().getVersion_Patient()));
		}
		
		if (patClericalTask.getInvestigation()==null)
		{	
			//WDEV-14080
			if (form.getGlobalContext().OCRR.getCurrentPathRadResultIsNotNull())
			{
				patClericalTask.setInvestigation(form.getGlobalContext().OCRR.getCurrentPathRadResult().getOrderInvestigation());
			}else if (form.getGlobalContext().Core.getPatientClericalTaskIsNotNull())
			{
				patClericalTask.setInvestigation(form.getGlobalContext().Core.getPatientClericalTask().getInvestigation());
			}
		}
		
		patClericalTask.setRequestor((MemberOfStaffLiteVo)form.ccRequestor().getValue());
		patClericalTask.setRequestedDateTime(form.dtimRequested().getValue());
		patClericalTask.setAllocatedTo((MemberOfStaffLiteVo)form.ccAllocate().getValue());
		patClericalTask.setComment(form.txtComment().getValue());
		patClericalTask.setCompletedBy((MemberOfStaffLiteVo)form.ccCompleted().getValue());
		patClericalTask.setCompletedDateTime(form.dtimCompleted().getValue());
		
		return patClericalTask;	
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	private void updateControlsState() 
	{
		//WDEV-14080
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdPatClericalTask().getValue()!=null && form.getLocalContext().getlocalContextClericalTaskIsNotNull() && form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.OUTSTANDING));
		form.btnTaskComplete().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdPatClericalTask().getValue()!=null && form.getLocalContext().getlocalContextClericalTaskIsNotNull() &&form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.OUTSTANDING));
		
		form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && engine.hasRight(AppRight.CAN_ALLOCATE_PATIENT_CLERICAL_TASKS));
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW));
				
		form.ccRequestor().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.ccAllocate().setEnabled(form.getMode().equals(FormMode.EDIT));
		
		form.lblCompletedBy().setVisible(form.getLocalContext().getlocalContextClericalTaskIsNotNull() && form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.COMPLETED));
		form.ccCompleted().setVisible(form.getLocalContext().getlocalContextClericalTaskIsNotNull() && form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.COMPLETED));
		form.lblCompletedOn().setVisible(form.getLocalContext().getlocalContextClericalTaskIsNotNull() && form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.COMPLETED));
		form.dtimCompleted().setVisible(form.getLocalContext().getlocalContextClericalTaskIsNotNull() && form.getLocalContext().getlocalContextClericalTask().getStatus().equals(PatientClericalTaskStatus.COMPLETED));
		
		//FB latest changes for WDEV-13879 - 12.01.2012
		form.ccCompleted().setEnabled(false);
		form.dtimCompleted().setEnabled(false);
		
	}
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		initialize();
		open();	
	}
	
	private void initialize() 
	{
		form.ccRequestor().isRequired(true);
		form.ccAllocate().isRequired(true);
		
		//WDEV-14080
		if (form.getLocalContext().getlocalContextClericalTaskIsNotNull())
		{
			form.getLocalContext().setlocalContextClericalTask(domain.getPatientClericalTask(form.getLocalContext().getlocalContextClericalTask()));
		}else if (form.getGlobalContext().Core.getPatientClericalTaskIsNotNull())
		{
			form.getLocalContext().setlocalContextClericalTask(domain.getPatientClericalTask(form.getGlobalContext().Core.getPatientClericalTask()));
		}
		
	}

	@Override
	//WDEV-14080
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		form.getLocalContext().setlocalContextClericalTask(null);
		form.grdPatClericalTask().setValue(null);
		
		clearInstanceControls();
		
		Object mos = domain.getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			form.ccRequestor().setValue((MemberOfStaffLiteVo)mos);	
		}
		
		form.dtimRequested().setValue(new DateTime());
		form.setMode(FormMode.EDIT);
	}

	@Override
	//WDEV-14080
	protected void onGrdPatClericalTaskSelectionChanged()throws PresentationLogicException 
	{
		getSelectedInstance();
		updateControlsState();
	}
	
	//WDEV-14080
	private void getSelectedInstance() 
	{
		if(form.grdPatClericalTask().getValue() instanceof PatientClericalTaskVo)
		{
			form.getLocalContext().setlocalContextClericalTask(domain.getPatientClericalTask(form.grdPatClericalTask().getValue()));
			populateInstanceControls(form.getLocalContext().getlocalContextClericalTask());	
		}	
		
	}

}
