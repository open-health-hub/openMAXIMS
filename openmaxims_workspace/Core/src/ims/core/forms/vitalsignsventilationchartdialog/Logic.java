//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50106.1515)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignsventilationchartdialog;

import ims.core.vo.DailyFluidBalanceVo;
import ims.core.vo.FluidBalanceDetailsVo;
import ims.core.vo.FluidBalanceDetailsVoCollection;
import ims.core.vo.FluidBalanceInstanceVo;
import ims.core.vo.FluidBalanceInstanceVoCollection;
import ims.core.vo.ShiftDetailsVo;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VSOxygenSaturation;
import ims.core.vo.VSPulse;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VSVentilationChartVo;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.lookups.FluidBalanceType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{	
		form.customControlAuthoring().setIsRequiredPropertyToControls(true);
		VitalSignsVo vo = form.getGlobalContext().Core.getVitalSign();
		if (vo != null)
		{
			populateForm(vo);
	
			form.setcustomControlAuthoringEnabled(false);
			form.dteTaken().setEnabled(false);
			form.timTaken().setEnabled(false);
		}
		else
		{
			form.dteTaken().setEnabled(true);
			form.timTaken().setEnabled(true);

			// New include default values
			form.dteTaken().setValue(new ims.framework.utils.Date());
			form.timTaken().setValue(new ims.framework.utils.Time());
			form.customControlAuthoring().initializeComponent();
			form.setcustomControlAuthoringEnabled(true);
		}
		
		updateControlState();
	}
	
	private void updateControlState()
	{
		if(form.chkonFiO2().getValue())
			form.intFractionrate().setEnabled(true);
		else
		{
			form.intFractionrate().setEnabled(false);
			form.intFractionrate().setValue(null);
		}
	}

	private void populateForm(VitalSignsVo vo)
	{
		form.dteTaken().setValue(vo.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(vo.getVitalsTakenDateTime().getTime());
		form.customControlAuthoring().setValue(vo.getAuthoringInformation());
			
		if (vo.getVentilationChartIsNotNull())
		{
			form.cmbMode().setValue(vo.getVentilationChart().getMode());
			form.cmbPainScale().setValue(vo.getVentilationChart().getPainScale());
			form.intRespiratoryRate().setValue(vo.getVentilationChart().getRate());
			form.cmbPosition().setValue(vo.getVentilationChart().getPosition());
			form.cmbPyhsio().setValue(vo.getVentilationChart().getPhysio());
			form.cmbSuction().setValue(vo.getVentilationChart().getSuction());
			form.intPeakPressure().setValue(vo.getVentilationChart().getPeakPressure());
			form.txtPEEPCPAP().setValue(vo.getVentilationChart().getPEEPCPAP());
			
			form.intSpontaneousMV().setValue(vo.getVentilationChart().getSpontaneousMV());
			form.cmbCuff().setValue(vo.getVentilationChart().getCuff());
			form.decHumidifierTemp().setValue(vo.getVentilationChart().getHumidifierTemp());
			form.ansProbeChange().setValue(vo.getVentilationChart().getProbeChange());
		}
		
		if (vo.getBloodPressureIsNotNull())
		{
			form.decBPSystolic().setValue(vo.getBloodPressure().getBPSittingSys());
			form.decBPDiastolic().setValue(vo.getBloodPressure().getBPSittingDias());
		}
		if (vo.getTemperatureIsNotNull())
		{
			form.decTemperature().setValue(vo.getTemperature().getTemperature());
		}
		if (vo.getPulseIsNotNull())
		{
			form.intPulseRadial().setValue(vo.getPulse().getPulseRateRadial());
			form.intPulseApex().setValue(vo.getPulse().getPulseRateApex());
		}
		if (vo.getLungFunctionTestIsNotNull())
		{
			form.intTidalVolume().setValue(vo.getLungFunctionTest().getTidalVolume());
			form.intMinuteVolume().setValue(vo.getLungFunctionTest().getMinuteVolume());
		}
		if (vo.getRespiratoryIsNotNull())
		{
			form.intSpontaneousRate().setValue(vo.getRespiratory().getRespRate());
		}
		if (vo.getOxygenSaturationIsNotNull())
		{
			form.intOxygenSaturation().setValue(vo.getOxygenSaturation().getOxygenSaturationLevel());
			if(vo.getOxygenSaturation().getIsOnFiO2IsNotNull())
				form.chkonFiO2().setValue(vo.getOxygenSaturation().getIsOnFiO2());
			form.intFractionrate().setValue(vo.getOxygenSaturation().getFractionRate());
		}
		if (vo.getVentilationChart().getFluidBalanceInstanceIsNotNull())
		{
			FluidBalanceInstanceVo bal = vo.getVentilationChart().getFluidBalanceInstance();
			if (bal.getFluidIntakeIsNotNull())
			{
				FluidBalanceDetailsVoCollection coll =bal.getFluidIntake();
				for (int i=0; i<coll.size(); i++)
				{
					FluidBalanceDetailsVo det = coll.get(i);
					if (det.getType().equals(FluidBalanceType.ORAL))
						form.intOral().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.FLUSHDRUGS))
						form.intFlushDrugs().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.CVP))
						form.intCVP().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.IVINTAKE))
						form.intIV().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.NGFEED))//WDEV-1666
						form.intNGFeeds().setValue(det.getValue());
				}
			}
			if (bal.getFluidOutputIsNotNull())
			{
				FluidBalanceDetailsVoCollection coll =bal.getFluidOutput();
				for (int i=0; i<coll.size(); i++)
				{
					FluidBalanceDetailsVo det = coll.get(i);
					if (det.getType().equals(FluidBalanceType.URINE))
						form.intUrine().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.GASTRIC))
						form.intGastric().setValue(det.getValue());
					else if (det.getType().equals(FluidBalanceType.DRAINS))
						form.intDrains().setValue(det.getValue());
				}
			}

		}
		
	}
	protected void onBCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private boolean preValidate()
	{
		if(form.customControlAuthoring().getValue() == null)
		{
			engine.showMessage("'Authoring Hcp' and 'Authoring Date/Time' are mandatory.");
			return false;
		}
		
		if(form.dteTaken().getValue() != null && form.timTaken().getValue() != null)
		{
			if(form.dteTaken().getValue().isGreaterThan(new Date()))
			{
				engine.showMessage("'Date/Time Taken' can not be in the future.");
				return false;
			}
		}
		else{
			engine.showMessage("'Date/Time Taken' is mandatory.");
			return false;
		}
		
		DateTime startShiftDateTime = getStartShiftDateTime(form.dteTaken().getValue(), form.timTaken().getValue());
		ShiftDetailsVo shiftDetailsVo = domain.getShiftDetails(startShiftDateTime, form.getGlobalContext().Core.getCurrentCareContext());

		if(shiftDetailsVo != null)
		{
			VitalSignsVo vc = domain.getVentilationChartByShiftAndTime(shiftDetailsVo, new DateTime(form.dteTaken().getValue(), form.timTaken().getValue()));

			if(vc != null)
			{
				engine.showMessage("A Ventilation Chart record already exists for this hour, please modify the time.");
				return false;
			}
		}
		
		if(form.chkonFiO2().getValue())
		{
			if(form.intFractionrate().getValue() == null)
			{
				engine.showMessage("Please enter value for O2 Sats % rate.") ;
				return false;
			}	
		}
		
		return true;
	}
	
	protected void checkMinDataFromScreen() throws PresentationLogicException
	{
		boolean bVentilationChartData = true;
		
		VitalSignsVo voSign = form.getLocalContext().getRecordToBeSaved();
		if(voSign != null)
		{
			if(voSign.getVentilationChartIsNotNull())
			{
				if ((voSign.getVentilationChart().countFieldsWithValue() < 1))
					bVentilationChartData = false;
			}
			else
				bVentilationChartData = false;
		}
		
		if (!bVentilationChartData)
			throw new PresentationLogicException("Please enter the minimum required fields.");
	}
	
	private boolean save(VitalSignsVo voSign)
	{
		
		
		
		VitalSignsVo voVitalSign = new VitalSignsVo();
		int vc =0;
		int bp =0;
		int lft = 0;
		int temp = 0;
		int pulse = 0;
		int oxysat = 0;
		
		if(voSign.getLungFunctionTestIsNotNull())
			lft = voSign.getLungFunctionTest().countFieldsWithValue();
			
		if (voSign.getBloodPressureIsNotNull())
			bp= voSign.getBloodPressure().countFieldsWithValue();
				
		if(voSign.getVentilationChartIsNotNull())
			vc = voSign.getVentilationChart().countFieldsWithValue();
		if(voSign.getTemperatureIsNotNull())
			temp = voSign.getTemperature().countFieldsWithValue();
		if(voSign.getPulseIsNotNull())
			pulse = voSign.getPulse().countFieldsWithValue();
		
		if(voSign.getOxygenSaturationIsNotNull())
			oxysat = voSign.getOxygenSaturation().countFieldsWithValue();
		
		
		int fieldsEntered = voSign.countFieldsWithValue();
		
		
		String[] arrErrors;
		
		if( (fieldsEntered == 5 && pulse == 0 && temp == 0 && vc ==1  && bp ==0  && oxysat == 0)||(fieldsEntered == 7 && pulse == 0 && temp == 0 && vc ==1  && bp ==0  && oxysat == 0 && voSign.getID_VitalSigns() != null && voSign.getIsVentilationChartRecordIsNotNull()&& voSign.getRecordedSignsIsNotNull()))
		{
			
			
			String []error = new String[] {"No ventilation Chart measurements entered  \n\r Please enter at least one other value"};  
			 arrErrors = voSign.validate(error);
		}
		else
		arrErrors = voSign.validate();
		
	
		
		
		if(arrErrors == null)
		{
			try 
			{
				
				
				voVitalSign = domain.saveVentilationChartRecord(voSign);
				form.getGlobalContext().Core.setVitalSign(voVitalSign);
				//need to update the VentilationChartDateTime globalContext
				if(voVitalSign.getAuthoringInformationIsNotNull())
				{
					DateTime dt = voVitalSign.getAuthoringInformation().getAuthoringDateTime();
					DateTime[] dates1 = form.getGlobalContext().Core.getVentilationChartDateTime();
					//must create a new array as size of old cant be increased. 
					DateTime[] dates2 = null;
					int x;
					if(dates1 == null)
					{
						dates2 = new DateTime[1];
						x = 0;
					}
					else
					{
						dates2 = new DateTime[dates1.length+1];
						 x = dates1.length;
						for(int z=0;z<dates1.length;z++)
						{
							dates2[z]= dates1[z];
						}
					}
				
					if(dt != null)
					{
						dates2[x]= dt;
						form.getGlobalContext().Core.setVentilationChartDateTime(dates2);
					}
				}
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage("Data has been modified, screen will be refreshed");
			}
			catch (DomainInterfaceException e)
			{
				// Thrown if a record already exists for that hour
				engine.showMessage(e.getMessage());
				return false;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;	
		}
		
		return true;
	}
	
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Core.getVitalSign()==null)
		{
			if(!preValidate())
				return;
		}
		else //WDEV-15219
		{
			if(form.chkonFiO2().getValue())
			{
				if(form.intFractionrate().getValue() == null)
				{
					engine.showMessage("Please enter value for O2 Sats % rate.") ;
					return;
				}	
			}
		}

		form.getLocalContext().setShouldDisplayDialog(null);
		try
		{
			VitalSignsVo voSign = populateDataFromScreen();
			form.getLocalContext().setRecordToBeSaved(voSign);
			
			if(!checkForFluidInputData())
				checkMinDataFromScreen();
			
		}
		catch (PresentationLogicException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		if(form.getLocalContext().getShouldDisplayDialogIsNotNull() && form.getLocalContext().getShouldDisplayDialog().booleanValue())
		{
			form.getGlobalContext().Core.setYesNoDialogMessage("Fluid Balance Details exist with a time later than the selected time. Do you wish to continue? ");
			engine.open(form.getForms().Core.YesNoDialog);
			return;
		}
		
		saveAndClose();
	}
	private boolean checkForFluidInputData()
	{
		if(form.intOral().getValue() != null || form.intFlushDrugs().getValue() != null || form.intCVP().getValue() != null 
				|| form.intIV().getValue() != null || form.intNGFeeds().getValue() != null)//WDEV-1666
			return true;

		if(form.intDrains().getValue() != null || form.intGastric().getValue() != null || form.intUrine().getValue() != null)
			engine.showMessage("There must be Fluid Input data if entering Fluid Output data.");
		
		form.intDrains().setValue(null);
		form.intGastric().setValue(null);
		form.intUrine().setValue(null);
		return false;
	}

	private void saveAndClose()
	{
		if(save(form.getLocalContext().getRecordToBeSaved()))
		{
			engine.close(DialogResult.OK);
		}
	}
	
	private VitalSignsVo populateDataFromScreen()
	{
		VitalSignsVo voVitalSigns;
		boolean resultCheck = false;
		
		if(form.getGlobalContext().Core.getVitalSignIsNotNull())
			voVitalSigns = form.getGlobalContext().Core.getVitalSign(); //update
		else
			voVitalSigns = new VitalSignsVo();
		
		//Vital Signs
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			voVitalSigns.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			voVitalSigns.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voVitalSigns.setAuthoringInformation(form.customControlAuthoring().getValue());
		voVitalSigns.setVitalsTakenDateTime(new ims.framework.utils.DateTime(form.dteTaken().getValue(), form.timTaken().getValue()));
		
		if (form.decTemperature().getValue() != null)
		{
			VSTemperature tempVo = voVitalSigns.getTemperature();
			if (tempVo == null)
				tempVo = new VSTemperature();
			tempVo.setTemperature(form.decTemperature().getValue());
			voVitalSigns.setTemperature(tempVo);
		}
		if(form.decTemperature().getValue() == null) //so it will be cleared on an update
		{
			voVitalSigns.setTemperature(null);
		}
		
		if (form.decBPDiastolic().getValue() != null || form.decBPSystolic().getValue() != null)
		{
			VSBloodPressure bpVo = voVitalSigns.getBloodPressure();
			if (bpVo == null)
				bpVo = new VSBloodPressure();
			bpVo.setBPSittingDias(form.decBPDiastolic().getValue());
			bpVo.setBPSittingSys(form.decBPSystolic().getValue());
			voVitalSigns.setBloodPressure(bpVo);
		}
		else if(form.decBPDiastolic().getValue() == null && form.decBPSystolic().getValue() == null)//to clear them out
		{																							//on an update.
			voVitalSigns.setBloodPressure(null);
		}
		
		if (form.intPulseRadial().getValue() != null || form.intPulseApex().getValue() != null)
		{
			VSPulse pulseVo = voVitalSigns.getPulse();
			if (pulseVo == null)
				pulseVo = new VSPulse();
				
			pulseVo.setPulseRateRadial(form.intPulseRadial().getValue());
			pulseVo.setPulseRateApex(form.intPulseApex().getValue());	
			voVitalSigns.setPulse(pulseVo);
		}
		if (form.intPulseRadial().getValue() == null && form.intPulseApex().getValue() == null)
		{
			voVitalSigns.setPulse(null);
		}
		
		if (form.intMinuteVolume().getValue() != null || form.intTidalVolume().getValue() != null)
		{
			VSLungFunctionTestVo voLungFunction = voVitalSigns.getLungFunctionTest();
			if (voLungFunction == null)
				voLungFunction = new VSLungFunctionTestVo();
			voLungFunction.setMinuteVolume(form.intMinuteVolume().getValue());
			voLungFunction.setTidalVolume(form.intTidalVolume().getValue());
			voVitalSigns.setLungFunctionTest(voLungFunction);
		}
		if (form.intMinuteVolume().getValue() == null && form.intTidalVolume().getValue() == null)
		{
			voVitalSigns.setLungFunctionTest(null);
		}

		if (form.intSpontaneousRate().getValue() != null)
		{
			VSRespirations respVo = voVitalSigns.getRespiratory();
			if (respVo == null)
				respVo = new VSRespirations();
			respVo.setRespRate(form.intSpontaneousRate().getValue());
			voVitalSigns.setRespiratory(respVo);
		}
		if(form.intSpontaneousRate().getValue() == null) //so on an update if it is cleared it will be set to null
		{
			voVitalSigns.setRespiratory(null);
		}
	
		if (form.intOxygenSaturation().getValue() != null || form.intFractionrate().getValue() != null)
		{
			VSOxygenSaturation satsVo = voVitalSigns.getOxygenSaturation();
			if (satsVo == null)
				satsVo = new VSOxygenSaturation();
			satsVo.setOxygenSaturationLevel(form.intOxygenSaturation().getValue());
			satsVo.setIsOnFiO2(form.chkonFiO2().getValue());
			satsVo.setFractionRate(form.intFractionrate().getValue());
			
			voVitalSigns.setOxygenSaturation(satsVo);
		}
		if (form.intOxygenSaturation().getValue() == null && form.chkonFiO2().getValue() == false && form.intFractionrate().getValue() == null)
		{
			voVitalSigns.setOxygenSaturation(null);
		}
		
		VSVentilationChartVo chart = voVitalSigns.getVentilationChart();
		if (chart == null)
			chart = new VSVentilationChartVo();
		
		chart.setCuff(form.cmbCuff().getValue());
		chart.setHumidifierTemp(form.decHumidifierTemp().getValue());
		chart.setProbeChange(form.ansProbeChange().getValue());
		
		chart.setMode(form.cmbMode().getValue());
		chart.setPainScale(form.cmbPainScale().getValue());
		chart.setPeakPressure(form.intPeakPressure().getValue());
		chart.setPEEPCPAP(form.txtPEEPCPAP().getValue());
		chart.setPhysio(form.cmbPyhsio().getValue());
		chart.setPosition(form.cmbPosition().getValue());
		chart.setSpontaneousMV(form.intSpontaneousMV().getValue());
		chart.setRate(form.intRespiratoryRate().getValue());
		chart.setSuction(form.cmbSuction().getValue());

		//Fluid Balance
		FluidBalanceInstanceVo bal = chart.getFluidBalanceInstance(); //if bal is not empty, then its an update
		if(form.intOral().getValue() != null || form.intFlushDrugs().getValue() != null ||
				form.intCVP().getValue() != null || form.intIV().getValue() != null || form.intNGFeeds().getValue() != null)//WDEV-1666
		{
			if (bal == null){
				bal = new FluidBalanceInstanceVo();	
				bal.setAuthoringInformation(form.customControlAuthoring().getValue());
			}
		}
		//Check is there a Fluid Balance record for this date and time, if so add the new record to it.
		DateTime startShiftDateTime = getStartShiftDateTime(form.dteTaken().getValue(), form.timTaken().getValue());
		ShiftDetailsVo shiftDetailsVo = domain.getShiftDetails(startShiftDateTime, form.getGlobalContext().Core.getCurrentCareContext());
		
		if(shiftDetailsVo == null)
		{
			shiftDetailsVo = new ShiftDetailsVo();
			shiftDetailsVo.setStartDateTime(startShiftDateTime);
			shiftDetailsVo.setEndDateTime(new DateTime(startShiftDateTime.getJavaDate()).addDays(1).addSeconds(-1));
			shiftDetailsVo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			shiftDetailsVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		DailyFluidBalanceVo voDaily = domain.listFluidBalance(startShiftDateTime, form.getGlobalContext().Core.getCurrentCareContext());
		if(voDaily == null)
		{
			//new 
			voDaily = new DailyFluidBalanceVo();
			//voDaily.setRecordingHCP((Hcp)domain.getHcpUser());
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				voDaily.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			if(form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
				voDaily.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		chart.setShiftDetails(shiftDetailsVo);
		voDaily.setShiftDetails(shiftDetailsVo);
		
		if(bal != null)
		{
			// Fluid Intake Values
			FluidBalanceDetailsVoCollection intakeFluidColl = new FluidBalanceDetailsVoCollection();
			int totalIntake=0;
			if (form.intOral().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidIntake(), FluidBalanceType.ORAL);
				balVo.setValue(form.intOral().getValue());
				intakeFluidColl.add(balVo);
				totalIntake+= form.intOral().getValue().intValue();
			}
			if (form.intFlushDrugs().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidIntake(), FluidBalanceType.FLUSHDRUGS);
				balVo.setValue(form.intFlushDrugs().getValue());
				intakeFluidColl.add(balVo);
				totalIntake += form.intFlushDrugs().getValue().intValue();
			}
			if (form.intCVP().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidIntake(), FluidBalanceType.CVP);
				balVo.setValue(form.intCVP().getValue());
				intakeFluidColl.add(balVo);
				totalIntake += form.intCVP().getValue().intValue();
			}
			if (form.intIV().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidIntake(), FluidBalanceType.IVINTAKE);
				balVo.setValue(form.intIV().getValue());
				intakeFluidColl.add(balVo);
				totalIntake += form.intIV().getValue().intValue();
			}
			if (form.intNGFeeds().getValue() != null)//WDEV-1666
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidIntake(), FluidBalanceType.NGFEED);
				balVo.setValue(form.intNGFeeds().getValue());
				intakeFluidColl.add(balVo);
				totalIntake += form.intNGFeeds().getValue().intValue();
			}
			bal.setFluidIntake(intakeFluidColl);
			bal.setTotalIntake(new Integer(totalIntake)); 
	
			// Fluid Output Values
			FluidBalanceDetailsVoCollection outputFluidColl = new FluidBalanceDetailsVoCollection();
			
			int totalOutput=0;
			if (form.intUrine().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidOutput(), FluidBalanceType.URINE);
				balVo.setValue(form.intUrine().getValue());
				outputFluidColl.add(balVo);
				totalOutput+= form.intUrine().getValue().intValue();
			}
			if (form.intGastric().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidOutput(), FluidBalanceType.GASTRIC);
				balVo.setValue(form.intGastric().getValue());
				outputFluidColl.add(balVo);
				totalOutput += form.intGastric().getValue().intValue();
			}
			if (form.intDrains().getValue() != null)
			{
				FluidBalanceDetailsVo balVo = getBalanceVo(bal.getFluidOutput(), FluidBalanceType.DRAINS);
				balVo.setValue(form.intDrains().getValue());
				outputFluidColl.add(balVo);
				totalOutput += form.intDrains().getValue().intValue();
			}
			bal.setFluidOutput(outputFluidColl);
			bal.setTotalOutput(new Integer(totalOutput));
			
			//setting the balance of an instance
			if(bal.getTotalIntake()!= null && bal.getTotalOutput()!= null)
				bal.setBalance(new Integer(bal.getTotalIntake().intValue() - bal.getTotalOutput().intValue()));
			if(bal.getTotalIntake()!= null && bal.getTotalOutput()== null)
				bal.setBalance(new Integer(bal.getTotalIntake().intValue()));
			if(bal.getTotalIntake()== null && bal.getTotalOutput()!= null)
				bal.setBalance(new Integer(bal.getTotalOutput().intValue()));
			
			bal.setFluidBalanceDate(form.dteTaken().getValue());
			bal.setStartTime(form.timTaken().getValue());
			
			bal.setVentilationChart(chart);
			
			//if chart.getFluidBalance not empty then it is on an update, dont want to checkExistingTime,if its just updating
			if(chart.getFluidBalanceInstance() == null && voDaily != null && bal.getFluidIntakeIsNotNull() && bal.getFluidOutputIsNotNull()
					&& (bal.getFluidIntake().size()>0 || bal.getFluidIntake().size()>0))
				resultCheck = checkExistingTime(voDaily, bal);
		}
		form.getLocalContext().setShouldDisplayDialog(new Boolean(resultCheck));
		
		if(voDaily.getFluidBalanceInstances() == null)
		{
			FluidBalanceInstanceVoCollection voFluidBallCol = new FluidBalanceInstanceVoCollection();
			voDaily.setFluidBalanceInstances(voFluidBallCol);
		}
		
		if(chart.getFluidBalanceInstance() == null && bal != null) //if is not null then its an update
			voDaily.getFluidBalanceInstances().add(bal);
		
		chart.setDailyFluidBalance(voDaily);
		
		if(bal != null)
			chart.setFluidBalanceInstance(bal);
	
		//voVentilationChartRecords.setVentilationChart(chart);
		voVitalSigns.setVentilationChart(chart);
		return voVitalSigns;
	}
	
	private DateTime getStartShiftDateTime(Date newFluidBalDate, Time timeTaken)
	{
		//if the time is less than 08:00 then it needs to go in the day befores shift, i.e.
		//29/11/05 07:00, this doesnt belong to 29/11/05 08:00 - 30/11/05 08:00 it belongs to 28/11/05 08:00-29/11/05 08:00
		//must check does the newTime fall in between the existing shift (08:00-08:00)
		Time shiftTime = new Time();
		shiftTime.setHour(8);
		shiftTime.setMinute(0);
		shiftTime.setSecond(0);
		
		Date startShiftDate;
		if(timeTaken.isLessThan(shiftTime))
		{
			startShiftDate = new Date(newFluidBalDate).addDay(-1);
		}
		else
		{
			startShiftDate = new Date(newFluidBalDate);
		}
		
		return new DateTime(startShiftDate, shiftTime);
	}

	private boolean checkExistingTime(DailyFluidBalanceVo voDaily, FluidBalanceInstanceVo voFluidBalInst)
	{
		FluidBalanceInstanceVoCollection voFluidBalInstances = voDaily.getFluidBalanceInstances();
		boolean result = false;
		if(voFluidBalInstances != null)
		{
			for(int x=0; x<voFluidBalInstances.size(); x++)
			{
				FluidBalanceInstanceVo voFluidBalInstance = voFluidBalInstances.get(x);
				Time existingTime = voFluidBalInstance.getStartTime();
				Time newTime = voFluidBalInst.getStartTime();
			 
				if(newTime.isLessOrEqualThan(existingTime))
				{
					result = true;
					break;
				}
			}
			return result;
		}	
		return result;
	}

	private FluidBalanceDetailsVo getBalanceVo(FluidBalanceDetailsVoCollection coll, FluidBalanceType type)
	{
		FluidBalanceDetailsVo balVo;
		if (coll != null)
		{
			
			for (int i=0; i<coll.size(); i++)
			{
				balVo = coll.get(i);
				if (balVo.getType().equals(type))
					return balVo;
			}
		}
		// Setup the initial values for a new one
		balVo =new FluidBalanceDetailsVo(); 
		balVo.setType(type);
		return balVo;
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.YesNoDialog))
		{
			if(result == DialogResult.YES)
			{
				saveAndClose();
			}
			else
			{
				form.getLocalContext().setRecordToBeSaved(null);
			}
		}
	}

	protected void onChkonFiO2ValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}
}
