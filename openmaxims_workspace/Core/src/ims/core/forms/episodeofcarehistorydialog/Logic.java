//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.episodeofcarehistorydialog;


import java.util.Comparator;



import ims.core.forms.episodeofcarehistorydialog.GenForm.grdEpisodeOfCareHistoryRow;
import ims.core.vo.EpisodeOfCareHistVo;
import ims.core.vo.EpisodeOfCareHistVoCollection;
import ims.core.vo.EpisodeOfCareSmallVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdEpisodeOfCareHistory().getRows().clear();
		EpisodeOfCareSmallVo tempVo = form.getGlobalContext().Clinical.getEpisodeOfCareWithHistory();
		if(tempVo != null && tempVo.getEpisodeOfCareHistoryIsNotNull() && tempVo.getEpisodeOfCareHistory().size() > 0)
		{
			EpisodeOfCareHistVoCollection tempColl = tempVo.getEpisodeOfCareHistory();
			tempColl.sort(new CreationDateComparator(SortOrder.ASCENDING));
			for(int i = 0;i < tempColl.size();i++)
			{
				EpisodeOfCareHistVo voHist = tempColl.get(i);
				if(voHist != null)
					populateChildGrid(voHist);
			}
		}
	}
	protected void populateChildGrid(EpisodeOfCareHistVo voHist)
	{
		if(voHist == null)
			return;
		grdEpisodeOfCareHistoryRow careContextRow = form.grdEpisodeOfCareHistory().getRows().newRow();
		careContextRow.setColumnSpecialty(voHist.getSpecialtyIsNotNull() ? voHist.getSpecialty().getIItemText():"");
		careContextRow.setTooltipForColumnSpecialty(voHist.getSpecialtyIsNotNull() ? voHist.getSpecialty().getIItemText():"");
		careContextRow.setColumnResponsibleHCP(voHist.getResponsibleHCPIsNotNull() ? voHist.getResponsibleHCP().getMos().toString():"");
		careContextRow.setTooltipForColumnResponsibleHCP(voHist.getResponsibleHCPIsNotNull() ? voHist.getResponsibleHCP().getMos().toString():"");
		careContextRow.setColumnStartDate(voHist.getStartDateIsNotNull() ? voHist.getStartDate().toString():"");
		careContextRow.setTooltipForColumnStartDate(voHist.getStartDateIsNotNull() ? voHist.getStartDate().toString():"");
		careContextRow.setColumnEndDate(voHist.getEndDateIsNotNull() ? voHist.getEndDate().toString():"");
		careContextRow.setTooltipForColumnEndDate(voHist.getEndDateIsNotNull() ? voHist.getEndDate().toString():"");
		careContextRow.setColumnChangedDateTime(voHist.getSysInformationIsNotNull() &&  voHist.getSysInformation().getCreationDateTime() != null ? voHist.getSysInformation().getCreationDateTime().toString():"");
		careContextRow.setTooltipForColumnChangedDateTime(voHist.getSysInformationIsNotNull() &&  voHist.getSysInformation().getCreationDateTime() != null ? voHist.getSysInformation().getCreationDateTime().toString():"");
		
		
		
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	public class CreationDateComparator implements Comparator
	{
		private int direction = 1;
		
		public CreationDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public CreationDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof EpisodeOfCareHistVo )
			{
				EpisodeOfCareHistVo ps1 = (EpisodeOfCareHistVo)ob1;
				pdate1 = ps1 != null && ps1.getSysInformationIsNotNull() ? ps1.getSysInformation().getCreationDateTime():null;
			}
			if(ob2 instanceof EpisodeOfCareHistVo)
			{
				EpisodeOfCareHistVo ps2 = (EpisodeOfCareHistVo)ob2;
				pdate2 = ps2 != null && ps2.getSysInformationIsNotNull() ? ps2.getSysInformation().getCreationDateTime():null;
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
}
