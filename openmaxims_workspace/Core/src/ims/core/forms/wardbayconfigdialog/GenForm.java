//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.wardbayconfigdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTemplatesComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.FloorBedSpaceLayoutLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.FloorBedSpaceLayoutLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.FloorBedSpaceLayoutLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.FloorBedSpaceLayoutLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.FloorBedSpaceLayoutLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.FloorBedSpaceLayoutLiteVo getValue()
		{
			return (ims.core.vo.FloorBedSpaceLayoutLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.FloorBedSpaceLayoutLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdLayoutsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdLayoutsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setBayValueReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isBayValueReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showBayValueOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.LocationLiteVo getBayValue()
		{
			return (ims.core.vo.LocationLiteVo)super.row.get(0);
		}
		public void setBayValue(ims.core.vo.LocationLiteVo value)
		{
			super.row.set(0, value);
		}
		public void setCellBayValueTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setBayReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isBayReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showBayOpened()
		{
			super.row.showOpened(1);
		}
		public String getBay()
		{
			return (String)super.row.get(1);
		}
		public void setBay(String value)
		{
			super.row.set(1, value);
		}
		public void setCellBayTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setBayBedSpaceLayoutReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isBayBedSpaceLayoutReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showBayBedSpaceLayoutOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.controls.GridMutableComboBox getBayBedSpaceLayout()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 2);
		}
		public void setCellBayBedSpaceLayoutTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isActiveReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showActiveOpened()
		{
			super.row.showOpened(3);
		}
		public boolean getActive()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setActive(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellActiveTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.core.vo.BayConfigVo getValue()
		{
			return (ims.core.vo.BayConfigVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.BayConfigVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdLayoutsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdLayoutsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdLayoutsRow get(int index)
		{
			return new grdLayoutsRow(super.collection.get(index));
		}
		public grdLayoutsRow newRow()
		{
			return new grdLayoutsRow(super.collection.newRow());
		}
		public grdLayoutsRow newRow(boolean autoSelect)
		{
			return new grdLayoutsRow(super.collection.newRow(autoSelect));
		}
		public grdLayoutsRow newRowAt(int index)
		{
			return new grdLayoutsRow(super.collection.newRowAt(index));
		}
		public grdLayoutsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdLayoutsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdLayoutsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.core.vo.BayConfigVoCollection getValues()
		{
			ims.core.vo.BayConfigVoCollection listOfValues = new ims.core.vo.BayConfigVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.BayConfigVo getValue()
		{
			return (ims.core.vo.BayConfigVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.BayConfigVo value)
		{
			super.grid.setValue(value);
		}
		public grdLayoutsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdLayoutsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdLayoutsRowCollection getRows()
		{
			return new grdLayoutsRowCollection(super.grid.getRows());
		}
		public grdLayoutsRow getRowByValue(ims.core.vo.BayConfigVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdLayoutsRow(row);
		}
		public void setBayValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getBayValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setBayHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getBayHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setBayBedSpaceLayoutHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getBayBedSpaceLayoutHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	public static class grdSpecialtiesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSpecialtiesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setSpecialtyReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isSpecialtyReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showSpecialtyOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.Specialty getSpecialty()
		{
			return (ims.core.vo.lookups.Specialty)super.row.get(0);
		}
		public void setSpecialty(ims.core.vo.lookups.Specialty value)
		{
			super.row.set(0, value);
		}
		public void setCellSpecialtyTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setMainReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isMainReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showMainOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getMain()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setMain(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellMainTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isSelectReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showSelectOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getSelect()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setSelect(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellSelectTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSpecialtiesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSpecialtiesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSpecialtiesRow get(int index)
		{
			return new grdSpecialtiesRow(super.collection.get(index));
		}
		public grdSpecialtiesRow newRow()
		{
			return new grdSpecialtiesRow(super.collection.newRow());
		}
		public grdSpecialtiesRow newRow(boolean autoSelect)
		{
			return new grdSpecialtiesRow(super.collection.newRow(autoSelect));
		}
		public grdSpecialtiesRow newRowAt(int index)
		{
			return new grdSpecialtiesRow(super.collection.newRowAt(index));
		}
		public grdSpecialtiesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSpecialtiesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSpecialtiesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdSpecialtiesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSpecialtiesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSpecialtiesRowCollection getRows()
		{
			return new grdSpecialtiesRowCollection(super.grid.getRows());
		}
		public grdSpecialtiesRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSpecialtiesRow(row);
		}
		public void setSpecialtyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getSpecialtyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setMainHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getMainHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}

	public static class ansYesNoAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNo option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNo getValue()
		{
			return (ims.core.vo.lookups.YesNo)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(480, 432);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Core.contextMenuWardBayConfigDialog = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Core.contextMenuWardBayConfigDialogADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Core.contextMenuWardBayConfigDialog.add(contextMenus.Core.contextMenuWardBayConfigDialogADDItem);
		contextMenus.Core.contextMenuWardBayConfigDialogREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2780001)))
			contextMenus.Core.contextMenuWardBayConfigDialog.add(contextMenus.Core.contextMenuWardBayConfigDialogREMOVEItem);
		form.registerMenu(contextMenus.Core.contextMenuWardBayConfigDialog);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 168, 248, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Layout :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 40, 248, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Multiple Bays :", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 104, 21, 97, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward Name", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 40, 24, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Current :", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 306, 392, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 386, 392, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 224, 248, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTemplatesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTemplatesTemp);
		cmbTemplatesComboBox cmbTemplates = (cmbTemplatesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTemplatesComboBox.class, m_cmbTemplatesTemp);
		super.addComboBox(cmbTemplates);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 40, 48, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Waiting Area", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 40, 280, 400, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdLayoutsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Core.contextMenuWardBayConfigDialog, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdLayoutsTemp);
		grdLayoutsGrid grdLayouts = (grdLayoutsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdLayoutsGrid.class, m_grdLayoutsTemp);
		grdLayouts.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdLayouts.addStringColumn("Bay Name", 0, 0, 200, false, false, 0, 120, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdLayouts.addMutableComboBoxColumn("Bed Space Layout", 0, 1, 150, false, true, true, false, false, true, -1);
		grdLayouts.addBoolColumn("Active", 0, 1, -1, false, true, 0, true);
		super.addGrid(grdLayouts);
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 40, 80, 400, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdSpecialtiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSpecialtiesTemp);
		grdSpecialtiesGrid grdSpecialties = (grdSpecialtiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtiesGrid.class, m_grdSpecialtiesTemp);
		grdSpecialties.addStringColumn("Specialty", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSpecialties.addBoolColumn("Main", 1, 1, 80, false, true, 0, true);
		grdSpecialties.addBoolColumn("Other", 1, 1, -1, false, false, 0, true);
		super.addGrid(grdSpecialties);

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 248, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansYesNo = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.TRUE});
		super.addControl(tmpansYesNo);
		ansYesNoAnswerBox ansYesNo = (ansYesNoAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansYesNoAnswerBox.class, tmpansYesNo);
		super.addAnswerBox(ansYesNo);
	}


	public Label lblLayout()
	{
		return (Label)super.getControl(0);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public cmbTemplatesComboBox cmbTemplates()
	{
		return (cmbTemplatesComboBox)super.getComboBox(0);
	}
	public CheckBox chkWaiting()
	{
		return (CheckBox)super.getControl(7);
	}
	public grdLayoutsGrid grdLayouts()
	{
		return (grdLayoutsGrid)super.getGrid(0);
	}
	public grdSpecialtiesGrid grdSpecialties()
	{
		return (grdSpecialtiesGrid)super.getGrid(1);
	}
	public ansYesNoAnswerBox ansYesNo()
	{
		return (ansYesNoAnswerBox)super.getAnswerBox(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ActiveLayouts = new ims.framework.ContextVariable("ActiveLayouts", prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__ActiveLayouts_" + componentIdentifier + "");
			cxl_SelectedBay = new ims.framework.ContextVariable("SelectedBay", prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier + "");
			cxl_SelectedBayConfig = new ims.framework.ContextVariable("SelectedBayConfig", prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBayConfig_" + componentIdentifier + "");
		}
		
		public boolean getActiveLayoutsIsNotNull()
		{
			return !cxl_ActiveLayouts.getValueIsNull(context);
		}
		public ims.core.vo.FloorBedSpaceLayoutLiteVoCollection getActiveLayouts()
		{
			return (ims.core.vo.FloorBedSpaceLayoutLiteVoCollection)cxl_ActiveLayouts.getValue(context);
		}
		public void setActiveLayouts(ims.core.vo.FloorBedSpaceLayoutLiteVoCollection value)
		{
			cxl_ActiveLayouts.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveLayouts = null;
		public boolean getSelectedBayIsNotNull()
		{
			return !cxl_SelectedBay.getValueIsNull(context);
		}
		public ims.core.vo.LocationLiteVo getSelectedBay()
		{
			return (ims.core.vo.LocationLiteVo)cxl_SelectedBay.getValue(context);
		}
		public void setSelectedBay(ims.core.vo.LocationLiteVo value)
		{
			cxl_SelectedBay.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedBay = null;
		public boolean getSelectedBayConfigIsNotNull()
		{
			return !cxl_SelectedBayConfig.getValueIsNull(context);
		}
		public ims.core.vo.BayConfigVo getSelectedBayConfig()
		{
			return (ims.core.vo.BayConfigVo)cxl_SelectedBayConfig.getValue(context);
		}
		public void setSelectedBayConfig(ims.core.vo.BayConfigVo value)
		{
			cxl_SelectedBayConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedBayConfig = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public CoreNamespace Core = new CoreNamespace();
		public final class CoreNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class WardBayConfigDialog implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllWardBayConfigDialogMenuItems()
			{
				this.contextMenuWardBayConfigDialogADDItem.setEnabled(false);
				this.contextMenuWardBayConfigDialogREMOVEItem.setEnabled(false);
			}
			public void hideAllWardBayConfigDialogMenuItems()
			{
				this.contextMenuWardBayConfigDialogADDItem.setVisible(false);
				this.contextMenuWardBayConfigDialogREMOVEItem.setVisible(false);
			}
			private Menu contextMenuWardBayConfigDialog;
			public ReadOnlyMenuItem getWardBayConfigDialogADDItem()
			{
				return this.contextMenuWardBayConfigDialogADDItem;
			}
			private MenuItem contextMenuWardBayConfigDialogADDItem;
			public ReadOnlyMenuItem getWardBayConfigDialogREMOVEItem()
			{
				return this.contextMenuWardBayConfigDialogREMOVEItem;
			}
			private MenuItem contextMenuWardBayConfigDialogREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[82];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_STHK.WardBayConfigVo", "BO-1014100014-ID", "ID_WardBayConfig");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_STHK.WardBayConfigVo", "BO-1014100014-MAINSPECIALTY", "MainSpecialty");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_STHK.WardBayConfigVo", "BO-1014100014-ISWAITINGAREA", "IsWaitingArea");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-NAME", "Name");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-TYPE", "Type");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBay_" + componentIdentifier, "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBayConfig_" + componentIdentifier, "BO-1095100004-ID", "ID_BayConfig");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.WardBayConfigDialog.__internal_x_context__SelectedBayConfig_" + componentIdentifier, "BO-1095100004-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
