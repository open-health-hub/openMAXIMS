//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.uploaddocumentdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSourceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DocumentCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DocumentCategory value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DocumentCategory getValue()
		{
			return (ims.core.vo.lookups.DocumentCategory)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DocumentCategory value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.DocumentCreationType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.DocumentCreationType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.DocumentCreationType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.DocumentCreationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.DocumentCreationType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.DocumentCreationType getValue()
		{
			return (ims.core.vo.lookups.DocumentCreationType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.DocumentCreationType value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(85);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(968, 640);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 344, 0, 440, 57, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccImportedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccImportedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(344), new Integer(0), new Integer(440), new Integer(57), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccImportedForm, instance1 } );
		ims.framework.Control m_ccImportedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccImportedForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccImportedControl);
		Menu[] menus1 = m_ccImportedForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}
		ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 344, 51, 443, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccUploadForm = loader.loadComponent(102271, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 1005, skipContextValidation);
		//ims.framework.Control m_ccUploadControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(344), new Integer(51), new Integer(443), new Integer(32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1005), m_ccUploadForm, instance2 } );
		ims.framework.Control m_ccUploadControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1005), m_ccUploadForm, instance2, Boolean.FALSE } );
		super.addControl(m_ccUploadControl);
		Menu[] menus2 = m_ccUploadForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus2.length; x++)
		{
			form.registerMenu(menus2[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 611, 48, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "-Pages-", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 35, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Document Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 59, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Document Source:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Document Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 885, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "  Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 808, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "  Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 144, 8, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 144, 33, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSourceTemp);
		cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
		super.addComboBox(cmbSource);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 144, 57, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTypeTemp);
		cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
		super.addComboBox(cmbType);

		// HTML Viewer Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 952, 504, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 792, 6, 142, 34, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent ccImported()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccImportedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccImportedVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccImportedVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccImportedEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccImportedEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ims.core.forms.upload.IComponent ccUpload()
	{
		return (ims.core.forms.upload.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccUploadValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccUploadVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccUploadVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccUploadEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccUploadEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Label lblPages()
	{
		return (Label)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(8);
	}
	public cmbSourceComboBox cmbSource()
	{
		return (cmbSourceComboBox)super.getComboBox(0);
	}
	public cmbTypeComboBox cmbType()
	{
		return (cmbTypeComboBox)super.getComboBox(1);
	}
	public HTMLViewer htmPreview()
	{
		return (HTMLViewer)super.getControl(11);
	}
	public HTMLViewer htmApplet()
	{
		return (HTMLViewer)super.getControl(12);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
				FindDisabled16 = new ImageHelper(102165, "Images/Core/FindDisabled16.gif", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image FindEnabled16;
			public final ims.framework.utils.Image FindDisabled16;
			public final ims.framework.utils.Image Tick;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_FileName = new ims.framework.ContextVariable("FileName", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__FileName_" + componentIdentifier + "");
			cxl_ScannedFile = new ims.framework.ContextVariable("ScannedFile", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ScannedFile_" + componentIdentifier + "");
			cxl_ServerDocument = new ims.framework.ContextVariable("ServerDocument", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ServerDocument_" + componentIdentifier + "");
			cxl_ImportedFile = new ims.framework.ContextVariable("ImportedFile", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ImportedFile_" + componentIdentifier + "");
			cxl_AbsolutePath = new ims.framework.ContextVariable("AbsolutePath", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__AbsolutePath_" + componentIdentifier + "");
			cxl_ConvertedFile = new ims.framework.ContextVariable("ConvertedFile", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ConvertedFile_" + componentIdentifier + "");
			cxl_ImportedImages = new ims.framework.ContextVariable("ImportedImages", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ImportedImages_" + componentIdentifier + "");
			cxl_UploadedFiles = new ims.framework.ContextVariable("UploadedFiles", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__UploadedFiles_" + componentIdentifier + "");
			cxl_ImportedFiles = new ims.framework.ContextVariable("ImportedFiles", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ImportedFiles_" + componentIdentifier + "");
			cxl_UploadDocumentStoreLevel = new ims.framework.ContextVariable("UploadDocumentStoreLevel", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__UploadDocumentStoreLevel_" + componentIdentifier + "");
			cxl_ScannedPageNo = new ims.framework.ContextVariable("ScannedPageNo", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ScannedPageNo_" + componentIdentifier + "");
			cxl_ImportPageNo = new ims.framework.ContextVariable("ImportPageNo", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ImportPageNo_" + componentIdentifier + "");
			cxl_FinalPDF = new ims.framework.ContextVariable("FinalPDF", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__FinalPDF_" + componentIdentifier + "");
			cxl_FinalPDFFileName = new ims.framework.ContextVariable("FinalPDFFileName", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__FinalPDFFileName_" + componentIdentifier + "");
			cxl_PreviewImages = new ims.framework.ContextVariable("PreviewImages", prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__PreviewImages_" + componentIdentifier + "");
		}
		
		public boolean getFileNameIsNotNull()
		{
			return !cxl_FileName.getValueIsNull(context);
		}
		public String getFileName()
		{
			return (String)cxl_FileName.getValue(context);
		}
		public void setFileName(String value)
		{
			cxl_FileName.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FileName = null;
		public boolean getScannedFileIsNotNull()
		{
			return !cxl_ScannedFile.getValueIsNull(context);
		}
		public String getScannedFile()
		{
			return (String)cxl_ScannedFile.getValue(context);
		}
		public void setScannedFile(String value)
		{
			cxl_ScannedFile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ScannedFile = null;
		public boolean getServerDocumentIsNotNull()
		{
			return !cxl_ServerDocument.getValueIsNull(context);
		}
		public ims.core.vo.ServerDocumentVo getServerDocument()
		{
			return (ims.core.vo.ServerDocumentVo)cxl_ServerDocument.getValue(context);
		}
		public void setServerDocument(ims.core.vo.ServerDocumentVo value)
		{
			cxl_ServerDocument.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ServerDocument = null;
		public boolean getImportedFileIsNotNull()
		{
			return !cxl_ImportedFile.getValueIsNull(context);
		}
		public String getImportedFile()
		{
			return (String)cxl_ImportedFile.getValue(context);
		}
		public void setImportedFile(String value)
		{
			cxl_ImportedFile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImportedFile = null;
		public boolean getAbsolutePathIsNotNull()
		{
			return !cxl_AbsolutePath.getValueIsNull(context);
		}
		public String getAbsolutePath()
		{
			return (String)cxl_AbsolutePath.getValue(context);
		}
		public void setAbsolutePath(String value)
		{
			cxl_AbsolutePath.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AbsolutePath = null;
		public boolean getConvertedFileIsNotNull()
		{
			return !cxl_ConvertedFile.getValueIsNull(context);
		}
		public String getConvertedFile()
		{
			return (String)cxl_ConvertedFile.getValue(context);
		}
		public void setConvertedFile(String value)
		{
			cxl_ConvertedFile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConvertedFile = null;
		public boolean getImportedImagesIsNotNull()
		{
			return !cxl_ImportedImages.getValueIsNull(context);
		}
		public java.util.List getImportedImages()
		{
			return (java.util.List)cxl_ImportedImages.getValue(context);
		}
		public void setImportedImages(java.util.List value)
		{
			cxl_ImportedImages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImportedImages = null;
		public boolean getUploadedFilesIsNotNull()
		{
			return !cxl_UploadedFiles.getValueIsNull(context);
		}
		public java.util.List getUploadedFiles()
		{
			return (java.util.List)cxl_UploadedFiles.getValue(context);
		}
		public void setUploadedFiles(java.util.List value)
		{
			cxl_UploadedFiles.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UploadedFiles = null;
		public boolean getImportedFilesIsNotNull()
		{
			return !cxl_ImportedFiles.getValueIsNull(context);
		}
		public java.util.List getImportedFiles()
		{
			return (java.util.List)cxl_ImportedFiles.getValue(context);
		}
		public void setImportedFiles(java.util.List value)
		{
			cxl_ImportedFiles.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImportedFiles = null;
		public boolean getUploadDocumentStoreLevelIsNotNull()
		{
			return !cxl_UploadDocumentStoreLevel.getValueIsNull(context);
		}
		public ims.core.vo.enums.UploadDocumentStoreLevel getUploadDocumentStoreLevel()
		{
			return (ims.core.vo.enums.UploadDocumentStoreLevel)cxl_UploadDocumentStoreLevel.getValue(context);
		}
		public void setUploadDocumentStoreLevel(ims.core.vo.enums.UploadDocumentStoreLevel value)
		{
			cxl_UploadDocumentStoreLevel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UploadDocumentStoreLevel = null;
		public boolean getScannedPageNoIsNotNull()
		{
			return !cxl_ScannedPageNo.getValueIsNull(context);
		}
		public Integer getScannedPageNo()
		{
			return (Integer)cxl_ScannedPageNo.getValue(context);
		}
		public void setScannedPageNo(Integer value)
		{
			cxl_ScannedPageNo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ScannedPageNo = null;
		public boolean getImportPageNoIsNotNull()
		{
			return !cxl_ImportPageNo.getValueIsNull(context);
		}
		public Integer getImportPageNo()
		{
			return (Integer)cxl_ImportPageNo.getValue(context);
		}
		public void setImportPageNo(Integer value)
		{
			cxl_ImportPageNo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImportPageNo = null;
		public boolean getFinalPDFIsNotNull()
		{
			return !cxl_FinalPDF.getValueIsNull(context);
		}
		public String getFinalPDF()
		{
			return (String)cxl_FinalPDF.getValue(context);
		}
		public void setFinalPDF(String value)
		{
			cxl_FinalPDF.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FinalPDF = null;
		public boolean getFinalPDFFileNameIsNotNull()
		{
			return !cxl_FinalPDFFileName.getValueIsNull(context);
		}
		public String getFinalPDFFileName()
		{
			return (String)cxl_FinalPDFFileName.getValue(context);
		}
		public void setFinalPDFFileName(String value)
		{
			cxl_FinalPDFFileName.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FinalPDFFileName = null;
		public boolean getPreviewImagesIsNotNull()
		{
			return !cxl_PreviewImages.getValueIsNull(context);
		}
		public java.util.List getPreviewImages()
		{
			return (java.util.List)cxl_PreviewImages.getValue(context);
		}
		public void setPreviewImages(java.util.List value)
		{
			cxl_PreviewImages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviewImages = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[142];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-ID", "ID_PatientDocument");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-EPISODEOFCARE", "EpisodeofCare");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-REFERRAL", "Referral");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-NAME", "Name");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CREATIONTYPE", "CreationType");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-STATUS", "Status");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RECORDINGUSER", "RecordingUser");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RECORDINGDATETIME", "RecordingDateTime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-AUTHORINGHCP", "AuthoringHCP");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CORRESPONDENCESTATUS", "CorrespondenceStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-DOCUMENTDATE", "DocumentDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-CLINIC", "Clinic");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-ISLOCKEDFOREDITING", "IsLockedForEditing");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-LOCKEDBYUSER", "LockedByUser");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-LOCKEDONDATETIME", "LockedOnDateTime");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-NOOFCOPIES", "NoOfCopies");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-HISTORICALFILENAME", "HistoricalFileName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-HISTORICDOCID", "HistoricDocId");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-WASPRINTED", "WasPrinted");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-EMAILSTATUS", "EmailStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDocument", "BO-1068100001-COPYPATIENTONCORRESPONDENCE", "CopyPatientOnCorrespondence");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ID", "ID_CatsReferral");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CARECONTEXT", "CareContext");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISCAB", "IsCAB");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-URGENCY", "Urgency");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PATHWAYID", "PathwayID");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ServerDocument_" + componentIdentifier, "BO-1068100000-ID", "ID_ServerDocument");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ServerDocument_" + componentIdentifier, "BO-1068100000-FILENAME", "FileName");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.UploadDocumentDialog.__internal_x_context__ServerDocument_" + componentIdentifier, "BO-1068100000-FILETYPE", "FileType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
