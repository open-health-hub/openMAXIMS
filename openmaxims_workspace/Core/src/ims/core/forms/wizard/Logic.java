//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.71 build 3937.27059)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.forms.wizard;

import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Core.Wizard.getForms() == null || form.getGlobalContext().Core.Wizard.getForms().length == 0)
			throw new PresentationLogicException("No forms to display");
		
		openFirstPage();
	}
	@Override
	protected void onBtnCancelCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnPreviousClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openPreviousPage();
	}
	@Override
	protected void onBtnNextFinishClick() throws ims.framework.exceptions.PresentationLogicException
	{
		openNextPage();
	}
	
	private void openPreviousPage()
	{	
		setCurrentPosition(getCurrentPosition() - 1);
		openPageAtCurrentPosition();				
	}
	private int getCurrentPosition()
	{
		int position = 0;		
		if(form.getLocalContext().getCurrentPosition() != null)
			position = form.getLocalContext().getCurrentPosition();
		return position;
	}
	private void setCurrentPosition(int position)
	{
		form.getLocalContext().setCurrentPosition(position);
	}
	private void openFirstPage()
	{
		setCurrentPosition(0);
		boolean success = openPageAtCurrentPosition();
		while(!success)
		{
			if(isLastPage())
				break;
			setCurrentPosition(getCurrentPosition() + 1);
			success = openPageAtCurrentPosition();
		}
	}
	private boolean isLastPage() 
	{
		return getCurrentPosition() == form.getGlobalContext().Core.Wizard.getForms().length;
	}
	private void openNextPage()
	{
		if(!saveCurrentPage())
			return;
		
		if(getCurrentPosition() == form.getGlobalContext().Core.Wizard.getForms().length)
		{
			engine.close(DialogResult.OK);
		}
		else
		{
			setCurrentPosition(getCurrentPosition() + 1);		
			openPageAtCurrentPosition();
		}
	}
	private boolean saveCurrentPage()
	{
		if(!form.dynamicForm().supportsDataOperations())
			return true;
		
		String[] errors = form.dynamicForm().validateData();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Validation Error(s)", errors);
			return false;
		}
		
		try
		{
			form.dynamicForm().saveData();
		}
		catch (Exception e) 
		{
			engine.showErrors("Save Error", new String[] { e.getMessage() });
			return false;
		}
		
		return true;
	}
	private boolean openPageAtCurrentPosition() 
	{
		try		
		{
			ims.framework.FormName formName = form.getGlobalContext().Core.Wizard.getForms()[getCurrentPosition()];
			form.dynamicForm().open(formName);
			updateControlState();
			return true;
		}
		catch(Exception ex)
		{
			return false;
		}
	}
	private void updateControlState()
	{
		form.btnCancelClose().setEnabled(true);			
		form.btnPrevious().setEnabled(getCurrentPosition() > 0);
		form.btnNextFinish().setEnabled(true);
		if(isLastPage())
		{
			form.btnNextFinish().setText("Finish");
		}
		else
		{
			form.btnNextFinish().setText("Next");
		}
	}
}
