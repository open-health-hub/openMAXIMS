//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40806.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalsignsbp;

import ims.core.vo.VSBloodPressure;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.graphing.GraphingBloodPressure;
import ims.framework.utils.graphing.GraphingPoint;
import ims.framework.utils.graphing.GraphingPointType;

public class Logic extends BaseLogic
{

	protected void onFormOpen() throws FormOpenException 
	{
		//WDEV-14429
		if(isVitalSignsBPForTriage())
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.grpShowBy().setValue(GenForm.grpShowByEnumeration.rdoByDay); 
		form.btnUpdate().setEnabled(false);
		//form.btnPrint().setEnabled(false);
		form.intStandingDiastolic().setEnabled(false);
		form.intStandingSystolic().setEnabled(false);
	
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			form.lnkReturn().setTooltip("Return to Baseline Observations");
		}
		else
		{
			form.lnkReturn().setTooltip("Return to Vital Signs");
		}
		//ends here
		
		if(form.getGlobalContext().Core.getVitalSign() != null  && form.getGlobalContext().Core.getVitalSign().getBloodPressure() != null)
		{
			form.dteShowByDay().setValue(form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime() != null ? form.getGlobalContext().Core.getVitalSign().getVitalsTakenDateTime().getDate() : null);//	WDEV-13117
			form.getLocalContext().setvitalSign(form.getGlobalContext().Core.getVitalSign());
			//displayRecord(form.getGlobalContext().Core.getVitalSign());
			form.btnUpdate().setEnabled(true);
			//form.btnPrint().setEnabled(true);
			listBp();	
			displayRecord(form.getGlobalContext().Core.getVitalSign());	//WDEV-13117
		}
		else
		{
			try {
				onRadioButtongrpShowByValueChanged();
			} catch (PresentationLogicException e) {
				throw new DomainRuntimeException();
			}
		}
	
		updatePrevNextButtons();
		dateIntervalStatus();  //WDEV-13117
	
	}

	private void listBp() 
	{
		VitalSignsVoCollection voCollVitals = null;
		String subTitle = "";
		
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			voCollVitals = domain.listBP(form.dteShowByDay().getValue(),form.getGlobalContext().Core.getCurrentCareContext()); 
			subTitle = "Blood Pressure " + form.dteShowByDay().getValue().toString(DateFormat.STANDARD);
		}
		else
		{
			voCollVitals = domain.listBP(form.dteFrom().getValue(),form.dteTo().getValue(),form.getGlobalContext().Core.getCurrentCareContext());
			subTitle = "Blood Pressure between " + form.dteFrom().getValue().toString(DateFormat.STANDARD) + " - " +  form.dteTo().getValue().toString(DateFormat.STANDARD);
		}
		 
		form.lblBlood().setValue(subTitle);
		form.grhBP().clearAllPoints();
		
		form.grhBP().showYAxisValues();
		
		form.grhBP().setPrintHeaderInfo(subTitle + "\r\n" + form.getGlobalContext().Core.getPatientShort().getPatientInfo());		
		
		VitalSignsVo voVitalSign;
		GraphingBloodPressure point;
		if(voCollVitals != null)
		{
			voCollVitals.sort(SortOrder.ASCENDING);
			
			int nIndex = voCollVitals.size() - 1;

			for(int i=0;i<voCollVitals.size();i++)
			{
				voVitalSign = voCollVitals.get(i);
				point = new GraphingBloodPressure(voVitalSign.getVitalsTakenDateTime(),voVitalSign.getBloodPressure().getBPStandingSys(), voVitalSign.getBloodPressure().getBPStandingDias(), voVitalSign.getBloodPressure().getBPSittingSys(), voVitalSign.getBloodPressure().getBPSittingDias(), voVitalSign.getBloodPressure().getBPLyingSys(), voVitalSign.getBloodPressure().getBPLyingDias(),  voVitalSign,"<b>Comment</b>: " + ((voVitalSign.getBloodPressureIsNotNull() && voVitalSign.getBloodPressure().getCommentIsNotNull()) ? voVitalSign.getBloodPressure().getComment() : ""));   //wdev-12900
				form.grhBP().addPoint(point);
				if(form.getGlobalContext().Core.getVitalSignIsNotNull() && //WDEV-12943
						form.getGlobalContext().Core.getVitalSign().getID_VitalSignsIsNotNull() &&//WDEV-12943
						voVitalSign.getID_VitalSigns().intValue() == form.getGlobalContext().Core.getVitalSign().getID_VitalSigns().intValue())
					nIndex = i;
			}
			
			form.getLocalContext().setBloods(voCollVitals);
			form.getLocalContext().setCurrentIndex(new Integer(nIndex));
			displayCurrentBloodPressure();
			
			form.btnUpdate().setEnabled(voCollVitals.size() > 0); //WDEV-13117
		}
		else
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			form.getLocalContext().setBloods(null);
			form.btnUpdate().setEnabled(false);
			//form.btnPrint().setEnabled(false);
		}
	}

	private void displayCurrentBloodPressure()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getBloods();
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		
		if(voMetrics == null || nIndex == null || nIndex.intValue() == -1 || nIndex.intValue() >= voMetrics.size())
			return;

		form.getLocalContext().setvitalSign(voMetrics.get(nIndex.intValue()));
		displayRecord(voMetrics.get(nIndex.intValue()));
		
		updatePrevNextButtons();
	}

	private void updatePrevNextButtons()
	{
		VitalSignsVoCollection voMetrics = form.getLocalContext().getBloods();
		Integer nIndex = form.getLocalContext().getCurrentIndex();

		form.btnNext().setEnabled(true);
		form.btnPrev().setEnabled(true);
		
		if(voMetrics == null || nIndex == null)
		{
			form.btnNext().setEnabled(false);
			form.btnPrev().setEnabled(false);
			return;
		}
		
		if(nIndex.intValue() <= 0)
			form.btnPrev().setEnabled(false);

		if(nIndex.intValue() >= voMetrics.size() - 1)
			form.btnNext().setEnabled(false);
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		VitalSignsVo voVitalSign = form.getLocalContext().getvitalSign();
		
		if((form.intSittingLyingDiastolic().getValue()== null && form.intSittingLyingSystolic().getValue()== null)
				&& (form.intStandingDiastolic().getValue()== null && form.intStandingSystolic().getValue()== null))
			{
				engine.showMessage("Please enter Blood Pressure values.");
				return;
		}
		else if(voVitalSign.getBloodPressure().getBPSittingDias()!=null){
			if((form.intSittingLyingDiastolic().getValue()!= null && form.intSittingLyingSystolic().getValue()== null)
				|| (form.intSittingLyingDiastolic().getValue()== null && form.intSittingLyingSystolic().getValue()!= null))
			{
				if(voVitalSign.getBloodPressure().getBPSittingDias()!=null)
					engine.showMessage("Please enter both Blood Pressure values for Sitting.");
				else
					engine.showMessage("Please enter both Blood Pressure values for Lying.");
				return;
			}
		}
		else{
			if((form.intStandingDiastolic().getValue()!= null && form.intStandingSystolic().getValue()== null)
				|| (form.intStandingDiastolic().getValue()== null && form.intStandingSystolic().getValue()!= null))
			{
				engine.showMessage("Please enter both Blood Pressure values for Standing.");
				return;
			}
			else if((form.intSittingLyingDiastolic().getValue()!= null && form.intSittingLyingSystolic().getValue()== null)
				|| (form.intSittingLyingDiastolic().getValue()== null && form.intSittingLyingSystolic().getValue()!= null))
			{
				engine.showMessage("Please enter both Blood Pressure values for Lying.");
				return;
			}
		}
		
		VSBloodPressure voBp = new VSBloodPressure();

		if(voVitalSign.getBloodPressure().getBPSittingDias()!=null){
			if(form.intSittingLyingDiastolic().getValue()!=null)
				voBp.setBPSittingDias(new Float(form.intSittingLyingDiastolic().getValue().floatValue()));
			if(form.intSittingLyingSystolic().getValue()!=null)
				voBp.setBPSittingSys(new Float(form.intSittingLyingSystolic().getValue().floatValue()));
		}
		else{
		
			if(form.intSittingLyingDiastolic().getValue()!=null)
				voBp.setBPLyingDias(new Float(form.intSittingLyingDiastolic().getValue().floatValue()));
			if(form.intSittingLyingSystolic().getValue()!=null)
				voBp.setBPLyingSys(new Float(form.intSittingLyingSystolic().getValue().floatValue()));
			
			if(form.intStandingDiastolic().getValue()!=null)
				voBp.setBPStandingDias(new Float(form.intStandingDiastolic().getValue().floatValue()));
			if(form.intStandingSystolic().getValue()!=null)
				voBp.setBPStandingSys(new Float(form.intStandingSystolic().getValue().floatValue()));
		}
		voBp.setComment(form.txtComment().getValue());		//wdev-12900	
				
		voVitalSign.setBloodPressure(voBp);
	
		String[] arrErrors = voVitalSign.validate();
		if(arrErrors == null)
		{
			try {
				domain.modifyBP(voVitalSign);
			} catch (StaleObjectException e) {
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				refresh();
				return;
			}
		}
		else
		{
			engine.showErrors("Validation Errors", arrErrors);
			return;	
		}

		form.setMode(FormMode.VIEW);
		
		listBp();
		//form.btnUpdate().setEnabled(false);

		form.getLocalContext().setvitalSign(voVitalSign);
		displayRecord(form.getLocalContext().getvitalSign());
		
		dateIntervalStatus();
	}

	
	private void clearFields() 
	{
		//form.cmbSite().setValue(null);
		form.intSittingLyingDiastolic().setValue(null);
		form.intSittingLyingSystolic().setValue(null);
		form.intStandingDiastolic().setValue(null);
		form.intStandingSystolic().setValue(null);
		form.dteTaken().setValue(null);
		form.timTaken().setValue(null);
		form.txtHCP().setValue("");		
		form.txtComment().setValue("");		//wdev-12900
	}

	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		displayRecord(form.getLocalContext().getvitalSign());
		form.setMode(FormMode.VIEW);
		form.intStandingDiastolic().setEnabled(false);
		form.intStandingSystolic().setEnabled(false);
		
		dateIntervalStatus();
		updatePrevNextButtons();
	}

	private void dateIntervalStatus()
	{
		form.dteShowByDay().setEnabled(GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		
		form.dteFrom().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
		form.dteTo().setEnabled(!GenForm.grpShowByEnumeration.rdoByDay.equals(form.grpShowBy().getValue()));	//WDEV-13117
	}

	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);	
		form.btnUpdate().setEnabled(false);	
		form.dteShowByDay().setEnabled(false);
		form.dteFrom().setEnabled(false);
		form.dteTo().setEnabled(false);
		form.intStandingDiastolic().setEnabled(true);
		form.intStandingSystolic().setEnabled(true);
		
		form.btnPrev().setEnabled(false);
		form.btnNext().setEnabled(false);
	}

	protected void onRadioButtongrpShowByValueChanged() throws PresentationLogicException
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			form.dteShowByDay().setEnabled(true);
			form.dteShowByDay().setValue(new Date());
			form.dteFrom().setEnabled(false);
			form.dteTo().setEnabled(false);
			form.dteFrom().setValue(null);
			form.dteTo().setValue(null);
		
		}
		else
		{
			form.dteShowByDay().setEnabled(false);
			form.dteShowByDay().setValue(null);
			form.dteFrom().setEnabled(true);
			form.dteTo().setEnabled(true);
			form.dteFrom().setValue(new Date());
			form.dteTo().setValue(new Date());
	
		}
		
		onBtnViewClick();
	}

	protected void onBtnViewClick() throws PresentationLogicException 
	{
		if(form.grpShowBy().getValue().equals(GenForm.grpShowByEnumeration.rdoByDay))
		{
			if(form.dteShowByDay().getValue() == null)
			{
				engine.showMessage("Please enter a date to show by");
				return;
			}
		}
		else
		{
			if(form.dteFrom().getValue() == null || form.dteTo().getValue() == null)
			{
				engine.showMessage("Please enter a date range (From and To) to show by");
				return;				
			}
			if(form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				engine.showMessage("The date From entered cannot be greater than the date To entered");
				return;
			}
		}
		
		clearFields();
		listBp();	
	}
	
	private void displayRecord(VitalSignsVo voVitalSign)
	{
		clearFields();
	
		form.btnUpdate().setEnabled(true);
		//form.btnPrint().setEnabled(true);
			
		if ( voVitalSign.getBloodPressure().getBPSittingDias() != null)
		{
			if (voVitalSign.getBloodPressure().getBPSittingDias() != null)
				form.intSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingDias().intValue()));
			if (voVitalSign.getBloodPressure().getBPSittingSys() != null)
				form.intSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPSittingSys().intValue()));
			
			form.intStandingDiastolic().setVisible(false);
			form.intStandingSystolic().setVisible(false);
			form.lblSupine().setValue("Sitting:");
			form.lblErectSlash().setVisible(false);
			form.lblErecr().setVisible(false);
			
			//WDEV-14760
			form.intSittingLyingDiastolic().setRequired(true);
		}
		else 
		{
			if (voVitalSign.getBloodPressure().getBPStandingDias() != null)
				form.intStandingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingDias().intValue()));
			if (voVitalSign.getBloodPressure().getBPStandingSys() != null)
				form.intStandingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPStandingSys().intValue()));
			
			if (voVitalSign.getBloodPressure().getBPLyingDias() != null)
				form.intSittingLyingDiastolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingDias().intValue()));
			if (voVitalSign.getBloodPressure().getBPLyingSys() != null)
				form.intSittingLyingSystolic().setValue(new Integer(voVitalSign.getBloodPressure().getBPLyingSys().intValue()));
			
			form.intStandingDiastolic().setVisible(true);
			form.intStandingSystolic().setVisible(true);
			form.intStandingDiastolic().setEnabled(false);
			form.intStandingSystolic().setEnabled(false);
			form.lblSupine().setValue("Lying:");
			form.lblErectSlash().setVisible(true);
			form.lblErecr().setVisible(true);
			
			//WDEV-14760
			form.intSittingLyingDiastolic().setRequired(false);
			form.txtMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
			form.txtMandatory().setRequired(true);
			
		}
		
		form.dteTaken().setValue(voVitalSign.getVitalsTakenDateTime().getDate());
		form.timTaken().setValue(voVitalSign.getVitalsTakenDateTime().getTime());
		form.txtHCP().setValue(voVitalSign.getAuthoringInformation().getAuthoringHcp().toString());
		form.txtComment().setValue(voVitalSign != null && voVitalSign.getBloodPressureIsNotNull() ? voVitalSign.getBloodPressure().getComment():null);  //wdev-12900
	}

	private void refresh()
	{
		clearFields();
		listBp();
		form.setMode(FormMode.VIEW);
	}

	protected void onGrhBPPointClicked(GraphingPoint point) 
	{
		if(point.getType() == GraphingPointType.BLOODPRESSURE)
		{ 			
			GraphingBloodPressure pointBP = (GraphingBloodPressure)point;
			form.getLocalContext().setvitalSign((VitalSignsVo)pointBP.getTag());
			displayRecord((VitalSignsVo)pointBP.getTag());
			form.btnUpdate().setEnabled(true);
			
			//update the Prev/Next buttons
			VitalSignsVoCollection voTemperatures = form.getLocalContext().getBloods();
			for(int i = 0; i < voTemperatures.size(); i++)
			{
				if(form.getLocalContext().getvitalSign().getID_VitalSigns().intValue() == voTemperatures.get(i).getID_VitalSigns().intValue())
				{
					form.getLocalContext().setCurrentIndex(new Integer(i));
					updatePrevNextButtons();
					break;
				}
			}
		}
		
	}

	protected void onBtnNextClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() + 1));
		displayCurrentBloodPressure();
	}

	protected void onBtnPrevClick() throws PresentationLogicException
	{
		Integer nIndex = form.getLocalContext().getCurrentIndex();
		form.getLocalContext().setCurrentIndex(new Integer(nIndex.intValue() - 1));
		displayCurrentBloodPressure();
	}
	
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		//WDEV-14429
		if(isVitalSignsBPForTriage())
		{
			engine.close(DialogResult.OK);
			return;
		}
		//WDEV-7526
		if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.BaselineObservations.getID()))
		{
			engine.open(form.getForms().Core.BaselineObservations);
			
		}
		//ends here
		
		else if(form.getGlobalContext().Core.getIdForm() != null && form.getGlobalContext().Core.getIdForm().equals(form.getForms().Core.VitalSignsBaselineAndAll.getID()))
			engine.open(form.getForms().Core.VitalSignsBaselineAndAll);
		else
			engine.open(form.getForms().Core.VitalSignsAll);
	}
	
	//WDEV-14429
	private boolean isVitalSignsBPForTriage()
	{
		if(engine.getFormName().equals(form.getForms().Core.VitalSignsBPForTriage))
			return true;
		
		return false;
	}

	//WDEV-14760
	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
	
	//WDEV-14760
	private void updateControlsState() 
	{	
		form.txtMandatory().setVisible(FormMode.EDIT.equals(form.getMode()));
	}
}
