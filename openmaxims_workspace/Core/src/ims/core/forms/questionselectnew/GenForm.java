//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.forms.questionselectnew;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTabsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabListQuestionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbClassificationListComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.QuestionClassification value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.QuestionClassification getValue()
				{
					return (ims.core.vo.lookups.QuestionClassification)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.QuestionClassification value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdListQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdListQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(1);
				}
				public void setcolStatus(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdListQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdListQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdListQuestionsRow get(int index)
				{
					return new grdListQuestionsRow(super.collection.get(index));
				}
				public grdListQuestionsRow newRow()
				{
					return new grdListQuestionsRow(super.collection.newRow());
				}
				public grdListQuestionsRow newRow(boolean autoSelect)
				{
					return new grdListQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdListQuestionsRow newRowAt(int index)
				{
					return new grdListQuestionsRow(super.collection.newRowAt(index));
				}
				public grdListQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdListQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdListQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.QuestionInformationShortVoCollection getValues()
				{
					ims.core.vo.QuestionInformationShortVoCollection listOfValues = new ims.core.vo.QuestionInformationShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdListQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdListQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdListQuestionsRowCollection getRows()
				{
					return new grdListQuestionsRowCollection(super.grid.getRows());
				}
				public grdListQuestionsRow getRowByValue(ims.core.vo.QuestionInformationShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdListQuestionsRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 792, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 392, 51, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Classification:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 32, 51, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search Text:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 112, 49, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 480, 49, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbClassificationListTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbClassificationListTemp);
				cmbClassificationListComboBox cmbClassificationList = (cmbClassificationListComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClassificationListComboBox.class, m_cmbClassificationListTemp);
				super.addComboBox(cmbClassificationList);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 792, 456, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdListQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuFindingMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdListQuestionsTemp);
				grdListQuestionsGrid grdListQuestions = (grdListQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdListQuestionsGrid.class, m_grdListQuestionsTemp);
				grdListQuestions.addStringColumn("Text", 0, 0, 600, false, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdListQuestions.addStringColumn("Status", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdListQuestions);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 767, 44, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 735, 44, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public TextBox txtTextList()
			{
				return (TextBox)super.getControl(3);
			}
			public cmbClassificationListComboBox cmbClassificationList()
			{
				return (cmbClassificationListComboBox)super.getComboBox(0);
			}
			public grdListQuestionsGrid grdListQuestions()
			{
				return (grdListQuestionsGrid)super.getGrid(0);
			}
			public ImageButton imbClearList()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbList()
			{
				return (ImageButton)super.getControl(7);
			}
		}
		public static class tabSearchQuestionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbClassificationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.QuestionClassification value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.QuestionClassification value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.QuestionClassification getValue()
				{
					return (ims.core.vo.lookups.QuestionClassification)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.QuestionClassification value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdSelectedRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSelectedRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(1);
				}
				public void setcolStatus(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolSelect(String value)
				{
					super.row.setTooltip(2, value);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSelectedRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSelectedRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSelectedRow get(int index)
				{
					return new grdSelectedRow(super.collection.get(index));
				}
				public grdSelectedRow newRow()
				{
					return new grdSelectedRow(super.collection.newRow());
				}
				public grdSelectedRow newRow(boolean autoSelect)
				{
					return new grdSelectedRow(super.collection.newRow(autoSelect));
				}
				public grdSelectedRow newRowAt(int index)
				{
					return new grdSelectedRow(super.collection.newRowAt(index));
				}
				public grdSelectedRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSelectedRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSelectedGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.QuestionInformationShortVoCollection getValues()
				{
					ims.core.vo.QuestionInformationShortVoCollection listOfValues = new ims.core.vo.QuestionInformationShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdSelectedRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSelectedRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSelectedRowCollection getRows()
				{
					return new grdSelectedRowCollection(super.grid.getRows());
				}
				public grdSelectedRow getRowByValue(ims.core.vo.QuestionInformationShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSelectedRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public static class grdAvailableRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAvailableRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForcolQuestionText(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(0);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolStatus(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getcolStatus()
				{
					return (String)super.row.get(1);
				}
				public void setcolStatus(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolSelect(String value)
				{
					super.row.setTooltip(2, value);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAvailableRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAvailableRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAvailableRow get(int index)
				{
					return new grdAvailableRow(super.collection.get(index));
				}
				public grdAvailableRow newRow()
				{
					return new grdAvailableRow(super.collection.newRow());
				}
				public grdAvailableRow newRow(boolean autoSelect)
				{
					return new grdAvailableRow(super.collection.newRow(autoSelect));
				}
				public grdAvailableRow newRowAt(int index)
				{
					return new grdAvailableRow(super.collection.newRowAt(index));
				}
				public grdAvailableRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAvailableRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAvailableGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.QuestionInformationShortVoCollection getValues()
				{
					ims.core.vo.QuestionInformationShortVoCollection listOfValues = new ims.core.vo.QuestionInformationShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.QuestionInformationShortVo getValue()
				{
					return (ims.core.vo.QuestionInformationShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.QuestionInformationShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdAvailableRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAvailableRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAvailableRowCollection getRows()
				{
					return new grdAvailableRowCollection(super.grid.getRows());
				}
				public grdAvailableRow getRowByValue(ims.core.vo.QuestionInformationShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAvailableRow(row);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
		
			public static class GroupTextRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 288, 32, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Short Text", startTabIndex.intValue() + 10);
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 288, 56, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper10.getX(), anchoringHelper10.getY(), anchoringHelper10.getWidth(), "Text", startTabIndex.intValue() + 11);
				}
				public void setText(GroupTextEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupTextEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupTextEnumeration.None;
						case 0: return GroupTextEnumeration.rdoShortText;
						case 1: return GroupTextEnumeration.rdoText;
					}
					return null;
				}
				public void setValue(GroupTextEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupTextEnumeration.None.id);
				}
				public boolean isEnabled(GroupTextEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupTextEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupTextEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupTextEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupTextEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupTextEnumeration None = new GroupTextEnumeration(-1);
				public static GroupTextEnumeration rdoShortText = new GroupTextEnumeration(0);
				public static GroupTextEnumeration rdoText = new GroupTextEnumeration(1);
				private GroupTextEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupTextEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 288, 104, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper11.getX(), anchoringHelper11.getY(), anchoringHelper11.getWidth(), "Other Questions", startTabIndex.intValue() + 13);
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 288, 80, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper12.getX(), anchoringHelper12.getY(), anchoringHelper12.getWidth(), "Finding Questions Only", startTabIndex.intValue() + 12);
				}
				public void setText(GroupFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupFilterEnumeration.None;
						case 0: return GroupFilterEnumeration.rdoAllClassification;
						case 1: return GroupFilterEnumeration.rdoFindingsOnly;
					}
					return null;
				}
				public void setValue(GroupFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupFilterEnumeration.None.id);
				}
				public boolean isEnabled(GroupFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupFilterEnumeration None = new GroupFilterEnumeration(-1);
				public static GroupFilterEnumeration rdoAllClassification = new GroupFilterEnumeration(0);
				public static GroupFilterEnumeration rdoFindingsOnly = new GroupFilterEnumeration(1);
				private GroupFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 328, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Search", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 800, 200, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Selected Questions", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 435, 35, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Classification:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 24, 35, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search Text:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Available for Selection:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 737, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 656, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 720, 288, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Add to List", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 104, 288, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deselect All", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 24, 288, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select All", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 35, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 523, 35, 181, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbClassificationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbClassificationTemp);
				cmbClassificationComboBox cmbClassification = (cmbClassificationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClassificationComboBox.class, m_cmbClassificationTemp);
				super.addComboBox(cmbClassification);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 771, 160, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSelectedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSelectedTemp);
				grdSelectedGrid grdSelected = (grdSelectedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedGrid.class, m_grdSelectedTemp);
				grdSelected.addStringColumn("Text", 0, 0, 520, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSelected.addStringColumn("Status", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSelected.addBoolColumn("Select", 1, 1, -1, false, false, 1, true);
				super.addGrid(grdSelected);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 768, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdAvailableTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuFindingMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAvailableTemp);
				grdAvailableGrid grdAvailable = (grdAvailableGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAvailableGrid.class, m_grdAvailableTemp);
				grdAvailable.addStringColumn("Text", 0, 0, 500, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAvailable.addStringColumn("Status", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAvailable.addBoolColumn("Select", 1, 1, -1, false, false, 1, true);
				super.addGrid(grdAvailable);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 762, 30, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 730, 30, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupText = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
				super.addControl(tmpGroupText);
				GroupTextRadioButton GroupText = (GroupTextRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTextRadioButton.class, tmpGroupText);
				GroupText.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupText);
				RadioButton tmpGroupFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
				super.addControl(tmpGroupFilter);
				GroupFilterRadioButton GroupFilter = (GroupFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterRadioButton.class, tmpGroupFilter);
				GroupFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupFilter);
			}

			public Button btnCancelSearch()
			{
				return (Button)super.getControl(5);
			}
			public Button btnOk()
			{
				return (Button)super.getControl(6);
			}
			public Button btnAddToList()
			{
				return (Button)super.getControl(7);
			}
			public Button btnClearAll()
			{
				return (Button)super.getControl(8);
			}
			public Button btnSelectAll()
			{
				return (Button)super.getControl(9);
			}
			public TextBox txtSearchText()
			{
				return (TextBox)super.getControl(10);
			}
			public cmbClassificationComboBox cmbClassification()
			{
				return (cmbClassificationComboBox)super.getComboBox(0);
			}
			public grdSelectedGrid grdSelected()
			{
				return (grdSelectedGrid)super.getGrid(0);
			}
			public grdAvailableGrid grdAvailable()
			{
				return (grdAvailableGrid)super.getGrid(1);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(14);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(15);
			}
			public GroupTextRadioButton GroupText()
			{
				return (GroupTextRadioButton)super.getRadioButton(0);
			}
			public GroupFilterRadioButton GroupFilter()
			{
				return (GroupFilterRadioButton)super.getRadioButton(1);
			}
		}
		public static class tabNewQuestionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrDetailsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabGeneralContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbGenreComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.admin.vo.lookups.GenderSpecific value)
						{
							return super.control.removeRow(value);
						}
						public ims.admin.vo.lookups.GenderSpecific getValue()
						{
							return (ims.admin.vo.lookups.GenderSpecific)super.control.getValue();
						}
						public void setValue(ims.admin.vo.lookups.GenderSpecific value)
						{
							super.control.setValue(value);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 20, 97, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Gender Specific:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 240, 52, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Years", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 52, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Age Range:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "URL:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 114, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Protocol:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 106, 80, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 106, 112, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 106, 18, 291, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						ComboBox m_cmbGenreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
						addControl(m_cmbGenreTemp);
						cmbGenreComboBox cmbGenre = (cmbGenreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGenreComboBox.class, m_cmbGenreTemp);
						super.addComboBox(cmbGenre);
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 106, 146, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Question", Boolean.TRUE, null}));
				
						// IntRangeBox Controls
						RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 106, 50, 126, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(IntRangeBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
				
						// Image Buttons Controls
						RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 400, 76, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.LinkEnabled24, form_images_local.Core.LinkEnabled24, "Open URL", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
					}
		
					public Label lblUrl()
					{
						return (Label)super.getControl(3);
					}
					public Label lblProtocol()
					{
						return (Label)super.getControl(4);
					}
					public TextBox txtURL()
					{
						return (TextBox)super.getControl(5);
					}
					public TextBox txtProtocol()
					{
						return (TextBox)super.getControl(6);
					}
					public cmbGenreComboBox cmbGenre()
					{
						return (cmbGenreComboBox)super.getComboBox(0);
					}
					public CheckBox chkIsQuestion()
					{
						return (CheckBox)super.getControl(8);
					}
					public IntRangeBox irbAgeRange()
					{
						return (IntRangeBox)super.getControl(9);
					}
					public ImageButton imbPreviewUrl()
					{
						return (ImageButton)super.getControl(10);
					}
				}
				public static class tabClasificationContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Tree Controls
						RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 768, 170, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, contextMenus.contextMenuTreeMenu, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public TreeView treClassification()
					{
						return (TreeView)super.getControl(0);
					}
				}
				public static class tabKeywordsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdKeywordsRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdKeywordsRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setcolNameReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean iscolNameReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showcolNameOpened()
						{
							super.row.showOpened(0);
						}
						public String getcolName()
						{
							return (String)super.row.get(0);
						}
						public void setcolName(String value)
						{
							super.row.set(0, value);
						}
						public void setCellcolNameTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public ims.core.vo.KeywordVo getValue()
						{
							return (ims.core.vo.KeywordVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.KeywordVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdKeywordsRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdKeywordsRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdKeywordsRow get(int index)
						{
							return new grdKeywordsRow(super.collection.get(index));
						}
						public grdKeywordsRow newRow()
						{
							return new grdKeywordsRow(super.collection.newRow());
						}
						public grdKeywordsRow newRow(boolean autoSelect)
						{
							return new grdKeywordsRow(super.collection.newRow(autoSelect));
						}
						public grdKeywordsRow newRowAt(int index)
						{
							return new grdKeywordsRow(super.collection.newRowAt(index));
						}
						public grdKeywordsRow newRowAt(int index, boolean autoSelect)
						{
							return new grdKeywordsRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdKeywordsGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public ims.core.vo.KeywordVoCollection getValues()
						{
							ims.core.vo.KeywordVoCollection listOfValues = new ims.core.vo.KeywordVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.KeywordVo getValue()
						{
							return (ims.core.vo.KeywordVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.KeywordVo value)
						{
							super.grid.setValue(value);
						}
						public grdKeywordsRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdKeywordsRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdKeywordsRowCollection getRows()
						{
							return new grdKeywordsRowCollection(super.grid.getRows());
						}
						public grdKeywordsRow getRowByValue(ims.core.vo.KeywordVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdKeywordsRow(row);
						}
						public void setcolNameHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getcolNameHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 768, 170, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdKeywordsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAddContact, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdKeywordsTemp);
						grdKeywordsGrid grdKeywords = (grdKeywordsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdKeywordsGrid.class, m_grdKeywordsTemp);
						grdKeywords.addStringColumn("Name", 0, 0, 500, false, false, 0, 10, true, ims.framework.enumerations.CharacterCasing.UPPER);
						super.addGrid(grdKeywords);
					}
		
					public grdKeywordsGrid grdKeywords()
					{
						return (grdKeywordsGrid)super.getGrid(0);
					}
				}
				public static class tabTaxonomyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 768, 178, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_customTaxonomyForm = loader.loadComponent(104124, appForm, startControlID * 10 + 1000, anchoringHelper42.getSize(), instance1, startTabIndex.intValue() + 42, skipContextValidation);
						//ims.framework.Control m_customTaxonomyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(8), new Integer(0), new Integer(768), new Integer(178), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 42), m_customTaxonomyForm, instance1 } );
						ims.framework.Control m_customTaxonomyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1040),  new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 42), m_customTaxonomyForm, instance1, Boolean.FALSE } );
						super.addControl(m_customTaxonomyControl);
						Menu[] menus1 = m_customTaxonomyForm.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.admin.forms.taxonomymappings.IComponent customTaxonomy()
					{
						return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setcustomTaxonomyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setcustomTaxonomyVisible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean iscustomTaxonomyVisible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setcustomTaxonomyEnabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean iscustomTaxonomyEnabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabLegendContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Rich Text Controls
						RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 768, 170, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.FALSE, new Integer(0)} ));
					}
		
					public RichTextControl richTextLegend()
					{
						return (RichTextControl)super.getControl(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 792, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabGeneral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"General", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabGeneralContainer m_tabGeneralContainer = (tabGeneralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralContainer.class, m_tabGeneral, factory);
					super.addContainer(m_tabGeneral, m_tabGeneralContainer);
					ims.framework.utils.SizeInfo m_tabGeneralDesignSize = new ims.framework.utils.SizeInfo(792, 208);
					ims.framework.utils.SizeInfo m_tabGeneralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper44.getWidth(), anchoringHelper44.getHeight());
					m_tabGeneralContainer.setContext(form, appForm, m_tabGeneral, loader, form_images_local, contextMenus, startControlID, m_tabGeneralDesignSize, m_tabGeneralRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 792, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabClasification = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Classification", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabClasificationContainer m_tabClasificationContainer = (tabClasificationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClasificationContainer.class, m_tabClasification, factory);
					super.addContainer(m_tabClasification, m_tabClasificationContainer);
					ims.framework.utils.SizeInfo m_tabClasificationDesignSize = new ims.framework.utils.SizeInfo(792, 208);
					ims.framework.utils.SizeInfo m_tabClasificationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper45.getWidth(), anchoringHelper45.getHeight());
					m_tabClasificationContainer.setContext(form, appForm, m_tabClasification, loader, form_images_local, contextMenus, startControlID, m_tabClasificationDesignSize, m_tabClasificationRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 792, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabKeywords = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Keywords", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabKeywordsContainer m_tabKeywordsContainer = (tabKeywordsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabKeywordsContainer.class, m_tabKeywords, factory);
					super.addContainer(m_tabKeywords, m_tabKeywordsContainer);
					ims.framework.utils.SizeInfo m_tabKeywordsDesignSize = new ims.framework.utils.SizeInfo(792, 208);
					ims.framework.utils.SizeInfo m_tabKeywordsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper46.getWidth(), anchoringHelper46.getHeight());
					m_tabKeywordsContainer.setContext(form, appForm, m_tabKeywords, loader, form_images_local, contextMenus, startControlID, m_tabKeywordsDesignSize, m_tabKeywordsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 792, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabTaxonomy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Taxonomy", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabTaxonomyContainer m_tabTaxonomyContainer = (tabTaxonomyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTaxonomyContainer.class, m_tabTaxonomy, factory);
					super.addContainer(m_tabTaxonomy, m_tabTaxonomyContainer);
					ims.framework.utils.SizeInfo m_tabTaxonomyDesignSize = new ims.framework.utils.SizeInfo(792, 208);
					ims.framework.utils.SizeInfo m_tabTaxonomyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper47.getWidth(), anchoringHelper47.getHeight());
					m_tabTaxonomyContainer.setContext(form, appForm, m_tabTaxonomy, loader, form_images_local, contextMenus, startControlID, m_tabTaxonomyDesignSize, m_tabTaxonomyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 330, 792, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Container m_tabLegend = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Legend", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabLegendContainer m_tabLegendContainer = (tabLegendContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLegendContainer.class, m_tabLegend, factory);
					super.addContainer(m_tabLegend, m_tabLegendContainer);
					ims.framework.utils.SizeInfo m_tabLegendDesignSize = new ims.framework.utils.SizeInfo(792, 208);
					ims.framework.utils.SizeInfo m_tabLegendRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper48.getWidth(), anchoringHelper48.getHeight());
					m_tabLegendContainer.setContext(form, appForm, m_tabLegend, loader, form_images_local, contextMenus, startControlID, m_tabLegendDesignSize, m_tabLegendRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabGeneral().setVisible(false);
					tabClasification().setVisible(false);
					tabKeywords().setVisible(false);
					tabTaxonomy().setVisible(false);
					tabLegend().setVisible(false);
				}
				public void settabGeneralEnabled(boolean value)
				{
					tabGeneral().setEnabled(value);
				}
				public void settabClasificationEnabled(boolean value)
				{
					tabClasification().setEnabled(value);
				}
				public void settabKeywordsEnabled(boolean value)
				{
					tabKeywords().setEnabled(value);
				}
				public void settabTaxonomyEnabled(boolean value)
				{
					tabTaxonomy().setEnabled(value);
				}
				public void settabLegendEnabled(boolean value)
				{
					tabLegend().setEnabled(value);
				}
				public void showtabGeneral()
				{
					tabClasification().setVisible(false);
					tabKeywords().setVisible(false);
					tabTaxonomy().setVisible(false);
					tabLegend().setVisible(false);
					tabGeneral().setVisible(true);
				}
				public void showtabClasification()
				{
					tabGeneral().setVisible(false);
					tabKeywords().setVisible(false);
					tabTaxonomy().setVisible(false);
					tabLegend().setVisible(false);
					tabClasification().setVisible(true);
				}
				public void showtabKeywords()
				{
					tabGeneral().setVisible(false);
					tabClasification().setVisible(false);
					tabTaxonomy().setVisible(false);
					tabLegend().setVisible(false);
					tabKeywords().setVisible(true);
				}
				public void showtabTaxonomy()
				{
					tabGeneral().setVisible(false);
					tabClasification().setVisible(false);
					tabKeywords().setVisible(false);
					tabLegend().setVisible(false);
					tabTaxonomy().setVisible(true);
				}
				public void showtabLegend()
				{
					tabGeneral().setVisible(false);
					tabClasification().setVisible(false);
					tabKeywords().setVisible(false);
					tabTaxonomy().setVisible(false);
					tabLegend().setVisible(true);
				}
		
				public tabGeneralContainer tabGeneral()
				{
					return (tabGeneralContainer)super.layers.get(0);
				}
				public tabClasificationContainer tabClasification()
				{
					return (tabClasificationContainer)super.layers.get(1);
				}
				public tabKeywordsContainer tabKeywords()
				{
					return (tabKeywordsContainer)super.layers.get(2);
				}
				public tabTaxonomyContainer tabTaxonomy()
				{
					return (tabTaxonomyContainer)super.layers.get(3);
				}
				public tabLegendContainer tabLegend()
				{
					return (tabLegendContainer)super.layers.get(4);
				}
			}
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
				super.addLayer(m_lyrDetailsLayer);
				m_lyrDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Short Text:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Text:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 16, 128, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Answer Types:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 16, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1045), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 655, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1046), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 735, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1047), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 709, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 96, 56, 710, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 96, 96, 291, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 144, 792, 178, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public lyrDetailsLayer lyrDetails()
			{
				return (lyrDetailsLayer)super.getLayer(0);
			}
			public Button btnUpdate()
			{
				return (Button)super.getControl(9);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(10);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(11);
			}
			public TextBox txtShortText()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtText()
			{
				return (TextBox)super.getControl(13);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(0);
			}
			public DynamicGrid dyngrdAnswerTypes()
			{
				return (DynamicGrid)super.getControl(15);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 827, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabListQuestions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Questions", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabListQuestionsContainer m_tabListQuestionsContainer = (tabListQuestionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabListQuestionsContainer.class, m_tabListQuestions, factory);
			super.addContainer(m_tabListQuestions, m_tabListQuestionsContainer);
			ims.framework.utils.SizeInfo m_tabListQuestionsDesignSize = new ims.framework.utils.SizeInfo(827, 608);
			ims.framework.utils.SizeInfo m_tabListQuestionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabListQuestionsContainer.setContext(form, appForm, m_tabListQuestions, loader, form_images_local, contextMenus, startControlID, m_tabListQuestionsDesignSize, m_tabListQuestionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 827, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSearchQuestion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search Questions", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSearchQuestionContainer m_tabSearchQuestionContainer = (tabSearchQuestionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchQuestionContainer.class, m_tabSearchQuestion, factory);
			super.addContainer(m_tabSearchQuestion, m_tabSearchQuestionContainer);
			ims.framework.utils.SizeInfo m_tabSearchQuestionDesignSize = new ims.framework.utils.SizeInfo(827, 608);
			ims.framework.utils.SizeInfo m_tabSearchQuestionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabSearchQuestionContainer.setContext(form, appForm, m_tabSearchQuestion, loader, form_images_local, contextMenus, startControlID, m_tabSearchQuestionDesignSize, m_tabSearchQuestionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 827, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNewQuestion = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"New Question", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabNewQuestionContainer m_tabNewQuestionContainer = (tabNewQuestionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNewQuestionContainer.class, m_tabNewQuestion, factory);
			super.addContainer(m_tabNewQuestion, m_tabNewQuestionContainer);
			ims.framework.utils.SizeInfo m_tabNewQuestionDesignSize = new ims.framework.utils.SizeInfo(827, 608);
			ims.framework.utils.SizeInfo m_tabNewQuestionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabNewQuestionContainer.setContext(form, appForm, m_tabNewQuestion, loader, form_images_local, contextMenus, startControlID, m_tabNewQuestionDesignSize, m_tabNewQuestionRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabListQuestions().setVisible(false);
			tabSearchQuestion().setVisible(false);
			tabNewQuestion().setVisible(false);
		}
		public void settabListQuestionsEnabled(boolean value)
		{
			tabListQuestions().setEnabled(value);
		}
		public void settabSearchQuestionEnabled(boolean value)
		{
			tabSearchQuestion().setEnabled(value);
		}
		public void settabNewQuestionEnabled(boolean value)
		{
			tabNewQuestion().setEnabled(value);
		}
		public void showtabListQuestions()
		{
			tabSearchQuestion().setVisible(false);
			tabNewQuestion().setVisible(false);
			tabListQuestions().setVisible(true);
		}
		public void showtabSearchQuestion()
		{
			tabListQuestions().setVisible(false);
			tabNewQuestion().setVisible(false);
			tabSearchQuestion().setVisible(true);
		}
		public void showtabNewQuestion()
		{
			tabListQuestions().setVisible(false);
			tabSearchQuestion().setVisible(false);
			tabNewQuestion().setVisible(true);
		}

		public tabListQuestionsContainer tabListQuestions()
		{
			return (tabListQuestionsContainer)super.layers.get(0);
		}
		public tabSearchQuestionContainer tabSearchQuestion()
		{
			return (tabSearchQuestionContainer)super.layers.get(1);
		}
		public tabNewQuestionContainer tabNewQuestion()
		{
			return (tabNewQuestionContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuFindingMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuFindingMenuAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuAddItem);
		contextMenus.contextMenuFindingMenuEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Finding", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuEditItem);
		contextMenus.contextMenuFindingMenuRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove Finding", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuRemoveItem);
		contextMenus.contextMenuFindingMenuCloneItem = factory.createMenuItem(startControlID.intValue() + 4, "Clone", true, false, new Integer(102222), true, true);
		contextMenus.contextMenuFindingMenu.add(contextMenus.contextMenuFindingMenuCloneItem);
		form.registerMenu(contextMenus.contextMenuFindingMenu);
		contextMenus.contextMenuTreeMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuTreeMenuExpandAllItem = factory.createMenuItem(startControlID.intValue() + 5, "ExpandAll", true, false, new Integer(102261), true, false);
		contextMenus.contextMenuTreeMenu.add(contextMenus.contextMenuTreeMenuExpandAllItem);
		contextMenus.contextMenuTreeMenuCollapseAllItem = factory.createMenuItem(startControlID.intValue() + 6, "Collapse All ", true, false, new Integer(102260), true, false);
		contextMenus.contextMenuTreeMenu.add(contextMenus.contextMenuTreeMenuCollapseAllItem);
		form.registerMenu(contextMenus.contextMenuTreeMenu);
		contextMenus.contextMenuAddContact = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuAddContactNewContactItem = factory.createMenuItem(startControlID.intValue() + 7, "New Clinical Contact", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuAddContact.add(contextMenus.contextMenuAddContactNewContactItem);
		contextMenus.contextMenuAddContactViewContactItem = factory.createMenuItem(startControlID.intValue() + 8, "View Clinical Contact", true, false, new Integer(102182), true, false);
		contextMenus.contextMenuAddContact.add(contextMenus.contextMenuAddContactViewContactItem);
		form.registerMenu(contextMenus.contextMenuAddContact);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 9, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 10, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 12, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 14, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 15, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 16, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 17, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrTabsLayer m_lyrTabsLayer = (lyrTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTabsLayer.class, this, factory);
		super.addLayer(m_lyrTabsLayer);
		m_lyrTabsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Link Controls
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 720, 10, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrTabsLayer lyrTabs()
	{
		return (lyrTabsLayer)super.getLayer(0);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Assessment = new AssessmentForms();
			OCRR = new OCRRForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
				QuestionAnswerType = new LocalFormName(102169);
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName TaxonomySearch;
			public final FormName QuestionAnswerType;
			public final FormName YesNoDialog;
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				FindingQuestions = new LocalFormName(102136);
				UserAssessmentNew = new LocalFormName(102184);
				GraphicAssessmentNew = new LocalFormName(102192);
			}
			public final FormName FindingQuestions;
			public final FormName UserAssessmentNew;
			public final FormName GraphicAssessmentNew;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				CategoryQuestions = new LocalFormName(116123);
				ProfileEdit = new LocalFormName(116108);
				TestEdit = new LocalFormName(116104);
				ServiceQuestions = new LocalFormName(116134);
			}
			public final FormName CategoryQuestions;
			public final FormName ProfileEdit;
			public final FormName TestEdit;
			public final FormName ServiceQuestions;
		}

		public CoreForms Core;
		public AssessmentForms Assessment;
		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Save = new ImageHelper(102199, "Images/Core/Save.gif", new Integer(18), new Integer(18));
				Add = new ImageHelper(102179, "Images/Core/add.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				View = new ImageHelper(102223, "Images/Core/Slide Show.gif", new Integer(16), new Integer(16));
				LinkEnabled24 = new ImageHelper(102521, "Images/Core/url_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Save;
			public final ims.framework.utils.Image Add;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image View;
			public final ims.framework.utils.Image LinkEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_InactiveAnswerTypes = new ims.framework.ContextVariable("InactiveAnswerTypes", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__InactiveAnswerTypes_" + componentIdentifier + "");
			cxl_IsNewAnwerType = new ims.framework.ContextVariable("IsNewAnwerType", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__IsNewAnwerType_" + componentIdentifier + "");
			cxl_VoQuestionInformation = new ims.framework.ContextVariable("VoQuestionInformation", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier + "");
			cxl_IsNewQuestion = new ims.framework.ContextVariable("IsNewQuestion", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__IsNewQuestion_" + componentIdentifier + "");
			cxl_IsSearchPerformed = new ims.framework.ContextVariable("IsSearchPerformed", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__IsSearchPerformed_" + componentIdentifier + "");
			cxl_ParentForm = new ims.framework.ContextVariable("ParentForm", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__ParentForm_" + componentIdentifier + "");
			cxl_IsShortText = new ims.framework.ContextVariable("IsShortText", prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__IsShortText_" + componentIdentifier + "");
		}
		
		public boolean getInactiveAnswerTypesIsNotNull()
		{
			return !cxl_InactiveAnswerTypes.getValueIsNull(context);
		}
		public ims.core.vo.QuestionAnswerTypeVoCollection getInactiveAnswerTypes()
		{
			return (ims.core.vo.QuestionAnswerTypeVoCollection)cxl_InactiveAnswerTypes.getValue(context);
		}
		public void setInactiveAnswerTypes(ims.core.vo.QuestionAnswerTypeVoCollection value)
		{
			cxl_InactiveAnswerTypes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InactiveAnswerTypes = null;
		public boolean getIsNewAnwerTypeIsNotNull()
		{
			return !cxl_IsNewAnwerType.getValueIsNull(context);
		}
		public Boolean getIsNewAnwerType()
		{
			return (Boolean)cxl_IsNewAnwerType.getValue(context);
		}
		public void setIsNewAnwerType(Boolean value)
		{
			cxl_IsNewAnwerType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewAnwerType = null;
		public boolean getVoQuestionInformationIsNotNull()
		{
			return !cxl_VoQuestionInformation.getValueIsNull(context);
		}
		public ims.core.vo.QuestionInformationVo getVoQuestionInformation()
		{
			return (ims.core.vo.QuestionInformationVo)cxl_VoQuestionInformation.getValue(context);
		}
		public void setVoQuestionInformation(ims.core.vo.QuestionInformationVo value)
		{
			cxl_VoQuestionInformation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VoQuestionInformation = null;
		public boolean getIsNewQuestionIsNotNull()
		{
			return !cxl_IsNewQuestion.getValueIsNull(context);
		}
		public Boolean getIsNewQuestion()
		{
			return (Boolean)cxl_IsNewQuestion.getValue(context);
		}
		public void setIsNewQuestion(Boolean value)
		{
			cxl_IsNewQuestion.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewQuestion = null;
		public boolean getIsSearchPerformedIsNotNull()
		{
			return !cxl_IsSearchPerformed.getValueIsNull(context);
		}
		public Boolean getIsSearchPerformed()
		{
			return (Boolean)cxl_IsSearchPerformed.getValue(context);
		}
		public void setIsSearchPerformed(Boolean value)
		{
			cxl_IsSearchPerformed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsSearchPerformed = null;
		public boolean getParentFormIsNotNull()
		{
			return !cxl_ParentForm.getValueIsNull(context);
		}
		public ims.framework.FormName getParentForm()
		{
			return (ims.framework.FormName)cxl_ParentForm.getValue(context);
		}
		public void setParentForm(ims.framework.FormName value)
		{
			cxl_ParentForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentForm = null;
		public boolean getIsShortTextIsNotNull()
		{
			return !cxl_IsShortText.getValueIsNull(context);
		}
		public Boolean getIsShortText()
		{
			return (Boolean)cxl_IsShortText.getValue(context);
		}
		public void setIsShortText(Boolean value)
		{
			cxl_IsShortText.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsShortText = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class FindingMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Edit = 2;
			public static final int Remove = 3;
			public static final int Clone = 4;
		}
		public void disableAllFindingMenuMenuItems()
		{
			this.contextMenuFindingMenuAddItem.setEnabled(false);
			this.contextMenuFindingMenuEditItem.setEnabled(false);
			this.contextMenuFindingMenuRemoveItem.setEnabled(false);
			this.contextMenuFindingMenuCloneItem.setEnabled(false);
		}
		public void hideAllFindingMenuMenuItems()
		{
			this.contextMenuFindingMenuAddItem.setVisible(false);
			this.contextMenuFindingMenuEditItem.setVisible(false);
			this.contextMenuFindingMenuRemoveItem.setVisible(false);
			this.contextMenuFindingMenuCloneItem.setVisible(false);
		}
		private Menu contextMenuFindingMenu;
		public MenuItem getFindingMenuAddItem()
		{
			return this.contextMenuFindingMenuAddItem;
		}
		private MenuItem contextMenuFindingMenuAddItem;
		public MenuItem getFindingMenuEditItem()
		{
			return this.contextMenuFindingMenuEditItem;
		}
		private MenuItem contextMenuFindingMenuEditItem;
		public MenuItem getFindingMenuRemoveItem()
		{
			return this.contextMenuFindingMenuRemoveItem;
		}
		private MenuItem contextMenuFindingMenuRemoveItem;
		public MenuItem getFindingMenuCloneItem()
		{
			return this.contextMenuFindingMenuCloneItem;
		}
		private MenuItem contextMenuFindingMenuCloneItem;
		public final class TreeMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ExpandAll = 5;
			public static final int CollapseAll = 6;
		}
		public void disableAllTreeMenuMenuItems()
		{
			this.contextMenuTreeMenuExpandAllItem.setEnabled(false);
			this.contextMenuTreeMenuCollapseAllItem.setEnabled(false);
		}
		public void hideAllTreeMenuMenuItems()
		{
			this.contextMenuTreeMenuExpandAllItem.setVisible(false);
			this.contextMenuTreeMenuCollapseAllItem.setVisible(false);
		}
		private Menu contextMenuTreeMenu;
		public MenuItem getTreeMenuExpandAllItem()
		{
			return this.contextMenuTreeMenuExpandAllItem;
		}
		private MenuItem contextMenuTreeMenuExpandAllItem;
		public MenuItem getTreeMenuCollapseAllItem()
		{
			return this.contextMenuTreeMenuCollapseAllItem;
		}
		private MenuItem contextMenuTreeMenuCollapseAllItem;
		public final class AddContact implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NewContact = 7;
			public static final int ViewContact = 8;
		}
		public void disableAllAddContactMenuItems()
		{
			this.contextMenuAddContactNewContactItem.setEnabled(false);
			this.contextMenuAddContactViewContactItem.setEnabled(false);
		}
		public void hideAllAddContactMenuItems()
		{
			this.contextMenuAddContactNewContactItem.setVisible(false);
			this.contextMenuAddContactViewContactItem.setVisible(false);
		}
		private Menu contextMenuAddContact;
		public MenuItem getAddContactNewContactItem()
		{
			return this.contextMenuAddContactNewContactItem;
		}
		private MenuItem contextMenuAddContactNewContactItem;
		public MenuItem getAddContactViewContactItem()
		{
			return this.contextMenuAddContactViewContactItem;
		}
		private MenuItem contextMenuAddContactViewContactItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 9;
			public static final int Update = 10;
			public static final int Remove = 11;
			public static final int View = 12;
			public static final int MoveUp = 13;
			public static final int MoveDown = 14;
			public static final int Replace = 15;
			public static final int Confirm = 16;
			public static final int EDIT_VIEW_ICP_ACTIONS = 17;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[110];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-ID", "ID_QuestionAnswerType");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-ANSWERTYPE", "AnswerType");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-ACTIVESTATUS", "ActiveStatus");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-SEPARATORTEXT", "SeparatorText");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-ISMANDATORY", "IsMandatory");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-MANDATORYVALMESSAGE", "MandatoryValMessage");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-MAXMULTISELECTALLOWED", "MaxMultiselectAllowed");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.QuestionAnswerType", "BO-1003100041-ANSWERWIDTH", "AnswerWidth");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ID", "ID_AssessmentQuestion");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ISMANDATORY", "IsMandatory");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ACTIVESTATUS", "ActiveStatus");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-SEQUENCE", "Sequence");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ALLOWSMULTIPLEANSWERS", "AllowsMultipleAnswers");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-ISNONSTANDARD", "IsNonStandard");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-URL", "URL");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-PROTOCOL", "Protocol");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedAssessmentQuestion", "BO-1003100045-LEGENDTEXT", "LegendText");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ID", "ID_QuestionInformation");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-TEXT", "Text");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-SHORTTEXT", "ShortText");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-STATUS", "Status");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-ID", "ID_QuestionInformation");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-TEXT", "Text");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-SHORTTEXT", "ShortText");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-STATUS", "Status");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Core.QuestionSelectNew.__internal_x_context__VoQuestionInformation_" + componentIdentifier, "BO-1058100000-QUESTIONTYPE", "QuestionType");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
