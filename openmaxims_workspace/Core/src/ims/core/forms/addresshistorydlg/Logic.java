//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Peter Martin using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.core.forms.addresshistorydlg;

import ims.core.vo.PersonAddress;
import ims.core.vo.PersonAddressCollection;
import ims.core.vo.lookups.AddressType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
				
		if (args != null && args.length > 0 && args[0] instanceof PersonAddressCollection)
		{
			PersonAddressCollection voColl = (PersonAddressCollection)args[0];
			populateRecordBrowser(voColl);
		}
		else if (args != null && args.length > 0 && args[0] instanceof PersonAddress){
			form.getLocalContext().setPersonAddress((PersonAddress) args[0]);
			form.ccAddress().setValue((PersonAddress) args[0]);
			form.setMode(FormMode.EDIT);
			form.btnOk().setText("Save");
		}
	}
	
	private void populateScreenFromData(PersonAddress address) {
		form.ccAddress().setValue(address);
		form.dteDate().setValue(address.getNotificationDate());		
	}

	private void initialize() {
		form.setMode(FormMode.VIEW);
		form.ccAddress().setComponentEnabled(false);
		form.ccAddress().setPhoneVisible(false);
		form.ccAddress().setHistoricAddressBtnVisible(false);
		form.ccAddress().setSearchControlsVisible(false);		
	}
	
	private void populateRecordBrowser(PersonAddressCollection voColl) {
		
		PersonAddressCollection voHistoricalColl = sortByDate(voColl);
		for (int i = 0 ; i < voHistoricalColl.size() ; i++)
		{
			form.recbrAddress().newRow(voHistoricalColl.get(i), voHistoricalColl.get(i).toDisplayString());
		}
		
		if(voHistoricalColl.size()>0)
			populateScreenFromData(voHistoricalColl.get(0));
		
	}
	private PersonAddressCollection sortByDate(PersonAddressCollection voColl) {
		
		PersonAddressCollection voHistoricalColl = new PersonAddressCollection(); 
		
		for (int i = 0 ; i < voColl.size() ; i++)
		{
			if(voColl.get(i).getAddressTypeIsNotNull() && voColl.get(i).getAddressType().equals(AddressType.HISTORICAL))
				voHistoricalColl.add(voColl.get(i));		
		}
		
		PersonAddressCollection voSortedHistoricalColl = new PersonAddressCollection(); 
		
		while(voHistoricalColl!= null && voHistoricalColl.size()>0)
		{
			for (int i = 0 ; i < voHistoricalColl.size() ; i++)
				if(isNext(voHistoricalColl.get(i), voHistoricalColl)){
					voSortedHistoricalColl.add(voHistoricalColl.get(i));
					voHistoricalColl.remove(voHistoricalColl.get(i));
				}
		}
		
		return voSortedHistoricalColl;
	}

	private boolean isNext(PersonAddress address, PersonAddressCollection voHistoricalColl) {
		
		boolean isNext = true;
		
		for (int i = 0 ; i < voHistoricalColl.size() ; i++){
			if(voHistoricalColl.get(i).getNotificationDateIsNotNull() 
					&& voHistoricalColl.get(i).getNotificationDate().isGreaterThan(address.getNotificationDate()))
				return false;
		}
		
		return isNext;
	}

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getMode().equals(FormMode.EDIT)){
			
			if(form.dteDate().getValue()==null){
				engine.showMessage("Date is mandatory.");
				return;
			}
			else if(form.dteDate().getValue().isGreaterThan(new Date())){
				engine.showMessage("Date cannot be in the future.");
				return;
			}
			PersonAddress voPersonAddress = (PersonAddress) form.getLocalContext().getPersonAddress().clone();
			voPersonAddress.setNotificationDate(form.dteDate().getValue());
			voPersonAddress.setAddressType(AddressType.HISTORICAL);
			
			form.getGlobalContext().Core.setPersonAddress(voPersonAddress);
			
			engine.close(DialogResult.OK);
			return;
		}
		
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onRecbrAddressValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		PersonAddress voPersonAddress = form.recbrAddress().getValue();
		if(voPersonAddress!=null){
			populateScreenFromData(voPersonAddress);
		}
	}
	
}
