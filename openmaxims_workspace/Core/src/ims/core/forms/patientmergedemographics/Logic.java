//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.forms.patientmergedemographics;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MergeRequestVo;
import ims.core.vo.MergedPatientVo;
import ims.core.vo.Patient;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientMergeVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatientMergeFields;
import ims.core.vo.lookups.PatientMergeFieldsCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateFormat;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final Integer COL_FIELD_NAME = new Integer(0);
	private static final Integer COL_SOURCE_PATIENT = new Integer(1);
	private static final Integer COL_DESTINATION_PATIENT = new Integer(2);
	private static final Integer COL_SOURCE_BUTTONS = new Integer(3);
	private static final Integer COL_DESTINATION_BUTTONS = new Integer(4);
	private static final Integer COL_RESULT_DATA = new Integer(5);
	private static final Integer COL_WAS_MODIFIED = new Integer(6);
	
	private static final String SOURCE_BUTTON_TEXT = "Use Source";
	private static final String DESTINATION_BUTTON_TEXT = "Keep Destination";
	private static final String DUPLICATE_IDENTIFIER_STRING = "(DUP";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open() 
	{
		form.getLocalContext().setSourcePatient(domain.getPatient(form.getGlobalContext().Core.getPatientSource()));
		form.getLocalContext().setDestinationPatient(domain.getPatient(form.getGlobalContext().Core.getPatientDestination()));

		form.getLocalContext().setResultPatient(domain.getDestinationPatient(form.getGlobalContext().Core.getPatientDestination()));
		
		populateMergeGrid(form.getLocalContext().getSourcePatient(), (PatientMergeVo) form.getLocalContext().getDestinationPatient().clone());
	}

	private boolean switchDUPIdentifiers() 
	{
		form.getLocalContext().setSourcePatientFull(domain.getDestinationPatient(form.getGlobalContext().Core.getPatientSource()));
		
		PatientIdCollection sourceIdentifiers = form.getLocalContext().getSourcePatientFull().getIdentifiers();
		
		if(sourceIdentifiers == null)
			return false;
		
		PatientIdCollection resultIdentifiers = form.getLocalContext().getResultPatient().getIdentifiers();
		
		if(resultIdentifiers == null)
			return false;
		
		boolean foundDUP = false;
		for(int i = 0; i<resultIdentifiers.size(); i++)
		{
			PatientId resultId = resultIdentifiers.get(i);
			
			if(resultId == null)
				continue;
			
			for(int j=0; j<sourceIdentifiers.size(); j++)
			{
				PatientId sourceId = sourceIdentifiers.get(j);
				
				if(sourceId == null)
					continue;
				
				if(!sourceId.getType().equals(PatIdType.NHSN))
					continue;
				
				if(sourceId.getType().equals(resultId.getType()) && sourceId.getIdValue().equals(formatIdentifierValue(resultId.getIdValue())))
				{
					resultIdentifiers.set(i, sourceId);
					sourceIdentifiers.remove(j);
					
					if(form.getLocalContext().getSourcePatientIdentifierCollection() == null)
						form.getLocalContext().setSourcePatientIdentifierCollection(new PatientIdCollection());
					
					form.getLocalContext().getSourcePatientIdentifierCollection().add(resultId);
					foundDUP = true;
				}
			}
		}
		
		return foundDUP;
	}

	private void populateMergeGrid(PatientMergeVo sourcePatient, PatientMergeVo destinationPatient) 
	{
		if(sourcePatient == null || destinationPatient == null)
			return;
		
		for(int i=0; i<form.dyngrdMerge().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMerge().getRows().get(i);
			
			if(row.getRows().size() > 0)
			{
				for(int j =0; j<row.getRows().size(); j++)
				{
					populateMergeRow(row.getRows().get(j), sourcePatient, destinationPatient);
				}
			}
			
			populateMergeRow(form.dyngrdMerge().getRows().get(i), sourcePatient, destinationPatient);
		}
	}
	
	private void populateMergeRow(DynamicGridRow row, PatientMergeVo sourcePatient, PatientMergeVo destinationPatient) 
	{
		if(row == null || sourcePatient == null || destinationPatient == null)
			return;
		
		if(row.getValue() instanceof PatientMergeFields)
		{
			populateCell(row.getCells().newCell(getColumn(COL_SOURCE_PATIENT), DynamicCellType.STRING), (PatientMergeFields) row.getValue(), sourcePatient, null, false, false);
			populateCell(row.getCells().newCell(getColumn(COL_DESTINATION_PATIENT), DynamicCellType.STRING), (PatientMergeFields) row.getValue(), destinationPatient, null, false, false);
			
			if(!PatientMergeFields.DATE_OF_DEATH.equals((PatientMergeFields) row.getValue()))
			{
				createMoveButtons(row);
			}
			
			populateCell(row.getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING), (PatientMergeFields) row.getValue(), destinationPatient, null, false, false);
			removeMoveButtons(row);
		}
	}

	private void removeMoveButtons(DynamicGridRow row) 
	{
		DynamicGridCell resultCell = row.getCells().get(getColumn(COL_RESULT_DATA));
		DynamicGridCell sourceCell = row.getCells().get(getColumn(COL_SOURCE_PATIENT));
		DynamicGridCell destinationCell = row.getCells().get(getColumn(COL_DESTINATION_PATIENT));
		if(resultCell != null && resultCell.getValue() != null && sourceCell != null && resultCell.getValue().equals(sourceCell.getValue()) && destinationCell != null && resultCell.getValue().equals(destinationCell.getValue()))
		{
			DynamicGridCell cell = row.getCells().get(getColumn(COL_SOURCE_BUTTONS));
			if(cell != null)
				cell.clear();
			
			cell = row.getCells().get(getColumn(COL_DESTINATION_BUTTONS));
			if(cell != null)
				cell.clear();
		}
	}

	private void populateCell(DynamicGridCell cell, PatientMergeFields rowValue, PatientMergeVo patient, Patient result, boolean isFromSource, boolean isApplyAllClicked) 
	{
		if(patient == null || cell == null)
			return;
		
		cell.setReadOnly(true);
		
		if(PatientMergeFields.NAME.equals(rowValue))
		{
			if(result != null)
			{
				populateNameCells(cell, patient.getName(), isFromSource);
				result.setName(patient.getName());
			}
		}
		else if(PatientMergeFields.TITLE.equals(rowValue))
		{
			cell.setValue((patient.getName() != null && patient.getName().getTitle() != null) ? patient.getName().getTitle().toString() : null);
			
			if(result != null)
			{
				if(result.getName() == null)
					result.setName(new PersonName());
				
				result.getName().setTitle(patient.getName().getTitle());
			}
		}
		else if(PatientMergeFields.SURNAME.equals(rowValue))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getSurname() : null);
			
			if(result != null)
			{
				if(result.getName() == null)
					result.setName(new PersonName());
				
				result.getName().setSurname(patient.getName().getSurname());
				result.getName().setUpperSurname(patient.getName().getUpperSurname());
			}
		}
		else if(PatientMergeFields.FORENAME.equals(rowValue))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getForename() : null);
			
			if(result != null)
			{
				if(result.getName() == null)
					result.setName(new PersonName());
				
				result.getName().setForename(patient.getName().getForename());
				result.getName().setUpperForename(patient.getName().getUpperForename());
			}
		}
		else if(PatientMergeFields.MIDDLENAME.equals(rowValue))
		{
			cell.setValue(patient.getName() != null ? patient.getName().getMiddleName() : null);
			
			if(result != null)
			{
				if(result.getName() == null)
					result.setName(new PersonName());
				
				result.getName().setMiddleName(patient.getName().getMiddleName());
			}
		}
		else if(PatientMergeFields.SEX.equals(rowValue))
		{
			cell.setValue(patient.getSex() != null ? patient.getSex().getText() : null);
			
			if(result != null)
				result.setSex(patient.getSex());
		}
		else if(PatientMergeFields.DATE_OF_BIRTH.equals(rowValue))
		{
			cell.setValue(patient.getDob() != null ? patient.getDob().toString(DateFormat.STANDARD) : null);
			
			if(result != null)
				result.setDob(patient.getDob());
		}
		else if(PatientMergeFields.DATE_OF_DEATH.equals(rowValue))
		{
			cell.setValue(patient.getDod() != null ? patient.getDod().toString() : null);
			
			if(result != null)
				result.setDod(patient.getDod());
		}
		else if(PatientMergeFields.ETHNIC_ORIGIN.equals(rowValue))
		{
			cell.setValue(patient.getEthnicOrigin() != null ? patient.getEthnicOrigin().getText() : null);
			
			if(result != null)
				result.setEthnicOrigin(patient.getEthnicOrigin());
		}
		else if(PatientMergeFields.RELIGION.equals(rowValue))
		{
			cell.setValue(patient.getReligion() != null ? patient.getReligion().getText() : null);
			
			if(result != null)
				result.setReligion(patient.getReligion());
		}
		else if(PatientMergeFields.MARITAL_STATUS.equals(rowValue))
		{
			cell.setValue(patient.getMaritalStatus() != null ? patient.getMaritalStatus().getText() : null);
			
			if(result != null)
				result.setMaritalStatus(patient.getMaritalStatus());
		}
		else if(PatientMergeFields.OCCUPATION.equals(rowValue))
		{
			cell.setValue(patient.getOccupation() != null ? patient.getOccupation().getText() : null);
			
			if(result != null)
				result.setOccupation(patient.getOccupation());
		}
		else if(PatientMergeFields.LANGUAGE.equals(rowValue))
		{
			cell.setValue(patient.getLanguage() != null ? patient.getLanguage().getText() : null);
			
			if(result != null)
				result.setLanguage(patient.getLanguage());
		}
		else if(PatientMergeFields.ADDRESS.equals(rowValue))
		{
			if(result != null)
			{
				populateAddressCells(cell, patient.getAddress(), isFromSource);
				result.setAddress(patient.getAddress());
				
				if(patient.getAddresses() != null && patient.getAddresses().size() > 0)
				{
					form.getLocalContext().setAddressCollection(patient.getAddresses());
					form.getLocalContext().setMessageBoxIdFromAddresCollection(engine.showMessage("Do you want to move address history?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
				}
			}
		}
		else if(PatientMergeFields.ADDRESSLINE1.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getLine1() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setLine1(patient.getAddress() != null ? patient.getAddress().getLine1() : null);
			}
		}
		else if(PatientMergeFields.ADDRESSLINE2.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getLine2() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setLine2(patient.getAddress() != null ? patient.getAddress().getLine2() : null);
			}
		}
		else if(PatientMergeFields.ADDRESSLINE3.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getLine3() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setLine3(patient.getAddress() != null ?  patient.getAddress().getLine3() : null);
			}
		}
		else if(PatientMergeFields.ADDRESSLINE4.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getLine4() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setLine4(patient.getAddress() != null ?  patient.getAddress().getLine4() : null);
			}
		}
		else if(PatientMergeFields.ADDRESSLINE5.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getLine5() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setLine5(patient.getAddress() != null ?  patient.getAddress().getLine5() : null);
			}
		}
		else if(PatientMergeFields.POSTCODE.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getPostCode() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setPostCode(patient.getAddress() != null ?  patient.getAddress().getPostCode() : null);
			}
		}
		else if(PatientMergeFields.PHONE.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getPhone() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setPhone(patient.getAddress() != null ? patient.getAddress().getPhone() : null);
			}
		}
		else if(PatientMergeFields.FAX.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getFax() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setFax(patient.getAddress() != null ? patient.getAddress().getFax() : null);
			}
		}
		else if(PatientMergeFields.ADDRESSTYPE.equals(rowValue))
		{
			cell.setValue((patient.getAddress() != null && patient.getAddress().getAddressType() != null ) ? patient.getAddress().getAddressType().getText() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setAddressType(patient.getAddress() != null ? patient.getAddress().getAddressType() : null);
			}
		}
		else if(PatientMergeFields.CCG.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getPCT() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setPCT(patient.getAddress() != null ? patient.getAddress().getPCT() : null);
			}
		}
		else if(PatientMergeFields.OTHERPHONE.equals(rowValue))
		{
			cell.setValue(patient.getAddress() != null ? patient.getAddress().getOtherphone() : null);
			
			if(result != null)
			{
				if(result.getAddress() == null)
					result.setAddress(new PersonAddress());
				
				result.getAddress().setOtherphone(patient.getAddress() != null ? patient.getAddress().getOtherphone() : null);
			}
		}
		else if(PatientMergeFields.IDENTIFIERS.equals(rowValue))
		{
			populateIdentifiers(cell, patient.getIdentifiers().sort(new PatientIdComparator(SortOrder.ASCENDING)));
		}
		else if(PatientMergeFields.GP.equals(rowValue))
		{
			if(result != null)
			{
				if(patient.getGp() != null && result.getGpSurgery() != null && isApplyAllClicked == false)
				{
					Boolean isLinked = domain.checkIfGPIsLinkedToSurgery(patient.getGp(), result.getGpSurgery());
					
					if(!isLinked )
					{
						form.getLocalContext().setNewGP(patient.getGp());
						form.getLocalContext().setNewGPSurgery(patient.getGpSurgery());
						form.getLocalContext().setCellColor(isFromSource ? Color.Beige : null);
						
						form.getLocalContext().setMessageBoxIdFromGPAndGPSurgery(engine.showMessage("Gp is not linked to currently selected Gp Surgery. Use the GP Surgery for selected GP?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
						
						return;
					}
				}
				
				result.setGp(patient.getGp() != null ? new GpShortVo(patient.getGp().getID_Gp(), patient.getGp().getVersion_Gp()) : null);
			}
			
			cell.setValue((patient.getGp() != null && patient.getGp().getName() != null) ? patient.getGp().getName().toString() : null);
		}
		else if(PatientMergeFields.GP_SURGERY.equals(rowValue))
		{
			if(result != null)
			{
				if(patient.getGpSurgery() != null && result.getGp() != null && isApplyAllClicked == false)
				{
					Boolean isLinked = domain.checkIfGPIsLinkedToSurgery(result.getGp(), patient.getGpSurgery());
					
					if(!isLinked)
					{
						form.getLocalContext().setNewGP(patient.getGp());
						form.getLocalContext().setNewGPSurgery(patient.getGpSurgery());
						form.getLocalContext().setCellColor(isFromSource ? Color.Beige : null);
						
						form.getLocalContext().setMessageBoxIdFromGPAndGPSurgery(engine.showMessage("Gp Surgery is not linked to currently selected Gp. Use the GP for selected GP Surgery?", "", MessageButtons.YESNO, MessageIcon.QUESTION));
						
						return;
					}
				}
				
				result.setGpSurgery(patient.getGpSurgery() != null ? new LocSiteShortVo(patient.getGpSurgery().getID_Location(), patient.getGpSurgery().getVersion_Location()) : null);
			}
			
			cell.setValue(patient.getGpSurgery() != null ? patient.getGpSurgery().getName() : null);
		}
		else if(PatientMergeFields.NEXT_OF_KIN.equals(rowValue))
		{
			cell.setValue((patient.getNok() != null && patient.getNok().getName() != null) ? patient.getNok().getName().toString() : null);
			
			if(result != null)
			{
				result.setNok(patient.getNok());
			}
		}
		else if(PatientMergeFields.MEDICAL_CARD_INFORMATION.equals(rowValue))
		{
			cell.setValue(patient.getInsurance() != null ? patient.getInsurance().getMedicalCardNo() : null);
			
			if(result != null)
			{
				result.setInsurance(patient.getInsurance());
			}
		}
		else if(PatientMergeFields.COMMUNICATION_CHANNELS.equals(rowValue))
		{
			if(result == null)
			{
				populateComunicationChannel(cell, patient.getCommChannels().sort(new CommChannelComparator(SortOrder.ASCENDING)));
			}
			else
			{
				populateResultCommChannels(cell, patient, isFromSource);
			}
		}
	
		if(cell.getValue() instanceof String)
			cell.setTooltip((String) cell.getValue());
	}

	private void populateIdentifiers(DynamicGridCell cell,	PatientIdCollection identifiers) 
	{
		if(identifiers == null)
			return;
		
		identifiers = (PatientIdCollection) identifiers.clone();
		DynamicGridColumn column = cell.getColumn();
		
		if(column.equals(getColumn(COL_DESTINATION_PATIENT)) || column.equals(getColumn(COL_RESULT_DATA)))
			checkIfThereAreSameIdentifier(identifiers, cell.getRow(), column);
		
		for(int i=0; i<identifiers.size(); i++)
		{
			PatientId identifier = identifiers.get(i);
			DynamicGridRow identifierRow = getIdentifierRow(cell.getRow(), column, identifier);
			
			if(identifierRow == null)
				continue;
			
			DynamicGridCell cellNew = identifierRow.getCells().newCell(column, DynamicCellType.STRING);
			cellNew.setValue(identifier.getValue());
			cellNew.setReadOnly(true);
		}
	}

	private DynamicGridRow getIdentifierRow(DynamicGridRow row, DynamicGridColumn column, PatientId identifier) 
	{
		if(row == null)
			return null;
		
		for(int i=0; i<row.getRows().size(); i++)
		{
			if(row.getRows().get(i).getValue().equals(identifier.getType()) && (row.getRows().get(i).getCells().get(column) == null || (row.getRows().get(i).getCells().get(column) != null && row.getRows().get(i).getCells().get(column).getValue() == null)))
			{
				return row.getRows().get(i);
			}
		}
		
		DynamicGridRow childRow = row.getRows().newRow();
		
		DynamicGridCell cell = childRow.getCells().newCell(getColumn(COL_FIELD_NAME), DynamicCellType.STRING);
		cell.setValue("<b>" + identifier.getType().getText() + "</b>");
		cell.setReadOnly(true);
		
		childRow.setValue(identifier.getType());
		return childRow;
	}

	private void checkIfThereAreSameIdentifier(PatientIdCollection identifiers,	DynamicGridRow parentRow, DynamicGridColumn column) 
	{
		if(identifiers == null || identifiers.size() == 0 || parentRow == null)
			return;
		
		for(int j = identifiers.size() - 1; j>=0; j--)
		{
			if(identifiers.get(j) == null)
				continue;
			
			for(int i=0; i<parentRow.getRows().size(); i++)
			{
				if(parentRow.getRows().get(i).getValue().equals(identifiers.get(j).getType()))
				{
					DynamicGridCell sourceIdentifierValueCell = parentRow.getRows().get(i).getCells().get(getColumn(COL_SOURCE_PATIENT));
					
					if(sourceIdentifierValueCell != null && sourceIdentifierValueCell.getValue() != null)
					{
						String destinationIdentifierValue = formatIdentifierValue(identifiers.get(j).getValue());
						
						if(sourceIdentifierValueCell.getValue().equals(destinationIdentifierValue))
						{
							DynamicGridCell cellNew = parentRow.getRows().get(i).getCells().newCell(column, DynamicCellType.STRING);
							cellNew.setValue(getColumn(COL_RESULT_DATA).equals(column) ? destinationIdentifierValue : identifiers.get(j).getValue());
							cellNew.setReadOnly(true);
						
							identifiers.remove(j);
							break;
						}
					}
				}
			}
		}
	}

	private String formatIdentifierValue(String identifier) 
	{
		if(identifier == null)
			return null;
		
		String newIdentifier = new String(identifier.toString());
		if(newIdentifier.indexOf(DUPLICATE_IDENTIFIER_STRING) > 0)
			newIdentifier = newIdentifier.substring(0, newIdentifier.indexOf(DUPLICATE_IDENTIFIER_STRING));
		
		return newIdentifier.trim();
	}

	private void populateResultCommChannels(DynamicGridCell cell, PatientMergeVo patient, boolean isFromSource) 
	{
		if(cell == null)
			return;
		
		for(int i=0; i<cell.getRow().getRows().size(); i++)
		{
			DynamicGridCell buttonCell = cell.getRow().getRows().get(i).getCells().get(isFromSource ? getColumn(COL_SOURCE_BUTTONS) :  getColumn(COL_DESTINATION_BUTTONS));
			DynamicGridCell newCell = cell.getRow().getRows().get(i).getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING);
			newCell.setReadOnly(true);
			
			populateResultChannelCell(buttonCell, isFromSource, patient, newCell);
		}
	}

	private void populateAddressCells(DynamicGridCell cell,	PersonAddress address, boolean isFromSource) 
	{
		if(cell == null)
			return;
		
		for(int i=0; i<cell.getRow().getRows().size(); i++)
		{
			DynamicGridRow row = cell.getRow().getRows().get(i);
			Object rowValue = cell.getRow().getRows().get(i).getValue();
			
			DynamicGridCell resultCell = row.getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING);
			resultCell.setReadOnly(true);
			
			if(PatientMergeFields.ADDRESSLINE1.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getLine1() : null );
			}
			else if(PatientMergeFields.ADDRESSLINE2.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getLine2() : null);
			}
			else if(PatientMergeFields.ADDRESSLINE3.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getLine3() : null);
			}
			else if(PatientMergeFields.ADDRESSLINE4.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getLine4() : null);
			}
			else if(PatientMergeFields.ADDRESSLINE5.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getLine5() : null);
			}
			else if(PatientMergeFields.POSTCODE.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getPostCode() : null);
			}
			else if(PatientMergeFields.PHONE.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getPhone() : null);
			}
			else if(PatientMergeFields.FAX.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getFax() : null);
			}
			else if(PatientMergeFields.ADDRESSTYPE.equals(rowValue))
			{
				resultCell.setValue((address != null && address.getAddressType() != null) ? address.getAddressType().getText() : null);
			}
			else if(PatientMergeFields.CCG.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getPCT() : null);
			}
			else if(PatientMergeFields.OTHERPHONE.equals(rowValue))
			{
				resultCell.setValue(address != null ? address.getOtherphone() : null);
			}
			
			resultCell.setBackColor(isFromSource ? Color.Beige : null);
			
			DynamicGridCell wasDestinationModified = row.getCells().get(getColumn(COL_WAS_MODIFIED));
			if(wasDestinationModified == null)
				wasDestinationModified = row.getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.BOOL);
			
			wasDestinationModified.setValue(isFromSource ? Boolean.TRUE : Boolean.FALSE);
		}
	}

	private void populateNameCells(DynamicGridCell cell, PersonName name, boolean isFromSource) 
	{
		if(cell == null)
			return;
		
		for(int i=0; i<cell.getRow().getRows().size(); i++)
		{
			DynamicGridRow row = cell.getRow().getRows().get(i);
			Object rowValue = row.getValue();
			
			DynamicGridCell resultCell = row.getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING);
			resultCell.setReadOnly(true);
			
			if(PatientMergeFields.TITLE.equals(rowValue))
			{
				resultCell.setValue((name != null && name.getTitle() != null) ? name.getTitle().toString() : null);
			}
			else if(PatientMergeFields.SURNAME.equals(rowValue))
			{
				resultCell.setValue(name != null ? name.getSurname() : null);
			}
			else if(PatientMergeFields.FORENAME.equals(rowValue))
			{
				resultCell.setValue(name != null ? name.getForename() : null);
			}
			else if(PatientMergeFields.MIDDLENAME.equals(rowValue))
			{
				resultCell.setValue(name != null ? name.getMiddleName() : null);
			}
			
			resultCell.setBackColor(isFromSource && !sourceIsEqualWithDestination(row) ? Color.Beige : null);
			
			if(!sourceIsEqualWithDestination(row))
			{
				DynamicGridCell wasDestinationModified = row.getCells().get(getColumn(COL_WAS_MODIFIED));
				if(wasDestinationModified == null)
					wasDestinationModified = row.getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.BOOL);
			
				wasDestinationModified.setValue(isFromSource ? Boolean.TRUE : Boolean.FALSE);
			}
		}
	}

	private boolean sourceIsEqualWithDestination(DynamicGridRow row) 
	{
		if(row == null)
			return false;
		
		DynamicGridCell sourceCell = row.getCells().get(getColumn(COL_SOURCE_PATIENT));
		DynamicGridCell destinationCell = row.getCells().get(getColumn(COL_DESTINATION_PATIENT));
		
		if((sourceCell == null && destinationCell == null) || (sourceCell != null && destinationCell != null && sourceCell.getValue() == null && destinationCell.getValue() == null) || (sourceCell != null && destinationCell != null && sourceCell.getValue() != null && sourceCell.getValue().equals(destinationCell.getValue())))
			return true;
		
		return false;
	}

	private void populateComunicationChannel(DynamicGridCell cell,	CommChannelVoCollection channelColl) 
	{
		if(channelColl == null)
			return;
		
		channelColl = (CommChannelVoCollection) channelColl.clone();
		DynamicGridColumn column = cell.getColumn();
		
		if(column.equals(getColumn(COL_DESTINATION_PATIENT)) || column.equals(getColumn(COL_RESULT_DATA)))
			checkIfThereAreSameChannels(channelColl, cell.getRow(), column);
		
		for(int i=0; i<channelColl.size(); i++)
		{
			CommChannelVo channel = channelColl.get(i);
			DynamicGridRow channelRow = getChannelRow(cell.getRow(), column, channel);
			
			if(channelRow == null)
				continue;
			
			DynamicGridCell cellNew = channelRow.getCells().newCell(column, DynamicCellType.STRING);
			cellNew.setValue(channel.getCommValue());
			cellNew.setReadOnly(true);
			
			createMoveButtons(channelRow);
			removeMoveButtons(channelRow);
		}
	}

	private void checkIfThereAreSameChannels(CommChannelVoCollection channelColl, DynamicGridRow parentRow, DynamicGridColumn column) 
	{
		if(channelColl == null || channelColl.size() == 0 || parentRow == null)
			return;
		
		for(int j = channelColl.size() - 1; j>=0; j--)
		{
			if(channelColl.get(j) == null)
				continue;
			
			for(int i=0; i<parentRow.getRows().size(); i++)
			{
				if(parentRow.getRows().get(i).getValue().equals(channelColl.get(j).getChannelType()))
				{
					DynamicGridCell sourceChannelValue = parentRow.getRows().get(i).getCells().get(getColumn(COL_SOURCE_PATIENT));
					if(sourceChannelValue != null && sourceChannelValue.getValue() != null && sourceChannelValue.getValue().equals(channelColl.get(j).getCommValue()))
					{
						DynamicGridCell cellNew = parentRow.getRows().get(i).getCells().newCell(column, DynamicCellType.STRING);
						cellNew.setValue(channelColl.get(j).getCommValue());
						cellNew.setReadOnly(true);
						
						createMoveButtons(parentRow.getRows().get(i));
						removeMoveButtons(parentRow.getRows().get(i));
						
						channelColl.remove(j);
						break;
					}
				}
			}
		}
	}

	private DynamicGridRow getChannelRow(DynamicGridRow row, DynamicGridColumn column, CommChannelVo channel) 
	{
		if(row == null)
			return null;
		
		for(int i=0; i<row.getRows().size(); i++)
		{
			if(row.getRows().get(i).getValue().equals(channel.getChannelType()) && (row.getRows().get(i).getCells().get(column) == null || (row.getRows().get(i).getCells().get(column) != null && row.getRows().get(i).getCells().get(column).getValue() == null)))
			{
				return row.getRows().get(i);
			}
		}
		
		DynamicGridRow childRow = row.getRows().newRow();
		
		DynamicGridCell cell = childRow.getCells().newCell(getColumn(COL_FIELD_NAME), DynamicCellType.STRING);
		cell.setValue("<b>" + channel.getChannelType().getText() + "</b>");
		cell.setReadOnly(true);
		
		childRow.setValue(channel.getChannelType());
		return childRow;
	}

	private void initialise() 
	{
		initialiseMergeGrid();
		bindMergeGridWithFieldsType();
	}
	
	private void bindMergeGridWithFieldsType() 
	{
		PatientMergeFieldsCollection patientMergeFieldsColl = LookupHelper.getPatientMergeFields(domain.getLookupService());
		
		for(int i=0; i<patientMergeFieldsColl.size(); i++)
		{
			addPatientMergeRow(patientMergeFieldsColl.get(i));
		}
	}
	
	private void addPatientMergeRow(PatientMergeFields patientMergeFields) 
	{
		if(patientMergeFields == null)
			return;
		
		DynamicGridRow row = getParentRow(patientMergeFields);
		row.setSelectable(false);
		row.setExpanded(true);
		row.setValue(patientMergeFields);
		
		DynamicGridCell cell = row.getCells().newCell(getColumn(COL_FIELD_NAME), DynamicCellType.STRING);
		cell.setValue("<b>" + patientMergeFields.getText() + "</b>");
		cell.setReadOnly(true);
	}

	private void createMoveButtons(DynamicGridRow row) 
	{
		DynamicGridCell sourceCell = row.getCells().get(getColumn(COL_SOURCE_PATIENT));
		DynamicGridCell destinationCell = row.getCells().get(getColumn(COL_DESTINATION_PATIENT));
		if((sourceCell != null && sourceCell.getValue() != null) || (destinationCell != null && destinationCell.getValue() != null) || PatientMergeFields.NAME.equals(row.getValue()) || PatientMergeFields.ADDRESS.equals(row.getValue()) || PatientMergeFields.COMMUNICATION_CHANNELS.equals(row.getValue()))
		{
			DynamicGridCell cell = row.getCells().newCell(getColumn(COL_SOURCE_BUTTONS), DynamicCellType.IMAGEBUTTON);
			cell.setValue(form.getImages().Core.UseSource);
			cell.setTooltip(SOURCE_BUTTON_TEXT);
			
			cell = row.getCells().newCell(getColumn(COL_DESTINATION_BUTTONS), DynamicCellType.IMAGEBUTTON);
			cell.setValue(form.getImages().Core.UseDestination);
			cell.setTooltip(DESTINATION_BUTTON_TEXT);
		}
	}
	
	private DynamicGridRow getParentRow(PatientMergeFields patientMergeFields) 
	{
		if(patientMergeFields == null)
			return null;
		
		if(patientMergeFields.getParent() != null)
		{
			for(int i=0 ; i<form.dyngrdMerge().getRows().size(); i++)
			{
				if(patientMergeFields.getParent().equals(form.dyngrdMerge().getRows().get(i).getValue()))
					return form.dyngrdMerge().getRows().get(i).getRows().newRow();
			}
		}
		
		return form.dyngrdMerge().getRows().newRow();
	}
	
	private DynamicGridColumn getColumn(Integer colFieldName) 
	{
		return form.dyngrdMerge().getColumns().getByIdentifier(colFieldName);
	}
	
	private void initialiseMergeGrid() 
	{
		form.dyngrdMerge().clear();
		
		DynamicGridColumn column = form.dyngrdMerge().getColumns().newColumn("Field Name", COL_FIELD_NAME);
		column.setWidth(200);
		column.setCanGrow(true);

		column = form.dyngrdMerge().getColumns().newColumn("Source Patient", COL_SOURCE_PATIENT);
		column.setWidth(190);
		column.setCanGrow(true);
		
		column = form.dyngrdMerge().getColumns().newColumn("Destination Patient", COL_DESTINATION_PATIENT);
		column.setWidth(190);
		column.setCanGrow(true);
		
		column = form.dyngrdMerge().getColumns().newColumn("", COL_SOURCE_BUTTONS);
		column.setWidth(30);
		column.setCanGrow(false);
		
		column = form.dyngrdMerge().getColumns().newColumn("", COL_DESTINATION_BUTTONS);
		column.setWidth(30);
		column.setCanGrow(false);
		
		column = form.dyngrdMerge().getColumns().newColumn("", COL_WAS_MODIFIED);
		column.setWidth(0);
		column.setCanGrow(false);
		
		column = form.dyngrdMerge().getColumns().newColumn("Result Data", COL_RESULT_DATA);
		column.setWidth(-1);
		column.setCanGrow(true);
	}

	@Override
	protected void onDyngrdMergeCellButtonClicked(DynamicGridCell cell) 
	{
		if(cell.getColumn().getIdentifier().equals(COL_SOURCE_BUTTONS) || cell.getColumn().getIdentifier().equals(COL_DESTINATION_BUTTONS))
		{
			populateResultCell(cell, false);
		}
		
		destinationWasModified();
	}

	private void populateResultCell(DynamicGridCell cell, boolean isApplyAllClicked) 
	{
		if(cell == null)
			return;
		
		PatientMergeVo source = form.getLocalContext().getSourcePatient();
		PatientMergeVo destination = (PatientMergeVo) form.getLocalContext().getDestinationPatient().clone();
		Patient result = form.getLocalContext().getResultPatient();
		
		DynamicGridColumn buttonColumn = cell.getColumn();
		boolean isFromSource = buttonColumn.getIdentifier().equals(COL_SOURCE_BUTTONS);
		
		DynamicGridCell wasDestinationModified = cell.getRow().getCells().get(getColumn(COL_WAS_MODIFIED));
		if(wasDestinationModified == null)
			wasDestinationModified = cell.getRow().getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.BOOL);
		
		wasDestinationModified.setValue(isFromSource ? Boolean.TRUE : Boolean.FALSE);
		
		PatientMergeVo patient = isFromSource ? source : destination;
		
		Object rowValue = cell.getRow().getValue();
		
		DynamicGridCell newCell = cell.getRow().getCells().get(getColumn(COL_RESULT_DATA));
		
		if(newCell == null)
		{
			newCell = cell.getRow().getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING);
			newCell.setReadOnly(true);
		}
		
		if(rowValue instanceof PatientMergeFields)
		{
			populateCell(newCell, (PatientMergeFields) rowValue, patient, result, isFromSource, isApplyAllClicked);
			
			if(form.getLocalContext().getMessageBoxIdFromGPAndGPSurgery() == null)
			{
				newCell.setBackColor(isFromSource ? Color.Beige : null);
			}
		}
		else if(rowValue instanceof ChannelType)
		{
			populateResultChannelCell(cell, isFromSource, patient, newCell);
		}
		
		if(cell.getRow().getParent() != null)
		{
			checkIfThereAreModificationInParent(cell.getRow().getParent());
		}
	}

	private void checkIfThereAreModificationInParent(DynamicGridRow parent) 
	{
		if(parent == null || parent.getRows() == null)
			return;
		
		boolean areModification = false;
		
		for(int i=0; i<parent.getRows().size(); i++)
		{
			DynamicGridCell cell = parent.getRows().get(i).getCells().get(getColumn(COL_WAS_MODIFIED));
			
			if(cell != null && Boolean.TRUE.equals(cell.getValue()))
				areModification = true;
		}
		
		DynamicGridCell parentCell = parent.getCells().get(getColumn(COL_WAS_MODIFIED));
		
		if(parentCell == null)
			parentCell = parent.getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.BOOL);
		
		parentCell.setValue(areModification);
		
		if(Boolean.FALSE.equals(areModification))
		{
			DynamicGridCell resultCell = parent.getCells().get(getColumn(COL_RESULT_DATA));
			if(resultCell != null)
				resultCell.setBackColor(null);
		}
	}

	private void populateResultChannelCell(DynamicGridCell cell, boolean isFromSource, PatientMergeVo patient, DynamicGridCell newCell) 
	{
		if(cell == null)
			return;
		
		Object rowValue = cell.getRow().getValue();
		Patient result = form.getLocalContext().getResultPatient();
		
		Object commChannelValue = null;
		
		DynamicGridCell commChannelValueCell = isFromSource ? cell.getRow().getCells().get(getColumn(COL_SOURCE_PATIENT)) : cell.getRow().getCells().get(getColumn(COL_DESTINATION_PATIENT));
		DynamicGridCell previousCommChannelValueCell = isFromSource ? cell.getRow().getCells().get(getColumn(COL_DESTINATION_PATIENT)) : cell.getRow().getCells().get(getColumn(COL_SOURCE_PATIENT));
		
		if(commChannelValueCell != null)
			commChannelValue = commChannelValueCell.getValue();
		
		CommChannelVo channel = getCommChannel((ChannelType) rowValue, commChannelValue, patient.getCommChannels());
		CommChannelVo previousChannel = null;
		
		if(previousCommChannelValueCell != null)
		{
			previousChannel = getCommChannel((ChannelType) rowValue, previousCommChannelValueCell.getValue(), result.getCommChannels());
		}
		
		newCell.setValue(channel != null ? channel.getCommValue() : null);
		
		if(channel != null)
		{
			if(result.getCommChannels() == null)
				result.setCommChannels(new CommChannelVoCollection());
			
			result.getCommChannels().add(channel);
		}
		
		if(previousChannel != null)
			result.getCommChannels().remove(previousChannel);
		
		newCell.setBackColor(isFromSource && !sourceIsEqualWithDestination(cell.getRow()) ? Color.Beige : null);
		
		if(!sourceIsEqualWithDestination(cell.getRow()))
		{
			DynamicGridCell wasDestinationModified = cell.getRow().getCells().get(getColumn(COL_WAS_MODIFIED));
			if(wasDestinationModified == null)
				wasDestinationModified = cell.getRow().getCells().newCell(getColumn(COL_WAS_MODIFIED), DynamicCellType.BOOL);
			
			wasDestinationModified.setValue(isFromSource ? Boolean.TRUE : Boolean.FALSE);
		}
	}

	private CommChannelVo getCommChannel(ChannelType channelType, Object channelValue, CommChannelVoCollection commChannelVoCollection) 
	{
		if(commChannelVoCollection == null)
			return null;
		
		if(channelType == null || channelValue == null)
			return null;
		
		for(CommChannelVo channel : commChannelVoCollection)
		{
			if(channel == null)
				continue;
			
			if(channel.getChannelType().equals(channelType) && channel.getCommValue().equals(channelValue))
				return channel;
		}
		
		return null;
	}

	@Override
	protected void onBtnSaveAndMergeClick() throws PresentationLogicException 
	{
		if(save())
		{
			engine.close(DialogResult.OK);
		}
	}

	private boolean save() 
	{
		boolean foundDUP = checkForDUPIdentifiers();
		
		if(foundDUP)
		{
			switchDUPIdentifiers();
			
			String[] errors = form.getLocalContext().getSourcePatientFull().validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
		}
		
		String[] errors = form.getLocalContext().getResultPatient().validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		MergedPatientVo patientBeforeMerge = null;
		if(destinationWasModified())
		{
			patientBeforeMerge = createPatientBeforeMerge();
			errors = patientBeforeMerge.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
		}
		
		MergeRequestVo voMergeRequest = populateMergeRequest(patientBeforeMerge != null);
		errors = voMergeRequest.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setResultPatient(domain.savePatientAndmergeRequest(form.getLocalContext().getResultPatient(), patientBeforeMerge, voMergeRequest, foundDUP ? form.getLocalContext().getSourcePatientFull() : null, form.getLocalContext().getSourcePatientIdentifierCollection()));
		} 
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	private boolean checkForDUPIdentifiers() 
	{
		if(form.getLocalContext().getResultPatient() == null || form.getLocalContext().getResultPatient().getIdentifiers() == null)
			return false;
		
		for(int j=0; j<form.getLocalContext().getResultPatient().getIdentifiers().size(); j++)
		{
			PatientId iden = form.getLocalContext().getResultPatient().getIdentifiers().get(j);
			
			if(iden == null)
				continue;
			
			if(!iden.getType().equals(PatIdType.NHSN))
				continue;
			
			if(iden.getIdValue() != null && !iden.getIdValue().equals(formatIdentifierValue(iden.getIdValue())))
				return true;
		}
		
		return false;
	}

	private boolean destinationWasModified() 
	{
		for(int i=0; i<form.dyngrdMerge().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMerge().getRows().get(i);
			DynamicGridCell boolCell = row.getCells().get(getColumn(COL_WAS_MODIFIED));
			
			if(boolCell != null && Boolean.TRUE.equals(boolCell.getValue()))
				return true;

			if(row.getRows().size() > 0)
			{
				for(int j =0; j<row.getRows().size(); j++)
				{
					boolCell = row.getRows().get(j).getCells().get(getColumn(COL_WAS_MODIFIED));
					
					if(boolCell != null && Boolean.TRUE.equals(boolCell.getValue()))
						return true;
				}
			}
		}
		
		return false;
	}

	private MergeRequestVo populateMergeRequest(boolean wasModified) 
	{
		MergeRequestVo voMergeRequest = new MergeRequestVo();
		Object mos = domain.getMosUser();
		if(mos != null)
			voMergeRequest.setRequestedBy((MemberOfStaffShortVo) mos);
		
		voMergeRequest.setSourcePatId(form.getLocalContext().getSourcePatient().getID_Patient());
		voMergeRequest.setDestinationPatId(form.getLocalContext().getResultPatient().getID_Patient());
		voMergeRequest.setStatus(Boolean.FALSE);
		voMergeRequest.setMergeIdentifiers(!wasModified);
		
		return voMergeRequest;
	}

	private MergedPatientVo createPatientBeforeMerge() 
	{
		if(form.getLocalContext().getDestinationPatient() == null)
			return null;
		
		MergedPatientVo patientBeforeMerge = new MergedPatientVo();
		patientBeforeMerge.setDestiantionPatient(form.getLocalContext().getDestinationPatient());
		patientBeforeMerge.setName(form.getLocalContext().getDestinationPatient().getName());
		patientBeforeMerge.setSex(form.getLocalContext().getDestinationPatient().getSex());
		patientBeforeMerge.setDob(form.getLocalContext().getDestinationPatient().getDob());
		patientBeforeMerge.setDod(form.getLocalContext().getDestinationPatient().getDod());
		patientBeforeMerge.setEthnicOrigin(form.getLocalContext().getDestinationPatient().getEthnicOrigin());
		patientBeforeMerge.setReligion(form.getLocalContext().getDestinationPatient().getReligion());
		patientBeforeMerge.setMaritalStatus(form.getLocalContext().getDestinationPatient().getMaritalStatus());
		patientBeforeMerge.setOccupation(form.getLocalContext().getDestinationPatient().getOccupation());
		patientBeforeMerge.setLanguage(form.getLocalContext().getDestinationPatient().getLanguage());
		patientBeforeMerge.setAddress(form.getLocalContext().getDestinationPatient().getAddress());
		patientBeforeMerge.setAddresses(form.getLocalContext().getDestinationPatient().getAddresses());
		patientBeforeMerge.setIdentifiers(form.getLocalContext().getDestinationPatient().getIdentifiers());
		patientBeforeMerge.setGp(form.getLocalContext().getDestinationPatient().getGp());
		patientBeforeMerge.setGpSurgery(form.getLocalContext().getDestinationPatient().getGpSurgery());
		patientBeforeMerge.setNok(form.getLocalContext().getDestinationPatient().getNok());
		patientBeforeMerge.setInsurance(form.getLocalContext().getDestinationPatient().getInsurance());
		patientBeforeMerge.setCommChannels(form.getLocalContext().getDestinationPatient().getCommChannels());
		
		return patientBeforeMerge;
	}

	@Override
	protected void onBtnApplyAllDestinationClick()	throws PresentationLogicException 
	{
		applyAll(getColumn(COL_DESTINATION_BUTTONS));
	}
	
	@Override
	protected void onBtnApplyAllSourceClick() throws PresentationLogicException 
	{
		applyAll(getColumn(COL_SOURCE_BUTTONS));
	}
	
	private void applyAll(DynamicGridColumn column) 
	{
		for(int i = 0; i<form.dyngrdMerge().getRows().size(); i++)
		{
			DynamicGridCell sourceButton = form.dyngrdMerge().getRows().get(i).getCells().get(column);
			
			if(sourceButton != null)
			{
				populateResultCell(sourceButton, true);
			}
		}
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState() 
	{
		
	}

	class CommChannelComparator implements Comparator<CommChannelVo>
	{
		private int order =1;
		public CommChannelComparator()
		{
			order = 1;
		}
		public CommChannelComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(CommChannelVo o1, CommChannelVo o2)
		{
			if (o1 != null && o1.getChannelType() != null && o2!=null && o2.getChannelType() != null)
			{
				int typeCompare = o1.getChannelType().compareTo(o2.getChannelType());
				
				if(typeCompare == 0 && o1.getCommValue() != null && o2.getCommValue() != null)
				{
					return o1.getCommValue().compareToIgnoreCase(o2.getCommValue());
				}
				
				return typeCompare;
			}
			
			if (o1 == null || o1.getChannelType() == null)
				return -1*order;
			
			if (o2 == null || o2.getChannelType() == null)
				return order;
			
			return 0;
		}	
	}
	
	class PatientIdComparator implements Comparator<PatientId>
	{
		private int order =1;
		public PatientIdComparator()
		{
			order = 1;
		}
		public PatientIdComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(PatientId o1, PatientId o2)
		{
			if (o1 != null && o1.getType() != null && o2!=null && o2.getType() != null)
			{
				int typeCompare = o1.getType().compareTo(o2.getType());
				
				if(typeCompare == 0 && o1.getIdValue() != null && o2.getIdValue() != null)
				{
					return o1.getIdValue().compareToIgnoreCase(o2.getIdValue());
				}
				
				return typeCompare;
			}
			
			if (o1 == null || o1.getType() == null)
				return -1*order;
			
			if (o2 == null || o2.getType() == null)
				return order;
			
			return 0;
		}	
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMessageBoxIdFromGPAndGPSurgery() != null && messageBoxId == form.getLocalContext().getMessageBoxIdFromGPAndGPSurgery())
		{
			if(DialogResult.YES.equals(result))
			{
				form.getLocalContext().getResultPatient().setGp(form.getLocalContext().getNewGP() != null ? new GpShortVo(form.getLocalContext().getNewGP().getID_Gp(), form.getLocalContext().getNewGP().getVersion_Gp()) : null);
				form.getLocalContext().getResultPatient().setGpSurgery(form.getLocalContext().getNewGPSurgery() != null ? new LocSiteShortVo(form.getLocalContext().getNewGPSurgery().getID_Location(), form.getLocalContext().getNewGPSurgery().getVersion_Location()) : null);
				
				for(int i=0; i<form.dyngrdMerge().getRows().size(); i++)
				{
					DynamicGridCell cell = null;
					
					if(PatientMergeFields.GP.equals(form.dyngrdMerge().getRows().get(i).getValue()) || PatientMergeFields.GP_SURGERY.equals(form.dyngrdMerge().getRows().get(i).getValue()))
					{
						cell = form.dyngrdMerge().getRows().get(i).getCells().get(getColumn(COL_RESULT_DATA));
						if(cell == null)
							cell = form.dyngrdMerge().getRows().get(i).getCells().newCell(getColumn(COL_RESULT_DATA), DynamicCellType.STRING);
						
						if(PatientMergeFields.GP.equals(form.dyngrdMerge().getRows().get(i).getValue()))
						{
							cell.setValue(form.getLocalContext().getNewGP() != null ? form.getLocalContext().getNewGP().getName().toString() : null);
						}
						else if(PatientMergeFields.GP_SURGERY.equals(form.dyngrdMerge().getRows().get(i).getValue()))
						{
							cell.setValue(form.getLocalContext().getNewGPSurgery() != null ? form.getLocalContext().getNewGPSurgery().getName() : null);
						}
						
						cell.setBackColor(form.getLocalContext().getCellColor());
					}
				}
			}
			
			form.getLocalContext().setMessageBoxIdFromGPAndGPSurgery(null);
		}
		else if(form.getLocalContext().getMessageBoxIdFromAddresCollection() != null && messageBoxId == form.getLocalContext().getMessageBoxIdFromAddresCollection())
		{
			if(DialogResult.YES.equals(result))
			{
				form.getLocalContext().getResultPatient().setAddresses(form.getLocalContext().getAddressCollection());
			}
		}
	}
}
