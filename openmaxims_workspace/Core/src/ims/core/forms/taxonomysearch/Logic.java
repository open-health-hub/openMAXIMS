//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.25 build 1963.23442)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.taxonomysearch;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.TaxonomyMapCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.TaxonomyTypeCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException
	{
		loadCmbExternalCode();
		
		form.cmbExternalCode().setEnabled(true);
		form.lblExternalCodeType().setEnabled(true);

		if (engine.getPreviousNonDialogFormName().equals(form.getForms().Clinical.PastMedicalHistory) && ConfigFlag.UI.DISABLE_EXTERNAL_CODE_TYPE.getValue())
		{
			form.cmbExternalCode().setEnabled(false);
			form.lblExternalCodeType().setEnabled(false);
		}

		form.txtSearchCriteria().setFocus();
		form.btnSelect().setEnabled(false);
		TaxonomyMap voTaxonomy = form.getGlobalContext().Core.getTaxonomyMap();
		if (voTaxonomy != null && voTaxonomy.getTaxonomyNameIsNotNull())
		{
			form.cmbExternalCode().setValue(voTaxonomy.getTaxonomyName());
		}
		else
		{
			if (form.cmbExternalCode().getValues().size() > 0)
				form.cmbExternalCode().setValue((TaxonomyType) form.cmbExternalCode().getValues().get(0));
		}
		if (form.getGlobalContext().Core.getTaxonomySearchForNameIsNotNull())
		{
			form.txtSearchCriteria().setValue(form.getGlobalContext().Core.getTaxonomySearchForName());
		}
	}

	private void loadCmbExternalCode()
	{
		form.cmbExternalCode().clear();
		TaxonomyTypeCollection coll = LookupHelper.getTaxonomyType(domain.getLookupService());
		for (int i = 0; i < coll.size(); i++)
		{
			TaxonomyType inst = coll.get(i);
			if ((inst.equals(TaxonomyType.READ3) ||
				inst.equals(TaxonomyType.SNOMED) ||
				inst.equals(TaxonomyType.ICD10) ||
				inst.equals(TaxonomyType.NAT_SPEC_CODE) ||
				inst.equals(TaxonomyType.NAT_TREAT_CODE) ||
				inst.equals(TaxonomyType.OPCS4) ||
				inst.equals(TaxonomyType.VTM) ||
				inst.equals(TaxonomyType.VMP) ||
				inst.equals(TaxonomyType.AMP))				
				&& inst.isActive())
			{
				form.cmbExternalCode().newRow(inst, inst.getText());
			}
		}
		
	}

	protected void onBtnSelectClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onGrdResultsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setTaxonomyMap(form.grdResults().getValue());
		form.btnSelect().setEnabled(true);
	}

	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdResults().getRows().clear();
		form.lblCount().setValue("Total: 0");
		if (mandatoryCheck() == false)
			return;

		TaxonomyMap filter = form.getGlobalContext().Core.getTaxonomyMapIsNotNull() ? form.getGlobalContext().Core.getTaxonomyMap() : new TaxonomyMap();
		filter.setTaxonomyName(form.cmbExternalCode().getValue());
		filter.setDescription(form.txtSearchCriteria().getValue());

		TaxonomyMapCollection rcColl = null;
		try
		{
			rcColl = domain.searchCodes(filter);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		if (rcColl != null && rcColl.size() == 0)
		{
			engine.showMessage("No " + form.cmbExternalCode().getValue().getText() + " codes found.");
			return;
		}
		
		int maxRecords = ConfigFlag.DOM.TAXONOMY_SEARCH_MAX_SIZE.getValue();
		if (rcColl != null && rcColl.size() >= maxRecords && 
				( TaxonomyType.READ3.equals(form.cmbExternalCode().getValue()) || 
				  TaxonomyType.SNOMED.equals(form.cmbExternalCode().getValue()) || 
				  TaxonomyType.NAT_SPEC_CODE.equals(form.cmbExternalCode().getValue()) || 
				  TaxonomyType.NAT_TREAT_CODE.equals(form.cmbExternalCode().getValue())))
		{
			engine.showMessage("Search returned more than the configured max size of " + maxRecords + ". Please refine the search criteria.");
		}

		listCodes(rcColl);
		
		form.btnSelect().setEnabled(false); //wdev-9107
	}

	private void listCodes(TaxonomyMapCollection rcColl)
	{
		if (rcColl == null)
			return;

		GenForm.grdResultsRow row;
		rcColl.sort();
		for (int i = 0; i < rcColl.size(); i++)
		{
			TaxonomyMap ps = rcColl.get(i);
			row = form.grdResults().getRows().newRow();
			row.setcolName(ps.getDescription());
			row.setTooltipForcolName(ps.getDescription());
			row.setcolExtCode(ps.getTaxonomyCode());
			row.setValue(ps);
		}
		form.lblCount().setValue("Total: " + rcColl.size());
	}

	private boolean mandatoryCheck()
	{
		if (form.cmbExternalCode().getValue() == null)
		{
			engine.showMessage("Please select an External Code Type");
			form.cmbExternalCode().setFocus();
			return false;
		}
		if (form.txtSearchCriteria().getValue() == null || form.txtSearchCriteria().getValue().length() < ConfigFlag.DOM.TAXONOMY_SEARCH_CRITERIA_SIZE.getValue())
		{
			engine.showMessage("Please specify a search name of at least 4 characters");
			form.txtSearchCriteria().setFocus();
			return false;
		}

		return true;
	}
}
