//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.62 build 2980.18138)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.reporttemplate;

import ims.admin.vo.ReportListVo;
import ims.admin.vo.ReportListVoCollection;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportsCategoryListVo;
import ims.admin.vo.ReportsCategoryListVoCollection;
import ims.admin.vo.ReportsCategoryLiteVo;
import ims.admin.vo.ReportsCategoryLiteVoCollection;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final String	COLUMN_NAME			= "0";
	//private static final String	COLUMN_DESCRIPTION	= "1";

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		createDynamicGridColumns();
		//populateReportsGrid();
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Object value = form.dyngrdReports().getValue();
		
		if(value == null || !(value instanceof ReportTemplateLiteVo))
		{
			engine.showMessage("Please select a template !");
			return;
		}
		
		form.getGlobalContext().Core.setReportTemplateRef((ReportTemplateLiteVo)value);
		form.getGlobalContext().Core.setTemplate(((ReportTemplateLiteVo)value).getName());
		engine.close(DialogResult.OK);
	}
	
	private void populateReportsGrid()
	{
		ReportListVoCollection reportColl = domain.listReports();
		ReportsCategoryListVoCollection voReportsCategoryColl = domain.listCategories();

		populateCategoriesGrid(voReportsCategoryColl);
		populateReports(reportColl);
	}

	private void populateCategoriesGrid(ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		if (voReportsCategoryColl == null)
			return;

		addParentCategories(voReportsCategoryColl);
	}

	private void addParentCategories(ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		for (int i = 0; i < voReportsCategoryColl.size(); i++)
		{
			// Display the parent category - (when parent = null)
			if (voReportsCategoryColl.get(i).getParentCategory() == null)
				addCategory(null, voReportsCategoryColl.get(i));
		}
	}

	private void addCategory(DynamicGridRow rowParent, ReportsCategoryListVo voCategory)
	{
		if (voCategory == null)
			return;

		DynamicGridRow categoryRow = null;
		if (rowParent == null)
			categoryRow = form.dyngrdReports().getRows().newRow();
		else
			categoryRow = rowParent.getRows().newRow();

		categoryRow.setValue(voCategory);
		categoryRow.setSelectable(false);
		categoryRow.setCollapsedImage(form.getImages().Core.ReportCategory);
		categoryRow.setExpandedImage(form.getImages().Core.ReportCategory);

		DynamicGridCell cellName = createCell(categoryRow, getColumn(COLUMN_NAME));
		cellName.setValue(voCategory.getName());

		if (voCategory.getSubCategoriesIsNotNull() && voCategory.getSubCategories().size() > 0)
		{
			categoryRow.setExpanded(true);
			addSubcategories(categoryRow, voCategory.getSubCategories());
		}
	}

	private void addSubcategories(DynamicGridRow rowParent, ReportsCategoryListVoCollection voReportsCategoryColl)
	{
		for (int i = 0; i < voReportsCategoryColl.size(); i++)
		{
			addCategory(rowParent, voReportsCategoryColl.get(i));
		}
	}

	private void populateReports(ReportListVoCollection reportColl)
	{
		if (reportColl == null)
			return;

		for (int i = 0; i < reportColl.size(); i++)
		{
			ReportListVo voReportList = reportColl.get(i);
			DynamicGridRow row = getReportRow(form.dyngrdReports().getRows(), voReportList);
			addReport(row, voReportList);
		}
	}
	
	private void createDynamicGridColumns()
	{
		DynamicGridColumn columnName = form.dyngrdReports().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(-1);

		//DynamicGridColumn columnDescription = form.dyngrdReports().getColumns().newColumn("Description", COLUMN_DESCRIPTION);
		//columnDescription.setWidth(-1);
	}
	
	private DynamicGridColumn getColumn(String identifier)
	{
		return form.dyngrdReports().getColumns().getByIdentifier(identifier);
	}
	
	private DynamicGridRow getReportRow(DynamicGridRowCollection parentRows, ReportListVo voReportList)
	{
		if (parentRows == null)
			return null;

		for (int i = 0; i < parentRows.size(); i++)
		{
			DynamicGridRow dynamicGridRow = parentRows.get(i);
			Object value = dynamicGridRow.getValue();
			if (value instanceof ReportsCategoryListVo)
			{
				ReportsCategoryListVo voReportsCategory = (ReportsCategoryListVo) value;
				if (voReportsCategory.getReports().indexOf(voReportList) >= 0)
				{
					return dynamicGridRow;
				}
			}

			if (dynamicGridRow.getRows() != null && dynamicGridRow.getRows().size() > 0)
			{
				DynamicGridRow row = getReportRow(dynamicGridRow.getRows(), voReportList);
				if (row != null)
					return row;
			}
		}

		return null;
	}
	
	private void addReport(DynamicGridRow rowParent, ReportListVo voReportList)
	{
		DynamicGridRow reportRow = null;
		
		if(voReportList.getTemplatesIsNotNull() && voReportList.getTemplates().size() == 0)
			return;
		
		if (rowParent == null)
			reportRow = form.dyngrdReports().getRows().newRow();
		else
			reportRow = rowParent.getRows().newRow();

		reportRow.setValue(voReportList);
		reportRow.setSelectable(false);
		reportRow.setCollapsedImage(form.getImages().Core.ReportDesigner);
		reportRow.setExpandedImage(form.getImages().Core.ReportDesigner);

		DynamicGridCell cellName = createCell(reportRow, getColumn(COLUMN_NAME));
		cellName.setValue(voReportList.getReportName());

		if(voReportList.getImsIdIsNotNull() && voReportList.getImsId().intValue() > 0)
		{
			reportRow.setTextColor(Color.Blue);
		}
		
		//DynamicGridCell cellDescription = createCell(reportRow, getColumn(COLUMN_DESCRIPTION));
		//cellDescription.setValue(voReportList.getReportDescription());

		addTemplates(voReportList, reportRow);
	}

	private void addTemplates(ReportListVo voReportList, DynamicGridRow reportRow)
	{
		for (int i = 0; voReportList.getTemplatesIsNotNull() && i < voReportList.getTemplates().size(); i++)
		{
			ReportTemplateLiteVo reportTemplateLiteVo = voReportList.getTemplates().get(i);

			if(reportTemplateLiteVo != null && Boolean.TRUE.equals(reportTemplateLiteVo.getIsActive()))
			{
				DynamicGridRow templateRow = reportRow.getRows().newRow();
				templateRow.setValue(reportTemplateLiteVo);
				templateRow.setCollapsedImage(form.getImages().Core.TemplateReport);
				templateRow.setExpandedImage(form.getImages().Core.TemplateReport);
	
				DynamicGridCell cellTemplateName = createCell(templateRow, getColumn(COLUMN_NAME));
				cellTemplateName.setValue(reportTemplateLiteVo.getName());
	
				//DynamicGridCell cellTemplateDescription = createCell(templateRow, getColumn(COLUMN_DESCRIPTION));
				//cellTemplateDescription.setValue(reportTemplateLiteVo.getDescription());
				
				if(voReportList.getImsIdIsNotNull() && voReportList.getImsId().intValue() > 0)
				{
					templateRow.setTextColor(Color.Blue);
				}
			}
		}
	}
	
	private DynamicGridCell createCell(DynamicGridRow row, DynamicGridColumn column)
	{
		DynamicGridCell cell = row.getCells().get(column);
		if (cell == null)
		{
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
			cell.setReadOnly(true);
		}

		return cell;
	}
	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.ctnFindReport().txtReport().setValue(null);
		form.ctnFindReport().txtTemplate().setValue(null);
		form.ctnFindReport().qmbCategory().setValue(null);
		form.ctnFindReport().qmbCategory().clear();
		
		form.dyngrdReports().getRows().clear();
	}
	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		searchReport();
		
	}
	@Override
	protected void onQmbCategoryTextSubmited(String value) throws PresentationLogicException
	{
		String cat = value;
		
		form.ctnFindReport().qmbCategory().clear();

		if(!cat.startsWith("%"))
			cat = "%" + cat;
		if(!cat.endsWith("%"))
			cat = cat + "%";
		
		ReportsCategoryLiteVoCollection coll = domain.searchCategoryByName(cat);
		
		if(coll != null && coll.size() > 0)
		{
			for(ReportsCategoryLiteVo item : coll)
			{
				form.ctnFindReport().qmbCategory().newRow(item, item.getName());
			}
			
			if(coll.size() == 1)
				form.ctnFindReport().qmbCategory().setValue(coll.get(0));
			else
				form.ctnFindReport().qmbCategory().showOpened();
		}		
	}
	
	private void searchReport()
	{
		form.dyngrdReports().getRows().clear();

		String reportName = form.ctnFindReport().txtReport().getValue();
		String templateName = form.ctnFindReport().txtTemplate().getValue();
		ReportsCategoryLiteVo cat = form.ctnFindReport().qmbCategory().getValue();
		
		if (reportName == null || reportName.length() == 0)
		{
			reportName = "%";
		}
		else
		{
			if(!reportName.startsWith("%"))
				reportName = "%" + reportName;
			if(!reportName.endsWith("%"))
				reportName = reportName + "%";
		}

		if (templateName == null || templateName.length() == 0)
		{
			templateName = "%";
		}
		else
		{
			if(!templateName.startsWith("%"))
				templateName = "%" + templateName;
			if(!templateName.endsWith("%"))
				templateName = templateName + "%";
		}

		ReportListVoCollection reportColl = domain.searchReports(reportName, templateName, cat);
		
		//WDEV-12505
		if(reportColl == null || reportColl.size() == 0)
		{
			engine.showMessage("No results matching your search criteria were found!");
			return;
		}
		
		ReportsCategoryListVoCollection voReportsCategoryColl = domain.searchCategories(reportName, templateName, cat);

		populateCategoriesGrid(voReportsCategoryColl);
		populateReports(reportColl);
		
		if(form.dyngrdReports().getRows().size() == 1)
			form.dyngrdReports().getRows().get(0).setExpanded(true, true);
	}	
}
