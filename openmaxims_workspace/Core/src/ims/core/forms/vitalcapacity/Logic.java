//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.22 build 41214.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.vitalcapacity;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.VSLungFunctionTestVo;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;




public class Logic extends BaseLogic
{
	protected void onBSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		VitalSignsVo voVitalSign = null;
		
		if (form.getLocalContext().getselectedVitalCapacity() == null)//insert
		{
			voVitalSign = new VitalSignsVo();
			voVitalSign.setAuthoringInformation(form.ctnDetails().customControlAuthoringInfo().getValue());
		}
		else//update
			voVitalSign = form.getLocalContext().getselectedVitalCapacity();
		
		if(form.ctnDetails().dteTaken().getValue() != null)
		{
			//WDEV-15978
			//if(form.ctnDetails().dteTaken().getValue().isGreaterThan(new Date()))
			if (new DateTime(form.ctnDetails().dteTaken().getValue(), form.ctnDetails().timTaken().getValue()).isGreaterThan(new DateTime()))
			{
				engine.showMessage("'Date/Time Taken' can not be in the future");
				return;
			}
		}
		
		
		voVitalSign.setVitalsTakenDateTime(new DateTime(form.ctnDetails().dteTaken().getValue(), form.ctnDetails().timTaken().getValue()));
		
		VSLungFunctionTestVo voLungFunction = new VSLungFunctionTestVo();
		
		voLungFunction.setTidalVolume(form.ctnDetails().intTidalVolume().getValue());
		voLungFunction.setVitalCapacity(form.ctnDetails().decVitalCapacity().getValue());
						
		voVitalSign.setLungFunctionTest(voLungFunction);
		
		voVitalSign.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		voVitalSign.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		String[] arrErrors = voVitalSign.validate(getUIErrors()); //WDEV-15978
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		if (!voVitalSign.getAuthoringInformationIsNotNull())
		{
			String[] errors=new String[1];
			errors[0]="AuthoringInformation is mandatory";
			engine.showErrors(errors);
			return;
		}
		try 
		{
			domain.saveVitalSign(voVitalSign);
		} 
		catch (StaleObjectException e1) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		open();
	}
	
	//WDEV-15978
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.ctnDetails().dteTaken().getValue()==null || form.ctnDetails().timTaken().getValue()==null)
		{
			errors.add("'Date/Time Taken'is mandatory!");
		}
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	protected void onBNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		form.ctnDetails().setCollapsed(false);
		form.getLocalContext().setselectedVitalCapacity(null);
		
		form.setMode(FormMode.EDIT);
		form.ctnDetails().customControlAuthoringInfo().initializeComponent();
		form.ctnDetails().setcustomControlAuthoringInfoEnabled(true);
		form.ctnDetails().customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
		form.ctnDetails().dteTaken().setValue(new Date());
		form.ctnDetails().timTaken().setValue(new Time());
	}
		
	protected void onFormOpen() throws FormOpenException 
	{
		open();
		
	}
	
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		form.ctnDetails().setCollapsed(true);
		form.btnUpdate().setEnabled(false);
		clearScreen();
		
		//WDEV-15977
		form.getLocalContext().setselectedVitalCapacity(null);
		
		form.grdVital().getRows().clear();
		
		VitalSignsVoCollection voCollVitalCapacity = new VitalSignsVoCollection();
	
		voCollVitalCapacity = domain.listVitalCapacity(form.getGlobalContext().Core.getCurrentCareContext());
	
		if (voCollVitalCapacity == null)
			return;
	
		populateVitalCapacityGrid(voCollVitalCapacity);	
	}
	
	/**
	 * @param voCollVitalCapacity
	 */
	private void populateVitalCapacityGrid(VitalSignsVoCollection voCollVitalCapacity) 
	{
		if (voCollVitalCapacity != null)
		{
			GenForm.grdVitalRow row = null;
				
			//inactive record handling
			for(int i=0;i<voCollVitalCapacity.size();i++)
			{
				VitalSignsVo vitalSign  = voCollVitalCapacity.get(i);
				
				if (vitalSign != null && vitalSign.getLungFunctionTest()!= null)
				{
					row = form.grdVital().getRows().newRow();
					row.setValue(vitalSign);
					if (vitalSign.getLungFunctionTest().getTidalVolume() != null)
						row.setColTidalVolume(vitalSign.getLungFunctionTest().getTidalVolume());
					if (vitalSign.getLungFunctionTest().getVitalCapacity() != null)
						row.setColVitalCapacity(vitalSign.getLungFunctionTest().getVitalCapacity());
					if (vitalSign.getAuthoringInformationIsNotNull())	
						if (vitalSign.getAuthoringInformation().getAuthoringHcpIsNotNull())
							row.setColHCP(vitalSign.getAuthoringInformation().getAuthoringHcp().toString());
					
					if (vitalSign.getVitalsTakenDateTime() != null)
						row.setColDate(vitalSign.getVitalsTakenDateTime().toString());		
					
				}
			}
		}
		
	}
	/**
	 * 
	 */
	private void clearScreen() 
	{
		form.ctnDetails().dteTaken().setValue(null);
		form.ctnDetails().intTidalVolume().setValue(null);
		form.ctnDetails().decVitalCapacity().setValue(null);
		form.ctnDetails().timTaken().setValue(null);
		form.ctnDetails().customControlAuthoringInfo().setValue(null);
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		if (form.grdVital().getValue() != null)
		{
			VitalSignsVo voVitalSign = null;
			voVitalSign = domain.getVitalCapacity(form.grdVital().getValue());
			if (voVitalSign != null)
			{
				form.setMode(FormMode.EDIT);
				form.ctnDetails().setCollapsed(false);
				populateVitalCapacityDetails(voVitalSign);
				form.ctnDetails().customControlAuthoringInfo().setIsRequiredPropertyToControls(true);
			}
			
		}
		
	}
	
	protected void onGrdVitalSelectionChanged() throws PresentationLogicException 
	{
		if (form.grdVital().getValue() != null)
		{
			populateVitalCapacityDetails(form.grdVital().getValue());
			form.ctnDetails().setCollapsed(false);
			form.btnUpdate().setEnabled(true);
		}
	}
	
	private void populateVitalCapacityDetails(VitalSignsVo voVitalSigns) 
	{
		if (voVitalSigns != null)
		{
			form.getLocalContext().setselectedVitalCapacity(voVitalSigns);
			
			if (voVitalSigns.getAuthoringInformationIsNotNull())
				form.ctnDetails().customControlAuthoringInfo().setValue(voVitalSigns.getAuthoringInformation());
			
			if (voVitalSigns.getVitalsTakenDateTime() != null)
			{
				form.ctnDetails().dteTaken().setValue(voVitalSigns.getVitalsTakenDateTime().getDate());
				form.ctnDetails().timTaken().setValue(voVitalSigns.getVitalsTakenDateTime().getTime());
			}
								
			if (voVitalSigns.getLungFunctionTest()!= null)
			{
				form.ctnDetails().intTidalVolume().setValue(voVitalSigns.getLungFunctionTest().getTidalVolume());
				form.ctnDetails().decVitalCapacity().setValue(voVitalSigns.getLungFunctionTest().getVitalCapacity());
			}
		}
	}
}
