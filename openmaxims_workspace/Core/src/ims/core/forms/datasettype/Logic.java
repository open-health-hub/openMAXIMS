//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2418.19363)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.datasettype;

import ims.core.forms.datasettype.GenForm.grdListRow;
import ims.core.vo.DataSetTypeVo;
import ims.core.vo.DataSetTypeVoCollection;
import ims.core.vo.lookups.DataSetCategory;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateContextMenuStatus();
	}
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtName().setValue(null);
		form.cmbCategory().setValue(null);
		form.grdList().getRows().clear();
		
		updateContextMenuStatus();
	}
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		/*
		if(form.txtName().getValue() == null || form.txtName().getValue().trim().length() == 0)
		{
			engine.showMessage("Please enter a name to search for !");
			return;
		}
		if(form.cmbCategory().getValue() == null)
		{
			engine.showMessage("Please enter a category to search for !");
			return;
		}
		*/
		
		form.getGlobalContext().Core.setDataSetRecord(null);
		doSearch();
		if(	form.grdList().getRows().size() < 1) //wdev-15679
		{
			engine.showMessage("No results found");
		}
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.DataSetTypeMenu.ADD_DATASET:
				addDataSet();
				break;
			case GenForm.ContextMenus.DataSetTypeMenu.EDIT_DATASET:
				editDataSet();
				break;
			default :
				break;
		}
	}
	private void editDataSet()
	{
		form.getGlobalContext().Core.setDataSetRecord(form.grdList().getValue());
		engine.open(form.getForms().Core.DataSetTypeAddEdit, "Edit DataSet");
	}
	private void addDataSet()
	{
		form.getGlobalContext().Core.setDataSetRecord(null);
		engine.open(form.getForms().Core.DataSetTypeAddEdit, "Add DataSet");
	}
	protected void onFormOpen() throws PresentationLogicException
	{
		if(form.cmbCategory().getValues() != null && form.cmbCategory().getValues().size() == 1)
			form.cmbCategory().setValue((DataSetCategory) form.cmbCategory().getValues().get(0));
		
		updateContextMenuStatus();
	}
	private void updateContextMenuStatus()
	{
		form.getContextMenus().hideAllDataSetTypeMenuMenuItems();
		
		form.getContextMenus().getDataSetTypeMenuADD_DATASETItem().setVisible(true);
		
		if(form.grdList().getValue() != null)
		{
			form.getContextMenus().getDataSetTypeMenuEDIT_DATASETItem().setVisible(true);			
		}
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.DataSetTypeAddEdit) && result.equals(DialogResult.OK))
		{
			doSearch();
			updateContextMenuStatus();
		}
	}
	private void doSearch()
	{
		String name = form.txtName().getValue();
		if(name == null || name.trim().length() == 0)
		{
			name = "%";
		}
		/*
		if(form.cmbCategory().getValue() == null)
		{
			return;
		}
		*/
		DataSetTypeVoCollection coll = domain.listDataSetType("%" + name + "%", form.cmbCategory().getValue(), null);
		
		displayDataSetType(coll);
		
		if(coll.size() > 0 && form.getGlobalContext().Core.getDataSetRecordIsNotNull())
			form.grdList().setValue(form.getGlobalContext().Core.getDataSetRecord());
	}
	private void displayDataSetType(DataSetTypeVoCollection coll)
	{
		String str;
		
		form.grdList().getRows().clear();
		
		for (int i = 0; i < coll.size(); i++)
		{
			DataSetTypeVo item = coll.get(i);
			
			grdListRow row = form.grdList().getRows().newRow();
			
			row.setColName(item.getName());
			row.setColCategory(item.getCategoryIsNotNull() ? item.getCategory().getText() : null);
			
			str = "";
			if(item.getMinFactorIsNotNull())
			{
				str += item.getMinFactor();
				str += " - ";
			}
			if(item.getMaxFactorIsNotNull())
			{
				str += item.getMaxFactor();
			}
			row.setColMaxFactor(str);
			
			str = "";
			if(item.getNormalBandMaxValueMaleIsNotNull() 
					&& item.getNormalBandMaxValueFemaleIsNotNull() 
					&& item.getNormalBandMinValueMaleIsNotNull() 
					&& item.getNormalBandMinValueFemaleIsNotNull()
					&& item.getNormalBandMaxValueMale().equals(item.getNormalBandMaxValueFemale())
					&& item.getNormalBandMinValueMale().equals(item.getNormalBandMinValueFemale()))
			{
				str += item.getNormalBandMinValueMale();
				str += "-";
				str += item.getNormalBandMaxValueMale();
			}
			else
			{
				if(item.getNormalBandMinValueMaleIsNotNull())
				{
					str += item.getNormalBandMinValueMale();
				}
				str += "-";
				if(item.getNormalBandMaxValueMaleIsNotNull())
				{
					str += item.getNormalBandMaxValueMale();
				}
				str += " (Male) / ";
	
				if(item.getNormalBandMinValueFemaleIsNotNull())
				{
					str += item.getNormalBandMinValueFemale();
				}
				str += "-";
				if(item.getNormalBandMaxValueFemaleIsNotNull())
				{
					str += item.getNormalBandMaxValueFemale();
				}
				str += " (Female)";
			}
			row.setColBand(str);
			
			row.setColLineType(item.getDefaultLineTypeIsNotNull() ? item.getDefaultLineType().getText() : null);
			row.setColColourIcon(item.getDefLineColPtIcon());
			
			row.setValue(item);
			
			if(item.getIsActive() == null || item.getIsActive().booleanValue() == false)
				row.setTextColor(Color.DarkGray);
		}

		
	}
}
