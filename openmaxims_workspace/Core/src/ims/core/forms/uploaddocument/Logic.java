//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.65 build 3160.29066)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.forms.uploaddocument;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.enums.DocumentViewLevel;
import ims.core.vo.enums.UploadDocumentAction;
import ims.core.vo.enums.UploadDocumentStoreLevel;
import ims.core.vo.lookups.DocumentCategory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Iterator;
import java.util.TreeMap;

public class Logic extends BaseLogic
{
	private static final long 		serialVersionUID 	= 1L;
	public static final  Integer	COLNAME				= new Integer(-1);
	public static final  Integer	COLCATEGORY			= new Integer(-2);
	public static final  Integer	COLTYPE				= new Integer(-3);
	public static final  Integer	COLUSER				= new Integer(-4);
	public static final  Integer	COLDATETIME			= new Integer(-5);
	private 			 boolean 	isGPLetterSelected 	= false;
	private 			 boolean 	isGPLetterCategory 	= false;

	protected void onBtnScanClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setUploadDocumentAction(UploadDocumentAction.SCAN);
		openDialog();	
	}
	
	private void openDialog()
	{
		engine.open(form.getForms().Core.UploadDocumentDialog, new Object[]{form.getLocalContext().getUploadDocumentStoreLevel()});
	}
	
	public void initialize(DocumentCategory category, UploadDocumentStoreLevel documentStoreLevel,DocumentViewLevel documentViewLevel) 
	{
		form.getLocalContext().setDocumentCategory(category);
		form.getLocalContext().setUploadDocumentStoreLevel(documentStoreLevel);
		form.getLocalContext().setDocumentViewLevel(documentViewLevel);
				
		open();
		updateControlsStates();
	}
	private void updateControlsStates()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			boolean isCorrectLevel = areWeAtMinimumLevelToScanImport();
			form.btnImport().setVisible(isCorrectLevel);
			form.btnImport().setEnabled(isCorrectLevel);
			form.btnScan().setVisible(isCorrectLevel);
			form.btnScan().setVisible(isCorrectLevel);
		}
	}
	private boolean areWeAtMinimumLevelToScanImport()
	{
		if (!form.getLocalContext().getUploadDocumentStoreLevelIsNotNull())
			return false;
		if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.CARECONTEXT) && form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
			return true;
		if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.EPISODEOFCARE) && form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
			return true;
		if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.PATIENT) && form.getGlobalContext().Core.getPatientShortIsNotNull())
			return true;
		if (form.getLocalContext().getUploadDocumentStoreLevel().equals(UploadDocumentStoreLevel.REFERRAL) && form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
			return true;
		return false;
	}
	private void open()
	{
		if (!form.getLocalContext().getDocumentViewLevelIsNotNull())
			return;
		
		if (form.getLocalContext().getDocumentViewLevel().equals(DocumentViewLevel.CARECONTEXT)) 
		{				
			if (form.getGlobalContext().Core.getCurrentCareContext() == null) {
				throw new DomainRuntimeException("CareContext is mandatory!");
			}					
			listDocumentsAtCareContextLevel(form.getLocalContext().getDocumentCategory(), form.getLocalContext().getDocumentViewLevel());
		}
		else if (form.getLocalContext().getDocumentViewLevel().equals(DocumentViewLevel.REFERRAL)) 
		{	
			if (form.getGlobalContext().RefMan.getCatsReferral() == null) {
				throw new DomainRuntimeException("CatsReferral is mandatory!");
			}
			listDocumentsAtReferralLevel(form.getLocalContext().getDocumentCategory(), form.getLocalContext().getDocumentViewLevel());	
		}
		else if (form.getLocalContext().getDocumentViewLevel().equals(DocumentViewLevel.PATIENT)) 
		{				
			if (form.getGlobalContext().Core.getPatientShort() == null) {
				throw new DomainRuntimeException("Patient is mandatory!");
			}					
			listDocumentsAtPatientLevel(form.getLocalContext().getDocumentCategory(), form.getLocalContext().getDocumentViewLevel());
		}
		
	}

	private void listDocumentsAtPatientLevel(DocumentCategory category,DocumentViewLevel viewLevel) 
	{		
		if (form.getGlobalContext().Core.getPatientShortIsNotNull()) 
		{
			form.getLocalContext().setDocumentCategory(category);	
						
			initializeDynamicGrid();		
			populateGrid(viewLevel);
		}
		else 
		{
			throw new RuntimeException("No Patient selected");
		}
	}

	private void listDocumentsAtReferralLevel(DocumentCategory category, DocumentViewLevel viewLevel) 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull()) 
		{
			CatsReferralRefVo 	referral 			= form.getGlobalContext().RefMan.getCatsReferral();			
								isGPLetterSelected 	= false;
								isGPLetterCategory 	= false;							
			
			form.getLocalContext().setDocumentCategory(category);
			form.getLocalContext().setCatsReferralRef(referral);
			
			initializeDynamicGrid();		
			populateGrid(viewLevel);			
		}
		else 
		{
			throw new RuntimeException();
		}
	}

	private void listDocumentsAtCareContextLevel(DocumentCategory category, DocumentViewLevel viewLevel) 
	{
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() &&
				form.getGlobalContext().Core.getCurrentCareContextIsNotNull()) 
		{
			form.getLocalContext().setDocumentCategory(category);	
						
			initializeDynamicGrid();		
			populateGrid(viewLevel);
		}
		else 
		{
			throw new RuntimeException("No Patient selected");
		}
	}
	
	
	
	public void setButtonsVisible(Boolean isScanVisible, Boolean isImportVisible) 
	{
		form.btnScan().setVisible(isScanVisible);
		form.btnImport().setVisible(isImportVisible);		
	}
	
	private void initializeDynamicGrid()
	{
		form.dyngrd().clear();
		form.dyngrd().setSelectable(true);		
		
		DynamicGridColumn colName = form.dyngrd().getColumns().newColumn("Type/Document Name", COLNAME);
		colName.setWidth(240);//WDEV-12997

		DynamicGridColumn colCategory = form.dyngrd().getColumns().newColumn("Category", COLCATEGORY);
		colCategory.setWidth(180);	

		DynamicGridColumn colType = form.dyngrd().getColumns().newColumn("Type", COLTYPE);
		colType.setWidth(80);	
		
		DynamicGridColumn colUser = form.dyngrd().getColumns().newColumn("User", COLUSER);
		colUser.setWidth(100);	
	
		DynamicGridColumn colDateTime = form.dyngrd().getColumns().newColumn("Date/Time", COLDATETIME);
		colDateTime.setWidth(-1);	
	}
		
	private void countForRecords(PatientDocumentVoCollection list, TreeMap<String, Integer> map) 
	{
		for(int i = 0; i < list.size(); i++)
		{			
			String 	type 	= list.get(i).getCategory().getIItemText();
			Integer count 	= (Integer) map.get(type);
	
			if(count == null)
			{	
				count = new Integer(1);
				map.put(type, count);
			}
			else
			{
				map.put(type, new Integer(count.intValue() + 1));
			}
		}
	}

	private DynamicGridRow addParentRow(TreeMap<String, Integer> map, String element) 
	{	
		DynamicGridRow 	dynRow 				= form.dyngrd().getRows().newRow();
		DynamicGridCell parentCellVirtual 	= dynRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.HTMLVIEW);
		
		parentCellVirtual.setValue("<b>"+element +"</b>" + " (" + "<font color='green'>" + map.get(element) + "</font>)");
		dynRow.setSelectable(false);
		
		return dynRow;
	}
	
	private DynamicGridColumn getColumn(Integer colName)
	{
		return form.dyngrd().getColumns().getByIdentifier(colName);
	}
	
	private void addRowRecord(PatientDocumentVoCollection list, DynamicGridRow dynVirtualRow, int index) 
	{
		if(list == null)
			return;
		
		DynamicGridRow dynParentRow = dynVirtualRow.getRows().newRow();
		dynParentRow.setIdentifier(list.get(index));

		PatientDocumentVo	patientDocument 	 = list.get(index) != null ?  list.get(index) : null;							
		DynamicGridCell 	nameChildCellVirtual = dynParentRow.getCells().newCell(getColumn(COLNAME), DynamicCellType.STRING);
		
		nameChildCellVirtual.setValue(patientDocument.getName());
		nameChildCellVirtual.setTooltip(patientDocument.getName());
		nameChildCellVirtual.setReadOnly(true);//WDEV-15010
		
		DynamicGridCell categoryChildCellVirtual = dynParentRow.getCells().newCell(getColumn(COLCATEGORY), DynamicCellType.STRING);
		categoryChildCellVirtual.setValue(patientDocument.getCategoryIsNotNull() ? patientDocument.getCategory().getIItemText() : null);
		categoryChildCellVirtual.setTooltip(patientDocument.getCategoryIsNotNull() ? patientDocument.getCategory().getIItemText() : null);
		categoryChildCellVirtual.setReadOnly(true);//WDEV-15010

		if (patientDocument.getCategory().equals(DocumentCategory.GPLETTER) && !isGPLetterSelected)
		{			
			isGPLetterCategory = true;			
		}
		
		DynamicGridCell typeChildCellVirtual = dynParentRow.getCells().newCell(getColumn(COLTYPE), DynamicCellType.STRING);
		typeChildCellVirtual.setValue(patientDocument.getCreationTypeIsNotNull() ? patientDocument.getCreationType().getIItemText() : null);
		typeChildCellVirtual.setTooltip(patientDocument.getCreationTypeIsNotNull() ? patientDocument.getCreationType().getIItemText() : null);
		typeChildCellVirtual.setReadOnly(true);//WDEV-15010
										
		
		DynamicGridCell userChildCellVirtual = dynParentRow.getCells().newCell(getColumn(COLUSER), DynamicCellType.STRING);
		if (patientDocument.getRecordingUserIsNotNull())
		{
			MemberOfStaffLiteVo recordingUser = domain.getMoS(patientDocument.getRecordingUser());
			userChildCellVirtual.setValue(recordingUser != null? (recordingUser.getNameIsNotNull() ? recordingUser.getName().toString() : null) : null );
			userChildCellVirtual.setTooltip(recordingUser != null? (recordingUser.getNameIsNotNull() ? recordingUser.getName().toString() : null) : null );
			userChildCellVirtual.setReadOnly(true);//WDEV-15010
		}
													
		DynamicGridCell dateTimeChildCellVirtual = dynParentRow.getCells().newCell(getColumn(COLDATETIME), DynamicCellType.STRING);
		dateTimeChildCellVirtual.setValue(patientDocument.getRecordingDateTimeIsNotNull() ? patientDocument.getRecordingDateTime().toString() : null);
		dateTimeChildCellVirtual.setTooltip(patientDocument.getRecordingDateTimeIsNotNull() ? patientDocument.getRecordingDateTime().toString() : null);
		dateTimeChildCellVirtual.setReadOnly(true);//WDEV-15010
		
		dynParentRow.setValue(patientDocument);				
	}
	
	private void populateGrid(DocumentViewLevel level)
	{
		form.dyngrd().getRows().clear();
		PatientDocumentVoCollection coll = null;
		TreeMap<String, Integer> map = new TreeMap<String, Integer>();
				
		coll = domain.listPatientDocuments(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getCurrentCareContext(), form.getLocalContext().getDocumentCategory(), form.getLocalContext().getCatsReferralRef(), level);
							
		if (coll!= null &&
				coll.size() > 0)
		{
			countForRecords(coll, map);
			DynamicGridRow dynRow = null;	
			for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) 
			{
				String element = (String) iter.next();				
				dynRow = addParentRow(map, element);		
				
				for(int i = 0; i < coll.size(); i++)
				{
					if (coll.get(i).getCategory().getIItemText().equals(element))
					{
						addRowRecord(coll, dynRow, i);
						if (level.equals(DocumentViewLevel.REFERRAL) && isGPLetterCategory && !isGPLetterSelected )
						{
							dynRow.setExpanded(true);
							//form.dyngrd().setValue(coll.get(i));					
							//onDyngrdRowSelectionChanged(form.dyngrd().getSelectedRow());		
							isGPLetterSelected = true;
						}
					}
				}				
			}				
		}	
		
		setSelectedInstance();//WDEV-13695
	}
		
	//WDEV-13695	
	private void setSelectedInstance() 
	{
		form.dyngrd().setValue(form.getLocalContext().getSelectedRecord());
		
		expandRow(form.dyngrd().getSelectedRow());
	}

	private void expandRow(DynamicGridRow selectedRow)
	{
		if(selectedRow == null)
			return;
		
		if(selectedRow.getParent() != null)
			selectedRow.getParent().setExpanded(true);
		
		expandRow(selectedRow.getParent());
	}

	protected void onBtnImportClick() throws PresentationLogicException 
	{
		form.getGlobalContext().Core.setUploadDocumentAction(UploadDocumentAction.IMPORT);
		openDialog();
	}
		
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Core.UploadDocumentDialog) && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setSelectedRecord(null);//WDEV-13695
			
			//wdev-12880
			if(form.getGlobalContext().RefMan.getCatsReferral() != null)
				form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
			//------------
			form.fireCustomControlValueChanged();
		}	
		
		open();	//WDEV-13698
		
		//start WDEV-13889
		if ((formName.equals(form.getForms().Core.DocumentPreview)) && (form.dyngrd().getSelectedRow() == null)) 
		{
		form.getLocalContext().setSelectedRecord(null);
		form.fireCustomControlValueChanged();
		}
		//end
	}


	@Override
	protected void onDyngrdRowSelectionChanged(DynamicGridRow row) 
	{
		
		if (row != null) 
		{
			if (engine.isRIEMode())
			{
				if (ConfigFlag.GEN.FILE_SERVER_URL.getValue() != null &&
						row.getValue() != null &&
							row.getValue() instanceof PatientDocumentVo &&
								((PatientDocumentVo) row.getValue()).getServerDocument() != null)
				{
					String fileUrl = ConfigFlag.GEN.FILE_SERVER_URL.getValue() + ((PatientDocumentVo) row.getValue()).getServerDocument().getFileName();
					engine.openUrl(fileUrl);
				}
			}
			else
			{
				form.getLocalContext().setSelectedRecord((PatientDocumentVo) row.getValue());
				previewDoc();
				form.fireCustomControlValueChanged();
			}	
		}
		
		//dispalySelectedDocument();		
	}

	private void previewDoc()
	{
		engine.open(form.getForms().Core.DocumentPreview, new Object[]{form.getLocalContext().getSelectedRecord()});
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.getLocalContext().setSelectedRecord(null);//	WDEV-13695
		
		initializeDynamicGrid();		
	}

	public PatientDocumentVo getSelectedRecord()
	{			
		return form.getLocalContext().getSelectedRecord();
	}

	public void hideHtmlControl()
	{
		// TODO Auto-generated method stub
		
	}

	public void showHtmlControl()
	{
		// TODO Auto-generated method stub
		
	}

	public void clearHtmlControl()
	{
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsStates();
		
	}


	

	
}
