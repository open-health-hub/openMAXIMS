//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4758.16736)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.core.domain.base.impl.BaseExternalResourceSearchComponentImpl;
import ims.core.vo.ExternalResourceVoCollection;
import ims.core.vo.domain.ExternalResourceVoAssembler;
import ims.core.vo.lookups.ExternalResourceType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;

public class ExternalResourceSearchComponentImpl extends BaseExternalResourceSearchComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ExternalResourceVoCollection getExternalResources(ExternalResourceType externalResourceType, String name, HcpDisType hcpType, PreActiveActiveInactiveStatus status)
	{
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String prepend = " where ";
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ExternalResource as er ");
		if (externalResourceType != null)
		{
			hql.append(prepend + " er.externalResourceType.id = :resourceType ");
			names.add("resourceType");
			values.add(externalResourceType.getID());
			prepend = " and ";
		}
		if (name != null)
		{
			hql.append(prepend + " upper(er.resourcename) like :name");
			names.add("name");
			values.add(name.toUpperCase() + "%");
			prepend = " and ";
		}

		if (hcpType != null)
		{
			hql.append(prepend + " er.hCPType.id = :idHcpType ");
			names.add("idHcpType");
			values.add(hcpType.getID());
			prepend = " and ";
		}
		if (status != null)
		{
			hql.append(prepend + " er.resourceStatus.id = :idStatus ");
			names.add("idStatus");
			values.add(status.getID());

		}
		hql.append(" order by er.systemInformation.creationDateTime asc");
		List<?> extresources = factory.find(hql.toString(), names, values);
		return ExternalResourceVoAssembler.createExternalResourceVoCollectionFromExternalResource(extresources);
	}

}
