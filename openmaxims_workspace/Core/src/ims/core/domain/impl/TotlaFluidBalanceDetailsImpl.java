//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.45 build 2425.18037)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.clinicaladmin.vo.DailyPatternConfigVo;
import ims.clinicaladmin.vo.DailyPatternShortConfigVo;
import ims.clinicaladmin.vo.domain.DailyPatternConfigVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.configuration.domain.objects.DailyPattern;
import ims.core.domain.base.impl.BaseTotalFluidBalanceDetailsImpl;
import ims.core.vitals.domain.objects.DailyFluidBalance;
import ims.core.vo.DailyFluidBalanceVoCollection;
import ims.core.vo.domain.DailyFluidBalanceVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;

import ims.framework.enumerations.SortOrder;

public class TotlaFluidBalanceDetailsImpl extends BaseTotalFluidBalanceDetailsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Saves the given Fluid Balance to the database
	*/
	public ims.core.vo.DailyFluidBalanceVo saveFluidBalance(ims.core.vo.DailyFluidBalanceVo balance) throws ims.domain.exceptions.StaleObjectException
	{
		if (!balance.isValidated())
			throw new DomainRuntimeException("FluidBalance details have not been validated!");
		
		DomainFactory factory = getDomainFactory();
		DailyFluidBalance domBalance = DailyFluidBalanceVoAssembler.extractDailyFluidBalance(factory, balance);

		factory.save(domBalance);
			
		return (DailyFluidBalanceVoAssembler.create(domBalance));
	}

	public DailyPatternConfigVo getFluidBalanceDailyPatternConfig(DailyPatternShortConfigVo dailyPatternconfigVo) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from DailyPattern dp ");
		
		if (dailyPatternconfigVo == null)
			return null; 

		hql.append(" where dp.dailyPatternType = :patternType"); 
		//hql.append(whereAnd + " dp.isActive = :isActive");

//		java.util.List patterns = factory.find(hql.toString(), new String[]{"isActive", "patternType"}, new Object[]{Boolean.TRUE, getDomLookup(dailyPatternconfigVo.getDailyPatternType())});
		java.util.List patterns = factory.find(hql.toString(), new String[]{"patternType"}, new Object[]{getDomLookup(dailyPatternconfigVo.getDailyPatternType())});
		if (patterns.size() > 0)
			return (DailyPatternConfigVoAssembler.create((DailyPattern)patterns.get(0)));
		else
			return null; 
	}

	public DailyFluidBalanceVoCollection listFluidBalanceByCareContextAndDates(CareContextRefVo refCareContext, ims.framework.utils.DateTime startDateTime, ims.framework.utils.DateTime endDateTime)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from DailyFluidBalance t ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (refCareContext != null)
		{
			hql.append(andStr + " t.careContext.id = :cc");
			markers.add("cc");
			values.add(refCareContext.getID_CareContext());
			andStr = " and ";
		}

		if (startDateTime != null)
		{
			hql.append(andStr + " t.shiftDetails.startDateTime >= :sdate");
			markers.add("sdate");
			values.add(startDateTime.getDate().getDate());//.toString(ims.framework.utils.DateTimeFormat.MEDIUM));
//			values.add(startDateTime.toString(ims.framework.utils.DateTimeFormat.MEDIUM));
			andStr = " and ";
		}
		if (endDateTime != null)
		{
			hql.append(andStr + " t.shiftDetails.startDateTime <= :edate");
			markers.add("edate");
			values.add(endDateTime.getDate().getDate());//.toString(ims.framework.utils.DateTimeFormat.MEDIUM));
//			values.add(endDateTime.toString(ims.framework.utils.DateTimeFormat.MEDIUM));
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			query += " where ";
		
		query += hql.toString();
		List fluidList = factory.find(query, markers, values);
		DailyFluidBalanceVoCollection voDailyFluidBalanceColl = DailyFluidBalanceVoAssembler.createDailyFluidBalanceVoCollectionFromDailyFluidBalance(fluidList).sort(SortOrder.DESCENDING);
		return voDailyFluidBalanceColl;
	}

}
