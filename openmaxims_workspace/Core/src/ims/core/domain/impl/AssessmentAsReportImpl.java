//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.65 build 3180.29032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.core.domain.base.impl.BaseAssessmentAsReportImpl;

import java.util.ArrayList;
import java.util.List;

public class AssessmentAsReportImpl extends BaseAssessmentAsReportImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getReportAndTemplate
	*/
	public String[] getReportAndTemplate(ims.vo.ValueObjectRef refVo)
	{
		String[] result = null;
		
		if(refVo == null)
			return null;
		
		if(refVo instanceof UserAssessmentRefVo)
		{
				List list = getDomainFactory().find("select r1_1.reportXml, t1_1.templateXml \r\n" + 
						"from UserAssessment as u1_1 left join u1_1.associatedReport as t1_1 left join t1_1.report as r1_1\r\n" + 
						"where (u1_1.id = :ID) ", new String[] {"ID"}, new Object[] {refVo.getBoId()});

				if(list.iterator().hasNext())
				{
					Object[] obj = (Object[])list.iterator().next();
					
					result = new String[] {(String)obj[0], (String)obj[1]};
				}
		}
		
		return result;		
	}

	/**
	 * Get Report and Template based on Patient ID
	 */
	public String[] getReportAndTemplate(PatientAssessmentRefVo refPatientAssessment)
	{
		if (refPatientAssessment == null || !refPatientAssessment.getID_PatientAssessmentIsNotNull())
			return null;
		
		String[] result = null;
		
		
		// Query for simple User Assessment for report and template
		StringBuilder queryUserAssessment = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		queryUserAssessment.append("select rep.reportXml, temp.templateXml ");
		queryUserAssessment.append("from PatientAssessment as patAss left join patAss.assessmentData as data left join data.userAssessment as assess left join assess.associatedReport as temp");
		queryUserAssessment.append(" left join temp.report as rep where patAss.id = :ID");
		
		paramNames.add("ID");
		paramValues.add(refPatientAssessment.getID_PatientAssessment());
		
		List list = getDomainFactory().find(queryUserAssessment.toString(), paramNames, paramValues);
		
		// Build the result for report and template for User Assessment
		if (list.iterator().hasNext())
		{
			Object[] obj = (Object[]) list.iterator().next();
			
			result = new String[] {(String) obj[0], (String) obj[1]};
		}
			
		
		// If the result for simple User Assessment is invalid, then query for report and template for a Graphical User Assessment
		if (result == null || result.length < 2 || result[0] == null || result[1] == null)
		{
			StringBuilder queryGraphicalAssessment = new StringBuilder();

			queryGraphicalAssessment.append("select rep.reportXml, temp.templateXml ");
			queryGraphicalAssessment.append("from PatientAssessment as patAss left join patAss.assessmentData as data left join data.graphic as assess left join assess.associatedReportForPrinting as temp");
			queryGraphicalAssessment.append(" left join temp.report as rep where patAss.id = :ID");
			
			list = getDomainFactory().find(queryGraphicalAssessment.toString(), paramNames, paramValues);

			// Build the result for report and template for Graphical User Assessment
			if (list.iterator().hasNext())
			{
				Object[] obj = (Object[]) list.iterator().next();
				
				result = new String[] {(String) obj[0], (String) obj[1]};
			}
		}
			
		// Check the result for a valid report and template
		if (result == null || result.length < 2 || result[0] == null || result[1] == null)
			return null;
		
		return result;
	}
}
