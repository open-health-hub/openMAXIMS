//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3520.27738)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.RefMan.domain.objects.PatientElectiveList;
import ims.core.admin.pas.domain.objects.PendingElectiveAdmission;
import ims.core.domain.AssignWard;
import ims.core.domain.BedInfoDialog;
import ims.core.helper.DTOHelper;
import ims.core.vo.PatientElectiveListForWardViewVo;
import ims.core.vo.PendingElectiveAdmissionAdmitVo;
import ims.core.vo.domain.PatientElectiveListForWardViewVoAssembler;
import ims.core.vo.domain.PendingElectiveAdmissionAdmitVoAssembler;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.dto.ResultException;
import ims.dto.client.Booklist.BooklistRecord;
import ims.framework.exceptions.CodingRuntimeException;

public class AssignWardImpl extends DTODomainImplementation implements AssignWard
{

	private static final long serialVersionUID = 1L;

	/**
	* listActiveHospitals
	*/
	public ims.core.vo.LocationLiteVoCollection listActiveHospitals()
	{
		BedInfoDialog impl = (BedInfoDialog)getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public ims.core.vo.LocationLiteVoCollection listWards(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		BedInfoDialog impl = (BedInfoDialog)getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveWardsForHospitalLite(hospital);
	}

	/**
	 * update booklist entry on PAS and then save locally if successful
	 */
	public void savePendingElectiveAdmission(PendingElectiveAdmissionAdmitVo pendingElective) throws DomainInterfaceException, StaleObjectException
	{
		if (pendingElective == null)
			throw new CodingRuntimeException("pendingElective is null in method savePendingElectiveAdmission");
		if (!pendingElective.isValidated())
			throw new CodingRuntimeException("pendingElective has not been validated in method savePendingElectiveAdmission");

		DomainFactory factory = getDomainFactory();
		PendingElectiveAdmission doPendingElective = PendingElectiveAdmissionAdmitVoAssembler.extractPendingElectiveAdmission(factory, pendingElective);

		BooklistRecord dtoBooklist = null;
		ims.dto.client.Booklist booklistRec = null;
		try
		{
			booklistRec = (ims.dto.client.Booklist) getDTOInstance(ims.dto.client.Booklist.class);	
		}
		catch(ResultException e)
		{
			throw new DomainInterfaceException("Failed to Connect to PAS - Please check Configuration", e);
		}
		
		booklistRec.Filter.clear();
		if(pendingElective.getPasEventIsNotNull() && pendingElective.getPasEvent().getPatientIsNotNull())
		{
			ims.core.vo.PatientId intfId = pendingElective.getPasEvent().getPatient().getHospnum();
			Result result = null;
			if (intfId != null)
				booklistRec.Filter.Hospnum = intfId.getValue();
			else
				throw new DomainRuntimeException("No valid Interface Patient Identifier supplied.");
			
			if(doPendingElective.getTCITime() != null)
				booklistRec.Filter.Time = DTOHelper.convertToDtoTime(doPendingElective.getTCITime());
			else
				throw new CodingRuntimeException("No valid TCI Time supplied.");
			
			if(doPendingElective.getTCIDate() != null)
				booklistRec.Filter.Date = DTOHelper.convertToDtoDate(doPendingElective.getTCIDate());
			else
				throw new CodingRuntimeException("No valid TCI Date supplied.");
			
			result = booklistRec.get();
			if(result != null && result.getId() < 0)
				throw new DomainInterfaceException("Attempt to get from Pas failed " + result.getMessage());
			
			dtoBooklist = booklistRec.DataCollection.get(0);
			if(doPendingElective.getAllocatedWard() == null)
				throw new CodingRuntimeException("Allocated Ward not set");
				
			dtoBooklist.Rescode = doPendingElective.getAllocatedWard().getExtCode(TaxonomyType.PAS.getID());
			dtoBooklist.Webadt = "Y";
			
			result = booklistRec.update();
			
			if(result != null && result.getId() < 0)
				throw new DomainInterfaceException("Attempt to save to Pas failed " + result.getMessage());
		}
		
		factory.save(doPendingElective);
	}

	//wdev-18936
	public void savePatientElectiveListForWardView(PatientElectiveListForWardViewVo record) throws DomainInterfaceException, StaleObjectException
	{
		if (record == null)
			throw new CodingRuntimeException("patientElectiveList is null in method savePatientElectiveListForWardView");
		if (!record.isValidated())
			throw new CodingRuntimeException("patientElectiveList has not been validated in method savePatientElectiveListForWardView");

		DomainFactory factory = getDomainFactory();
		PatientElectiveList doPatientElectiveList = PatientElectiveListForWardViewVoAssembler.extractPatientElectiveList(factory, record);

		
		
		factory.save(doPatientElectiveList);
		
	}
}
