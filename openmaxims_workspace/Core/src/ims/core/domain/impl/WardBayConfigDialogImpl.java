//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3341.28572)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.BedSpaceStateStatus;
import ims.core.admin.pas.domain.objects.WardBayConfig;
import ims.core.domain.base.impl.BaseWardBayConfigDialogImpl;
import ims.core.layout.domain.objects.BayConfig;
import ims.core.layout.domain.objects.BedSpace;
import ims.core.layout.domain.objects.FloorBedSpaceLayout;
import ims.core.layout.vo.BedSpaceRefVo;
import ims.core.layout.vo.FloorBedSpaceLayoutRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.BedSpaceStateLiteVo;
import ims.core.vo.BedSpaceStateLiteVoCollection;
import ims.core.vo.BedSpaceStateStatusLiteVo;
import ims.core.vo.BedSpaceStateStatusLiteVoCollection;
import ims.core.vo.BedSpaceVoCollection;
import ims.core.vo.FloorBedSpaceLayoutLiteVoCollection;
import ims.core.vo.domain.BedSpaceStateLiteVoAssembler;
import ims.core.vo.domain.BedSpaceStateStatusLiteVoAssembler;
import ims.core.vo.domain.BedSpaceVoAssembler;
import ims.core.vo.domain.FloorBedSpaceLayoutLiteVoAssembler;
import ims.core.vo.domain.WardBayConfigVoAssembler;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class WardBayConfigDialogImpl extends BaseWardBayConfigDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveWardBayConfig
	*/
	public void saveWardBayConfig(ims.core.vo.WardBayConfigVo wardBayConfig) throws ims.domain.exceptions.StaleObjectException, DomainInterfaceException
	{
		if (wardBayConfig == null)
			throw new CodingRuntimeException("wardBayConfig is null in method saveWardBayConfig");
		if (!wardBayConfig.isValidated())
			throw new CodingRuntimeException("wardBayConfig has not been validated in method saveWardBayConfig");

		DomainFactory factory = getDomainFactory();
		WardBayConfig doWardBayConf = WardBayConfigVoAssembler.extractWardBayConfig(factory, wardBayConfig); 
		
		Set bedSpaceStates = new java.util.HashSet();
		
		//set fields for creating locations
		Iterator it3 = doWardBayConf.getBays().iterator();
		while(it3.hasNext())
		{
			BayConfig doBayConf = (BayConfig) it3.next();

			doBayConf.getBay().setIsActive(doBayConf.isIsActive());//WDEV-13964
			
			doBayConf.getBay().setParentLocation(doWardBayConf.getWard());
			doBayConf.getBay().setUpperNames();
		}
		
		Iterator it = doWardBayConf.getBays().iterator();
		while(it.hasNext())
		{
			BayConfig doBayConf = (BayConfig) it.next();
			
			OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
						
			//clone selected template record
			if(doBayConf.getFloorBedSpaceLayout().isIsTemplate())
			{
				FloorBedSpaceLayout cloneFbl = new FloorBedSpaceLayout();
				Set newBedSpaces = new java.util.HashSet();
				//Clone the BedSpaces also
				Iterator it1 = doBayConf.getFloorBedSpaceLayout().getBedSpaces().iterator();
				while(it1.hasNext())
				{
					BedSpace doBed = (BedSpace) it1.next();
					BedSpace doNewBed = new BedSpace();
					doNewBed.setBedSpaceType(doBed.getBedSpaceType());
					doNewBed.setDescription(doBed.getDescription());
					doNewBed.setVml(doBed.getVml());
					doNewBed.setTextPosition(doBed.getTextPosition());
					doNewBed.setImagePosition(doBed.getImagePosition());
					doNewBed.setWardType(doBed.getWardType());
					doNewBed.setBedNumber(doBed.getBedNumber());//wdev-13862
					newBedSpaces.add(doNewBed);
					
					//create state collection here and save further down after initial save
					BedSpaceState bedSpaceState = new BedSpaceState();
					bedSpaceState.setBedSpace(doNewBed);
					BedSpaceStateStatus bedSpaceStateStatus = new BedSpaceStateStatus();
					bedSpaceStateStatus.setBedStatus(getDomLookup(BedStatus.AVAILABLE));
					bedSpaceState.setCurrentBedStatus(bedSpaceStateStatus);
					bedSpaceState.setWard(doWardBayConf.getWard());
					bedSpaceState.setBay(doBayConf.getBay());
					
					bedSpaceStates.add(bedSpaceState);

					cloneFbl.setBedSpaces(newBedSpaces);
				}
				cloneFbl.setFloorLayout(doBayConf.getFloorBedSpaceLayout().getFloorLayout());
				cloneFbl.setIsTemplate(Boolean.FALSE);
				cloneFbl.setName(doWardBayConf.getWard().getName() + " - " + doBayConf.getBay().getName());
				cloneFbl.setStatus(doBayConf.getFloorBedSpaceLayout().getStatus());
				doBayConf.setFloorBedSpaceLayout(cloneFbl);
			}
		}
		
		factory.save(doWardBayConf);
		
		//now save the states
		Iterator it2 = bedSpaceStates.iterator();
		while(it2.hasNext())
		{
			BedSpaceState doBedSpaceState = (BedSpaceState) it2.next();
			factory.save(doBedSpaceState);
		}
		
		try
		{
			deleteUnReferencedBays(doWardBayConf.getWard());
		}
		catch (ForeignKeyViolationException e)
		{
			throw new DomainInterfaceException(e.getMessage());
		}
		
		inactivateUnReferencedFloorBedSpaceLayouts(doWardBayConf.getWard());
		
	}

	private void inactivateUnReferencedFloorBedSpaceLayouts(Location ward) throws StaleObjectException
	{
		String hql = "select fbsl from FloorBedSpaceLayout as fbsl where (fbsl.status.id = -617 and fbsl.isTemplate = false and fbsl.id not in (select bayConfig.floorBedSpaceLayout.id from BayConfig as bayConfig" + /* left join bayConfig.floorBedSpaceLayout as fbsl1*/ "))";
		List floorBedSpaceLayouts = getDomainFactory().find(hql);
		if(floorBedSpaceLayouts != null)
		{
			Iterator it = floorBedSpaceLayouts.iterator();
			while(it.hasNext())
			{
				FloorBedSpaceLayout doFbsl =  (FloorBedSpaceLayout) it.next();
				doFbsl.setStatus(getDomLookup(PreActiveActiveInactiveStatus.INACTIVE));
				getDomainFactory().save(doFbsl);
			}
		}
	}

	/**
	 * delete all bays that were created and have now been orphaned as they are no longer used
	 * @param location
	 * @throws ForeignKeyViolationException
	 */
	private void deleteUnReferencedBays(Location location) throws ForeignKeyViolationException
	{
		if (location == null || location.getId() == null)
			throw new CodingRuntimeException("location is null or id not provided in method deleteUnReferencedBays");
		
		getDomainFactory().delete("from Location loc where loc.type.id = '" + LocationType.BAY.getID() + "' and loc.parentLocation.id = '" + location.getId() + "' and loc.id not in (select distinct bay.id from BayConfig as bc left join bc.bay as bay)");
	}

	private BedSpaceStateLiteVo getBedSpaceState(BedSpace bed) 
	{
		if (bed == null || bed.getId() == null)
			return null;
		
		String hql = "select bs from BedSpaceState as bs left join bs.bedSpace as bed where bed.id = " + bed.getId();
		List bedState = getDomainFactory().find(hql);
		
		BedSpaceStateLiteVoCollection voColl = BedSpaceStateLiteVoAssembler.createBedSpaceStateLiteVoCollectionFromBedSpaceState(bedState);
		
		if (voColl != null &&
				voColl.size() > 0)
			return voColl.get(0);		
		
		return null;
	}
	
	//list FloorBedLayouts that are not already in use by a BayConfig record
	public ims.core.vo.FloorBedSpaceLayoutLiteVoCollection listFloorBedLayouts()
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from FloorBedSpaceLayout fl";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql += " where fl.status.id = :status";
		markers.add("status");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		
		hql += " and fl.isTemplate = :isTemplate";
		markers.add("isTemplate");
		values.add(Boolean.TRUE);
		
		//hql += " and fl.id not in ( select distinct fl.id from BayConfig as bc left join bc.floorBedSpaceLayout as fl ) ";
		
		FloorBedSpaceLayoutLiteVoCollection voCollFloorBedLayout = FloorBedSpaceLayoutLiteVoAssembler.createFloorBedSpaceLayoutLiteVoCollectionFromFloorBedSpaceLayout(factory.find(hql, markers, values)); 
		
		return voCollFloorBedLayout;
	}

	//WDEV-18064
	public BedSpaceVoCollection getBedSpacesForLayout(FloorBedSpaceLayoutRefVo floorBedSpaceLayoutRef)
	{
		if (floorBedSpaceLayoutRef == null || floorBedSpaceLayoutRef.getID_FloorBedSpaceLayout() == null)
			throw new CodingRuntimeException("Cannot get BedSpaces on null FloorBedSpaceLayoutRef");
		
		String hql = "select bs.bedSpaces from FloorBedSpaceLayout as bs where bs.id = " + floorBedSpaceLayoutRef.getID_FloorBedSpaceLayout();
		List bedSpaces = getDomainFactory().find(hql);
		
		BedSpaceVoCollection voColl = BedSpaceVoAssembler.createBedSpaceVoCollectionFromBedSpace(bedSpaces);
				
		return voColl;
	}

	public BedSpaceStateStatusLiteVo getBedSpaceStateStatus(BedSpaceRefVo bedSpaceref)
	{
		if (bedSpaceref == null || bedSpaceref.getID_BedSpace() == null)
			throw new CodingRuntimeException("Cannot get BedSpaceStateStatus on null bedSpaceRef");
		
		String hql = "select bss.currentBedStatus from BedSpaceState as bss left join bss.bedSpace as bs where bs.id = " + bedSpaceref.getID_BedSpace();
		List bedSpaces = getDomainFactory().find(hql);
		
		BedSpaceStateStatusLiteVoCollection voColl = BedSpaceStateStatusLiteVoAssembler.createBedSpaceStateStatusLiteVoCollectionFromBedSpaceStateStatus((bedSpaces));
			
		if (voColl != null && voColl.size() > 0)
			return voColl.get(0);
		
		return null;
	}

	

}
