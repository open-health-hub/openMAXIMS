//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.RefMan.vo.TransportBookingDisplayVo;
import ims.RefMan.vo.TransportBookingShortVo;
import ims.RefMan.vo.TransportBookingShortVoCollection;
import ims.RefMan.vo.domain.TransportBookingDisplayVoAssembler;
import ims.RefMan.vo.domain.TransportBookingShortVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.domain.base.impl.BaseTransportBookingImpl;
import ims.core.domain.objects.PatientTransportRequirements;
import ims.core.domain.objects.TransportBooking;
import ims.core.vo.PatientTransportRequirementsVo;
import ims.core.vo.TransportBookingRefVo;
import ims.core.vo.domain.PatientTransportRequirementsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Booking_AppointmentTransportVoCollection;
import ims.scheduling.vo.domain.Booking_AppointmentTransportVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;


public class TransportBookingImpl extends BaseTransportBookingImpl
{

	private static final long serialVersionUID = 1L;

	
	// Get Patient Transport Requirements for Care Context
	public PatientTransportRequirementsVo getPatientTransportRequirements(CareContextRefVo careContext)
	{
		if (careContext == null)
			return null;
		
		String hqlQuery = "SELECT patTranReq FROM PatientTransportRequirements AS patTranReq WHERE patTranReq.careContext.id = :Context_ID AND (patTranReq.isRIE is null OR patTranReq.isRIE = 0)";
		
		return PatientTransportRequirementsVoAssembler.create((PatientTransportRequirements) getDomainFactory().findFirst(hqlQuery, "Context_ID", careContext.getID_CareContext()));
	}
	
	/**
	* List all the transport booking for the appointment
	*/
	public TransportBookingShortVoCollection listTransportBooking(CareContextRefVo careContext)
	{
		// Check for a valid care context 
		if (careContext == null)
			return null;
		
		String hqlQuery = "SELECT transport FROM TransportBooking AS transport WHERE transport.careContext.id = :Context_ID";
		
		return TransportBookingShortVoAssembler.createTransportBookingShortVoCollectionFromTransportBooking(getDomainFactory().find(hqlQuery, "Context_ID", careContext.getID_CareContext()));
	}

	/**
	* Retrieves from data base a TransportBookingVo based on the id provided.
	*/
	public TransportBookingDisplayVo getTransportBooking(TransportBookingRefVo transportBookingRef)
	{
		if (transportBookingRef == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		DomainObject result = factory.getDomainObject(TransportBooking.class, transportBookingRef.getID_TransportBooking());
		
		return TransportBookingDisplayVoAssembler.create((TransportBooking) result);
	}

	/**
	* Save the provided VO to data base.
	*/
	public TransportBookingShortVo saveTransportBooking(TransportBookingShortVo transportBookingVo, Booking_AppointmentTransportVoCollection appointments) throws StaleObjectException
	{
		// Check main VO for null
		if (transportBookingVo == null)
			throw new CodingRuntimeException("MAJOR LOGICAL ERROR - No VO provided");
		
		if (!transportBookingVo.isValidated() && !appointments.isValidated())
			throw new CodingRuntimeException("VOs must be validated");
		
		
		DomainFactory factory = getDomainFactory();
		
		TransportBooking transportBooking = TransportBookingShortVoAssembler.extractTransportBooking(factory, transportBookingVo);
		
		factory.save(transportBooking);
		
		if (appointments == null)
			return TransportBookingShortVoAssembler.create(transportBooking);
		
		for (int i = 0; i < appointments.size(); i++)
		{
			if (appointments.get(i) == null)
				continue;
			
			Booking_Appointment appointment = Booking_AppointmentTransportVoAssembler.extractBooking_Appointment(factory, appointments.get(i));
			factory.save(appointment);
		}
		
		return TransportBookingShortVoAssembler.create(transportBooking);
	}

	/**
	* List appointments that can be associated with Transport
	*/
	public Booking_AppointmentTransportVoCollection listAppointments(CareContextRefVo careContext)
	{
		// Check for appointment
		if (careContext == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		// Build query
		StringBuilder hqlQuery = new StringBuilder("SELECT appointments FROM Booking_Appointment AS appointments LEFT JOIN appointments.careContext AS context LEFT JOIN appointments.apptStatus AS status");
		hqlQuery.append(" WHERE context.id = :ID and appointments.isTransportBooked is null and appointments.isTransportRequired = :REQUIRED and status.id = :BOOKED");
		
		// Add parameters
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("ID");
		paramValues.add(careContext.getID_CareContext());
		paramNames.add("REQUIRED");
		paramValues.add(Boolean.TRUE);
		paramNames.add("BOOKED");
		paramValues.add(Status_Reason.BOOKED.getID());
		
		return Booking_AppointmentTransportVoAssembler.createBooking_AppointmentTransportVoCollectionFromBooking_Appointment(factory.find(hqlQuery.toString(), paramNames, paramValues));
	}

}
