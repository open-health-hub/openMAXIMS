//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2327.14692)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;
 
import ims.clinical.configuration.domain.objects.CancerImagingHotlist;
import ims.clinical.configuration.domain.objects.DiagnosisHotlist;
import ims.clinical.configuration.domain.objects.ProcedureHotlist;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.CancerImagingHotlistVo;
import ims.clinicaladmin.vo.DiagnosisHotListVo;
import ims.clinicaladmin.vo.ProblemHotlistVo;
import ims.clinicaladmin.vo.ProcedureHotlistVo;
import ims.clinicaladmin.vo.domain.CancerImagingHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.DiagnosisHotListVoAssembler;
import ims.clinicaladmin.vo.domain.ProblemHotlistVoAssembler;
import ims.clinicaladmin.vo.domain.ProcedureHotlistVoAssembler;
import ims.clinicaladmin.vo.enums.CciType;
import ims.core.domain.base.impl.BaseSpecialtyHotlistConfigurationDlgImpl;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.interfaces.IGenericItem;
import ims.vo.interfaces.IHotlist;

public class SpecialtyHotlistConfigurationDlgImpl extends BaseSpecialtyHotlistConfigurationDlgImpl
{
	private static final long serialVersionUID = 1L;

	/**
	 * Lists the IGenericItems depending on a given search String and CciType
	 * @param String
	 * @param CciType
	 * @return IGenericItem[]
	 * @author mmccarthy
	 */
	public IGenericItem[] listIGenericItems(String strSearch, CciType cciType) throws DomainInterfaceException 
	{
		if (cciType == null)
			throw new DomainRuntimeException("NUll CCI type passed to 'listIGenericItems'");
		
		CCIAdmin impl = (CCIAdmin)getDomainImpl(CCIAdminImpl.class);
		return impl.listIGenericItems(strSearch, cciType, true); // only list active results
	}
	
	/**
	 * Saves a given IHotlist based on a given CciType
	 * @param IHotlist
	 * @return IHotlist
	 */
	public IHotlist saveIHotlist(IHotlist iHotlist, CciType cciType) throws StaleObjectException
	{
		if(iHotlist == null)
			throw new DomainRuntimeException("Null parameter passed to 'saveProblemHotlist'");		

		if(!iHotlist.isIValidated().booleanValue())
			throw new CodingRuntimeException("Non validated Vo passed to 'saveProblemHotlist'");
		
		DomainFactory factory = getDomainFactory();	
		
		if ( cciType.equals(CciType.PROCEDURE))
		{
			ProcedureHotlist domHotlist = ProcedureHotlistVoAssembler.extractProcedureHotlist(factory, (ProcedureHotlistVo)iHotlist);
			factory.save(domHotlist);
			return ProcedureHotlistVoAssembler.create(domHotlist);
		}
		else if ( cciType.equals(CciType.PROBLEM) )
		{
			ims.clinical.configuration.domain.objects.ProblemHotlist domHotlist = ProblemHotlistVoAssembler.extractProblemHotlist(factory, (ProblemHotlistVo)iHotlist);		
			factory.save(domHotlist);		
			return ProblemHotlistVoAssembler.create(domHotlist);
		}
		else if ( cciType.equals(CciType.DIAGNOSIS) )
		{
			DiagnosisHotlist domHotlist = DiagnosisHotListVoAssembler.extractDiagnosisHotlist(factory, (DiagnosisHotListVo)iHotlist);
			factory.save(domHotlist);
			return DiagnosisHotListVoAssembler.create(domHotlist);
		}
		else if ( cciType.equals(CciType.CANCERIMAGE) )
		{
			CancerImagingHotlist domHotlist = CancerImagingHotlistVoAssembler.extractCancerImagingHotlist(factory, (CancerImagingHotlistVo)iHotlist);
			factory.save(domHotlist);
			return CancerImagingHotlistVoAssembler.create(domHotlist);
		}
		else 
		{
			throw new DomainRuntimeException ("Unknown CciType in listIHotlistShorts = " + cciType.toString());
		}
	}
}
