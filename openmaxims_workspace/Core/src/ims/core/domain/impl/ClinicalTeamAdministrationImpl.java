//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.45 build 2421.18554)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.MosAdminImpl;
import ims.core.domain.base.impl.BaseClinicalTeamAdministrationImpl;
import ims.core.resource.people.domain.objects.ClinicalTeam;
import ims.core.vo.ClinicalTeamSearchCriteriaVo;
import ims.core.vo.ClinicalTeamVoCollection;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.domain.ClinicalTeamVoAssembler;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class ClinicalTeamAdministrationImpl extends BaseClinicalTeamAdministrationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpCollection listHcps(ims.core.vo.HcpFilter voHcpFilter)
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listHcps(voHcpFilter);
	}

	public ims.core.vo.MedicLiteVoCollection listMedicsLite()
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listMedicsLite();
	}


	public ims.core.vo.ClinicalTeamVo saveClinicalTeam(ims.core.vo.ClinicalTeamVo voClinicalTeam) throws ims.domain.exceptions.StaleObjectException
	{
		if (voClinicalTeam == null)
			throw new CodingRuntimeException("SaveClinicalTeam called with a null Clinical Team Vo passed");
		if (!voClinicalTeam.isValidated())
			throw new CodingRuntimeException("ClinicalTeamVo has not been validated");					
		
		DomainFactory factory = getDomainFactory();		
		ClinicalTeam domClinicalTeam = ClinicalTeamVoAssembler.extractClinicalTeam(factory, voClinicalTeam);
		factory.save(domClinicalTeam);

		return ClinicalTeamVoAssembler.create(domClinicalTeam);						
	}
	

	public HcpLiteVoCollection listHcpLites(MemberOfStaffShortVo voFilter)
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listHcpsLite(voFilter);
	}

	public ClinicalTeamVoCollection listClinicalTeams(ClinicalTeamSearchCriteriaVo voFilter)
	{
		DomainFactory factory = getDomainFactory();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList(); 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		String sHQL = " from ClinicalTeam c ";
		
		if (voFilter.getActive() != null)
		{
			condStr.append(andStr + " c.isActive = :Active");
			markers.add("Active");
			values.add(voFilter.getActive());			
			andStr = " and ";
		}

		if (voFilter.getTeamName() != null)
		{
			condStr.append(andStr + " c.teamName = :TeamName");
			markers.add("TeamName");
			values.add(voFilter.getTeamName());			
			andStr = " and ";			
		}
		
		if (voFilter.getTeamType() != null)
		{
			condStr.append(andStr + " c.teamType = :TeamType");
			markers.add("TeamType");
			values.add(getDomLookup(voFilter.getTeamType()));			
			andStr = " and ";			
		}
		
		
		
		if (andStr.equals(" and "))
			sHQL += " where ";

		sHQL += condStr.toString();
		List lstClinicalTeams = factory.find(sHQL, markers, values);				
		return ClinicalTeamVoAssembler.createClinicalTeamVoCollectionFromClinicalTeam(lstClinicalTeams);		
	}


	
}
