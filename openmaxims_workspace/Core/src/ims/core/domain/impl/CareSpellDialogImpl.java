//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.45 build 2277.30859)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.InitConfig;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.CareSpellDialog;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextInterfaceVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareSpellVo;
import ims.core.vo.EpisodeOfCareInterfaceVo;
import ims.core.vo.EpisodeofCareLiteVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.InpatientEpisodeVoCollection;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PasEventVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ReferralLiteVoCollection;
import ims.core.vo.domain.CareContextInterfaceVoAssembler;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.CareSpellVoAssembler;
import ims.core.vo.domain.EpisodeOfCareInterfaceVoAssembler;
import ims.core.vo.domain.EpisodeofCareLiteVoAssembler;
import ims.core.vo.domain.EpisodeofCareVoAssembler;
import ims.core.vo.domain.PasEventShortVoAssembler;
import ims.core.vo.domain.PasEventVoAssembler;
import ims.core.vo.domain.ReferralLiteVoAssembler;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.dto.DTODomainImplementation;
import ims.dto.client.Episodelist;
import ims.dto.client.Episodelist.EpisodelistRecord;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;

public class CareSpellDialogImpl extends DTODomainImplementation implements CareSpellDialog
{
	private static final long	serialVersionUID	= 1L;
	
	public boolean dtoOnly() 
	{
		return InitConfig.getConfigType().equals("DTO");
	}

	public Class getLookupServiceClass()
	{
		return ims.domain.lookups.impl.LookupServiceImpl.class;
	}
	public ims.core.vo.HcpLiteVoCollection listHcp(String strHcpName)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHcpLiteByName(strHcpName);		
	
	}

	public CareSpellVo saveCareSpell(CareSpellVo voCareSpell) throws StaleObjectException
	{
		if (voCareSpell == null  || !voCareSpell.isValidated())
			throw new CodingRuntimeException("Care Spell is null or has not been validated");
			
		DomainFactory factory = getDomainFactory();
		CareSpell doCareSpell = CareSpellVoAssembler.extractCareSpell(factory, voCareSpell);		
		
		//WDEV-10231 - add any new cc status record to the history
		maintainCareContextStatusHistory(doCareSpell);
		
		factory.save(doCareSpell);

		return CareSpellVoAssembler.create(doCareSpell);		
	}
	
	private void maintainCareContextStatusHistory(CareSpell doCareSpell)
	{
		if (doCareSpell == null)
			throw new CodingRuntimeException("doCareSpell cannot be null in method maintainCareContextStatusHistory");
		
		if(doCareSpell.getEpisodes() != null)
		{
			Iterator itCs = doCareSpell.getEpisodes().iterator();
			while(itCs.hasNext())
			{
				EpisodeOfCare doEpis = (EpisodeOfCare) itCs.next();
				if(doEpis.getCareContexts() != null)
				{
					Iterator itCC = doEpis.getCareContexts().iterator();
					while(itCC.hasNext())
					{
						CareContext doCareContext = (CareContext)itCC.next();
						if(doCareContext.getCurrentStatus() != null && doCareContext.getCurrentStatus().getId() == null)
						{				
							doCareContext.getStatusHistory().add(doCareContext.getCurrentStatus());
						}
					}
				}
			}
		}
	}

	public PasEventVoCollection listPasEventsByTypeAndPatient(ContextType type, PatientRefVo patient, Boolean isCurrent)
	{
		if(type == null)
			throw new CodingRuntimeException("parameter 'type' is null in method listPasEventsByTypeAndPatient");
		if(patient == null)
			throw new CodingRuntimeException("parameter 'patient' is null in method listPasEventsByTypeAndPatient");
		
		StringBuffer strHql = new StringBuffer(); 
		
		DomainFactory factory = getDomainFactory();
		List pasEvents=null;
		if(type.equals(ContextType.INPATIENT))
		{
			strHql.append("select inpat.pasEvent ");
			
			if(isCurrent == null)
				throw new CodingRuntimeException("parameter 'isCurrent' is null in method listPasEventsByTypeAndPatient");
			if(isCurrent.equals(Boolean.TRUE))
				strHql.append("from InpatientEpisode ");
			else
				strHql.append("from DischargedEpisode ");
		
			strHql.append("as inpat left join inpat.pasEvent as pasEvent where pasEvent.patient.id = :patientId");
			// WDEV-17347
			strHql.append (" order by pasEvent.eventDateTime asc");
			pasEvents = factory.find(strHql.toString(), new String[]{"patientId"}, new Object[]{patient.getID_Patient()});
		}
		else if(type.equals(ContextType.GHGSURGERY))
		{
			strHql.append("from PASEvent pe where pe.patient.id = :idPatient");
			pasEvents = factory.find(strHql.toString(), new String[]{"idPatient"}, new Object[]{patient.getID_Patient()});
		}
		else
		{
			strHql.append("select outpat.pasEvent from OutpatientAttendance as outpat left join outpat.pasEvent as pasEvent where pasEvent.patient.id = :patientId and outpat.appointmentStatus in (:openStat, :bookedStat, :closedStat)");
			// WDEV-17347
			strHql.append (" order by pasEvent.eventDateTime asc");
			pasEvents = factory.find(strHql.toString(), new String[]{"patientId", "openStat", "bookedStat", "closedStat"}, new Object[]{patient.getID_Patient(), getDomLookup(Status_Reason.BOOKED), getDomLookup(Status_Reason.APPOINTMENT_BOOKED), getDomLookup(Status_Reason.CLOSED)});
		}

		if(pasEvents != null && pasEvents.size() > 0)	
			return PasEventVoAssembler.createPasEventVoCollectionFromPASEvent(pasEvents);
		
		return null;
	}

	public InpatientEpisodeVoCollection listInpatientEpisodes(PatientShort patientShortVo)
	{
		String extSystem = ConfigFlag.DOM.DEMOGRAPHICS_EXT_SYSTEM.getValue();

		ims.core.vo.InpatientEpisodeVoCollection inpColl = new ims.core.vo.InpatientEpisodeVoCollection();

		Episodelist h_epis = (Episodelist) getDTOInstance(Episodelist.class);
		h_epis.Filter.clear();

		ims.core.vo.PatientId intfId = patientShortVo.getInterfaceId();
		if (intfId == null)
		{
			throw new DomainRuntimeException("InPatient Episode List call must contain valid interface patient identifier");
		}

		if (intfId.getType().equals(PatIdType.HOSPNUM))
		{
			h_epis.Filter.Hospnum = patientShortVo.getInterfaceId().getValue();
		}
		else if (intfId.getType().equals(PatIdType.CHARTNUM))
		{
			h_epis.Filter.Chartnum = patientShortVo.getInterfaceId().getValue();
		}

		h_epis.list();

		EpisodelistRecord h_inp;
		InpatientEpisodeVo ie;

		int h_count = h_epis.DataCollection.count();
		for (int h = 0; h < h_count; h++)
		{
			h_inp = h_epis.DataCollection.get(h);
			ie = new InpatientEpisodeVo();
			PasEventVo voPasEvent = new PasEventVo();

			// Ward
			OrganisationAndLocation locImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
			voPasEvent.setLocation(locImpl.getLocationByLocalCode(h_inp.Rescode, LocationType.WARD));

			// Consultant
			HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
			MedicWithMappingsLiteVo voMedicWithMappingsLite = hcpAdmin.getMedicMedicMappingsByPasCode(h_inp.Hcpcode);
			if (voMedicWithMappingsLite != null)
			{
				if (voMedicWithMappingsLite instanceof MedicWithMappingsLiteVo)
					voPasEvent.setConsultant((MedicWithMappingsLiteVo) voMedicWithMappingsLite);
			}

			try
			{
				DateTime datetime = null;
				try {
					datetime = new DateTime(h_inp.Addt, h_inp.Adtm);
				} catch (java.text.ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				voPasEvent.setEventDateTime(datetime);
			}
			catch (ParseException e)
			{
				voPasEvent.setEventDateTime(null);
			}

			// Integer epsd = new Integer(h_inp.Epsd); 29/10/2005 As requested
			// by Neill.
			// voPasEvent.setID_PASEvent(epsd);
			voPasEvent.setPasEventId(h_inp.Contactno);
			voPasEvent.setPatient(patientShortVo);
			voPasEvent.setSourceOfReferral((SourceOfReferral) getLookupService().getLocalLookup(SourceOfReferral.class, SourceOfReferral.TYPE_ID, extSystem, h_inp.Referredby));
			ie.setPasEvent(voPasEvent);

			inpColl.add(ie);
		}

		return inpColl;
	}
	
	// Creates a new PAS Event
	// Method was created to be used on GHG Data Import
	public PasEventVo savePASEvent(PasEventShortVo pasEvent) throws ims.domain.exceptions.StaleObjectException
	{
		if(pasEvent == null)
			throw new DomainRuntimeException("Invalid PAS event");
		if(!pasEvent.isValidated())
			throw new DomainRuntimeException("PAS event was not validated");
		
		DomainFactory factory = getDomainFactory();
		PASEvent domainObject = PasEventShortVoAssembler.extractPASEvent(factory, pasEvent); 
		factory.save(domainObject);
		return PasEventVoAssembler.create(domainObject);
	}

	public Specialty getDefaultSpecialtyForHcp(HcpRefVo hcp)
	{
		String hql = "select med.specialty.id from Medic as med where med.id = :idMedic ";
		
		List specialtyIds = getDomainFactory().find(hql, new String[] {"idMedic"}, new Object[] {hcp.getID_Hcp()});
		if(specialtyIds != null && specialtyIds.size() == 1)
		{
			if(specialtyIds.get(0) != null)
				return LookupHelper.getSpecialtyInstance(getLookupService(), ((Integer)specialtyIds.get(0)).intValue());
		}
			
		return null;
	}
	
	public CareContextInterfaceVo getCareContextFromPasEpisodeId(String pasEpisodeId, String visitId)
	{
		DomainFactory factory=getDomainFactory();
		
		ArrayList<String> objects=new ArrayList<String>();
		objects.add("pasEvent");
		IMSCriteria imsc=new IMSCriteria(CareContext.class,objects,factory);
		imsc.equal("pasEvent.pasEpisodeId", pasEpisodeId);
		imsc.equal("pasEvent.pasEventId", visitId);
		
		List careContexts=imsc.find();
		
		if (careContexts.size()>0)
		{
			CareContext careContext=(CareContext)careContexts.get(careContexts.size()-1);
			return CareContextInterfaceVoAssembler.create(careContext);
		}
		
		return null;
		
	}
	
	// wdev-8320
	// getCareContextFromPasEvent
	// Returns the CareContext associated with the given PasEvent if any
	public CareContextVo getCareContextFromPasEvent(PASEventRefVo pasEvent)
	{
		DomainFactory factory=getDomainFactory();
		
		ArrayList<String> objects=new ArrayList<String>();
		objects.add("pasEvent");
		IMSCriteria imsc=new IMSCriteria(CareContext.class,objects,factory);
		imsc.equal("pasEvent.id", pasEvent.getID_PASEvent());
		
		List careContexts=imsc.find();
		
		if (careContexts.size()>0)
		{
			CareContext careContext=(CareContext)careContexts.get(careContexts.size()-1);
			return CareContextVoAssembler.create(careContext);
		}
		
		return null;
		
	}
	
	
	public CareContextVo saveCareContext(CareContextVo careContext) throws StaleObjectException
	{
		if (careContext == null  || !careContext.isValidated())
			throw new CodingRuntimeException("Care Spell is null or has not been validated");
		DomainFactory factory=getDomainFactory();
		
		CareContext doCareContext = CareContextVoAssembler.extractCareContext(factory, careContext);
		
		//WDEV-10231 - add any new status record to history
		if(doCareContext.getCurrentStatus() != null && doCareContext.getCurrentStatus().getId() == null)	
			doCareContext.getStatusHistory().add(doCareContext.getCurrentStatus());
		
		factory.save(doCareContext);
		return CareContextVoAssembler.create(doCareContext);
	}

	
	public CareContextInterfaceVo saveCareContext(CareContextInterfaceVo careContext) throws StaleObjectException
	{
		if (careContext == null  || !careContext.isValidated())
			throw new CodingRuntimeException("Care Spell is null or has not been validated");
		DomainFactory factory=getDomainFactory();
		
		CareContext doCareContext = CareContextInterfaceVoAssembler.extractCareContext(factory, careContext);
		
		//WDEV-10231 - add any new status record to history
		if(doCareContext.getCurrentStatus() != null && doCareContext.getCurrentStatus().getId() == null)	
			doCareContext.getStatusHistory().add(doCareContext.getCurrentStatus());
		
		factory.save(doCareContext);
		return CareContextInterfaceVoAssembler.create(doCareContext);
	}
	
	public EpisodeofCareLiteVo getEpisodeOfCare(String pasEpisodeId)
	{
		DomainFactory factory=getDomainFactory();
		ArrayList<String> objects=new ArrayList <String>();
		objects.add("careContexts");
		objects.add("pasEvent");
		IMSCriteria imsc=new IMSCriteria(EpisodeOfCare.class,objects,factory);
		imsc.equal("pasEvent.pasEpisodeId", pasEpisodeId);
		List episodes=imsc.find();
		if (episodes.size()>0)
			return EpisodeofCareLiteVoAssembler.create((EpisodeOfCare)episodes.get(0));
		return null;
	}

	public ReferralLiteVoCollection listReferralsByPatient(PatientRefVo patient) {
		DomainFactory factory = getDomainFactory();
		String hql = "from Referral r where r.isActive = true and r.patient.id = " + patient.getID_Patient();
		
		return ReferralLiteVoAssembler.createReferralLiteVoCollectionFromReferral(factory.find(hql)).sort(SortOrder.DESCENDING);

	}
	
	//**  WDEV-13901
	public EpisodeOfCareInterfaceVo saveEpisodeOfCare(EpisodeOfCareInterfaceVo voEpisode)
			throws StaleObjectException 
	{
		if (!voEpisode.isValidated())
			throw new CodingRuntimeException("EpisodeOfCare has not been validated!");
		
		DomainFactory factory=getDomainFactory();
		
		EpisodeOfCare domEpis = EpisodeOfCareInterfaceVoAssembler.extractEpisodeOfCare(factory, voEpisode);
		factory.save(domEpis);
		return EpisodeOfCareInterfaceVoAssembler.create(domEpis);
	}
}
