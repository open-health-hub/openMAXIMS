//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50106.1515)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vitals.domain.objects.DailyFluidBalance;
import ims.core.vitals.domain.objects.ShiftDetails;
import ims.core.vitals.domain.objects.VitalSigns;
import ims.core.vo.DailyFluidBalanceVo;
import ims.core.vo.ShiftDetailsVo;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.domain.DailyFluidBalanceVoAssembler;
import ims.core.vo.domain.ShiftDetailsVoAssembler;
import ims.core.vo.domain.VitalSignsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class VitalSignsVentilationChartDialogImpl extends DomainImpl implements ims.core.domain.VitalSignsVentilationChartDialog, ims.domain.impl.Transactional
{
	/**
	* Saves the given ventilationChartRecord
	*/
	public VitalSignsVo saveVentilationChartRecord(VitalSignsVo voVitalSigns) throws DomainInterfaceException, StaleObjectException 
	{

		DomainFactory factory = getDomainFactory();
		VitalSigns domVital = VitalSignsVoAssembler.extractVitalSigns(factory, voVitalSigns);
		domVital.setIsVentilationChartRecord(Boolean.TRUE);
		factory.save(domVital);
	
		return VitalSignsVoAssembler.create(domVital);
	}

	public DailyFluidBalanceVo listFluidBalance(DateTime date, CareContextRefVo refCareContext)
	{
		DomainFactory factory = getDomainFactory();
		String filter = " from DailyFluidBalance fb ";
		String andStr = " ";
		StringBuffer filterString = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		
		if (refCareContext != null)
		{
			filterString.append(" fb.careContext.id = :careContext ");
			markerNames.add("careContext");
			markerValues.add(refCareContext.getID_CareContext());
			andStr = " and ";
		}
		if(date != null)
		{
			filterString.append(andStr + " fb.shiftDetails.startDateTime = :dateFrom ");
			markerNames.add("dateFrom");
			markerValues.add(date.getJavaDate());
		}
		
		if(andStr.equals(" and "))
			filter += " where ";
		filter += filterString.toString();

		List dailyFluidList = factory.find(filter, markerNames, markerValues);
		if(dailyFluidList != null && dailyFluidList.size()>0)
			return DailyFluidBalanceVoAssembler.create((DailyFluidBalance) dailyFluidList.get(0));
		
		return null;
	}

	public ShiftDetailsVo getShiftDetails(DateTime startDate, CareContextRefVo refCareContext)
	{
		DomainFactory factory = getDomainFactory();
		String filter = " from ShiftDetails sd ";
		String andStr = " ";
		StringBuffer filterString = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		
		if (refCareContext != null)
		{
			filterString.append(" sd.careContext.id = :careContext ");
			markerNames.add("careContext");
			markerValues.add(refCareContext.getID_CareContext());
			andStr = " and ";
		}
		if(startDate != null)
		{
			filterString.append(andStr + " sd.startDateTime = :dateFrom ");
			markerNames.add("dateFrom");
			markerValues.add(startDate.getJavaDate());
		}
		
		if(andStr.equals(" and "))
			filter += " where ";
		filter += filterString.toString();

		List list = factory.find(filter, markerNames, markerValues);
		if(list != null && list.size() > 0)
			return ShiftDetailsVoAssembler.create((ShiftDetails) list.get(0));

		return null;
	}

	public VitalSignsVo getVentilationChartByShiftAndTime(ShiftDetailsVo shift, DateTime datetime)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from VitalSigns vc ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		hql.append(andStr + " vc.isVentilationChartRecord = :record");
		markers.add("record");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		if (shift != null)
		{
			hql.append(andStr + " vc.ventilationChart.shiftDetails.id = :shiftId ");
			markers.add("shiftId");
			values.add(shift.getID_ShiftDetails());
			andStr = " and ";
		}

		if (datetime != null)
		{
			Time time1 = new Time(datetime.getTime().getHour(), 0);
			
			DateTime date1 = new DateTime(datetime.getDate(), time1);
			time1.addMinutes(59);
			DateTime date2 = new DateTime(datetime.getDate(), time1);
			
			hql.append(andStr + " vc.vitalsTakenDateTime between :date1 and :date2 ");
			markers.add("date1");
			values.add(date1.getJavaDate());
			markers.add("date2");
			values.add(date2.getJavaDate());
			andStr = " and ";
		}
		
		if(andStr.equals(" and "))
			query += " where";
		query += hql.toString();
		List lst = factory.find(query, markers, values);		
		
		VitalSignsVoCollection voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(lst);
		
		if(voVitalsColl != null && voVitalsColl.size() > 0)
			return voVitalsColl.get(0);
		
		return null;
	}
	
	
}
