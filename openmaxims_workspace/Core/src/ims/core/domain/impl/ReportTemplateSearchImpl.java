//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.domain.base.impl.BaseReportTemplateSearchImpl;
import ims.core.vo.TemplateForReportTemplateSearchVoCollection;
import ims.core.vo.domain.TemplateForReportTemplateSearchVoAssembler;
import ims.domain.DomainFactory;

import java.util.ArrayList;
import java.util.List;

public class ReportTemplateSearchImpl extends BaseReportTemplateSearchImpl
{

	private static final long serialVersionUID = 1L;

	public TemplateForReportTemplateSearchVoCollection listTemplates(String reportSearchText, String templateSearchText)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
	
		if (reportSearchText == null || reportSearchText.length() == 0)
		{
			reportSearchText = "%";
		}
		else
		{
			if(!reportSearchText.startsWith("%"))
				reportSearchText = "%" + reportSearchText;
			if(!reportSearchText.endsWith("%"))
				reportSearchText = reportSearchText + "%";
		}

		if (templateSearchText == null || templateSearchText.length() == 0)
		{
			templateSearchText = "%";
		}
		else
		{
			if(!templateSearchText.startsWith("%"))
				templateSearchText = "%" + templateSearchText;
			if(!templateSearchText.endsWith("%"))
				templateSearchText = templateSearchText + "%";
		}
		
		String andStr = " ";
		
		hql.append("select template from TemplateBo as template left join template.report as report ");
		
		cond.append(andStr + "report.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(report.reportName) like UPPER(:reportName)");
		markers.add("reportName");
		values.add(reportSearchText);
		andStr = " and ";
		
		cond.append(andStr + "template.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(template.name) like UPPER(:templateName)");
		markers.add("templateName");
		values.add(templateSearchText);
		andStr = " and ";
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List <?>list = factory.find(hql.toString(), markers, values);
		return TemplateForReportTemplateSearchVoAssembler.createTemplateForReportTemplateSearchVoCollectionFromTemplateBo(list).sort();
	}

}
