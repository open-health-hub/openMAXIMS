//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Callum Wells using IMS Development Environment (version 1.45 build 2421.15208)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.VitalSignsMonitoring;
import ims.core.domain.VitalSignsGroupings;
import ims.core.domain.base.impl.BaseVitalSignsMonitoringImpl;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.VitalSignMonitoringGroupVoCollection;
import ims.core.vo.VitalSignMonitoringVo;
import ims.core.vo.VitalSignMonitoringVoCollection;
import ims.core.vo.domain.VitalSignMonitoringVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;

public class VitalSignsMonitoringImpl extends BaseVitalSignsMonitoringImpl
{
	private static final long serialVersionUID = 1L;

	public VitalSignMonitoringGroupVoCollection listVitalSignMonitoringGroups() throws DomainInterfaceException
	{
		VitalSignsGroupings domVSGroupings = (VitalSignsGroupings)getDomainImpl(VitalSignsGroupingsImpl.class);
		return domVSGroupings.listVitalSignMonitoringGroups();
	}
	public VitalSignMonitoringVo saveVitalSignsMonitoringVo(VitalSignMonitoringVo voVitalSignsMonitoring) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		VitalSignsMonitoring bo = VitalSignMonitoringVoAssembler.extractVitalSignsMonitoring(factory, voVitalSignsMonitoring);
		
		factory.save(bo);

		return VitalSignMonitoringVoAssembler.create(bo);
	}
	public VitalSignMonitoringVoCollection listVitalSignsMonitoringVo(CareContextRefVo voCareContextRef) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from VitalSignsMonitoring vsm ");
		
		if (voCareContextRef == null)
			return null; 

		hql.append(" where vsm.careContext.id = :cc"); 
	
		hql.append(" order by vsm.startDateTime desc");
		
		java.util.List vsmList = factory.find(hql.toString(), new String[]{"cc"}, new Object[]{voCareContextRef.getID_CareContext()});
		
		return  VitalSignMonitoringVoAssembler.createVitalSignMonitoringVoCollectionFromVitalSignsMonitoring(vsmList);
	}
	public VitalSignMonitoringGroupVoCollection listVitalSignsMonitoringGroups() throws DomainInterfaceException 
	{
		VitalSignsGroupings domVSGroupings = (VitalSignsGroupings)getDomainImpl(VitalSignsGroupingsImpl.class);
		return domVSGroupings.listVitalSignMonitoringGroups();
	}
	public HcpLiteVoCollection listHCPs(HcpFilter filter) throws DomainInterfaceException
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		if (filter != null && filter.getQueryNameIsNotNull())
			return hcpAdmin.listHcpLiteByName(filter.getQueryName().getSurname());
		else
			return null;
	}
	

}
