//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.66 build 3261.22124)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.pas.domain.objects.PendingEmergencyAdmission;
import ims.core.domain.Demographics;
import ims.core.domain.base.impl.BasePendingEmergencyAdmissionsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.PendingEmergencyAdmissionLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocMostVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PendingEmergencyAdmissionLiteVoAssembler;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class PendingEmergencyAdmissionsImpl extends BasePendingEmergencyAdmissionsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHCPs(String hcp)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria(MemberOfStaff.class,factory);
		imsc.isNotNull("hcp");
		List hcps = imsc.find();
		if (hcps!=null)
			return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(hcps);
		return null;
	}

	public ims.core.vo.PendingEmergencyAdmissionLiteVoCollection listPendingEmergencyAdmissions(ims.core.vo.PendingEmergencyAdmissionsDataVo data)
	{
		if (data == null)
			throw new CodingRuntimeException("Invalid data");

		if(data.countFieldsWithValue() == 0)
			return PendingEmergencyAdmissionLiteVoAssembler.createPendingEmergencyAdmissionLiteVoCollectionFromPendingEmergencyAdmission(getDomainFactory().find("from PendingEmergencyAdmission"));
			
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		StringBuffer sb = new StringBuffer();
		String andStr = "";

		String hql = "select pe from PendingEmergencyAdmission as pe "; 

		String strSearchSurname = "";
		String strSearchForename = "";
		String locationJoin = "";
		
		//WDEV-8486
		if (data.getHospitalIsNotNull())
			hql += " left join pe.allocatedWard as allocWard ";
		
		if (data.getIDNumberIsNotNull())
		{
			hql += " join pe.pasEvent.patient.identifiers as ids ";
			
			String idVal = data.getIDNumber().trim();			
			if (data.getIDType().equals(PatIdType.NHSN))
				idVal = data.getIDNumber().replace(" ", "");//wdev-7305
			
			if(!ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue())
				idVal = idVal.toUpperCase();

			if (data.getIDType().equals(PatIdType.NHSN))
			{
				sb.append(andStr + " ids.value like :idnum ");
				idVal += "%";
			}
			else
				sb.append(andStr + " ids.value = :idnum");

			markers.add("idnum");
			andStr = " and ";
			sb.append(andStr + " ids.type = :idtype");
			markers.add("idtype");

			values.add(idVal);
			values.add(getDomLookup(data.getIDType()));
		}
		else
		{
			if(data.getPatientForenameIsNotNull())
			{
				sb.append(andStr + " pe.pasEvent.patient.name.upperForename like :patFore");
				markers.add("patFore");
				andStr = " and ";
				
				strSearchForename = data.getPatientForename().toUpperCase().trim();
				strSearchForename = strSearchForename.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchForename.length() >= 40)
				{
					strSearchForename = strSearchForename.substring(0,40);
					strSearchForename += '%';
				}
				else
				{
					strSearchForename += '%';
				}
				values.add(strSearchForename);
	
			}
	
			if(data.getPatientSurnameIsNotNull())
			{
				sb.append(andStr + " pe.pasEvent.patient.name.upperSurname like :patSur");
				markers.add("patSur");
				andStr = " and ";
	
				strSearchSurname = data.getPatientSurname().toUpperCase().trim();
				strSearchSurname = strSearchSurname.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchSurname.length() >= 40)
				{
					strSearchSurname = strSearchSurname.substring(0,40);
					strSearchSurname += '%';
				}
				else
				{
					strSearchSurname += '%';
				}
				values.add(strSearchSurname);
			}
		}//WDEV-13065 

		if (data.getHcpIsNotNull())
		{
			sb.append(andStr + " pe.pasEvent.consultant.id = :cons");
			markers.add("cons");
			values.add(data.getHcp().getID_Hcp());
			andStr = " and ";
		}
		
		if (data.getHospitalIsNotNull())
		{
			sb.append(andStr +  " (pe.currentLocation.id = :hosp or allocWard.parentLocation.id = :hosp)");
			markers.add("hosp");
			values.add(data.getHospital().getID_Location());
			andStr = " and ";
		}
		
		if (data.getAllocatedWardIsNotNull())
		{
			sb.append(andStr + " pe.allocatedWard.id = :ward");
			markers.add("ward");
			values.add(data.getAllocatedWard().getID_Location());
			andStr = " and ";
		}

		if (data.getAlertIsNotNull())
		{
			hql += " join pe.pasEvent.patient.patientAlerts as patAlerts ";
			
			sb.append(andStr + "patAlerts.alertType = :alertID");
			markers.add("alertID");
			values.add(getDomLookup(data.getAlert()));
			andStr = " and ";
		}
		if (data.getAdmissionStatus() == null)
		{
			sb.append(andStr + " ( pe.admissionStatus = :stat or pe.admissionStatus = :stat1 ) ");
			markers.add("stat");
			values.add(getDomLookup(EmergencyAdmissionStatus.DISCHARGED));
			markers.add("stat1");
			values.add(getDomLookup(EmergencyAdmissionStatus.DTA));
			andStr = " and ";
		}
		else
		{
			sb.append(andStr + " pe.admissionStatus = :stat ");
			markers.add("stat");
			values.add(getDomLookup(data.getAdmissionStatus()));
		}
		
		//WDEV-9633 
		sb.append(" and pe.bedTypeRequested <> null ");
		
		hql += " where ";
		hql += sb.toString();
		return PendingEmergencyAdmissionLiteVoAssembler.createPendingEmergencyAdmissionLiteVoCollectionFromPendingEmergencyAdmission(getDomainFactory().find(hql.toString(), markers, values));
	}

	public LocationLiteVoCollection listActiveHospitalsLite() 
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveHospitalsLite();		
	}

	public LocationLiteVoCollection listWards(Integer hospitalID, String searchName) 
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo voRef = new LocationRefVo();
		voRef.setID_Location(hospitalID);
		return implLoc.listActiveWardsForHospitalByNameLite(voRef, searchName);
	}

	public PatientShort getPatientShort(PatientRefVo patientRefVo) 
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		Patient voPat = impl.getPatient(patientRefVo);		

		if (voPat != null)
			return (PatientShort)voPat;
		else
			return null;
	}

	public HcpLiteVo getHCP(Integer idHCP) 
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		HcpFilter voFilter = new HcpFilter();
		voFilter.setID_Hcp(idHCP);
		return implHcpAdmin.getHcpLite(voFilter);
	}

	public LocationLiteVo getWard(LocationRefVo voWardRef) 
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return implLoc.getLocation(voWardRef.getID_Location());
	}

	public LocationLiteVo getHospital(LocationRefVo locationRefvo) 
	{
		DomainFactory factory = getDomainFactory();
		return LocationLiteVoAssembler.create((Location) factory.getDomainObject(Location.class, locationRefvo.getID_Location()));
	}

	public HcpLiteVoCollection listHCPs(HcpFilter filter) 
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return implHcpAdmin.listHcpLite(filter);
	}

	public LocMostVo getLocation(LocationRefVo voLocRef)
	{
		DomainFactory factory = getDomainFactory();
		return LocMostVoAssembler.create((Location) factory.getDomainObject(Location.class, voLocRef.getID_Location()));
	}

	public void removeFromPendingEmergency(PendingEmergencyAdmissionLiteVo pendingEmergency) throws StaleObjectException
	{
		if (pendingEmergency == null || pendingEmergency.getID_PendingEmergencyAdmission() == null)
			throw new CodingRuntimeException("pendingEmergency  is null or id not provided in method removeFromPendingEmergency");
		
		DomainFactory factory = getDomainFactory();
		PendingEmergencyAdmission doPendingEmergency = (PendingEmergencyAdmission)factory.getDomainObject(pendingEmergency);
		
		doPendingEmergency.setBedTypeRequested(null);
		doPendingEmergency.setAllocatedWard(null);
		
		factory.save(doPendingEmergency);
	}
}
