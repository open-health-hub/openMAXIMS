//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.71 build 3939.14042)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.documents.domain.objects.PatientDocument;
import ims.core.domain.base.impl.BaseMultiPrintDialogImpl;
import ims.core.vo.DocumentAndPatientWrapperVo;
import ims.core.vo.DocumentAndPatientWrapperVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientDocumentVoCollection;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.correspondence.vo.PatientDocumentErrorVo;
import ims.correspondence.vo.PatientDocumentErrorVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;

public class MultiPrintDialogImpl extends BaseMultiPrintDialogImpl
{

	private static final long serialVersionUID = 1L;

	public PatientDocumentErrorVoCollection savePatientDocuments(DocumentAndPatientWrapperVoCollection documents) 
	{
		if(documents == null || documents.size() == 0)
			return null;
		
		PatientDocumentErrorVoCollection errors = new PatientDocumentErrorVoCollection();
		DomainFactory factory = getDomainFactory();
		
		for(int i=0; i<documents.size(); i++)
		{
			PatientDocumentVo document = documents.get(i).getDocument();
		
			if(document == null)
				continue;
			
			PatientDocument doc = PatientDocumentVoAssembler.extractPatientDocument(factory, document);
			
			try 
			{
				factory.save(doc);
			} 
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
				errors.add(createError(documents.get(i), "Could not save Number of Copies."));
			}		
		}
		
		return errors.size() > 0 ? errors : null;
	}
	
	private PatientDocumentErrorVo createError(DocumentAndPatientWrapperVo patientDocument, String errorValue) 
	{
		PatientDocumentErrorVo error = new PatientDocumentErrorVo();
		
		error.setPatient(patientDocument.getPatient().getName());
		error.setIdentifiers(patientDocument.getPatient().getIdentifiers());
		error.setDocumentName(patientDocument.getDocument().getName());
		error.setDocumentDate(patientDocument.getDocument().getDocumentDate());
		
		error.setError(errorValue);
		
		return error;
	}
}
