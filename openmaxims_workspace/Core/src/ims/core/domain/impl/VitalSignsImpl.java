//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40809.1700)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.clinical.vo.SECSVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.SECSConfig;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vitals.domain.objects.Metrics;
import ims.core.vitals.domain.objects.VitalSigns;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.PatientEWSVo;
import ims.core.vo.VSABGO2SatsVo;
import ims.core.vo.VSArterialBloodGasCollection;
import ims.core.vo.VSMetrics;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.domain.PatientEWSVoAssembler;
import ims.core.vo.domain.VSABGO2SatsVoAssembler;
import ims.core.vo.domain.VSArterialBloodGasAssembler;
import ims.core.vo.domain.VSBloodPressureAssembler;
import ims.core.vo.domain.VSBloodSugarAssembler;
import ims.core.vo.domain.VSGlasgowComaScaleAssembler;
import ims.core.vo.domain.VSLungFunctionTestVoAssembler;
import ims.core.vo.domain.VSMetricsAssembler;
import ims.core.vo.domain.VSOxygenSaturationAssembler;
import ims.core.vo.domain.VSPainLadderVoAssembler;
import ims.core.vo.domain.VSPulseAssembler;
import ims.core.vo.domain.VSPupilsAssembler;
import ims.core.vo.domain.VSRespirationsAssembler;
import ims.core.vo.domain.VSTemperatureAssembler;
import ims.core.vo.domain.VSVisualAcuityAssembler;
import ims.core.vo.domain.VitalSignsVoAssembler;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.VSType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class VitalSignsImpl extends DomainImpl implements ims.core.domain.VitalSignsTemperature, ims.core.domain.VitalSignsPainLadder, ims.core.domain.VitalSignsOxygenSaturation, ims.core.domain.VitalSignsPulse, ims.core.domain.VitalSignsPeakFlow, ims.core.domain.VitalSignsRespiration, ims.core.domain.VitalSignsBP, ims.core.domain.VitalSignsGCS, ims.core.domain.VitalSignsBloodSugar, ims.core.domain.VitalSignsPupils, ims.core.domain.VitalSignsVisualAcuity, ims.core.domain.VitalSignsMetrics, ims.core.domain.VitalSignsAll, ims.core.domain.VitalSignsTPRBP, ims.core.domain.VitalSignsBMI, ims.core.domain.VitalCapacity, ims.core.domain.VitalSignsArterialBloodGas, ims.domain.impl.Transactional
{

	private static final long	serialVersionUID	= 1L;

	/**
	 * Generic Save for all Vital Signs
	 */
	public VitalSignsVo saveVitalSign(VitalSignsVo vitalSign) throws ims.domain.exceptions.StaleObjectException
	{
		if (!vitalSign.isValidated())
		{
			throw new DomainRuntimeException("This Vital Sign has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		VitalSigns doVitals = VitalSignsVoAssembler.extractVitalSigns(factory, vitalSign);

		factory.save(doVitals);
		return VitalSignsVoAssembler.create(doVitals);
	}

	/**
	 * Generic List for all Vital Signs
	 */
	public VitalSignsVoCollection listVitalSigns(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, null, refCareContext);
	}

	/**
	 * 
	 * Generic List for all Vital Signs By Vital Signs Type
	 * 
	 */

	public VitalSignsVoCollection listVitalSigns(Date dateFrom, Date dateTo, VSType[] vitalSignsTypes, CareContextRefVo refCareContext)
	{
		VitalSignsVoCollection voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns((List<?>) listVitalSignsDo(dateFrom, dateTo, vitalSignsTypes, refCareContext));

		if (vitalSignsTypes == null) // if listing all then sort
		{
			voVitalsColl.sort(SortOrder.DESCENDING);
		}
		return voVitalsColl;
	}

	private java.util.List<?> listVitalSignsDo(Date dateFrom, Date dateTo, VSType[] vitalSignsTypes, CareContextRefVo refCareContext)
	{
		DomainFactory factory = getDomainFactory();

		String filter = " from VitalSigns vs ";
		String andStr = " ";

		StringBuffer filterString = new StringBuffer();

		boolean conditionFound = false;

		ArrayList<String> markerNames = new ArrayList<String>();
		ArrayList<Object> markerValues = new ArrayList<Object>();

		if (dateFrom != null && dateTo != null)
		{
			filterString.append(" vs.vitalsTakenDateTime >= :fromDate and vs.vitalsTakenDateTime < :toDate ");
			conditionFound = true;
			markerNames.add("fromDate");
			markerNames.add("toDate");
			markerValues.add(dateFrom.copy().getDate());
			markerValues.add(dateTo.copy().addDay(1).getDate());
		}
		else if (dateFrom != null)
		{
			filterString.append(" vs.vitalsTakenDateTime >= :fromDate ");
			filterString.append(" and vs.vitalsTakenDateTime < :toDate ");
			conditionFound = true;
			markerNames.add("fromDate");
			markerValues.add(dateFrom.copy().getDate());
			markerNames.add("toDate");
			markerValues.add(dateFrom.copy().addDay(1).getDate());
		}

		if (vitalSignsTypes != null && vitalSignsTypes.length > 0)
		{
			VSType vsType;
			if (conditionFound)
				andStr = " and (";
			for (int i = 0; i < vitalSignsTypes.length; i++)
			{
				vsType = vitalSignsTypes[i];
				if (vsType.equals(VSType.TEMP))
				{
					filterString.append(andStr + " vs.temperature is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.BP))
				{
					filterString.append(andStr + " vs.bloodPressure is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.RESPIRATION))
				{
					filterString.append(andStr + " vs.respiratory is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PULSE))
				{
					filterString.append(andStr + " vs.pulse is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PEAKFLOW))
				{
					filterString.append(andStr + " vs.lungFunctionTest is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PUPILS))
				{
					filterString.append(andStr + " vs.pupils is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.BLOODSUGAR))
				{
					filterString.append(andStr + " vs.bloodSugar is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.GLASGOWCOMASCALE))
				{
					filterString.append(andStr + " vs.glasgowComaScale is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.METRICS))
				{
					filterString.append(andStr + " vs.metrics is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.OXYGEN))
				{
					filterString.append(andStr + " vs.oxygenSaturation is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.VISUALACUITY))
				{
					filterString.append(andStr + " vs.visualAcuity is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.VITALCAPACITY))
				{
					filterString.append(andStr + " vs.vitalCapacity is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.ABG))
				{
					filterString.append(andStr + " vs.arterialBloodGas is not null ");
					andStr = " or ";
				}
			}

			if (andStr.equalsIgnoreCase(" or ") && conditionFound)
				filterString.append(")");

			conditionFound = true;
		}

		if (refCareContext != null)
		{
			if (conditionFound)
				filterString.append(" and ");

			filterString.append(" vs.careContext.id = :careContext ");
			markerNames.add("careContext");
			markerValues.add(refCareContext.getID_CareContext());

			conditionFound = true;
		}

		if (conditionFound)
			filter += " where ";

		filter += filterString.toString();

		return factory.find(filter, markerNames, markerValues, 1000);
	}

	/**
	 * Generic Inactivate Method
	 */
	@SuppressWarnings("unchecked")
	public VitalSignsVo inactivateVitalSign(VitalSignsVo vitalSignsRecord, VSType type) throws StaleObjectException
	{
		if (!vitalSignsRecord.isValidated())
		{
			throw new DomainRuntimeException("Vital Sign Record has not been validated");
		}

		DomainFactory factory = getDomainFactory();

		VitalSigns doVital = (VitalSigns) factory.getDomainObject(VitalSigns.class, vitalSignsRecord.getID_VitalSigns());

		@SuppressWarnings("rawtypes")
		Set inactiveRecords;
		if (type.equals(VSType.TEMP))
		{
			inactiveRecords = doVital.getInactiveTemperature();
			inactiveRecords.add(doVital.getTemperature());
			doVital.setTemperature(VSTemperatureAssembler.extractTemperature(factory, vitalSignsRecord.getTemperature()));
		}
		if (type.equals(VSType.PAIN))
		{
			inactiveRecords = doVital.getInactivePain();
			inactiveRecords.add(doVital.getPain());
			doVital.setPain(VSPainLadderVoAssembler.extractPain(factory, vitalSignsRecord.getPain()));
		}
		else if (type.equals(VSType.PULSE))
		{
			inactiveRecords = doVital.getInactivePulse();
			inactiveRecords.add(doVital.getPulse());
			doVital.setPulse(VSPulseAssembler.extractPulse(factory, vitalSignsRecord.getPulse()));
		}
		else if (type.equals(VSType.RESPIRATION))
		{
			inactiveRecords = doVital.getInactiveRespiratory();
			inactiveRecords.add(doVital.getRespiratory());
			doVital.setRespiratory(VSRespirationsAssembler.extractRespiratory(factory, vitalSignsRecord.getRespiratory()));
		}
		else if (type.equals(VSType.BP))
		{
			inactiveRecords = doVital.getInactiveBloodPressure();
			inactiveRecords.add(doVital.getBloodPressure());
			doVital.setBloodPressure(VSBloodPressureAssembler.extractBloodpressure(factory, vitalSignsRecord.getBloodPressure()));
		}
		else if (type.equals(VSType.GLASGOWCOMASCALE))
		{
			inactiveRecords = doVital.getInactiveGlasgowComaScale();
			inactiveRecords.add(doVital.getGlasgowComaScale());
			doVital.setGlasgowComaScale(VSGlasgowComaScaleAssembler.extractGCS(factory, vitalSignsRecord.getGlasgowComaScale()));
		}
		else if (type.equals(VSType.VISUALACUITY))
		{
			inactiveRecords = doVital.getInactiveVisualAcuity();
			inactiveRecords.add(doVital.getVisualAcuity());
			doVital.setVisualAcuity(VSVisualAcuityAssembler.extractVisualAcuity(factory, vitalSignsRecord.getVisualAcuity()));
		}
		else if (type.equals(VSType.METRICS))
		{
			inactiveRecords = doVital.getInactiveMetrics();
			if(doVital.getMetrics() != null)
			{
				inactiveRecords.add(doVital.getMetrics());
			}
			
			doVital.setMetrics(VSMetricsAssembler.extractMetrics(factory, vitalSignsRecord.getMetrics()));
		}
		else if (type.equals(VSType.PEAKFLOW))
		{
			inactiveRecords = doVital.getInactiveLungFunctionTest();
			inactiveRecords.add(doVital.getLungFunctionTest());
			// doVital.setLungFunctionTest(VSPeakFlowAssembler.extractLungFunctionTests(factory,vitalSignsRecord.getLungFunctionTest()));
			doVital.setLungFunctionTest(VSLungFunctionTestVoAssembler.extractLungFunctionTests(factory, vitalSignsRecord.getLungFunctionTest()));
		}
		else if (type.equals(VSType.PUPILS))
		{
			inactiveRecords = doVital.getInactivePupils();
			inactiveRecords.add(doVital.getPupils());
			doVital.setPupils(VSPupilsAssembler.extractPupils(factory, vitalSignsRecord.getPupils()));
		}
		else if (type.equals(VSType.OXYGEN))
		{
			inactiveRecords = doVital.getInactiveOxygenSaturation();
			inactiveRecords.add(doVital.getOxygenSaturation());
			doVital.setOxygenSaturation(VSOxygenSaturationAssembler.extractOxygenSaturation(factory, vitalSignsRecord.getOxygenSaturation()));
		}
		else if (type.equals(VSType.BLOODSUGAR))
		{
			inactiveRecords = doVital.getInactiveBloodSugar();
			inactiveRecords.add(doVital.getBloodSugar());
			doVital.setBloodSugar(VSBloodSugarAssembler.extractBloodSugar(factory, vitalSignsRecord.getBloodSugar()));
		}

		try
		{
			factory.save(doVital);
		}
		catch (DomainException e)
		{
			throw new DomainRuntimeException("Domain Error occured inactivating a " + type.getText() + " record.\r\n" + e.getMessage(), e);
		}

		return VitalSignsVoAssembler.create(doVital);
	}

	/**
	 * Generic List By Contact
	 */
	public VitalSignsVoCollection listVitalSigns(CareContextRefVo refCareContext)
	{
		return listVitalSigns(null, null, null, refCareContext);
	}

	/**
	 * List Hcps
	 */
	public ims.core.vo.HcpCollection listHcps(ims.core.vo.HcpFilter hcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(hcpFilter);
	}

	/**
	 * List HcpLite
	 */
	public ims.core.vo.HcpLiteVoCollection listLiteHcps(ims.core.vo.HcpFilter hcpFilter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		if (hcpFilter != null && hcpFilter.getQueryNameIsNotNull())
			return hcpAdmin.listHcpLiteByName(hcpFilter.getQueryName().getSurname());
		else
			return null;
	}

	/**
	 * Generic Get for a Vital Signs Record
	 */
	public VitalSignsVo getVitalSignsRecord(VitalSignsVo voVitalSign)
	{
		DomainFactory factory = getDomainFactory();

		if (voVitalSign.getID_VitalSignsIsNotNull())
		{
			VitalSigns doVitals = (VitalSigns) factory.getDomainObject(VitalSigns.class, voVitalSign.getID_VitalSigns());
			return VitalSignsVoAssembler.create(doVitals);
		}
		else
		// Use the CareContext id
		{
			VitalSignsVoCollection voVitalsColl = new VitalSignsVoCollection();

			String hql = " from VitalSigns vs ";
			StringBuffer condStr = new StringBuffer();
			String andStr = " ";

			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Object> values = new ArrayList<Object>();

			if (voVitalSign.getCareContextIsNotNull())
			{
				condStr.append(andStr + " vs.careContext.id = :ccId");
				markers.add("ccId");
				values.add(voVitalSign.getCareContext().getID_CareContext());
				andStr = " and ";
			}

			if (andStr.equals(" and "))
				hql += " where ";

			hql += condStr.toString();
			voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(factory.find(hql, markers, values));
			if (voVitalsColl.size() > 0)
				return voVitalsColl.get(0);
			else
				return null;
		}
	}

	/**
	 * Retrieves a list of Temperatures for an Contact and Date Range
	 */
	public VitalSignsVoCollection listTemperatures(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.TEMP}, refCareContext);
	}

	/**
	 * Retrieves a list of Temperatures for an Contact and a specific day
	 */
	public VitalSignsVoCollection listTemperatures(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listTemperatures(dateOneDay, null, refCareContext);
	}

	/**
	 * Saves a Temperature
	 */
	public ims.core.vo.VitalSignsVo modifyTemperature(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.TEMP);
	}

	/**
	 * Gets a Temperature
	 */
	public VitalSignsVo getTemperature(VitalSignsVo voVitalSign)
	{
		return getVitalSignsRecord(voVitalSign);
	}

	/**
	 * Retrieves a list of Pain for an Contact and Date Range
	 */
	public VitalSignsVoCollection listPain(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.PAIN}, refCareContext);
	}

	/**
	 * Retrieves a list of Pain for an Contact and a specific day
	 */
	public VitalSignsVoCollection listPain(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listPain(dateOneDay, null, refCareContext);
	}

	/**
	 * Saves Pain
	 */
	public ims.core.vo.VitalSignsVo modifyPain(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.PAIN);
	}

	/**
	 * Gets a Pain
	 */
	public VitalSignsVo getPain(VitalSignsVo voVitalSign)
	{
		return getVitalSignsRecord(voVitalSign);
	}

	/**
	 * Retrieves a list of OxygenSaturations for an Contact and Date Range
	 */
	public VitalSignsVoCollection listOxygenSaturation(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.OXYGEN}, refCareContext);
	}

	/**
	 * Retrieves a list of Oxygen Saturation for an Contact and a specific day
	 */
	public VitalSignsVoCollection listOxygenSaturation(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listOxygenSaturation(dateOneDay, null, refCareContext);
	}

	/**
	 * Saves an OxygenSaturation
	 */
	public VitalSignsVo modifyOxygenSaturation(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.OXYGEN);

	}

	/**
	 * Gets an OxygenSaturation
	 */
	public VitalSignsVo getOxygenSaturation(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	public VitalSignsVoCollection listTPRBP(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.TEMP, VSType.PULSE, VSType.RESPIRATION, VSType.BP}, refCareContext);
	}

	public VitalSignsVoCollection listTPRBP(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateOneDay, null, new VSType[]{VSType.TEMP, VSType.PULSE, VSType.RESPIRATION, VSType.BP}, refCareContext);
	}

	/**
	 * Retrieves a list of Pulses for an Contact and Date Range
	 */
	public VitalSignsVoCollection listPulse(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.PULSE}, refCareContext);
	}

	/**
	 * Modify a Pulse
	 */
	public VitalSignsVo modifyPulse(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.PULSE);
	}

	/**
	 * Gets a Pulse
	 */
	public VitalSignsVo getPulse(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Pulses for an Contact and a specific day
	 */
	public VitalSignsVoCollection listPulse(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listPulse(dateOneDay, null, refCareContext);

	}

	/**
	 * Retrieves a list of Peak Flows for a Contact and Date Range
	 */
	public VitalSignsVoCollection listPeakFlow(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.PEAKFLOW}, refCareContext);
	}

	/**
	 * Saves a Peak Flow
	 */
	public VitalSignsVo modifyPeakFlow(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.PEAKFLOW);
	}

	/**
	 * Gets a Peak Flow
	 */
	public VitalSignsVo getPeakFlow(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Peak Flows for an Contact and a specific day
	 */
	public VitalSignsVoCollection listPeakFlow(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listPeakFlow(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of Respirations for an Contact and Date Range
	 */
	public VitalSignsVoCollection listRespiration(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.RESPIRATION}, refCareContext);
	}

	/**
	 * modify a Respiration
	 */
	public VitalSignsVo modifyRespiration(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.RESPIRATION);
	}

	/**
	 * Gets a Respiration
	 */
	public VitalSignsVo getRespiration(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Respirations for an Contact and a specific day
	 */
	public VitalSignsVoCollection listRespiration(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listRespiration(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of BP's for an Contact and Date Range
	 */
	public VitalSignsVoCollection listBP(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.BP}, refCareContext);
	}

	public VitalSignsVo modifyBP(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.BP);
	}

	public VitalSignsVo getBP(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of BP's for a Contact and specific Day
	 */
	public VitalSignsVoCollection listBP(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listBP(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of GCS's for a Contact and Date Range
	 */
	public VitalSignsVoCollection listGCS(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.GLASGOWCOMASCALE}, refCareContext);
	}

	public VitalSignsVo modifyGCS(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.GLASGOWCOMASCALE);
	}

	public VitalSignsVo getGCS(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of GCS's for a Contact and Specific Day
	 */
	public VitalSignsVoCollection listGCS(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listGCS(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of BloodSugars for a Contact and date range
	 */
	public VitalSignsVoCollection listBloodSugar(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.BLOODSUGAR}, refCareContext);
	}

	public VitalSignsVo modifyBloodSugar(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.BLOODSUGAR);
	}

	public VitalSignsVo getBloodSugar(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of BloodSugars for a Contact and Specific Day
	 */
	public VitalSignsVoCollection listBloodSugar(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listBloodSugar(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of Pupils for a Contact and date range
	 */
	public VitalSignsVoCollection listPupils(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.PUPILS}, refCareContext);
	}

	public VitalSignsVo modifyPupils(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.PUPILS);
	}

	public VitalSignsVo getPupils(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Pupils for a Contact and Specific Day
	 */
	public VitalSignsVoCollection listPupils(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listPupils(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of Visual Acuity for a Contact and Date range
	 */
	public VitalSignsVoCollection listVisualAcuity(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.VISUALACUITY}, refCareContext);
	}

	public VitalSignsVo modifyVisualAcuity(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.VISUALACUITY);
	}

	public VitalSignsVo getVisualAcuity(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Visual Acuity for a Contact and specific day
	 */
	public VitalSignsVoCollection listVisualAcuity(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listVisualAcuity(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of Metrics for a Contact and Date range
	 */
	public VitalSignsVoCollection listMetrics(Date dateFrom, Date dateTo, CareContextRefVo refCareContext)
	{
		return listVitalSigns(dateFrom, dateTo, new VSType[]{VSType.METRICS}, refCareContext);
	}

	public VitalSignsVo modifyMetrics(VitalSignsVo vitalSign) throws StaleObjectException
	{
		return inactivateVitalSign(vitalSign, VSType.METRICS);
	}

	public VitalSignsVo getMetrics(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	/**
	 * Retrieves a list of Metrics for a Contact and specific day
	 */
	public VitalSignsVoCollection listMetrics(Date dateOneDay, CareContextRefVo refCareContext)
	{
		return listMetrics(dateOneDay, null, refCareContext);
	}

	/**
	 * Retrieves a list of Metrics, sorts, and returns last record
	 */
	public VitalSignsVo getLastMetrics(CareContextRefVo refCareContext) throws DomainInterfaceException
	{
		if (refCareContext != null)
		{
			DomainFactory factory = getDomainFactory();

			String filter = " from VitalSigns vs ";
			StringBuffer filterString = new StringBuffer();

			ArrayList<String> markerNames = new ArrayList<String>();
			ArrayList<Object> markerValues = new ArrayList<Object>();

			filterString.append(" where vs.careContext.id = :cc");
			markerNames.add("cc");
			markerValues.add(refCareContext.getID_CareContext());
			filter += filterString.toString();

			/*
			Changes made to String below to reflect changes to the VitalSigns Business Object
				authoringDateTime changes to authoringInformation.authoringDateTime 
			*/
			filter += " and vs.metrics is not null order by vs.authoringInformation.authoringDateTime desc";

			VitalSignsVoCollection voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(factory.find(filter, markerNames, markerValues));

			if (voVitalsColl != null && voVitalsColl.size() > 0)
			{
				voVitalsColl.sort(SortOrder.DESCENDING);
				return voVitalsColl.get(0);
			}
		}

		return null;
	}

	public VitalSignsVoCollection listVitalCapacity(CareContextRefVo refCareContext)
	{
		VitalSignsVoCollection voVitalsColl = listVitalSigns(null, null, new VSType[]{VSType.PEAKFLOW}, refCareContext);

		voVitalsColl.sort(SortOrder.DESCENDING);

		return voVitalsColl;
	}

	public VitalSignsVo getVitalCapacity(VitalSignsVo vitalSign)
	{
		return getVitalSignsRecord(vitalSign);
	}

	public VitalSignsVoCollection listABGO2Sats(CareContextRefVo refCareContext)
	{
		return VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(listVitalSignsDo(null, null, new VSType[]{VSType.ABG}, refCareContext));
	}

	public VitalSignsVo saveABGO2Sats(VitalSignsVo voVitalABGO2) throws StaleObjectException
	{
		if (!voVitalABGO2.isValidated())
		{
			throw new DomainRuntimeException("This Vital Sign has not been validated");
		}

		DomainFactory factory = getDomainFactory();
		VitalSigns doVitals = VitalSignsVoAssembler.extractVitalSigns(factory, voVitalABGO2);
		
		factory.save(doVitals);
		
		return VitalSignsVoAssembler.create(doVitals);
		
	}

	public VSABGO2SatsVo getABGO2Sats(VSABGO2SatsVo aBGO2Sats)
	{
		DomainFactory factory = getDomainFactory();
		VitalSigns doVitals = (VitalSigns) factory.getDomainObject(VitalSigns.class, aBGO2Sats.getID_VitalSigns());
		return VSABGO2SatsVoAssembler.create(doVitals);
	}

	public VSMetrics getMetricsFromPatient(PatientRefVo voPatientRef)
	{
		if (voPatientRef == null || voPatientRef.getID_Patient() == null)
			throw new CodingRuntimeException("Patient not Provided to retrive Metrics record");

		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String query = "SELECT metric FROM Metrics AS metric WHERE metric.patient.id = :ID_PATIENT ORDER BY metric.systemInformation.creationDateTime DESC";
		
		paramNames.add("ID_PATIENT");
		paramValues.add(voPatientRef.getID_Patient());
		
		return VSMetricsAssembler.create((Metrics) factory.findFirst(query, paramNames, paramValues));
	}

	public VSMetrics saveMetricsToPatient(VSMetrics voMetrics) throws StaleObjectException
	{
		if(voMetrics == null || !voMetrics.isValidated())
			throw new CodingRuntimeException("Metrics record is null or has not been validated");
			
		DomainFactory factory = getDomainFactory();
		Metrics doMetrics = VSMetricsAssembler.extractMetrics(factory, voMetrics);
		factory.save(doMetrics);
		return VSMetricsAssembler.create(doMetrics);
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public SECSVo getSecs()
	{
		SECSConfig impl = (SECSConfig) getDomainImpl(SECSConfigImpl.class);
		return impl.getSecs();
	}

	public void savePatientEws(PatientEWSVo voPatEws)
	{
		if(voPatEws == null)
			throw new CodingRuntimeException("parameter voPatEws is null in method savePatientEws");
		
		try
		{
			getDomainFactory().save( PatientEWSVoAssembler.extractPatientEWS(getDomainFactory(), voPatEws));
		}
		catch (StaleObjectException e)
		{
			//unreachable code - always instantiating this business object - dlaffan
		}
	}

	
	public VitalSignsVoCollection listVitalSignsByEpisodeofCare(EpisodeOfCareRefVo episodeofcareref) 
	{
		if(episodeofcareref == null || episodeofcareref.getID_EpisodeOfCare() == null)
			return null;
		
		DomainFactory factory = getDomainFactory(); 
		String filter ="select v1_1 from VitalSigns as v1_1 left join v1_1.careContext as c1_1 left join c1_1.episodeOfCare as e1_1 where (e1_1.id = :idEpisodeOfCare)"; 
			
		VitalSignsVoCollection voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(factory.find(filter, new String[]{"idEpisodeOfCare"}, new Object[]{episodeofcareref.getID_EpisodeOfCare()}));
		
		voVitalsColl.sort(SortOrder.DESCENDING);
		
		return voVitalsColl;
		
		 

	}

	
	public VitalSignsVoCollection listTPRBPbyEpisodeofCare(Date dateFrom, Date dateTo, EpisodeOfCareRefVo refEpisodeOfCare) 
	{
		return VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(listVitalSignsEpisodeofCareDo(dateFrom, dateTo, new VSType[]{VSType.TEMP, VSType.PULSE, VSType.RESPIRATION, VSType.BP}, refEpisodeOfCare));
	}
	public VitalSignsVoCollection listTPRBPbyEpisodeofCare(Date dateFrom,EpisodeOfCareRefVo refEpisodeOfCare) 
	{
		return VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(listVitalSignsEpisodeofCareDo(dateFrom, null, new VSType[]{VSType.TEMP, VSType.PULSE, VSType.RESPIRATION, VSType.BP}, refEpisodeOfCare));
	}
	private java.util.List<?> listVitalSignsEpisodeofCareDo(Date dateFrom, Date dateTo, VSType[] vitalSignsTypes, EpisodeOfCareRefVo refEpisodeOfCare)
	{
		DomainFactory factory = getDomainFactory();

		String filter = " select v1_1 from VitalSigns as v1_1 left join v1_1.careContext as c1_1 left join c1_1.episodeOfCare as e1_1 ";
		String andStr = " ";

		StringBuffer filterString = new StringBuffer();

		boolean conditionFound = false;

		ArrayList<String> markerNames = new ArrayList<String>();
		ArrayList<Object> markerValues = new ArrayList<Object>();

		if (dateFrom != null && dateTo != null)
		{
			filterString.append(" v1_1.vitalsTakenDateTime >= :fromDate and v1_1.vitalsTakenDateTime < :toDate ");
			conditionFound = true;
			markerNames.add("fromDate");
			markerNames.add("toDate");
			markerValues.add(dateFrom.copy().getDate());
			markerValues.add(dateTo.copy().addDay(1).getDate());
		}
		else if (dateFrom != null)
		{
			filterString.append(" v1_1.vitalsTakenDateTime >= :fromDate ");
			filterString.append(" and v1_1.vitalsTakenDateTime < :toDate ");
			conditionFound = true;
			markerNames.add("fromDate");
			markerValues.add(dateFrom.copy().getDate());
			markerNames.add("toDate");
			markerValues.add(dateFrom.copy().addDay(1).getDate());
		}

		if (vitalSignsTypes != null && vitalSignsTypes.length > 0)
		{
			VSType vsType;
			if (conditionFound)
				andStr = " and (";
			for (int i = 0; i < vitalSignsTypes.length; i++)
			{
				vsType = vitalSignsTypes[i];
				if (vsType.equals(VSType.TEMP))
				{
					filterString.append(andStr + " v1_1.temperature is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.BP))
				{
					filterString.append(andStr + " v1_1.bloodPressure is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.RESPIRATION))
				{
					filterString.append(andStr + " v1_1.respiratory is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PULSE))
				{
					filterString.append(andStr + " v1_1.pulse is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PEAKFLOW))
				{
					filterString.append(andStr + " v1_1.lungFunctionTest is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.PUPILS))
				{
					filterString.append(andStr + " v1_1.pupils is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.BLOODSUGAR))
				{
					filterString.append(andStr + " v1_1.bloodSugar is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.GLASGOWCOMASCALE))
				{
					filterString.append(andStr + " v1_1.glasgowComaScale is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.METRICS))
				{
					filterString.append(andStr + " v1_1.metrics is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.OXYGEN))
				{
					filterString.append(andStr + " v1_1.oxygenSaturation is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.VISUALACUITY))
				{
					filterString.append(andStr + " v1_1.visualAcuity is not null ");
					andStr = " or ";
				}
				else if (vsType.equals(VSType.ABG))
				{
					filterString.append(andStr + " v1_1.arterialBloodGas is not null ");
					andStr = " or ";
				}
			}

			if (andStr.equalsIgnoreCase(" or ") && conditionFound)
				filterString.append(")");

			conditionFound = true;
		}

		if (refEpisodeOfCare != null)
		{
			if (conditionFound)
				filterString.append(" and ");

			filterString.append(" e1_1.id  = :idEpisodeOfCare ");
			markerNames.add("idEpisodeOfCare");
			markerValues.add(refEpisodeOfCare.getID_EpisodeOfCare());

			conditionFound = true;
		}

		if (conditionFound)
			filter += " where ";

		filter += filterString.toString();

		return factory.find(filter, markerNames, markerValues, 1000);
	}

	public VSArterialBloodGasCollection listArterialBSVo(CareContextRefVo careContext) {
		if(careContext == null)
			throw new CodingRuntimeException("Contact not Provided");
		
		DomainFactory factory = getDomainFactory();

		List<?> arterialBloodGas =   factory.find(" select v1_1.arterialBloodGas from VitalSigns as v1_1 left join v1_1.arterialBloodGas as a1_1 where v1_1.careContext.id = :idCareContext)",
				new String[]{"idCareContext" },
				new Object[]{ careContext.getID_CareContext()});

		VSArterialBloodGasCollection collVSArterialBloodGasVo = VSArterialBloodGasAssembler.createVSArterialBloodGasCollectionFromArterialBloodGas(arterialBloodGas);
				
		return collVSArterialBloodGasVo;
	}

	//WDEV-12215
	public PatientAssessmentVo getPatientAssessmentFull(PatientAssessmentRefVo patientAssessment) 
	{
		if(patientAssessment == null || patientAssessment.getID_PatientAssessment() == null)
			throw new CodingRuntimeException("Invalid patient assessment");
		
		return PatientAssessmentVoAssembler.create((PatientAssessment)getDomainFactory().getDomainObject(patientAssessment));	
	}

	//WDEV-14920	
	public Float getHeight(String ulnaValue, Integer age, Sex sex)
	{
		
		StringBuffer hql = new StringBuffer();
		
		DomainFactory factory = getDomainFactory();
		
		if (age<65)
		{
			if (sex.equals(ims.core.vo.lookups.Sex.MALE))
			{
				hql.append("select patHeights.menUnder65HeightM ");
			}
			else if (sex.equals(ims.core.vo.lookups.Sex.FEMALE))
			{
				hql.append("select patHeights.womenUnder65HeightM ");
			}
		}
		else
		{
			if (sex.equals(ims.core.vo.lookups.Sex.MALE))
			{
				hql.append("select patHeights.menOver65HeightM");
			}
			else if (sex.equals(ims.core.vo.lookups.Sex.FEMALE))
			{
				hql.append("select patHeights.womenOver65HeightM ");
			}
		}
		
		hql.append(" from PatientHeightEstimationULNAConfig patHeights where patHeights.uLNALengthCM = " + ulnaValue);	
		
		List <?> list = factory.find(hql.toString());
		
		if (list!=null && list.size()>0)
			return  (Float)list.get(0);
		
		return null;
		
	}
}
