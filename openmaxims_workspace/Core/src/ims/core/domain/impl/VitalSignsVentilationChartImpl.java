//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.22 build 50106.1515)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.ShiftDetailsVo;
import ims.core.vo.ShiftDetailsVoCollection;
import ims.core.vo.VitalSignsShortVoCollection;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.domain.ShiftDetailsVoAssembler;
import ims.core.vo.domain.VitalSignsShortVoAssembler;
import ims.core.vo.domain.VitalSignsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;

import java.util.ArrayList;
import java.util.List;

public class VitalSignsVentilationChartImpl extends DomainImpl implements ims.core.domain.VitalSignsVentilationChart, ims.domain.impl.Transactional
{
	/**
	* Lists ventilation chart records for the given episode
	*/
	public VitalSignsVoCollection listVentilationCharts(CareContextRefVo refCareContext, ShiftDetailsVo shift) 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from VitalSigns vc ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if (refCareContext != null)
 
		{
			hql.append(andStr + " vc.careContext.id = :cc");
			markers.add("cc");
			values.add(refCareContext.getID_CareContext());
			andStr = " and ";
			
			hql.append(andStr + " vc.isVentilationChartRecord = :record");
			markers.add("record");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}
		
		if (shift != null)
		{
			hql.append(andStr + " vc.ventilationChart.shiftDetails.id = :shiftId ");
			markers.add("shiftId");
			values.add(shift.getID_ShiftDetails());
			andStr = " and ";
			
		}
		
		if(andStr.equals(" and "))
			query += " where";
		query += hql.toString();
		List lst = factory.find(query, markers, values);		
		VitalSignsVoCollection voVitalsColl = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(lst);
		return voVitalsColl;
	}

	public VitalSignsShortVoCollection listVentChartsDates(CareContextRefVo refCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from VitalSigns vc ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		if (refCareContext != null)
		{
			hql.append(andStr + " vc.careContext.id = :rcc");
			markers.add("rcc");
			values.add(refCareContext.getID_CareContext());
			andStr = " and ";
			
			hql.append(andStr + " vc.isVentilationChartRecord = :record");
			markers.add("record");
			values.add(Boolean.TRUE);
			andStr = " and ";
		}
		
		if(andStr.equals(" and "))
			query += " where";
		query += hql.toString();
		List lst = factory.find(query, markers, values);	
		VitalSignsShortVoCollection voVitalsShortColl = VitalSignsShortVoAssembler.createVitalSignsShortVoCollectionFromVitalSigns(lst);
		return voVitalsShortColl;
	}

	public ShiftDetailsVoCollection listShiftDetails(CareContextRefVo refCareContext)
	{
		DomainFactory factory = getDomainFactory();

		String query = "from ShiftDetails as s1_1 where (s1_1.id in (select distinct vc.shiftDetails.id from VentilationChart vc) and s1_1.careContext.id = :care) ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		markers.add("care");
		values.add(refCareContext.getID_CareContext());
		
		List lst = factory.find(query, markers, values);	
		ShiftDetailsVoCollection voShiftDetailsVoCollection = ShiftDetailsVoAssembler.createShiftDetailsVoCollectionFromShiftDetails(lst).sort(SortOrder.DESCENDING);

		return voShiftDetailsVoCollection;
	}

}
