//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.core.domain.Demographics;
import ims.core.domain.PatientMerge;
import ims.core.domain.base.impl.BasePatientMergeDemographicsImpl;
import ims.core.patient.domain.objects.MergedPatient;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.GpRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.MergeRequestVo;
import ims.core.vo.MergedPatientVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientMergeVo;
import ims.core.vo.domain.MergedPatientVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.domain.PatientMergeVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class PatientMergeDemographicsImpl extends BasePatientMergeDemographicsImpl
{
	private static final long serialVersionUID = 1L;

	public PatientMergeVo getPatient(ims.core.patient.vo.PatientRefVo patRef)
	{
		if(patRef == null)
			return null;
		
		return PatientMergeVoAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patRef.getID_Patient()));
	}

	public ims.core.vo.Patient getDestinationPatient(PatientRefVo patientRef) 
	{
		if(patientRef == null)
			return null;
		
		return PatientAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class, patientRef.getID_Patient()));
	}

	public ims.core.vo.Patient savePatientAndmergeRequest(ims.core.vo.Patient patient, MergedPatientVo patientBeforeMerged, MergeRequestVo mergeRequest, ims.core.vo.Patient sourcePatient, PatientIdCollection sourceDUPIdentifiers) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if(patientBeforeMerged != null)
		{
			if(!patientBeforeMerged.isValidated())
				throw new CodingRuntimeException("MergedPatientVo is not validated.");
			
			DomainFactory factory = getDomainFactory();
			MergedPatient doMergedPatient = MergedPatientVoAssembler.extractMergedPatient(factory, patientBeforeMerged);
			factory.save(doMergedPatient);
		}
		
		PatientMerge mergeImpl = (PatientMerge) getDomainImpl(PatientMergeImpl.class);
		mergeImpl.saveMergeRequest(mergeRequest);
		
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		
		if(sourcePatient != null)
		{
			sourcePatient = impl.savePatient(sourcePatient, false);
		}
		
		ims.core.vo.Patient dest = impl.savePatient(patient, false);
		
		if(sourcePatient != null)
		{
			if(sourceDUPIdentifiers != null)
			{
				for(PatientId iden : sourceDUPIdentifiers)
				{
					if(sourcePatient.getIdentifiers() == null)
						sourcePatient.setIdentifiers(new PatientIdCollection());
					
					sourcePatient.getIdentifiers().add(iden);
				}
				
				sourcePatient.validate();
				impl.savePatient(sourcePatient, false);
			}
		}
		
		return dest;
	}

	public Boolean checkIfGPIsLinkedToSurgery(GpRefVo gp, LocationRefVo surgery) 
	{
		if(gp == null || gp.getID_Gp() == null || surgery == null || surgery.getID_Location() == null)
			return false;
		
		String query = "select gp from Gp as gp left join gp.practices as gpPractice left join gpPractice.practice as practice left join practice.locationSites as surgery where gp.id = :GP and surgery.id = :SURGERY ";
		DomainFactory factory = getDomainFactory();
		
		List<?> records = factory.find(query, new String[] {"GP", "SURGERY"}, new Object[] {gp.getID_Gp(), surgery.getID_Location()});
		
		if(records != null && records.size() > 0)
			return true;
		
		return false;
	}
}
