//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Ander Telleria using IMS Development Environment (version 1.70 build 3300.22643)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.domain.base.impl.BasePendingDischargesImpl;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.InpatientEpisodeForPendingDischargesVoAssembler;
import ims.core.vo.domain.LocMostVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.domain.DomainFactory;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class PendingDischargesImpl extends BasePendingDischargesImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.HcpLiteVoCollection listHCPs(HcpFilter filter)
	{
		HcpAdmin implHcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return implHcpAdmin.listHcpLite(filter);
	}

	public ims.core.vo.InpatientEpisodeForPendingDischargesVoCollection listPendingDischarges(ims.core.vo.PendingDischargesVo dischargeData)
	{
		if (dischargeData == null)
			throw new CodingRuntimeException("Invalid dischargeData");

		DomainFactory factory = getDomainFactory();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		StringBuffer sb = new StringBuffer();
		String andStr = "";

		String hql = "select ip from InpatientEpisode as ip "; 

		String strSearchSurname = "";
		String strSearchForename = "";

		if (dischargeData.getHospitalNumberIsNotNull())
		{
			hql += " join ip.pasEvent.patient.identifiers as ids ";
			
			String idVal = dischargeData.getHospitalNumber().trim();			
			if (dischargeData.getIDType().equals(PatIdType.NHSN))
				idVal = dischargeData.getHospitalNumber().replace(" ", "");//wdev-7305
			
			if(!ConfigFlag.DOM.CASE_SENSITIVE_PATID.getValue())
				idVal = idVal.toUpperCase();

			if (dischargeData.getIDType().equals(PatIdType.NHSN))
			{
				sb.append(andStr + " ids.value like :idnum ");
				idVal += "%";
			}
			else
				sb.append(andStr + " ids.value = :idnum");

			markers.add("idnum");
			andStr = " and ";
			sb.append(andStr + " ids.type = :idtype");
			markers.add("idtype");

			values.add(idVal);
			values.add(getDomLookup(dischargeData.getIDType()));
		}
		else
		{
			if(dischargeData.getForenameIsNotNull())
			{
				sb.append(andStr + " ip.pasEvent.patient.name.upperForename like :patFore");
				markers.add("patFore");
				andStr = " and ";
				
				strSearchForename = dischargeData.getForename().toUpperCase().trim();
				strSearchForename = strSearchForename.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchForename.length() >= 40)
				{
					strSearchForename = strSearchForename.substring(0,40);
					strSearchForename += '%';
				}
				else
				{
					strSearchForename += '%';
				}
				values.add(strSearchForename);
	
			}
	
			if(dischargeData.getSurnameIsNotNull())
			{
				sb.append(andStr + " ip.pasEvent.patient.name.upperSurname like :patSur");
				markers.add("patSur");
				andStr = " and ";
	
				strSearchSurname = dischargeData.getSurname().toUpperCase().trim();
				strSearchSurname = strSearchSurname.replaceAll("[^a-zA-Z]", "");
					
				if(strSearchSurname.length() >= 40)
				{
					strSearchSurname = strSearchSurname.substring(0,40);
					strSearchSurname += '%';
				}
				else
				{
					strSearchSurname += '%';
				}
				values.add(strSearchSurname);
			}
		}//WDEV-13065

		if (dischargeData.getEstDischargeDateIsNotNull())
		{
			Date today =  new Date();
			sb.append(andStr + " ( ip.estDischargeDate <= :estDate and ip.estDischargeDate >= :todayDate ) "); 
			markers.add("estDate");
			values.add(dischargeData.getEstDischargeDate().getDate());
			markers.add("todayDate");
			values.add(today.getDate());
			andStr = " and ";
		}

		if (dischargeData.getCurrentHospitalIsNotNull())
		{
			sb.append(andStr + " ip.pasEvent.location.parentLocation.id = :hosp");
			markers.add("hosp");
			values.add(dischargeData.getCurrentHospital().getID_Location());
			andStr = " and ";
		}
		
		if (dischargeData.getWardIsNotNull())
		{
			sb.append(andStr + " ip.pasEvent.location.id = :ward");
			markers.add("ward");
			values.add(dischargeData.getWard().getID_Location());
			andStr = " and ";
		}

		if (dischargeData.getQueryPendingIsNotNull() && dischargeData.getQueryPending())
			sb.append(andStr + " ( ip.confirmedDischargeDateTime is not null) ");
		else
			sb.append(andStr + " ( ip.estDischargeDate is not null or ip.confirmedDischargeDateTime is not null) "); 

		hql += " where ";
		hql += sb.toString();
		
		return InpatientEpisodeForPendingDischargesVoAssembler.createInpatientEpisodeForPendingDischargesVoCollectionFromInpatientEpisode(getDomainFactory().find(hql.toString(), markers, values));
	}

	
	public LocationLiteVoCollection getActiveHospitals() 
	{	
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria (Location.class,factory);
		imsc.equal("this.type.id", LocationType.HOSP.getID());
		imsc.equal("this.isActive", true);
		List hospitals=imsc.find();
		if (hospitals.size()>0)
		{
			return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(hospitals);
		}
		return null;
			
	}

	
	public LocationLiteVoCollection getWards(Integer hospital) 
	{
		DomainFactory factory = getDomainFactory();
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		LocationRefVo loc=new LocationRefVo();
		loc.setID_Location(hospital);
		LocShortMappingsVoCollection wards = impl.listActiveWardsForHospital(loc);
		LocationLiteVoCollection locations=new LocationLiteVoCollection();

		if (wards.size()>0)
		{
			for (int i=0;i<wards.size();i++)
			{
				LocationLiteVo location=new LocationLiteVo();
				location=wards.get(i);
				locations.add(location);
			}
			
		}
		return locations;
		
	}

	public LocMostVo getLocation(LocationRefVo voLocRef)
	{
		DomainFactory factory = getDomainFactory();
		return LocMostVoAssembler.create((Location) factory.getDomainObject(Location.class, voLocRef.getID_Location()));
	}
}
