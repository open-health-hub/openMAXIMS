//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41027.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.clinical.vo.SupportNetworkFamilyRefVo;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.Patient;
import ims.core.vo.PatientShort;
import ims.core.vo.SupportNetworkFamily;
import ims.core.vo.SupportNetworkFamilyCollection;
import ims.core.vo.domain.SupportNetworkFamilyAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;

public class SupportNetworkFamilyImpl extends DomainImpl implements ims.core.domain.SupportNetworkFamily, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	public ims.core.vo.SupportNetworkFamilyCollection listSupportNetworkFamily(Boolean activeOnly, ims.core.vo.PatientShort patient, Boolean isRieMode)
	{

		if(patient == null)
			throw new CodingRuntimeException("Mandatory parameter - Patient not supplied");
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Comparable> values = new ArrayList<Comparable>();
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from SupportNetworkFamily suppNet ");
		hql.append(" where suppNet.patient.id = :patient");
		names.add("patient");
		values.add(patient.getID_Patient());
		
		if (activeOnly.equals(Boolean.TRUE))
		{
			if (isRieMode == null || isRieMode) //WDEV-15479
			{
				hql.append(" and suppNet.isCurrentlyActiveFamilySupport = :isActive");
				names.add("isActive");
				values.add(Boolean.TRUE);
			}
			else
			{
				hql.append(" and ((suppNet.isCurrentlyActiveFamilySupport = :isActive and suppNet.isRIE is null ) or (suppNet.isRIE = 1))");
				names.add("isActive");
				values.add(Boolean.TRUE);
			}
		}
		
		List list = factory.find(hql.toString(), names,values);
		return(SupportNetworkFamilyAssembler.createSupportNetworkFamilyCollectionFromSupportNetworkFamily(list).sort());
		
	}

	/**
	* saves a Family Support Network
	*/
	public SupportNetworkFamily saveSupportNetworkFamily(ims.core.vo.SupportNetworkFamily voSupportNetworkFamily) throws ims.domain.exceptions.StaleObjectException
	{
		if(!voSupportNetworkFamily.isValidated())
		{
			throw new DomainRuntimeException("SupportNetworkFamily Value Object has not been validated");
		}

		DomainFactory factory = getDomainFactory();

		ims.core.clinical.domain.objects.SupportNetworkFamily doSupportNetworkFamily = SupportNetworkFamilyAssembler.extractSupportNetworkFamily(factory, voSupportNetworkFamily);

		factory.save(doSupportNetworkFamily);
			
		return SupportNetworkFamilyAssembler.create(doSupportNetworkFamily);
	}

	public HcpCollection listHcps(HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public Hcp getHcp(HcpFilter filter) 
	{
		HcpAdmin intf = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return intf.getHcp(filter);
	}

	public Patient getPatient(PatientShort voPatientShort) throws StaleObjectException
	{
		Demographics patDemoGr = (Demographics)getDomainImpl(DemographicsImpl.class);
		return patDemoGr.getPatient(voPatientShort);
	}

	public ims.core.vo.SupportNetworkFamily getSupportNetworkFamily(SupportNetworkFamilyRefVo voRef) 
	{
		if (voRef == null || voRef.getID_SupportNetworkFamily() == null)
			throw new CodingRuntimeException("Invalid SupportNetworkFamilyRefVo");

		DomainFactory factory = getDomainFactory();
		List snf = factory.find("from SupportNetworkFamily snf where snf.id = :id",new String[] {"id"},new Object[] {voRef.getID_SupportNetworkFamily()});
		if(snf != null && snf.size() > 0)
			return (SupportNetworkFamilyAssembler.create((ims.core.clinical.domain.objects.SupportNetworkFamily)snf.get(0)));
		
		return null;
	}

	public SupportNetworkFamilyCollection listSupportNetworkFamily(Boolean active, PatientShort patient)
	{
		return listSupportNetworkFamily(active, patient, false);
	}
}
