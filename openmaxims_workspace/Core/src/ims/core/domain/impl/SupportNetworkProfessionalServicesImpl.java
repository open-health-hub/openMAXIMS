//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.21 build 41021.1100)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientCoreClinicalData;
import ims.core.clinical.domain.objects.PatientNoSupportNetworkServicesInfo;
import ims.core.clinical.domain.objects.PatientNoSupportNetworkStatusInfo;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.domain.objects.SupportNetwork;
import ims.core.clinical.domain.objects.SupportNetworkProfessional;
import ims.core.clinical.domain.objects.SupportNetworkServices;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.domain.Demographics;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.domain.objects.LocationService;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.LocationServiceVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.MemberOfStaffVoCollection;
import ims.core.vo.PatientCoreClinicalDataVo;
import ims.core.vo.PatientNoSupportNetworkServicesInfoVo;
import ims.core.vo.PatientNoSupportNetworkStatusInfoVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.SupportNetworkProfessionalVo;
import ims.core.vo.SupportNetworkProfessionalVoCollection;
import ims.core.vo.SupportNetworkServicesVo;
import ims.core.vo.SupportNetworkServicesVoCollection;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.LocShortVoAssembler;
import ims.core.vo.domain.LocationServiceVoAssembler;
import ims.core.vo.domain.MemberOfStaffVoAssembler;
import ims.core.vo.domain.PatientCoreClinicalDataVoAssembler;
import ims.core.vo.domain.PatientNoSupportNetworkServicesInfoVoAssembler;
import ims.core.vo.domain.PatientNoSupportNetworkStatusInfoVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.domain.SupportNetworkProfessionalVoAssembler;
import ims.core.vo.domain.SupportNetworkServicesVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceCategoryCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class SupportNetworkProfessionalServicesImpl extends DomainImpl implements ims.core.domain.SupportNetworkProfessionalServices, ims.core.domain.SupportNetworkProfessionalDialog, ims.core.domain.SupportNetworkServicesDialog, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	public MemberOfStaffShortVoCollection listMembersOfStaff(MemberOfStaffShortVo filter, HcpDisType subType)
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		MemberOfStaffShortVo voMos = new MemberOfStaffShortVo();
		Hcp voHcp = new Hcp();
		voHcp.setHcpType(subType);
		voMos.setHcp(voHcp);
		return impl.listMembersOfStaff(filter);
	}

	public LocShortVoCollection listLocations(ServiceRefVo service)
	{
		if (service == null)
			throw new CodingRuntimeException("Service was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hql = "from LocationService ls " + " where ls.service.id = :id and ls.isActive = :active";

		List services = factory.find(hql, new String[]{"id", "active"}, new Object[]{service.getID_Service(), Boolean.TRUE});
		LocShortVoCollection locs = new LocShortVoCollection();

		for (int i = 0; i < services.size(); i++)
		{
			LocationService doLocService = (LocationService) services.get(i);
			locs.add(LocShortVoAssembler.create(doLocService.getLocation()));
		}

		return locs.sort();
	}

	public ServiceVoCollection listService(ServiceCategory serviceType)
	{
		// will be called from servicefunction when implemented in Spinal
		DomainFactory factory = getDomainFactory();
		if (serviceType == null)
			return ServiceVoAssembler.createServiceVoCollectionFromService(factory.listDomainObjects(Service.class));

		String hql = "from Service s where s.serviceCategory = :serviceType and s.isActive = :active";
		java.util.List services = factory.find(hql, new String[]{"serviceType", "active"}, new Object[]{getDomLookup(serviceType), Boolean.TRUE});
		return ServiceVoAssembler.createServiceVoCollectionFromService(services);
	}

	public ServiceVoCollection listService(ServiceCategoryCollection excludedServices)
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer("from Service s where s.isActive = :active");
		ArrayList paramNames = new ArrayList();
		ArrayList paramValues = new ArrayList();

		paramNames.add("active");
		paramValues.add(Boolean.TRUE);

		if (excludedServices != null)
		{
			int servicesSize = excludedServices.size();
			for (int i = 0; i < servicesSize; i++)
			{
				if (i == 0)
					hql.append(" and (");

				ServiceCategory serviceCategory = excludedServices.get(i);
				String serviceType = "serviceType" + Integer.toString(i);
				paramNames.add(serviceType);
				paramValues.add(new Integer(serviceCategory.getID()));

				hql.append("s.serviceCategory.id <> :" + serviceType);

				if (i == (servicesSize - 1))
					hql.append(")");
				else
					hql.append(" and ");
			}
		}
		hql.append(" order by UPPER(s.serviceName) asc  ");
		java.util.List services = factory.find(hql.toString(), paramNames, paramValues);

		return ServiceVoAssembler.createServiceVoCollectionFromService(services);
	}

	public SupportNetworkProfessionalVoCollection listSupportNetworkProfessionalByCareContext(CareContextRefVo voCareContextRef, Boolean activeOnly)
	{
		if (voCareContextRef == null)
			throw new CodingRuntimeException("Care Context was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");

		if (voCareContextRef != null)
		{
			condStr.append(" snw.careContext.id = :careContext");
			markerNames.add("careContext");
			markerValues.add(voCareContextRef.getID_CareContext());
		}

		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		// Should be only one / none Support Network in the list for the
		// CLinical Contact
		if (lst.size() > 0)
		{
			SupportNetwork snw = (SupportNetwork) lst.get(0);
			if (activeOnly.booleanValue() == false)
				return SupportNetworkProfessionalVoAssembler.createSupportNetworkProfessionalVoCollectionFromSupportNetworkProfessional(snw.getProfessional()).sort();
			else
			{
				if (snw != null)
				{
					java.util.List lst2 = factory.find(snw.getProfessional(), " where this.isCurrActiveProfSupp = :active", new String[]{"active"}, new Object[]{Boolean.TRUE});
					return SupportNetworkProfessionalVoAssembler.createSupportNetworkProfessionalVoCollectionFromSupportNetworkProfessional(lst2);
				}
				return null;
			}
		}
		else
			return null;
	}

	public SupportNetworkProfessionalVo saveSupportNetworkProfessional(SupportNetworkProfessionalVo supportNetworkProfessional, CareContextRefVo voCareContextRef) throws StaleObjectException
	{
		if (!supportNetworkProfessional.isValidated())
			throw new DomainRuntimeException("SupportNetworkProfessional Value Object has not been validated");

		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");
		condStr.append(" snw.careContext.id = :careContext");
		markerNames.add("careContext");
		markerValues.add(voCareContextRef.getID_CareContext());
		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		SupportNetwork snw = null;
		// Should be only one ClinicalContact
		if (lst.size() > 0)
			snw = (SupportNetwork) lst.get(0);
		else
		{
			snw = new SupportNetwork();
			CareContext domCareContext = (CareContext) factory.getDomainObject(CareContext.class, voCareContextRef.getID_CareContext());
			snw.setCareContext(domCareContext);
		}

		SupportNetworkProfessional doProf = SupportNetworkProfessionalVoAssembler.extractSupportNetworkProfessional(factory, supportNetworkProfessional);

		factory.save(doProf);
		snw.getProfessional().add(doProf);
		factory.save(snw);

		return SupportNetworkProfessionalVoAssembler.create(doProf);
	}

	public SupportNetworkServicesVo saveSupportNetworkService(SupportNetworkServicesVo supportNetworkService, CareContextRefVo voCareContextRef) throws StaleObjectException
	{
		if (!supportNetworkService.isValidated())
			throw new DomainRuntimeException("SupportNetworkService Value Object has not been validated");

		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");
		condStr.append(" snw.careContext.id = :careContext");
		markerNames.add("careContext");
		markerValues.add(voCareContextRef.getID_CareContext());
		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		// Should be only one ClinicalContact
		SupportNetwork snw = null;

		if (lst.size() > 0)
			snw = (SupportNetwork) lst.get(0);
		else
		{
			snw = new SupportNetwork();
			CareContext domCareContext = (CareContext) factory.getDomainObject(CareContext.class, voCareContextRef.getID_CareContext());
			snw.setCareContext(domCareContext);
		}

		SupportNetworkServices doService = SupportNetworkServicesVoAssembler.extractSupportNetworkServices(factory, supportNetworkService);

		factory.save(doService);
		snw.getServices().add(doService);
		factory.save(snw);

		return SupportNetworkServicesVoAssembler.create(doService);
	}

	

	public SupportNetworkServicesVoCollection listSupportNetworkServiceByCareContext(CareContextRefVo voCareContextRef, Boolean activeOnly)
	{
		if (voCareContextRef == null)
			throw new CodingRuntimeException("Care Context was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");

		if (voCareContextRef != null)
		{
			condStr.append(" snw.careContext.id = :careContext");
			markerNames.add("careContext");
			markerValues.add(voCareContextRef.getID_CareContext());
		}

		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		// Should be only one / none Support Network in the list for the
		// CLinical Contact
		if (lst.size() > 0)
		{
			SupportNetwork snw = (SupportNetwork) lst.get(0);

			if (activeOnly.booleanValue() == false)
				return SupportNetworkServicesVoAssembler.createSupportNetworkServicesVoCollectionFromSupportNetworkServices(snw.getServices()).sort();
			else
			{
				if (snw != null)
				{
					java.util.List lst2 = factory.find(snw.getServices(), " where this.isCurrentlyActive = :active", new String[]{"active"}, new Object[]{Boolean.TRUE});
					return SupportNetworkServicesVoAssembler.createSupportNetworkServicesVoCollectionFromSupportNetworkServices(lst2);
				}
				return null;
			}
		}
		else
			return null;
	}

	public void copyPreviousProfessionalData(SupportNetworkProfessionalVoCollection professionalVoCollection, CareContextShortVo careContextShort) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();

		CareContext domCareContext = (CareContext) factory.getDomainObject(CareContext.class, careContextShort.getID_CareContext());

		// Check to see if a Support Network Exists for this Clinical Contact,
		// if so use it...otherwise create one.
		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");
		condStr.append(" snw.careContext.id = :careContext");
		markerNames.add("careContext");
		markerValues.add(careContextShort.getID_CareContext());

		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		// Should be only one ClinicalContact
		SupportNetwork domSupportNetwork = null;

		if (lst.size() > 0)
			domSupportNetwork = (SupportNetwork) lst.get(0);
		else
		{
			domSupportNetwork = new SupportNetwork();
			domSupportNetwork.setServices(null);
		}

		// Now save the details for the SupportNetwork
		for (int i = 0; i < professionalVoCollection.size(); i++)
			professionalVoCollection.get(i).setID_SupportNetworkProfessional(null);

		domSupportNetwork.setProfessional(SupportNetworkProfessionalVoAssembler.extractSupportNetworkProfessionalSet(factory, professionalVoCollection));

		domSupportNetwork.setCareContext(domCareContext);

		try
		{
			factory.save(domSupportNetwork);
		}
		catch (DomainException e)
		{
			throw new DomainRuntimeException("Domain Exception occurred. Faile to save Support Network " + e.getMessage(), e);
		}
	}

	public void copyPreviousServiceData(SupportNetworkServicesVoCollection serviceVoCollection, CareContextShortVo careContextShort) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();

		CareContext domCareContext = (CareContext) factory.getDomainObject(CareContext.class, careContextShort.getID_CareContext());

		// Check to see if a Support Network Exists for this Clinical Contact,
		// if so use it...otherwise create one.
		String hqlQuery = " from SupportNetwork snw ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();

		condStr.append(" where ");
		condStr.append(" snw.careContext.id = :careContext");
		markerNames.add("careContext");
		markerValues.add(careContextShort.getID_CareContext());

		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);

		// Should be only one ClinicalContact
		SupportNetwork domSupportNetwork = null;

		if (lst.size() > 0)
			domSupportNetwork = (SupportNetwork) lst.get(0);
		else
		{
			domSupportNetwork = new SupportNetwork();
			domSupportNetwork.setProfessional(null);
		}

		for (int i = 0; i < serviceVoCollection.size(); i++)
			serviceVoCollection.get(i).setID_SupportNetworkServices(null);

		domSupportNetwork.setServices(SupportNetworkServicesVoAssembler.extractSupportNetworkServicesSet(factory, serviceVoCollection));

		domSupportNetwork.setCareContext(domCareContext);

		try
		{
			factory.save(domSupportNetwork);
		}
		catch (DomainException e)
		{
			throw new DomainRuntimeException("Domain Exception occurred. Failed to save Support Network " + e.getMessage(), e);
		}
	}

	public LocationServiceVo getLocationService(LocShortVo locShort, ServiceRefVo service)
	{
		if (locShort == null || service == null)
			throw new DomainRuntimeException("Failed to get LocationService record, location and/or service not supplied");

		DomainFactory factory = getDomainFactory();

		List lstLocService = factory.find("from LocationService locService where locService.location.id = :locationId and locService.service.id = :serviceId", new String[]{"locationId", "serviceId"}, new Object[]{locShort.getID_Location(), service.getID_Service()});
		LocationServiceVoCollection voCollLocServices = LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(lstLocService);

		if (voCollLocServices != null && voCollLocServices.size() > 0)
			return voCollLocServices.get(0);

		return null;
	}

	public MemberOfStaffVo getMos(MemberOfStaffShortVo mosShort)
	{
		DomainFactory factory = getDomainFactory();
		MemberOfStaff doMOS = (MemberOfStaff) factory.getDomainObject(MemberOfStaff.class, mosShort.getID_MemberOfStaff());
		return MemberOfStaffVoAssembler.create(doMOS);
	}

	/**
	 * list member of staff including their primary location
	 */
	public MemberOfStaffShortVoCollection listMembersOfStaffWithPrimaryLocations(MemberOfStaffShortVo voMemberOfStaffShortVo,HcpDisType hcpSUbtype)
	{
		
		//wdev-11144
		List mosList = null;
		if(HcpDisType.MEDICAL.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listMedic(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else if(HcpDisType.NURSING.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listNurse(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else if(HcpDisType.THERAPY.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listTherapist(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else
			mosList = listDomMos(voMemberOfStaffShortVo);
		
		MemberOfStaffVoCollection voCollMos = MemberOfStaffVoAssembler.createMemberOfStaffVoCollectionFromMemberOfStaff(mosList);
		MemberOfStaffShortVoCollection voCollReturn = new MemberOfStaffShortVoCollection();
		if (voCollMos != null)
		{
			for (int i = 0; i < voCollMos.size(); i++)
			{
				MemberOfStaffShortVo voShortMos = new MemberOfStaffShortVo();
				voShortMos = voCollMos.get(i);
				for (int j = 0; j < voCollMos.get(i).getLocations().size(); j++)
				{
					if ( voCollMos.get(i).getLocations().get(j).getIsPrimary() != null &&
						 voCollMos.get(i).getLocations().get(j).getIsPrimary().equals(Boolean.TRUE))
						voShortMos.setPrimaryLocation(voCollMos.get(i).getLocations().get(j).getLocation());
				}
				voCollReturn.add(voShortMos);
			}
		}

		return voCollReturn;
		//----------
	}
	//wdev-11144
	
	private List listMedic(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select m1_1.mos from Medic as m1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " m1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " m1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " m1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " m1_1.medicType = :hcpMedicType");
			markers.add("hcpMedicType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " m1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " m1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by m1_1.mos.name.upperSurname,m1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}
	private List listNurse(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select n1_1.mos from Nurse as n1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " n1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " n1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " n1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " n1_1.nurseType = :hcpNurseType");
			markers.add("hcpNurseType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " n1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " n1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by n1_1.mos.name.upperSurname,n1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}
	private List listTherapist(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select t1_1.mos from Therapist as t1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " t1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " t1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " t1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " t1_1.therapistType = :hcpTherapistType");
			markers.add("hcpTherapistType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " t1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " t1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by t1_1.mos.name.upperSurname,t1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}
	
	private List listDomMos(MemberOfStaffShortVo filter)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " from MemberOfStaff mos";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filter.getID_MemberOfStaffIsNotNull())
		{
			hql += (" where mos.id = " + filter.getID_MemberOfStaff());
			return factory.find(hql, markers, values);
		}
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}

		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			if (filter.getHcp().getHcpType().equals(HcpDisType.OTHER))
			{
				condStr.append(andStr + " mos.hcp.hcpType not in (:hcpType1 , :hcpType2, :hcpType3)");
				markers.add("hcpType1");
				values.add(getDomLookup(HcpDisType.MEDICAL));
				markers.add("hcpType2");
				values.add(getDomLookup(HcpDisType.NURSING));
				markers.add("hcpType3");
				values.add(getDomLookup(HcpDisType.THERAPY));
				andStr = " and ";
			}
			else
			{
				condStr.append(andStr + " mos.hcp.hcpType = :hcpType");
				markers.add("hcpType");
				values.add(getDomLookup(filter.getHcp().getHcpType()));
				andStr = " and ";
			}
		}

		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by mos.name.upperSurname,mos.name.upperForename";
		
		return factory.find(hql, markers, values);
	}
	//------------------
	public Hcp getHcp(HcpFilter filter)
	{
		HcpAdmin intf = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return intf.getHcp(filter);
	}

	public CareContextShortVoCollection listCareContexts(PatientRefVo voPatientRef)
	{
		if (voPatientRef == null)
			throw new CodingRuntimeException("Patient was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hql = " from CareContext cc where cc.episodeOfCare.careSpell.patient.id = :patient";
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		markerNames.add("patient");
		markerValues.add(voPatientRef.getID_Patient());

		java.util.List lst = factory.find(hql, markerNames, markerValues);
		return CareContextShortVoAssembler.createCareContextShortVoCollectionFromCareContext(lst);
	}

	public HcpCollection listHcps(HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public SupportNetworkProfessionalVoCollection listSupportNetworkProfessionalByPatient(Boolean activeOnly, PatientRefVo patient)
	{
		DomainFactory factory = getDomainFactory();

		String hql = "select snw.professional from SupportNetwork as snw where snw.patient.id = :idPatient";
		if (activeOnly)
			hql = " select prof from SupportNetwork as snw left join snw.professional as prof where prof.isCurrActiveProfSupp = true and snw.patient.id = :idPatient";

		List supportNetworkProf = factory.find(hql, new String[]{"idPatient"}, new Object[]{patient.getID_Patient()});
		return SupportNetworkProfessionalVoAssembler.createSupportNetworkProfessionalVoCollectionFromSupportNetworkProfessional(supportNetworkProf).sort();
	}

	public SupportNetworkProfessionalVo saveSupportNetworkProfessionaForPatient(SupportNetworkProfessionalVo voSupportNetworkProfessional, PatientRefVo patient) throws StaleObjectException
	{
		if (voSupportNetworkProfessional == null || !voSupportNetworkProfessional.isValidated())
			throw new CodingRuntimeException("SupportNetworkProfessional Value Object is null or has not been validated");

		if (patient == null)
			throw new CodingRuntimeException("Patient Value Object is null");

		DomainFactory factory = getDomainFactory();

		// get the relevant support network record for this patient and then add
		// to it and save at the support network level
		List supportNetwork = factory.find("from SupportNetwork sn where sn.patient.id = :idPatient", new String[]{"idPatient"}, new Object[]{patient.getID_Patient()});
		SupportNetwork doSupportNetwork = null;
		if (supportNetwork != null && supportNetwork.size() > 0)
			doSupportNetwork = (SupportNetwork) supportNetwork.get(0);
		else
			doSupportNetwork = new SupportNetwork();

		doSupportNetwork.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(patient));
		if (doSupportNetwork.getProfessional() == null)
			doSupportNetwork.setProfessional(new HashSet());
		SupportNetworkProfessional doSupportNetworkProf = SupportNetworkProfessionalVoAssembler.extractSupportNetworkProfessional(factory, voSupportNetworkProfessional);
		doSupportNetwork.getProfessional().add(doSupportNetworkProf);

		factory.save(doSupportNetwork);
		return SupportNetworkProfessionalVoAssembler.create(doSupportNetworkProf);
	}

	public SupportNetworkServicesVoCollection listSupportNetworkServicesByPatient(Boolean activeOnly, PatientRefVo patient)
	{
		DomainFactory factory = getDomainFactory();

		String hql = "select snw.services from SupportNetwork as snw where snw.patient.id = :idPatient";
		if (activeOnly)
			hql = "select serv from SupportNetwork as snw left join snw.services as serv where (serv.isCurrentlyActive = true and snw.patient.id = :idPatient)";

		List supportNetworkServices = factory.find(hql, new String[]{"idPatient"}, new Object[]{patient.getID_Patient()});
		return SupportNetworkServicesVoAssembler.createSupportNetworkServicesVoCollectionFromSupportNetworkServices(supportNetworkServices);

	}

	public SupportNetworkServicesVo saveSupportNetworkServicesForPatient(SupportNetworkServicesVo voSupportNetworkServices, PatientRefVo patient) throws StaleObjectException
	{
		if (voSupportNetworkServices == null || !voSupportNetworkServices.isValidated())
			throw new CodingRuntimeException("SupportNetworkServices Value Object is null or has not been validated");

		if (patient == null)
			throw new CodingRuntimeException("Patient Value Object is null");

		DomainFactory factory = getDomainFactory();

		// get the relevant support network record for this patient and then add
		// to it and save at the support network level
		List supportNetwork = factory.find("from SupportNetwork sn where sn.patient.id = :idPatient", new String[]{"idPatient"}, new Object[]{patient.getID_Patient()});
		SupportNetwork doSupportNetwork = null;
		if (supportNetwork != null && supportNetwork.size() > 0)
			doSupportNetwork = (SupportNetwork) supportNetwork.get(0);
		else
			doSupportNetwork = new SupportNetwork();

		doSupportNetwork.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(patient));
		if (doSupportNetwork.getServices() == null)
			doSupportNetwork.setServices(new HashSet());
		SupportNetworkServices doSupportNetworkService = SupportNetworkServicesVoAssembler.extractSupportNetworkServices(factory, voSupportNetworkServices);
		doSupportNetwork.getServices().add(doSupportNetworkService);

		factory.save(doSupportNetwork);
		return SupportNetworkServicesVoAssembler.create(doSupportNetworkService);
	}

	public LocShortVoCollection listLocationsForMemberOfStaff(MemberOfStaffRefVo mos)
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listLocationsForMemberOfStaff(mos);
	}

	public GpShortVo getGPDetails(PatientRefVo patientRef)
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);	
		return impl.getPatient(patientRef).getGp();
	}

	public LocSiteShortVo getGpSurgeryByPatient(PatientRefVo patient)
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return impl.getPatient(patient).getGpSurgery();
	}
	
	public PatientNoSupportNetworkServicesInfoVo getPatientNoSupportNetworkServicesInfo(PatientRefVo patientRefVo) 
	{		
		DomainFactory factory = getDomainFactory();	
		PatientNoSupportNetworkServicesInfo patientNoSupportNetworkServicesInfo = PatientNoSupportNetworkServicesInfo.getPatientNoSupportNetworkServicesInfoFromPatient(factory, patientRefVo.getID_Patient());
		return PatientNoSupportNetworkServicesInfoVoAssembler.create(patientNoSupportNetworkServicesInfo);
	}
	
	public PatientNoSupportNetworkStatusInfoVo getPatientNoSupportNetworkStatusInfo(PatientRefVo patientRefVo) 
	{	
		DomainFactory factory = getDomainFactory();
		PatientNoSupportNetworkStatusInfo patientNoSupportNetworkStatusInfo = PatientNoSupportNetworkStatusInfo.getPatientNoSupportNetworkStatusInfoFromPatient(factory, patientRefVo.getID_Patient());
		return PatientNoSupportNetworkStatusInfoVoAssembler.create(patientNoSupportNetworkStatusInfo);
	}	

	public PatientNoSupportNetworkServicesInfoVo savePatientNoSupportNetworkServicesInfo(PatientNoSupportNetworkServicesInfoVo voPatientNoSupportNetworkServicesInfo) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		DomainFactory factory = getDomainFactory();		
		PatientNoSupportNetworkServicesInfo doPatientNoSupportNetworkServicesInfo = PatientNoSupportNetworkServicesInfoVoAssembler.extractPatientNoSupportNetworkServicesInfo(factory, voPatientNoSupportNetworkServicesInfo);			
		factory.save(doPatientNoSupportNetworkServicesInfo);
		return (PatientNoSupportNetworkServicesInfoVoAssembler.create(doPatientNoSupportNetworkServicesInfo));		
	}

	public PatientNoSupportNetworkStatusInfoVo savePatientNoSupportNetworkStatusInfo(PatientNoSupportNetworkStatusInfoVo voPatientNoSupportNetworkStatusInfo) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		DomainFactory factory = getDomainFactory();		
		PatientNoSupportNetworkStatusInfo doPatientNoSupportNetworkStatusInfo = PatientNoSupportNetworkStatusInfoVoAssembler.extractPatientNoSupportNetworkStatusInfo(factory, voPatientNoSupportNetworkStatusInfo);			
		factory.save(doPatientNoSupportNetworkStatusInfo);
		return (PatientNoSupportNetworkStatusInfoVoAssembler.create(doPatientNoSupportNetworkStatusInfo));		
	}

	
}
