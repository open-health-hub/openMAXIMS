//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.66 build 3243.27592)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.WardBayConfig;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.base.impl.BaseBayLayoutConfigImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.FloorBedSpaceLayoutLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.WardBayConfigVo;
import ims.core.vo.domain.FloorBedSpaceLayoutLiteVoAssembler;
import ims.core.vo.domain.WardBayConfigVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class BayLayoutConfigImpl extends BaseBayLayoutConfigImpl
{

	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unchecked")
	public FloorBedSpaceLayoutLiteVoCollection listFloorBedLayouts() 
	{		
		DomainFactory factory = getDomainFactory();
		String hql = " from FloorBedSpaceLayout fl";
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql += " where fl.status.id = :status";
		markers.add("status");
		values.add(PreActiveActiveInactiveStatus.ACTIVE.getID());	
		
		return FloorBedSpaceLayoutLiteVoAssembler.createFloorBedSpaceLayoutLiteVoCollectionFromFloorBedSpaceLayout(factory.find(hql, markers, values));		
	}

//	public void saveBayLayout(BayLayoutConfigListVoCollection coll)
//			throws StaleObjectException 
//	{		
//		if(coll == null || coll.size() == 0)
//			return;
//		
//		DomainFactory factory = getDomainFactory();
//		
//		for (int i = 0; i < coll.size(); i++) 
//		{
//			BayLayoutConfigListVo vo = coll.get(i);
//			BayConfigVo bay = vo.getBayConfigVo();
//			LocationLiteVo ward = vo.getLocationLiteVo();
//			
//			FloorBedSpaceLayoutVo floorBedSpaceLayout = getFloorBedSpaceLayout(((BayConfigVo) bay).getFloorBedSpaceLayout());
//			BedSpaceVoCollection bedSpaceColl = floorBedSpaceLayout.getBedSpaces();
//			for (int j = 0; j < bedSpaceColl.size(); j++) 
//			{
//				BedSpaceStateLiteVo bedSpaceState = getBedSpaceState(bedSpaceColl.get(j));
//				bedSpaceState.setWard((LocationLiteVo) ward);
//				BedSpaceState dom = BedSpaceStateLiteVoAssembler.extractBedSpaceState(factory, bedSpaceState);
//				factory.save(dom);
//			}			
//			
//			factory.save(BayConfigVoAssembler.extractBayConfig(factory, (BayConfigVo) bay));
//		}		
//	}

	public LocationLiteVoCollection listActiveHospitalsLite()
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public LocationLiteVoCollection listActiveWardsForHospitalLite(LocationRefVo hospital)
	{
		BedInfoDialog impl = (BedInfoDialog) getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveWardsForHospitalLite(hospital);
	}

	public WardBayConfigVo getWardBayConfigByWard(LocationRefVo ward)
	{
		if (ward == null || ward.getID_Location() == null)
			throw new CodingRuntimeException("ward is null or id not provided in method getWardBayConfigByWard");
		
		DomainFactory factory = getDomainFactory();
		List lstWbc = factory.find("from WardBayConfig wbc where wbc.ward.id = '" + ward.getID_Location() + "'");
		if(lstWbc != null && lstWbc.size() == 1)
			return WardBayConfigVoAssembler.create((WardBayConfig) lstWbc.get(0));
		
		return null;
	}
}
	
