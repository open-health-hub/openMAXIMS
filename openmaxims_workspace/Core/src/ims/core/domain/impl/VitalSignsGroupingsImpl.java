//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Callum Wells using IMS Development Environment (version 1.45 build 2419.18020)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import java.util.List;

import ims.core.configuration.domain.objects.VitalSignMonitoringGroup;
import ims.core.configuration.vo.VitalSignMonitoringGroupRefVo;
import ims.core.domain.base.impl.BaseVitalSignsGroupingsImpl;
import ims.core.vo.VitalSignMonitoringGroupVo;
import ims.core.vo.VitalSignMonitoringGroupVoCollection;
import ims.core.vo.domain.VitalSignMonitoringGroupVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;

public class VitalSignsGroupingsImpl extends BaseVitalSignsGroupingsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* Get the vitalSignMonitoringGroupVo
	*/
	public ims.core.vo.VitalSignMonitoringGroupVo getVitalSignMonitoringGroupVo(VitalSignMonitoringGroupRefVo vitalSignMonitoringGroupRefVo)
	{
		if (vitalSignMonitoringGroupRefVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		VitalSignMonitoringGroup domVitalSignMonitoringGroup = (VitalSignMonitoringGroup)factory.getDomainObject(VitalSignMonitoringGroup.class,vitalSignMonitoringGroupRefVo.getID_VitalSignMonitoringGroup());
		VitalSignMonitoringGroupVo vitalSignMonitoringGroupVo = VitalSignMonitoringGroupVoAssembler.create(domVitalSignMonitoringGroup); 
		
		return vitalSignMonitoringGroupVo;
	}

	public ims.core.vo.VitalSignMonitoringGroupVo saveVitalSignMonitoringGroupVo(ims.core.vo.VitalSignMonitoringGroupVo vitalSignMonitoringGroupVo) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		VitalSignMonitoringGroup bo = VitalSignMonitoringGroupVoAssembler.extractVitalSignMonitoringGroup(factory, vitalSignMonitoringGroupVo);
		
		factory.save(bo);

		return VitalSignMonitoringGroupVoAssembler.create(bo);
	}

	public VitalSignMonitoringGroupVoCollection listVitalSignMonitoringGroups() throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		List vsMonitoringGroupsList  = factory.find(" from VitalSignMonitoringGroup");

		return VitalSignMonitoringGroupVoAssembler.createVitalSignMonitoringGroupVoCollectionFromVitalSignMonitoringGroup(vsMonitoringGroupsList);
	}
}
