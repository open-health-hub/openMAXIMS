//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3434.21163)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.core.domain.impl;

import ims.core.admin.pas.domain.objects.AllocatedWardHistory;
import ims.core.admin.pas.domain.objects.BedSpaceState;
import ims.core.admin.pas.domain.objects.PendingEmergencyAdmission;
import ims.core.admin.pas.vo.PendingEmergencyAdmissionRefVo;
import ims.core.configuration.domain.objects.AppUser;
import ims.core.configuration.vo.AppUserRefVo;
import ims.core.domain.BedInfoDialog;
import ims.core.domain.base.impl.BaseAssignADTWardAndSpecialtyDialogImpl;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.PendingEmergencyAdmissionLiteVo;
import ims.core.vo.TrackingForADTWardAndSpecialtyDialogVo;
import ims.core.vo.TrackingForADTWardAndSpecialtyDialogVoCollection;
import ims.core.vo.domain.PendingEmergencyAdmissionLiteVoAssembler;
import ims.core.vo.domain.TrackingForADTWardAndSpecialtyDialogVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.objects.BedAvailability;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.vo.BedAvailabilityForTrackVo;
import ims.emergency.vo.domain.BedAvailabilityForTrackVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

import java.util.Date;
import java.util.List;

public class AssignADTWardAndSpecialtyDialogImpl extends BaseAssignADTWardAndSpecialtyDialogImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listActiveHospitals
	*/
	public ims.core.vo.LocationLiteVoCollection listActiveHospitals()
	{
		BedInfoDialog impl = (BedInfoDialog)getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveHospitalsLite();
	}

	public ims.core.vo.LocationLiteVoCollection listWards(ims.core.resource.place.vo.LocationRefVo hospital)
	{
		BedInfoDialog impl = (BedInfoDialog)getDomainImpl(BedInfoDialogImpl.class);
		return impl.listActiveWardsForHospitalLite(hospital);
	}

	/**
	* savePendingEmergency
	*/
	public void savePendingEmergency(ims.core.vo.PendingEmergencyAdmissionLiteVo emergency, Boolean hasWardChanged,TrackingForADTWardAndSpecialtyDialogVo tracking) throws ims.domain.exceptions.StaleObjectException
	{
		if (hasWardChanged == null)
			throw new CodingRuntimeException("hasWardChanged cannot be null in method savePendingEmergency");
		if (emergency == null)
			throw new CodingRuntimeException("emergency is null in method savePendingEmergency");
		if (!emergency.isValidated())
			throw new CodingRuntimeException("emergency has not been validated in method savePendingEmergency");

		//WDEV-10421
		DomainFactory factory = getDomainFactory();
		PendingEmergencyAdmission doPendingEmergency = PendingEmergencyAdmissionLiteVoAssembler.extractPendingEmergencyAdmission(factory, emergency);
		if(hasWardChanged)
		{
			AllocatedWardHistory doAllocWardHist = new AllocatedWardHistory();
			doAllocWardHist.setAllocatedWard(doPendingEmergency.getAllocatedWard());
			doAllocWardHist.setAllocatedWardDateTime(new Date());		
			if(getLoggedInUser() != null)
				doAllocWardHist.setAllocatingUser((AppUser) getDomainFactory().getDomainObject((AppUserRefVo) getLoggedInUser()));
		
			doPendingEmergency.getAllocatedWardHistory().add(doAllocWardHist);
		}		
		
		factory.save(doPendingEmergency);
		
		//wdev-16866
		if( tracking != null )
		{
			Tracking doTracking =  TrackingForADTWardAndSpecialtyDialogVoAssembler.extractTracking(factory, tracking);
			factory.save(doTracking);		
		}
		//------------
	}

	//wdev-16866
	public TrackingForADTWardAndSpecialtyDialogVo getTracking(PendingEmergencyAdmissionRefVo pendingemergencyadmissionRef) 
	{
		if (pendingemergencyadmissionRef == null || pendingemergencyadmissionRef.getID_PendingEmergencyAdmission() == null)
			throw new CodingRuntimeException("pendingemergencyadmissionRef is null or id not provided ");
		
		String hql = "select t1_1 from Tracking as t1_1 left join t1_1.associatedPendingEmergencyAdmission as p1_1 where p1_1.id = " + pendingemergencyadmissionRef.getID_PendingEmergencyAdmission() + "order by t1_1.systemInformation.creationDateTime desc ";
		List lstTracking = getDomainFactory().find(hql);
		if( lstTracking != null && lstTracking.size() > 0)
		{
			TrackingForADTWardAndSpecialtyDialogVoCollection tempColl = TrackingForADTWardAndSpecialtyDialogVoAssembler.createTrackingForADTWardAndSpecialtyDialogVoCollectionFromTracking(lstTracking);
			if( tempColl != null && tempColl.size() > 0)
				return tempColl.get(0);
		}
		
		return null;
		
		
		
	}

	
}
