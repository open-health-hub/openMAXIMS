//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3509.17128)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.core.domain.impl;

import ims.clinical.vo.InpatientEpisodeForVTERiskAsessmentVo;
import ims.clinical.vo.PIDBarOncologyManualVo;
import ims.clinical.vo.PIDBarOncologyManualVoCollection;
import ims.clinical.vo.domain.InpatientEpisodeForVTERiskAsessmentVoAssembler;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.domain.Alerts;
import ims.core.domain.WardDataView;
import ims.core.domain.WardView;
import ims.core.layout.domain.objects.BedSpace;
import ims.core.patient.domain.objects.Patient;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.InpatientEpisodeLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.WardDataViewVo;
import ims.core.vo.WardDataViewVoCollection;
import ims.core.vo.domain.BedSpaceVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PasEventADTVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.BedStatus;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.dto.DTODomainImplementation;
import ims.dto.Result;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;

import java.util.Iterator;
import java.util.List;

public class WardDataViewImpl extends DTODomainImplementation implements WardDataView
{

	private static final long serialVersionUID = 1L;

	/**
	* listWardsForCurrentLocation
	*/
	public ims.core.vo.LocationLiteVoCollection listWardsForCurrentLocation(ims.framework.interfaces.ILocation parentLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listWardsForCurrentLocation(parentLocation);
	}

	/**
	* getBedSpaceState
	*/
	public ims.core.vo.BedSpaceStateLiteVo getBedSpaceState(ims.core.layout.vo.BedSpaceRefVo bed)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getBedSpaceState(bed);	
	}

	/**
	* listInpatientEpisodeByWard
	*/
	public ims.core.vo.InpatientEpisodeLiteVoCollection listInpatientEpisodeByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listInpatientEpisodeByWard(ward);	
	}

	/**
	* listPendingElectiveAdmission
	*/
	public ims.core.vo.PendingElectiveAdmissionAdmitVoCollection listPendingElectiveAdmission(ims.core.resource.place.vo.LocationRefVo voLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingElectiveAdmission(voLocation);	
	}

	/**
	* listEmergencyAdmission
	*/
	public ims.core.vo.PendingEmergencyAdmissionAdmitVoCollection listEmergencyAdmission(ims.core.resource.place.vo.LocationRefVo location)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listEmergencyAdmission(location);	
	}

	/**
	* listPendingTransfersInByWard
	*/
	public ims.core.vo.PendingTransfersLiteVoCollection listPendingTransfersInByWard(ims.core.resource.place.vo.LocationRefVo destWard)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingTransfersInByWard(destWard);	
	}

	/**
	* listPendingTransfersOutByWard
	*/
	public ims.core.vo.PendingTransfersLiteVoCollection listPendingTransfersOutByWard(ims.core.resource.place.vo.LocationRefVo currentLocation)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listPendingTransfersOutByWard(currentLocation);	
	}

	public ims.core.vo.LocationLiteVoCollection listActiveHospitalsLite()
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listActiveHospitalsLite();	
	}

	/**
	* getWardBayConfig
	*/
	public ims.core.vo.WardBayConfigVo getWardBayConfigByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getWardBayConfigByWard(ward);
	}

	/**
	* listWaitingAreaPatientsByWard
	*/
	public ims.core.vo.InpatientEpisodeLiteVoCollection listWaitingAreaPatientsByWard(ims.core.resource.place.vo.LocationRefVo ward)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listWaitingAreaPatientsByWard(ward);
	}

	public ims.core.vo.LocMostVo getLocation(ims.core.resource.place.vo.LocationRefVo voLocRef)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getLocation(voLocRef);
	}

	/**
	* countInfants (WDEV-7722)
	*/
	public int countInfants(ims.core.patient.vo.PatientRefVo patient)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.countInfants(patient);
	}

	/**
	 * A list of all the occupied beds and associated inpatients across a ward
	 */
	public WardDataViewVoCollection listInpatientsInBedsByWard(LocationRefVo ward)
	{
		if (ward == null || ward.getID_Location() == null)
			throw new CodingRuntimeException("ward is null or id not provided in method listInpatientsInBedsByWard");
		
		WardDataViewVoCollection voCollWdv = new WardDataViewVoCollection();

		String hql = "select bed, pat, bay, pe,inpatEpis from BedSpaceState as bedSpaceState left join bedSpaceState.bedSpace as bed left join bedSpaceState.currentBedStatus as currentStatus left join bedSpaceState.inpatientEpisode as inpatEpis left join inpatEpis.pasEvent as pe left join pe.patient as pat left join bedSpaceState.bay as bay " +
				"where (bedSpaceState.ward.id = :wardId and bedSpaceState.inpatientEpisode is not null  and currentStatus.bedStatus = :occupied)";
		
		List wdvList = getDomainFactory().find(hql, new String[]{"wardId","occupied"}, new Object[]{ward.getID_Location(), getDomLookup(BedStatus.OCCUPIED)});
		if(wdvList != null && wdvList.size() > 0)
		{
			Iterator it = wdvList.iterator();
			while(it.hasNext())
			{
				Object[] item = (Object[])it.next();
				BedSpace doBed = (BedSpace) item[0];
				Patient doPat = (Patient) item[1];
				Location doBay = (Location) item[2];
				PASEvent doPe = (PASEvent) item[3];
				InpatientEpisode doInpat = (InpatientEpisode) item[4]; //wdev-14784
				
				WardDataViewVo voWardDv = new WardDataViewVo(); 
				voWardDv.setBed(BedSpaceVoAssembler.create(doBed));
				voWardDv.setBay(LocationLiteVoAssembler.create(doBay));
				voWardDv.setPatient(PatientShortAssembler.create(doPat));
				voWardDv.getPatient().setHasAlerts(doPat.getPatientAlerts() != null && doPat.getPatientAlerts().size() > 0 ? true : false);
				voWardDv.setInpatEpisode(InpatientEpisodeForVTERiskAsessmentVoAssembler.create(doInpat)); //wdev-14784
				//wdev-11083
				
				Iterator<ims.core.clinical.domain.objects.PatientAlert> patAlert = doPat.getPatientAlerts().iterator();
				
				boolean flagHasAlerts = false;
				while(patAlert != null && patAlert.hasNext())
				{					
					if(Boolean.TRUE.equals(patAlert.next().isIsCurrentlyActiveAlert()))
					{
						flagHasAlerts = true;
						break;
			
					}
				}
				voWardDv.getPatient().setHasActiveAlerts(flagHasAlerts);
				//end wdev-11083
				voWardDv.setPasEvent(PasEventADTVoAssembler.create(doPe));
				
				voCollWdv.add(voWardDv);
			}
		}
		
		voCollWdv.sort();
		return voCollWdv;
	}

	public CareContextShortVo getCareContextForPasEvent(PASEventRefVo pasEvent)
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.getCareContextForPasEvent(pasEvent);
	}

	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;
		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	public ims.dto.client.Patient getCCODTOPatient(String pkey) throws DomainInterfaceException 
	{
		if(pkey == null)
			throw new DomainRuntimeException("Cannot get Patient for null pkey");
		
		ims.dto.client.Patient patient = (ims.dto.client.Patient)getDTOInstance(ims.dto.client.Patient.class);
		patient.Filter.clear();
		patient.Filter.Pkey = pkey;
		
		Result result = patient.get();
		if (result != null)
		{
			if(result.getId() == -2)
				throw new DomainInterfaceException("Error Getting Patient Details for pkey = " + pkey);

			throw new DomainInterfaceException(result.getMessage());
		}

		if (patient.DataCollection.count()!= 1)
			throw new DomainInterfaceException("Failed to get patient record.");
		
		return patient;
	}

	public InpatientEpisodeLiteVoCollection listHomeLeaveByWard(LocationRefVo ward) 
	{
		WardView impl = (WardView) getDomainImpl(WardViewImpl.class);
		return impl.listHomeLeaveByWard(ward);
	}

	//WDEV-14476
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		Alerts impl = (Alerts) getDomainImpl(AlertsImpl.class);
		return impl.getPIDDiagnosisInfo(careContextRefVo, episodeRefVo);
	}

	//WDEV-15908
	public LocationLiteVo getCurrentHospital(ILocation location) 
	{
		if(location == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID()));
		
		if(currentHospital instanceof LocSite)
			return LocationLiteVoAssembler.create((Location) currentHospital);
		
		return null;
	}
	
	//WDEV-15908
	private Location getHospital(Location doLocation)
	{
		if(doLocation == null)
			return null;
		
		if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;
	
		while(doLocation.getParentLocation() != null) 
		{
			doLocation = doLocation.getParentLocation();
			if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}
		
		return null;
	}
}
