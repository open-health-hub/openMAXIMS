// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.vo.ElectiveListConfigurationVo;
import ims.admin.vo.ElectiveListConfigurationVoCollection;
import ims.admin.vo.domain.ElectiveListConfigurationVoAssembler;
import ims.RefMan.domain.base.impl.BaseSelectElectiveListConfigurationImpl;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ElectiveListConfigurationLiteVoCollection;
import ims.RefMan.vo.PatientElectiveListLiteVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.domain.ElectiveListConfigurationLiteVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListLiteVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListVoAssembler;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ProcedureRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.ElectiveListConfiguration;
import ims.core.configuration.vo.ElectiveListConfigurationRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class SelectElectiveListConfigurationImpl extends BaseSelectElectiveListConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ElectiveListConfigurationVoCollection listWaitingConfiguration(ServiceRefVo serviceRef)
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String andStr = "";
		
		StringBuffer hql = new StringBuffer("select wLC from ElectiveListConfiguration as wLC  ");
		
		if (serviceRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" wLC.service.id=:Service");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
			andStr = " and ";
		}

		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}
		
		List<?> list = factory.find(hql.toString() + hqlConditions.toString() + " order by UPPER(wLC.waitingListName) asc ",markers, values);

		if (list == null || list.size() == 0)
			return null;

		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
	}

	public ElectiveListConfigurationVoCollection getWaitingListConfigForPatient(PatientRefVo patientRef)
	{
		if (patientRef==null || patientRef.getID_Patient()==null)
		{
			throw new CodingRuntimeException("PatientRefVo should not be null");
		}
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
	
		
		StringBuffer hql = new StringBuffer("select wlc from PatientElectiveList as pel left join pel.electiveList as wlc where pel.patient.id = :PatID  ");
		markers.add("PatID");
		values.add(patientRef.getID_Patient());
		
		List <?> list = getDomainFactory().find(hql.toString(),markers,values);
		
		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
		
	}

	public PatientElectiveListLiteVoCollection listPatientElectiveList(PatientRefVo patientRef,ServiceRefVo serviceRef, ProcedureRefVo procedureRef, String listIdHcp, CatsReferralRefVo catsRef) //WDEV-18397
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer hqlConditions = new StringBuffer();
		String andStr = "";

		StringBuffer hql = new StringBuffer("select pEL from PatientElectiveList as pEL left join pEL.primaryProcedure as primProc left join pEL.electiveList as eL left join eL.service as service left join eL.hCPs as listOwners left join pEL.electiveListStatus as els "); //WDEV-18397
		
		if (patientRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" pEL.patient.id = :PatID ");
			markers.add("PatID");
			values.add(patientRef.getID_Patient());
			andStr = " and ";
		}
		
		//WDEV-18397
		
		if (catsRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" pEL.referral.id = :CatsID and els.electiveListStatus.id <> :Status ");
			markers.add("CatsID");
			values.add(catsRef.getID_CatsReferral());
			
			markers.add("Status");
			values.add(WaitingListStatus.REMOVED.getID());
			andStr = " and ";		
		}
		
		if (serviceRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" service.id=:Service ");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
			andStr = " and ";
		}
		
		if (procedureRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" primProc.id=:Procedure ");
			markers.add("Procedure");
			values.add(procedureRef.getID_Procedure());
			andStr = " and ";
		}
		
		if (listIdHcp!=null && listIdHcp.length()>0)
		{	
			hqlConditions.append(andStr);
			hqlConditions.append(" ( listOwners.hCP.id in "+ listIdHcp +" ) ");
			andStr = " and ";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}

		List <?> list = getDomainFactory().find(hql.toString() + hqlConditions.toString(),markers,values);
	
		if (list == null || list.size() == 0)
			return null;
		
		return PatientElectiveListLiteVoAssembler.createPatientElectiveListLiteVoCollectionFromPatientElectiveList(list);
	}

	public PatientElectiveListLiteVoCollection listOtherPatientElectiveLists(PatientRefVo patientRef, ServiceRefVo serviceRef, Specialty specialty, String listIdHcp, CatsReferralRefVo catsRef)
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer hqlConditions = new StringBuffer();
		StringBuffer hqlCond1 = new StringBuffer();;
		
		/*
		StringBuffer hql = new StringBuffer("select pEL from PatientElectiveList as pEL left join pEL.primaryProcedure as primProc left join pEL.electiveList as eL left join eL.service as service left join eL.hCPs as listOwners " +
				" where pEL.patient.id = :PatID and ((service.id=:Service and ( listOwners.hCP.id in "+ listIdHcp +" )  )" +
						
				" or ( service.id=:Service and listOwners is null)" +
						" or ( ( listOwners.hCP.id in "+ listIdHcp +" )  and service.specialty.id=:SpecialtyID ) " +
						" or (  listOwners.hCP.id is null  and service.specialty.id=:SpecialtyID ) " +
					")");
		*/
		StringBuffer hql = new StringBuffer("select pEL from PatientElectiveList as pEL left join pEL.primaryProcedure as primProc left join pEL.electiveList as eL left join eL.service as service left join eL.hCPs as listOwners left join pEL.electiveListStatus as els where pEL.patient.id = :PatID and pEL.referral.id = :CatsID and els.electiveListStatus.id <> :Status  "); 
		String andStr = "";
		
		markers.add("PatID");
		values.add(patientRef.getID_Patient());
		
		markers.add("CatsID");
		values.add(catsRef.getID_CatsReferral());
		
		markers.add("Status");
		values.add(WaitingListStatus.REMOVED.getID());
		
		
		
		if (serviceRef!=null)
		{
			hqlCond1.append(" service.id=:Service ");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
			andStr = " and ";
		}
		
		if (listIdHcp!=null)
		{
			hqlCond1.append(andStr);
			hqlCond1.append("listOwners.hCP.id in "+ listIdHcp ); 
		}
	
		StringBuffer hqlCond2= new StringBuffer();
		andStr="";
		if (serviceRef!=null)
		{
			hqlCond2.append(" service.id=:Service and listOwners is null ");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
		}
		else
		{
			hqlCond2.append(" listOwners is null ");
		}
		
		StringBuffer hqlCond3= new StringBuffer();
		andStr="";
		if (specialty!=null)
		{
			hqlCond3.append(" service.specialty.id=:SpecialtyID ");
			markers.add("SpecialtyID");
			values.add(specialty.getID());
			andStr = " and ";
		}
		
		if (listIdHcp!=null)
		{
			hqlCond3.append(andStr);
			hqlCond3.append("listOwners.hCP.id in "+ listIdHcp ); 
		}
		

		StringBuffer hqlCond4= new StringBuffer();
		andStr="";
	
		if (specialty!=null)
		{
			hqlCond4.append(" service.specialty.id=:SpecialtyID ");
			markers.add("SpecialtyID");
			values.add(specialty.getID());
			andStr = " and ";
		}
		
		if (listIdHcp!=null)
		{
			hqlCond4.append(andStr);
			hqlCond4.append(" listOwners is null "); 
		}
	
		String orStr = "";
		if (hqlCond1.length()>0)
		{
			hqlCond1.insert(0, " ( ");
			hqlCond1.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond1);
			orStr=" OR ";
		}
		
		if (hqlCond2.length()>0)
		{
			hqlCond2.insert(0, " ( ");
			hqlCond2.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond2);
			orStr=" OR ";
		}
		
		if (hqlCond3.length()>0)
		{
			hqlCond3.insert(0, " ( ");
			hqlCond3.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond3);
			orStr=" OR ";
		}
		
		if (hqlCond4.length()>0)
		{
			hqlCond4.insert(0, " ( ");
			hqlCond4.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond4);
			orStr=" OR ";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " and (");
			hqlConditions.append(" ) ");
			hql.append(hqlConditions);
			
		}
		
		List <?> list = getDomainFactory().find(hql.toString(),markers,values);
	
		return PatientElectiveListLiteVoAssembler.createPatientElectiveListLiteVoCollectionFromPatientElectiveList(list);
	}

	public ServiceLiteVo getServiceLite(ServiceRefVo serviceRef)
	{
		if (serviceRef == null || serviceRef.getID_Service()==null)
		{
			throw new CodingRuntimeException("Cannot get Service for null ID");
		}
		
		DomainFactory factory = getDomainFactory();
		Service domService=(Service) factory.getDomainObject(Service.class, serviceRef.getID_Service());
		
		return ServiceLiteVoAssembler.create(domService);
	}

	public ElectiveListConfigurationLiteVoCollection listElectiveListConfiguration(ServiceRefVo serviceRef, LocationRefVo locationRef, String listIdHcp, String electiveListName)
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String andStr = "";
		
		StringBuffer hql = new StringBuffer("select eLC from ElectiveListConfiguration as eLC left join eLC.hCPs as hcps left join hcps.hCP as hcp  left join eLC.listLocations as locations left join locations.listLocation as location ");
		
		if (serviceRef!=null) 
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" eLC.service.id=:Service");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
			andStr = " and ";
		}

		if (locationRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append("( location.id=:LocID or locations is null )");
			markers.add("LocID");
			values.add(locationRef.getID_Location());
			andStr = " and ";
		}
		
		if (listIdHcp!=null && listIdHcp.length()>0)
		{	
			hqlConditions.append(andStr);
			hqlConditions.append("  hcp.id in "+ listIdHcp +" and hcps.defaultForHCP=1");
			//and listOwners.defaultForHCP=1
			//markers.add("ID_List");
			//values.add(listIdHcp);
			andStr = " and ";
		}
		
		if(electiveListName != null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" UPPER(eLC.waitingListName) like :WaitingListName ");
			markers.add("WaitingListName");
			values.add(electiveListName.toUpperCase()+"%");
			andStr = " and ";
		}
		
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}
		
		List<?> list = factory.find(hql.toString() + hqlConditions.toString() + " order by UPPER(eLC.waitingListName) asc ",markers, values);

		if (list == null || list.size() == 0)
			return null;

		return ElectiveListConfigurationLiteVoAssembler.createElectiveListConfigurationLiteVoCollectionFromElectiveListConfiguration(list);
	}

	public ElectiveListConfigurationLiteVoCollection listOtherElectiveListConfiguration(ServiceRefVo serviceRef, Specialty specialty, String listIdHcp, String electiveListName) //WDEV-13896
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer hqlConditions = new StringBuffer();
		
		StringBuffer hql = new StringBuffer("select eL from ElectiveListConfiguration as eL left join eL.service as service left join eL.hCPs as listOwners "); 
		String andStr = "";
		
	
		StringBuffer hqlCond2= new StringBuffer();
		andStr="";
		if (serviceRef!=null)
		{
			hqlCond2.append(" service.id=:Service and listOwners is null ");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
		}
		else
		{
			hqlCond2.append(" listOwners is null ");
		}
		
		StringBuffer hqlCond3= new StringBuffer();
		andStr="";
		if (specialty!=null)
		{
			hqlCond3.append(" service.specialty.id=:SpecialtyID ");
			markers.add("SpecialtyID");
			values.add(specialty.getID());
			andStr = " and ";
		}
		
		if (listIdHcp!=null)
		{
			hqlCond3.append(andStr);
			hqlCond3.append("listOwners.hCP.id in "+ listIdHcp ); 
		}
		

		StringBuffer hqlCond4= new StringBuffer();
		andStr="";
	
		if (specialty!=null)
		{
			hqlCond4.append(" service.specialty.id=:SpecialtyID ");
			markers.add("SpecialtyID");
			values.add(specialty.getID());
			andStr = " and ";
		}
		
		if (listIdHcp!=null)
		{
			hqlCond4.append(andStr);
			hqlCond4.append(" listOwners is null "); 
		}
	
		String orStr = "";
		
		if (hqlCond2.length()>0)
		{
			hqlCond2.insert(0, " ( ");
			hqlCond2.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond2);
			orStr=" OR ";
		}
		
		if (hqlCond3.length()>0)
		{
			hqlCond3.insert(0, " ( ");
			hqlCond3.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond3);
			orStr=" OR ";
		}
		
		if (hqlCond4.length()>0)
		{
			hqlCond4.insert(0, " ( ");
			hqlCond4.append(" ) ");
			hqlConditions.append(orStr);
			hqlConditions.append(hqlCond4);
			orStr=" OR ";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}
		
		if(electiveListName != null)
		{
			if(hqlConditions.length() > 0)
			{
				hqlConditions.append(" and ");
			}
			else
			{
				hqlConditions.append(" where ");
			}
			
			hqlConditions.append(" UPPER(eL.waitingListName) like :WaitingListName ");
			markers.add("WaitingListName");
			values.add(electiveListName.toUpperCase()+"%");
			andStr = " and ";
		}
		
		List <?> list = getDomainFactory().find(hql.toString()+hqlConditions.toString(),markers,values);
	
		if (list == null || list.size() == 0)
			return null;
		
		return ElectiveListConfigurationLiteVoAssembler.createElectiveListConfigurationLiteVoCollectionFromElectiveListConfiguration(list);
	}

	public PatientElectiveListVo getPatientElectiveList(PatientElectiveListRefVo patientElectiveListRef)
	{
		if (patientElectiveListRef==null ||patientElectiveListRef.getID_PatientElectiveList()==null)
		{
			throw new CodingRuntimeException("Cannot get PatientElectiveListVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		PatientElectiveList domainPatientElectiveList = (PatientElectiveList) factory.getDomainObject(PatientElectiveList.class,patientElectiveListRef.getID_PatientElectiveList());

		return PatientElectiveListVoAssembler.create(domainPatientElectiveList);
	}

	public ElectiveListConfigurationVo getElectiveListConfiguration(ElectiveListConfigurationRefVo electiveListConfigRef)
	{
		if (electiveListConfigRef==null ||electiveListConfigRef.getID_ElectiveListConfiguration()==null)
		{
			throw new CodingRuntimeException("Cannot get ElectiveListConfigurationVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		ElectiveListConfiguration domainWaitListConfig = (ElectiveListConfiguration) factory.getDomainObject(ElectiveListConfiguration.class,electiveListConfigRef.getID_ElectiveListConfiguration());

		return ElectiveListConfigurationVoAssembler.create(domainWaitListConfig);
	}

	//WDEV-13896
	public PatientElectiveListLiteVoCollection listOtherPatientElectiveListsByServiceAndListOwners(CatsReferralRefVo catsRef, ServiceRefVo serviceRef, String listIdHcp)
	{
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		StringBuffer hqlConditions = new StringBuffer();
		String andStr = " and ";

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select pEL from PatientElectiveList as pEL left join pEL.electiveList as eL left join eL.service as service left join eL.hCPs as listOwners left join pEL.electiveListStatus as pELStatus left join pELStatus.electiveListStatus as status ");
		
		if (catsRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" pEL.referral.id = :CatsID ");
			markers.add("CatsID");
			values.add(catsRef.getID_CatsReferral());
			andStr = " and ";		
		}
		
		if (serviceRef!=null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" service.id=:Service ");
			markers.add("Service");
			values.add(serviceRef.getID_Service());
			andStr = " and ";
		}
		
		if (listIdHcp!=null && listIdHcp.length()>0)
		{	
			hqlConditions.append(andStr);
			hqlConditions.append(" ( listOwners.hCP.id in "+ listIdHcp +" ) ");
			andStr = " and ";
		}
		
		
		hqlConditions.insert(0, " where ( status.id not in (" + WaitingListStatus.REMOVED.getID() + ")");
		hqlConditions.append(" ) ");

		List <?> list = factory.find(hql.toString() + hqlConditions.toString(),markers,values);
		
		return PatientElectiveListLiteVoAssembler.createPatientElectiveListLiteVoCollectionFromPatientElectiveList(list);
	}

}
