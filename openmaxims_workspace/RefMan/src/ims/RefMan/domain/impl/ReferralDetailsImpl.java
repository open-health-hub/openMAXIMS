// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3163.31063)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseReferralDetailsImpl;
import ims.RefMan.domain.objects.CATSReferralStatus;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.OnwardReferralFromTriage;
import ims.RefMan.domain.objects.PresentationReferralSummary;
import ims.RefMan.domain.objects.WorkAllocation;
import ims.RefMan.vo.CatsReferralDetailsVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.OnwardReferralFromTriageVo;
import ims.RefMan.vo.WorkAllocationVo;
import ims.RefMan.vo.WorkAllocationVoCollection;
import ims.RefMan.vo.domain.CatsReferralFlaggedForReviewVoAssembler;
import ims.RefMan.vo.domain.OnwardReferralFromTriageVoAssembler;
import ims.RefMan.vo.domain.PresentationReferralSummaryVoAssembler;
import ims.RefMan.vo.domain.ReferralAppointmentDetailsVoAssembler;
import ims.RefMan.vo.domain.WorkAllocationVoAssembler;
import ims.RefMan.vo.lookups.LookupHelper;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.clinical.vo.domain.ReferralLetterDetailsVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.domain.OrgLiteVoAssembler;
import ims.core.vo.lookups.OrganisationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.vo.domain.DomainObjectMap;
import ims.vo.interfaces.IReferralApptDetail;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ReferralDetailsImpl extends BaseReferralDetailsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getReferralDetail
	*/
	public ims.RefMan.vo.CatsReferralDetailsVo getReferralDetail(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferall is null or id not provided for method getReferralDetail");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		CatsReferralDetailsVo voCatsReferralDetail = new CatsReferralDetailsVo();
	
		if(doCatsReferral.getCurrentStatus() != null && doCatsReferral.getCurrentStatus().getReferralStatus() != null)
			voCatsReferralDetail.setReferralApptStatus(LookupHelper.getReferralApptStatusInstance(getLookupService(), doCatsReferral.getCurrentStatus().getReferralStatus().getId()));
		
		DomainObjectMap objMap = new DomainObjectMap();
		voCatsReferralDetail.setAppointmentDetail(ReferralAppointmentDetailsVoAssembler.create(objMap, doCatsReferral));
		voCatsReferralDetail.setLetterDetail(ReferralLetterDetailsVoAssembler.create(objMap, doCatsReferral.getReferralDetails()));
		List list = factory.find("from PresentationReferralSummary prs where prs.catsReferral.id = '" + doCatsReferral.getId() + "'");
		if (list.size() > 0)
			voCatsReferralDetail.setPresentation( PresentationReferralSummaryVoAssembler.create((PresentationReferralSummary) list.get(0)));

		return voCatsReferralDetail;
	}

	public IReferralApptDetail getReferralApptDetail(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferall is null or id not provided for method getReferralApptDetail");

		return ReferralAppointmentDetailsVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(catsReferral));
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo voCatsRef) 
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.getCatsReferral(voCatsRef);
	}

	public CatsReferralWizardVo saveCatsReferral(CatsReferralWizardVo record) throws DomainInterfaceException, StaleObjectException 
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.saveCatsReferral(record);
	}
	
	public ims.RefMan.vo.CatsReferralFlaggedForReviewVo getCatsReferralFlaggedForReview(ims.RefMan.vo.CatsReferralRefVo voCatsRef)
	{
		return CatsReferralFlaggedForReviewVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public Boolean getPatientICPForCareContext(CareContextRefVo ccRefVo) 
	{
		DomainFactory factory = getDomainFactory();
		Patient pat=null;
		IMSCriteria imsc=new IMSCriteria(PatientICP.class, factory);
		imsc.equal("careContext.id", ccRefVo.getID_CareContext());
		List icps = imsc.find();
		if (icps!=null && icps.size()>0)
			return true;

		return false;
	}

	public WorkAllocationVo getWorkAllocation(CatsReferralRefVo voCatRefVo, MemberOfStaffRefVo voMOS) 
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer condStr = new StringBuffer();
		String hql = " from WorkAllocation as wa where wa.completedDateTime = null and wa.unallocatedDate = null " +
				"and wa.catsReferral.id = :catsID and wa.allocatedTo.id = :idWho ";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		markers.add("catsID");
		values.add(voCatRefVo.getID_CatsReferral());
		markers.add("idWho");
		values.add(voMOS.getID_MemberOfStaff());

		hql += condStr.toString();

		List list = factory.find(hql.toString(), markers,values);
		if(list != null && list.size() > 0)
		{ 
			WorkAllocationVoCollection voColl = WorkAllocationVoAssembler.createWorkAllocationVoCollectionFromWorkAllocation(list);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		
		return null;
	}

	public WorkAllocationVo saveWorkAllocation(WorkAllocationVo voWorkAllocation) throws DomainInterfaceException, StaleObjectException 
	{
		if (voWorkAllocation != null)
		{
			if (!voWorkAllocation.isValidated())
				throw new DomainRuntimeException("voWorkAllocation not validated");
		}
		DomainFactory factory = getDomainFactory();

		
		//wdev-8480
		if (voWorkAllocation.getCompletedDateTimeIsNotNull())
		{
			CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(voWorkAllocation.getCatsReferral());
			doCatsReferral.setIsCurrentlyAllocated(Boolean.FALSE);
			factory.save(doCatsReferral);
		}
		
		WorkAllocation doWork = WorkAllocationVoAssembler.extractWorkAllocation(factory, voWorkAllocation);
		factory.save(doWork);
		return WorkAllocationVoAssembler.create(doWork);
	}

	public OrgLiteVoCollection listAllSuppliers()
	{
		List orgs = getDomainFactory().find("from Organisation org where org.type.id = " + OrganisationType.SUPPLIER.getID() + "and org.isActive = " + Boolean.TRUE);
		return OrgLiteVoAssembler.createOrgLiteVoCollectionFromOrganisation(orgs);
	}

	public OnwardReferralFromTriageVo getOnwardReferralByCatsReferral(CatsReferralRefVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method getOnwardReferralByCatsReferral");
		
		List onwardReferrals = getDomainFactory().find("from OnwardReferralFromTriage orft where orft.catsReferral.id = " + catsReferral.getID_CatsReferral());
		if(onwardReferrals != null && onwardReferrals.size() > 0)
			return OnwardReferralFromTriageVoAssembler.create((OnwardReferralFromTriage) onwardReferrals.get(0));
		
		return null;
	}

	//set the boolean for IsOnwardReferralFromTriage to TRUE 
	public void updateCatsReferralIsOnwardReferralFromTriage(CatsReferralRefVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method updateCatsReferralIsOnwardReferralFromTriage");
		
		CatsReferral doCatsReferral = (CatsReferral)getDomainFactory().getDomainObject(catsReferral);
		
		//set current status to Referral ONWARDREFERRALREQUESTED and add to history
		CATSReferralStatus doStatus = new CATSReferralStatus();
		doStatus.setAuthoringUser((MemberOfStaff)getMosUser());
		doStatus.setReferralStatus(getDomLookup(ReferralApptStatus.ONWARDREFERRALREQUESTED));
		doStatus.setStatusDateTime(new DateTime().getJavaDate());
		
		doCatsReferral.getStatusHistory().add(doStatus);
	
		doCatsReferral.setIsOnwardReferralTriage(true);
		
		try
		{
			getDomainFactory().save(doCatsReferral);
		}
		catch (StaleObjectException e)
		{
			//unreachable code as get then update performed
		}
	}

	public OnwardReferralFromTriageVo saveOnwardReferral(OnwardReferralFromTriageVo voOnward) throws StaleObjectException
	{
		if (voOnward == null)
			throw new CodingRuntimeException("voOnward is null in method saveOnwardReferral");
		if (!voOnward.isValidated())
			throw new CodingRuntimeException("voOnward has not been validated in method saveOnwardReferral");
		
		OnwardReferralFromTriage doOnward = OnwardReferralFromTriageVoAssembler.extractOnwardReferralFromTriage(getDomainFactory(), voOnward);
		getDomainFactory().save(doOnward);
		return OnwardReferralFromTriageVoAssembler.create(doOnward);
	}
}
