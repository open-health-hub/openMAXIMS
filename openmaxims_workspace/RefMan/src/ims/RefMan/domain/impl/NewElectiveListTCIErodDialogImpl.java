// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.admin.vo.ElectiveListConfigurationVoCollection;
import ims.admin.vo.domain.ElectiveListConfigurationVoAssembler;
import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.base.impl.BaseNewElectiveListTCIErodDialogImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.vo.PatientElectiveListDetailsToSaveVo;
import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.SuspensionDetailsForPatientElectiveListVoCollection;
import ims.RefMan.vo.domain.CatsReferralforElectiveListDetailsVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListDetailsToSaveVoAssembler;
import ims.RefMan.vo.domain.SuspensionDetailsForPatientElectiveListVoAssembler;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.impl.ClinicalCodingImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.Procedure;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.pathways.domain.objects.PauseDetails;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class NewElectiveListTCIErodDialogImpl extends BaseNewElectiveListTCIErodDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.CatsReferralforElectiveListDetailsVo getReferralDetails(ims.RefMan.vo.CatsReferralRefVo referralRef)
	{
		if(referralRef == null)
			throw new CodingRuntimeException("Cannot get Referral on null Ref");
		
		return CatsReferralforElectiveListDetailsVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, referralRef.getID_CatsReferral()));
	}

	public ElectiveListConfigurationVoCollection getElectiveListConfigForHCP(Integer hcpId, Integer serviceId)
	{
		if(hcpId == null)
			   throw new CodingRuntimeException("Cannot get ElectiveListConfig on null HCP id.");
		
		List list = getDomainFactory().find("select config from ElectiveListConfiguration as config left join config.service as serv left join config.hCPs as hcps left join hcps.hCP as hcp where (hcp.id = :hcpID) and (serv.id = :serviceID) and (config.isActive = 1)", 
				new String[] {"hcpID", "serviceID"}, new Object[] {hcpId, serviceId});
		
		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
	}

	public ElectiveListConfigurationVoCollection getElectiveListConfigForService(Integer serviceId)
	{
		if(serviceId == null)
			   throw new CodingRuntimeException("Cannot get ElectiveListConfig on null Service id.");
		
		List list = getDomainFactory().find("select config from ElectiveListConfiguration as config left join config.service as serv where (config.isActive = 1) and (serv.id = :servID)", 
				new String[] {"servID"}, new Object[] {serviceId});
		
		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
	}

	public ElectiveListConfigurationVoCollection getElectiveListsBySpecialty(Integer specialtyId)
	{
		if(specialtyId == null)
			   throw new CodingRuntimeException("Cannot get ElectiveListConfig on null Specialty id.");
		
		List list = getDomainFactory().find("select config from ElectiveListConfiguration as config left join config.service as serv left join serv.specialty as spec where (config.isActive = 1) and (spec.id = :servID)", 
				new String[] {"servID"}, new Object[] {specialtyId});
		
		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
	}

	public ProcedureLiteVo getProcedureFromSuitableForSurgery(CareContextRefVo careContextRef)
	{
		if (careContextRef==null || careContextRef.getID_CareContext()==null)
		{
			throw new CodingRuntimeException("Cannot get SFSProcedure on null CareContextRefVo ");
		}
		
		List list = getDomainFactory().find("select procedure from SuitableForSurgeryAssessment as sfs left join sfs.procedure as patProcedure left join patProcedure.procedure as procedure where sfs.careContext.id = :CareContext and sfs.procedure is not null and (sfs.isRIE is null or sfs.isRIE = 0)", 
				new String[] {"CareContext"}, new Object[] {careContextRef.getID_CareContext()});
		
		if (list!=null && list.size()>0)
			return ProcedureLiteVoAssembler.create((Procedure) list.get(0));
		
		return null;
	}

	public ProcedureLiteVoCollection listProcedures(String name) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding) getDomainImpl(ClinicalCodingImpl.class);
		return impl.listProcLiteVo(name);
	}

	public PatientElectiveListDetailsToSaveVo getPatientElectiveList(PatientElectiveListRefVo electiveListRef)
	{
		if(electiveListRef == null)
			throw new CodingRuntimeException("Cannot get PatientElectiveList on null Specimen on null electiveListRef.");
		
		return PatientElectiveListDetailsToSaveVoAssembler.create((PatientElectiveList) getDomainFactory().getDomainObject(PatientElectiveList.class, electiveListRef.getID_PatientElectiveList()));
	}

	public LocationLiteVoCollection listWards(String name, LocationRefVo locationRef)//WDEV-18388
	{
		if(locationRef == null)
			throw new CodingRuntimeException("Cannot get Location on null on null LocationRef.");
		
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveWardsForHospitalByNameLite(locationRef, name);//WDEV-18388
	}

	public PatientElectiveListDetailsToSaveVo save(PatientElectiveListDetailsToSaveVo patientElectiveList) throws StaleObjectException
	{
		if (patientElectiveList == null)
		{
			throw new CodingRuntimeException("Cannot save null PatientElectiveListVo");
		}

		DomainFactory factory = getDomainFactory();
		
		PatientElectiveList domainPatElectiveList = PatientElectiveListDetailsToSaveVoAssembler.extractPatientElectiveList(factory, patientElectiveList);
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, domainPatElectiveList.getReferral().getId());
		
		Boolean isDiagnostic = domainPatElectiveList != null && domainPatElectiveList.getElectiveListReason().getId() == -2621 ? true : false;
		Boolean saveReferral = false;
		
		if(domainPatElectiveList != null  && domainPatElectiveList.getEROD() != null)
		{
			if (!isDiagnostic && domainPatElectiveList.getEROD().getId() == null)
			{
    			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
    			{
    				PauseDetails doPauseDetails = new PauseDetails();
    				doPauseDetails.setPauseStart(domainPatElectiveList.getEROD().getERODDate1());
    				doPauseDetails.setActive(true);
    				
    				doCatsReferral.getJourney().getCurrentClock().setCurrentPause(doPauseDetails);
    				
    				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() == null)
    					doCatsReferral.getJourney().getCurrentClock().setPauseDetails(new java.util.ArrayList());
    				
    				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(doPauseDetails);
    			}
			}
			
			ReferralEROD doErod = setSequenceToeErod(domainPatElectiveList.getEROD(), doCatsReferral.getElectiveEROD());
			doCatsReferral.getElectiveEROD().add(doErod);
			saveReferral = true;
		}
	
		factory.save(domainPatElectiveList);
		
		if(domainPatElectiveList != null && !isDiagnostic && domainPatElectiveList.getTCIDetails() != null && domainPatElectiveList.getTCIDetails().getTCIDate() != null)
		{
			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null && doCatsReferral.getJourney().getCurrentClock().getCurrentPause() != null)
			{
				PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
				
				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() != null)
				{
					for(int i=0; i<doCatsReferral.getJourney().getCurrentClock().getPauseDetails().size(); i++)
					{
						PauseDetails pause = (PauseDetails) doCatsReferral.getJourney().getCurrentClock().getPauseDetails().get(i);
						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
						{
							doCatsReferral.getJourney().getCurrentClock().getPauseDetails().remove(i);
							break;
						}
					}
				}
				
				currentPause.setPauseStop(domainPatElectiveList.getTCIDetails().getTCIDate());
				
				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() == null)
					doCatsReferral.getJourney().getCurrentClock().setPauseDetails(new java.util.ArrayList());
				
				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);	
			}
			
			saveReferral = true;
		}
		
		if (saveReferral)
			factory.save(doCatsReferral);
		
		return PatientElectiveListDetailsToSaveVoAssembler.create(domainPatElectiveList);
	}

	private ReferralEROD setSequenceToeErod(ReferralEROD erod, List theatreEROD)
	{
		if(erod == null)
			return null;
		
		if(erod.getId() != null)
			return erod;
		
		int sequence = 0;
		
		if(theatreEROD != null)
		{
			for(int i=0; i<theatreEROD.size(); i++)
			{
				if(theatreEROD.get(i) instanceof ReferralEROD)
				{
					ReferralEROD savedErod = (ReferralEROD) theatreEROD.get(i);
					
					if(savedErod.getSequence() != null && sequence < savedErod.getSequence())
						sequence = savedErod.getSequence();
				}
			}
		}
		
		sequence++;
		
		erod.setSequence(sequence);
		
		return erod;
	}

	//wdev-18341
	public Boolean isFitForSurgery(CareContextRefVo carecontextRef)
	{
		if( carecontextRef == null )
			throw new CodingRuntimeException("CareContextRefVo cannot be null");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		hql.append("select count (f1_1.id) from FitForSurgeryAssesment as f1_1 left join f1_1.careContext as c1_1 where	(c1_1.id =:careContext  and (f1_1.isRIE = 0 or f1_1.isRIE is null)) ");

		List <?> count = factory.find(hql.toString(), new String[] { "careContext" }, new Object[] { carecontextRef.getID_CareContext()});
		if( count != null && count.size() > 0 )
			if( (Long)count.get(0) > 0)
				return true;
			
		
		
		return false;

		
	}

	public Boolean isStaleNote(PatientElectiveListNotesVo patientElectiveListNote)
	{
		if(patientElectiveListNote == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> refNotes = factory.find("select note.id from NotesForPatientElectiveList as note where note.id = :PatNoteID and note.version > :PatNoteVersion", new String[] {"PatNoteID", "PatNoteVersion"}, new Object[] {patientElectiveListNote.getID_NotesForPatientElectiveList(), patientElectiveListNote.getVersion_NotesForPatientElectiveList()});
		
		if(refNotes != null && refNotes.size() > 0)
			return true;
		
		return false;
	}

	//WDEV-18388
	public LocationLiteVoCollection listHospitals(String name)
	{
		DomainFactory factory = getDomainFactory();
		
		List locations;

		String hql = " from Location loc where loc.isActive = 1 and loc.type = :locType ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " and ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();
		markers.add("locType");
		values.add(getDomLookup(LocationType.HOSP));
		
		if (name != null)
		{
			condStr.append(andStr + " loc.upperName like :name");
			markers.add("name");
			values.add(name.toUpperCase() + "%");
			andStr = " and ";
		}
		
		condStr.append(andStr + "loc.isVirtual =:isVirtual");
		markers.add("isVirtual");
		values.add(Boolean.FALSE);

		hql += condStr.toString();
		hql += " ORDER BY loc.upperName";					
		locations = factory.find(hql, markers, values);
		
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(locations);
	}

	public ElectiveListConfigurationVoCollection getElectiveList()
	{
		List list = getDomainFactory().find("select config from ElectiveListConfiguration as config where (config.isActive = 1) order by config.waitingListName asc ");
		
		return ElectiveListConfigurationVoAssembler.createElectiveListConfigurationVoCollectionFromElectiveListConfiguration(list);
	}

	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		DomainFactory factory = getDomainFactory();
		Booking_Appointment apptBo = (Booking_Appointment) factory.getDomainObject(Booking_Appointment.class, appt.getID_Booking_Appointment());
		return Booking_AppointmentVoAssembler.create(apptBo);
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws StaleObjectException
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	//WDEV-18519
	public SuspensionDetailsForPatientElectiveListVoCollection getSuspensionsForPatientElectiveList(PatientElectiveListRefVo patientElectiveListRef)
	{
		if(patientElectiveListRef == null || patientElectiveListRef.getID_PatientElectiveList() == null)
			throw new CodingRuntimeException("Cannot get suspensions for a null patientElectiveListRef reference or a patientElectiveListRef reference with null id");
		
		String hql = "select susp from PatientElectiveList as pel left join pel.suspensions as susp where pel.id = :pelID" + " order by susp.startDate desc"; 
	
		List<?> suspensionDetailsDOs = getDomainFactory().find(hql, new String[] {"pelID"}, new Object[] {patientElectiveListRef.getID_PatientElectiveList()});
		
		return SuspensionDetailsForPatientElectiveListVoAssembler.createSuspensionDetailsForPatientElectiveListVoCollectionFromSuspensionDetailsForPatientElectiveList(suspensionDetailsDOs);
		
	}

	
}
