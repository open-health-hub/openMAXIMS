// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.assessment.configuration.domain.objects.GraphicAssessment;
import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.domain.DynamicAssessments;
import ims.assessment.domain.impl.DynamicAssessmentsImpl;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentLiteVoCollection;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentShortVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.UserAssessmentVo;
import ims.assessment.vo.UserAssessmentWithServiceCollVo;
import ims.assessment.vo.domain.GraphicAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.GraphicAssessmentVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentShortVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentLiteVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.RefMan.domain.base.impl.BasePatientSpecialtyAssessmentsImpl;
import ims.RefMan.domain.objects.ConsultationAssessments;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ConsultationAssessmentsLiteVo;
import ims.RefMan.vo.ConsultationAssessmentsVo;
import ims.RefMan.vo.domain.ConsultationAssessmentsLiteVoAssembler;
import ims.RefMan.vo.domain.ConsultationAssessmentsVoAssembler;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.TemplateBoLiteVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.LookupInstVo;

import java.util.ArrayList;
import java.util.List;

public class PatientSpecialtyAssessmentsImpl extends BasePatientSpecialtyAssessmentsImpl
{
	
	private static final long serialVersionUID = 1L;


	
	public ConsultationAssessmentsLiteVo getConsultationAssessments(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			return null;
		
		String query = "SELECT ca FROM ConsultationAssessments AS ca WHERE ca.catsReferral.id = :REF_ID AND ca.isRIE is null";

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Integer> paramValues = new ArrayList<Integer>();

		paramNames.add("REF_ID");
		paramValues.add(referral.getID_CatsReferral());

		return ConsultationAssessmentsLiteVoAssembler.create((ConsultationAssessments) getDomainFactory().findFirst(query, paramNames, paramValues));
	}
	
	public PatientAssessmentVo getLatestVersionAssessment(PatientAssessmentRefVo assessment, CatsReferralRefVo referral)
	{
		if (assessment == null || referral == null)
			return null;
		
		StringBuilder query = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("SELECT assessment FROM PatientAssessment AS assessment ");
		query.append(" WHERE assessment.id = :ASSESS_ID AND assessment.isRIE is null");
		
		paramNames.add("ASSESS_ID");
		paramValues.add(assessment.getID_PatientAssessment());
		
		query.append(" AND assessment.id = (");
			query.append(" SELECT MAX(assess.id) FROM ConsultationAssessments AS ca LEFT JOIN ca.patientAssessment AS assess LEFT JOIN ca.catsReferral AS cats ");
			query.append(" WHERE cats.id = :CATS_ID AND ca.isRIE is null");
		query.append(")");
		
		paramNames.add("CATS_ID");
		paramValues.add(referral.getID_CatsReferral());
		
		return PatientAssessmentVoAssembler.create((PatientAssessment) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}

	public PatientAssessmentVo getPatientAssessment(PatientAssessmentRefVo patientAssessment) 
	{
		// Test Patient Assessment record
		if (patientAssessment == null || patientAssessment.getID_PatientAssessment() == null)
			return null;
		
		// Return Patient Assessment record from database
		return PatientAssessmentVoAssembler.create((PatientAssessment)getDomainFactory().getDomainObject(PatientAssessment.class, patientAssessment.getID_PatientAssessment()));
	}
	
	public PatientAssessmentVo save(PatientAssessmentVo patientAssessment, ConsultationAssessmentsLiteVo consultationAssessment) throws StaleObjectException
	{
		// Check parameters
		if (patientAssessment == null || consultationAssessment == null)
			throw new CodingRuntimeException("Can't save null records.");
		
		if (patientAssessment.isValidated() == false || consultationAssessment.isValidated() == false)
			throw new CodingRuntimeException("Can't save records not validated.");
		
		DomainFactory factory = getDomainFactory();

		// Ensure the latest Consultation Assessments record is used (to avoid StaleObject)
		if (consultationAssessment.getID_ConsultationAssessments() != null)
		{
			// If the Consultation Assessment was saved then retrieve the latest version of it
			consultationAssessment = ConsultationAssessmentsLiteVoAssembler.create((ConsultationAssessments) factory.getDomainObject(ConsultationAssessments.class, consultationAssessment.getID_ConsultationAssessments()));
		}
		else
		{
			// IF the Consultation Assessment isn't saved then check database for a saved record
			ConsultationAssessmentsLiteVo recordInDB = getConsultationAssessments(consultationAssessment.getCatsReferral());
			
			if (recordInDB != null)	consultationAssessment = recordInDB;
		}
		
		
		// Extract domain objects
		PatientAssessment domPatientAssessment = PatientAssessmentVoAssembler.extractPatientAssessment(factory, patientAssessment);

		// Commit PatientAssessment to database
		factory.save(domPatientAssessment);
		
		PatientAssessmentShortVo shortAssessment = PatientAssessmentShortVoAssembler.create(domPatientAssessment);
		consultationAssessment.getPatientAssessment().add(shortAssessment);
		
		ConsultationAssessments domConsultationAssessments = ConsultationAssessmentsLiteVoAssembler.extractConsultationAssessments(factory, consultationAssessment);
		
		factory.save(domConsultationAssessments);

		// Return the saved record
		return PatientAssessmentVoAssembler.create(domPatientAssessment);
	}

	public PatientAssessmentVo save(PatientAssessmentVo patientAssessment) throws StaleObjectException
	{
		// Check parameter for null and validation
		if (patientAssessment == null)
			throw new CodingRuntimeException("Can't save null record.");
		
		if (patientAssessment.isValidated() == false)
			throw new CodingRuntimeException("Can't save records not validated.");
		
		// Extract PatientAssessment record
		DomainFactory factory = getDomainFactory();
		
		PatientAssessment domPatientAssessment = PatientAssessmentVoAssembler.extractPatientAssessment(factory, patientAssessment);

		// Commit to database
		factory.save(domPatientAssessment);
		// Return the saved record
		return PatientAssessmentVoAssembler.create(domPatientAssessment);
	}

	
	
	
	public ConsultationAssessmentsVo saveConsultationAssessments(ConsultationAssessmentsVo consultationAssessments) throws StaleObjectException {
		if(consultationAssessments == null)
			throw new DomainRuntimeException("Invalid Consultation Assessments to save");
		if(!consultationAssessments.isValidated())
			throw new DomainRuntimeException("Record not validated before save");
		
		DomainFactory factory = getDomainFactory();
		ConsultationAssessments domainObject = ConsultationAssessmentsVoAssembler.extractConsultationAssessments(factory, consultationAssessments);		
		factory.save(domainObject);
		return ConsultationAssessmentsVoAssembler.create(domainObject);
	}


	public EpisodeofCareShortVo getEpisodeOfCareBuId(Integer eocId) 
	{
		DomainFactory factory = this.getDomainFactory();
		EpisodeOfCare eoc = (EpisodeOfCare)factory.getDomainObject(EpisodeOfCare.class, eocId);
		return EpisodeofCareShortVoAssembler.create(eoc);
	}

	public UserAssessmentLiteVoCollection listAssessments(LookupInstVo specialty)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from UserAssessment u left join u.assessmentSpecialties assSpec";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append(" assSpec.instance = :assessmentSpec" );
		markers.add("assessmentSpec");
		values.add(getDomLookup(specialty));

		hql.append(" and u.activeStatus = :actStat" );
		markers.add("actStat");
		values.add(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE));
		
		if (markers.size() > 0)
			query += " where ";

		query += hql.toString();

		return UserAssessmentLiteVoAssembler.createUserAssessmentLiteVoCollectionFromUserAssessment(factory.find(query, markers, values));
	}

	public UserAssessmentVo getUserAssessmentVo(Integer userAssessId)
	{
		DomainFactory factory = this.getDomainFactory();
		UserAssessment ua = (UserAssessment)factory.getDomainObject(UserAssessment.class, userAssessId);
		return UserAssessmentVoAssembler.create(ua);
	}

	public GraphicAssessmentVo getActiveGraphicAssessment(UserDefinedAssessmentType type)
	{
		List<?> list = getDomainFactory().find("from GraphicAssessment as g1_1 where g1_1.assessmentType.id = :TYPE and g1_1.activeStatus.id = :STATUS", new String[] {"TYPE", "STATUS"}, new Object[] {new Integer(type.getID()), new Integer(PreActiveActiveInactiveStatus.ACTIVE.getID())});

		if(list == null || list.size() == 0)
			return null;
		
		return GraphicAssessmentVoAssembler.create((GraphicAssessment) list.get(0));
	}

	public GraphicAssessmentLiteVoCollection listGraphicAssessments(LookupInstVo specialty)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from GraphicAssessment u left join u.assessmentSpecialties assSpec";
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		hql.append(" assSpec.instance = :assessmentSpec" );
		markers.add("assessmentSpec");
		values.add(getDomLookup(specialty));

		hql.append(" and u.activeStatus = :actStat" );
		markers.add("actStat");
		values.add(getDomLookup(PreActiveActiveInactiveStatus.ACTIVE));
		
		if (markers.size() > 0)
			query += " where ";

		query += hql.toString();

		return GraphicAssessmentLiteVoAssembler.createGraphicAssessmentLiteVoCollectionFromGraphicAssessment(factory.find(query, markers, values));
	}

	public GraphicAssessmentVo getActiveGraphicAssessment(GraphicAssessmentRefVo voRef)
	{
		List<?> list = getDomainFactory().find("from GraphicAssessment as g1_1 where g1_1.id = :grID", new String[] {"grID"}, new Object[] {voRef.getID_GraphicAssessment()});

		if(list == null || list.size() == 0)
			return null;
		
		return GraphicAssessmentVoAssembler.create((GraphicAssessment) list.get(0));
	}


	public Boolean isSaved(PatientAssessmentRefVo patientAssessment)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.isSaved(patientAssessment);
	}

	public TemplateBoLiteVo getTemplate(TemplateBoRefVo template)
	{
		if (template == null || !template.getID_TemplateBoIsNotNull())
			throw new DomainRuntimeException("Invalid template record");
		
		return TemplateBoLiteVoAssembler.create((TemplateBo) getDomainFactory().getDomainObject(TemplateBo.class, template.getID_TemplateBo()));
	}

	public String[] getReportAndTemplate(TemplateBoRefVo template)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.getReportAndTemplate(template);
	}

	public Boolean savePatientDocument(PatientDocumentVo patientDocument, PatientAssessmentVo patientAssessment) throws StaleObjectException
	{
		if (patientDocument == null)
			throw new DomainRuntimeException("Invalid PatientDocument record");
		if (!patientDocument.isValidated())
			throw new DomainRuntimeException("PatientDocument record not validated");
		if(patientAssessment == null)
			throw new DomainRuntimeException("Invalid patient assessment");
		if(!patientAssessment.isValidated())
			throw new DomainRuntimeException("User assessment not validated");
		
		DomainFactory factory = getDomainFactory();

		// Save PatientDocumet record
		PatientDocument domainPatientDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, patientDocument);
		factory.save(domainPatientDocument);
		
		// Save PatientAssessment record
		PatientAssessment domainObject = PatientAssessmentVoAssembler.extractPatientAssessment(factory, patientAssessment);
		factory.save(domainObject);
		
		return true;
	}

	public UserAssessmentWithServiceCollVo getUserAssessment(UserAssessmentRefVo assessRef)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.getUserAssessment(assessRef);
	}
}
