// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.MosSearch;
import ims.admin.domain.impl.MosSearchImpl;
import ims.admin.helper.Keywords;
import ims.admin.helper.MedicationManagement;
import ims.RefMan.domain.base.impl.BasePresentationComponentImpl;
import ims.RefMan.domain.objects.PresentationReferralSummary;
import ims.RefMan.vo.PresentationReferralSummaryVo;
import ims.RefMan.vo.domain.PresentationReferralSummaryVoAssembler;
import ims.clinical.vo.PresentingComplaintVoCollection;
import ims.clinical.vo.domain.PresentingComplaintVoAssembler;
import ims.core.vo.AllergenVoCollection;
import ims.core.vo.DiagnosisVoCollection;
import ims.core.vo.MedicationVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.domain.AllergenVoAssembler;
import ims.core.vo.domain.DiagnosisVoAssembler;
import ims.core.vo.domain.MedicationDoseAssembler;
import ims.core.vo.domain.MedicationLiteVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;

import java.util.ArrayList;
import java.util.List;

public class PresentationComponentImpl extends BasePresentationComponentImpl
{
	private static final long serialVersionUID = 1L;
	
	@SuppressWarnings("unchecked")
	public ims.core.vo.MedicationLiteVoCollection getMedications(String text) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ");
		
		hql.append("Medication x ");
		hql.append(" join x.keywords as kw");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql.append(" where x.isActive = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);	
		
		List resultsList = Keywords.searchByKeywords(factory, text, hql.toString(), names, values);
		if (resultsList.size() > 0)
			return MedicationLiteVoAssembler.createMedicationLiteVoCollectionFromMedication(resultsList).sort();
		else
			return null;
	}

	@SuppressWarnings("unchecked")
	public ims.core.vo.MedicationDoseCollection getDosages()
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from PatientMedicationDose");
		List dosages = factory.find(hql.toString()); 

		return MedicationDoseAssembler.createMedicationDoseCollectionFromPatientMedicationDose(dosages);
	}

	@SuppressWarnings("unchecked")
	public ims.clinical.vo.PresentingComplaintVoCollection getPresentingIssues(String text)
	{
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from PresentingComplaint as complaint where complaint.pCName like '%"+text+"%'");
	
		List domComplaints = factory.find(hql.toString());
		
		PresentingComplaintVoCollection complaints = PresentingComplaintVoAssembler.createPresentingComplaintVoCollectionFromPresentingComplaint(domComplaints);
		return complaints;
		
	}

	
	public MemberOfStaffLiteVoCollection listActiveMosByName(String text)
	{
		MosSearch mosSearch = (MosSearch)getDomainImpl(MosSearchImpl.class);
		return mosSearch.listActiveMosByName(text);
	}

	@SuppressWarnings("unchecked")
	public ServiceVo getService(Integer id)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select service from CatsReferral as catsRef join catsRef.referralDetails" +
				" as referal join referal.service as service where catsRef.id = "+id);
		
		List domService = factory.find(hql.toString());
		
		ServiceVoCollection serviceColl = ServiceVoAssembler.createServiceVoCollectionFromService(domService);
		if(serviceColl.size() > 0)
			return serviceColl.get(0);
		else
			return null;
	
	}

	@SuppressWarnings("unchecked")
	public AllergenVoCollection getAllergies(String text) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ");
		
		hql.append("Allergen x ");
		hql.append(" join x.keywords as kw");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql.append(" where x.isActive = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);	
		
		List resultsList = Keywords.searchByKeywords(factory, text, hql.toString(), names, values);
		if (resultsList.size() > 0)
			return AllergenVoAssembler.createAllergenVoCollectionFromAllergen(resultsList).sort();
		else
			return null;
	
	}

	@SuppressWarnings("unchecked")
	public DiagnosisVoCollection getHotListItems(String text, Specialty specialty) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();
				StringBuffer hql = new StringBuffer("select hListItem.diagnosis from DiagnosisHotlist as diagnosisHotlist " +
						"left join diagnosisHotlist.hotListItem as hListItem " +
						"left join hListItem.diagnosis as diagnosisItem join diagnosisItem.keywords as kw " +
						"left join  diagnosisHotlist.specialty as dSpeciality where diagnosisHotlist.isRIE is null and (dSpeciality.id = :lkpSpeciality)");
		
		
		
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		names.add("lkpSpeciality");
		values.add(specialty.getID());
		
		List resultList = Keywords.searchByKeywords(factory, text, hql.toString(), names, values);
		
		
		if(resultList.size() > 0)
			return DiagnosisVoAssembler.createDiagnosisVoCollectionFromDiagnosis(resultList);
		
		return null;
	}

	public PresentationReferralSummaryVo savePresentationReferralSummary(PresentationReferralSummaryVo value) throws StaleObjectException
	{
		
		if (value != null)
		{
			if (!value.isValidated())
				throw new DomainRuntimeException("voPresentation not validated");
		}
		DomainFactory factory = getDomainFactory();

		PresentationReferralSummary doPres = PresentationReferralSummaryVoAssembler.extractPresentationReferralSummary(factory, value);
		factory.save(doPres);
	
		return PresentationReferralSummaryVoAssembler.create(doPres);
		
	}

	public MedicationVo createOrUpdateMedication(MedicationVo value) throws StaleObjectException 
	{
		return new MedicationManagement(getDomainFactory()).createOrUpdateMedication(value);
	}
}
