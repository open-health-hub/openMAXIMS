// This code was generated by Michael Noonan using IMS Development Environment (version 1.65 build 3182.15061)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Set;
import org.apache.log4j.Logger;

import ims.admin.vo.DemographicFeedVo;
import ims.RefMan.domain.base.impl.BaseExternalEventsImpl;
import ims.RefMan.domain.objects.CATSReferralStatus;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.IFCATSExternalEventVo;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.admin.vo.ProviderSystemRefVo;
import ims.core.documents.domain.objects.ServerDocument;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.domain.LocShortMappingsVoAssembler;
import ims.core.vo.domain.PersonAddressAssembler;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OcsOrderSessionRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ProviderSystemVo;
import ims.ocrr.vo.domain.ProviderSystemVoAssembler;
import ims.ocs_if.domain.impl.OcsIfImpl;
import ims.ocs_if.helper.IRefManDomainHelper;
import ims.ocs_if.helper.IQueueHandler;
import ims.ocs_if.vo.IfOrderInvestigationVo;
import ims.ocs_if.vo.QueuedEventVo;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.objects.Appointment_Status;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.ExternalSystemEvent;
import ims.scheduling.domain.objects.Session_Slot;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.ExternalEventVo;
import ims.scheduling.vo.IfPatientLocationVo;
import ims.scheduling.vo.domain.ExternalEventVoAssembler;
import ims.scheduling.vo.lookups.ExternalSystemEventTypes;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IHL7OutboundMessageHandler;
public class ExternalEventsImpl extends BaseExternalEventsImpl implements IQueueHandler,IRefManDomainHelper
{

	private static final long serialVersionUID = 1L;
	private static final Logger			LOG		= Logger.getLogger(ExternalEventsImpl.class);
	
	public IHL7OutboundMessageHandler getEvent(QueuedEventVo event)
	{
		DomainFactory factory = getDomainFactory();
		if(event.getQueueTypeIsNotNull())
		{
			IQueueHandler ocsif =  (IQueueHandler)getDomainImpl(OcsIfImpl.class);
			return ocsif.getEvent(event);
		}
		else 
		{
			return ExternalEventVoAssembler.create((ExternalSystemEvent)factory.getDomainObject(ExternalSystemEvent.class, event.getID()));
		}
	}



	public IHL7OutboundMessageHandler saveMessage(IHL7OutboundMessageHandler iEvent) throws StaleObjectException
	{
		if (iEvent == null)
			throw new RuntimeException("Cannot save null Event");
		DomainFactory factory = getDomainFactory();

		if(iEvent instanceof ExternalEventVo)
		{
			ExternalEventVo event = (ExternalEventVo)iEvent;
			String[] errors = event.validate();
			if (errors != null)
				throw new RuntimeException("Validation errors - " + Arrays.toString(errors)); //Find bugs recommendation 
			if (!event.isValidated())
				throw new CodingRuntimeException("Event has not been validated!");
			ExternalSystemEvent domEvent = ExternalEventVoAssembler
				.extractExternalSystemEvent(factory, event);
			factory.save(domEvent);
			return ExternalEventVoAssembler.create(domEvent);
		}
		else if(iEvent instanceof DemographicFeedVo)
		{
			IQueueHandler ocsif =  (IQueueHandler)getDomainImpl(OcsIfImpl.class);
			return ocsif.saveMessage(iEvent);
		}
		else 
		{
			throw new RuntimeException("Cannot determine event type for saving");
		}
	}

	
	

 //includeApptStatus is false we are a new order 
	public IFCATSExternalEventVo getCATSIFValues(
			IfOrderInvestigationVo investigationRef, Boolean notNewOrder)

	{
		IFCATSExternalEventVo catsVo = new IFCATSExternalEventVo();
		DomainFactory factory = getDomainFactory();
		IMSCriteria criteria = new IMSCriteria(
				ims.scheduling.domain.objects.ExternalSystemEvent.class,
				factory);
		criteria.equal("this.investigation.id", investigationRef
				.getID_OrderInvestigation());
		
		
		if(notNewOrder)
		{
			criteria.notEqual("this.wasProcessed", Boolean.valueOf(true));	
			criteria.notEqual("this.eventType.id", ExternalSystemEventTypes.NEWORDER.getID());
		}
		else 
		{
			criteria.equal("this.eventType.id", ExternalSystemEventTypes.NEWORDER.getID());
		}
				
		List<?> list = criteria.find();
		if (list.size() == 0) //No external event => no appointment => Manually entered referral Get location from the referral
		{
			if (/*ConfigFlag.GEN.PUKKAJ_ENABLED.getValue()&&*/investigationRef!=null&&investigationRef.getID_OrderInvestigation()!=null)
			{
				String hql = "select  rd.location,cr.contract.contractId,cr.contract.contractType  	from CatsReferral as cr left join cr.referralDetails as rd "
					+"left join cr.investigationOrders as ord left join ord.investigations as inv where inv.id = :INV";
				List<Object[]> locs=factory.find(hql, new String[]{"INV"},new Object[] {investigationRef.getID_OrderInvestigation()});
				if(locs.size()!=0)
				{
					OrderInvestigation inv = (OrderInvestigation)factory.getDomainObject(OrderInvestigation.class , investigationRef.getID_OrderInvestigation());
					if(inv==null||inv.getInvestigation()==null||inv.getInvestigation().getProviderService()==null
							||inv.getInvestigation().getProviderService().getProviderSystem()==null)
						return null;
					LookupInstance taxType = inv.getInvestigation().getProviderService().getProviderSystem().getCodeSystem();

					int taxTypeId=taxType.getId();

					
					Location refloc=((Location)(locs.get(0))[0]);
					String contractId=((String)(locs.get(0))[1]);
					LookupInstance type = ((LookupInstance)(locs.get(0))[2]);
					
					OCSExternalEvents events =  (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class);
					if(events.isRebookApptWithCancelandFullXOSetForProviderSystem(new ProviderSystemRefVo( inv.getInvestigation().getProviderService().getProviderSystem().getId(),inv.getInvestigation().getProviderService().getProviderSystem().getVersion())))
					{
						catsVo.setContractId(contractId);
					}
					else 
					{
						catsVo.setContractId(null);
					}
					
					catsVo.setContractType(getLookupService().getLookupInstance(ReferralManagementContractType.class,  type.getId()));
					while (refloc!=null && !(refloc instanceof LocSite))
					{
						refloc=refloc.getParentLocation();
					}
					String locCode="";
					if(refloc!=null)
					{
						locCode=refloc.getExtCode(taxTypeId);
						if(locCode!=null)
						{
							catsVo.setAppointmentParentLocationCode(locCode);
							return catsVo;
						}
						else
						{
							LOG.warn("Taxonomy code not found for Location "+refloc);
						}
					}
					
				}
				else
				{
					LOG.warn("Failed to find Referral Location for investigation with id:"+investigationRef.getID_OrderInvestigation());
				}
			}
			// fall through
			return catsVo;
		}
		ExternalSystemEvent domObj = (ExternalSystemEvent) list.get(0);
		

		String hql = "select cr	from CatsReferral as cr join cr.appointments as ba  "
			+ "where (ba.id = :apptId)";

		List<?> referralList = factory.find(hql, new String[] { "apptId" },
				new Object[] { domObj.getAppointment().getId() });

		if (referralList.size() == 0)
			return null;
		CatsReferral domObjReferral = (CatsReferral) referralList.get(0);
		
		if(domObjReferral!=null &&domObjReferral.getContract()!=null&&domObjReferral.getContract().getContractType()!=null)
		{
			catsVo.setContractType(getLookupService().getLookupInstance(ReferralManagementContractType.class, domObjReferral.getContract().getContractType().getId()));
		}

		if(domObjReferral!=null &&domObjReferral.getContract()!=null)
		{
			catsVo.setContractId( domObjReferral.getContract().getContractId());
		}
		catsVo.setReferralID(domObjReferral.getId().toString());
		catsVo.setAppointmentID(domObj.getAppointment().getId().toString());
		
		//http://jira/browse/WDEV-9646
		if(domObjReferral.getReferralDetails()!=null && domObjReferral.getReferralDetails().getPractice()!=null)
		{
			catsVo.setPracticeName( domObjReferral.getReferralDetails().getPractice().getName());
			catsVo.setPracticeAddress(PersonAddressAssembler.create (domObjReferral.getReferralDetails().getPractice().getAddress()));
			catsVo.setPracticeCode(domObjReferral.getReferralDetails().getPractice().getMappingValueOfType(getDomLookup(TaxonomyType.NAT_LOC_CODE)));
		}
		
		Session_Slot slot = domObj.getAppointment().getSessionSlot();
		if(null!=slot)
		{
		catsVo.setUBRN(domObj.getAppointment().getSessionSlot().getUBRN());
		}
		LookupInstance taxType = domObj.getInvestigation().getInvestigation()
		.getProviderService().getProviderSystem().getCodeSystem();
		String extSystem = taxType.getText();
		int taxTypeId=taxType.getId();

		String transPortArranged = "";
		LookupInstance transportLookup = domObjReferral.getReferralDetails().getTransportRequired();
		if (null != transportLookup) {
			try {
				transPortArranged=transportLookup.getMapping(extSystem).getExtCode();
			} catch (NullPointerException npe) {
				LOG.warn("Error Getting Mapping for \"Transport Required\" for Lookup Name:"+ 
				domObjReferral.getReferralDetails().getTransportRequired().getType().getName()+
				" Lookup Value:"+ domObjReferral.getReferralDetails().getTransportRequired().getText()+ 
				" taxonomy type: "+ extSystem);
			}
			catsVo.setTransportArranged(transPortArranged);
		}

		String interperterReq = "";
		LookupInstance interperterLookup = domObjReferral.getReferralDetails().getInterpreterRequired();
		
		try {
			interperterReq=interperterLookup.getMapping(extSystem).getExtCode();
		} catch (NullPointerException npe) {
			if(interperterLookup!=null)
			{
				LOG.warn("Error Getting Mapping for \"Interpreter Required\" for Lookup Name:"+
						interperterLookup.getType().getName()+
						" Lookup Value:"+ interperterLookup.getText()+ 
						" taxonomy: "+ extSystem);
			}
			else
			{
				LOG.warn("Interpreter lookup is null");
			}
		}
		catsVo.setInterperterRequired(interperterReq);

		String comments = "";
		if (null != domObjReferral.getReferralDetails().getLanguage())
			comments += domObjReferral.getReferralDetails().getLanguage()
					.getText()
					+ ", ";
		if (null != domObjReferral.getReferralDetails().getTransport())
			comments += domObjReferral.getReferralDetails().getTransport()
					.getText();

		catsVo.setCommentsOnTransport(comments);
		
		Date referralDate = domObjReferral.getReferralDetails().getDateOfReferral();
		if(referralDate!=null)
			catsVo.setReferralCreationDate(new ims.framework.utils.DateTime(referralDate));

		if (notNewOrder) {
			// include status change code if not a new order i.e. a status change message
		
			String statusComment = 	domObj.getInvestigation().getOrdInvCurrentStatus().getStatusReason();
			if (statusComment==null)
				statusComment=domObj.getAppointment().getCurrentStatusRecord().getComment();
			
			OCSExternalEvents events =  (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class);
			if(events.isRebookApptWithCancelandFullXOSetForProviderSystem(new ProviderSystemRefVo( domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().getId(),domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().getVersion())))
			{
				if(domObj.getEventType().equals(getDomLookup(ExternalSystemEventTypes.UPDATEORDER))&&
					(statusComment==null||"".equals(statusComment)) )
				{
					statusComment="Appointment (re)booked";
				}
				else if (domObj.getEventType().equals(getDomLookup(ExternalSystemEventTypes.CANCELAPPOINTMENT))&&
				(statusComment==null||"".equals(statusComment)||"Order has been sent".equalsIgnoreCase(statusComment)) )
				{
					statusComment="Appointment cancelled";
				}
			}
			
			
			String statusChangeReason="";
			LookupInstance statusChangeLookup=domObj.getInvestigation().getOrdInvCurrentStatus().getStatusChangeReason();
			if(null!=statusChangeLookup)
			{
				try
				{
					statusChangeReason=statusChangeLookup.getMapping(extSystem).getExtCode();
				}
				catch (NullPointerException npe)
				{
					LOG.warn("Error Getting Mapping for \"InvestigationStatusChangeReason\" for Lookup Name:"+
							statusChangeLookup.getType().getName()+
							" Lookup Value:"+ statusChangeLookup.getText()+ 
							" taxonomy: "+ extSystem);
				}
			}
			
			
			catsVo.setAppointmentStatusCode(statusChangeReason);
			catsVo.setAppointmentStatusComment(statusComment);
		}

		//http://jira/browse/WDEV-12682 only send the document for non-diagnostics
		if(domObjReferral!=null &&domObjReferral.getContract()!=null&&domObjReferral.getContract().getContractType()!=null&&
				domObjReferral.getContract().getContractType().equals(getDomLookup(ReferralManagementContractType.NONDIAGNOSTIC)))
		{
			//http://jira/browse/WDEV-13999
			String hqlDocs=null;
			List<?> listDocs=null;
			if(domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().isSendReferralLetter()!=null
					&&domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().isSendReferralLetter().equals(true))
			{
				hqlDocs= "select sd from CatsReferral as cr left join cr.referralDocuments "+
				"as rd left join rd.serverDocument as sd where (cr.id = :refId "+
				" and rd.category.id = :LookupInstance_id) "+ 
				"and cr.isRIE is null "+
				"order by sd.systemInformation.creationDateTime desc";	
		
				listDocs = factory.find(hqlDocs, new String[] { "refId", "LookupInstance_id"},
					new Object[] { domObjReferral.getId(),DocumentCategory.GPLETTER.getID() });
				try
				{
					catsVo.setDocumentType( getDomLookup( DocumentCategory.GPLETTER).getMapping(extSystem).getExtCode());
				}
				catch (NullPointerException npe)
				{
					LOG.warn("Error Getting Mapping for Lookup Name:"+
							" DocumentCategory"+
							" Lookup Value:"+ DocumentCategory.GPLETTER.getText()+ 
							" taxonomy: "+ extSystem);
				}

			}
			if(domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().isSendQuestionnaire()!=null
					&&domObj.getInvestigation().getInvestigation().getProviderService().getProviderSystem().isSendQuestionnaire().equals(true))
			{
//				hqlDocs= "select sd from CatsReferral as cr left join cr.referralDocuments "+
//				"as rd left join rd.serverDocument as sd left join rd.services as ser left join rd.category as cat where (cr.id = :refId "+
//				" and rd.category.id = :LookupInstance_id) "+ 
//				"and cr.isRIE is null and :modality =ser.id"+
//				" order by sd.systemInformation.creationDateTime desc";	
				
				
				hqlDocs= "select sd from CatsReferral as cr, PatientDocument "+
				"as rd left join rd.serverDocument as sd left join rd.services as ser left join rd.category as cat where (cr.id = :refId "+
				" and rd.category.id = :LookupInstance_id) "+ 
				"and cr.isRIE is null and :modality =ser.id"+
				" and cr.careContext=rd.careContext"+
				" order by sd.systemInformation.creationDateTime desc";	
				
		
				listDocs = factory.find(hqlDocs, new String[] { "refId", "LookupInstance_id","modality"},
					new Object[] { domObjReferral.getId(),DocumentCategory.ASSESSMENT.getID(),
						domObj.getInvestigation().getInvestigation().getProviderService().getLocationService().getService().getId() });
				try
				{
					catsVo.setDocumentType( getDomLookup( DocumentCategory.ASSESSMENT).getMapping(extSystem).getExtCode());
				}
				catch (NullPointerException npe)
				{
					LOG.warn("Error Getting Mapping for Lookup Name:"+
							" DocumentCategory"+
							" Lookup Value:"+ DocumentCategory.ASSESSMENT.getText()+ 
							" taxonomy: "+ extSystem);
				}
			}
		
			if(null!=listDocs&&listDocs.size()!=0)
			{
				ServerDocument referralDoc = (ServerDocument)listDocs.get(0);
				try
				{
					catsVo.setDocumentFormat(referralDoc.getFileType().getMapping(extSystem).getExtCode());
				} 
				catch (NullPointerException npe)
				{
					LOG.warn("Error Getting Mapping for Lookup Name:"+
							referralDoc.getFileType().getType().getName()+
							" Lookup Value:"+ referralDoc.getFileType().getText()+ 
							" taxonomy: "+ extSystem);
				}
				File srcFile = new File(referralDoc.getFileName());
				URL url=null;
				try
				{
					url = new URL(ConfigFlag.GEN.FILE_SERVER_URL.getValue()+referralDoc.getFileName());
				}
				catch (Exception e)
				{
					LOG.warn("MALFormed URL", e);
				}
				File destDir = new File (ConfigFlag.HL7.HL7_OUTBOUND_DOCUMENT_SHARE.getValue());
				if(!destDir.exists())
					LOG.warn("HL7 Outbound Document Share does not exist: Check value of HL7_OUTBOUND_DOCUMENT_SHARE flag.");
				try
				{
					catsVo.setDocumentPath(srcFile.getName());
					File destFile = new File(destDir,srcFile.getName());
					if(!destFile.exists())
					{
						org.apache.commons.io.FileUtils.copyURLToFile(url, destFile);
					}
				}
				catch(IOException ioe)
				{
					LOG.warn("Could not copy Referral letter: "+
							srcFile.toString()+" to Outbound Document share: "+
							destDir, ioe);
				}
				
			}
		}
		
		
		// We are cancelling the appointment
		// http://jira/browse/WDEV-6817
		//wdev-7051
		String hqlcancelledAppts ="select count(ordInvAppt.id)	from OrderInvAppt as ordInvAppt	where (ordInvAppt.appointment.id = :apptId and ordInvAppt.orderInvestigation.id = :ordInvId)";
		List<?>  listCancelApptCount = factory.find(hqlcancelledAppts, new String[] { "apptId", "ordInvId"},
				new Object[] { domObj.getAppointment().getId(),domObj.getInvestigation().getId() });
		if ((listCancelApptCount!=null&&listCancelApptCount.size()==1&&listCancelApptCount.get(0).equals(Long.valueOf(0)))||
				domObj.getInvestigation().getAppointmentDate()==null)
		{

			catsVo.setAppointmentLocationCode("");
			catsVo.setStartDateTime(null);
			catsVo.setEndDateTime(null);
			catsVo.setAppointmentStatusCode("CANCEL");
			catsVo.setAppointmentStatusComment("Appointment Cancelled");

		}
		else 
		{
			Date apptDate = domObj.getAppointment().getAppointmentDate();
			String apptStartTime = domObj.getAppointment().getApptStartTime();
			String apptEndTime = domObj.getAppointment().getApptEndTime();
			
			String apptLocCode="";
			try
			{
				apptLocCode=domObj.getAppointment().getSession().getSchLocation().getExtCode(taxTypeId);
			}catch (NullPointerException npe)
			{
				LOG.warn("Error Getting Code Mapping for Location, "+
						" taxonomy type: "+ extSystem);
			}
			catsVo.setAppointmentLocationCode(apptLocCode);
			

			
			String apptParentLocCode="";
			try
			{
				Location parentLoc = domObj.getAppointment().getSession().getSchLocation();
				while (parentLoc!=null && !(parentLoc instanceof LocSite))
				{
					parentLoc=parentLoc.getParentLocation();
				}
				String locCode="";
				if(parentLoc!=null)
				{
					locCode=parentLoc.getExtCode(taxTypeId);
					if(locCode!=null)
					{
//						catsVo.setAppointmentParentLocationCode(locCode);
						apptParentLocCode=locCode;
				}
				else
				{
						LOG.warn("Taxonomy code not found for Location "+parentLoc);
					}
				}
				
			}catch (NullPointerException npe)
			{
				LOG.warn("Error Getting Code Mapping for Location, "+
						" taxonomy type: "+ extSystem);
			}
			catsVo.setAppointmentParentLocationCode(apptParentLocCode);

			
			
			
			ims.framework.utils.Time t = new ims.framework.utils.Time(apptStartTime);
			ims.framework.utils.Date d = new ims.framework.utils.Date(apptDate);
	
			DateTime startDateTime = null;
			startDateTime = new DateTime(d, t);
			DateTime endDateTime = null;
			ims.framework.utils.Time t2 = new ims.framework.utils.Time(apptEndTime);
			endDateTime = new DateTime(d, t2);
			catsVo.setStartDateTime(startDateTime);
			catsVo.setEndDateTime(endDateTime);
		}
		return catsVo;
	}

	
	// This method does not appear to be called anywhere! Should probably be removed
	public IfPatientLocationVo getPatientLocFromAppointment(
			Booking_AppointmentRefVo appointment) throws StaleObjectException, DomainInterfaceException {
		if (null==appointment)
		{
			throw new DomainInterfaceException("Appointment should not be null");
		}
		IfPatientLocationVo patLoc = new IfPatientLocationVo();
		DomainFactory factory = getDomainFactory();
		Booking_Appointment domBookAppt = (Booking_Appointment)factory.getDomainObject(appointment);
		
		PatientRefVo pat = new PatientRefVo();
		pat.setID_Patient(domBookAppt.getPatient().getId());
		patLoc.setPatient(pat);
		patLoc.setAppointmentID(domBookAppt.getId().toString());
		
		Location domLoc=domBookAppt.getSession().getSchLocation();
		Location domLocParent=domLoc.getParentLocation();
		
		LocShortMappingsVo locShortvo =LocShortMappingsVoAssembler.create(domLoc);
		patLoc.setLocMapping(locShortvo);
		
		LocShortMappingsVo parentLocShortVo = LocShortMappingsVoAssembler.create(domLocParent);
		patLoc.setParentLocMapping(parentLocShortVo);
		
		String hql = "select cr	from CatsReferral as cr join cr.appointments as ba  "
			+ "where (ba.id = :apptId)";

		List<?> referralList = factory.find(hql, new String[] { "apptId" },
				new Object[] { domBookAppt.getId() });

		if (referralList.size() == 0)
			patLoc.setReferralID("");
		else
		{
			CatsReferral domObjReferral = (CatsReferral) referralList.get(0);
			patLoc.setReferralID(domObjReferral.getId().toString());
		}
		
		return patLoc;
	}


	public OcsOrderSessionRefVo getOrderFromInvestigation(
			OrderInvestigationRefVo investigation) throws DomainInterfaceException {
		if(null==investigation)
		{
			throw new DomainInterfaceException("Investigation should not be null");
		}
		DomainFactory factory = getDomainFactory();
		OrderInvestigation domOrderInv = (OrderInvestigation)factory.getDomainObject(OrderInvestigation.class,investigation.getBoId());
		OcsOrderSessionRefVo orderRef = new OcsOrderSessionRefVo();
		orderRef.setID_OcsOrderSession(domOrderInv.getOrderDetails().getId());
		return orderRef;
	}

	public PatientRefVo getPatientFromAppointment(
			Booking_AppointmentRefVo appointment)
			throws DomainInterfaceException, StaleObjectException {
		if (null==appointment)
		{
			throw new DomainInterfaceException("Appointment should not be null");
		}
		DomainFactory factory = getDomainFactory();
		Booking_Appointment domBookAppt = (Booking_Appointment)factory.getDomainObject(Booking_Appointment.class, appointment.getBoId());
		
		PatientRefVo pat = new PatientRefVo();
		pat.setID_Patient(domBookAppt.getPatient().getId());
		return pat;
	}

	public ExternalEventVo updateEventVoWithInvestigation(ExternalEventVo event)
			throws DomainInterfaceException, StaleObjectException {

		DomainFactory factory = getDomainFactory();

		String hql = " select o.orderInvestigation from OrderInvAppt o "
				+ " join o.appointment app where app.id = :apptId";

		List<?> list = factory.find(hql, new String[] { "apptId" },
				new Object[] { event.getAppointment()
						.getID_Booking_Appointment() });

		if(null==list||list.size()==0||null==list.get(0))// If there is no investigation give up
		{
			return null;
		}
		OrderInvestigation domObj = (OrderInvestigation) list.get(0);

		OrderInvestigationRefVo orgInvRef = new OrderInvestigationRefVo();
		orgInvRef.setID_OrderInvestigation(((OrderInvestigation) list.get(0))
				.getId());

		event.setInvestigation(orgInvRef);

		ProviderSystem p = domObj.getInvestigation().getProviderService()
				.getProviderSystem();

		ProviderSystemVo provideSystem = ProviderSystemVoAssembler
				.create((ProviderSystem) factory.getDomainObject(
						ProviderSystem.class, p.getId()));
		event.setProviderSystem(provideSystem);

		return event;
	}

	public Booking_AppointmentRefVo getLatestAppointmentForInvestigation(
			OrderInvestigationRefVo invRef) throws StaleObjectException {
		DomainFactory factory = getDomainFactory();

		String hql = " select o.appointment as ba from OrderInvAppt o "
				+ " join o.orderInvestigation inv where inv.id = :invId"
				+ " order by o.id desc";

		List<?> list = factory.find(hql, new String[] { "invId" },
				new Object[] { invRef.getID_OrderInvestigation()});

		if (list == null || list.size() == 0) return null;
		Booking_Appointment domObj = (Booking_Appointment) list.get(0);

		Booking_AppointmentRefVo apptRef = new Booking_AppointmentRefVo();
		apptRef.setID_Booking_Appointment(domObj.getId());
		return apptRef;		

	}

	public void generateOrderCancelAsRequestedEvent(
			Booking_AppointmentRefVo appointment,
			OrderInvestigationRefVo investigation) throws StaleObjectException
		{
		OCSExternalEvents events = (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class);
		events.generateOrderCancelAsRequestedEvent(appointment, investigation);
		}

	public void generateOrderNumberAllocatedEvent(
			Booking_AppointmentRefVo appointment,
			OrderInvestigationRefVo investigation) throws StaleObjectException {

		OCSExternalEvents events = (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class);
		events.generateOrderNumberAllocatedEvent(appointment, investigation);

	}

	public void setCATSReferralHasRejectedInv(
			OrderInvestigationRefVo orderInvRef)
			throws DomainInterfaceException, StaleObjectException {
		DomainFactory factory = getDomainFactory();
		
		String hql= "select cr from CatsReferral as cr left join "+
		"cr.investigationOrders as io left join io.investigations as inv where "+
		"(inv.id = :invId) and cr.isRIE is null";
		
		List<?> referralList = factory.find(hql, new String[] { "invId" },
				new Object[] { orderInvRef.getBoId() });

		if (referralList.size() == 0)
		{
			LOG.error("CATSReferral not found for Order Investigation:"+orderInvRef.toString());
			return;
		}
		CatsReferral domObjReferral = (CatsReferral) referralList.get(0); // Should be only one
		domObjReferral.setHasRejectedInv(Boolean.TRUE);
		factory.save(domObjReferral);
		
	}

	public void setAppointmentArrivedForUBRN(PatientRefVo patient, String ubrn, String maximsApptIdStr, DateTime arrivalDateTime) throws DomainInterfaceException, StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		if (patient==null)
			throw new DomainInterfaceException("NULL patient for UBRN "+ubrn);
		if (arrivalDateTime==null)
			throw new DomainInterfaceException("Arrival Date Time cannot be null for UBRN "+ubrn);
		if (ubrn!=null)
		{
			String hql =

				"select s1_1.patient,  b1_1 "+
				"from Sch_Booking as s1_1 left join s1_1.appointments as b1_1 left join b1_1.apptStatus as l1_1 "+
				"where (s1_1.uBRN = :ubrn and b1_1.apptStatus.id = :statusBooked)";

			List<Object[]> resultSet = factory.find(hql,new String[]{"ubrn","statusBooked"},new Object[]{ubrn,Status_Reason.BOOKED.getID()});
			if (resultSet!=null)
			{
				for (Object[] result : resultSet)
				{
					Patient pat = (Patient)result[0];
					if(!pat.getId().equals(patient.getBoId()))
						throw new DomainInterfaceException("Patient - UBRN Mismatch");
					Booking_Appointment appt = (Booking_Appointment)result[1];
					arriveAppt ( appt, arrivalDateTime,  factory);

				}
			}
		}else if(maximsApptIdStr!=null)
		{
			int maximsApptId;
			try 
			{
				maximsApptId=Integer.parseInt(maximsApptIdStr);
			}catch(NumberFormatException nfe)
			{
				throw new DomainInterfaceException("Failed to parse appointment ID PV1-5",nfe);
			}
			
			Booking_Appointment appt =(Booking_Appointment)factory.getDomainObject(Booking_Appointment.class, maximsApptId);
			if (appt!=null)
			{
				arriveAppt (appt, arrivalDateTime,  factory);
			}
		}
		else
		{
			throw new DomainInterfaceException("Failed to arrive appointment, Maxims appointment not found");
		}
	}

	private void arriveAppt (Booking_Appointment appt,DateTime arrivalDateTime, DomainFactory factory) throws StaleObjectException
	{
		appt.setApptStatus  ( getDomLookup(Status_Reason.ARRIVAL));
		Appointment_Status status = new Appointment_Status();
		status.setStatus(getDomLookup(Status_Reason.ARRIVAL));
		status.setComment("Arrival (A10) Message processed by HL7 engine");
		Set<Appointment_Status> statusHistory = appt.getApptStatusHistory();
		statusHistory.add(status);
		appt.setArrivalTime(arrivalDateTime.getTime().toString());
		factory.save(appt);
		
	}

	public void acceptReferralFromInvestigation(IfOrderInvestigationVo inv) throws DomainInterfaceException, StaleObjectException
	{
		if (inv==null)
			throw new DomainInterfaceException("Cannot accept referral for NULL investigation");
		if(inv.getID_OrderInvestigation()==null)
			throw new DomainInterfaceException("Cannot accept referral investigation with NULL ID");
		
		DomainFactory factory = getDomainFactory();
		String hql="select c1_1 from CatsReferral as c1_1 left join c1_1.investigationOrders as o1_1 left join o1_1.investigations as o2_1 "+
		"where o2_1.id = :invID";
		List<Object> resultSet = factory.find(hql,new String[]{"invID"},new Object[]{inv.getID_OrderInvestigation()});
		for (Object result : resultSet) // There should only be one but lets do them all!
		{
			CatsReferral referral = (CatsReferral)result;
			//http://jira/browse/WDEV-12682
			if(referral.getContract()!=null&& referral.getContract().getContractType()!=null &&
					referral.getContract().getContractType().equals(getDomLookup(ReferralManagementContractType.DIAGNOSTIC)))
			{
				CATSReferralStatus status = new CATSReferralStatus();
				status.setStatusDateTime(new Date());
				status.setComment("Status updated from HL7 accept message");
				status.setReferralStatus(getDomLookup(ReferralApptStatus.REFERRAL_ACCEPTED));
				referral.setCurrentStatus(status);
				referral.getStatusHistory().add(status);
				factory.save(referral);
			}
		}

	}



	
}
