// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3175.20077)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.ReferralDetailsComponent;
import ims.RefMan.domain.base.impl.BaseBookAppointmentImpl;
import ims.RefMan.domain.objects.CATSReferralStatus;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.OrderInvApptVo;
import ims.RefMan.vo.OrderInvApptVoCollection;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.ReferralERODForBookAppointmentVoCollection;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReferralLetterDetailsBookingVo;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.OrderInvApptVoAssembler;
import ims.RefMan.vo.domain.ReferralERODForBookAppointmentVoAssembler;
import ims.RefMan.vo.domain.ReferralERODVoAssembler;
import ims.RefMan.vo.domain.ReferralLetterDetailsBookingVoAssembler;
import ims.RefMan.vo.lookups.AdditionalInvestigationAppointmentsStatus;
import ims.RefMan.vo.lookups.ICABReferralStatus;
import ims.RefMan.vo.lookups.LookupHelper;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.ICABReferral;
import ims.core.admin.domain.objects.Referral;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.clinical.domain.objects.TaxonomyMap;
import ims.core.clinical.vo.ServiceFunctionRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.resource.place.vo.LocationRefVoCollection;
import ims.core.vo.ActivityVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.ActivitySchedVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientListVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.PollStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ReferralType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.icp.vo.PatientICPFullVo;
import ims.icp.vo.PatientICPFullVoCollection;
import ims.icp.vo.domain.PatientICPFullVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.ocrr.configuration.domain.objects.Investigation;
import ims.ocrr.domain.SelectandOrder;
import ims.ocrr.domain.impl.SelectandOrderImpl;
import ims.ocrr.orderingresults.domain.objects.OcsOrderSession;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.domain.objects.OrderedInvestigationStatus;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.ocrr.vo.domain.OrderInvestigationBookingVoAssembler;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.OcsDisplayFlag;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.pathways.configuration.domain.objects.RTTStatusPoint;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.RTTStatusEventMap;
import ims.pathways.vo.PathwayClockRefVo;
import ims.pathways.vo.PathwayClockVo;
import ims.pathways.vo.PathwayClockVoCollection;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.PatientJourneyVo;
import ims.pathways.vo.RTTStatusEventMapVo;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.domain.RTTStatusEventMapVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.scheduling.domain.DirectoryOfServiceAdmin;
import ims.scheduling.domain.ExclusionDates;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.SessionDetailsEdit;
import ims.scheduling.domain.impl.DirectoryOfServiceAdminImpl;
import ims.scheduling.domain.impl.ExclusionDatesImpl;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Booking;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.Session_Slot;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ExclusionDatesVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.Sch_SessionRefVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotListVo;
import ims.scheduling.vo.SessionSlotListVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.SessionSlotWithStatusOnlyVo;
import ims.scheduling.vo.SessionSlotWithStatusOnlyVoCollection;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.domain.BookingAppointmentLiteVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.domain.ProfileLiteVoAssembler;
import ims.scheduling.vo.domain.Sch_BookingVoAssembler;
import ims.scheduling.vo.domain.SessionShortVoAssembler;
import ims.scheduling.vo.domain.SessionSlotListVoAssembler;
import ims.scheduling.vo.domain.SessionSlotVoAssembler;
import ims.scheduling.vo.domain.SessionSlotWithStatusOnlyVoAssembler;
import ims.scheduling.vo.lookups.SchedCABSlotType;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class BookAppointmentImpl extends BaseBookAppointmentImpl
{

	private static final long	serialVersionUID	= 1L;
	boolean						icabBooking;
	
	private static final int GP_SOURCE_OF_REFERRAL_NAT_CODE = 10;
	private static final int OTHER_SOURCE_OF_REFERRAL_NAT_CODE = 12;
	
	public SessionSlotListVoCollection listSessionSlot(Sch_SessionRefVoCollection session, ActivityRefVo activity)
	{
		if (session == null || session.size() == 0)
			return null;
		
		StringBuilder query = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		
		query.append("SELECT slot FROM Session_Slot AS slot LEFT JOIN slot.session AS session LEFT JOIN slot.activity AS activity");
		query.append(" WHERE session.id in (");
		
		for (int i = 0; i < session.size(); i++)
		{
			query.append(session.get(i).getID_Sch_Session());
			
			if (i != session.size() - 1)
				query.append(", ");
		}
		
		query.append(")");
		
		query.append(" AND (slot.directAccessSlot.id != :CAB_TYPE OR slot.directAccessSlot is null)");
		query.append(" AND slot.status.id = :OPEN_SLOT AND slot.appointment is null ");
		
		paramNames.add("CAB_TYPE");		paramValues.add(SchedCABSlotType.CAB.getID());
		paramNames.add("OPEN_SLOT");	paramValues.add(Status_Reason.SLOTOPENED.getID());
		
		if (activity != null && activity.getID_Activity() != null)
		{
			query.append(" AND activity.id = :ACTIVITY_ID ");
			
			paramNames.add("ACTIVITY_ID");		paramValues.add(activity.getID_Activity());
		}
		
		query.append(" ORDER BY session.id ASC, slot.startTm ASC");
		
		return SessionSlotListVoAssembler.createSessionSlotListVoCollectionFromSession_Slot(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	public SessionSlotVo getSessionSlot(Session_SlotRefVo slot)
	{
		if (slot == null || slot.getID_Session_Slot() == null)
			return null;
		
		return SessionSlotVoAssembler.create((Session_Slot) getDomainFactory().getDomainObject(Session_Slot.class, slot.getID_Session_Slot()));
	}

	
	public SessionSlotVoCollection listSessionSlot(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session is null or id not supplied for method listSessionSlot;");

		DomainFactory factory = getDomainFactory();
		Sch_Session doSession = (Sch_Session) factory.getDomainObject(Sch_Session.class, session.getID_Sch_Session());
		List slots = factory.find("from Session_Slot as slot where slot.session.id = " + session.getID_Sch_Session() + " and (slot.directAccessSlot.id != " + SchedCABSlotType.CAB.getId() + " or slot.directAccessSlot is null)");
		return SessionSlotVoAssembler.createSessionSlotVoCollectionFromSession_Slot(slots).sort();
	}

	public ims.core.vo.ServiceLiteVoCollection listActiveCanBeScheduledService()
	{
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find("from Service service where (service.isActive = 1 and service.canBeScheduled = 1 and service.serviceCategory.id != '" + ServiceCategory.RADIOLOGY_MODALITY.getID() + "')"));
	}

	/**
	 * NB - This method is called from a web service and therefore should only
	 * be modified with extreme caution (dlaffan)
	 */
	public Sch_BookingVo saveBooking(Sch_BookingVo voBooking, CatsReferralRefVo catsRef, Boolean isRebook) throws DomainInterfaceException, StaleObjectException
	{
		return saveBooking(voBooking, catsRef, isRebook, null, null);
	}
	
	private List createdReferralERODCollection(DomainFactory factory, List outpatientEROD, ReferralERODForBookAppointmentVoCollection outpatientERODCollection, HashMap objMap)
	{
		if(outpatientERODCollection == null)
			return outpatientEROD;
		
		int sequence = 0;
		
		if(outpatientEROD != null)
		{
			for(int i=0; i<outpatientEROD.size(); i++)
			{
				if(outpatientEROD.get(i) instanceof ReferralEROD)
				{
					ReferralEROD savedErod = (ReferralEROD) outpatientEROD.get(i);
					
					if(sequence < savedErod.getSequence())
						sequence = savedErod.getSequence();
				}
			}
		}
		
		sequence++;
		
		if(outpatientEROD == null)
			outpatientEROD = new java.util.ArrayList();
		
		List coll = ReferralERODForBookAppointmentVoAssembler.extractReferralERODList(factory, outpatientERODCollection, null, objMap);
		
		for(int i=0; i<coll.size(); i++)
		{
			if(coll.get(i) instanceof ReferralEROD)
			{
				ReferralEROD erod = (ReferralEROD) coll.get(i);
				erod.setSequence(sequence);
				sequence++;
				
				outpatientEROD.add(erod);
			}
		}
		
		return outpatientEROD;
	}

	/**
	 * WDEV-5711
	 * 
	 * @param isRebook
	 * @param factory
	 * @param doOrderInvAppts
	 * @param doBooking
	 * @param doCatsReferral
	 * @throws StaleObjectException
	 */
	private void RefManMessaging(Boolean isRebook, DomainFactory factory, Set doOrderInvAppts, Sch_Booking doBooking, CatsReferral doCatsReferral) throws StaleObjectException
	{
		// WDEV-5711 - generateNewOrderEvent
		// for all the new OrderInvAppt where the order has beeen authorised
		// call generateNewOrderEvent
		if (doOrderInvAppts != null)
		{
			Iterator it = doOrderInvAppts.iterator();
			while (it.hasNext())
			{
				OrderInvAppt doOrderInvAppt = (OrderInvAppt) it.next();
				OrderInvestigation doOrderInv = doOrderInvAppt.getOrderInvestigation();
				if (doOrderInv.getOrderDetails() != null && doOrderInv.getOrderDetails().getAuthorisationOrderStatus() != null && doOrderInv.getOrderDetails().getAuthorisationOrderStatus().equals(getDomLookup(AuthorisationOrderStatus.AUTHORISED)))
				{
					// WDEV-5740
					OrderedInvestigationStatus status = new OrderedInvestigationStatus();
					status.setOrdInvStatus(getDomLookup(OrderInvStatus.ORDERED));
					status.setChangeDateTime(new java.util.Date());
					status.setProcessedDateTime(new java.util.Date());
					status.setChangeUser(getHcpLiteUser() != null ? ((HcpLiteVo) getHcpLiteUser()).getIMosName() : null);
					doOrderInv.setOrdInvCurrentStatus(status);
					doOrderInv.getOrdInvStatusHistory().add(status);
					factory.save(doOrderInv);

					OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
					if (doOrderInvAppt.getAppointment() != null)
						impl.generateNewOrderEvent(new Booking_AppointmentRefVo(doOrderInvAppt.getAppointment().getId(), 0), new OrderInvestigationRefVo(doOrderInv.getId(), 0));
				}
			}
		}

		// WDEV-5711 - generateOrderUpdateEvent
		// if rebooking and appt has orderinvs generateOrderUpdateEvent needs to
		// be called
		if (isRebook != null)
		{
			if (isRebook == true)
			{
				if (doCatsReferral != null)
					doOrderInvAppts = doCatsReferral.getOrderInvAppts();

				if (doOrderInvAppts != null)
				{
					Iterator it = doOrderInvAppts.iterator();
					while (it.hasNext())
					{
						OrderInvAppt doOrderInvAppt = (OrderInvAppt) it.next();
						if (doBooking.getAppointments() != null && doBooking.getAppointments().contains(doOrderInvAppt.getAppointment()))
						{
							OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
							impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doOrderInvAppt.getAppointment().getId(), doOrderInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doOrderInvAppt.getOrderInvestigation().getId(), doOrderInvAppt.getOrderInvestigation().getVersion()));
						}
					}
				}
			}
		}
	}

	/**
	 * Save Patient if needed, set SlotStatus, set TransportRequired, set
	 * FirstAppointment
	 * 
	 * @param doBooking
	 * @param doCatsReferral
	 * @param icabBooking
	 * @return doConsultationAppt
	 * @throws StaleObjectException
	 */
	private Booking_Appointment arrangeAppointmentsInReferralAndSavePatient(Sch_Booking doBooking, CatsReferral doCatsReferral) throws StaleObjectException
	{
		// If this is a new patient (from gateway) we will need to save the
		// patient first
		if (doBooking.getPatient().getId() == null)
		{
			getDomainFactory().save(doBooking.getPatient());
		}

		// WDEV-5727 - consultation appt
		Booking_Appointment doConsultationAppt = null;
		if (doCatsReferral != null)
			doConsultationAppt = doCatsReferral.getConsultationAppt();

		//WDEV-8307
		HashMap mapSessionsRefreshed = new HashMap();
		
		if (doBooking.getAppointments() != null)
		{
			Iterator it = doBooking.getAppointments().iterator();
			Booking_Appointment doEarliestAppt = null;
			while (it.hasNext())
			{
				Booking_Appointment doBookAppt = (Booking_Appointment) it.next();

				if(!mapSessionsRefreshed.containsKey(doBookAppt.getSession()))
				{
					getDomainFactory().refresh(doBookAppt.getSession());
					mapSessionsRefreshed.put(doBookAppt.getSession(), true);
				}
				else
				{
					//WDEV-8257 - get Session from DB
					getDomainFactory().refresh(doBookAppt.getSession());
				}
				
				// WDEV-19050 - Its possible to get SOE when two people booking into same session
				// at the same time, so need to get the actual session from database before setting the remaining slots
				// to prevent this happening
				Sch_Session doSession = (Sch_Session) getDomainFactory().getDomainObject(Sch_Session.class, doBookAppt.getSession().getId());
				doSession.setRemainingSlots(new Integer(doBookAppt.getSession().getRemainingSlots().intValue() - 1));
				if(doSession.getRemainingSlots() < 0)
					doSession.setRemainingSlots(0);
				getDomainFactory().saveNoFlush(doSession);
				System.out.println("Session saved - vstp = " + doSession.getVersion() + " no slots " + doSession.getRemainingSlots() + " " + new DateTime().toString(DateTimeFormat.ISO_SECS, true));

				
//				doBookAppt.getSession().setRemainingSlots(new Integer(doBookAppt.getSession().getRemainingSlots().intValue() - 1));
//				if(doBookAppt.getSession().getRemainingSlots() < 0)
//					doBookAppt.getSession().setRemainingSlots(0);
//			
				
				
				// Set patient at this level if not already set
				if (doBookAppt.getPatient() == null)
					doBookAppt.setPatient(doBooking.getPatient());

				if (doBookAppt.isIsCABBooking())
					icabBooking = true;
				if (doEarliestAppt != null && doEarliestAppt.getAppointmentDate().before(doBookAppt.getAppointmentDate()))
					doEarliestAppt = doBookAppt;

				if (doBookAppt.getSessionSlot() != null)
				{
					doBookAppt.getSessionSlot().setAppointment(doBookAppt);
					if(!doBookAppt.getSessionSlot().getStatus().equals(getDomLookup(Status_Reason.DNA)))						//wdev-12090
						doBookAppt.getSessionSlot().setStatus(getDomLookup(Status_Reason.APPOINTMENT_BOOKED));
				}

				if (doEarliestAppt == null)
					doEarliestAppt = doBookAppt;

				// WDEV-5727 - consultation appt
				if (doConsultationAppt == null)
				{
					if (doBookAppt.getSession().getService() != null)
					{
						if (doBookAppt.getSession().getService().getServiceCategory().equals(getDomLookup(ServiceCategory.CLINICAL)))
							doConsultationAppt = doBookAppt;
					}
				}

				// WDEV-5984
				if (doCatsReferral != null)
				{
					if (doCatsReferral.getReferralDetails() != null && doCatsReferral.getReferralDetails().getTransportRequired() != null && doCatsReferral.getReferralDetails().getTransportRequired().equals(getDomLookup(YesNo.YES)))
					{
						if (doBookAppt.getId() == null) // for every new appt
						{
							doBookAppt.setIsTransportRequired(true);
						}
					}
				}
			}
			doBooking.setFirstAppointment(doEarliestAppt);

			// if the first appointment is no longer associated with this
			// booking ie. was cancelled
			if (!doBooking.getAppointments().contains(doEarliestAppt))
			{
				doBooking.setFirstAppointment(null);
			}
		}
		return doConsultationAppt;
	}

	/**
	 * NB - This method is called from a web service and therefore should only
	 * be modified with extreme caution (dlaffan)
	 * 
	 * WDEV-7448 - If PukkaJ interface is enabled this method will attempt to
	 * either create an OcsOrder and an OrderInvestigation and link it to a new
	 * BookingAppointment or update existing OrderInvAppt records and then send
	 * messages to PukkaJ by creating entries in OcsExternalEvent
	 * 
	 * @param doCatsReferral
	 * @param voAppt
	 * @throws StaleObjectException
	 * @desc
	 */
	public void processAppointmentForPukkaJ(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method processAppointmentForPukkaJ");
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method processAppointmentForPukkaJ");

		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		if (doCatsReferral.getContract() != null
			&& doCatsReferral.getContract().getContractType() != null
			&& doCatsReferral.getContract().getContractType().getId() != ReferralManagementContractType.DIAGNOSTIC.getId())
			return;

		Booking_Appointment doAppt = (Booking_Appointment) factory.getDomainObject(appt);

		// get the booking record
		Sch_Booking doBooking = null;
		List bookings = getDomainFactory().find("select book from Sch_Booking book left join book.appointments as appt where appt.id = '" + appt.getID_Booking_Appointment() + "'");
		if (bookings != null && bookings.size() == 1)
			doBooking = (Sch_Booking) bookings.iterator().next();

		// count the number of bookings
		int bookedApptsFromThisReferral = countExistingReferralAppts(doCatsReferral, Status_Reason.BOOKED);

		if (bookedApptsFromThisReferral > 1 && !doCatsReferral.getOrderInvAppts().isEmpty())
		{
			OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
			//presuming ordinvappt will only ever have one
			OrderInvAppt doOrdInvAppt = (OrderInvAppt)doCatsReferral.getOrderInvAppts().iterator().next();
			if (doOrdInvAppt != null)
			{
				doOrdInvAppt.setAppointment(doAppt);
				doOrdInvAppt.getOrderInvestigation().setAppointmentDate(doAppt.getAppointmentDate());
				getDomainFactory().save(doOrdInvAppt);	
				impl.generateOrderUpdateEvent(appt, new OrderInvestigationRefVo(doOrdInvAppt.getOrderInvestigation().getId(), doOrdInvAppt.getOrderInvestigation().getVersion()));
			}
		}
		//changed here following discussion with barbara - 02 Jul 09 - following Dan West testing
		else if (bookedApptsFromThisReferral == 1)
		{
			OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
			Object[] orderInvAndOrder = null;
			if (doCatsReferral.getOrderInvAppts().isEmpty())
			{
				orderInvAndOrder = createOrder(doCatsReferral, doAppt);
				if (orderInvAndOrder != null)
				{
					OrderInvestigation doOrderInv = (OrderInvestigation) orderInvAndOrder[0];
					OcsOrderSession doOcsOrder = (OcsOrderSession) orderInvAndOrder[1];
					
					OrderInvAppt ordInvAppt = new OrderInvAppt();
					ordInvAppt.setOrderInvestigation(doOrderInv);
					ordInvAppt.setAppointment(doAppt);
					ordInvAppt.getOrderInvestigation().setAppointmentDate(doAppt.getAppointmentDate());
					doCatsReferral.getOrderInvAppts().add(ordInvAppt);
					doCatsReferral.getInvestigationOrders().add(doOcsOrder);
					doCatsReferral.setHasInvestigations(true);
					getDomainFactory().save(doCatsReferral);	
					impl.generateNewOrderEvent(appt, new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
				}
			}
			else
			{
				OrderInvAppt doOrdInvAppt = (OrderInvAppt)doCatsReferral.getOrderInvAppts().iterator().next();
				if (doOrdInvAppt != null)
				{
					doOrdInvAppt.setAppointment(doAppt);
					doOrdInvAppt.getOrderInvestigation().setAppointmentDate(doAppt.getAppointmentDate());
					getDomainFactory().save(doOrdInvAppt);	
					impl.generateOrderUpdateEvent(appt, new OrderInvestigationRefVo(doOrdInvAppt.getOrderInvestigation().getId(), doOrdInvAppt.getOrderInvestigation().getVersion()));
				}
			}
			
		}
	}

	/**
	 * get a list of default investigations run for the Referral service and
	 * automatically create an order and link the appt if supplied
	 * 
	 * @param doCatsReferral
	 * @param doNewAppt
	 * @return an object array containing the OrderInvestigation and the Order
	 */
	public Object[] createOrder(CatsReferral doCatsReferral, Booking_Appointment doNewAppt) throws StaleObjectException
	{
		if (doCatsReferral == null)
			throw new CodingRuntimeException("doCatsReferral is null in method createOrder");

		Set orderInvestigations = null;

		String invMapping = null;
		if (doCatsReferral.getReferralDetails() != null && doCatsReferral.getReferralDetails().getService() != null)
		{
			if (doCatsReferral.getReferralDetails().getService().getTaxonomyMap() != null)
			{
				Iterator itTax = doCatsReferral.getReferralDetails().getService().getTaxonomyMap().iterator();
				while (itTax.hasNext())
				{
					TaxonomyMap doTaxMap = (TaxonomyMap) itTax.next();
					if (doTaxMap.getTaxonomyName().equals(getDomLookup(TaxonomyType.INVESTIGATION)))
					{
						invMapping = doTaxMap.getTaxonomyCode();
						break;
					}
				}
			}
		}

		if (invMapping != null)
		{
			List invs = getDomainFactory().find("from Investigation inv where upper(inv.providerInvCode) = '" + invMapping.toUpperCase() + "'");
			if (invs != null && invs.size() > 0)
			{
				OcsOrderSession doOcsOrder = new OcsOrderSession();
				doOcsOrder.setPatient(doCatsReferral.getPatient());
				doOcsOrder.setClinicalTrial(false);
				doOcsOrder.setAuthorisationOrderStatus(getDomLookup(AuthorisationOrderStatus.AUTHORISED));
				if(doCatsReferral.getReferralDetails() != null)
					doOcsOrder.setResponsibleGp(doCatsReferral.getReferralDetails().getGPName());
				
				orderInvestigations = createOrderInvestigations(invs, doNewAppt, doOcsOrder);
				doOcsOrder.setInvestigations(orderInvestigations);
				doOcsOrder.setWasProcessed(false);
				
				getDomainFactory().save(doOcsOrder);
				return new Object[]{(OrderInvestigation) orderInvestigations.iterator().next(), doOcsOrder};
			}
		}
		return null;
	}

	private Set createOrderInvestigations(List invs, Booking_Appointment doNewAppt, OcsOrderSession doOcsOrder)
	{
		Set orderInvs = new HashSet();
		Iterator it = invs.iterator();
		while (it.hasNext())
		{
			Investigation doInv = (Investigation) it.next();
			OrderInvestigation doOrderInv = new OrderInvestigation();
			doOrderInv.setInvestigation(doInv);
			doOrderInv.setAppointmentDate(doNewAppt != null ? doNewAppt.getAppointmentDate() : null);
			doOrderInv.setOrderDetails(doOcsOrder);

			OrderedInvestigationStatus status = new OrderedInvestigationStatus();
			status.setOrdInvStatus(getDomLookup(OrderInvStatus.ORDERED));
			status.setChangeDateTime(new java.util.Date());
			status.setProcessedDateTime(new java.util.Date());
			status.setChangeUser("ICAB");
			doOrderInv.setOrdInvCurrentStatus(status);
			doOrderInv.getOrdInvStatusHistory().add(status);

			doOrderInv.setWasOrdered(true);
			doOrderInv.setDisplayDateTime(new DateTime().getJavaDate());
			doOrderInv.setDisplayTimeSupplied(true);
			doOrderInv.setDisplayFlag(getDomLookup(OcsDisplayFlag.REQUESTED));
			doOrderInv.setOrdInvSeq(new Integer(0));
			doOrderInv.setWasProcessed(false);

			orderInvs.add(doOrderInv);
		}

		return orderInvs;
	}

	private String getIdString(List<String> invIds)
	{
		String idString = "";

		for (int i = 0; i < invIds.size(); i++)
		{
			idString += invIds.get(i).toUpperCase();
			idString += ((invIds.size() - (i + 1)) > 0 ? "," : "");
		}

		return idString;
	}

	private int countExistingReferralAppts(CatsReferral doCatsReferral, Status_Reason status)
	{
		int apptsFromThisReferral = 0;

		// check how many existing 'booked' appts there are in the referral
		if (doCatsReferral != null)
		{
			if (doCatsReferral.getAppointments() != null)
			{
				Iterator itAppt = doCatsReferral.getAppointments().iterator();
				while (itAppt.hasNext())
				{
					Booking_Appointment doAppt = (Booking_Appointment) itAppt.next();
					if (doAppt.getApptStatus() != null && doAppt.getApptStatus().equals(getDomLookup(status)))
						apptsFromThisReferral++;
				}
			}
		}

		return apptsFromThisReferral;
	}

	private OrderInvApptVoCollection getOrdinvApptCollection(ims.scheduling.vo.Sch_BookingVo voBooking)
	{
		OrderInvApptVoCollection voCollOrdInvAppt = new OrderInvApptVoCollection();
		if (voBooking.getAppointmentsIsNotNull())
		{
			for (Booking_AppointmentVo voAppt : voBooking.getAppointments())
			{
				if (voAppt.getOrderInvestigationIsNotNull())
				{
					// SITE-508 use existing OrderInvAppt record or create new
					OrderInvApptVo voOrdInvAppt = getOrCreateOrderInvApptVo(voAppt, voAppt.getOrderInvestigation());
					voOrdInvAppt.setAppointment(voAppt);
					voAppt.getOrderInvestigation().setAppointmentDate(new DateTime(voAppt.getAppointmentDate(), voAppt.getApptStartTime()));
					voOrdInvAppt.setOrderInvestigation(voAppt.getOrderInvestigation());
					voOrdInvAppt.setStatus(PollStatus.CANCELNOTPROCESSED);
					voCollOrdInvAppt.add(voOrdInvAppt);
				}
			}
		}
		return voCollOrdInvAppt.size() > 0 ? voCollOrdInvAppt : null;
	}

	private OrderInvApptVo getOrCreateOrderInvApptVo(Booking_AppointmentVo voAppt, OrderInvestigationBookingVo orderInvestigationBookingVo)
	{
		List ordInvAppts = getDomainFactory().find("from OrderInvAppt invAppt where invAppt.appointment.id = :idAppt and invAppt.orderInvestigation.id = :idOrderInv", new String[]{"idAppt", "idOrderInv"}, new Object[]{voAppt.getID_Booking_Appointment(), orderInvestigationBookingVo.getID_OrderInvestigation()});
		if (ordInvAppts != null && ordInvAppts.size() == 1)
		{
			OrderInvAppt doOrdInvAppt = (OrderInvAppt) ordInvAppts.get(0);
			return OrderInvApptVoAssembler.create(doOrdInvAppt);
		}

		return new OrderInvApptVo();
	}

	/**
	 * checkReferral
	 * 
	 * @param factory
	 * @param doBooking
	 *            The booking we just saved This method will check if an open
	 *            referral already exists for this patient and UBRN. If it does
	 *            the appointment will be saved alongside it. If not, a new
	 *            referral will be created with the given appointment associated
	 *            with it.
	 * @throws StaleObjectException
	 * @throws DomainInterfaceException 
	 */
	private void checkReferral(DomainFactory factory, Sch_Booking doBooking) throws StaleObjectException, DomainInterfaceException
	{
		if (!ConfigFlag.GEN.ICAB_ENABLED.getValue())
			return;

		CatsReferral cancelledReferral=null;
		CatsReferral catsReferral = null;
		List lst = CatsReferral.listCatsReferralByPatient(factory, doBooking.getPatient());
		if (lst != null && lst.size() > 0)
		{
			
			Iterator it = lst.iterator();
			while (it.hasNext())
			{
				CatsReferral domRef = (CatsReferral) it.next();
				if (domRef instanceof CatsReferral)
				{
					ICABReferral tmpRef = ((CatsReferral) domRef).getICABReferral();
					if (tmpRef != null && tmpRef.getUBRN() != null && tmpRef.getUBRN().equals(doBooking.getUBRN()) && tmpRef.getStatus().getId() != ICABReferralStatus.COMPLETED.getId())
					{
						// WDEV-12701 If more than one referral found for the ubrn, and one has a cancelled
						// status, then use the other one i.e. don't just use the first one we come across.
						if (domRef.getCurrentStatus() != null && 
											(domRef.getCurrentStatus().getReferralStatus().getId() == ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.getID() ||
											 domRef.getCurrentStatus().getReferralStatus().getId() == ReferralApptStatus.CAB_CANCELLATION.getID()))
						{
							cancelledReferral=domRef;
							// Continue as we might find another referral that isn't cancelled
						}
						else
						{
							catsReferral = domRef;
							break;
						}
					}
				}
			}
		}

		if (catsReferral == null && cancelledReferral == null)
			catsReferral = createNewReferral(factory, doBooking);
		else
		{
			// WDEV-12701 - use the cancelled referral if no other one to use
			if (catsReferral == null)
				catsReferral=cancelledReferral;
			
			// wdev-6738 If referral transport required, then set appointment
			// value to true
			if (catsReferral.getReferralDetails() != null && catsReferral.getReferralDetails().getTransportRequired() != null && catsReferral.getReferralDetails().getTransportRequired().getId() == YesNo.YES.getId())
			{
				doBooking.getFirstAppointment().setIsTransportRequired(Boolean.TRUE);
				factory.save(doBooking.getFirstAppointment());
			}

		}
		catsReferral.getAppointments().add(doBooking.getFirstAppointment());
		
		boolean RTTClockImpact = true;
		
		if(catsReferral.getContract() != null && catsReferral.getContract().getContractType() != null && catsReferral.getContract().getContractType().getId() == ReferralManagementContractType.DIAGNOSTIC.getID())
		{
			RTTClockImpact = false;
		}
		
		catsReferral.setRTTClockImpact(RTTClockImpact);
		
		boolean isNewCatsReferral = catsReferral.getId() == null;
		PatientPathwayJourney journey = null;
		if(icabBooking && isNewCatsReferral && isNonDiagnosticAppointment(catsReferral))
		{
			journey = createJourney(factory, catsReferral);
			catsReferral.setJourney(journey);
		}
		
		PathwayRTTStatus rttStatus = null;
		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && isNewCatsReferral && RTTClockImpact)
		{
			rttStatus = createPathwayRTTStatus(catsReferral);
			catsReferral.setCurrentRTTStatus(rttStatus);
		}
		
		factory.save(catsReferral);
		
		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && isNewCatsReferral && RTTClockImpact)
		{
			RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
			
			if(rttMap != null && rttMap.getEvent() != null)
			{
				PatientEventVo patEvent = new PatientEventVo();
				patEvent.setPatient(new PatientRefVo(doBooking.getPatient().getId(), doBooking.getPatient().getVersion()));
				patEvent.setEvent(rttMap.getEvent());
				patEvent.setEventDateTime(new DateTime());
				patEvent.setEventStatus(EventStatus.ACTIVE);
				patEvent.setJourney(PatientJourneyVoAssembler.create(catsReferral.getJourney()));
				
				HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
				impl.instantiatePatientEvent(patEvent);
			}
		}
		
		return;
	}
	
	private RTTStatusEventMapVo getRTTStatusEventMap(RTTStatusPoint rttStatusPoint)
	{
		if(rttStatusPoint == null)
			return null;
		
		String query = "select rttMap from RTTStatusEventMap as rttMap left join rttMap.currentRTTStatus as rtt where rtt.id = :RTTStatusPoint and rttMap.event is not null and rttMap.active = 1";
		List<?> listRTTMap = getDomainFactory().find(query, new String[] {"RTTStatusPoint"}, new Object[] {rttStatusPoint.getId()});
		
		if(listRTTMap != null && listRTTMap.size() > 0 && listRTTMap.get(0) instanceof RTTStatusEventMap)
		{
			return RTTStatusEventMapVoAssembler.create((RTTStatusEventMap) listRTTMap.get(0));
		}
		
		return null;
	}
	
	private PathwayRTTStatus createPathwayRTTStatus(CatsReferral record)
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;
		
		if(record == null)
			return null;
		
		int nationalCode = OTHER_SOURCE_OF_REFERRAL_NAT_CODE;
		
		if(record.getReferralDetails() != null && record.getReferralDetails().getReferrerType() != null && SourceOfReferral.GP.getID() == record.getReferralDetails().getReferrerType().getId())
		{
			nationalCode = GP_SOURCE_OF_REFERRAL_NAT_CODE;
		}
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}
		
		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		pathwayRTTStatus.setStatusDateTime(new java.util.Date());
		
		if(record.getJourney() != null && record.getJourney().getCurrentClock() != null)
    	{
			record.getJourney().getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getJourney().getCurrentClock().getRTTStatusHistory() == null)
    			record.getJourney().getCurrentClock().setRTTStatusHistory(new java.util.ArrayList());
    			
    		record.getJourney().getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
		}
		
		return pathwayRTTStatus;
	}
	
	private RTTStatusPoint getRTTStatusPoint(int nationalCode)
	{
		String query = "select rtt from RTTStatusPoint as rtt where rtt.nationalCode = :NationalCode";
		
		List<?> rttList = getDomainFactory().find(query, new String[] {"NationalCode"}, new Object[] {nationalCode});
		
		if(rttList != null && rttList.size() > 0 && rttList.get(0) instanceof RTTStatusPoint)
		{
			return (RTTStatusPoint) rttList.get(0);
		}
		
		return null;
	}
	
	private boolean isNonDiagnosticAppointment(CatsReferral catsReferral)
	{
		if(catsReferral != null && catsReferral.getDOS() != null && catsReferral.getDOS().getContract() != null && catsReferral.getDOS().getContract().getContractType() != null)
		{
			if(ReferralManagementContractType.DIAGNOSTIC.getID() == catsReferral.getDOS().getContract().getContractType().getId())
				return false;
		}
		
		return true;
	}

	private PatientPathwayJourney createJourney(DomainFactory factory, CatsReferral referral) 
	{
		if (!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			return null;
		
		if (referral != null && referral.getId() != null)
		{
			CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getId());
			if (domReferral != null && domReferral.getJourney() != null)
				return domReferral.getJourney();
		}
		
		PatientJourneyVo journey = new PatientJourneyVo();
				
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		try 
		{
			// Create the holding referral first
			Referral domReferral = new Referral();
			domReferral.setAuthoringDateTime(new java.util.Date());
			//WDEV-18395
			domReferral.setClockId(referral.getPathwayID());
			//WDEV-18395
			domReferral.setReferralType(factory.getLookupInstance(ReferralType.INTERNAL.getId()));
			domReferral.setExtReferralKey("IMS_" + new java.util.Date().getTime());
			domReferral.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getId()));
			
			// New Patient - need to save it
			if (referral.getPatient() != null && referral.getPatient().getId() == null)
			{
				ims.core.patient.domain.objects.Patient domPatient = referral.getPatient();
				factory.save(domPatient);
				domReferral.setPatient(domPatient);
				PatientShort voPatient = PatientShortAssembler.create(domPatient);
				journey.setPatient(voPatient);
			}
			else
			{
				domReferral.setPatient(referral.getPatient());
				journey.setPatient(PatientShortAssembler.create(referral.getPatient()));

			}
			factory.save(domReferral);
						
			journey.setReferral(new ReferralRefVo(domReferral.getId(), domReferral.getVersion()));
			
			if (referral.getReferralDetails() != null)
			{
				if(referral.getReferralDetails().getDateOfReferral() != null)
				{
					journey.setStartDate(new ims.framework.utils.Date(referral.getReferralDetails().getDateOfReferral()));
				}
				
				if(referral.getReferralDetails().getEnd18WW() != null)
				{
					journey.setTargetEndDate(new ims.framework.utils.Date(referral.getReferralDetails().getEnd18WW()));
				}
			}
			
			journey.setExtReferralKey(domReferral.getExtReferralKey());
						
			//WDEV-18395
			if (referral.isRTTClockImpact() != null && Boolean.TRUE.equals(referral.isRTTClockImpact()))
			{
				PathwayClockVo clock = new PathwayClockVo();
				clock.setExtClockId(domReferral.getClockId());
				clock.setExtClockName("MaximsClock_1");
				clock.setStartDate(journey.getStartDate());			
				journey.setCurrentClock(clock);			
				if (!journey.getClockHistoryIsNotNull())
					journey.setClockHistory(new PathwayClockVoCollection());
				journey.getClockHistory().add(clock);
			}
			
			// Services specialty - if not set then use Emergency
			if (referral.getReferralDetails() != null && referral.getReferralDetails().getService() != null && referral.getReferralDetails().getService().getSpecialty() != null)
				journey = impl.createPatientJourney(journey, null, getSpecialty(referral.getReferralDetails().getService().getSpecialty()), null,null);			
			else	
				journey = impl.createPatientJourney(journey, null, Specialty.EMERGENCY, null,null);
			
			return PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
		} 
		catch (DomainInterfaceException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred creating patient journey - " + e.getMessage());
			return null;
		} 
		catch (StaleObjectException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Stale Object Exception occurred creating patient journey - " + e.getMessage());
			return null;
		}		
	}

	private Specialty getSpecialty(LookupInstance specialty)
	{
		if(specialty == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;	
		
		img = null;
		if (specialty.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(specialty.getImage().getImageId(), specialty.getImage().getImagePath());
		}
		
		color = specialty.getColor();
		if (color != null) 
			color.getValue();

		Specialty spec = new Specialty(specialty.getId(),specialty.getText(), specialty.isActive(), null, img, color);
		
		return spec;
	}

	private CatsReferral createNewReferral(DomainFactory factory, Sch_Booking doBooking) throws StaleObjectException
	{
		CatsReferral catsRef = new CatsReferral();
		ICABReferral domReferral = new ICABReferral();
		domReferral.setAuthoringDateTime(new java.util.Date());
		domReferral.setReferralType(getDomLookup(ReferralType.EXTERNAL));
		domReferral.setPatient(doBooking.getPatient());
		domReferral.setUBRN(doBooking.getUBRN());
		domReferral.setStatus(getDomLookup(ICABReferralStatus.CHOOSEANDBOOK));

		catsRef.setICABReferral(domReferral);
		catsRef.setPatient(doBooking.getPatient());
		catsRef.setIsCAB(Boolean.TRUE);
		catsRef.setAdditionalInvApptsStatus(getDomLookup(AdditionalInvestigationAppointmentsStatus.NONE));
		catsRef.setConsultationAppt(doBooking.getFirstAppointment());
		catsRef.setHasAppointments(Boolean.TRUE);
		//WDEV-5507
		catsRef.setDOS(doBooking.getFirstAppointment().getSessionSlot().getDOSfromUBRN(doBooking.getUBRN())); 
        
		// wdev-10023 Set the ContractId from the DOS
        if (catsRef.getDOS() != null)
        	//WDEV-11713
        	catsRef.setContract(catsRef.getDOS().getContract());


		CATSReferralStatus refStat = new CATSReferralStatus();
		refStat.setStatusDateTime(new java.util.Date());
		refStat.setReferralStatus(getDomLookup(ReferralApptStatus.REFERRAL_RECEIVED));
		catsRef.setCurrentStatus(refStat);
		catsRef.setStatusHistory(new HashSet());
		catsRef.getStatusHistory().add(refStat);

		// Need to create CareSpell, EpisodeOfCare and CareContext as
		// CareContext required for CatsReferral
		CareSpell domCS = new CareSpell();
		domCS.setStartDate(new java.util.Date());
		domCS.setPatient(doBooking.getPatient());

		EpisodeOfCare domEpis = new EpisodeOfCare();
		domEpis.setCareSpell(domCS);
		domEpis.setStartDate(new java.util.Date());
		domEpis.setSpecialty(doBooking.getFirstAppointment().getSession().getService().getSpecialty());
		Set episSt = new HashSet();
		episSt.add(domEpis);
		domCS.setEpisodes(episSt);

		CareContext domCC = new CareContext();
		domCC.setStartDateTime(new java.util.Date());
		domCC.setEpisodeOfCare(domEpis);
		domCC.setContext(getDomLookup(ContextType.OUTPATIENT));
		Set ccSt = new HashSet();
		ccSt.add(domCC);
		domEpis.setCareContexts(ccSt);

		factory.save(domCS);
		catsRef.setCareContext(domCC);
		return catsRef;
	}

	/**
	 * list sessions for scheduling
	 */
	public SessionShortVoCollection listSession(Date startDate, Date endDate, ActivityVo activity, ServiceRefVo service, LocationRefVo location, HcpLiteVo listOwner, ServiceFunctionRefVo clinicType, LocationRefVoCollection locationList)
	{
		// all params must be set
		if (startDate == null || endDate == null || activity == null)
			throw new DomainRuntimeException("Not all mandatory search params set in method listGenericSession");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		String serviceCriteria = "";
		String locationCriteria = "";
		String clinicTypeCriteria = "";
		String clinicTypeJoin = "";
		String listOwnerJoin = "";
		String listOwnerCriteria = "";

		// mandatory fields
		markers.add("activityId");
		markers.add("open");
		markers.add("startDate");
		markers.add("endDate");

		values.add(activity.getID_Activity());
		values.add(getDomLookup(Session_Status_and_Reason.OPEN));
		values.add(startDate.getDate());
		values.add(endDate.getDate());

		if (service != null)
		{
			markers.add("idService");
			values.add(service.getID_Service());
			serviceCriteria = " and session.service.id = :idService";
		}
		if (clinicType != null)
		{
			markers.add("idClinicType");
			values.add(clinicType.getID_ServiceFunction());
			clinicTypeJoin = " join slot.functions as func ";
			clinicTypeCriteria = " and func.id = :idClinicType ";
		}
		if (listOwner != null)
		{
			markers.add("idListOwner");
			values.add(listOwner.getID_Hcp());
			listOwnerJoin = " left join session.listOwners as lowners left join lowners.hcp shcp ";
			listOwnerCriteria = " and shcp.id = :idListOwner ";
		}
		if (location != null)
		{
			markers.add("idLocation");
			values.add(location.getID_Location());
			locationCriteria = " and session.schLocation.id = :idLocation";
		}
		else if(locationList != null)
		{
			List<String> locationIds = new ArrayList<String>();
			for(LocationRefVo voRef : locationList)
				locationIds.add(voRef.getID_Location().toString());

			locationCriteria = " and session.schLocation.id in (" + getIdString(locationIds) + ")";
		}

		DomainFactory factory = getDomainFactory();

		List<?> sessions = factory.find(" Select distinct session from Sch_Session as session " + " left join session.sessionSlots as slot " + clinicTypeJoin + listOwnerJoin +  " where ( slot.activity.id = :activityId) " + " and session.sessionDate >= :startDate and session.sessionDate <= :endDate " + serviceCriteria + locationCriteria + clinicTypeCriteria + listOwnerCriteria + " and session.sessionStatus = :open and (session.isTheatreSession = FALSE or session.isTheatreSession is null) and session.isRIE is null ", markers, values, 1000);

		if (sessions == null || sessions.size() == 0)
			return SessionShortVoAssembler.createSessionShortVoCollectionFromSch_Session(sessions);


		SessionShortVoCollection voCollSessionShort = new SessionShortVoCollection();

		for (int i = 0; i < sessions.size(); i++)
		{
			if (sessions.get(i) instanceof Sch_Session)
			{
				Sch_Session session = (Sch_Session) sessions.get(i);

				SessionShortVo sessionShort = SessionShortVoAssembler.create(session);

				if (session.getSessionSlots() != null)
				{
					sessionShort.setCalendarSlots(new SessionSlotWithStatusOnlyVoCollection());

					Iterator<?> slotIterator = session.getSessionSlots().iterator();

					while (slotIterator.hasNext())
					{
						Session_Slot slot = (Session_Slot) slotIterator.next();

						SessionSlotWithStatusOnlyVo sessionSlot = SessionSlotWithStatusOnlyVoAssembler.create(slot);

						if (sessionSlot.getActivity().equals(activity))
						{
							sessionShort.getCalendarSlots().add(sessionSlot);
						}
					}
				}

				voCollSessionShort.add(sessionShort);
			}
		}

		return voCollSessionShort.sort();
	}

	/**
	 * list activities for ActivityType
	 */
	public ims.core.vo.ActivitySchedVoCollection listActivitiesForType(ims.core.vo.lookups.ActivityType actType, CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		List appointments  = factory.find("select appts.id from CatsReferral as cats right join cats.appointments as appts where cats.id = :CatsReferralId", new String[] {"CatsReferralId"}, new Object[] {catsReferral.getID_CatsReferral()});
		
		String query = null;
		if(appointments == null || appointments.size() == 0)
		{
			query = "select act from Activity act where act.activityType = :actType and act.isActive = :isActive  and (act.firstAppointment = 1 or act.diagnostic = 1) order by act.name asc";
		}
		else
		{
			query = "select act from Activity act where act.activityType = :actType and act.isActive = :isActive order by act.name asc";
		}
		
		if(query != null && query.length() > 0)
		{
			return ActivitySchedVoAssembler.createActivitySchedVoCollectionFromActivity(factory.find(query, new String[]{"actType", "isActive"}, new Object[]{getDomLookup(actType), Boolean.TRUE}));//WDEV-16073
		}
		
		return null;
	}

	/**
	 * list Booking appointments for a session
	 */
	public ims.scheduling.vo.Booking_AppointmentVoCollection listBookingAppointment(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		DomainFactory factory = getDomainFactory();
		return Booking_AppointmentVoAssembler.createBooking_AppointmentVoCollectionFromBooking_Appointment(factory.find(" from Booking_Appointment book where book.session.id = :sessionId", new String[]{"sessionId"}, new Object[]{session.getID_Sch_Session()})).sort();
	}

	/**
	 * check Booking Rights for this Role and Session
	 */
	public Boolean hasBookingRights(IAppRole role, Sch_SessionRefVo session)
	{
		if (role == null)
			throw new CodingRuntimeException("role is null in method hasBookingRights");
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session is null or id not provided in method hasBookingRights");

		DomainFactory factory = getDomainFactory();
		String hql = "select count(bookRight.id) from Sch_Session as session left join session.bookingRights as bookRight where (session.id = :idSession and bookRight.role.id = :idRole)";

		int count = -1;
		List lstCount = factory.find(hql, new String[]{"idSession", "idRole"}, new Object[]{session.getID_Sch_Session(), role.getId()});
		Iterator it = lstCount.iterator();
		if (it.hasNext())
		{
			Long res = (Long) it.next();
			count = res.intValue();
		}

		return count > 0;
	}

	/**
	 * listLocationLite
	 */
	public ims.core.vo.LocationLiteVoCollection listLocationLite()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		return impl.listLocationLiteByName(null);
	}

	/**
	 * getCurrentMonth
	 */
	public ims.framework.utils.Date getCurrentMonth(ims.core.vo.ActivityVo activity, ims.core.clinical.vo.ServiceRefVo service, ims.core.resource.place.vo.LocationRefVo location, ServiceFunctionRefVo clinicType, LocationRefVoCollection locationList)
	{
		if (activity == null)
			throw new DomainRuntimeException("Not all mandatory search params set in method listGenericSession");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		String serviceCriteria = "";
		String locationCriteria = "";
		String clinicTypeCriteria = "";
		String clinicTypeJoin = "";

		markers.add("activityId");
		markers.add("open");
		markers.add("today");

		values.add(activity.getID_Activity());
		values.add(getDomLookup(Session_Status_and_Reason.OPEN));
		values.add(new Date().getDate());

		if (service != null)
		{
			markers.add("idService");
			values.add(service.getID_Service());
			serviceCriteria = " and session.service.id = :idService";
		}
		if (location != null)
		{
			markers.add("idLocation");
			values.add(location.getID_Location());
			locationCriteria = " and session.schLocation.id = :idLocation";
		}
		else if(locationList != null)
		{
			List<String> locationIds = new ArrayList<String>();
			for(LocationRefVo voRef : locationList)
				locationIds.add(voRef.getID_Location().toString());
		
			locationCriteria = " and session.schLocation.id in (" + getIdString(locationIds) + ")";
		}
		if (clinicType != null)
		{
			markers.add("idClinicType");
			values.add(clinicType.getID_ServiceFunction());
			clinicTypeJoin = " join slot.functions as func ";
			clinicTypeCriteria = " and func.id = :idClinicType ";
		}

		DomainFactory factory = getDomainFactory();

		List date = factory.find(" Select min (session.sessionDate) from Sch_Session as session " + " left join session.sessionSlots as slot " + clinicTypeJoin + " where ( slot.activity.id = :activityId) " + serviceCriteria + locationCriteria + clinicTypeCriteria + " and session.sessionStatus = :open and session.sessionDate >= :today  and (session.isTheatreSession = FALSE or session.isTheatreSession is null)", markers, values, 1000);

		if (date != null && date.get(0) != null)
			return new ims.framework.utils.Date((java.util.Date) date.get(0));

		return null;
	}

	/**
	 * getReferralDetail - Referral Booking Vo contains all the data for the top
	 * panel (Referral Details) - in the Booking Screen for CARE_UK
	 */
	public ims.RefMan.vo.ReferralBookingVo getReferralDetail(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provide for method getReferralDetail");

		DomainFactory factory = getDomainFactory();

		ReferralBookingVo voReferralBooking = new ReferralBookingVo();

		CatsReferral doCatsRef = (CatsReferral) factory.getDomainObject(catsReferral);
		if (doCatsRef != null)
		{
			java.util.Date triageDateTime = doCatsRef.getTriageDateTime();
			if (triageDateTime != null)
				voReferralBooking.setTriageDateTime(new ims.framework.utils.DateTime(triageDateTime));

			ReferralLetterDetailsBookingVo voReferralLetterDetail = ReferralLetterDetailsBookingVoAssembler.create(doCatsRef.getReferralDetails());
			
			if (voReferralLetterDetail != null)
			{
				if (doCatsRef.getContract()!=null)//WDEV-11713
				{
					voReferralLetterDetail.setDayTo1stApp(doCatsRef.getContract().getDaysTo1stAppt());//WDEV-11713
					voReferralLetterDetail.setDaysToRTTBreachDate(doCatsRef.getContract().getDaysToRTTBreachDate());//WDEV-11713
				}
				ExclusionDatesVo voExDate = listExclusionDates();
				
				// WDEV-13456
				// KPI dates are calculated based on days till first appointment
				if (voReferralLetterDetail.getDayTo1stAppIsNotNull())
				{
					Date[] arrDates = ExclusionDatesVo.getKPIDays(voReferralLetterDetail.getDateReferralReceived(), voReferralLetterDetail.getDayTo1stApp(), voExDate != null ? voExDate.getDates() : null, true);//WDEV-11713 & WDEV-12918
					voReferralLetterDetail.setKPIDays(arrDates);
					if (voReferralLetterDetail.getDateReferralReceivedIsNotNull())
						voReferralLetterDetail.setEndXdayKPI(ExclusionDatesVo.addBusinessDays(voReferralLetterDetail.getDateReferralReceived(), voReferralLetterDetail.getDayTo1stApp(), voExDate != null ? voExDate.getDates() : null, true));//WDEV-11713 & WDEV-12918
					voReferralBooking.setReferralLetterDetail(voReferralLetterDetail);
				}
			}
			
			//WDEV-18411
			if (doCatsRef.getReferralCategory() != null)
			{	
				voReferralBooking.setReferralCategory(LookupHelper.getCatsReferralCategoryInstance(getLookupService(), doCatsRef.getReferralCategory().getId()));
			}
		}

		// CurrentAppts - appts with status of appt_booked for Referral
		List currentAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.apptStatus = :bookedStatus and appt.theatreBooking is null )", new String[]{"idCatsRef", "bookedStatus"}, new Object[]{catsReferral.getID_CatsReferral(), getDomLookup(Status_Reason.BOOKED)});
		voReferralBooking.setCurrentAppointments(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(currentAppts));

		// Appts Requiring Rebook for Referral
		List rebookAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.requiresRebook = 1  and appt.theatreBooking is null )", new String[]{"idCatsRef"}, new Object[]{catsReferral.getID_CatsReferral()});
		voReferralBooking.setAppointmentsRequiringRebook(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(rebookAppts));

		//Theatre Appts - WDEV-7653
		List theatreAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.theatreBooking <> null )", new String[]{"idCatsRef"}, new Object[]{catsReferral.getID_CatsReferral()});
		voReferralBooking.setOtherAppointments(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(theatreAppts));
		
		// Invs Requiring an appt - For the CatsReferral - orderInvestigations
		// that are in the InvestigationOrders Collection and not in the
		// collection of OrderInvAppt
		List ordInvs = listInvsRequiringAppt(catsReferral, factory);
		voReferralBooking.setOrdersRequiringAppt(OrderInvestigationBookingVoAssembler.createOrderInvestigationBookingVoCollectionFromOrderInvestigation(ordInvs));
		
		voReferralBooking.setReferralEROD(getLastOutpatientEROD(catsReferral));
		
		if(doCatsRef != null && doCatsRef.getJourney() != null && doCatsRef.getJourney().getCurrentClock() != null)
		{
			voReferralBooking.setCurrentClock(new PathwayClockRefVo(doCatsRef.getJourney().getCurrentClock().getId(), doCatsRef.getJourney().getCurrentClock().getVersion()));
		}
		
		voReferralBooking.setIsCAB(doCatsRef.isIsCAB());
		
		return voReferralBooking;
	}

	// Invs Requiring an appt - For the CatsReferral - orderInvestigations that
	// are in the InvestigationOrders Collection and not in the collection of
	// OrderInvAppt
	private List listInvsRequiringAppt(ims.RefMan.vo.CatsReferralRefVo catsReferral, DomainFactory factory)
	{
		String hql = "select ordInv from CatsReferral as catsRef " + "join catsRef.investigationOrders as ocsOrder join ocsOrder.investigations as ordInv left join ordInv.investigation.providerService as provService left join provService.locationService.service as service " + "where (catsRef.id = :idCatsRef and (service.canBeScheduled = 1  ) " + "and ordInv.id not in " + "(select ordInv1.id from CatsReferral as catsRef1 " + "join  catsRef1.orderInvAppts as ordInvAppt " + "join ordInvAppt.orderInvestigation as ordInv1" + " where catsRef1.id = :idCatsRef) and ordInv.ordInvCurrentStatus.ordInvStatus.id not in (:cancelled,:cancelledrequest))";
		return factory.find(hql, new String[]{"idCatsRef", "cancelled", "cancelledrequest"}, new Object[]{catsReferral.getID_CatsReferral(), OrderInvStatus.CANCELLED.getID(), OrderInvStatus.CANCEL_REQUEST.getID()});
	}

	/**
	 * listExclusionDates
	 */
	public ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		ExclusionDates impl = (ExclusionDates) getDomainImpl(ExclusionDatesImpl.class);
		return impl.listExclusionDates();
	}

	// WDEV-5283 was an incorrect issue - have rolled back to the original implementation (dlaffan)
	private void cancelPublishedSlots(Session_Slot doSessionSlot) throws StaleObjectException
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		impl.cancelSlot(SessionSlotVoAssembler.create(doSessionSlot), ActionRequestType.NOTIFY_SLOT_CANCEL, "Cancel Slot requested as Appointment Booked");
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionsLite(ServiceRefVo service)
	{
		ReferralDetailsComponent impl = (ReferralDetailsComponent) getDomainImpl(ReferralDetailsComponentImpl.class);
		return impl.listServiceFunctionsLite(service);
	}

	public Sch_BookingVo getSch_BookingByAppt(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided for method getSch_BookingByAppt");

		Sch_BookingVo voBooking = null;
		List bookings = getDomainFactory().find("select book from Sch_Booking book left join book.appointments as appt where appt.id = '" + appt.getID_Booking_Appointment() + "'");
		if (bookings != null && bookings.size() == 1)
		{
			voBooking = Sch_BookingVoAssembler.create((Sch_Booking) bookings.get(0));
			if (voBooking != null && voBooking.getAppointments() != null)
			{
				for (int i = 0; i < voBooking.getAppointments().size(); i++)
				{
					// SITE-508 get the associatedOrderInv at this point if any
					setOrderInvAppt(voBooking.getAppointments().get(i));
				}
			}
			return voBooking;
		}

		return null;
	}

	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided for method getBookingAppointment");

		Booking_AppointmentVo voAppt = Booking_AppointmentVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
		// SITE-508 get the associatedOrderInv at this point if any
		setOrderInvAppt(voAppt);

		return voAppt;
	}

	// getting the order inv for this appt if any
	private void setOrderInvAppt(Booking_AppointmentVo voAppt)
	{
		if (voAppt == null)
			return;

		List ordInvAppts = getDomainFactory().find("from OrderInvAppt invAppt where invAppt.appointment.id = '" + voAppt.getID_Booking_Appointment() + "'");
		if (ordInvAppts != null && ordInvAppts.size() == 1)
		{
			OrderInvAppt doOrdInvAppt = (OrderInvAppt) ordInvAppts.get(0);
			voAppt.setOrderInvestigation(OrderInvestigationBookingVoAssembler.create(doOrdInvAppt.getOrderInvestigation()));
		}
	}

	public ServiceShortVoCollection listActiveService()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		ServiceShortVo voService = new ServiceShortVo();
		voService.setIsActive(Boolean.TRUE);
		return impl.listService(voService);
	}

	public ProfileLiteVoCollection listProfileLiteByService(ServiceRefVo service)
	{
		if (service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service parameter null or id not provided for listSessionLiteByService");

		DomainFactory factory = getDomainFactory();
		List profiles = factory.find("from Sch_Profile prof where prof.service.id = :idService", new String[]{"idService"}, new Object[]{service.getID_Service()});
		return ProfileLiteVoAssembler.createProfileLiteVoCollectionFromSch_Profile(profiles);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral);
		
		updateActiveMonitoring(catsReferral);
	}

	private void updateActiveMonitoring(CatsReferralRefVo catsReferral) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		if (doCatsReferral.getCurrentStatus() != null
			&& doCatsReferral.getCurrentStatus().getReferralStatus().equals(getDomLookup(ReferralApptStatus.ACTIVE_MONITORING))
			&& doCatsReferral.isIsActiveMonitorApptRequired().booleanValue())
		{
			doCatsReferral.setIsActiveMonitorApptRequired(Boolean.FALSE);

			factory.save(doCatsReferral);
		}
	}

	public void addSlotToSession(SessionShortVo session, SessionSlotVo slot) throws StaleObjectException
	{
		if (session == null || slot == null)
			throw new CodingRuntimeException("session or slot is null in method addSlotToSession");

		DomainFactory factory = getDomainFactory();
		Session_Slot doSlot = SessionSlotVoAssembler.extractSession_Slot(factory, slot);
		doSlot.setDirectAccessSlot(getDomLookup(SchedCABSlotType.LOCAL));
		Sch_Session doSession = (Sch_Session) factory.getDomainObject(session);
		doSession.getSessionSlots().add(doSlot);
		factory.save(doSession);
	}

	/**
	 * NB - This method is called from a web service and therefore should only
	 * be modified with extreme caution (dlaffan)
	 * 
	 * WDEV-7448 - If PukkaJ interface is enabled this method will attempt to
	 * send a cancel message to PukkaJ by creating an entry in OcsExternalEvent
	 * 
	 * @param doCatsReferral
	 * @param voAppt
	 * @throws StaleObjectException
	 */
	public void cancelAppointmentForPukkaJ(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo appt) throws StaleObjectException
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method processAppointmentForPukkaJ");
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method processAppointmentForPukkaJ");

		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);

		if (doCatsReferral.getContract() != null
				&& doCatsReferral.getContract().getContractType() != null
				&& doCatsReferral.getContract().getContractType().getId() != ReferralManagementContractType.DIAGNOSTIC.getId())
				return;

		Booking_Appointment doAppt = (Booking_Appointment) factory.getDomainObject(appt);

		if (doCatsReferral.getAppointments().size() > 0)
		{
			Iterator it = doCatsReferral.getAppointments().iterator();

			if (doAppt.getApptStatus() != null && (doAppt.getApptStatus().equals(getDomLookup(Status_Reason.CANCELLED))))
			{
				if (countExistingReferralAppts(doCatsReferral, Status_Reason.BOOKED) == 0)
				{
					Iterator itOrdInvA = doCatsReferral.getOrderInvAppts().iterator();
					OrderInvAppt doOrdInvAppt = null;
					if(itOrdInvA.hasNext())
						doOrdInvAppt = (OrderInvAppt) itOrdInvA.next();
					
					//WDEV-7448 - null pointer fix here - code was presuming that an ordInvAppt always exists
					if(doOrdInvAppt != null)
					{
						doOrdInvAppt.getOrderInvestigation().setAppointmentDate(null);
						factory.save(doOrdInvAppt.getOrderInvestigation());
						doCatsReferral.getOrderInvAppts().remove(doOrdInvAppt);
						try
						{
							factory.delete(doOrdInvAppt);
						}
						catch (ForeignKeyViolationException e)
						{
							throw new DomainRuntimeException(e.getMessage());
						}
						factory.save(doCatsReferral);
				
					
						OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
						impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doAppt.getId(), doAppt.getVersion()), new OrderInvestigationRefVo(doOrdInvAppt.getOrderInvestigation().getId(), doOrdInvAppt.getOrderInvestigation().getVersion()));
					}
				}
			}
		}
		
	}

	public PatientICPFullVo getPatientICP(CareContextRefVo careCOntextRefVo)
	{
		if(careCOntextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from PatientICP pICP where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " pICP.careContext.id = :pICPID");
 			markers.add("pICPID");
			values.add(careCOntextRefVo.getID_CareContext());
			andStr = " and ";	

			hql.append(andStr + " pICP.completedDateTime = null");
 			andStr = " and ";	

			List listAdditional = factory.find(hql.toString(), markers,values);
			if(listAdditional != null && listAdditional.size() > 0)
			{ 
				PatientICPFullVoCollection voColl = PatientICPFullVoAssembler.createPatientICPFullVoCollectionFromPatientICP(listAdditional);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public PatientICPFullVo savePatientICP(PatientICPFullVo pateintICPVo) throws DomainInterfaceException, StaleObjectException 
	{
		if(pateintICPVo == null)
			throw new CodingRuntimeException("Invalid patientICPVo");
		if(!pateintICPVo.isValidated())
			throw new CodingRuntimeException("patientICPVo not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientICP domainObject = PatientICPFullVoAssembler.extractPatientICP(factory, pateintICPVo);
		
		factory.save(domainObject);
		
		return PatientICPFullVoAssembler.create(domainObject);
	}

	//WDEV-10010
	public LocationLiteVoCollection listLocationLiteForReferralContract(CatsReferralRefVo referral)
	{
		SelectandOrder impl = (SelectandOrder) getDomainImpl(SelectandOrderImpl.class);
		return impl.listLocationLiteForReferralContract(referral,true); //WDEV-10431
	}

	//wdev-12826
	public CatsReferralListVo getCatsReferral(CatsReferralRefVo catsrefVo) {
		// TODO Auto-generated method stub
		return CatsReferralListVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, catsrefVo.getID_CatsReferral()));
	}

	/**
	 * Function used to check if a referral has 'Safety questionnaire' completed for the modality (Speciality) given
	 */
	public Boolean hasSafetyQuestionnarie(CatsReferralRefVo referral, ServiceRefVo service)
	{
		if (referral == null || service == null)
			throw new CodingRuntimeException("Can not retrieve 'Safety Questionnaire' for null referral or null service.");
		
		
		StringBuilder query = new StringBuilder();
		
		query.append("SELECT COUNT (docs.id) FROM PatientDocument AS docs LEFT JOIN docs.careContext AS docContext LEFT JOIN docs.services AS service, ");
		query.append(" CatsReferral AS referral LEFT JOIN referral.careContext AS refContext ");
		query.append(" WHERE docContext.id = refContext.id AND referral.id = :REF_ID AND service.id = :SRV_ID ");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("REF_ID");	paramValues.add(referral.getID_CatsReferral());
		paramNames.add("SRV_ID");	paramValues.add(service.getID_Service());
		
		long count = getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray());

		if (count > 0)
			return Boolean.TRUE;
		
		return Boolean.FALSE;
	}

	public ReferralERODVo getLastOutpatientEROD(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List lastOutpatientErod = factory.find("select outErod from CatsReferral as cats left join cats.outpatientEROD as outErod where cats.id = :CatsReferralId and (outErod.isRIE is null or outErod.isRIE = 0) and outErod.sequence = (select max(outErodSec.sequence) from CatsReferral as catsSec left join catsSec.outpatientEROD as outErodSec where catsSec.id = :CatsReferralId and (outErodSec.isRIE is null or outErodSec.isRIE = 0))", new String[] {"CatsReferralId"}, new Object[] {catsReferral.getID_CatsReferral()});
			
		if(lastOutpatientErod != null && lastOutpatientErod.size() > 0 && lastOutpatientErod.get(0) instanceof ReferralEROD)
		{
			return ReferralERODVoAssembler.create((ReferralEROD) lastOutpatientErod.get(0));
		}
			
		return null;
	}
	
	public ReferralEROD getLastSavedOutpatientEROD(CatsReferral catsReferralDO)
	{
		if(catsReferralDO == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List<?> lastOutpatientErod = factory.find("select outErod from CatsReferral as cats left join cats.outpatientEROD as outErod where cats.id = :CatsReferralId and (outErod.isRIE is null or outErod.isRIE = 0) and outErod.sequence = (select max(outErodSec.sequence) from CatsReferral as catsSec left join catsSec.outpatientEROD as outErodSec where catsSec.id = :CatsReferralId and (outErodSec.isRIE is null or outErodSec.isRIE = 0))", new String[] {"CatsReferralId"}, new Object[] {catsReferralDO.getId()});
			
		if(lastOutpatientErod != null && lastOutpatientErod.size() > 0 && lastOutpatientErod.get(0) instanceof ReferralEROD)
		{
			return (ReferralEROD) lastOutpatientErod.get(0);
		}
			
		return null;
	}
	
	public synchronized Sch_BookingVo saveBooking(Sch_BookingVo voBooking,	CatsReferralRefVo catsRef,	Boolean isRebook, ReferralERODForBookAppointmentVoCollection outpatientERODCollection, Boolean isERODUpdatedOnBooking) throws DomainInterfaceException, StaleObjectException
	{
		if (voBooking == null)
			throw new CodingRuntimeException("voBooking is null in method saveBooking");

		DomainFactory factory = getDomainFactory();
		
		if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			if (catsRef != null && catsRef.getID_CatsReferralIsNotNull())
			{
				
			String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
					" CatsReferral as cats left join cats.careContext as catsCC " +
					"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
			long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsRef.getID_CatsReferral()});
			if (count > 0 )
				throw new DomainInterfaceException("Can not book an appointment on a referral that has a linked ICP that is Closed");
			}
		}
		
		//wdev-12090
		if((isRebook != null && isRebook == true) && voBooking.getSessionSlotDNAIsNotNull())
		{
			SessionSlotVo sessionSlot = voBooking.getSessionSlotDNA();
			 
			sessionSlot.setAppointment(null);
			Session_Slot doSessionSlot = SessionSlotVoAssembler.extractSession_Slot(factory, sessionSlot);
			factory.save(doSessionSlot);
		}
		//-------------
		
		
		// OrdInvAppt
		OrderInvApptVoCollection voCollOrdInvAppt = getOrdinvApptCollection(voBooking);
		HashMap objMap = new HashMap();
		Set doOrderInvAppts = OrderInvApptVoAssembler.extractOrderInvApptSet(factory, voCollOrdInvAppt, null, objMap);
		Sch_Booking doBooking = Sch_BookingVoAssembler.extractSch_Booking(factory, voBooking, objMap);

		// If CatsReferral record is in scope ie. Appointment booked through UI
		// associate the created appointments with the catsReferral record and
		// patient from cats referral with booking
		CatsReferral doCatsReferral = null;
		if (catsRef != null && catsRef.getID_CatsReferralIsNotNull())
		{
			doCatsReferral = (CatsReferral) factory.getDomainObject(catsRef);
			doBooking.setPatient(doCatsReferral.getPatient());
		}

		icabBooking = false;
		Booking_Appointment doConsultationAppt = arrangeAppointmentsInReferralAndSavePatient(doBooking, doCatsReferral);
		factory.save(doBooking);
		
		
		if (doCatsReferral != null)
		{
			doCatsReferral.getAppointments().addAll(doBooking.getAppointments());
			doCatsReferral.getOrderInvAppts().addAll(doOrderInvAppts);
			
			//WDEV-18421
			ReferralEROD doRefEROD = getLastSavedOutpatientEROD(doCatsReferral);
			
			// WDEV-5727 - consultation appt
			doCatsReferral.setConsultationAppt(doConsultationAppt);
			// WDEV-5727 - has appointments
			doCatsReferral.setHasAppointments(true);
			
			if(outpatientERODCollection != null && outpatientERODCollection.size() > 0)
			{
				doCatsReferral.setOutpatientEROD(createdReferralERODCollection(factory, doCatsReferral.getOutpatientEROD(), outpatientERODCollection, objMap));
			}
			
			//WDEV-18421 
			Booking_Appointment firstApptDO = getFirstAppointmentBooking(doBooking);
			boolean isRTTApplicable = ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && Boolean.TRUE.equals(doCatsReferral.isRTTClockImpact());
			
			if (isRTTApplicable && firstApptDO != null)
			{					
				createNewPathwayClock(doCatsReferral,firstApptDO);
			}			
						
			if (doCatsReferral!= null && firstApptDO != null && isERODUpdatedOnBooking)
			{	
				 doRefEROD.setAppointment(firstApptDO);
				 factory.save(doRefEROD);
			}
			
			factory.save(doCatsReferral);
		}
		
		if(doCatsReferral != null
			&& doCatsReferral.getContract() != null
			&& doCatsReferral.getContract().getContractType() != null
			&& doCatsReferral.getContract().getContractType().getId() == ReferralManagementContractType.DIAGNOSTIC.getId())
		{
			//for linking in the maxims UI
			if(icabBooking == false)
			{
				if(doOrderInvAppts != null)
				{
					OrderInvAppt doOrdInvA = null;
					if(doOrderInvAppts.size() > 0)
					{
						Iterator it = doOrderInvAppts.iterator();
						if(it.hasNext())
						{
							doOrdInvA = (OrderInvAppt) it.next();
						}
					}
					if(doOrdInvA != null)
					{
						OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
						impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doOrdInvA.getAppointment().getId(), doOrdInvA.getAppointment().getVersion()), new OrderInvestigationRefVo(doOrdInvA.getOrderInvestigation().getId(), doOrdInvA.getOrderInvestigation().getVersion()));
					}
				}
			}
		}
		else
			RefManMessaging(isRebook, factory, doOrderInvAppts, doBooking, doCatsReferral);
		
		
		// WDEV-5283 - only if not booked through ICAB
		if (ConfigFlag.GEN.ICAB_ENABLED.getValue())
		{
			Iterator it = doBooking.getAppointments().iterator();
			while (it.hasNext())
			{
				Booking_Appointment doAppt = (Booking_Appointment) it.next();
				if (doAppt.getSessionSlot() != null)
					cancelPublishedSlots(doAppt.getSessionSlot());
			}
		}

		// booking is from CAB, we need to see if we need to create a referral
		// record
		if (icabBooking)
			checkReferral(factory, doBooking);

//		WDEV-15944 Is it possible to create a pathway event based on this booking?
		if (ConfigFlag.DOM.INSTANTIATE_EVENT_FROM_SCHEDULING.getValue())
		{
			ims.scheduling.domain.BookAppointment impl = (ims.scheduling.domain.BookAppointment) getDomainImpl(ims.scheduling.domain.impl.BookAppointmentImpl.class);
			impl.instantiateEvent(Booking_AppointmentVoAssembler.create(doBooking.getFirstAppointment()),isRebook?"R":"B", "Booking from Appointment Booking form");
		}
		return Sch_BookingVoAssembler.create(doBooking);
	}

	private Booking_Appointment getFirstAppointmentBooking(Sch_Booking doBooking)
	{
		if (doBooking != null && doBooking.getAppointments() != null)
		{
			if (doBooking.getAppointments().size() == 1)
			{
				Booking_Appointment firstAppt = (Booking_Appointment) doBooking.getAppointments().iterator().next();
				if (firstAppt.getActivity() != null && Boolean.TRUE.equals(firstAppt.getActivity().isFirstAppointment()))
				{
					return firstAppt;
				}
			}
		}
		return null;
	}
	
	
	private void createNewPathwayClock(CatsReferral doCatsReferral, Booking_Appointment doAppt) throws DomainInterfaceException, StaleObjectException //WDEV-18421 
	{
		if (doCatsReferral == null || doCatsReferral.getJourney() == null)
			return;	
		
		PatientPathwayJourney journeyDO = doCatsReferral.getJourney();
		PathwayClock currentClockDO = doCatsReferral.getJourney().getCurrentClock();
		
		if (currentClockDO == null || (currentClockDO != null && currentClockDO.getStopDate() != null))
		{
			int X = getNumberOfClocks(journeyDO.getClockHistory());

			PathwayClock newClockDO = new PathwayClock ();
			newClockDO.setExtClockId("MAXIMS_" + X);
			newClockDO.setExtClockName("MaximsClock_" + X);
			newClockDO.setStartDate(doAppt.getAppointmentDate());
			
			journeyDO.setCurrentClock(newClockDO);
			
			PathwayRTTStatus rttStatus = createPathwayRTTStatus(doCatsReferral);
			
			doCatsReferral.setCurrentRTTStatus(rttStatus);
			getDomainFactory().save(journeyDO);
					
			if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && Boolean.TRUE.equals(doCatsReferral.isRTTClockImpact()))
			{
				RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
				
				if(rttMap != null && rttMap.getEvent() != null)
				{
					PatientEventVo patEvent = new PatientEventVo();
					patEvent.setPatient((PatientRefVo)PatientListVoAssembler.create(doCatsReferral.getPatient()));
					patEvent.setEvent(rttMap.getEvent());
					patEvent.setEventDateTime(new DateTime());
					patEvent.setEventStatus(EventStatus.ACTIVE);
					patEvent.setJourney(PatientJourneyVoAssembler.create(doCatsReferral.getJourney()));
					
					HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
					impl.instantiatePatientEvent(patEvent);
				}
			}

		}
	} 

	private int getNumberOfClocks(Set clockHistory)
	{
		int X = 0;

		if(clockHistory == null || clockHistory.size() == 0)
			return ++X;

		Iterator iterator = clockHistory.iterator();
		while(iterator.hasNext()) 
		{
			X++;
			iterator.next();
		}

		return ++X;
	}
	public ReferralERODVo getReferralERODByAppointment(Booking_AppointmentRefVo apptRef)
	{
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select erod from ReferralEROD as erod left join erod.appointment as appt where appt.id = :BookAppointment";
		List<?> list = factory.find(query, new String[] {"BookAppointment"}, new Object[] {apptRef.getID_Booking_Appointment()});
		
		if(list != null && list.size() > 0 && list.get(0) != null)
		{
			return ReferralERODVoAssembler.create((ReferralEROD) list.get(0));
		}
		
		return null;
	}

	public Boolean checkIfThereIsFirstApptPerClock(CatsReferralRefVo catsReferral, Boolean areFirstAppointmentsLocally, SessionSlotListVo sessionSlot)
	{
		if(sessionSlot == null || sessionSlot.getID_Session_Slot() == null)
			return false;
		
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		Session_Slot doSessionSlot = (Session_Slot) factory.getDomainObject(Session_Slot.class, sessionSlot.getID_Session_Slot());
		
		if(doSessionSlot != null && doSessionSlot.getActivity() != null)
		{
			if(doSessionSlot.getActivity().isFirstAppointment() == null || Boolean.FALSE.equals(doSessionSlot.getActivity().isFirstAppointment()))
				return false;
			else if(Boolean.TRUE.equals(doSessionSlot.getActivity().isFirstAppointment()))
			{
				if(Boolean.TRUE.equals(areFirstAppointmentsLocally))
					return true;
				else
				{
					String query = "select appt from CatsReferral as cats left join cats.appointments as appt left join appt.pathwayClock as apptClock left join cats.journey as catsJourney left join catsJourney.currentClock as catsCurrentClock left join appt.apptStatus as apptStatus left join appt.sessionSlot as apptSessionSlot left join apptSessionSlot.activity as apptActivity where cats.id = :CatsReferralId and (apptStatus.id not in (" + Status_Reason.CANCELLED.getID() + "," + Status_Reason.DNA.getID() + ") and not (apptStatus.id = " + Status_Reason.ARRIVAL.getID() + " and appt.outcome is not null)) and catsCurrentClock.id = apptClock.id and apptActivity.firstAppointment = 1";
					List<?> apptList = factory.find(query, new String[] {"CatsReferralId"}, new Object[] {catsReferral.getID_CatsReferral()}); 
					
					return apptList != null && apptList.size() > 0;
				}
			}	
		}
		
		return false;
	}

	//WDEV-18411 
	public HcpLiteVoCollection listClinicsListOwners(HcpFilter filter)
	{
		SessionDetailsEdit impl = (SessionDetailsEdit) getDomainImpl(ims.scheduling.domain.impl.SessionAdminImpl.class);

		return impl.listHcpLite(filter);
	}

	
}
