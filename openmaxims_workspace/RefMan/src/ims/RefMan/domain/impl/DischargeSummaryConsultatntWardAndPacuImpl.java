// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3547.20232)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseDischargeSummaryConsultatntWardAndPacuImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.DischargeSummaryPacuAndWard;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.DischargeSummaryPacuAndWardVo;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.DischargeSummaryPacuAndWardLiteVoAssembler;
import ims.RefMan.vo.domain.DischargeSummaryPacuAndWardVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.pas.domain.objects.InpatientEpisode;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientDocumentSaveVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.domain.CareContextLiteVoAssembler;
import ims.core.vo.domain.EpisodeofCareLiteVoAssembler;
import ims.core.vo.domain.InpatientEpisodeVoAssembler;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.DocumentCategory;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;
 
public class DischargeSummaryConsultatntWardAndPacuImpl extends BaseDischargeSummaryConsultatntWardAndPacuImpl
{

	private static final long serialVersionUID = 1L;

	//WDEV-12134
	public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection listDischargeSummaryCollection(ims.RefMan.vo.CatsReferralRefVo referral)
	{
		if (referral == null || !referral.getID_CatsReferralIsNotNull())
			return null;
		
		String query = "select discharge from DischargeSummaryPacuAndWard as discharge left join discharge.catsReferral as referral where referral.id = :REF_ID or (referral.patient.id = (select pat.id from CatsReferral as cats left join cats.patient as pat where cats.id = :REF_ID) and discharge.isCurrent = 1) order by discharge.systemInformation.creationDateTime desc";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("REF_ID");
		paramValues.add(referral.getID_CatsReferral());
		
		return DischargeSummaryPacuAndWardLiteVoAssembler.createDischargeSummaryPacuAndWardLiteVoCollectionFromDischargeSummaryPacuAndWard(getDomainFactory().find(query, paramNames, paramValues));
	}

	public ims.RefMan.vo.DischargeSummaryPacuAndWardVo getDischargeSummary(ims.RefMan.vo.DischargeSummaryPacuAndWardRefVo dischargeRef)
	{
		if (dischargeRef == null || !dischargeRef.getID_DischargeSummaryPacuAndWardIsNotNull())
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		return DischargeSummaryPacuAndWardVoAssembler.create((DischargeSummaryPacuAndWard) factory.getDomainObject(DischargeSummaryPacuAndWard.class, dischargeRef.getID_DischargeSummaryPacuAndWard()));
	}

	public ims.RefMan.vo.DischargeSummaryPacuAndWardVo save(ims.RefMan.vo.DischargeSummaryPacuAndWardVo dischargeSummary) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (dischargeSummary == null)
			throw new CodingRuntimeException("Logical error - discharge summary is null in domain.save");
		
		if (!dischargeSummary.isValidated())
			throw new CodingRuntimeException("Logical error - Validate the Vo before saving");
		
		DomainFactory factory = getDomainFactory();
		DischargeSummaryPacuAndWard domDischargeSummary = DischargeSummaryPacuAndWardVoAssembler.extractDischargeSummaryPacuAndWard(factory, dischargeSummary);
		
		factory.save(domDischargeSummary);
		
		return DischargeSummaryPacuAndWardVoAssembler.create(domDischargeSummary);
	}

	public ims.core.vo.InpatientEpisodeVo getInpatientEpisode(ims.RefMan.vo.CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("Logical error - provided referral is null or has no id");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "from InpatientEpisode as ip where (ip.pasEvent.patient.id in (select cr.patient.id from CatsReferral as cr where cr.id = :refID))";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(referral.getID_CatsReferral());
		
		List list = factory.find(hql, paramNames, paramValues);
		
		if (list != null && list.size() > 0)
			return InpatientEpisodeVoAssembler.create((InpatientEpisode) list.get(0));
		
		return null;
	}

	public CareContextRefVo getCareContextRef(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("Logical error - referral is null or missing ID");
		
		String hql = "from CareContext as care where (care.id in (select cr.careContext.id from CatsReferral as cr where cr.id = :refID))";

		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(referral.getID_CatsReferral());
		
		DomainFactory factory = getDomainFactory();
		
		return CareContextLiteVoAssembler.create((CareContext) (factory.find(hql, paramNames, paramValues)).get(0));
	}

	public EpisodeOfCareRefVo getEpisodeOfCareRef(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("Logical error - referral is null or missing ID");
		
		String hql = "from EpisodeOfCare as ep where (ep.id in (select cr.careContext.episodeOfCare.id from CatsReferral as cr where cr.id = :refID))";

		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(referral.getID_CatsReferral());
		
		DomainFactory factory = getDomainFactory();

		return EpisodeofCareLiteVoAssembler.create((EpisodeOfCare) factory.find(hql, paramNames, paramValues).get(0));
	}

	public PatientRefVo getPatientRef(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("Logical error - referral is null or missing ID");
		
		String hql = "from Patient as pat where (pat.id in (select cr.patient.id from CatsReferral as cr where cr.id = :refID))";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("refID");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(referral.getID_CatsReferral());
		
		DomainFactory factory = getDomainFactory();
		
		return PatientShortAssembler.create((Patient) (factory.find(hql, paramNames, paramValues)).get(0));
	}

	public String[] getSystemReportAndTemplate(Integer imsID)
	{
		String[] result = null;
		
		DomainFactory factory = getDomainFactory();
		
		List list = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsID});

		if(list.iterator().hasNext())
		{
			Object[] obj = (Object[])list.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	public void saveReport(PatientDocumentVo document, CatsReferralRefVo referral) throws StaleObjectException
	{
		if (document != null)
		{
			if (!document.isValidated())
				throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		
		PatientDocument domDocument = PatientDocumentVoAssembler.extractPatientDocument(factory, document);
		
		factory.save(domDocument);
		
		CatsReferral domCats = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
		
		domCats.getReferralDocuments().add(domDocument);
		
		//wdev-8305
		if (document.getCategoryIsNotNull()
			&& document.getCategory().equals(DocumentCategory.DISCHARGE_SUPPLEMENTARY))
			domCats.setRequiresDischargeRep(Boolean.FALSE);
		
		factory.save(domCats);
		
		PatientDocumentSaveVo vo = new PatientDocumentSaveVo();
		vo.setPatientDocumentVo(PatientDocumentVoAssembler.create(domDocument));
		vo.setCatsReferralWizardVo(CatsReferralWizardVoAssembler.create(domCats));
	}

	public CatsReferralWizardVo saveCatsReferral(CatsReferralWizardVo record) throws DomainInterfaceException, StaleObjectException 
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.saveCatsReferral(record);
	}

	public DischargeSummaryPacuAndWardVo saveDischargeSummaryWardAndPacuPlusCatsReferral(DischargeSummaryPacuAndWardVo dischargeSummary, CatsReferralWizardVo voCatsReferralWizard) throws DomainInterfaceException, StaleObjectException 
	{
		if (dischargeSummary == null)
			throw new CodingRuntimeException("Logical error - discharge summary is null in domain.save");
		
		if (!dischargeSummary.isValidated())
			throw new CodingRuntimeException("Logical error - Validate the Vo before saving");
		
		DomainFactory factory = getDomainFactory();
		if (voCatsReferralWizard != null)
		{
			if (voCatsReferralWizard == null)
				throw new CodingRuntimeException("Logical error - Cats Referral is null in domain.");
			
			if (!voCatsReferralWizard.isValidated())
				throw new CodingRuntimeException("Logical error - Validate the Cats Referral Vo before saving");

			ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
			impl.saveCatsReferral(voCatsReferralWizard);
		}

		DischargeSummaryPacuAndWard domDischargeSummary = DischargeSummaryPacuAndWardVoAssembler.extractDischargeSummaryPacuAndWard(factory, dischargeSummary);
		
		factory.save(domDischargeSummary);
		
		return DischargeSummaryPacuAndWardVoAssembler.create(domDischargeSummary);
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo voCatsRef) 
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.getCatsReferral(voCatsRef);
	}

	public Boolean hasInpatientEpisode(PatientRefVo patient)
	{
		if (patient == null || !patient.getID_PatientIsNotNull())
			throw new DomainRuntimeException("Invalid patient record in domain");
		
		String query = "select count(inpatient) from InpatientEpisode as inpatient left join inpatient.pasEvent as pas left join pas.patient as patient where patient.id = :PAT_ID";
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("PAT_ID");
		paramValues.add(patient.getID_Patient());
		
		@SuppressWarnings("unchecked")
		List<Object> results = getDomainFactory().find(query, paramNames, paramValues);
		
		if (results == null || results.size() == 0)
			return Boolean.FALSE;
		
		if(results.size() > 0 && results.get(0) instanceof Long && (Long)(results.get(0)) > 0)
			return Boolean.TRUE;

		return Boolean.FALSE;
	}
}
