// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3159.24578)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseReferralDetailsComponentImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ReferralService;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVoCollection;
import ims.RefMan.vo.ContractConfigurationVoCollection;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVoCollection;
import ims.RefMan.vo.ReferralServiceFullVo;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.ContractConfigForReferralDetailsComponentVoAssembler;
import ims.RefMan.vo.domain.ContractConfigurationVoAssembler;
import ims.RefMan.vo.domain.ReferralServiceFullVoAssembler;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.clinical.vo.ReferralLetterDetailsVo;
import ims.clinical.vo.domain.ReferralLetterDetailsVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.clinical.domain.objects.ReferralLetterDetails;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ReferralLetterDetailsRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.vo.ContractConfigRefVo;
import ims.core.configuration.vo.ContractConfigRefVoCollection;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.domain.objects.Organisation;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.resource.place.vo.OrganisationRefVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.OrgShortVo;
import ims.core.vo.OrganisationLiteVo;
import ims.core.vo.OrganisationVoCollection;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.GpShortVoAssembler;
import ims.core.vo.domain.LocSiteVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceFunctionLiteVoAssembler;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.DirectoryOfServiceAdmin;
import ims.scheduling.domain.impl.DirectoryOfServiceAdminImpl;
import ims.scheduling.domain.objects.SessionExclusionDate;
import ims.scheduling.vo.domain.ExclusionDatesVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class ReferralDetailsComponentImpl extends BaseReferralDetailsComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.ServiceShortVoCollection getActiveServices()
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc = new IMSCriteria(Service.class, factory);
		imsc.equal("isActive", true);
		List services = imsc.find();
		if (!services.isEmpty())
			return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services);
		return null;
	}

	public ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		DomainFactory factory = getDomainFactory();
		List exDate = factory.find("from SessionExclusionDate exDate");
		if (exDate.size() > 0)
			return ExclusionDatesVoAssembler.create((SessionExclusionDate) exDate.get(0));

		return null;
	}

	public ServiceFunctionLiteVoCollection listServiceFunctionsLite(ServiceRefVo service)
	{
		if (service == null || service.getID_Service() == null)
			throw new CodingRuntimeException("service is null or id not provided for method listServiceFunctionsLite");

		ServiceFunctionLiteVoCollection services = new ServiceFunctionLiteVoCollection();
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc = new IMSCriteria(ims.core.clinical.domain.objects.ServiceFunction.class, factory);
		imsc.equal("this.service.id", service.getID_Service());
		imsc.equal("this.isActive", true);
		List serviceFunctions = imsc.find();
		for (int i = 0; i < serviceFunctions.size(); i++)
		{
			services.add(ServiceFunctionLiteVoAssembler.create((ims.core.clinical.domain.objects.ServiceFunction) serviceFunctions.get(i)));
		}
		if (services.size() > 0)
			return services;
		return null;

	}

	public ReferralServiceFullVo getReferralServices()
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from ReferralService");

		List list = factory.find(hql.toString());
		if (list.size() > 0)
			return ReferralServiceFullVoAssembler.create((ReferralService) list.get(0));
		else
			return null;
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo catsReferral)
	{
		// If the argument is null or has no ID then return null;
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return null;

		// Return the corresponding record from database
		return CatsReferralWizardVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsReferral.getID_CatsReferral()));
	}

	public ReferralLetterDetailsVo getReferral(ReferralLetterDetailsRefVo referral)
	{
		if (referral == null || !referral.getID_ReferralLetterDetailsIsNotNull())
			return null;

		return ReferralLetterDetailsVoAssembler.create((ReferralLetterDetails) getDomainFactory().getDomainObject(referral));
	}

	public GpShortVo getPatientGP(Integer patientId)
	{
		DomainFactory factory = getDomainFactory();
		Patient pat = null;
		IMSCriteria imsc = new IMSCriteria(Patient.class, factory);
		imsc.equal("id", patientId);
		List patients = imsc.find();
		if (patients != null && patients.size() > 0)
		{
			pat = (Patient) patients.get(0);
			if (pat.getGp() != null)
				return GpShortVoAssembler.create(pat.getGp());
			else
				return null;
		}
		return null;

	}

	public ReferralLetterDetailsVo save(ReferralLetterDetailsVo referralDetailsVo, CatsReferralWizardVo catsReferralVo, Boolean bDiagnosticReferral) throws StaleObjectException
	{
		if (referralDetailsVo == null)
			throw new CodingRuntimeException("referralDetailsVo is null in method save");

		DomainFactory factory = getDomainFactory();

		if (bDiagnosticReferral)
			factory.setDirtyCheck(true);
		
		// WDEV-18452 - before save of the catsReferral, I need to hold onto the original Urgency value
		LookupInstance prevReferralUrgency=null;
		if (catsReferralVo.getID_CatsReferralIsNotNull())
		{
			CatsReferral domCatsRef = (CatsReferral)factory.getDomainObject(CatsReferral.class, catsReferralVo.getID_CatsReferral());
			prevReferralUrgency = domCatsRef.getUrgency();
		}
		

		//WDEV-11535
		EpisodeofCareShortVo voEpisodeOfCare = null;
		ReferralLetterDetailsVo voRLDOnDb = null; 		//wdev-12357
		if(catsReferralVo.getReferralDetails() != null)	//wdev-12357
			voRLDOnDb = ReferralLetterDetailsVoAssembler.create((ReferralLetterDetails) factory.getDomainObject(catsReferralVo.getReferralDetails()));	
		
		//WDEV-11535 if service is null set it to DAD again		
		if (voRLDOnDb != null && voRLDOnDb.getService() != null && referralDetailsVo != null && referralDetailsVo.getServiceIsNotNull() && voRLDOnDb.getService().getID_Service() != referralDetailsVo.getService().getID_Service())
			voEpisodeOfCare  = updateEpisodeOfCareSpecialty(catsReferralVo, referralDetailsVo, factory);
		
		if (catsReferralVo.getPathwayID() == null )
		{
			String orgCode = "";
			String szZeros = "";

			if (catsReferralVo.getReferralDetails() != null
				&& catsReferralVo.getReferralDetails().getReferrerType() != null)
			{
				if(catsReferralVo.getReferralTransfer()!=null && catsReferralVo.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER))//WDEV-18554
					orgCode = catsReferralVo.getReferralTransfer().getOTherOrganisationCode();
				else
					orgCode = catsReferralVo.getReferralDetails().getPCT();
			}
			
			if (orgCode.length() == 3)
				szZeros = "00000000000000000";
			else if (orgCode.length() == 4)
				szZeros = "0000000000000000";
			else if (orgCode.length() == 5)
				szZeros = "000000000000000";

			DecimalFormat myFormatter = new DecimalFormat(orgCode + szZeros);
			catsReferralVo.setPathwayID(myFormatter.format(catsReferralVo.getID_CatsReferral()));
		}

		CatsReferral doCats = CatsReferralWizardVoAssembler.extractCatsReferral(factory, catsReferralVo);

		ReferralLetterDetails doLetterDetail = ReferralLetterDetailsVoAssembler.extractReferralLetterDetails(factory, referralDetailsVo);
		factory.save(doLetterDetail);

		doCats.setReferralDetails(doLetterDetail);
		factory.save(doCats);

		if (doCats.getAppointments().size() > 0 && referralDetailsVo.getTransportRequiredIsNotNull())
			updateReferralAppointments(doCats, factory, referralDetailsVo.getTransportRequired());

		ArrayList lstDirtyProperties = null;
		if (bDiagnosticReferral)
		{
			// WDEV-7513
			lstDirtyProperties = factory.getDirtyProperties();
			factory.setDirtyCheck(false);
			if (referralDetailsVo.getID_ReferralLetterDetails() == null || (serviceWasChanged(lstDirtyProperties) && doCats.getInvestigationOrders().isEmpty()))
			{
				ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
				impl.pukkaJMessaging(doCats, true);
			}
		}

		//WDEV-11535
		ReferralLetterDetailsVo voReferralLetterDetail = ReferralLetterDetailsVoAssembler.create(doLetterDetail);
		voReferralLetterDetail.setEpisodeOfCare(voEpisodeOfCare);
		
		
		// WDEV-18452, WDEV-18548
		try 
		{
			ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
			ReferralUrgency prevUrgency=null;
			if (prevReferralUrgency != null)
				prevUrgency = new ReferralUrgency(prevReferralUrgency.getId());
			impl.check62dayTarget(catsReferralVo, prevUrgency);
		}
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();  // This is already system logged
		}
		
		return voReferralLetterDetail;
	}


	
	private EpisodeofCareShortVo updateEpisodeOfCareSpecialty(CatsReferralWizardVo catsReferralVo, ReferralLetterDetailsVo referralDetailsVo, DomainFactory factory) throws StaleObjectException
	{
		CareContextVo voCC = CareContextVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, catsReferralVo.getCareContext().getID_CareContext()));
		ServiceVo voServ = ServiceVoAssembler.create((ims.core.clinical.domain.objects.Service) getDomainFactory().getDomainObject(ims.core.clinical.domain.objects.Service.class, referralDetailsVo.getService().getID_Service()));

		EpisodeOfCare doEOC = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, voCC.getEpisodeOfCare().getID_EpisodeOfCare());
		if (doEOC != null)
		{
			//WDEV-11535 - if referral service.specialty is null set it back to DAD
			Specialty spec = null;
			if(voServ.getSpecialty() == null)
				spec = Specialty.DAD;
			else
				spec = voServ.getSpecialty();
			
			doEOC.setSpecialty(getDomLookup(spec));			
			factory.save(doEOC);
			
			return EpisodeofCareShortVoAssembler.create(doEOC);
		}
		
		return null;
	}

	// WDEV-7513
	private boolean serviceWasChanged(ArrayList lstDirtyProperties)
	{
		if (lstDirtyProperties != null)
		{
			for (int i = 0; i < lstDirtyProperties.size(); i++)
				if (lstDirtyProperties.get(i) instanceof String)
					if (lstDirtyProperties.get(i).equals(ReferralLetterDetails.FieldNames.Service))
						return true;
		}

		return false;
	}

	private void updateReferralAppointments(CatsReferral doCats, DomainFactory factory, YesNo ynLookup) throws StaleObjectException
	{
		CatsReferralVo voCats = CatsReferralVoAssembler.create(doCats);

		if (voCats.getConsultationApptIsNotNull() && voCats.getConsultationAppt().getApptStatus().equals(Status_Reason.BOOKED))
			voCats.getConsultationAppt().setIsTransportRequired(ynLookup.equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE);

		for (int i = 0; voCats.getAppointmentsIsNotNull() && i < voCats.getAppointments().size(); i++)
		{
			if (voCats.getAppointments().get(i).getApptStatusIsNotNull() && voCats.getAppointments().get(i).getApptStatus().equals(Status_Reason.BOOKED))
				voCats.getAppointments().get(i).setIsTransportRequired(ynLookup.equals(YesNo.YES) ? Boolean.TRUE : Boolean.FALSE);

		}
		CatsReferral doCatsRef = CatsReferralVoAssembler.extractCatsReferral(factory, voCats);
		factory.save(doCatsRef);
	}

	public ProcedureLiteVoCollection listProcedures(String procedureName, ServiceLiteVo serviceLiteVo) throws DomainInterfaceException
	{
		if (serviceLiteVo == null || !serviceLiteVo.getID_ServiceIsNotNull())
			throw new DomainRuntimeException("serviceLiteVo not provided for get call. ");

		DomainFactory factory = getDomainFactory();

		Service domServ = (Service) factory.getDomainObject(Service.class, serviceLiteVo.getID_Service());
		ServiceVo serviceVo = ServiceVoAssembler.create(domServ);

		if (serviceVo.getSpecialty() == null)
			return null;

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		StringBuffer condStr = new StringBuffer();
		String hql = " select proc from ProcedureHotlist phot left join phot.hotlistItem as pitem left join pitem.procedure as proc ";
		String andStr = " ";

		if (serviceVo.getSpecialtyIsNotNull())
		{
			condStr.append(andStr + " phot.specialty.id = :specID");
			markers.add("specID");
			values.add(serviceVo.getSpecialty().getID());
			andStr = " and ";
		}

		condStr.append(andStr + " proc.procedureName like :pName");
		markers.add("pName");
		values.add("%" + procedureName + "%");
		andStr = " and ";

		condStr.append(andStr + " proc.isActive = :pAct");
		markers.add("pAct");
		values.add(Boolean.TRUE);

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		List pList = factory.find(hql, markers, values);
		if (pList.size() > 0)
			return ProcedureLiteVoAssembler.createProcedureLiteVoCollectionFromProcedure(pList);
		else
			return null;
	}

	public OrganisationVoCollection listOrganisations(OrgShortVo filter)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listOrganisation(null, true, true);
	}

	public LocationLiteVoCollection listLocationLite()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		return impl.listLocationLiteByName(null);
	}

	public CatsReferralWizardVo saveCatsReferral(CatsReferralWizardVo record) throws DomainInterfaceException, StaleObjectException
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.saveCatsReferral(record);
	}

	public LocationLiteVoCollection listLocationByOrganisation(OrganisationRefVo organisation, String name)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listLocationByOrganisation(organisation, name);
	}

	public ContractConfigForReferralDetailsComponentVoCollection listActiveContracts(OrganisationRefVo voOrgRef)
	{
		String hql = "from ContractConfig as cc where (cc.contractOrganisation.id = :orgID and cc.status.id = :active and cc.isRIE is null) order by upper(cc.contractName) asc";
		List<?> dos = getDomainFactory().find(hql,new String[]{"orgID", "active"},new Object[]{voOrgRef.getID_Organisation(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		if (dos == null || dos.size() == 0)
			return null;
		return ContractConfigForReferralDetailsComponentVoAssembler.createContractConfigForReferralDetailsComponentVoCollectionFromContractConfig(dos);
	}

	public ContractConfigRefVoCollection listAllContracts(OrganisationRefVo voOrgRef)
	{
		ReferralStatusList impl = (ReferralStatusList) getDomainImpl(ReferralStatusListImpl.class);
		return impl.listAllContracts(voOrgRef);
	}

	public OrganisationLiteVo getOrganisationByLocation(Integer locationId) 
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		return impl.getOrganisationByLocation(locationId);
	}

	//---------------------------------------------------------------------------------------------------------------------------------------------
	//	WDEV-12866
	//	Implemented functions needed to retrieve active ContractConfiguration records for current location
	//	fix: now the contracts for all organisations on the branch (up from provided location) are provided, not just the root organisation
	//---------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to list all active ContractConfiguration records for current location
	 * <br>This function will progress recursively backwards in tree to the root parent location, then by organisation,
	 * build a collection with all Organisations and the query for all active contracts for all Organisations in the collection
	 */
	public ContractConfigForReferralDetailsComponentVoCollection listActiveContractsForLocation(LocationRefVo location)
	{
		// If location is not provided
		if (location == null)
			return null;
		
		// Get root Location id
		Integer rootLocation = getRootLocationID(location.getID_Location());
		// Get the ID for all organisations on the branch up to root organisation
		ArrayList<Integer> organisations = listParentOrganisations(rootLocation);

		// If no organisations are found then return null
		if (organisations == null || organisations.size() == 0)
			return null;
		
		// Build query to retrieve all active contract for the organisations on the branch
		StringBuilder query = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		query.append("SELECT contract FROM ContractConfig AS contract WHERE contract.status.id = :ACTIVE AND contract.contractOrganisation.id IN (");
		paramNames.add("ACTIVE");
		paramValues.add(PreActiveActiveInactiveStatus.ACTIVE.getID());
		
		String separator = "";
		
		for (int i = 0; i < organisations.size(); i++)
		{
			query.append(separator);
			query.append(organisations.get(i));
			
			separator = ", ";
		}
		
		query.append(") ORDER BY UPPER(contract.contractName) ASC");

		// Return the query results
		return ContractConfigForReferralDetailsComponentVoAssembler.createContractConfigForReferralDetailsComponentVoCollectionFromContractConfig(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}

	
	/**
	 *	This function will return the id of the top most location in the branch
	 *	It will recursively attempt to return the parent of provided location,
	 *	until it finds a location without a parent
	 *	If the provided location is null then it will return null 
	 */
	private Integer getRootLocationID(Integer location)
	{
		if (location == null)
			return null;
		
		Integer parentLocation = getParentLocationID(location);
		
		if (parentLocation != null)
			return getRootLocationID(parentLocation);
		
		return location;
	}

	/**
	 * This function will return the parent location for provided location id 
	 */
	private Integer getParentLocationID(Integer location)
	{
		String query = "select parentLocation from Location as parentLocation left join parentLocation.locations as loc where loc.id = " + location;
		Location result = (Location) getDomainFactory().findFirst(query);
		
		if (result == null)
			return null;
		
		return result.getId();
	}

	/**
	 * This function will return the list with the ID for all Organisation records on the branch for provided
	 * location all the way to the top
	 */
	private ArrayList<Integer> listParentOrganisations(Integer rootLocation)
	{
		ArrayList<Integer> organisations = null;
		
		String query = "select org from Organisation as org left join org.locationSites as loc where loc.id = " + rootLocation;
		
		Organisation organisation = (Organisation) getDomainFactory().findFirst(query);

		if (organisation != null)
		{
			organisations = new ArrayList<Integer>();
			organisations.add(organisation.getId());
			
			return listParentOrganisationsForOrganisation(organisation, organisations);
		}
		
		return organisations;
	}

	/**
	 * This function will recursively step from organisation to it's parent organisation all the way to the top
	 * and add their ID to organisation list 
	 */
	private ArrayList<Integer> listParentOrganisationsForOrganisation(Organisation organisation, ArrayList<Integer> organisations)
	{
		if (organisation == null)
			return organisations;
		
		if (organisation.getParentOrganisation() != null)
		{
			organisations.add(organisation.getParentOrganisation().getId());
			
			return listParentOrganisationsForOrganisation(organisation.getParentOrganisation(), organisations);
		}
		
		return organisations;
	}

	//wdev-13647
	public ContractServiceLocationsConfigVoCollection listLocationServiceByContract(ContractConfigRefVo contract) 
	{
		if(contract == null)
			return null;
		String hql = "from ContractConfig as c1_1 where (c1_1.id = :ContractId) ";
		List<?> dos = getDomainFactory().find(hql,new String[]{"ContractId"},new Object[]{contract.getID_ContractConfig()});
		if (dos != null && dos.size() > 0)
		{
			ContractConfigurationVoCollection contrVoColl = ContractConfigurationVoAssembler.createContractConfigurationVoCollectionFromContractConfig(dos);
			if(contrVoColl != null && contrVoColl.size() > 0)
				return contrVoColl.get(0).getServiceLocations();  
		}
		
		return null;
	}

	//wdev-13647
	public ContractServiceLocationsConfigVoCollection listLocationServiceByContractAndService(ContractConfigRefVo contract, ServiceRefVo service) 
	{
		if(contract == null || service == null)
			return null;
		String hql = "from ContractConfig as c1_1 where (c1_1.id = :ContractId) ";
		List<?> dos = getDomainFactory().find(hql,new String[]{"ContractId"},new Object[]{contract.getID_ContractConfig()});
		if (dos != null && dos.size() > 0)
		{
			ContractConfigurationVoCollection contrVoColl = ContractConfigurationVoAssembler.createContractConfigurationVoCollectionFromContractConfig(dos);
			if(contrVoColl != null && contrVoColl.size() > 0)
				return getContractServiceLocationsByServiceId(contrVoColl.get(0).getServiceLocations(),service);  
		}
		
		return null;
	}
	//wdev-13647
	private ContractServiceLocationsConfigVoCollection getContractServiceLocationsByServiceId(ContractServiceLocationsConfigVoCollection tempVoColl, ServiceRefVo service)
	{
		ContractServiceLocationsConfigVoCollection servLocVoColl = new ContractServiceLocationsConfigVoCollection();
		if(tempVoColl == null || service == null)
			return null;
		for(int i = 0;i < tempVoColl.size();i++ )
		{
			ContractServiceLocationsConfigVo tempVo = tempVoColl.get(i);
			if(tempVo == null)
				continue;
			if(tempVo.getService() != null && service.getID_Service().equals(tempVo.getService().getID_Service()))
				servLocVoColl.add(tempVo);
		}
		return servLocVoColl;
		
	}

	public LocSiteVo getPatientSurgery(PatientRefVo voPatientRef) 
	{
		DomainFactory factory = getDomainFactory();
		Patient pat = null;
		IMSCriteria imsc = new IMSCriteria(Patient.class, factory);
		imsc.equal("id", voPatientRef.getID_Patient());
		List patients = imsc.find();
		if (patients != null && patients.size() > 0)
		{
			pat = (Patient) patients.get(0);
			if (pat.getGpSurgery() != null)
				return LocSiteVoAssembler.create(pat.getGpSurgery());
			else
				return null;
		}
		return null;
	}


	public String getCCGForPostCode(String szPostcode) 
	{
		if( szPostcode == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		List contract =   factory.find("select max(c1_1.cCGCode) from CCGPCTPCCodes as c1_1 where ( c1_1.postcode = :pCode) ",	new String[]{"pCode" }, new Object[]{szPostcode});
		if(contract != null && contract.size() > 0)
			return (String) contract.get(0);
		
		return null;
	}

}
