// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3573.17680)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import ims.admin.helper.MedicationManagement;
import ims.RefMan.domain.base.impl.BasePrescriptionComponentImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.Prescription;
import ims.RefMan.domain.objects.ReferralOutcome;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.FollowUpNoteVoCollection;
import ims.RefMan.vo.PrescriptionRefVo;
import ims.RefMan.vo.PrescriptionsVo;
import ims.RefMan.vo.PrescriptionsVoCollection;
import ims.RefMan.vo.ReferralOutcomeRefVo;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.ReferralOutcomeVoCollection;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.FollowUpNoteVoAssembler;
import ims.RefMan.vo.domain.PrescriptionsVoAssembler;
import ims.RefMan.vo.domain.ReferralOutcomeVoAssembler;
import ims.core.clinical.domain.objects.Medication;
import ims.core.clinical.domain.objects.PatientMedication;
import ims.core.clinical.domain.objects.Service;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.MedicationVo;
import ims.core.vo.PatientMedicationLiteVo;
import ims.core.vo.PatientMedicationLiteVoCollection;
import ims.core.vo.domain.MedicationLiteVoAssembler;
import ims.core.vo.domain.MedicationVoAssembler;
import ims.core.vo.domain.PatientMedicationLiteVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

public class PrescriptionComponentImpl extends BasePrescriptionComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getCatsReferralService
	*/
	public ims.core.vo.ServiceShortVo getCatsReferralService(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) {
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		}
		
		CatsReferralListVo voCatsReferral = CatsReferralListVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, catsRefVo.getID_CatsReferral()));
		if (voCatsReferral != null && voCatsReferral.getReferralDetailsIsNotNull()&& voCatsReferral.getReferralDetails().getServiceIsNotNull()) {
			return ServiceVoAssembler.create((Service)getDomainFactory().getDomainObject(Service.class, voCatsReferral.getReferralDetails().getService().getID_Service()));	
		}

		return null;
	}

	public ReferralOutcomeVo getReferralOutcome(CatsReferralRefVo catsRefVo) 
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) {
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		}
				
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select ro from ReferralOutcome ro left join ro.catsReferral as cats ");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("  where cats.id = :idCatsRefferal");
		names.add("idCatsRefferal");
		values.add(catsRefVo.getID_CatsReferral());	
				
		List result = factory.find(hql.toString(),names,values);
		
		if (result != null) {
			ReferralOutcomeVoCollection voColl = ReferralOutcomeVoAssembler.createReferralOutcomeVoCollectionFromReferralOutcome(result);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		
		return null;
	}
	
	public ReferralOutcomeVo saveReferralOutcome(ReferralOutcomeVo voReferralOutcome) throws StaleObjectException 
	{
		if(voReferralOutcome == null)
			throw new CodingRuntimeException("Invalid voReferralOutcome");
		if(!voReferralOutcome.isValidated())
			throw new CodingRuntimeException("voReferralOutcome not validated");
		
		DomainFactory factory = getDomainFactory();
		ReferralOutcome domainObject = ReferralOutcomeVoAssembler.extractReferralOutcome(factory, voReferralOutcome);
		
		factory.save(domainObject);
		
		return ReferralOutcomeVoAssembler.create(domainObject);
	}
	
	public MedicationVo createOrUpdateMedication(MedicationVo value) throws StaleObjectException 
	{
		return new MedicationManagement(getDomainFactory()).createOrUpdateMedication(value);
	}
	
	public PrescriptionsVoCollection listPrescriptions(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) {
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		}
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select prescriptions from ReferralOutcome as ro join ro.catsReferral as cats join ro.prescriptions as prescriptions ");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("  where cats.id = :idCatsRefferal");
		names.add("idCatsRefferal");
		values.add(catsRefVo.getID_CatsReferral());	
				
		List result = factory.find(hql.toString(),names,values);
						
		if (result != null && result.size() > 0) 
		{
			PrescriptionsVoCollection voColl = PrescriptionsVoAssembler.createPrescriptionsVoCollectionFromPrescription(result);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl;
			}						 
		}
		
		return null;
	}
	
	public ims.RefMan.vo.PrescriptionsVo getPrescription(PrescriptionRefVo prescription)
	{
		if (prescription == null)
			throw new RuntimeException("Cannot get PrescriptionsVo for null PrescriptionRefVo");

		Prescription doPrescriptionsVo = (Prescription) getDomainFactory().getDomainObject(Prescription.class, prescription.getID_Prescription());
		return PrescriptionsVoAssembler.create(doPrescriptionsVo);		
	}
	
	//start WDEV-13956
	public void removePrescription(PrescriptionsVo selectedPrescription) throws StaleObjectException, ForeignKeyViolationException
	{
		if (selectedPrescription == null)
			throw new CodingRuntimeException("Cannot delete null Prescription");

		
		DomainFactory factory = getDomainFactory();
		Prescription domainPrescription = PrescriptionsVoAssembler.extractPrescription(factory, selectedPrescription);

			try
			{
				factory.delete(domainPrescription);
			}
			catch (ForeignKeyViolationException e)
			{
				throw new ForeignKeyViolationException("Prescription is used in the system.", e);
			}
		
	}

	public PrescriptionsVo savePrescription(PrescriptionsVo selectedPrescription) throws StaleObjectException
	{
		if (selectedPrescription == null)
			throw new CodingRuntimeException("Cannot save null Prescription");

		if (!selectedPrescription.isValidated())
			throw new DomainRuntimeException("Prescription Vo Not Validated.");

		

			DomainFactory factory = getDomainFactory();
			Prescription domainPrescription = PrescriptionsVoAssembler.extractPrescription(factory, selectedPrescription);

			factory.save(domainPrescription);

			return PrescriptionsVoAssembler.create(domainPrescription);
	}
	//end
	
}
