// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4050.19540)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.PrintCorrespondenceNoteDialog;
import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseClinicalNoteDialogImpl;
import ims.RefMan.domain.objects.AppointmentClinicalNotes;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ReferralClinicalNotes;
import ims.RefMan.vo.AppointmentClinicalNotesVo;
import ims.RefMan.vo.AppointmentClinicalNotesVoCollection;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ReferralClinicalNotesVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVoCollection;
import ims.RefMan.vo.domain.AppointmentClinicalNotesVoAssembler;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.ReferralClinicalNotesVoAssembler;
import ims.RefMan.vo.lookups.ReportNoteStatus;
import ims.RefMan.vo.lookups.ReportNoteType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class ClinicalNoteDialogImpl extends BaseClinicalNoteDialogImpl
{
	private static final long serialVersionUID = 1L;

	public AppointmentClinicalNotesVo addClinicalNote(ReferralClinicalNotesVo referralClinicalNotes, AppointmentClinicalNotesVo note, Boolean shouldRemoveType, ReportNoteType removeType) throws StaleObjectException
	{
		if(referralClinicalNotes == null)
			throw new CodingRuntimeException("Cannot save a null ReferralClinicalNotesVo.");
		
		if(!referralClinicalNotes.isValidated())
			throw new CodingRuntimeException("ReferralClinicalNotesVo is not validated.");
		
		if(note == null)
			throw new CodingRuntimeException("Cannot save a null AppointmentClinicalNotesVo.");
		
		if(!note.isValidated())
			throw new CodingRuntimeException("AppointmentClinicalNotesVo is not validated.");
		
		DomainFactory factory = getDomainFactory();

		updateCatsReferral(factory, note, shouldRemoveType, removeType);

		ReferralClinicalNotesVo clinicalNotesFromDomain = getReferralClinicalNotes(note.getCatsReferral());
		
		if (clinicalNotesFromDomain != null)
		{
			referralClinicalNotes = clinicalNotesFromDomain;
		}

		AppointmentClinicalNotes doNote = AppointmentClinicalNotesVoAssembler.extractAppointmentClinicalNotes(factory, note);
		factory.save(doNote);
		
		note = AppointmentClinicalNotesVoAssembler.create(doNote);
		
		referralClinicalNotes.getClinicalNotes().add(note);		
		
		ReferralClinicalNotes doReferralClinicalNote = ReferralClinicalNotesVoAssembler.extractReferralClinicalNotes(factory, referralClinicalNotes);
		factory.save(doReferralClinicalNote);
		
		return AppointmentClinicalNotesVoAssembler.create(doNote);
	}

	public ReferralClinicalNotesVo getReferralClinicalNotes(CatsReferralRefVo referral)
	{
		if(referral == null || referral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("Cannot get ReferralClinicalNote for a null Referral Id.");
		
		DomainFactory factory = getDomainFactory();
		
		String query = "from ReferralClinicalNotes as r where r.catsReferral.id = :ReferralId";
		List<?> doReferralClinicalNotes = factory.find(query, new String[] {"ReferralId"}, new Object[] {referral.getID_CatsReferral()});
		
		if(doReferralClinicalNotes == null || doReferralClinicalNotes.size() == 0)
			return null;
		
		return ReferralClinicalNotesVoAssembler.create((ReferralClinicalNotes) doReferralClinicalNotes.get(0));
	}

	public AppointmentClinicalNotesVo saveNote(AppointmentClinicalNotesVo note, Boolean shouldRemoveType, ReportNoteType removeType) throws StaleObjectException
	{
		if(note == null)
			throw new CodingRuntimeException("Cannot save a null AppointmentClinicalNotesVo.");
	
		if(!note.isValidated())
			throw new CodingRuntimeException("AppointmentClinicalNotesVo is not validated.");
		
		DomainFactory factory = getDomainFactory();

		updateCatsReferral(factory, note,shouldRemoveType, removeType);

		AppointmentClinicalNotes doNote = AppointmentClinicalNotesVoAssembler.extractAppointmentClinicalNotes(factory, note);
		if(doNote == null)
			throw new StaleObjectException(doNote);
		
		factory.save(doNote);
		
		return AppointmentClinicalNotesVoAssembler.create(doNote);
	}

	private void updateCatsReferral(DomainFactory factory, AppointmentClinicalNotesVo note, Boolean shouldRemoveType, ReportNoteType removeType) throws StaleObjectException
	{
		if (note.getCatsReferralIsNotNull())
		{
			CatsReferralWizardVo currentCatsReferral = getCatsReferral(note.getCatsReferral());
			ReportsRequiredForPrintingVoCollection reportsRequired = currentCatsReferral.getReportsRequired();
			if(reportsRequired == null)
				reportsRequired = new ReportsRequiredForPrintingVoCollection();
			
			//should save the CatsReferralWizardVo ?
			boolean save = false;
			//if Note is active 
			if (ReportNoteStatus.ACTIVE.equals(note.getNoteStatus()))
			{
				//and the Required reports doesn't have already this type , add it 
				boolean bFound = false;
				for (int j = 0 ; reportsRequired != null && j < reportsRequired.size() ; j++)
				{
					if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType())
						&& reportsRequired.get(j).getPrintedDate() == null)
						bFound = true;
					
					//if a matching report type and already printed, set the info to mark as needs printing.
					if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType())
						&& reportsRequired.get(j).getPrintedDateIsNotNull())
					{
						reportsRequired.get(j).setPrintedDate(null);
						reportsRequired.get(j).setPrintedBy(null);
						
						bFound = true;
						save = true;
					}
				}
				if (!bFound)
				{
					ReportsRequiredForPrintingVo voReportReq = new ReportsRequiredForPrintingVo();
					voReportReq.setReportsRequired(note.getNoteType());
					
					reportsRequired.add(voReportReq);
					save = true;
				}
			}
			else
			{
				//if it is draft, is not new ,there are no active notes of this type and the reports require contain this type
				//remove the type
				if (note.getID_AppointmentClinicalNotesIsNotNull() && shouldRemoveType)
				{
					for (int j = 0 ; reportsRequired != null && j < reportsRequired.size() ; j++)
					{
						if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType()))
						{
							reportsRequired.remove(j);
							save = true;
						}
					}
				}
			}
			if (removeType != null)
			{
				for (int i = 0 ; i < reportsRequired.size() ; i++)
				{
					if (removeType.equals(reportsRequired.get(i).getReportsRequired()))
					{
						reportsRequired.remove(i);
						save = true;
						break;
					}
				}
			}
			if (save)
			{
				CatsReferral catsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory,currentCatsReferral);
				factory.save(catsReferral);
				
			}
		}
		

	}

	public AppointmentClinicalNotesVoCollection listClinicalNotes(CatsReferralRefVo catsRefVo)
	{
		PrintCorrespondenceNoteDialog impl = (PrintCorrespondenceNoteDialog) getDomainImpl(PrintReportNoteDialogImpl.class);
		return impl.listReportNotes(catsRefVo);
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo voCatsRef)
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.getCatsReferral(voCatsRef);
	}
}
