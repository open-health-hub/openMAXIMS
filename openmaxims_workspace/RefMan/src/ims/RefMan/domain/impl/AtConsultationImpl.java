// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.65 build 3160.29066)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.Presentation;
import ims.RefMan.domain.ReferralDetails;
import ims.RefMan.domain.base.impl.BaseAtConsultationImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ConsultationDetails;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ConsultationDetailsVo;
import ims.RefMan.vo.ConsultationDetailsVoCollection;
import ims.RefMan.vo.PresentationReferralSummaryVo;
import ims.RefMan.vo.WorkAllocationVo;
import ims.RefMan.vo.domain.CatsReferralFlaggedForReviewVoAssembler;
import ims.RefMan.vo.domain.ConsultationDetailsVoAssembler;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVoCollection;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class AtConsultationImpl extends BaseAtConsultationImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* save
	*/
	public ConsultationDetailsVo getConsultation(CatsReferralRefVo voCATSRef) 
	{
		if(voCATSRef != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from ConsultationDetails cons where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " cons.cATSReferral.id = :cats");
 			markers.add("cats");
			values.add(voCATSRef.getID_CatsReferral());
			hql.append(" and cons.isRIE is null");	

			List listAdditional = factory.find(hql.toString(), markers,values);
			if(listAdditional != null && listAdditional.size() > 0)
			{ 
				ConsultationDetailsVoCollection voColl = ConsultationDetailsVoAssembler.createConsultationDetailsVoCollectionFromConsultationDetails(listAdditional);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}
	
	public ConsultationDetailsVo saveConsultation(ConsultationDetailsVo voConsultation) throws StaleObjectException 
	{
		if (voConsultation != null)
		{
			if (!voConsultation.isValidated())
				throw new DomainRuntimeException("voConsultation not validated");
		}
		DomainFactory factory = getDomainFactory();

		ConsultationDetails doCons = ConsultationDetailsVoAssembler.extractConsultationDetails(factory, voConsultation);
		factory.save(doCons);
		return ConsultationDetailsVoAssembler.create(doCons);
	}

	public PresentationReferralSummaryVo getReferralSummary(CatsReferralRefVo catsRef)
	{
		
		Presentation presentationImpl = (Presentation)getDomainImpl(PresentationImpl.class); 
		
		return presentationImpl.getPresentationReferralSummary(catsRef);
	}

	public ims.RefMan.vo.CatsReferralDetailsVo getReferralDetail(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{		
		ReferralDetails impl = (ReferralDetails)getDomainImpl(ims.RefMan.domain.impl.ReferralDetailsImpl.class); 		
		return impl.getReferralDetail(catsReferral);
	}

	public String getInterpretersLanguage(CatsReferralRefVo catsReferral)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria(CatsReferral.class, factory);
		imsc.equal("id", catsReferral.getID_CatsReferral());
		List cats = imsc.find();
		String language=null;
		CatsReferral catsReferralBo=null;
		if (cats!=null)
			catsReferralBo=(CatsReferral) cats.get(0);
		if (catsReferralBo!=null)
			if (catsReferralBo.getReferralDetails()!=null)
				if (catsReferralBo.getReferralDetails().getLanguage()!=null)
					if (catsReferralBo.getReferralDetails().getInterpreterRequired().equals(getDomLookup(YesNo.YES)))
						language=catsReferralBo.getReferralDetails().getLanguage().getText();
			
		return language;
	}
	
	public ims.RefMan.vo.CatsReferralFlaggedForReviewVo getCatsReferral(ims.RefMan.vo.CatsReferralRefVo voCatsRef)
	{
		return CatsReferralFlaggedForReviewVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public String getInterpretersOtherLanguage(CatsReferralRefVo catsReferral)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc=new IMSCriteria(CatsReferral.class, factory);
		imsc.equal("id", catsReferral.getID_CatsReferral());
		List cats = imsc.find();
		String language=null;
		CatsReferral catsReferralBo=null;
		if (cats!=null)
			catsReferralBo=(CatsReferral) cats.get(0);
		if (catsReferralBo!=null)
			if (catsReferralBo.getReferralDetails()!=null)
				if (catsReferralBo.getReferralDetails().getOtherLanguage()!=null)
					if (catsReferralBo.getReferralDetails().getInterpreterRequired().equals(getDomLookup(YesNo.YES)))
						language=catsReferralBo.getReferralDetails().getOtherLanguage();
			
		return language;
	}

	public WorkAllocationVo getWorkAllocation(CatsReferralRefVo voCatRefVo, MemberOfStaffRefVo voMOS) 
	{
		ReferralDetails impl = (ReferralDetails)getDomainImpl(ims.RefMan.domain.impl.ReferralDetailsImpl.class); 		
		return impl.getWorkAllocation(voCatRefVo, voMOS);
	}

	public WorkAllocationVo saveWorkAllocation(WorkAllocationVo voWorkAllocation) throws DomainInterfaceException, StaleObjectException 
	{
		ReferralDetails impl = (ReferralDetails)getDomainImpl(ims.RefMan.domain.impl.ReferralDetailsImpl.class); 		
		return impl.saveWorkAllocation(voWorkAllocation);
	}

	public String[] getSystemReportAndTemplate(Integer imsId)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
		
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (r1_1.imsId= :imsid) order by t1_1.name", new String[] {"imsid"}, new Object[] {imsId});
		
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
			
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
		
		return result;
	}

	public OrderInvestigationRefVoCollection listInvestigations(CatsReferralRefVo referral)
	{
		// Test referral parameter
		if (referral == null || !referral.getID_CatsReferralIsNotNull())
			return null;
		
		
		// Build query to retrieve  Investigations  associated to  ReferralOutcome  record corresponding to  CATS Referral record
		String query = "select investigation from ReferralOutcome as refOut left join refOut.referralDischarge as dis join dis.resultsForReport as investigation where refOut.catsReferral.id = :ID and investigation.isRIE is null";
		// Query database for investigations
		List<?> investigationsList = getDomainFactory().find(query, "ID", referral.getID_CatsReferral());
		
		// Create collection for results
		OrderInvestigationRefVoCollection resultsCollection = new OrderInvestigationRefVoCollection();
		
		// Iterate investigations returned by database query
		Iterator<?> investigationIterator = investigationsList.iterator();
		
		while (investigationIterator.hasNext())
		{
			OrderInvestigation investigation = (OrderInvestigation) investigationIterator.next();
			
			// Create OrderInvestigationRefVo
			OrderInvestigationRefVo investigationRef = new OrderInvestigationRefVo(investigation.getId(), investigation.getVersion());
			// Add OrderInvestigationRefVo to results
			resultsCollection.add(investigationRef);
		}
		
		// Results
		return resultsCollection;
	}
}
	

