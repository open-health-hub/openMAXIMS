// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3196.15076)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.BookAppointment;
import ims.RefMan.domain.ClinicList;
import ims.RefMan.domain.base.impl.BaseReferralAppointmentDetailsComponentImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ElectiveListStatus;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.domain.objects.TCIOutcomeForPatientElectiveList;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.OrderInvApptListVo;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.domain.CatsReferralCurrentStatusVoAssembler;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.OrderInvApptListVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListForReferralDetailsVoAssembler;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffShortVoAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.PollStatus;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.domain.ImportResultsCategory;
import ims.ocrr.domain.impl.ImportResultsCategoryImpl;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ImportResultsConfigVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection;
import ims.ocrr.vo.domain.ReferralAppointmentDetailsOrderInvestigationVoAssembler;
import ims.ocrr.vo.domain.SpecimenWorkListItemLiteVoAssembler;
import ims.ocrr.vo.lookups.Category;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PauseDetails;
import ims.scheduling.domain.AppointmentOutcomeDialog;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.PatientAppointmentManagement;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.impl.AppointmentOutcomeDialogImpl;
import ims.scheduling.domain.impl.OCSExternalEventsImpl;
import ims.scheduling.domain.impl.PatientAppointmentMangementRefManImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.domain.Appointment_StatusVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ReferralAppointmentDetailsComponentImpl extends BaseReferralAppointmentDetailsComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getBookingAppointment
	*/
	public ims.scheduling.vo.Booking_AppointmentVo getBookingAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
		return impl.getBookingAppointment(appt);
	}

	public SessionServiceAndSlotActivityVo getServiceAndActivityByAppt(Booking_AppointmentRefVo appt, Boolean isFlexible)
	{
		PatientAppointmentManagement impl = (PatientAppointmentManagement) getDomainImpl(PatientAppointmentMangementRefManImpl.class);
		return impl.getServiceAndActivityByAppt(appt, isFlexible);
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws StaleObjectException
	{
		ClinicList impl = (ClinicList) getDomainImpl(ClinicListImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public CatsReferralVo getCatsReferral(CatsReferralRefVo voCatsRef) 
	{
		return CatsReferralVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public CatsReferralVo saveCatsReferral(CatsReferralVo record) throws DomainInterfaceException, StaleObjectException 
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid referral wizard to save");
		if(!record.isValidated())
			throw new DomainRuntimeException("Record not validated before save");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral domainObject = CatsReferralVoAssembler.extractCatsReferral(factory, record);		
		factory.save(domainObject);
		return CatsReferralVoAssembler.create(domainObject);
	}

	/**
	 *  List all SpecimenWorkListItems for the CatsReferral.investigationOrders.Investigations of type pathology that have 'ward' and 'datetocollect' as null and status is not cancelled
	 */
	public SpecimenWorkListItemLiteVoCollection listSpecimenWorKlistItemsForCatsReferral(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method listSpecimenWorKlistItemsForCatsReferral");
			
		DomainFactory factory = getDomainFactory();
		
		//specWork.dateToCollect is null and specWork.ward is null and 
		
		String hql = "from SpecimenWorkListItem specWork where specWork.specimen.id in (select ordInv.specimen.id from CatsReferral as cats join cats.investigationOrders as ord join ord.investigations as ordInv join ordInv.investigation as inv " +
				" where inv.investigationIndex.category = :category and cats.id = :idCatsRef and ordInv.ordInvCurrentStatus.ordInvStatus <> :status)";
		
		List doWorkListItems =  factory.find(hql, new String[]{"category","idCatsRef","status"} , new Object[]{getDomLookup(Category.PATHOLOGY), catsReferral.getID_CatsReferral(), getDomLookup(Status_Reason.CANCELLED)});
		return SpecimenWorkListItemLiteVoAssembler.createSpecimenWorkListItemLiteVoCollectionFromSpecimenWorkListItem(doWorkListItems);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral);
	}

	public void saveOrderInv(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv) throws StaleObjectException
	{
		if(voOrderInv == null)
			throw new CodingRuntimeException("voOrderInv is null in method saveOrderInv");
		
		DomainFactory factory = getDomainFactory();
		OrderInvestigation doOrderInv = ReferralAppointmentDetailsOrderInvestigationVoAssembler.extractOrderInvestigation(factory, voOrderInv);		
		factory.save(doOrderInv);
	}

	public ImportResultsConfigVo getImportResultsConfig() {
		ImportResultsCategory impl = (ImportResultsCategory) getDomainImpl(ImportResultsCategoryImpl.class);
		return impl.getImportResultsConfig();
	}

	public void saveOrdInvApptAndUpdateCatsReferral(OrderInvApptListVo ordInvAppt, CatsReferralRefVo catsRef) throws StaleObjectException
	{
		if(ordInvAppt == null)
			throw new CodingRuntimeException("ordInvAppt is null in method saveOrdInvAppt");
		
		//store new appointment to set back after assembler call
		Booking_AppointmentRefVo voNewAppt = ordInvAppt.getAppointment();
		DomainFactory factory = getDomainFactory();
		
		//retrieve current ordInvAppt record
		OrderInvAppt doCurrentOrdInvAppt = null;
		if(ordInvAppt.getID_OrderInvApptIsNotNull())
			doCurrentOrdInvAppt = (OrderInvAppt) factory.getDomainObject(ordInvAppt);
				
		OrderInvAppt doNewOrderInvAppt = null;
		//If the Cancel has not yet been processed by the OrderInvApptProcess Servlet need to call for current ordinvappt record
		if(doCurrentOrdInvAppt.getStatus() != null && doCurrentOrdInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELNOTPROCESSED)))
		{				
			OCSExternalEvents impl = (OCSExternalEvents)getDomainImpl(OCSExternalEventsImpl.class,factory.getDomainSession());	
			if(doCurrentOrdInvAppt.getAppointment() != null && doCurrentOrdInvAppt.getOrderInvestigation() != null)
			{
				impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doCurrentOrdInvAppt.getAppointment().getId(), doCurrentOrdInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doCurrentOrdInvAppt.getOrderInvestigation().getId(), doCurrentOrdInvAppt.getOrderInvestigation().getVersion()));
				doCurrentOrdInvAppt.setStatus(getDomLookup(PollStatus.CANCELPROCESSED));
			}
			else
				doCurrentOrdInvAppt.setStatus(getDomLookup(PollStatus.FAILED));
			
			factory.save(doCurrentOrdInvAppt);
		}
		//if was processed sucessfully then we want to reset the value for another possible cancel
		else if(doCurrentOrdInvAppt.getStatus() != null && doCurrentOrdInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELPROCESSED)))	
		{			
			doNewOrderInvAppt = OrderInvApptListVoAssembler.extractOrderInvAppt(factory, ordInvAppt);
			doNewOrderInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
		}
			
		//update the new domain OrderInvAppt record with the correct appointment
		if(doNewOrderInvAppt == null && doCurrentOrdInvAppt != null)	
		{
			ordInvAppt = OrderInvApptListVoAssembler.create(doCurrentOrdInvAppt);
			ordInvAppt.setAppointment(voNewAppt);
			doNewOrderInvAppt = OrderInvApptListVoAssembler.extractOrderInvAppt(factory, ordInvAppt);
		}
			
		//if was processed sucessfully then we want to reset the value for another possible cancel
		if(doNewOrderInvAppt != null)
		{
			if(doNewOrderInvAppt.getStatus() != null)
			{
				if(doNewOrderInvAppt.getStatus().equals(getDomLookup(PollStatus.CANCELPROCESSED)))
					doNewOrderInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
			}

			doNewOrderInvAppt.getOrderInvestigation().setAppointmentDate(doNewOrderInvAppt.getAppointment().getAppointmentDate());
			factory.save(doNewOrderInvAppt);
		}
						
		OCSExternalEvents impl = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
		if(doNewOrderInvAppt != null && doNewOrderInvAppt.getAppointment() != null && doNewOrderInvAppt.getOrderInvestigation() != null)
			impl.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doNewOrderInvAppt.getAppointment().getId(), doNewOrderInvAppt.getAppointment().getVersion()), new OrderInvestigationRefVo(doNewOrderInvAppt.getOrderInvestigation().getId(), doNewOrderInvAppt.getOrderInvestigation().getVersion()));
		
		updateCatsReferralAdditionalInvStatus(catsRef);
	}

	public TheatreProcedureServiceAndConsultantLiteVo getTheatreServiceProcedureAndConsultant(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreServiceProcedureAndConsultant");
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(appt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voPsc = new TheatreProcedureServiceAndConsultantLiteVo();
			voPsc.setService(voService);
			voPsc.setProcedure(voProc);
			voPsc.setConsultant(voMos);
		}
		
		return voPsc;
	}

	public BookingAppointmentTheatreVo getTheatreAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreAppointment");
		
		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}

	public void updateCatsReferralCancelStatus(CatsReferralRefVo catsReferral) throws StaleObjectException 
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method updateCatsReferralAdditionalInvStatus");
		
		DomainFactory factory = getDomainFactory();
		
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		doCatsReferral.setHasCancelledApptsForReview(true);
		factory.save(doCatsReferral);
	}

	public Appointment_StatusVoCollection listAppointmentHistory(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null)
			throw new CodingRuntimeException("Null appointment provided");
		if (!appointment.getID_Booking_AppointmentIsNotNull())
			throw new CodingRuntimeException("Appointment provided has a null ID");
		
		String hqlString = "select ah from Booking_Appointment as ba left join ba.apptStatusHistory as ah where	" +
				"(ba.id = :id) order by ah.systemInformation.creationDateTime desc"; 

		List<?> domObjs = getDomainFactory().find(hqlString,"id",appointment.getID_Booking_Appointment());
		if (domObjs == null || domObjs.size() == 0)
			return null;
		
		return Appointment_StatusVoAssembler.createAppointment_StatusVoCollectionFromAppointment_Status(domObjs);
	}

	public Boolean isReferralICPCompleted(CatsReferralRefVo catsReferral)
	{
		if (!ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			return false;
		}
		if (catsReferral == null || !catsReferral.getID_CatsReferralIsNotNull())
			return false;
		String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
				" CatsReferral as cats left join cats.careContext as catsCC " +
				"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
		long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsReferral.getID_CatsReferral()});
		return count > 0;
	}

	//WDEV-18092 
	public PatientElectiveListForReferralDetailsVoCollection getWaitingListForReferral(CatsReferralRefVo referralRef)
	{
		if (referralRef == null)
			throw new CodingRuntimeException("Cannot get Waiting List on null Referral Id");

		String hqlString = "select list from PatientElectiveList as list left join list.referral as referral where referral.id = :ReferralId";

		List<?> list = getDomainFactory().find(hqlString, "ReferralId", referralRef.getID_CatsReferral());
		
		if (list == null || list.size() == 0)
			return null;

		return PatientElectiveListForReferralDetailsVoAssembler.createPatientElectiveListForReferralDetailsVoCollectionFromPatientElectiveList(list);
	}

	public void cancelTCI(PatientElectiveListRefVo patientWaitingListRef, TCIOutcomeForPatientElectiveListVo tciOutcome) throws StaleObjectException
	{
		if (patientWaitingListRef == null)
			throw new CodingRuntimeException("Cannot save on null WaitingList ref");

		DomainFactory factory = getDomainFactory();

		PatientElectiveList domWaitingList = (PatientElectiveList) factory.getDomainObject(patientWaitingListRef);
		
	    MemberOfStaff domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
	    MemberOfStaff domainMOSFromDialog = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(factory,(MemberOfStaffLiteVo) tciOutcome.getChangeBy());

	    ElectiveListStatus status = new ElectiveListStatus();
		status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
		status.setAuthoringUser(domainMOS);
		status.setStatusDateTime(new Date());
				
		//wdev-18384
		if( domWaitingList.getElectiveListStatus() == null || domWaitingList.getElectiveListStatus().getElectiveListStatus() == null || !domWaitingList.getElectiveListStatus().getElectiveListStatus().equals(getDomLookup(WaitingListStatus.REMOVED)))
		{
			domWaitingList.setElectiveListStatus(status);
			//wdev-18419
			if( tciOutcome != null && Boolean.TRUE.equals(tciOutcome.getCancelledForNonMedicalReason()) && tciOutcome.getStatusDateTimeIsNotNull() && tciOutcome.getStatusDateTime().getDate().equals(new ims.framework.utils.Date()))
			{
				ims.framework.utils.Date dtnow = new ims.framework.utils.Date();
				dtnow.addDay(28);
				domWaitingList.setRequiresTCIBy(dtnow.getDate());
				domWaitingList.setTCICancelledByProvider(true);
				if( tciOutcome.getOutcomeIsNotNull())
				{
					tciOutcome.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
					
				}
			}
			//---------
		
			if(domWaitingList.getElectiveListStatusHistory() == null)
				domWaitingList.setElectiveListStatusHistory(new ArrayList());
		
			domWaitingList.getElectiveListStatusHistory().add(status);
		}
		
		TCIForPatientElectiveList doTCIDetails = domWaitingList.getTCIDetails();
		
		domWaitingList.setTCIDetails(null);
		
		TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
		
		newOutcome.setOutcome(getDomLookup(tciOutcome.getOutcome()));
		newOutcome.setChangeBy(domainMOSFromDialog);
		newOutcome.setStatusDateTime(tciOutcome.getStatusDateTime().getJavaDate());
		
		doTCIDetails.setCurrentOutcome(newOutcome);
		
		if(doTCIDetails.getOutcomeHistory() == null)
			doTCIDetails.setOutcomeHistory(new ArrayList());
		
		doTCIDetails.getOutcomeHistory().add(newOutcome);
		
		if(domWaitingList.getTCIHistory() == null)
			domWaitingList.setTCIHistory(new ArrayList());
		
		domWaitingList.getTCIHistory().add(doTCIDetails);
		
		factory.save(domWaitingList);
	}

	public void cancelTCIAndReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef, Boolean isProviderCancellation , Boolean isPatientCancellation, Boolean cancelledfornonmedicalreason) throws StaleObjectException //WDEV-18249
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");
		
		Integer tciClock = null;

		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		PatientElectiveList doPatientElectiveList = null;
		Boolean saveElectiveList = false;
		
		PathwayClock currentClock = null;
		if(doCatsReferral != null && doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null)
		{
			currentClock = doCatsReferral.getJourney().getCurrentClock();
		}
		
		if(currentClock != null)
		{
			String patientElectiveListQuery = "select electiveList from PatientElectiveList as electiveList left join electiveList.referral as cats left join electiveList.pathwayClock as pc where cats.id = :CatsId and pc.id = :PathwayClock";
			List<?> electiveList = factory.find(patientElectiveListQuery, new String[] {"CatsId", "PathwayClock"}, new Object[] {catsReferral.getID_CatsReferral(), currentClock.getId()});
			
			if(electiveList != null && electiveList.size() > 0 && electiveList.get(0) instanceof PatientElectiveList)
			{
				doPatientElectiveList = (PatientElectiveList) electiveList.get(0);	
			}
		}
	
		MemberOfStaff domainMOS = null;
		Object mosUser = getMosUser();
		
		if(mosUser instanceof MemberOfStaffShortVo)
		{
			domainMOS = MemberOfStaffShortVoAssembler.extractMemberOfStaff(factory,((MemberOfStaffShortVo) getMosUser()));
		}
		
		if(doPatientElectiveList != null)
		{
			ElectiveListStatus status = new ElectiveListStatus();
			status.setElectiveListStatus(getDomLookup(WaitingListStatus.REQUIRES_TCI));
			status.setAuthoringUser(domainMOS);
			status.setStatusDateTime(new Date());
			
			doPatientElectiveList.setElectiveListStatus(status);
			
			if(doPatientElectiveList.getElectiveListStatusHistory() == null)
				doPatientElectiveList.setElectiveListStatusHistory(new ArrayList());
			
			doPatientElectiveList.getElectiveListStatusHistory().add(status);
			
			TCIForPatientElectiveList doTCIDetails = doPatientElectiveList.getTCIDetails();
			
			
			if(doTCIDetails != null)
			{
    			doPatientElectiveList.setTCIDetails(null);
    			
    			TCIOutcomeForPatientElectiveList newOutcome = new TCIOutcomeForPatientElectiveList();
    			
    			//WDEV-18249
    			if (isPatientCancellation)
    			{
    				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2));
    			}
    			else if (isProviderCancellation)
    			{	
    					
            		if(doTCIDetails.getTCIDate() != null && (new Date()).before(doTCIDetails.getTCIDate()))
            			newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6));
            		else
            				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7));
    				
        			
        			if(doPatientElectiveList.getPathwayClock() != null)
        				tciClock = doPatientElectiveList.getPathwayClock().getId();   			
    			}
    			
    			//wdev-18419
    			if( Boolean.TRUE.equals(cancelledfornonmedicalreason))
    			{
    				newOutcome.setOutcome(getDomLookup(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7));
					newOutcome.setCancelledForNonMedicalReason(true);
    				
    				ims.framework.utils.Date dtnow = new ims.framework.utils.Date();
    				dtnow.addDay(28);
    				doPatientElectiveList.setRequiresTCIBy(dtnow.getDate());
    				doPatientElectiveList.setTCICancelledByProvider(true);
    				
    			}
    			//---------
    			newOutcome.setChangeBy(domainMOS);
    			newOutcome.setStatusDateTime(new Date());
    			newOutcome.setOutcomeReason(getDomLookup(TCIStatusChangeReason.LINKEDTHEATREAPPTCANCELLED));
    			
    			doTCIDetails.setCurrentOutcome(newOutcome);
    			if(doTCIDetails.getOutcomeHistory() == null)
    				doTCIDetails.setOutcomeHistory(new ArrayList());
    			
    			doTCIDetails.getOutcomeHistory().add(newOutcome);
    			
    			if(doPatientElectiveList.getTCIHistory() == null)
    				doPatientElectiveList.setTCIHistory(new ArrayList());
    			
    			doPatientElectiveList.getTCIHistory().add(doTCIDetails);
			}
			
			saveElectiveList = true;
		}
		
		if(Boolean.TRUE.equals(isProviderCancellation))
		{
    		if(doCatsReferral.getElectiveEROD() == null)
    			return;
    		
    		ReferralEROD doErod = null;
    		ReferralEROD elEROD = null;
    		
    		for(int i=0; i<doCatsReferral.getElectiveEROD().size(); i++)
    		{
    			if(doCatsReferral.getElectiveEROD().get(i) instanceof ReferralEROD)
    			{
    				if(((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock() != null && ((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getPathWayClock().getId().equals(tciClock))
    				{
    					doErod = (ReferralEROD) doCatsReferral.getElectiveEROD().get(i);
    					doCatsReferral.getElectiveEROD().remove(i);
    					break;
    				}
    			}
    		}
    		    		
    		if(doErod != null)
    		{
    			doErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    		
    			if(doCatsReferral.getElectiveERODHistory() == null)
    				doCatsReferral.setElectiveERODHistory(new java.util.ArrayList());
    		
    			doCatsReferral.getElectiveERODHistory().add(doErod);
    			
    			if(doCatsReferral.getJourney() != null && doCatsReferral.getJourney().getCurrentClock() != null && doCatsReferral.getJourney().getCurrentClock().getCurrentPause() != null)
    			{
    				PauseDetails currentPause = doCatsReferral.getJourney().getCurrentClock().getCurrentPause();
    				
    				if(doCatsReferral.getJourney().getCurrentClock().getPauseDetails() != null)
    				{
    					for(int i=0; i<doCatsReferral.getJourney().getCurrentClock().getPauseDetails().size(); i++)
    					{
    						PauseDetails pause = (PauseDetails) doCatsReferral.getJourney().getCurrentClock().getPauseDetails().get(i);
    						if(currentPause.equals(pause) && Boolean.TRUE.equals(pause.isActive()))
    						{
    							doCatsReferral.getJourney().getCurrentClock().getPauseDetails().remove(i);
    							break;
    						}
    					}
    				}
    				
    				currentPause.setActive(false);
    				doCatsReferral.getJourney().getCurrentClock().getPauseDetails().add(currentPause);	
    			}
    		
    			factory.save(doCatsReferral);
    		}
    		
    		//WDEV-18455 
    		if (doPatientElectiveList != null && doPatientElectiveList.getEROD() != null && doPatientElectiveList.getEROD() instanceof ReferralEROD && doPatientElectiveList.getEROD().getPathWayClock().getId().equals(tciClock))
    		{
    			elEROD = (ReferralEROD) doPatientElectiveList.getEROD();
    			doPatientElectiveList.setEROD(null);
    			saveElectiveList = true;
    		}
    		
    		if (elEROD != null)
    		{
    			elEROD.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
    			doPatientElectiveList.getERODHistory().add(elEROD);
    		}
		}
		
		if(saveElectiveList)
			factory.save(doPatientElectiveList);
	}

	public Boolean thereAreActivePatientElectiveListsForCurrentCatsReferral(
			CatsReferralRefVo catsReferralVo) 
	{
		AppointmentOutcomeDialog impl = (AppointmentOutcomeDialog) getDomainImpl(AppointmentOutcomeDialogImpl.class);		
		return impl.thereAreActivePatientElectiveListsForCurrentCatsReferral(catsReferralVo);
	}

	//WDEV-18437
	public CatsReferralCurrentStatusVo getCatsReferralStatus(CatsReferralRefVo catsReferralRef)
	{
		if(catsReferralRef == null)
			throw new CodingRuntimeException("Cannot get ReferralStatus on null ReferralRef.");
		
		return CatsReferralCurrentStatusVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, catsReferralRef.getID_CatsReferral()));
	}

		
}
