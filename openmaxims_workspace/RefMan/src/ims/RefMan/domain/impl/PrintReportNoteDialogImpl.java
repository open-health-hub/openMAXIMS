// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3631.21133)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BasePrintCorrespondenceNoteDialogImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ReportNote;
import ims.RefMan.vo.AppointmentClinicalNotesVoCollection;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.CorrespondenceNoteVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVoCollection;
import ims.RefMan.vo.domain.AppointmentClinicalNotesVoAssembler;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.CorrespondenceNoteVoAssembler;
import ims.RefMan.vo.domain.ReportNotePrintTemplateVoAssembler;
import ims.RefMan.vo.lookups.ReportNoteStatus;
import ims.RefMan.vo.lookups.ReportNoteType;
import ims.core.documents.domain.objects.PatientDocument;
import ims.core.vo.domain.PatientDocumentVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class PrintReportNoteDialogImpl extends BasePrintCorrespondenceNoteDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.AppointmentClinicalNotesVoCollection listReportNotes(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) 
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select notes from AppointmentClinicalNotes as notes left join notes.catsReferral as cats left join notes.noteStatus as status");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("  where cats.id = :idCatsRefferal");
		names.add("idCatsRefferal");
		values.add(catsRefVo.getID_CatsReferral());	
		
		hql.append("  and status.id in ( " + ReportNoteStatus.ACTIVE.getID() + ")");		
		hql.append(" and notes.isRIE is null");		

		List result = factory.find(hql.toString(),names,values);
		
		if (result != null && result.size() > 0) 
		{
			AppointmentClinicalNotesVoCollection voColl = AppointmentClinicalNotesVoAssembler.createAppointmentClinicalNotesVoCollectionFromAppointmentClinicalNotes(result);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl;
			}
		}
		
		return null;
	}

	public ims.RefMan.vo.CorrespondenceNoteVo saveReportNote(ims.RefMan.vo.CorrespondenceNoteVo note) throws ims.domain.exceptions.StaleObjectException
	{
		if(note == null) {
			throw new CodingRuntimeException("ReportNoteVo is null");
		}			
		
		DomainFactory factory = getDomainFactory();
		ReportNote doReportNote = CorrespondenceNoteVoAssembler.extractReportNote(factory, note);				
		factory.save(doReportNote);				
		
		//On save of a Report Note record if the status is ACTIVE please add the "Report Note Type" selected 
		//to the CATSReferral.ReportsRequired collection if it is not already in the collection
		if (note.getNoteStatusIsNotNull())
		{
			if (note.getCatsReferralIsNotNull())
			{
				CatsReferralWizardVo currentCatsReferral = getCatsReferral(note.getCatsReferral());
				if (currentCatsReferral != null)
				{
					ReportsRequiredForPrintingVoCollection reportsRequiredColl = currentCatsReferral.getReportsRequired();
					if (reportsRequiredColl == null) 
						reportsRequiredColl = new ReportsRequiredForPrintingVoCollection();
					
					ReportNoteType reportNoteType = note.getNoteType();
					boolean found = false;					
					
					if (reportNoteType != null)
					{					
						ReportsRequiredForPrintingVo voReportReq = new ReportsRequiredForPrintingVo();
						voReportReq.setReportsRequired(reportNoteType);
						
						for (int i = 0; i < reportsRequiredColl.size(); i++) 
						{
							if (reportsRequiredColl.get(i).getReportsRequired().equals(reportNoteType))
							{								
								if (note.getNoteStatus().equals(ReportNoteStatus.DRAFT) && note.getID_ReportNoteIsNotNull())
								{	
									found = true;
									for (int j = 0 ; reportsRequiredColl != null && j < reportsRequiredColl.size() ; j++)
									{
										if (reportsRequiredColl.get(j).getReportsRequired().equals(reportNoteType))
										{
											reportsRequiredColl.remove(j);
											break;
										}
									}
									currentCatsReferral.setReportsRequired(reportsRequiredColl);
									
									CatsReferral doCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, currentCatsReferral);		
									factory.save(doCatsReferral);		
									
									break;
								}								
							}
						}
						
						if (!found && note.getNoteStatus().equals(ReportNoteStatus.ACTIVE))
						{
							reportsRequiredColl.add(voReportReq);
							currentCatsReferral.setReportsRequired(reportsRequiredColl);
							
							CatsReferral doCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, currentCatsReferral);		
							factory.save(doCatsReferral);		
						}																								
					}
				}				
			}											
		}
		
		CorrespondenceNoteVo reportNoteForPreview = (CorrespondenceNoteVo) note.clone();
		reportNoteForPreview.setID_ReportNote(null);
		reportNoteForPreview.setNoteStatus(ReportNoteStatus.PREVIEW);
		ReportNote doReportNoteForPreview = CorrespondenceNoteVoAssembler.extractReportNote(factory, reportNoteForPreview);				
		factory.save(doReportNoteForPreview);
		
		return CorrespondenceNoteVoAssembler.create(doReportNote);
	}

	public ims.RefMan.vo.CorrespondenceNoteVo getReportNote(ims.RefMan.vo.ReportNoteRefVo note)
	{
		if (note == null)
			throw new RuntimeException("Cannot get ReportNoteVo for null ReportNoteRefVo");

		ReportNote doReportNote = (ReportNote) getDomainFactory().getDomainObject(ReportNote.class, note.getID_ReportNote());
		return CorrespondenceNoteVoAssembler.create(doReportNote);		
	}

	public ims.RefMan.vo.CatsReferralWizardVo getCatsReferral(ims.RefMan.vo.CatsReferralRefVo voCatsRef)
	{
		return CatsReferralWizardVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public ims.RefMan.vo.CatsReferralWizardVo saveCatsReferral(ims.RefMan.vo.CatsReferralWizardVo record) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	private Integer getTemplateID(ims.RefMan.vo.lookups.ReportNoteType reportNoteType) 
	{
		DomainFactory factory = getDomainFactory();
		List reports =  factory.find("from ReportNotePrintTemplate rnpt where rnpt.noteType = :noteType",
				new String[]{"noteType"},new Object[]{getDomLookup(reportNoteType)});
		
		if(reports != null && reports.size() > 0)
			return ReportNotePrintTemplateVoAssembler.createReportNotePrintTemplateVoCollectionFromReportNotePrintTemplate(reports).get(0).getTemplate().getID_TemplateBo();
		
		return null;
	}

	/**
	* getSystemReportAndTemplate
	*/
	public String[] getReportAndTemplate(ims.RefMan.vo.lookups.ReportNoteType reportNoteType)
	{
		String[] result = null;		
		DomainFactory factory = getDomainFactory();
			
		List lst = factory.find("select r1_1.reportXml, t1_1.templateXml, r1_1.reportName, r1_1.reportDescription, t1_1.name, t1_1.description from ReportBo as r1_1 left join r1_1.templates as t1_1 where (t1_1.id = :templateid) order by t1_1.name", new String[] {"templateid"}, new Object[] {getTemplateID(reportNoteType)});
			
		if(lst.iterator().hasNext())
		{
			Object[] obj = (Object[])lst.iterator().next();
				
			result = new String[] {(String)obj[0], (String)obj[1], (String)obj[2], (String)obj[3], (String)obj[4], (String)obj[5]};
		}
			
		return result;
	}

	/**
	* savePatientDocument
	*/
	public void savePatientDocument(ims.core.vo.PatientDocumentVo document, ims.RefMan.vo.CatsReferralWizardVo catReferral) throws ims.domain.exceptions.StaleObjectException
	{
		if (document != null)
		{
			if (!document.isValidated())
				throw new DomainRuntimeException("PatientDocumentVo not validated");
		}
		
		DomainFactory factory = getDomainFactory();
		PatientDocument doc = PatientDocumentVoAssembler.extractPatientDocument(factory, document);
		factory.save(doc);				

		CatsReferral doCatsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory, catReferral);
		if (catReferral != null) 
			doCatsReferral.getReferralDocuments().add(doc);						
		
		factory.save(doCatsReferral);
	}
}
