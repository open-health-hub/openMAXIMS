// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.BookAppointment;
import ims.RefMan.domain.ReferralAppointmentDetailsComponent;
import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.base.impl.BaseRemoveFromElectiveListImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.vo.domain.PatientElectiveListForTCIDetailsDialogVoAssembler;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.impl.SessionAdminImpl;

public class RemoveFromElectiveListImpl extends BaseRemoveFromElectiveListImpl
{

	private static final long serialVersionUID = 1L;

	public ims.scheduling.vo.Booking_AppointmentVo getBookingAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
		return impl.getBookingAppointment(appt);
	}

	public ims.RefMan.vo.CatsReferralListVo getCatsReferral(ims.RefMan.vo.CatsReferralRefVo voReferralRef)
	{
		ReferralStatusList impl = (ReferralStatusList) getDomainImpl(ReferralStatusListImpl.class);
		return impl.getCatsReferral(voReferralRef);		
	}

	public ims.scheduling.vo.Booking_AppointmentVo cancelAppt(ims.scheduling.vo.Booking_AppointmentVo appt, ims.chooseandbook.vo.lookups.ActionRequestType requestType, String requestSource) throws ims.domain.exceptions.StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public void updateCatsReferralAdditionalInvStatus(ims.RefMan.vo.CatsReferralRefVo catsReferral) throws ims.domain.exceptions.StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral);	
	}

	public void updateCatsReferralCancelStatus(ims.RefMan.vo.CatsReferralRefVo catsReferral) throws ims.domain.exceptions.StaleObjectException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		impl.updateCatsReferralCancelStatus(catsReferral);
	}

	public void cancelReferralEROD(ims.RefMan.vo.CatsReferralRefVo catsReferral, ims.scheduling.vo.Booking_AppointmentRefVo apptRef) throws ims.domain.exceptions.StaleObjectException
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		if(doCatsReferral.getElectiveEROD() == null)
			return;
		
		ReferralEROD doErod = null;
		
		for(int i=0; i<doCatsReferral.getElectiveEROD().size(); i++)
		{
			if(doCatsReferral.getElectiveEROD().get(i) instanceof ReferralEROD)
			{
				if(((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getAppointment() != null && ((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getAppointment().getId().equals(apptRef.getID_Booking_Appointment()))
				{
					doErod = (ReferralEROD) doCatsReferral.getElectiveEROD().get(i);
					doCatsReferral.getElectiveEROD().remove(doErod);
					break;
				}
			}
		}
		
		if(doErod != null)
		{
			doErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
		
			if(doCatsReferral.getElectiveERODHistory() == null)
				doCatsReferral.setElectiveERODHistory(new java.util.ArrayList());
		
			doCatsReferral.getElectiveERODHistory().add(doErod);
		
			factory.save(doCatsReferral);
		}
	}

	public ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo save(ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo record) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		PatientElectiveList doPatientElectiveList = PatientElectiveListForTCIDetailsDialogVoAssembler.extractPatientElectiveList(factory, record);
		if( doPatientElectiveList != null)
			factory.save(doPatientElectiveList);
		
		return PatientElectiveListForTCIDetailsDialogVoAssembler.create(doPatientElectiveList);
	}

	public ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo getPatientElectiveList(ims.RefMan.vo.PatientElectiveListRefVo record)
	{
		if( record == null )
			throw new CodingRuntimeException("PatientElectiveListRefVo cannot be null");
		
		PatientElectiveList doPatientElectiveList = (PatientElectiveList) getDomainFactory().getDomainObject(PatientElectiveList.class, record.getID_PatientElectiveList());
		return PatientElectiveListForTCIDetailsDialogVoAssembler.create(doPatientElectiveList);
	}
}
