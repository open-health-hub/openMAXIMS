// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.RefMan.domain.base.impl.BaseInpatientClinicalCodingWorklistImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVo;
import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVoCollection;
import ims.RefMan.vo.InpatientClinicalCodingWorklistSearchCriteriaVo;
import ims.RefMan.vo.domain.DischargedEpisodeForClinicalCodingWorklistVoAssembler;
import ims.core.admin.pas.domain.objects.DischargedEpisode;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

import java.util.ArrayList;
import java.util.List;

public class InpatientClinicalCodingWorklistImpl extends BaseInpatientClinicalCodingWorklistImpl
{
	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVoCollection listDischargedEpisodes(ims.RefMan.vo.InpatientClinicalCodingWorklistSearchCriteriaVo criteria)
	{
		if(criteria == null || new InpatientClinicalCodingWorklistSearchCriteriaVo().equals(criteria))
			throw new DomainRuntimeException("At least one search criteria must be provided");
		
		DomainFactory factory = getDomainFactory();
		
		StringBuilder hqlJoins = new StringBuilder("select dischargeEpis, cats from DischargedEpisode as dischargeEpis left join dischargeEpis.pasEvent as pasEvent, CatsReferral as cats left join cats.careContext as cc left join cc.pasEvent as ccPasEvent ");
		StringBuilder hqlConditions = new StringBuilder(" where pasEvent.id = ccPasEvent.id ");	
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		String and = " and ";
		
		if(criteria.getSpecialty() != null)
		{
			hqlJoins.append(" left join pasEvent.specialty as spec ");
			hqlConditions.append(and);
			hqlConditions.append(" spec.id = :SpecialtyId ");
			paramNames.add("SpecialtyId");
			paramValues.add(criteria.getSpecialty().getID());
			and = " and ";
		}
		
		if(criteria.getDischargeWard() != null)
		{
			hqlJoins.append(" left join pasEvent.location as loc ");
			hqlConditions.append(and);
			hqlConditions.append(" loc.id = :LocationId ");
			paramNames.add("LocationId");
			paramValues.add(criteria.getDischargeWard().getID());
			and = " and ";
		}
		
		if(criteria.getConsultant() != null)
		{
			hqlJoins.append(" left join pasEvent.consultant as consultant ");
			hqlConditions.append(and);
			hqlConditions.append(" consultant.id = :ConsultantId ");
			paramNames.add("ConsultantId");
			paramValues.add(criteria.getConsultant().getIMosHcpId());
			and = " and ";
		}
		
		if(criteria.getDischargeFrom() != null)
		{
			hqlConditions.append(and);
			hqlConditions.append(" dischargeEpis.dischargeDateTime >= :FromDate ");
			paramNames.add("FromDate");
			paramValues.add(new DateTime(criteria.getDischargeFrom(), new Time("00:00:00")).getJavaDate());
			and = " and ";
		}
		
		if(criteria.getDischargeTo() != null)
		{
			hqlConditions.append(and);
			hqlConditions.append(" dischargeEpis.dischargeDateTime <= :ToDate ");
			paramNames.add("ToDate");
			paramValues.add(new DateTime(criteria.getDischargeTo(), new Time("23:59:59")).getJavaDate());
			and = " and ";
		}
		
		if(Boolean.TRUE.equals(criteria.getRequiresCoding()))
		{
			hqlConditions.append(and);
			hqlConditions.append(" (dischargeEpis.isCoded is null or dischargeEpis.isCoded = 0) ");
			and = " and ";
		}
		
		if(Boolean.TRUE.equals(criteria.getEpisodeCoded()))
		{
			hqlConditions.append(and);
			hqlConditions.append(" dischargeEpis.isCoded = 1 ");
			and = " and ";
		}
		
		hqlConditions.append(" order by dischargeEpis.dischargeDateTime asc ");
		
		List<?> list = factory.find(hqlJoins.append(hqlConditions.toString()).toString(), paramNames, paramValues);
		
		if(list == null)
			return null;
		
		DischargedEpisodeForClinicalCodingWorklistVoCollection coll = new DischargedEpisodeForClinicalCodingWorklistVoCollection();
		
		for(int i=0; i<list.size(); i++)
		{
			Object[] record = (Object[]) list.get(i);
			
			if(record == null)
				continue;
			
			DischargedEpisodeForClinicalCodingWorklistVo item = null;
			if(record[0] instanceof DischargedEpisode)
			{
				item = DischargedEpisodeForClinicalCodingWorklistVoAssembler.create((DischargedEpisode) record[0]);
			}
			
			if(record[1] instanceof CatsReferral && item != null)
			{
				CatsReferral doCatsReferral = (CatsReferral)record[1];
				
				item.setCatsReferral(new CatsReferralRefVo(doCatsReferral.getId(), doCatsReferral.getVersion()));
			}
			
			if(item != null)
			{
				coll.add(item);
			}
		}
		
		return coll;
	}

	public LocSiteLiteVo getCurrentHospital(ILocation location)
	{
		if(location == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		Location currentHospital = getHospital((Location) factory.getDomainObject(Location.class, location.getID()));
		
		if(currentHospital instanceof LocSite)
			return LocSiteLiteVoAssembler.create((LocSite) currentHospital);
		
		return null;
	}
	
	private Location getHospital(Location doLocation)
	{
		if(doLocation == null)
			return null;
		
		if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
			return doLocation;
	
		while(doLocation.getParentLocation() != null) 
		{
			doLocation = doLocation.getParentLocation();
			if(doLocation instanceof Location && doLocation.getType().equals(getDomLookup(LocationType.HOSP)))
				return doLocation;
		}
		
		return null;
	}

	public LocationLiteVoCollection listWards(LocationRefVo hospital, String wardName)
	{
		OrganisationAndLocation implLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return implLoc.listActiveWardsForHospitalByNameLite(hospital, wardName);
	}
}
