// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.baselineobscomponent;

import ims.RefMan.forms.baselineobscomponent.GenForm.grdSpecialNeedsRow;
import ims.RefMan.vo.BaselineObservationsVo;
import ims.clinical.vo.PatientSpecialNeedVo;
import ims.clinical.vo.PatientSpecialNeedVoCollection;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.VSBloodPressure;
import ims.core.vo.VSMetrics;
import ims.core.vo.VSPulse;
import ims.core.vo.VSRespirations;
import ims.core.vo.VSTemperature;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.lookups.SpecialNeed;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				addSpecialNeed();
			break;
			case GenForm.ContextMenus.GenericGrid.Remove:
				removeSpecialNeed();
			break;
		}
	}

	private void removeSpecialNeed()
	{
		form.grdSpecialNeeds().getRows().remove(form.grdSpecialNeeds().getSelectedRowIndex());
		
		form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
		form.getContextMenus().getGenericGridRemoveItem().setEnabled(false);

	}
	
	private void addSpecialNeed() 
	{
		form.grdSpecialNeeds().getRows().newRow();
	}

	/**
	* init component
	*/
	public Boolean initialize()
	{
		if (form.getMode().equals(FormMode.EDIT))
			return false;

		clearScreen();

		if (domain.getHcpLiteUser() == null)
		{
			engine.showMessage("Logged in user is not a HCP.");
			form.setMode(FormMode.VIEW);
			form.btnEdit().setVisible(false);//wdev-6459
			form.getContextMenus().hideAllGenericGridMenuItems();
			open();
			return false;
		}
		form.customControlAuthoring().setIsRequiredPropertyToControls(true);
		
		manageMenus();
		open();
		
		//wdev-6163
		if(form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull()
			&& 	form.getGlobalContext().RefMan.getIsProviderCancellation())
		{
			form.setMode(FormMode.VIEW);
			form.btnEdit().setVisible(false);
			form.getContextMenus().hideAllGenericGridMenuItems();
		}


		return true;
	}

	private void manageMenus()
	{
		form.getContextMenus().hideAllGenericGridMenuItems();		
		
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.customControlAuthoring().setEnabledAuthoringHCP(true);
			form.customControlAuthoring().setEnabledDateTime(true);

			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getGenericGridAddItem().setEnabled(true);
			
			if (form.grdSpecialNeeds().getSelectedRow()!=null)
			{
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setEnabled(true);
			}
		}
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().hideAllGenericGridMenuItems();
		}
	}

	private void clearScreen() 
	{
		clearObs();
		
		form.customControlAuthoring().setValue(null);
		
		form.cmbSmoke().setValue(null);
		form.intAlcohol().setValue(null);
		form.txtSpecialDiet().setValue(null);
		form.grdSpecialNeeds().getRows().clear();
	}
	
	private void clearObs() 
	{
		form.intBPDIA().setValue(null);
		form.intBPSYS().setValue(null);
		
		form.intResp().setValue(null);
		form.intHeartRate().setValue(null);
		form.decTemp().setValue(null);
		
		form.decHeight().setValue(null);
		form.decWeight().setValue(null);
		form.decBMI().setValue(null);
	}
	
	public String[] validate(String[] existingErrors)
	{
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();

		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}

		if (form.decHeight().getValue() != null || form.decWeight().getValue() != null)
			if (form.decHeight().getValue() == null || form.decWeight().getValue() == null)
				listOfErrors.add("Please enter both Height and Weight values.");

		if (form.intBPDIA().getValue() != null || form.intBPSYS().getValue() != null)
			if ((form.intBPDIA().getValue() != null && form.intBPSYS().getValue() == null) 
				|| (form.intBPDIA().getValue() == null && form.intBPSYS().getValue() != null))
				listOfErrors.add("Please enter both Blood Pressure values.");

		String[] result = new String[listOfErrors.size()];
		for(int x = 0; x < listOfErrors.size(); x++)
			result[x] = (String)listOfErrors.get(x);

		return result;
	}

	private ArrayList<String> getScreenDataErrors(ArrayList<String> errors) 
	{
		if ((form.intBPDIA().getValue() != null && form.intBPSYS().getValue() == null) || 
				(form.intBPDIA().getValue() == null && form.intBPSYS().getValue() != null))
				errors.add("Please enter both Blood Pressure values.");


		if (form.decHeight().getValue() != null || form.decWeight().getValue() != null)
		{
			if (form.decHeight().getValue() == null || form.decWeight().getValue() == null) 
			{
				errors.add("Please enter both Height and Weight for Metrics.");
			}
			else
			{
				if ((form.decHeight().getValue() == 0 || form.decHeight().getValue() < 1) ||
						(form.decWeight().getValue() == 0 || form.decWeight().getValue() < 0))
				{
					errors.add("A non-zero and greater than 1 value needs to be specified for Height and Weight");					
				}
			}
		}		
		return errors;
	}

	
	private BaselineObservationsVo populateDataFromScreen()
	{
		ArrayList<String> screenErrors = new ArrayList<String>();
		screenErrors = getScreenDataErrors(screenErrors);
		if (screenErrors != null && screenErrors.size() > 0)
		{
			String[] err = new String[screenErrors.size()];		
			screenErrors.toArray(err);
			engine.showErrors(err);					
			return null;
		}
		
		BaselineObservationsVo voBaseline = form.getLocalContext().getSelectedRecord();
		if (voBaseline == null)
			voBaseline = new BaselineObservationsVo();

		if (voBaseline.getCatsReferral() == null)
			voBaseline.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		VitalSignsVo voVitalSign = null;
		if (voBaseline.getVitalSigns() == null)
			voVitalSign = new VitalSignsVo();
		else
			voVitalSign = voBaseline.getVitalSigns();

		if ((form.intBPDIA().getValue() != null) 
			&& (form.intBPSYS().getValue() != null))
		{
			VSBloodPressure voBP = new VSBloodPressure();
			voBP.setBPSittingDias(new Float(form.intBPDIA().getValue().intValue()));
			voBP.setBPSittingSys(new Float(form.intBPSYS().getValue().intValue()));

			voVitalSign.setBloodPressure(voBP);
		}
		else if ((form.intBPDIA().getValue() == null) 
				&& (form.intBPSYS().getValue() == null))
			voVitalSign.setBloodPressure(null);

		if (form.intHeartRate().getValue() != null)
		{
			VSPulse voPulse = new VSPulse();
			voPulse.setPulseRateRadial(form.intHeartRate().getValue());

			voVitalSign.setPulse(voPulse);
		}
		else if (form.intHeartRate().getValue() == null)
			voVitalSign.setPulse(null);

		if (form.decTemp().getValue() != null)
		{
			VSTemperature voTemperature = new VSTemperature();
			voTemperature.setTemperature(form.decTemp().getValue());
			voVitalSign.setTemperature(voTemperature);
		}
		else if (form.decTemp().getValue() == null)
			voVitalSign.setTemperature(null);

		if (form.intResp().getValue() != null)
		{
			VSRespirations voResp = new VSRespirations();
			voResp.setRespRate(form.intResp().getValue());
			voVitalSign.setRespiratory(voResp);
		}
		else if (form.intResp().getValue() == null)
			voVitalSign.setRespiratory(null);

		if (form.decHeight().getValue() != null || form.decWeight().getValue() != null)
		{
			VSMetrics voMetrics = null;
			if (voVitalSign.getMetrics() == null)
				voMetrics = new VSMetrics();
			else
				voMetrics = voVitalSign.getMetrics();
			
			voMetrics.setHeightValue(form.decHeight().getValue());
			voMetrics.setWeightValue(form.decWeight().getValue());
			if (form.decHeight().getValue() != null && form.decWeight().getValue() != null)
			{
				voMetrics.setBMI(bodyMassIndex(form.decHeight().getValue().floatValue(), form.decWeight().getValue().floatValue()));
				voMetrics.setSurfaceArea(bodySurfaceArea(form.decHeight().getValue().floatValue(), form.decWeight().getValue().floatValue()));
			}
			voMetrics.setHeightEstimatedMeasured(Boolean.TRUE); // default
			// to
			// measured
			voMetrics.setWeightEstimatedMeasured(Boolean.TRUE); // default
			// to
			// measured
			if (voMetrics.getPatient() == null)
				voMetrics.setPatient(form.getGlobalContext().Core.getPatientShort());
			
			voVitalSign.setMetrics(voMetrics);
		}
		else if ((form.decHeight().getValue() == null) && (form.decWeight().getValue() == null))
			voVitalSign.setMetrics(null);

		voVitalSign.setAuthoringInformation(getAuthoringInfo());

		voVitalSign.setVitalsTakenDateTime(form.customControlAuthoring().getValue() != null ? form.customControlAuthoring().getValue().getAuthoringDateTime() : null);

		if (voVitalSign.getCareContext() == null)
			voVitalSign.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());//TODO
		
		voBaseline.setVitalSigns(voVitalSign);
		
		voBaseline.setUnitsOfAlcoholConsumedPerWeek(form.intAlcohol().getValue()!=null?new Float(form.intAlcohol().getValue()):null);//WDEV-12337 Form will not be used anymore . Fix at this time so DEV build to be successful
		
		
		voBaseline.setAuthoringDateTime(form.customControlAuthoring().getValue() != null ? form.customControlAuthoring().getValue().getAuthoringDateTime(): null);
		voBaseline.setAuthoringUser(form.customControlAuthoring().getValue() != null ? domain.getMos(form.customControlAuthoring().getValue().getAuthoringHcp()) : null);
		voBaseline.setSmokingStatus(form.cmbSmoke().getValue());
		voBaseline.setObservationNotes(form.txtSpecialDiet().getValue());

		//----------------------------------Special Needs ----------------------------------------
		for ( int i = 0 ; i < form.grdSpecialNeeds().getRows().size() ; i++)
		{
			grdSpecialNeedsRow row = form.grdSpecialNeeds().getRows().get(i);
			
			//New record
			if (row.getValue() == null)
			{
				if ( voBaseline.getSpecialNeeds() == null)
					voBaseline.setSpecialNeeds(new PatientSpecialNeedVoCollection());
				
				PatientSpecialNeedVo voNew = new PatientSpecialNeedVo();
				voNew.setDetails(row.getcolReferralDetails());
				voNew.setSpecialNeed((SpecialNeed)row.getcolNeed());
				voNew.setIsActive(true);
				
				voBaseline.getSpecialNeeds().add(voNew);
			}
			
			//Updated record
			if (row.getValue() != null)
			{
				for (int j = 0 ; voBaseline.getSpecialNeedsIsNotNull() && j < voBaseline.getSpecialNeeds().size() ; j++)
				{
					if (voBaseline.getSpecialNeeds().get(j).equals(row.getValue()))
					{
						voBaseline.getSpecialNeeds().get(j).setDetails(row.getcolReferralDetails());
						voBaseline.getSpecialNeeds().get(j).setSpecialNeed((SpecialNeed)row.getcolNeed());
						voBaseline.getSpecialNeeds().get(j).setIsActive(true);
					}
				}
			}
		}	
		//Removed record.
		for (int k = 0 ; voBaseline.getSpecialNeedsIsNotNull() && k < voBaseline.getSpecialNeeds().size() ; k++)
		{
			boolean bFoundInGrid = false;
			
			for (int l = 0 ; l < form.grdSpecialNeeds().getRows().size() ; l++)
			{
				grdSpecialNeedsRow rowRemoved = form.grdSpecialNeeds().getRows().get(l);
				if (voBaseline.getSpecialNeeds().get(k).equals(rowRemoved.getValue())
					|| voBaseline.getSpecialNeeds().get(k).getID_PatientSpecialNeed() == null)
				{
					bFoundInGrid = true;
				}
			}
			if ( ! bFoundInGrid)
			{
				voBaseline.getSpecialNeeds().get(k).setIsActive(false);
			}
		}
		
		return voBaseline;
	}

	private AuthoringInformationVo getAuthoringInfo()
	{
		AuthoringInformationVo voAuthInfo = new AuthoringInformationVo();
		voAuthInfo.setAuthoringHcp(form.customControlAuthoring().getValue() != null ? form.customControlAuthoring().getValue().getAuthoringHcp() : null);
		voAuthInfo.setAuthoringDateTime(form.customControlAuthoring().getValue() != null ? form.customControlAuthoring().getValue().getAuthoringDateTime() : null);
		
		return voAuthInfo;
	}


	private Float bodySurfaceArea(float height/* cm */, float weight/* kg */)
	{
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (0.20247 * Math.pow(height / 100.0, 0.725) * Math.pow(weight, 0.425)));
	}
	/**
	* setValue
	*/
	private void populateScreenFromData(BaselineObservationsVo voBaselineObs) 
	{
		clearScreen();
		if (voBaselineObs == null)
		{
			return;
		}
		else
		{
			populateObs(voBaselineObs.getVitalSigns());
			
			AuthoringInformationVo voAuth = new AuthoringInformationVo();
			voAuth.setAuthoringDateTime(voBaselineObs.getAuthoringDateTimeIsNotNull() ? voBaselineObs.getAuthoringDateTime() : null);
			voAuth.setAuthoringHcp(voBaselineObs.getAuthoringUserIsNotNull() ? domain.getHCP(voBaselineObs.getAuthoringUser()) : null);
			form.customControlAuthoring().setValue(voAuth);
			
			form.cmbSmoke().setValue(voBaselineObs.getSmokingStatus());
			//form.intAlcohol().setValue(voBaselineObs.getAlcoholIsNotNull() ? voBaselineObs.getAlcohol().getUnitsPerWeekValue() : null);/*WDEV-12337 Form will not be used anymore . Fix at this time so DEV build to be successful		
			form.txtSpecialDiet().setValue(voBaselineObs.getObservationNotes());
			
			form.grdSpecialNeeds().getRows().clear();
			for ( int i = 0 ; voBaselineObs.getSpecialNeedsIsNotNull() && i < voBaselineObs.getSpecialNeeds().size() ; i++)
			{
				PatientSpecialNeedVo voSpecNeed = voBaselineObs.getSpecialNeeds().get(i);
				if (voSpecNeed.getIsActiveIsNotNull() && voSpecNeed.getIsActive())
				{
					grdSpecialNeedsRow row = form.grdSpecialNeeds().getRows().newRow();
					row.setcolNeed(voSpecNeed.getSpecialNeed());
					row.setcolReferralDetails(voSpecNeed.getDetails());
					row.setValue(voSpecNeed);
				}
			}
			
			if (form.getMode().equals(FormMode.EDIT) && voBaselineObs.getID_NursingNotesIsNotNull())//WDEV-12337 Form will not be used anymore . Fix at this time so DEV build to be successful
			{
				form.customControlAuthoring().setEnabledAuthoringHCP(false);
				form.customControlAuthoring().setEnabledDateTime(false);
			}
	
			form.getLocalContext().setSelectedRecord(voBaselineObs);
		}
	}	
		
	private void populateObs(VitalSignsVo vitalSigns) 
	{
		if (vitalSigns == null)
			return;
		
		if (vitalSigns.getBloodPressureIsNotNull())
		{
			form.intBPDIA().setValue(new Integer(vitalSigns.getBloodPressure().getBPSittingDias().intValue()));
			form.intBPSYS().setValue(new Integer(vitalSigns.getBloodPressure().getBPSittingSys().intValue()));
		}
		
		form.intHeartRate().setValue(vitalSigns.getPulseIsNotNull() ? vitalSigns.getPulse().getPulseRateRadial() : null);
		form.intResp().setValue(vitalSigns.getRespiratoryIsNotNull() ? vitalSigns.getRespiratory().getRespRate() : null);
		form.decTemp().setValue(vitalSigns.getTemperatureIsNotNull() ? vitalSigns.getTemperature().getTemperature() : null);
		
		form.decHeight().setValue(vitalSigns.getMetricsIsNotNull() ? vitalSigns.getMetrics().getHeightValue() : null);
		form.decWeight().setValue(vitalSigns.getMetricsIsNotNull() ? vitalSigns.getMetrics().getWeightValue() : null);
		form.decBMI().setValue(vitalSigns.getMetricsIsNotNull() ? vitalSigns.getMetrics().getBMI() : null);
	}

	private Float bodyMassIndex(float height/* cm */, float weight/* kg */)
	{
		// we have to convert the HEIGHT from cm to m as the formula requires m
		return new Float((float) (weight / (height / 100.0 * height / 100.0)));
	}

	@Override
	protected void onGrdSpecialNeedsSelectionChanged() throws PresentationLogicException 
	{
		manageMenus();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		
	}

	private void open() 
	{
		populateScreenFromData(domain.getBaselineObs(form.getGlobalContext().RefMan.getCatsReferral()));
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		// WDEV - 5977
		// populateScreenFromData(form.getLocalContext().getSelectedRecord());
		open();
		form.setMode(FormMode.VIEW);
		form.btnEdit().setVisible(true);

		//wdev-6218
		if(form.getLocalContext().getSelectedRecordIsNotNull()
			&& form.getLocalContext().getSelectedRecord().getID_NursingNotes() == null)//WDEV-12337 Form will not be used anymore . Fix at this time so DEV build to be successful
				form.getLocalContext().setSelectedRecord(null);
		fireOnFormModeChange(FormMode.VIEW);
		manageMenus();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		BaselineObservationsVo voBaseObs = form.getLocalContext().getSelectedRecord();
		if (voBaseObs == null)
			voBaseObs = new BaselineObservationsVo();

		// WDEV - 5976
		PatientSpecialNeedVoCollection specialNeeds = null;
		if (voBaseObs.getSpecialNeedsIsNotNull())
		{
			specialNeeds = (PatientSpecialNeedVoCollection) voBaseObs.getSpecialNeeds().clone();
		}
		
		voBaseObs = populateDataFromScreen();
		if (voBaseObs == null)
			return;
		
		String[] str = validate(voBaseObs.validate());
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			// WDEV - 5976
			voBaseObs.setSpecialNeeds(specialNeeds);			
			return;
		}
		
		try 
		{
			form.getLocalContext().setSelectedRecord(domain.saveBaselineObs(voBaseObs));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.toString());			
			return;
		}

		populateScreenFromData(voBaseObs);
		
		form.setMode(FormMode.VIEW);		
		form.btnEdit().setVisible(true);
		fireOnFormModeChange(FormMode.VIEW);
		manageMenus();
	}

	private void fireOnFormModeChange(FormMode mode)
	{
		form.getGlobalContext().RefMan.setIsComponentInEditMode(mode);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		open();
		form.setMode(FormMode.EDIT);
		
		if( form.getLocalContext().getSelectedRecord() == null)
			form.customControlAuthoring().initializeComponent();
		
		fireOnFormModeChange(FormMode.EDIT);
	}

	@Override
	protected void onFormModeChanged() 
	{
		manageMenus();

		if (form.getMode().equals(FormMode.EDIT))
		{	
			if( form.getLocalContext().getSelectedRecordIsNotNull()
				&& form.getLocalContext().getSelectedRecord().getID_NursingNotesIsNotNull())//WDEV-12337 Form will not be used anymore . Fix at this time so DEV build to be successful
			{
				form.customControlAuthoring().setEnabledAuthoringHCP(Boolean.FALSE);
				form.customControlAuthoring().setEnabledDateTime(Boolean.FALSE);
				form.customControlAuthoring().setMode(FormMode.VIEW);
			}
			else
			{
				form.customControlAuthoring().setEnabledAuthoringHCP(Boolean.TRUE);
				form.customControlAuthoring().setEnabledDateTime(Boolean.TRUE);
				form.customControlAuthoring().setMode(FormMode.EDIT);
			}
		}
	}

}
