// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.cliniclist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbContractComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.OrganisationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.OrganisationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.OrganisationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.OrganisationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.OrganisationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.OrganisationLiteVo getValue()
		{
			return (ims.core.vo.OrganisationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.OrganisationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSiteComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.framework.interfaces.ILocation value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.framework.interfaces.ILocation value)
		{
			return super.control.removeRow(value);
		}
		public ims.framework.interfaces.ILocation getValue()
		{
			return (ims.framework.interfaces.ILocation)super.control.getValue();
		}
		public void setValue(ims.framework.interfaces.ILocation value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.Status_Reason value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.Status_Reason getValue()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.Status_Reason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbProfileComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.ProfileShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSessionsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdSlotsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSlotsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolTime()
		{
			return (String)super.row.get(0);
		}
		public void setcolTime(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolSlotStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolSlotStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolSlotStatusOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolSlotStatus(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolSlotStatus()
		{
			return (String)super.row.get(1);
		}
		public void setcolSlotStatus(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolSlotStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolApptTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolApptTypeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolApptTypeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolApptType(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolApptType()
		{
			return (String)super.row.get(2);
		}
		public void setcolApptType(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolApptTypeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolPriorityReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolPriorityReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolPriorityOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolPriority(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolPriority()
		{
			return (String)super.row.get(3);
		}
		public void setcolPriority(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolPriorityTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolDetailsReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolDetailsOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolDetails(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolDetails()
		{
			return (String)super.row.get(4);
		}
		public void setcolDetails(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolDetailsTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColPatientShortReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColPatientShortReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColPatientShortOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColPatientShort(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.core.patient.vo.PatientRefVo getColPatientShort()
		{
			return (ims.core.patient.vo.PatientRefVo)super.row.get(5);
		}
		public void setColPatientShort(ims.core.patient.vo.PatientRefVo value)
		{
			super.row.set(5, value);
		}
		public void setCellColPatientShortTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcatsReferralReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscatsReferralReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcatsReferralOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcatsReferral(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.RefMan.vo.CatsReferralClinicListListVo getcatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralClinicListListVo)super.row.get(6);
		}
		public void setcatsReferral(ims.RefMan.vo.CatsReferralClinicListListVo value)
		{
			super.row.set(6, value);
		}
		public void setCellcatsReferralTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void sethasReferralLetterReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean ishasReferralLetterReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showhasReferralLetterOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForhasReferralLetter(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Image gethasReferralLetter()
		{
			return (ims.framework.utils.Image)super.row.get(7);
		}
		public void sethasReferralLetter(ims.framework.utils.Image value)
		{
			super.row.set(7, value);
		}
		public void setCellhasReferralLetterTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void sethasInvestigationsReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean ishasInvestigationsReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showhasInvestigationsOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForhasInvestigations(String value)
		{
			super.row.setTooltip(8, value);
		}
		public ims.framework.utils.Image gethasInvestigations()
		{
			return (ims.framework.utils.Image)super.row.get(8);
		}
		public void sethasInvestigations(ims.framework.utils.Image value)
		{
			super.row.set(8, value);
		}
		public void setCellhasInvestigationsTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void sethasAppointmentsReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean ishasAppointmentsReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showhasAppointmentsOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForhasAppointments(String value)
		{
			super.row.setTooltip(9, value);
		}
		public ims.framework.utils.Image gethasAppointments()
		{
			return (ims.framework.utils.Image)super.row.get(9);
		}
		public void sethasAppointments(ims.framework.utils.Image value)
		{
			super.row.set(9, value);
		}
		public void setCellhasAppointmentsTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setisChooseAndBookReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isisChooseAndBookReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showisChooseAndBookOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForisChooseAndBook(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.framework.utils.Image getisChooseAndBook()
		{
			return (ims.framework.utils.Image)super.row.get(10);
		}
		public void setisChooseAndBook(ims.framework.utils.Image value)
		{
			super.row.set(10, value);
		}
		public void setCellisChooseAndBookTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setcolApptStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean iscolApptStatusReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showcolApptStatusOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForcolApptStatus(String value)
		{
			super.row.setTooltip(11, value);
		}
		public String getcolApptStatus()
		{
			return (String)super.row.get(11);
		}
		public void setcolApptStatus(String value)
		{
			super.row.set(11, value);
		}
		public void setCellcolApptStatusTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSlotsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSlotsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSlotsRow get(int index)
		{
			return new grdSlotsRow(super.collection.get(index));
		}
		public grdSlotsRow newRow()
		{
			return new grdSlotsRow(super.collection.newRow());
		}
		public grdSlotsRow newRow(boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRow(autoSelect));
		}
		public grdSlotsRow newRowAt(int index)
		{
			return new grdSlotsRow(super.collection.newRowAt(index));
		}
		public grdSlotsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSlotsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdSlotsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSlotsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSlotsRowCollection getRows()
		{
			return new grdSlotsRowCollection(super.grid.getRows());
		}
		public grdSlotsRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSlotsRow(row);
		}
		public void setcolTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolSlotStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolSlotStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolApptTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolApptTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolPriorityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolPriorityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColPatientShortHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColPatientShortHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcatsReferralHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcatsReferralHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void sethasReferralLetterHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String gethasReferralLetterHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void sethasInvestigationsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String gethasInvestigationsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void sethasAppointmentsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String gethasAppointmentsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setisChooseAndBookHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getisChooseAndBookHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setcolApptStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getcolApptStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.ClinicListFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.ClinicListFilterVo' of the global context variable 'RefMan.ClinicListFilter' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.DiagnosticReferralForApplication' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Integer.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Integer' of the global context variable 'Core.CurrentCareContext.ContextType' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(110);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.TimerSearch = factory.createTimer(0, 10, false);
		form.addTimer(timers.TimerSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuClinicListRefMan = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuClinicListRefManEditReferralDetailsItem = factory.createMenuItem(startControlID.intValue() + 1, "Edit Referral Details", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570005)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManEditReferralDetailsItem);
		contextMenus.RefMan.contextMenuClinicListRefManDNAItem = factory.createMenuItem(startControlID.intValue() + 2, "DNA", true, false, new Integer(103158), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570011)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManDNAItem);
		contextMenus.RefMan.contextMenuClinicListRefManCANCELItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancel Appt", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570006)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManCANCELItem);
		contextMenus.RefMan.contextMenuClinicListRefManCANCELSLOTItem = factory.createMenuItem(startControlID.intValue() + 4, "Cancel Slot", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570007)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManCANCELSLOTItem);
		contextMenus.RefMan.contextMenuClinicListRefManREOPENItem = factory.createMenuItem(startControlID.intValue() + 5, "Re-Open", true, false, new Integer(102187), true, false);
		contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManREOPENItem);
		contextMenus.RefMan.contextMenuClinicListRefManStartConsultantContactItem = factory.createMenuItem(startControlID.intValue() + 6, "Start Consultant Contact", true, false, new Integer(102316), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570001)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManStartConsultantContactItem);
		contextMenus.RefMan.contextMenuClinicListRefManStartClinicalContactItem = factory.createMenuItem(startControlID.intValue() + 7, "Start Clinical Contact", true, false, new Integer(102317), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570002)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManStartClinicalContactItem);
		contextMenus.RefMan.contextMenuClinicListRefManStartTLTContactItem = factory.createMenuItem(startControlID.intValue() + 8, "Start TLT Contact", true, false, new Integer(103140), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570003)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManStartTLTContactItem);
		contextMenus.RefMan.contextMenuClinicListRefManEditConsultationDetailsItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit Consultation Details", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570004)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManEditConsultationDetailsItem);
		contextMenus.RefMan.contextMenuClinicListRefManNEWONWARDREFERRALItem = factory.createMenuItem(startControlID.intValue() + 10, "New Onward Referral ", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570008)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManNEWONWARDREFERRALItem);
		contextMenus.RefMan.contextMenuClinicListRefManEND_TLT_CONTACTItem = factory.createMenuItem(startControlID.intValue() + 11, "End TLT contact", true, false, new Integer(102214), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570009)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManEND_TLT_CONTACTItem);
		contextMenus.RefMan.contextMenuClinicListRefManARRIVEDItem = factory.createMenuItem(startControlID.intValue() + 12, "Patient Arrived", true, false, new Integer(102312), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570010)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManARRIVEDItem);
		contextMenus.RefMan.contextMenuClinicListRefManUNDO_ARRIVALItem = factory.createMenuItem(startControlID.intValue() + 13, "Undo Arrival", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2570012)))
			contextMenus.RefMan.contextMenuClinicListRefMan.add(contextMenus.RefMan.contextMenuClinicListRefManUNDO_ARRIVALItem);
		form.registerMenu(contextMenus.RefMan.contextMenuClinicListRefMan);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 12, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contract:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 36, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 432, 36, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Appt. Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 60, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 84, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinics: ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 432, 12, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 528, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Slot", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Appointment", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 512, 10, 136, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 80, 10, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbContractTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbContractTemp);
		cmbContractComboBox cmbContract = (cmbContractComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbContractComboBox.class, m_cmbContractTemp);
		super.addComboBox(cmbContract);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 80, 34, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSiteTemp);
		cmbSiteComboBox cmbSite = (cmbSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSiteComboBox.class, m_cmbSiteTemp);
		super.addComboBox(cmbSite);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 512, 34, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 80, 58, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbProfileTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbProfileTemp);
		cmbProfileComboBox cmbProfile = (cmbProfileComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProfileComboBox.class, m_cmbProfileTemp);
		super.addComboBox(cmbProfile);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 80, 82, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSessionsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSessionsTemp);
		cmbSessionsComboBox cmbSessions = (cmbSessionsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionsComboBox.class, m_cmbSessionsTemp);
		super.addComboBox(cmbSessions);

		// Grid Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 832, 472, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuClinicListRefMan, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdSlotsTemp);
		grdSlotsGrid grdSlots = (grdSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsGrid.class, m_grdSlotsTemp);
		grdSlots.addStringColumn("Time", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Slot Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Appt. Type", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Priority", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Booking Details", 0, 0, 210, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Patient Short", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Cats Referral", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addImageColumn(" ", 0, 1, 30, true, 0);
		grdSlots.addImageColumn(" ", 0, 1, 30, true, 0);
		grdSlots.addImageColumn(" ", 0, 1, 30, true, 0);
		grdSlots.addImageColumn(" ", 0, 1, 30, true, 0);
		grdSlots.addStringColumn("Appt. Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSlots);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 808, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Click button to start the automatic refresh of Clinic List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 776, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 744, 10, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnCancelSlot()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public DateControl dteSessionDate()
	{
		return (DateControl)super.getControl(8);
	}
	public cmbContractComboBox cmbContract()
	{
		return (cmbContractComboBox)super.getComboBox(0);
	}
	public cmbSiteComboBox cmbSite()
	{
		return (cmbSiteComboBox)super.getComboBox(1);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(2);
	}
	public cmbProfileComboBox cmbProfile()
	{
		return (cmbProfileComboBox)super.getComboBox(3);
	}
	public cmbSessionsComboBox cmbSessions()
	{
		return (cmbSessionsComboBox)super.getComboBox(4);
	}
	public grdSlotsGrid grdSlots()
	{
		return (grdSlotsGrid)super.getGrid(0);
	}
	public ImageButton imbAutoRefresh()
	{
		return (ImageButton)super.getControl(15);
	}
	public ImageButton btnClear()
	{
		return (ImageButton)super.getControl(16);
	}
	public ImageButton btnSearch()
	{
		return (ImageButton)super.getControl(17);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				BookingSlotStatus = new LocalFormName(114151);
				CancelAppointmentDialog = new LocalFormName(114160);
				BookAppointment = new LocalFormName(114149);
			}
			public final FormName BookingSlotStatus;
			public final FormName CancelAppointmentDialog;
			public final FormName BookAppointment;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointment = new LocalFormName(134123);
				ReferralDetailsDialog = new LocalFormName(134104);
				AtConsultationDialog = new LocalFormName(134111);
				NewOnwardReferral = new LocalFormName(134141);
				ArrivalSeenTimeDialog = new LocalFormName(134186);
			}
			public final FormName BookAppointment;
			public final FormName ReferralDetailsDialog;
			public final FormName AtConsultationDialog;
			public final FormName NewOnwardReferral;
			public final FormName ArrivalSeenTimeDialog;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
				PDFIcon = new ImageHelper(102294, "Images/Core/pdf.gif", new Integer(16), new Integer(16));
				ClinicalContact = new ImageHelper(102254, "Images/Core/ClinicalContact.gif", new Integer(16), new Integer(16));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image Memo;
			public final ims.framework.utils.Image PDFIcon;
			public final ims.framework.utils.Image ClinicalContact;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				TestTube = new ImageHelper(116118, "Images/OCRR/itesttube.gif", new Integer(19), new Integer(19));
				LetterC = new ImageHelper(116120, "Images/OCRR/c.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image TestTube;
			public final ims.framework.utils.Image LetterC;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AllSessions = new ims.framework.ContextVariable("AllSessions", prefix + "_lv_RefMan.ClinicList.__internal_x_context__AllSessions_" + componentIdentifier + "");
			cxl_SessionSlot = new ims.framework.ContextVariable("SessionSlot", prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier + "");
			cxl_Arrival = new ims.framework.ContextVariable("Arrival", prefix + "_lv_RefMan.ClinicList.__internal_x_context__Arrival_" + componentIdentifier + "");
			cxl_LastSelectedPatient = new ims.framework.ContextVariable("LastSelectedPatient", prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier + "");
			cxl_LastRowValue = new ims.framework.ContextVariable("LastRowValue", prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastRowValue_" + componentIdentifier + "");
			cxl_consultationDetails = new ims.framework.ContextVariable("consultationDetails", prefix + "_lv_RefMan.ClinicList.__internal_x_context__consultationDetails_" + componentIdentifier + "");
			cxl_bLessThenTodaysDate = new ims.framework.ContextVariable("bLessThenTodaysDate", prefix + "_lv_RefMan.ClinicList.__internal_x_context__bLessThenTodaysDate_" + componentIdentifier + "");
			cxl_MenuOptionChosen = new ims.framework.ContextVariable("MenuOptionChosen", prefix + "_lv_RefMan.ClinicList.__internal_x_context__MenuOptionChosen_" + componentIdentifier + "");
			cxl_DNAMessageBox = new ims.framework.ContextVariable("DNAMessageBox", prefix + "_lv_RefMan.ClinicList.__internal_x_context__DNAMessageBox_" + componentIdentifier + "");
			cxl_WasTimerOn = new ims.framework.ContextVariable("WasTimerOn", prefix + "_lv_RefMan.ClinicList.__internal_x_context__WasTimerOn_" + componentIdentifier + "");
			cxl_UndoArrivalMessageBoxId = new ims.framework.ContextVariable("UndoArrivalMessageBoxId", prefix + "_lv_RefMan.ClinicList.__internal_x_context__UndoArrivalMessageBoxId_" + componentIdentifier + "");
		}
		
		public boolean getAllSessionsIsNotNull()
		{
			return !cxl_AllSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getAllSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_AllSessions.getValue(context);
		}
		public void setAllSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_AllSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllSessions = null;
		public boolean getSessionSlotIsNotNull()
		{
			return !cxl_SessionSlot.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionSlotClinicListListVo getSessionSlot()
		{
			return (ims.scheduling.vo.SessionSlotClinicListListVo)cxl_SessionSlot.getValue(context);
		}
		public void setSessionSlot(ims.scheduling.vo.SessionSlotClinicListListVo value)
		{
			cxl_SessionSlot.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionSlot = null;
		public boolean getArrivalIsNotNull()
		{
			return !cxl_Arrival.getValueIsNull(context);
		}
		public Boolean getArrival()
		{
			return (Boolean)cxl_Arrival.getValue(context);
		}
		public void setArrival(Boolean value)
		{
			cxl_Arrival.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Arrival = null;
		public boolean getLastSelectedPatientIsNotNull()
		{
			return !cxl_LastSelectedPatient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getLastSelectedPatient()
		{
			return (ims.core.vo.PatientShort)cxl_LastSelectedPatient.getValue(context);
		}
		public void setLastSelectedPatient(ims.core.vo.PatientShort value)
		{
			cxl_LastSelectedPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastSelectedPatient = null;
		public boolean getLastRowValueIsNotNull()
		{
			return !cxl_LastRowValue.getValueIsNull(context);
		}
		public ims.vo.ValueObject getLastRowValue()
		{
			return (ims.vo.ValueObject)cxl_LastRowValue.getValue(context);
		}
		public void setLastRowValue(ims.vo.ValueObject value)
		{
			cxl_LastRowValue.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastRowValue = null;
		public boolean getconsultationDetailsIsNotNull()
		{
			return !cxl_consultationDetails.getValueIsNull(context);
		}
		public ims.RefMan.vo.ConsultationDetailsVo getconsultationDetails()
		{
			return (ims.RefMan.vo.ConsultationDetailsVo)cxl_consultationDetails.getValue(context);
		}
		public void setconsultationDetails(ims.RefMan.vo.ConsultationDetailsVo value)
		{
			cxl_consultationDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_consultationDetails = null;
		public boolean getbLessThenTodaysDateIsNotNull()
		{
			return !cxl_bLessThenTodaysDate.getValueIsNull(context);
		}
		public Boolean getbLessThenTodaysDate()
		{
			return (Boolean)cxl_bLessThenTodaysDate.getValue(context);
		}
		public void setbLessThenTodaysDate(Boolean value)
		{
			cxl_bLessThenTodaysDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bLessThenTodaysDate = null;
		public boolean getMenuOptionChosenIsNotNull()
		{
			return !cxl_MenuOptionChosen.getValueIsNull(context);
		}
		public Integer getMenuOptionChosen()
		{
			return (Integer)cxl_MenuOptionChosen.getValue(context);
		}
		public void setMenuOptionChosen(Integer value)
		{
			cxl_MenuOptionChosen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MenuOptionChosen = null;
		public boolean getDNAMessageBoxIsNotNull()
		{
			return !cxl_DNAMessageBox.getValueIsNull(context);
		}
		public Integer getDNAMessageBox()
		{
			return (Integer)cxl_DNAMessageBox.getValue(context);
		}
		public void setDNAMessageBox(Integer value)
		{
			cxl_DNAMessageBox.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DNAMessageBox = null;
		public boolean getWasTimerOnIsNotNull()
		{
			return !cxl_WasTimerOn.getValueIsNull(context);
		}
		public Boolean getWasTimerOn()
		{
			return (Boolean)cxl_WasTimerOn.getValue(context);
		}
		public void setWasTimerOn(Boolean value)
		{
			cxl_WasTimerOn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTimerOn = null;
		public boolean getUndoArrivalMessageBoxIdIsNotNull()
		{
			return !cxl_UndoArrivalMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoArrivalMessageBoxId()
		{
			return (Integer)cxl_UndoArrivalMessageBoxId.getValue(context);
		}
		public void setUndoArrivalMessageBoxId(Integer value)
		{
			cxl_UndoArrivalMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoArrivalMessageBoxId = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicListRefMan implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int EditReferralDetails = 1;
				public static final int DNA = 2;
				public static final int CANCEL = 3;
				public static final int CANCELSLOT = 4;
				public static final int REOPEN = 5;
				public static final int StartConsultantContact = 6;
				public static final int StartClinicalContact = 7;
				public static final int StartTLTContact = 8;
				public static final int EditConsultationDetails = 9;
				public static final int NEWONWARDREFERRAL = 10;
				public static final int END_TLT_CONTACT = 11;
				public static final int ARRIVED = 12;
				public static final int UNDO_ARRIVAL = 13;
			}
			public void disableAllClinicListRefManMenuItems()
			{
				this.contextMenuClinicListRefManEditReferralDetailsItem.setEnabled(false);
				this.contextMenuClinicListRefManDNAItem.setEnabled(false);
				this.contextMenuClinicListRefManCANCELItem.setEnabled(false);
				this.contextMenuClinicListRefManCANCELSLOTItem.setEnabled(false);
				this.contextMenuClinicListRefManREOPENItem.setEnabled(false);
				this.contextMenuClinicListRefManStartConsultantContactItem.setEnabled(false);
				this.contextMenuClinicListRefManStartClinicalContactItem.setEnabled(false);
				this.contextMenuClinicListRefManStartTLTContactItem.setEnabled(false);
				this.contextMenuClinicListRefManEditConsultationDetailsItem.setEnabled(false);
				this.contextMenuClinicListRefManNEWONWARDREFERRALItem.setEnabled(false);
				this.contextMenuClinicListRefManEND_TLT_CONTACTItem.setEnabled(false);
				this.contextMenuClinicListRefManARRIVEDItem.setEnabled(false);
				this.contextMenuClinicListRefManUNDO_ARRIVALItem.setEnabled(false);
			}
			public void hideAllClinicListRefManMenuItems()
			{
				this.contextMenuClinicListRefManEditReferralDetailsItem.setVisible(false);
				this.contextMenuClinicListRefManDNAItem.setVisible(false);
				this.contextMenuClinicListRefManCANCELItem.setVisible(false);
				this.contextMenuClinicListRefManCANCELSLOTItem.setVisible(false);
				this.contextMenuClinicListRefManREOPENItem.setVisible(false);
				this.contextMenuClinicListRefManStartConsultantContactItem.setVisible(false);
				this.contextMenuClinicListRefManStartClinicalContactItem.setVisible(false);
				this.contextMenuClinicListRefManStartTLTContactItem.setVisible(false);
				this.contextMenuClinicListRefManEditConsultationDetailsItem.setVisible(false);
				this.contextMenuClinicListRefManNEWONWARDREFERRALItem.setVisible(false);
				this.contextMenuClinicListRefManEND_TLT_CONTACTItem.setVisible(false);
				this.contextMenuClinicListRefManARRIVEDItem.setVisible(false);
				this.contextMenuClinicListRefManUNDO_ARRIVALItem.setVisible(false);
			}
			private Menu contextMenuClinicListRefMan;
			public ReadOnlyMenuItem getClinicListRefManEditReferralDetailsItem()
			{
				return this.contextMenuClinicListRefManEditReferralDetailsItem;
			}
			private MenuItem contextMenuClinicListRefManEditReferralDetailsItem;
			public ReadOnlyMenuItem getClinicListRefManDNAItem()
			{
				return this.contextMenuClinicListRefManDNAItem;
			}
			private MenuItem contextMenuClinicListRefManDNAItem;
			public ReadOnlyMenuItem getClinicListRefManCANCELItem()
			{
				return this.contextMenuClinicListRefManCANCELItem;
			}
			private MenuItem contextMenuClinicListRefManCANCELItem;
			public ReadOnlyMenuItem getClinicListRefManCANCELSLOTItem()
			{
				return this.contextMenuClinicListRefManCANCELSLOTItem;
			}
			private MenuItem contextMenuClinicListRefManCANCELSLOTItem;
			public ReadOnlyMenuItem getClinicListRefManREOPENItem()
			{
				return this.contextMenuClinicListRefManREOPENItem;
			}
			private MenuItem contextMenuClinicListRefManREOPENItem;
			public ReadOnlyMenuItem getClinicListRefManStartConsultantContactItem()
			{
				return this.contextMenuClinicListRefManStartConsultantContactItem;
			}
			private MenuItem contextMenuClinicListRefManStartConsultantContactItem;
			public ReadOnlyMenuItem getClinicListRefManStartClinicalContactItem()
			{
				return this.contextMenuClinicListRefManStartClinicalContactItem;
			}
			private MenuItem contextMenuClinicListRefManStartClinicalContactItem;
			public ReadOnlyMenuItem getClinicListRefManStartTLTContactItem()
			{
				return this.contextMenuClinicListRefManStartTLTContactItem;
			}
			private MenuItem contextMenuClinicListRefManStartTLTContactItem;
			public ReadOnlyMenuItem getClinicListRefManEditConsultationDetailsItem()
			{
				return this.contextMenuClinicListRefManEditConsultationDetailsItem;
			}
			private MenuItem contextMenuClinicListRefManEditConsultationDetailsItem;
			public ReadOnlyMenuItem getClinicListRefManNEWONWARDREFERRALItem()
			{
				return this.contextMenuClinicListRefManNEWONWARDREFERRALItem;
			}
			private MenuItem contextMenuClinicListRefManNEWONWARDREFERRALItem;
			public ReadOnlyMenuItem getClinicListRefManEND_TLT_CONTACTItem()
			{
				return this.contextMenuClinicListRefManEND_TLT_CONTACTItem;
			}
			private MenuItem contextMenuClinicListRefManEND_TLT_CONTACTItem;
			public ReadOnlyMenuItem getClinicListRefManARRIVEDItem()
			{
				return this.contextMenuClinicListRefManARRIVEDItem;
			}
			private MenuItem contextMenuClinicListRefManARRIVEDItem;
			public ReadOnlyMenuItem getClinicListRefManUNDO_ARRIVALItem()
			{
				return this.contextMenuClinicListRefManUNDO_ARRIVALItem;
			}
			private MenuItem contextMenuClinicListRefManUNDO_ARRIVALItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer TimerSearch;
		public Timer getTimerSearch()
		{
			return TimerSearch;
		}
		public void enableAll()
		{
			TimerSearch.setEnabled(true);
		}
		public void disableAll()
		{
			TimerSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[153];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ID", "ID_SpecimenWorkListItem");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-SPECIMEN", "Specimen");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-LISTTYPE", "ListType");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DATETOCOLLECT", "DateToCollect");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ROUNDTOCOLLECT", "RoundToCollect");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-TIMETOCOLLECT", "TimeToCollect");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-COLLECTIONSTATUS", "CollectionStatus");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DFTORDERINVESTIGATION", "DFTOrderInvestigation");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-ID", "ID_Session_Slot");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-STARTTM", "StartTm");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-PRIORITY", "Priority");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-STATUS", "Status");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-ACTIVITY", "Activity");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__consultationDetails_" + componentIdentifier, "BO-1096100000-ID", "ID_ConsultationDetails");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicList.__internal_x_context__consultationDetails_" + componentIdentifier, "BO-1096100000-CATSREFERRAL", "CATSReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
