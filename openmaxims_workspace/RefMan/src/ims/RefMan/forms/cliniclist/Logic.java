
// This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3196.15076)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.cliniclist;

import ims.RefMan.vo.CatsReferralClinicListListVo;
import ims.RefMan.vo.CatsReferralForClinicListVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.ClinicListFilterVo;
import ims.RefMan.vo.ClinicalContactTimeVo;
import ims.RefMan.vo.ClinicalContactTimeVoCollection;
import ims.RefMan.vo.ConsultationDetailsVo;
import ims.RefMan.vo.ConsultationTimeVo;
import ims.RefMan.vo.ConsultationTimeVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.SessionSlotCatsReferralClinicListWrapperVo;
import ims.RefMan.vo.SessionSlotCatsReferralClinicListWrapperVoCollection;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.TLTContactTimeVo;
import ims.RefMan.vo.TLTContactTimeVoCollection;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrganisationLiteVo;
import ims.core.vo.OrganisationLiteVoCollection;
import ims.core.vo.PatientClinicListListVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.Timer;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVo;
import ims.scheduling.vo.Appt_Tracking_Status_HistoryVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ProfileShortVo;
import ims.scheduling.vo.ProfileShortVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_BookingVoCollection;
import ims.scheduling.vo.Sch_SessionRefVoCollection;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotClinicListListVo;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	public static final Integer		START_TLT				= new Integer(-1);
	public static final Integer		START_CONS				= new Integer(-2);
	public static final Integer		START_CLIN				= new Integer(-3);
	public static final Integer		ARRIVED					= new Integer(-4);

	///////////////////////////////////////////////
	//FORM AND CONTROLS EVENTS/////////////////////
	//////////////////////////////////////////////
	
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if(userIsNotMOS())
		{
			engine.showMessage("Logged on user must be a Member of Staff.");
			setFormReadOnly(true);
			return;
		}
		
		initialize();
		
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		form.btnSearch().setEnabled(true);
		
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682

		updateContextMenus();
		
		if (form.getGlobalContext().RefMan.getClinicListFilterIsNotNull())
		{
			if(!engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS) && form.getGlobalContext().RefMan.getClinicListFilter().getContract() != null)
			{
				form.cmbContract().newRow(form.getGlobalContext().RefMan.getClinicListFilter().getContract(), form.getGlobalContext().RefMan.getClinicListFilter().getContract().getName());
			}
			
			form.cmbContract().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getContract());
			if(form.cmbContract().getValue() instanceof OrganisationLiteVo && engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS))
			{
				loadLocations(domain.listLocationByOrganisation(form.cmbContract().getValue()));
			}
			
			form.cmbSite().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getLocation());
			/*if (form.cmbSite().getValue() == null && form.getGlobalContext().RefMan.getClinicListFilter().getLocationIsNotNull())
			{
				form.cmbSite().newRow(form.getGlobalContext().RefMan.getClinicListFilter().getLocation(), form.getGlobalContext().RefMan.getClinicListFilter().getLocation().getName());
				form.cmbSite().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getLocation());
			}*/
			
			form.dteSessionDate().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getClinicDateIsNotNull() ? form.getGlobalContext().RefMan.getClinicListFilter().getClinicDate() : null);
			siteOrDateChanged(false);
			
			form.cmbProfile().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getProfileIsNotNull() ? form.getGlobalContext().RefMan.getClinicListFilter().getProfile() : null);
			
			if(form.cmbProfile().getValue() != null && form.dteSessionDate().getValue() != null)
				search();

			if (form.getGlobalContext().RefMan.getClinicListFilter().getSessionIsNotNull())
			{
				for(int i = 0 ; i < form.cmbSessions().size() ; i ++)
				{
					SessionShortVo voSession = (ims.scheduling.vo.SessionShortVo)form.cmbSessions().getValues().get(i);
					if (voSession.getID_Sch_Session().equals(form.getGlobalContext().RefMan.getClinicListFilter().getSession().getID_Sch_Session()))
						form.cmbSessions().setValue(voSession);
				}
			}
			form.cmbStatus().setValue(form.getGlobalContext().RefMan.getClinicListFilter().getStatusIsNotNull() ? form.getGlobalContext().RefMan.getClinicListFilter().getStatus() : null);
			
			//	WDEV-13622
			if(form.getGlobalContext().RefMan.getClinicListFilter().getWasTimerOnIsNotNull() && form.getGlobalContext().RefMan.getClinicListFilter().getWasTimerOn())
			{
				form.getLocalContext().setWasTimerOn(true);
				toggleTimer(false);
			}
			
			performSearch();
		}
	}

	protected void onGrdSlotsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(true); 
		ConsultationDetailsVo consultation = null;
		form.getContextMenus().RefMan.hideAllClinicListRefManMenuItems();
		
		form.getGlobalContext().RefMan.setIsProviderCancellation(false);//wdev-6163
		form.getLocalContext().setbLessThenTodaysDate(null);

		if (form.grdSlots().getSelectedRow().getcatsReferral() != null)
		{
			if (form.grdSlots().getSelectedRow().getcatsReferral().getReferralDetailsIsNotNull())
			{
				form.getContextMenus().RefMan.getClinicListRefManEditReferralDetailsItem().setVisible(true);
				form.getContextMenus().RefMan.getClinicListRefManEditReferralDetailsItem().setEnabled(true);
			}
			consultation = domain.getConsultationDetailsForCatsReferral(form.grdSlots().getSelectedRow().getcatsReferral().toCatsReferralRefVo());
			
			//wdev-6612
			form.getGlobalContext().RefMan.setCatsReferral(form.grdSlots().getSelectedRow().getcatsReferral());
			CatsReferralListVo vo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			//wdev-12861
			form.getGlobalContext().RefMan.setCatsReferral(vo);
			//-----------
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(vo.getContractIsNotNull() ? vo.getContract().getContractType() : null);
			if (form.grdSlots().getSelectedRow().getcatsReferral().getCareContextIsNotNull())
				form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.grdSlots().getSelectedRow().getcatsReferral().getCareContext()));
			
			//wdev-6745
			boolean isDADReferral = false;
			if (form.grdSlots().getSelectedRow().getcatsReferral().getReferralDetailsIsNotNull()
				&& form.grdSlots().getSelectedRow().getcatsReferral().getReferralDetails().getIsDADReferralIsNotNull()
				&& form.grdSlots().getSelectedRow().getcatsReferral().getReferralDetails().getIsDADReferral())
				isDADReferral = true;
			
			form.getLocalContext().setconsultationDetails(consultation);
			if (form.grdSlots().getSelectedRow().getValue() instanceof Booking_AppointmentVo)
			{
				if ( ! isDADReferral
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDateIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().isLessOrEqualThan(new Date())
					&& engine.getLoggedInUser().getHcpId() != null
					&& (consultation==null
						|| !consultation.getConsultationTimesIsNotNull()))
				{
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setVisible(true);

					form.getLocalContext().setbLessThenTodaysDate(! form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().getDate().equals(new Date().getDate()));
				}
				
				if ( ! isDADReferral
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDateIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().isLessOrEqualThan(new Date())
					&& engine.getLoggedInUser().getHcpId() != null
					&& (consultation==null
						||!consultation.getClinicalContactTimeIsNotNull()))				
				{
					form.getContextMenus().RefMan.getClinicListRefManStartClinicalContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartClinicalContactItem().setVisible(true);
					form.getContextMenus().RefMan.getClinicListRefManStartTLTContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartTLTContactItem().setVisible(true);

					form.getLocalContext().setbLessThenTodaysDate(! form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().getDate().equals(new Date().getDate()));
				}
				
				if (form.grdSlots().getSelectedRow().getcatsReferral() != null
					&& form.grdSlots().getSelectedRow().getcatsReferral().getHasConsultationDetailsIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getHasConsultationDetails())
					form.getContextMenus().RefMan.getClinicListRefManEditConsultationDetailsItem().setVisible(true);
					
			}
			else if (form.grdSlots().getSelectedRow().getValue() instanceof SessionSlotClinicListListVo)
			{
				if ( ! isDADReferral
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDateIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().isLessOrEqualThan(new Date())
					&& engine.getLoggedInUser().getHcpId() != null 
					&& (consultation==null
						|| !consultation.getConsultationTimesIsNotNull()))
				{
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setVisible(true);

					form.getLocalContext().setbLessThenTodaysDate(! form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().getDate().equals(new Date().getDate()));
				}
				
				if ( ! isDADReferral
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDateIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().isLessOrEqualThan(new Date())
					&& engine.getLoggedInUser().getHcpId() != null
					&& (consultation == null 
						|| !consultation.getClinicalContactTimeIsNotNull()))
				{
					form.getContextMenus().RefMan.getClinicListRefManStartClinicalContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartClinicalContactItem().setVisible(true);

					form.getLocalContext().setbLessThenTodaysDate(! form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().getDate().equals(new Date().getDate()));
				}
				
				if ( ! isDADReferral
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDateIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().isLessOrEqualThan(new Date())
					&& engine.getLoggedInUser().getHcpId() != null)//wdev-6447
				{
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartConsultantContactItem().setVisible(true);
					form.getContextMenus().RefMan.getClinicListRefManStartTLTContactItem().setEnabled(true);
					form.getContextMenus().RefMan.getClinicListRefManStartTLTContactItem().setVisible(true);

					form.getLocalContext().setbLessThenTodaysDate(! form.grdSlots().getSelectedRow().getcatsReferral().getLastApptArrivedDate().getDate().equals(new Date().getDate()));
				}
				
				if (form.grdSlots().getSelectedRow().getcatsReferral() != null
					&& form.grdSlots().getSelectedRow().getcatsReferral().getHasConsultationDetailsIsNotNull()
					&& form.grdSlots().getSelectedRow().getcatsReferral().getHasConsultationDetails())
					form.getContextMenus().RefMan.getClinicListRefManEditConsultationDetailsItem().setVisible(true);
				
				//wdev-6163
				if (form.grdSlots().getSelectedRow() != null
					&& form.grdSlots().getSelectedRow().getcatsReferral() != null)
				{
					if (form.grdSlots().getSelectedRow().getcatsReferral().getProviderCancellationIsNotNull())
						form.getGlobalContext().RefMan.setIsProviderCancellation(true);
				}
			}
		}

		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
			SessionSlotClinicListListVo voSessionSlot = (SessionSlotClinicListListVo) form.grdSlots().getValue();
			
			form.getLocalContext().setSessionSlot(voSessionSlot);
			if(voSessionSlot != null)
			{
				if(voSessionSlot.getAppointmentIsNotNull())
				{
					Boolean showCancel = voSessionSlot.getAppointment().getApptStatusIsNotNull() && voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED);
					
					Boolean showDna = false;
					if(voSessionSlot.getAppointment().getApptStatusIsNotNull() && voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED))
					{
						if(voSessionSlot.getAppointment().getAppointmentDateIsNotNull() && voSessionSlot.getAppointment().getAppointmentDate().isLessThan(new Date()))
							showDna = false;
						//if day is the same include the time in the check
						else if(voSessionSlot.getAppointment().getAppointmentDateIsNotNull() && voSessionSlot.getAppointment().getAppointmentDate().equals(new Date()))
						{
							if(voSessionSlot.getAppointment().getApptStartTimeIsNotNull() && voSessionSlot.getAppointment().getApptStartTime().isLessThan(new Time()))
								showDna = false;
						}
					}
				
					form.getContextMenus().RefMan.getClinicListRefManCANCELItem().setVisible(showCancel);
					form.btnCancel().setEnabled(showCancel);
					
					form.getContextMenus().RefMan.getClinicListRefManDNAItem().setVisible(showDna);
				

					form.getContextMenus().RefMan.getClinicListRefManCANCELSLOTItem().setVisible(false);
					form.btnCancelSlot().setEnabled(false);
				}
				else
				{
					form.getContextMenus().RefMan.getClinicListRefManCANCELSLOTItem().setVisible(voSessionSlot.getStatusIsNotNull() && (!voSessionSlot.getStatus().equals(Status_Reason.CANCELLED) && !voSessionSlot.getStatus().equals(Status_Reason.CANCEL_PROVISIONAL) && !voSessionSlot.getStatus().equals(Status_Reason.BLOCKED)));
					form.btnCancelSlot().setEnabled(voSessionSlot.getStatusIsNotNull() && (!voSessionSlot.getStatus().equals(Status_Reason.CANCELLED) && !voSessionSlot.getStatus().equals(Status_Reason.CANCEL_PROVISIONAL) && !voSessionSlot.getStatus().equals(Status_Reason.BLOCKED)));
				}
				if (form.grdSlots().getSelectedRow() != null)
				{
					PatientShort pat = form.grdSlots().getSelectedRow().getColPatientShort() == null ?
							null : domain.getPatient(form.grdSlots().getSelectedRow().getColPatientShort());
					form.getGlobalContext().Core.setPatientShort(pat);
					form.getGlobalContext().Core.setPatientToBeDisplayed(pat);
					if (form.grdSlots().getSelectedRow().getcatsReferral() != null)
					{
					//	form.getGlobalContext().RefMan.setCatsReferral(form.grdSlots().getSelectedRow().getcatsReferral());
					//	if (form.grdSlots().getSelectedRow().getcatsReferral().getCareContextIsNotNull())
					//		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.grdSlots().getSelectedRow().getcatsReferral().getCareContext()));

						//wdev-6163
						if (form.grdSlots().getSelectedRow() != null
							&& form.grdSlots().getSelectedRow().getcatsReferral() != null)
						{
							if (form.grdSlots().getSelectedRow().getcatsReferral().getProviderCancellationIsNotNull())
								form.getGlobalContext().RefMan.setIsProviderCancellation(true);
						}

					}
				}
			}
		}
		
		updateContextMenus();
	}
	
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		performSearch();	
	}
	
	protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		form.grdSlots().getRows().clear();
		form.grdSlots().setValue(null);
		form.dteSessionDate().setValue(null);
		form.cmbContract().setValue(null);
		
		if(engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS))
			form.cmbSite().clear();
		else
			form.cmbSite().setValue(null);
		
		form.cmbProfile().clear();
		form.cmbSessions().clear();
		form.cmbStatus().setValue(null);
		form.getContextMenus().RefMan.hideAllClinicListRefManMenuItems();
		form.getGlobalContext().RefMan.setIsProviderCancellation(false);//wdev-6163
	
		form.getGlobalContext().RefMan.setClinicListFilter(null);
		updateContextMenus();
	}

	protected void onCmbSessionsValueChanged() throws PresentationLogicException 
	{
		loadSlots();
	}
	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		disableRefreshTemporarily();//	WDEV-13622
		
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.CANCEL:
				cancel();
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.CANCELSLOT:
				cancelSlot();
				loadSlots();	
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.DNA:
				dnaPatientMenuItem();	//WDEV-12568
				updateContextMenus(); //WDEV-13748
			return;	//wdev-13748
			//break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.EditReferralDetails:
				editReferralDetails();
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.StartTLTContact:
				startMenuOption(START_TLT);
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.StartClinicalContact:
				startMenuOption(START_CLIN);
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.StartConsultantContact:
				startMenuOption(START_CONS);
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.EditConsultationDetails:
				onConsultation();
			break;
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.NEWONWARDREFERRAL:
				newOnwardReferral();
			break;
			
			//WDEV-12568
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.ARRIVED:
				arrivedMenuOption();
			break;
			
			//WDEV-17987
			case GenForm.ContextMenus.RefManNamespace.ClinicListRefMan.UNDO_ARRIVAL:
				form.getLocalContext().setUndoArrivalMessageBoxId(engine.showMessage("Are you sure you want to Undo this Arrival ?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			break;
			
		}
		
		updateContextMenus(); //WDEV-12842
		
		toggleTimer(false);//WDEV-13622
	}

	private void undoArrival()
	{
		updateBooking(Status_Reason.BOOKED, AppointmentTrackingStatus.UNDO_ARRIVAL, false);
		
		search();
		
		if(form.cmbSessions().getValue() != null)
			loadSlots();
	}
	
	//WDEV-12568
	private void dnaPatientMenuItem() 
	{
		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
			Booking_AppointmentVo voBook = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
    		if (voBook.getApptStatusIsNotNull() && canBeDNAed(voBook.getApptStatus(), voBook.getSession().getSessionDate()))
    		{
    			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
    					&& domain.hasTCI(voBook))
    			{
    				form.getLocalContext().setDNAMessageBox(engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL));
    			}
    			else
    			{
    				form.getLocalContext().setDNAMessageBox(engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO));
    			}
    		}
    		else
    		{
    			engine.showMessage("This appointment's status has already changed.");
    			search();
    			if(form.cmbSessions().getValue() != null)
    				loadSlots();
    		}
		}
	}
	
	//WDEV-12568
	private boolean canBeDNAed(Status_Reason apptStatus, Date dateSession) 
	{
		if (apptStatus != null 
			&& apptStatus.equals(Status_Reason.BOOKED))
			{
				if(dateSession != null)
				{
					if(new Date().isGreaterOrEqualThan(dateSession))
					{
						return true;
					}
				}
			}
			return false;
	}
	
	//WDEV-12568
	private void arrivedMenuOption()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
    		Booking_AppointmentVo voBook = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
    		
    		if (voBook != null && voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.BOOKED))	//wdev-12726
    		{
    			
    			form.getGlobalContext().RefMan.setChosenTime(null);
    			form.getLocalContext().setMenuOptionChosen(ARRIVED);
    			engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Arrival Time"} );
    		}
    		else 
    		{
    			engine.showMessage("This appointment's status has already changed.");
    			search();
    			if(form.cmbSessions().getValue() != null)
    				loadSlots();
    		}
		}
	}

	//WDEV-12568
	private void arrived()
	{
		updateBooking(Status_Reason.ARRIVAL, AppointmentTrackingStatus.PATIENT_ARRIVED, false);
		
		search();
		if(form.cmbSessions().getValue() != null)
			loadSlots();
	}

	//WDEV-12568 
	private void updateBooking(Status_Reason stat, AppointmentTrackingStatus trackingStatus, boolean requiresNewTCI)
	{
		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
			Booking_AppointmentVo voBooking = domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue());
    		
    		if (voBooking == null)
    		{
    			engine.showMessage("No Booking Found.");
    			return;
    		}
    		
    		if(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointmentIsNotNull() && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getVersion_Booking_Appointment() != voBooking.getVersion_Booking_Appointment())
    		{
    			//simulate SOE
    			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			return;
    		}
    		
    		SessionSlotClinicListListVo sessionSlot = null;
    		
    		//	WDEV-12813
    		CatsReferralForClinicListVo voCats = domain.getCatsReferral(voBooking);
    		if (voCats == null)
			{
				engine.showMessage("No CATS Referral Found.");
				return;
			}
    		
    		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;
    		
    		if (stat.equals(Status_Reason.DNA))
    		{
    			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
    			{
        			// TODO - Also set TCI to outcome 
        			patientElectiveList = domain.getPatientElectiveList(voBooking);
        			
        			if (patientElectiveList != null)
        			{
        				TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();
        				
        				// Update the TCI record - should really not be null, since the query is performed after it
        				if (currentTCI != null)
        				{
            				TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();
            				
            				outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
            				outcomeDNA.setStatusDateTime(new DateTime());
            				outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
            				
            				currentTCI.setCurrentOutcome(outcomeDNA);
            				currentTCI.getOutcomeHistory().add(outcomeDNA);
            				currentTCI.setIsActive(Boolean.FALSE);
            				
            				// Add current TCI to history, but do NOT remove it from current field yet.
            				// It will be removed in impl file, after it will be saved.
            				
            				patientElectiveList.getTCIHistory().add(currentTCI);
        				}
        				
        				// Update the status for PatientElective
        				if (requiresNewTCI == true)
        				{
        					ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();
        					
        					requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
        					requiresNewTCIStatus.setStatusDateTime(new DateTime());
        					requiresNewTCIStatus.setStatusComment(null);
        					requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
        					requiresNewTCIStatus.setRemovalReason(null);
        					requiresNewTCIStatus.setRemovalOtherReason(null);    					
        					
    						patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
    						patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
        				}
        			}
    			}
    			
    			
    			voCats.setHasDNAApptsForReview(true);
    			
    			if(voBooking.getIsCABBooking() == null || Boolean.FALSE.equals(voBooking.getIsCABBooking()))
    			{
    				voBooking.setRequiresRebook(true);
    			
    				if(voBooking.getSessionSlotIsNotNull())
    				{
    					sessionSlot = (SessionSlotClinicListListVo) form.grdSlots().getValue();
    					sessionSlot.setStatus(Status_Reason.DNA);
    					sessionSlot.validate();
    				}
    			}
    		}
    		else if (stat.equals(Status_Reason.ARRIVAL))
    		{
    			if (form.getGlobalContext().RefMan.getChosenTime() == null)
    				voBooking.setArrivalTime(new Time());
    			else
    				voBooking.setArrivalTime(form.getGlobalContext().RefMan.getChosenTime());
    		}
    		else if (stat.equals(Status_Reason.BOOKED))
    		{
    			voBooking.setArrivalTime(null);
    			voBooking.setOutcome(null);
    			voBooking.setOutcomeComments(null);
    		}
    		
    		voBooking.setApptStatus(stat);
    		
    		//WDEV-18325
    		form.getGlobalContext().Core.getPatientShort().calculateAge();
    		boolean isPaediatricPatient = form.getGlobalContext().Core.getPatientShort().getAgeIsNotNull() && form.getGlobalContext().Core.getPatientShort().getAge() <= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue();
    		boolean isFirstApptActivityforDNA  = !isPaediatricPatient && form.getLocalContext().getDNAMessageBoxIsNotNull()&& Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && voBooking.getActivityIsNotNull() && voBooking.getActivity().getFirstAppointment();

    		Appointment_StatusVo voStatus = new Appointment_StatusVo();
    		voStatus.setApptDate(voBooking.getAppointmentDate());
    		voStatus.setApptTime(voBooking.getApptStartTime());
    		voStatus.setStatusChangeDateTime(new DateTime());
    		voStatus.setStatus(stat);
    		
    		Appointment_StatusVoCollection voCollStatusHistory = voBooking.getApptStatusHistory();
    		if(voCollStatusHistory == null)
    			voCollStatusHistory =  new Appointment_StatusVoCollection();
    		
    		voCollStatusHistory.add(voStatus);
    		voBooking.setCurrentStatusRecord(voStatus); 
    		voBooking.setApptStatusHistory(voCollStatusHistory);
    		
    		//WDEV-17987
    		populateAppointmentWithTrackingStatus(voBooking, trackingStatus);
    		
    		String[] error = voBooking.validate();
    		if (error != null)
    		{
    			engine.showErrors(error);
    			return;
    		}
    		
    		if(voCats != null)
    		{
        		error = voCats.validate(error);
        		if (error != null)
        		{
        			engine.showErrors(error);
        			return;
        		}
    		}
    		
    		try 
    	 	{
    			domain.saveAppointmentForDNA(voBooking, voCats, sessionSlot, patientElectiveList, isFirstApptActivityforDNA); //WDEV-18325
    		} 
    	 	catch (StaleObjectException e) 
    	 	{
    			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    			return;
    		} 
    		catch (DomainInterfaceException ex)
    		{
    			ex.getMessage();
    			return;
			} 
		}
	}

	private void populateAppointmentWithTrackingStatus(Booking_AppointmentVo voBooking, AppointmentTrackingStatus trackingStatus) 
	{
		if(voBooking == null || trackingStatus == null)
			return;
		
		Appt_Tracking_Status_HistoryVoCollection trackingCollection = voBooking.getApptTrackingStatusHistory();
		
		if(trackingCollection == null)
			trackingCollection = new Appt_Tracking_Status_HistoryVoCollection();
		
		Appt_Tracking_Status_HistoryVo newTrackingStatus = new Appt_Tracking_Status_HistoryVo();
		newTrackingStatus.setTrackingStatus(trackingStatus);
		newTrackingStatus.setApptDate(voBooking.getAppointmentDate());
		newTrackingStatus.setApptTime(voBooking.getApptStartTime());
		newTrackingStatus.setStatusChangeDateTime(new DateTime());
		
		Object mosUser = domain.getMosUser();
		newTrackingStatus.setChangedBy(mosUser instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) mosUser : null);
		
		trackingCollection.add(newTrackingStatus);
		voBooking.setApptTrackingStatusHistory(trackingCollection);
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.OK) 
			&& formName.equals(form.getForms().RefMan.ArrivalSeenTimeDialog))
		{
			if(form.getLocalContext().getMenuOptionChosenIsNotNull())
			{
				if(form.getLocalContext().getMenuOptionChosen().equals(START_TLT))
					startTLTContact();
				else if(form.getLocalContext().getMenuOptionChosen().equals(START_CONS))
					startConsultation();
				else if(form.getLocalContext().getMenuOptionChosen().equals(START_CLIN))
					startClinicalContact();
				else if(form.getLocalContext().getMenuOptionChosen().equals(ARRIVED))
					arrived();
			}
		}

		else if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog)) //WDEV-12568
		{
			if(result.equals(DialogResult.OK))
			{
				form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralForAppointment(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment()));
				CatsReferralListVo vo = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
				form.getGlobalContext().RefMan.setReferralContractTypeForPatient(vo.getContractIsNotNull() ? vo.getContract().getContractType() : null);

				if(!cancelAppt())
					return;
				
				//open book appointment
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{
					form.getGlobalContext().Core.setPatientShort(domain.getPatient(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getPatient()));
					engine.open(form.getForms().RefMan.BookAppointment);
					return;
				}
				else
				{
					form.getGlobalContext().Scheduling.setBookingAppointment(null);
				}
				search();
				if(form.cmbSessions().getValue() != null)
					loadSlots();
					
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}
		}
		else if(formName.equals(form.getForms().RefMan.AtConsultationDialog))//WDEV-15488
		{
			form.getGlobalContext().RefMan.setSpecimenWorkListItemForReports(null);
		}
		else
		{
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
		}
		
		updateContextMenus();
	}
	
	protected void onCmbProfileValueChanged() throws PresentationLogicException
	{
		form.cmbSessions().clear();

		if(form.cmbProfile().getValue() != null && form.dteSessionDate().getValue() != null)
			search();

	}
	protected void onDteSessionDateValueChanged() throws PresentationLogicException
	{
		siteOrDateChanged(true);
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		cancel();	
	}
	
	protected void onBtnDNAClick() throws PresentationLogicException
	{
//		dna();
		loadSlots();
		updateContextMenus();
	}

	protected void onBtnCancelSlotClick() throws PresentationLogicException
	{
		cancelSlot();
		loadSlots();
		updateContextMenus();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (form.getLocalContext().getDNAMessageBox() != null && form.getLocalContext().getDNAMessageBox().equals(messageBoxId))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(domain.getAppointment((Session_SlotRefVo) form.grdSlots().getValue())))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);
				
				if (DialogResult.YES.equals(result))
					dnaPatient(true);
				else if (DialogResult.NO.equals(result))
					dnaPatient(false);
			}
			else if (DialogResult.YES.equals(result))
			{
				form.getLocalContext().setUndoArrivalMessageBoxId(null);
				dnaPatient(false);
			}
		}
		else if (form.getLocalContext().getUndoArrivalMessageBoxId() != null && form.getLocalContext().getUndoArrivalMessageBoxId().equals(messageBoxId)
				&& DialogResult.YES.equals(result))
		{
			form.getLocalContext().setDNAMessageBox(null);
			undoArrival();
		}
		
		if (DialogResult.NO.equals(result) && Boolean.FALSE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
				|| DialogResult.CANCEL.equals(result))
		{
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
		}
		
		toggleTimer(false);//WDEV-13748
	}
	
	//WDEV-12568
	private void dnaPatient(boolean requiresNewTCI)
	{
		updateBooking(Status_Reason.DNA, null, requiresNewTCI);
		
		search();
		if(form.cmbSessions().getValue() != null)
			loadSlots();
	}

	@Override
	protected void onCmbSiteValueChanged() throws PresentationLogicException 
	{
		setContractForSelectedSite();
		siteOrDateChanged(true);
	}

	private void setContractForSelectedSite() 
	{
		if(!engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS))
		{
			OrganisationLiteVo rootOrg = null;
			
			if(form.cmbSite().getValue() instanceof ILocation)
			{
				rootOrg = domain.getOrganisationByLocation(form.cmbSite().getValue().getID());
				form.cmbContract().newRow(rootOrg, rootOrg.getName());
			}
			
			form.cmbContract().setValue(rootOrg);
		}
	}
	
	@Override
	protected void onCmbContractValueChanged() throws PresentationLogicException 
	{
		form.cmbSite().clear();
		form.cmbProfile().clear();
		form.cmbSessions().clear();
		
		if(form.cmbContract().getValue() instanceof OrganisationLiteVo)
		{
			loadLocations(domain.listLocationByOrganisation(form.cmbContract().getValue()));
		}
	}
	///////////////////////////////////////////////
	//FORM METHODS ////////////////////////////////
	//////////////////////////////////////////////
	
	private void initialize() 
	{
		Boolean canViewClinics = engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS);
		
		// WDEV-12682
		// WDEV-12875  - Check if the current location has diagnostic ContractConfiguration records on the branch of the organisation 
		if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplication() == null)
			form.getGlobalContext().RefMan.setDiagnosticReferralForApplication(domain.hasLocationDiagnosticContract((LocationRefVo) engine.getCurrentLocation()));

		form.cmbContract().setEnabled(canViewClinics);
		form.dteSessionDate().setValue(new Date());
		
		if(canViewClinics)
		{
			loadOrganisation();
		}
		else
		{
			listLocationForLoggedUser();
		}
		form.getGlobalContext().Scheduling.setBookingAppointment(null); //wdev-12623
		
		form.getLocalContext().setWasTimerOn(false);//WDEV-13622
		form.getTimers().getTimerSearch().setInterval(ConfigFlag.UI.CLINICLIST_TIMER_INTERVAL.getValue());//WDEV-13622
	}
	
	private void setFormReadOnly(Boolean value) 
	{
		form.cmbContract().setEnabled(!value);
		form.cmbSite().setEnabled(!value);
		form.cmbProfile().setEnabled(!value);
		form.cmbSessions().setEnabled(!value);
		form.cmbStatus().setEnabled(!value);
		form.dteSessionDate().setEnabled(!value);
		form.grdSlots().setEnabled(!value);
		form.btnSearch().setEnabled(!value);
		form.btnClear().setEnabled(!value);
		form.btnCancelSlot().setEnabled(!value);
		form.btnCancel().setEnabled(!value);
	}
	
	public boolean userIsNotMOS()
	{
		if(domain.getMosUser() == null)
			return true;
		
		return false;
	}
	
	private void updateContextMenus() 
	{
		form.getContextMenus().RefMan.getClinicListRefManNEWONWARDREFERRALItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdSlots().getSelectedRow() != null && form.grdSlots().getSelectedRow().getcatsReferral() != null && form.grdSlots().getSelectedRow().getcatsReferral().getOnwardReferralStatusIsNotNull() && form.grdSlots().getSelectedRow().getcatsReferral().getOnwardReferralStatus().equals(OnwardReferralStatus.ONWARD_REFERRAL_REJECTED));
		
		//WDEV-12568
		boolean isApptBooked = form.grdSlots().getValue() instanceof SessionSlotClinicListListVo 
		  && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointmentIsNotNull()
		  && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getApptStatusIsNotNull()
		  && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getApptStatus().equals(Status_Reason.BOOKED);
		
		boolean showArrivedMenuItem = isApptBooked
		  && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getAppointmentDateIsNotNull()
		  && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getAppointmentDate().isLessOrEqualThan(new Date());
		
		form.getContextMenus().RefMan.getClinicListRefManARRIVEDItem().setVisible(showArrivedMenuItem);
		
		boolean showDNAMenuItem = isApptBooked
			&& ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getAppointmentDateIsNotNull()
			&& (new Date().isGreaterThan(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getAppointmentDate())
				|| (new Date().equals(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getAppointmentDate())
					&& ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getApptStartTimeIsNotNull()
					&& new Time().isGreaterThan(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getApptStartTime())));
		
		form.getContextMenus().RefMan.getClinicListRefManDNAItem().setVisible(showDNAMenuItem);
		
		boolean showUndoArrivalMenuItem = form.grdSlots().getValue() instanceof SessionSlotClinicListListVo && ((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment() != null
			&& Status_Reason.ARRIVAL.equals(((SessionSlotClinicListListVo) form.grdSlots().getValue()).getAppointment().getApptStatus());
		
		form.getContextMenus().RefMan.getClinicListRefManUNDO_ARRIVALItem().setVisible(showUndoArrivalMenuItem);
	}
	
	///////////////////////////////////////////////
	//SEARCH CONTROLS RELATED METHODS /////////////
	//////////////////////////////////////////////
	
	private void loadOrganisation() 
	{
		form.cmbContract().clear();
		
		OrganisationLiteVoCollection collOrg = domain.listOrganisation();
		
		// WDEV-12637 - Check for null
		if (collOrg == null)
			return;
		
		for(int i=0; i<collOrg.size(); i++)
		{
			if(collOrg.get(i) != null)
			{
				form.cmbContract().newRow(collOrg.get(i), collOrg.get(i).getName());
			}
		}
	}

	private void listLocationForLoggedUser() 
	{
		if(engine.getLocationProvider() != null)
		{
			loadLocationsFromILocation(engine.getLocationProvider().listConfiguredUserLocations(engine.getLoggedInUser()));
		}
	}

	private void loadLocationsFromILocation(ILocation[] listConfiguredUserLocations) 
	{
		if(listConfiguredUserLocations == null || listConfiguredUserLocations.length == 0)
			return;
		
		for(int i=0; i<listConfiguredUserLocations.length; i++)
		{
			form.cmbSite().newRow((ILocation)listConfiguredUserLocations[i], listConfiguredUserLocations[i].getName());
		}
		
//		wdev-12682
		if( form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
			&& form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
		{			
			if(engine.getCurrentLocation() != null)
			{

				
				for(int i=0;i<form.cmbSite().getValues().size(); i++)
				{
					if(((LocationLiteVo)form.cmbSite().getValues().get(i)).getID_Location().equals(engine.getCurrentLocation().getID()))
					{
						form.cmbSite().setValue((LocationLiteVo)form.cmbSite().getValues().get(i));
						break;
					}
				}
				
	//			form.cmbSite().setValue(engine.getCurrentLocation());
				
				if(form.cmbSite().getValue() != null)
				{
					setContractForSelectedSite();
					siteOrDateChanged(false);
				}
			}
		}
	}

	private void loadLocations(LocationLiteVoCollection voCollLoc)
	{
		form.cmbSite().clear();
		
		if(voCollLoc == null)
			return;
		
		for(LocationLiteVo item : voCollLoc)
			form.cmbSite().newRow(item, item.getName());
		
//		wdev-12682
		if( form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
			&& form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
		{			
			if(engine.getCurrentLocation() != null)
			{
				form.cmbSite().setValue(engine.getCurrentLocation());
				
				if(form.cmbSite().getValue() != null)
					siteOrDateChanged(false);
			}
		}
	}
	
	private void siteOrDateChanged(Boolean openCombo)
	{
		form.cmbProfile().clear();
		form.cmbSessions().clear();
		
		if (form.cmbSite().getValue() != null && form.dteSessionDate().getValue() != null)
			loadProfiles(openCombo);
	}
	
	private void loadProfiles(Boolean openCombo) 
	{
		form.cmbProfile().clear();
		form.cmbSessions().clear();
		
		ProfileShortVoCollection voColl = domain.listProfiles(form.cmbSite().getValue(), form.dteSessionDate().getValue());
		ProfileShortVo voProfile;
		String profileText;
		for(int i=0; voColl != null && i<voColl.size(); i++)
		{
			voProfile 	= voColl.get(i);
			profileText = voProfile.getDescription();
			form.cmbProfile().newRow(voProfile, profileText);
		}
		if (!openCombo)
			return;
		
		if (voColl.size() == 1)
			form.cmbProfile().setValue(voColl.get(0));
		else if (voColl.size() > 1)
			form.cmbProfile().showOpened();
		
		//WDEV-7120
		if (voColl.size() == 1)
		{
			if(form.cmbProfile().getValue() != null && form.dteSessionDate().getValue() != null)
				search();
		}	
	}

	private void loadSessions(SessionShortVoCollection voCollSessionShort) 
	{
		form.cmbSessions().clear();
		form.grdSlots().getRows().clear();
		form.getContextMenus().RefMan.hideAllClinicListRefManMenuItems();//wdev-12806
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);

		for(int i=0;i<voCollSessionShort.size();i++)
		{
			form.cmbSessions().newRow(voCollSessionShort.get(i), voCollSessionShort.get(i).toString());
			
		}

		if(voCollSessionShort.size() > 0)
			form.cmbSessions().setValue(voCollSessionShort.get(0));
			
	}

	///////////////////////////////////////////////
	//SEARCH ACTION RELATED METHODS ///////////////
	//////////////////////////////////////////////
	
	private void performSearch() 
	{
		form.getGlobalContext().RefMan.setIsProviderCancellation(false);//wdev-6163

		if(validateSearch())
		{
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			
			ClinicListFilterVo voFilter = new ClinicListFilterVo();
			voFilter.setContract(form.cmbContract().getValue());
			voFilter.setProfile(form.cmbProfile().getValue());
			voFilter.setClinicDate(form.dteSessionDate().getValue());
			voFilter.setSession(form.cmbSessions().getValue());
			voFilter.setStatus(form.cmbStatus().getValue());
			voFilter.setLocation(form.cmbSite().getValue());
			
			voFilter.setWasTimerOn(form.getLocalContext().getWasTimerOn());//	WDEV-13622
			form.getGlobalContext().RefMan.setClinicListFilter(voFilter);
		}
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.cmbContract().getValue() == null && engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS))
			uiErrors.add("Please select a Contract");
		
		if(form.cmbSite().getValue() == null)
			uiErrors.add("Please select a Site");
		
		if(form.cmbProfile().getValue() == null)
			uiErrors.add("Please select a Profile");
			
		if(form.cmbSessions().getValue() == null)
			uiErrors.add("Please select a Clinic");
		
		if(form.dteSessionDate().getValue() == null)
			uiErrors.add("Please enter a Date");
		
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
		
		return true;
	}
	
	private void search()
	{	
		form.grdSlots().getRows().clear();
		form.getContextMenus().RefMan.hideAllClinicListRefManMenuItems();//wdev-12806
		form.btnCancel().setEnabled(false);
		form.btnCancelSlot().setEnabled(false);
		
		if(form.cmbProfile().getValue() == null || form.dteSessionDate().getValue() == null)
			return;
		
		SessionShortVoCollection voCollSessionShort = domain.listSession(null, null, form.cmbProfile().getValue(), form.dteSessionDate().getValue());
		loadSessions(voCollSessionShort);

		updateContextMenus();
	}
	
	private void loadSlots() 
	{
		form.grdSlots().getRows().clear();
		form.btnCancel().setEnabled(false);		
		form.btnCancelSlot().setEnabled(false);
		
		form.getContextMenus().RefMan.hideAllClinicListRefManMenuItems();
		
		if(form.cmbSessions().getValue() == null)
			return;
		
		if(form.cmbSessions().getValue().getID_Sch_Session() == null) //All
		{
			SessionShortVoCollection voCollSession = form.getLocalContext().getAllSessions();
			Sch_SessionRefVoCollection sessionIds = new Sch_SessionRefVoCollection();
			if(voCollSession != null)
			{
				
				for(int i=0;i<voCollSession.size();i++)
				{
					sessionIds.add(voCollSession.get(i));
				}
			}	
			populateSlots(domain.listAppointments(sessionIds, form.cmbStatus().getValue()));
		}
		else
		{
			
			
			SessionShortVo session = form.cmbSessions().getValue();
			if(session.getIsFixedIsNotNull() && session.getIsFixed())
			{
				Sch_SessionRefVoCollection sess = new Sch_SessionRefVoCollection();
				sess.add(form.cmbSessions().getValue());
				
				populateSlots(domain.listAppointments(sess, form.cmbStatus().getValue()));
			}
			else
				populateBooking(domain.listFlexibleBookings(form.cmbSessions().getValue()));
		}		
	}
	
	///////////////////////////////////////////////
	//RESULT DISPLAY RELATED METHODS///////////////
	//////////////////////////////////////////////

	private void populateSlots(	SessionSlotCatsReferralClinicListWrapperVoCollection voCollSessionSlots) 
	{
		
		GenForm.grdSlotsRow row=null;
		
		
		if(voCollSessionSlots == null || voCollSessionSlots.size() == 0)
		{
			engine.showMessage("No sessions exist for search criteria.");
			return;
		}
			
		for (SessionSlotCatsReferralClinicListWrapperVo slot: voCollSessionSlots)//for(int i=0;i<voCollSessionSlots.size();i++)
		{
			//voSessionSlot = voCollSessionSlots.get(i);
			
			row = form.grdSlots().getRows().newRow();
			CatsReferralClinicListListVo cats = slot.getReferral();
			
			if (cats!=null)
			{
				row.setcatsReferral(cats);
				if (cats.getHasAppointmentsIsNotNull())
					if (cats.getHasAppointments())
						row.sethasAppointments(form.getImages().Core.ClinicalContact);
				if (cats.getHasInvestigationsIsNotNull())
					if (cats.getHasInvestigations())
						row.sethasInvestigations(form.getImages().OCRR.TestTube);
				if (cats.getHasReferralLetterIsNotNull())
					if (cats.getHasReferralLetter())
						row.sethasReferralLetter(form.getImages().Core.Memo);
				if (cats.getIsCABIsNotNull())
					if (cats.getIsCAB())
						row.setisChooseAndBook(form.getImages().OCRR.LetterC);

				if (cats.getCurrentStatusIsNotNull()
					&& cats.getCurrentStatus().getReferralStatusIsNotNull()
					&& cats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED)) 
					row.setBackColor(ConfigFlag.UI.FURTHER_MANAGEMENT_REQUIRED_ROW_COLOUR.getValue());
			}
			SessionSlotClinicListListVo item = slot.getSlot();
			if(item.getPriorityIsNotNull())
				row.setcolPriority(item.getPriority().getText());
			
			if(item.getStatusIsNotNull())
			{
				row.setcolSlotStatus(item.getStatus().getText());
				if(item.getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
					row.setSelectable(false);
			}
			
			if(item.getStartTmIsNotNull())
				row.setcolTime(item.getStartTm().toString());
			
			row.setValue(item);
			
			if(item.getAppointmentIsNotNull() && item.getAppointment().getApptStatus() != null && !item.getAppointment().getApptStatus().equals(Status_Reason.CANCELLED))
			{
				row.setcolDetails(item.getAppointment().toString());
				//PatientShort voPatShort = domain.getBookingPatient(item.getAppointment());
				//item.
				PatientClinicListListVo voPatShort = item.getAppointment().getPatient();
				row.setcolDetails(voPatShort.getPatientNameAndIdInfo());
				row.setColPatientShort(voPatShort);
				
				//WDEV-6195
				if(voPatShort.getAssociatedPatientIsNotNull())
				{
					row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
				}
				
				if (voPatShort.getIsDead().booleanValue())
				{
					row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
				}

				row.setTooltipForcolDetails(voPatShort.getPatientNameAndIdInfo());
				if(item.getAppointment().getApptStatusIsNotNull())
					row.setcolApptStatus(item.getAppointment().getApptStatus().getText());
				
				if(item.getAppointment().getActivityIsNotNull())
					row.setcolApptType(item.getAppointment().getActivity().getName());
				
				//row.setColUBRN(voSessionSlot.getUBRN());
				
			}
		}
		
	}

	private void populateBooking(Sch_BookingVoCollection voCollSchBookings) 
	{
		GenForm.grdSlotsRow row=null;
		Sch_BookingVo voBooking=null;
				
		if(voCollSchBookings == null || voCollSchBookings.size() == 0)
		{
			engine.showMessage("No bookings exist for search criteria.");
			return;
		}
		for(int i=0;i<voCollSchBookings.size();i++)
		{
			voBooking = voCollSchBookings.get(i);						
			if(voBooking.getAppointmentsIsNotNull())
			{
				for(int p=0;p<voBooking.getAppointments().size();p++)
				{
					Booking_AppointmentVo voAppt = voBooking.getAppointments().get(p);
					
					row = form.grdSlots().getRows().newRow();
					
					PatientShort voPatShort = voBooking.getPatient();
					row.setcolDetails(voPatShort.getPatientNameAndIdInfo());
					row.setColPatientShort(voPatShort);
					row.setTooltipForcolDetails(voPatShort.getPatientNameAndIdInfo());
					//WDEV-6195
					if(voPatShort.getAssociatedPatientIsNotNull())
					{
						row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
					}
					
					if (voPatShort.getIsDead().booleanValue())
					{
						row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			
					}

					if(voAppt.getApptStartTimeIsNotNull())
						row.setcolTime(voAppt.getApptStartTime().toString());
					
					if(voAppt.getApptStatusIsNotNull())
						row.setcolApptStatus(voAppt.getApptStatus().getText());
					
					row.setValue(voAppt);
					
									
				}
			}		
		}
	}
	
	///////////////////////////////////////////////
	//RESULTS ACTION RELATED METHODS //////////////
	//////////////////////////////////////////////

	
	private void cancel()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
			SessionSlotClinicListListVo voSlot = (SessionSlotClinicListListVo)form.grdSlots().getValue();
			
			form.getGlobalContext().Scheduling.setBookingActivity(voSlot.getActivity());
			if(voSlot.getAppointmentIsNotNull() && voSlot.getAppointment().getSessionIsNotNull())
				form.getGlobalContext().Scheduling.setBookingService(voSlot.getAppointment().getSession().getService());
			
			if(voSlot.getAppointmentIsNotNull())
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voSlot.getAppointment().getIsCABBooking());
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voSlot.getAppointment());//WDEV-12965
			engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
		}
		
		updateContextMenus();
	}
	
	private void cancelSlot()
	{
		if(form.grdSlots().getValue() instanceof SessionSlotClinicListListVo)
		{
			SessionSlotVo voSlot = domain.getSessionSlot((SessionSlotClinicListListVo) form.grdSlots().getValue());
			
			voSlot.setStatus(Status_Reason.CANCELLED);
			voSlot.setStatusReason(Status_Reason.CANCELLED);

			try
			{
				domain.cancelSlot(voSlot, ActionRequestType.NOTIFY_SLOT_CANCEL, "Cancel Slot requested from Clinic List");
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			search();
		}
	}
	
	private void editReferralDetails()
	{
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
	}
	
	private void startMenuOption(Integer option)
	{
		if (form.getLocalContext().getbLessThenTodaysDateIsNotNull()
			&& form.getLocalContext().getbLessThenTodaysDate())
		{
			form.getGlobalContext().RefMan.setChosenTime(null);

			form.getLocalContext().setMenuOptionChosen(option);
			
			if (option == START_TLT)
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Start TLT Contact Time"} );
			else if (option == START_CONS)
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Start Consultant Contact Time"} );
			else if (option == START_CLIN)
				engine.open(form.getForms().RefMan.ArrivalSeenTimeDialog, new Object[]{"Start Clinical Contact Time"} );
		}
		else
		{
			form.getGlobalContext().RefMan.setChosenTime(null);
			form.getLocalContext().setMenuOptionChosen(null);
			if (option == START_TLT)
				startTLTContact();
			else if (option == START_CONS)
				startConsultation();
			else if (option == START_CLIN)
				startClinicalContact();
		}
	}
	
	private void startTLTContact() 
	{
		//WDEV-12842
		CatsReferralListVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef == null)
		{
			engine.showMessage("No CATS Referral Found. TLT Contact not started.");
			return;
		}
		
		//WDEV-12842 - simulate SOE
		if(voRef.getLastApptArrivedDate() == null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			
			return;
		}
		
		ConsultationDetailsVo consultDetailsVo = form.getLocalContext().getconsultationDetails();
		HcpLiteVo voHCPLite = new HcpLiteVo();
		voHCPLite.setID_Hcp(engine.getLoggedInUser().getHcpId());
		voHCPLite.setMos((MemberOfStaffLiteVo) domain.getMosUser());
		if (consultDetailsVo == null)
		{
			consultDetailsVo = new ConsultationDetailsVo();
			
			consultDetailsVo.setCATSReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			AuthoringInformationVo voAuth = new AuthoringInformationVo();
			voAuth.setAuthoringDateTime(new DateTime());
			voAuth.setAuthoringHcp(voHCPLite);
			
			consultDetailsVo.setAuthoringInformation(voAuth);
		}

		TLTContactTimeVo voTime = new TLTContactTimeVo();

		if (form.getGlobalContext().RefMan.getChosenTime() == null)
			voTime.setStartDateTime(new DateTime());
		else
			voTime.setStartDateTime(new DateTime(new Date(), form.getGlobalContext().RefMan.getChosenTime()));
		
		voTime.setStartTherapist(voHCPLite);
		
		if (consultDetailsVo.getTltTimes() == null)
			consultDetailsVo.setTltTimes(new TLTContactTimeVoCollection());
		
		consultDetailsVo.getTltTimes().add(voTime);
		
		String[] error = consultDetailsVo.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		Booking_AppointmentVo voAppt = setApptAsSeen(voRef);	//WDEV-12842
		
		if(voAppt != null)
		{
    		error = voAppt.validate();
    		if (error != null)
    		{
    			engine.showErrors(error);
    			return;
    		}
		}

		voRef.setHasConsultationDetails(Boolean.TRUE);
		voRef.setHasTLTStartContact(Boolean.TRUE);
		voRef.setLastApptArrivedDate(null);

		error = voRef.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		try 
	 	{
			domain.saveConsultationAndReferralAndAppt(consultDetailsVo, voRef, voAppt);
		} 
	 	catch (StaleObjectException e) 
	 	{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
			return;
		}
	 	
	 	form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
		engine.open(form.getForms().RefMan.AtConsultationDialog, false); 
	}
	
	private void startConsultation()
	{
		//WDEV-12842
		CatsReferralListVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef == null)
		{
			engine.showMessage("No CATS Referral Found. Consultation not started.");
			return;
		}
		
		//WDEV-12842 - simulate SOE
		if(voRef.getLastApptArrivedDate() == null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			
			return;
		}
		
		ConsultationDetailsVo consultDetailsVo=form.getLocalContext().getconsultationDetails();
		HcpLiteVo hcp=new HcpLiteVo();
		if (consultDetailsVo==null)
		{
			consultDetailsVo=new ConsultationDetailsVo();
		}
		AuthoringInformationVo authoringVo=new AuthoringInformationVo();
		hcp.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcp.setMos((MemberOfStaffLiteVo) domain.getMosUser());
		authoringVo.setAuthoringHcp(hcp);
		authoringVo.setAuthoringDateTime(new DateTime());
		ConsultationTimeVo consultTimeVo=new ConsultationTimeVo();
		consultTimeVo.setStartHcp(hcp);

		if (form.getGlobalContext().RefMan.getChosenTime() == null)
			consultTimeVo.setStartDateTime(new DateTime());
		else
			consultTimeVo.setStartDateTime(new DateTime(new Date(), form.getGlobalContext().RefMan.getChosenTime()));

		if (!consultDetailsVo.getAuthoringInformationIsNotNull())
			consultDetailsVo.setAuthoringInformation(authoringVo);

		if (consultDetailsVo.getConsultationTimes() == null)
			consultDetailsVo.setConsultationTimes(new ConsultationTimeVoCollection());
		
		consultDetailsVo.getConsultationTimes().add(consultTimeVo);
		consultDetailsVo.setCATSReferral(form.getGlobalContext().RefMan.getCatsReferral());
		String[] errors = consultDetailsVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		Booking_AppointmentVo voAppt = setApptAsSeen(voRef); //WDEV-12842

		if(voAppt != null)
		{
			errors = voAppt.validate();
    		if (errors != null)
    		{
    			engine.showErrors(errors);
    			return;
    		}
		}

		voRef.setHasConsultationDetails(Boolean.TRUE);
		voRef.setLastApptArrivedDate(null);

		errors = voRef.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
	 	{
			domain.saveConsultationAndReferralAndAppt(consultDetailsVo, voRef, voAppt);
		} 
	 	catch (StaleObjectException e) 
	 	{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
			return;
		}
	 	form.getGlobalContext().RefMan.setIsClinicalContactStarted(Boolean.FALSE);
	 	form.getGlobalContext().RefMan.setIsConsultationStarted(Boolean.TRUE);
	 	
	 	form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
		engine.open(form.getForms().RefMan.AtConsultationDialog, false);  
	}

	private void startClinicalContact()
	{
		ConsultationDetailsVo consultDetailsVo=form.getLocalContext().getconsultationDetails();
		HcpLiteVo hcp=new HcpLiteVo();
		if (consultDetailsVo==null)
		{
			consultDetailsVo=new ConsultationDetailsVo();
		}
		AuthoringInformationVo authoringVo=new AuthoringInformationVo();
		hcp.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcp.setMos((MemberOfStaffLiteVo) domain.getMosUser());
		
		authoringVo.setAuthoringHcp(hcp);
		authoringVo.setAuthoringDateTime(new DateTime());
		ClinicalContactTimeVo clinicalContactVo=new ClinicalContactTimeVo();
		clinicalContactVo.setStartHcp(hcp);
		
		if (form.getGlobalContext().RefMan.getChosenTime() == null)
			clinicalContactVo.setStartDateTime(new DateTime());
		else
			clinicalContactVo.setStartDateTime(new DateTime(new Date(), form.getGlobalContext().RefMan.getChosenTime()));

		if (!consultDetailsVo.getAuthoringInformationIsNotNull())
			consultDetailsVo.setAuthoringInformation(authoringVo);
		
		if (consultDetailsVo.getClinicalContactTime() == null)
			consultDetailsVo.setClinicalContactTime(new ClinicalContactTimeVoCollection());
		
		consultDetailsVo.getClinicalContactTime().add(clinicalContactVo);
		consultDetailsVo.setCATSReferral(form.getGlobalContext().RefMan.getCatsReferral());

		String[] errors = consultDetailsVo.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}

		CatsReferralListVo voRef = domain.getCatsReferral(consultDetailsVo.getCATSReferral());
		if (voRef == null)
		{
			engine.showMessage("No CATS Referral Found. Clinical Contact not started.");
			return;
		}
		
		
		if(voRef.getLastApptArrivedDate() == null)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			
			return;
		}
		

		voRef.setHasConsultationDetails(Boolean.TRUE);
		voRef.setLastApptArrivedDate(null);

		errors = voRef.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
	 	{
			domain.saveConsultationAndReferralAndAppt(consultDetailsVo, voRef, null);
		} 
	 	catch (StaleObjectException e) 
	 	{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
			return;
		}

		
	 	form.getGlobalContext().RefMan.setIsClinicalContactStarted(Boolean.TRUE);
	 	form.getGlobalContext().RefMan.setIsConsultationStarted(Boolean.FALSE);
	 	form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral())); //wdev-12861
		engine.open(form.getForms().RefMan.AtConsultationDialog, false);  
	}
	
	private Booking_AppointmentVo setApptAsSeen(CatsReferralListVo voRef)
	{
		//WDEV-12842 - starts here
		Booking_AppointmentVo voAppt = domain.getArrivedBookingAppt(voRef); //WDEV-12842
		
		if(voAppt != null)
		{
			HcpRefVo voHCPLite = null;
			
			Object user = domain.getHcpLiteUser();
			if(user != null)
				voHCPLite = (HcpLiteVo) user;
			
			Appointment_StatusVo voStatus = new Appointment_StatusVo(); 
			voStatus.setApptDate(voAppt.getAppointmentDate()); 
			voStatus.setApptTime(voAppt.getApptStartTime());
			voStatus.setStatusChangeDateTime(new DateTime());
			voStatus.setStatus(Status_Reason.SEEN); 
			voAppt.setCurrentStatusRecord(voStatus); 

			if(voAppt.getApptStatusHistory() == null) 
			{
				voAppt.setApptStatusHistory(new Appointment_StatusVoCollection()); 
			}
			
			voAppt.getApptStatusHistory().add(voStatus); 
			voAppt.setApptStatus(Status_Reason.SEEN);
			voAppt.setSeenBy(voHCPLite);
			
			if (form.getGlobalContext().RefMan.getChosenTime() == null)
				voAppt.setSeenTime(new Time());
			else
				voAppt.setSeenTime(form.getGlobalContext().RefMan.getChosenTime());

			return voAppt;
		}
		
		return null;
		
		//WDEV-12842 - ends here
	}
	
	private void onConsultation() 
	{
		engine.open(form.getForms().RefMan.AtConsultationDialog, false);  
	}


	private void newOnwardReferral() 
	{
		engine.open(form.getForms().RefMan.NewOnwardReferral);
	}

	private boolean cancelAppt() 
	{
		SessionSlotVo voSessionSlot = domain.getSessionSlot(form.getLocalContext().getSessionSlot());
		if(voSessionSlot == null)
			return false;
		//Stale
		if (!voSessionSlot.getAppointmentIsNotNull() || ( voSessionSlot.getAppointment().getVersion_Booking_Appointment() != form.getLocalContext().getSessionSlot().getAppointment().getVersion_Booking_Appointment()))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			search();
			if(form.cmbSessions().getValue() != null)
				loadSlots();
			return false;
		}
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			//appt status and status history
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voSessionSlot.getAppointment().setCurrentStatusRecord(voApptStatus);  
			
			voSessionSlot.getAppointment().setApptStatus(Status_Reason.CANCELLED);
			voSessionSlot.getAppointment().setApptStatusHistory(getApptStatusHistory(voSessionSlot,Status_Reason.CANCELLED, voApptStatus));
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voSessionSlot.getAppointment().setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voSessionSlot.getAppointment().setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		voSessionSlot.setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voSessionSlot.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		//wdev-8288
		CatsReferralListVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		voRef.setHasCancelledApptsForReview(true);
		String[] arrErrors2 = voRef.validate();
		if(arrErrors2 != null)
		{
			engine.showErrors(arrErrors2);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(domain.cancelAppt(voSessionSlot.getAppointment(), ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Clinic List"));

			domain.updateCatsReferralAdditionalInvStatus(voRef);

			domain.updateCatsReferralCancelStatus(voRef);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
	}

	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(SessionSlotVo voSessionSlot, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voSessionSlot.getAppointment().getAppointmentDate());
		voApptStatus.setApptTime(voSessionSlot.getStartTm());
		
		//if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		voApptStatus.setPriority(voSessionSlot.getPriority());
		SessionShortVo sessVo = form.cmbSessions().getValue();
		if (sessVo != null)
			voApptStatus.setPASClinic(sessVo.getPASClinic());
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voSessionSlot.getAppointment().getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		toggleTimer(true);//WDEV-13622
	}

	//WDEV-13622
	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().getTimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerOn();
		
		if(form.getTimers().getTimerSearch().isEnabled())
		{
			form.getTimers().getTimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerOn(false);
			if(form.getGlobalContext().RefMan.getClinicListFilterIsNotNull())
				form.getGlobalContext().RefMan.getClinicListFilter().setWasTimerOn(false);
		}
		else if(!form.getTimers().getTimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().getTimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Clinic List");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				
				//update the context state
				form.getLocalContext().setWasTimerOn(true);
				if(form.getGlobalContext().RefMan.getClinicListFilterIsNotNull())
					form.getGlobalContext().RefMan.getClinicListFilter().setWasTimerOn(true);
				
				//enable the stopping button
				form.imbAutoRefresh().setEnabled(true);
			}
		}

		boolean enableControls = !form.getTimers().getTimerSearch().isEnabled();
		
		form.cmbContract().setEnabled(enableControls && Boolean.TRUE.equals(engine.hasRight(AppRight.CAN_VIEW_CLINICS_ACROSS_ALL_CONTRACTS))); //wdev-13749
		form.cmbSite().setEnabled(enableControls);
		form.cmbProfile().setEnabled(enableControls);
		form.cmbSessions().setEnabled(enableControls);
		form.dteSessionDate().setEnabled(enableControls);
		form.cmbStatus().setEnabled(enableControls);
		form.btnSearch().setEnabled(enableControls);
		form.btnClear().setEnabled(enableControls);
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		performSearch();//	WDEV-13622
		
		System.out.print("\n----------------------------------------------------------------------");
	}
	
	//WDEV-13622
	private void disableRefreshTemporarily()
	{
		//kill the refresh timer if it is enabled
		if(form.getTimers().getTimerSearch().isEnabled())
		{
			form.getTimers().getTimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Clinic List");	
			form.getLocalContext().setWasTimerOn(true);
		}
		else
			form.getLocalContext().setWasTimerOn(false);
	}
}
