// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.clinicaloutcome;

import ims.RefMan.forms.clinicaloutcome.GenForm.GroupViewEnumeration;
import ims.RefMan.forms.clinicaloutcome.GenForm.grdClinicalOutcomesRow;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ClinicalOutcomeDisplayVo;
import ims.RefMan.vo.ClinicalOutcomeDisplayVoCollection;
import ims.RefMan.vo.ClinicalOutcomeProcedureVo;
import ims.RefMan.vo.ClinicalOutcomeProcedureVoCollection;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Event Handlers
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// Initialize the form
		initialize();
		// Refresh screen
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}


	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.ClinicalOutcomeDetails))
		{
			open();
		}
	}

	@Override
	protected void onRadioButtonGroupViewValueChanged() throws PresentationLogicException
	{
		// Perform search for IntraOperativeRecords & bind them to combo box control
		if (GroupViewEnumeration.rdoThisReferral.equals(form.GroupView().getValue()))
			populateIntraOperativeRecords(domain.listIntraOperativeCareRecords(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().RefMan.getCatsReferral()));
		else
			populateIntraOperativeRecords(domain.listIntraOperativeCareRecords(form.getGlobalContext().Core.getPatientShort(), null));

		populateClinicalOutcomesGrid(searchClinicalOutcomes());
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onCmbIntraOperativeValueChanged() throws PresentationLogicException
	{
		// Perform search for ClinicalOutcome records
		populateClinicalOutcomesGrid(searchClinicalOutcomes());
		
		updateControlsState();
	}

	@Override
	protected void onGrdClinicalOutcomesSelectionChanged()
	{
		// Update controls state
		updateControlsState();
	}
	
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Prepare screen for creating a new record
		newInstance();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Prepare screen for editing record
		updateInstance();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ClinicalOutcome.NEW:
				// Prepare screen for creating a new record
				newInstance();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ClinicalOutcome.EDIT:
				// Prepare screen for editing record
				updateInstance();
				break;

			case GenForm.ContextMenus.RefManNamespace.ClinicalOutcome.VIEW:
				break;				
		}
	}
	
	
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize form
	 * Will clear local context, set context menu text and hide all context menus
	 * Will also perform one-time only actions that must take place only once on this form
	 * and keep the result in local context variables if needed
	 */
	private void initialize()
	{
		// Hide all context menu
		form.getContextMenus().RefMan.hideAllClinicalOutcomeMenuItems();
		
		// Set 'This Referral' as default value
		form.GroupView().setValue(GroupViewEnumeration.rdoThisReferral);
		
		// Perform search for IntraOperativeRecords & bind them to combo box control
		populateIntraOperativeRecords(domain.listIntraOperativeCareRecords(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().RefMan.getCatsReferral()));
	}

	/**
	 * Function used to perform search for ClinicalOutcomes
	 * based on search criteria 
	 */
	private ClinicalOutcomeDisplayVoCollection searchClinicalOutcomes()
	{
		CatsReferralRefVo referral = GenForm.GroupViewEnumeration.rdoThisReferral.equals(form.GroupView().getValue()) ? form.getGlobalContext().RefMan.getCatsReferral() : null;
		return domain.listClinicalOutcomes(form.getGlobalContext().Core.getPatientShort(), referral, form.cmbIntraOperativeDetails().getValue());
	}

	/**
	 * Function used to refresh data on form 
	 * Will clear screen, populate screen with data and set the form to VIEW mode
	 * Will perform actions that must take place every time screen is refreshed 
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen - this is skipped as the grid population method will clear
		
		populateClinicalOutcomesGrid(searchClinicalOutcomes());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}
	
	/**
	 * Function used to prepare the form for registering a new record instance
	 * In this case it will set appropriate global context values and will open a dialog for recording
	 * a new instance record
	 */
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear global context for ClinicalOutcome instance
		form.getGlobalContext().RefMan.setClinicalOutcome(null);
		// Open dialog for creating/editing ClinicalOutcome record
		engine.open(form.getForms().RefMan.ClinicalOutcomeDetails);
	}

	/**
	 * Function used to prepare the form for editing a recorded instance
	 * In this case it will set appropriate global context values and will open a dialog for editing
	 * a recorded instance
	 */
	public void updateInstance()
	{
		// Set global context
		form.getGlobalContext().RefMan.setClinicalOutcome(domain.getClinicalOutcome(form.grdClinicalOutcomes().getValue()));
		
		// Open dialog for creating/editing ClinicalOutcome record
		engine.open(form.getForms().RefMan.ClinicalOutcomeDetails);
	}

	/**
	 * Function used to update form controls state
	 */
	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.grdClinicalOutcomes().getSelectedRow() != null);
		}
		
		updateContextMenuState();
	}
	
	/**
	 * Function used to update context menu state
	 */
	private void updateContextMenuState()
	{
		form.getContextMenus().RefMan.getClinicalOutcomeNEWItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().RefMan.getClinicalOutcomeEDITItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdClinicalOutcomes().getValue() != null);
		//form.getContextMenus().RefMan.getClinicalOutcomeVIEWItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdClinicalOutcomes().getValue() != null);
	}
	
	
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange function
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate IntraOperative records to combo box control
	 */
	private void populateIntraOperativeRecords(ClinicalOutcomeProcedureVoCollection intraOperativeRecords)
	{
		// Keep current value
		ClinicalOutcomeProcedureVo currentValue = form.cmbIntraOperativeDetails().getValue();
		
		// Clear IntraOperativeCare records from combo box
		form.cmbIntraOperativeDetails().clear();
		
		// Check if collection is null
		if (intraOperativeRecords == null)
			return;
		
		// Iterate IntraOperative records collection
		for (ClinicalOutcomeProcedureVo intraOperative : intraOperativeRecords)
		{
			// Build display string for IntraOperative record
			String displayString = intraOperative.getProcedureIsNotNull() ? intraOperative.getProcedure().getProcedureDescription() : "";
			// Add IntraOperative record to combo box control
			form.cmbIntraOperativeDetails().newRow(intraOperative, displayString);
		}
		
		// Attempt to reselect initial value
		form.cmbIntraOperativeDetails().setValue(currentValue);
	}


	/**
	 * Function used to populate ClinicalOutcomes grid with ClinicalOutcomes records
	 */
	private void populateClinicalOutcomesGrid(ClinicalOutcomeDisplayVoCollection clinicalOutcomeDisplayVoCollection)
	{
		// Clear ClinicalOutcomes grid
		form.grdClinicalOutcomes().getRows().clear();
		
		// If ClinicalOutcomes collection is null terminate the function
		if (clinicalOutcomeDisplayVoCollection == null)
			return;
		
		// Iterate IntraOperative records collection & add them to grid
		for (ClinicalOutcomeDisplayVo clinicalOutcome : clinicalOutcomeDisplayVoCollection)
		{
			// Create a new grid row
			grdClinicalOutcomesRow row = form.grdClinicalOutcomes().getRows().newRow();
			
			// Set row columns
			row.setColDate(clinicalOutcome.getDate());
			row.setTooltipForColDate(clinicalOutcome.getDateIsNotNull() ? clinicalOutcome.getDate().toString() : "");
			
			String categoryDisplayText = clinicalOutcome.getClinicalOutcomeContextIsNotNull() && clinicalOutcome.getClinicalOutcome().getCategoryIsNotNull() ?
					clinicalOutcome.getClinicalOutcome().getCategory().getText() : "";
			row.setColCategory(categoryDisplayText);
			row.setTooltipForColCategory(categoryDisplayText);
			
			row.setColCode(clinicalOutcome.getCode());
			row.setTooltipForColCode(clinicalOutcome.getCode());
			
			String outcomeDisplayText = clinicalOutcome.getClinicalOutcomeIsNotNull() ? clinicalOutcome.getClinicalOutcome().getClinicalOutcome() : "";
			row.setColClinicalOutcome(outcomeDisplayText);
			row.setTooltipForColClinicalOutcome(outcomeDisplayText);
			
			// WDEV-12485 - Update line to take into consideration records without procedures
			String procedureDisplayText = clinicalOutcome.getProcedureIsNotNull() && clinicalOutcome.getProcedure().getProcedureIsNotNull() ?
					clinicalOutcome.getProcedure().getProcedure().getProcedureDescription() : "";
			row.setColProcedure(procedureDisplayText);
			row.setTooltipForColProcedure(procedureDisplayText);
			
			String outcomeContextDisplayText = clinicalOutcome.getClinicalOutcomeContextIsNotNull() ? clinicalOutcome.getClinicalOutcomeContext().getText() : "";
			row.setColOutcomeContext(outcomeContextDisplayText);
			row.setTooltipForColOutcomeContext(outcomeContextDisplayText);
			
			// Set row value
			row.setValue(clinicalOutcome);
		}
	}
}
