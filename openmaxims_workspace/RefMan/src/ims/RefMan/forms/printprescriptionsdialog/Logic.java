// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.71 build 3742.24882)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.printprescriptionsdialog;

import java.security.SecureRandom;

import org.apache.log4j.Logger;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;


import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralReportsVo;
import ims.RefMan.vo.PrescriptionsVo;
import ims.RefMan.vo.PrescriptionsVoCollection;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.enums.ReferralOutcomeReportType;
import ims.RefMan.vo.lookups.ReportStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientMedicationLiteVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.MedicationFrequencyCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.PrinterScope;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long 	serialVersionUID 		= 1L;
	private static final int 	COL_DATE  				= -1;
	private static final int 	COL_USER  				= -2;	
	private static final int 	COL_DRUG  				= -3;
	private static final int 	COL_FREQUENCY  			= -4;
	private static final int 	COL_DAYS_SUPPLY  		= -5;	
	private static final String	PrescriptionRecord 	= "-6";
	private static final String	NewPrescriptionRecord 	= "-7";
	private static final String	PrescriptionDrug  	= "-8";
	private static final Logger		LOG		= Logger.getLogger(Logic.class);
	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		addCurrentLocationPrinters();
		open();
	}
	@Override
	protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		CatsReferralRefVo voCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		
		
		Integer reportID = 0;
		PrescriptionsVo tempPrescriptionVo = form.getLocalContext().getSelectedPrescription();
		if(tempPrescriptionVo == null)
		{
			engine.showMessage("Select a Prescription.");
			return;
		}
		
		
		reportID = 132;
		obj = domain.getSystemReportAndTemplate(new Integer(132));
		client.addSeed(new SeedValue("Prescription_id", tempPrescriptionVo.getID_Prescription(), Integer.class));
			

		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
				
		String[] catsDischargeReport =  domain.getSystemReportAndTemplate(reportID);
		
		if(catsDischargeReport == null)
		{
			engine.showMessage("No template was assigned to this dialog !");
			return;
		}
		
		try
		{
			String url = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
			if (url != null)
			{
				engine.openUrl(url);
			}
		}
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}	
	}
	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// WDEV-12536
		if (form.ccPrinter().getSelectedPrinter() == null)
		{
			catchErrors("No printer selected", SystemLogLevel.ERROR);
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlPdfUploadServer = ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		if (urlPdfUploadServer == "")
		{
			catchErrors("PDF_UPLOAD_URL flag need to be set",SystemLogLevel.ERROR);
			return;
		}
		
		String fileName = generateName()+".pdf";
		
		CatsReferralRefVo voCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		//ReferralOutcomeReportType reportType = form.getGlobalContext().RefMan.getReferralOutcomeReportType();
		//form.getLocalContext().setReferralOutcomeReportType(reportType);
		Integer reportID = 0;
		
		String patientDocumentName = null;
		DocumentCategory patientDocumentCategory = null;
		
		PrescriptionsVo tempPrescriptionVo = form.getLocalContext().getSelectedPrescription();
		if(tempPrescriptionVo == null)
		{
			engine.showMessage("Select a Prescription.");
			return;
		}
		
		patientDocumentName = "FP10 - Prescriptions";
		patientDocumentCategory = DocumentCategory.PRESCRIPTIONS;
		reportID = 132;
		obj = domain.getSystemReportAndTemplate(new Integer(132));
		client.addSeed(new SeedValue("Prescription_id", tempPrescriptionVo.getID_Prescription(), Integer.class));
	
				
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
				
		String[] catsDischargeReport =  domain.getSystemReportAndTemplate(reportID);
		
		if(catsDischargeReport == null)
		{
			engine.showMessage("No template was assigned to this dialog !");
			return;
		}
		
		try
		{
			// WDEV-12536
			byte[] buffer = client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);
						
			if (buffer == null || (buffer != null && buffer.length == 0)) 
			{
				catchErrors("PDF size is zero", SystemLogLevel.ERROR);
				return;
			}							
			
			try 
			{
				engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), buffer, fileName,  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
			}
			catch (Exception e)
			{
				catchErrors(e.toString(), SystemLogLevel.ERROR);
				return; 
			} 
				
			save(fileName, patientDocumentName, patientDocumentCategory);
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));//WDEV-14186
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onDyngrdPrescriptionRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		if(row.getParent() == null)
			form.getLocalContext().setSelectedPrescription((PrescriptionsVo) row.getValue());
		
		updateControlsState();
	}
	private void open() 
	{		
		form.setMode(FormMode.VIEW);
		populateScreenFromData(domain.listPrescriptions(form.getGlobalContext().RefMan.getCatsReferral()));
		
	}
	private void populateScreenFromData(PrescriptionsVoCollection listPrescriptions) 
	{
		form.dyngrdPrescription().getRows().clear();
		if (listPrescriptions != null)
		{			
			for (int i = 0; i < listPrescriptions.size(); i++) 
			{
				addNewPrescriptionRecord(null, listPrescriptions.get(i), false);
			}
		}	
		
		form.dyngrdPrescription().setSelectedRow(null);
	}
	private void addNewPrescriptionRecord(DynamicGridRow row, PrescriptionsVo value, boolean newRecord) 
	{
		DynamicGridColumn 	coll;
		DynamicGridCell 	cell;
		AuthoringInformationVo authoring = null;
		
		if (value == null) 
		{
			return;
			//value = new PrescriptionsVo();
		}
		
		if (value.getAuthoringInformation() == null)
			authoring = new AuthoringInformationVo();
		else
			authoring =value.getAuthoringInformation();
		
		if (row == null)
			row = form.dyngrdPrescription().getRows().newRow(true);
		
		row.setIdentifier(PrescriptionRecord);
		row.setReadOnly(true);
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_DATE);
		cell = row.getCells().newCell(coll, DynamicCellType.DATETIME);						
		//cell.setValue(value != null ? (value.getAuthoringInformationIsNotNull() ? value.getAuthoringInformation().getAuthoringDateTime() : new DateTime())  : new DateTime());
		cell.setValue(value != null ? (value.getAuthoringInformationIsNotNull() ? value.getAuthoringInformation().getAuthoringDateTime() : null)  : null);
		
		cell.setReadOnly(true);
		
		authoring.setAuthoringDateTime(cell.getValue() != null ? (DateTime)cell.getValue() : null);
				
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.STRING);		
		cell.setValue(value != null && value.getAuthoringInformationIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcpIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcp().getName() != null ? value.getAuthoringInformation().getAuthoringHcp().getName().toString() : null) : null ) : domain.getHcpLiteUser() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName().toString() :  null : null);
		cell.setReadOnly(true);	
		authoring.setAuthoringHcp(value != null && value.getAuthoringInformationIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcpIsNotNull() ? value.getAuthoringInformation().getAuthoringHcp() : null)  : domain.getHcpLiteUser() != null ? ((HcpLiteVo)domain.getHcpLiteUser()) : null);		
		
		value.setAuthoringInformation(authoring);
		value.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		row.setValue(value);
		
		
		if (value != null)
		{
			if (value.getMedicationsIsNotNull())
			{
				for (int i = 0; i < value.getMedications().size(); i++) 
				{
					PatientMedicationLiteVo patientMedication = value.getMedications().get(i);					
					addPrescriptionDrug((MedicationLiteVo) patientMedication.getMedication(), patientMedication, row, true, newRecord);					
				}				
			}
		}
	}
	private void addPrescriptionDrug(MedicationLiteVo medicationLiteVo, PatientMedicationLiteVo patientMedication, DynamicGridRow row, boolean readOnly, boolean newRecord) 
	{			
		if (form.dyngrdPrescription().getSelectedRow() != null)
		{
			if(row == null)
				row = form.dyngrdPrescription().getSelectedRow();
			
			if (row != null)
			{
				if (newRecord)
				{
					if (row.getIdentifier() != null && row.getIdentifier().equals(NewPrescriptionRecord))
					{
						addPrescriptionDrugRow(row.getRows().newRow(), medicationLiteVo, patientMedication, readOnly);
					}	
				}
				else
				{
					if (row.getIdentifier() != null && row.getIdentifier().equals(PrescriptionRecord))
					{
						addPrescriptionDrugRow(row.getRows().newRow(), medicationLiteVo, patientMedication, readOnly);
					}
				}

				
				if (row.getIdentifier() != null && row.getIdentifier().equals(PrescriptionDrug))
				{
					addPrescriptionDrugRow(row.getParent().getRows().newRow(), medicationLiteVo, patientMedication, readOnly);
				}
				row.setExpanded(true);
			}
						
		}
	}
	private void addPrescriptionDrugRow(DynamicGridRow row, MedicationLiteVo medicationLiteVo, PatientMedicationLiteVo patientMedication, boolean readOnly) 
	{	
		DynamicGridColumn 	coll;
		DynamicGridCell 	cell;		
		PatientMedicationLiteVo value = null;
		
		if (medicationLiteVo == null)
			return;
		
		if (patientMedication == null)
			value = new PatientMedicationLiteVo();
		else
			value = patientMedication;
		
		row.setIdentifier(PrescriptionDrug);
		row.setReadOnly(readOnly);
		
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);						
		cell.setReadOnly(true);		
		cell.setWidth(200);
		cell.setValue("<b><i>" + medicationLiteVo.getMedicationName() + "</i></b>");
		
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_DRUG);
		coll.setCaption("Frequency");
		cell = row.getCells().newCell(coll, DynamicCellType.ENUMERATION);
		cell.getItems().clear();		
		MedicationFrequencyCollection voColl = ims.core.vo.lookups.LookupHelper.getMedicationFrequency(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() == null)
				cell.getItems().newItem(voColl.get(i));
		}		
		cell.setReadOnly(true);		
		cell.setWidth(100);
		cell.setValue(patientMedication != null ? (patientMedication.getFrequencyIsNotNull() ? patientMedication.getFrequency() : null) : null);
		value.setFrequency(patientMedication != null ? (patientMedication.getFrequencyIsNotNull() ? patientMedication.getFrequency() : null) : null);
		
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_FREQUENCY);
		coll.setCaption("NoDaysSupply");
		cell = row.getCells().newCell(coll, DynamicCellType.INT);						
		cell.setReadOnly(true);
		cell.setWidth(60);
		cell.setValue(patientMedication != null ? (patientMedication.getNoDaysSupplyIsNotNull() ? patientMedication.getNoDaysSupply() : null) : null);
		value.setNoDaysSupply(patientMedication != null ? (patientMedication.getNoDaysSupplyIsNotNull() ? patientMedication.getNoDaysSupply() : null) : null);						
				
		value.setPatient(form.getGlobalContext().Core.getPatientShort());
		value.setMedication(medicationLiteVo);		
		
		row.setValue(value);
		row.setReadOnly(true);
		DynamicGridRow parentRow = row.getParent();
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		if (isEditMode && parentRow != null && parentRow.getValue() != null && parentRow.getValue() instanceof PrescriptionsVo)
		{
			PrescriptionsVo vo = (PrescriptionsVo)parentRow.getValue();
			vo.setID_Prescription(null);
			parentRow.setValue(vo);	
		}		
	}
	private void initializeDynamicGrid()
	{
		form.dyngrdPrescription().clear();
		form.dyngrdPrescription().setSelectable(true);	
		
		DynamicGridColumn column;
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DATE);
		column.setWidth(200);		
		column.setCanGrow(false);
		column.setReadOnly(true);
			
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_USER);
		column.setWidth(200);
		column.setCanGrow(true);
				
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DRUG);
		column.setWidth(200);		
		column.setCanGrow(false);
		
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_FREQUENCY);
		column.setWidth(100);
		column.setCanGrow(true);
		
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DAYS_SUPPLY);
		column.setWidth(60);
		column.setCanGrow(true);
	}
	private void initialize()
	{
		
		initializeDynamicGrid();
		form.btnPreview().setEnabled(false);
		form.btnPrint().setEnabled(false);
		form.getLocalContext().setSelectedPrescription(null);
	}
	private void addCurrentLocationPrinters()
	{
		// WDEV-12536
		form.ccPrinter().initialize(engine.getCurrentLocation(), PrinterScope.DEFAULT);
	}
	private void updateControlsState()
	{
		if(form.dyngrdPrescription().getSelectedRow().getParent() == null)
		{
			form.btnPreview().setEnabled(true);
			form.btnPrint().setEnabled(true);
		}
		else
		{
			form.btnPreview().setEnabled(false);
			form.btnPrint().setEnabled(false);
		}
	}
	private void catchErrors(String error, SystemLogLevel level) 
	{
		if (level.equals(SystemLogLevel.ERROR)) {
			engine.showMessage(error);
		}
		
		LOG.error(error);
		engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, level, error);
	}
	private String generateName()
	{	
		  String str = "";
		  
		  try
		  {
			  //Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  //Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  //Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      //Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      //Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException ex)
		  {
		      ex.getMessage();
		  }
		  
		  return str;
	  }
	private boolean save(String fileName, String patientDocumentName, DocumentCategory patientDocumentCategory) 
	{
		PatientDocumentVo vo = populatePatientDocumentVo(populateServetDocumentVo(fileName), patientDocumentName, patientDocumentCategory);	
		
		String[] str = vo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}
						
		CatsReferralReportsVo catReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		ReferralOutcomeVo voOutcome = form.getGlobalContext().RefMan.getSelectedReferralOutcomeVo();
		
		ReferralOutcomeReportType reportType = form.getGlobalContext().RefMan.getReferralOutcomeReportType();
		
		//WDEV-13956
		PrescriptionsVo prescriptionVo = form.getLocalContext().getSelectedPrescription();
	
			if (prescriptionVo != null && (prescriptionVo.getIsPrinted() == null || Boolean.FALSE.equals(prescriptionVo.getIsPrinted())))
			{
				prescriptionVo.setIsPrinted(true);
			}
		//end
		
		if (reportType != null)
		{
			if (reportType.equals(ReferralOutcomeReportType.FINAL))
				catReferral.setIsFinalReportRequired(ReportStatus.GENERATED);
			
			if (voOutcome != null && reportType.equals(ReferralOutcomeReportType.FINAL))
				voOutcome.setCatsFinalReportStatus(ReportStatus.GENERATED);
		}
		
		try 
		{
			domain.savePatientDocument(vo, catReferral, voOutcome, prescriptionVo);			
		} 
		catch (StaleObjectException e) 
		{			
			catchErrors(e.toString(), SystemLogLevel.ERROR);
			return false;
		}
				
		engine.close(DialogResult.OK);		
		return true;		
	}
	
	private ServerDocumentVo populateServetDocumentVo(String fileName) 
	{
		DateTime date = new DateTime();
		int year = date.getDate().getYear();
		int month = date.getDate().getMonth();
		int day = date.getDate().getDay();
		
		ServerDocumentVo vo = new ServerDocumentVo();				
		String filePath = year + "/" + month + "/" + day + "/" + fileName;			
		vo.setFileName(filePath);
		vo.setFileType(FileType.PDF);		
		return vo;		
	}	
	
	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocumentVo, String patientDocumentName, DocumentCategory patientDocumentCategory)
	{
		PatientDocumentVo vo = new PatientDocumentVo();
		vo.setPatient(form.getGlobalContext().Core.getPatientShort());
		vo.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		vo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		vo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		vo.setReferral(null);
				
		vo.setName(patientDocumentName);
		vo.setServerDocument(serverDocumentVo);
		vo.setCreationType(DocumentCreationType.GENERATED);
		vo.setCategory(patientDocumentCategory);
		
		vo.setRecordingUser((MemberOfStaffRefVo)domain.getMosUser(engine.getLoggedInUser().getUsername()));
		vo.setRecordingDateTime(new DateTime());
		vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		return vo;
	}


	
}
