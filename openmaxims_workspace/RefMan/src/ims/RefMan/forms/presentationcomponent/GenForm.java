// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.presentationcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class qmbAuthorComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MemberOfStaffLiteVo getValue()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdMedicationRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMedicationRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDrugReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDrugReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDrugOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDrug()
		{
			return (String)super.row.get(0);
		}
		public void setcolDrug(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDrugTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Date getcolDate()
		{
			return (ims.framework.utils.Date)super.row.get(1);
		}
		public void setcolDate(ims.framework.utils.Date value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolFrequencyReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolFrequencyReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolFrequencyOpened()
		{
			super.row.showOpened(2);
		}
		public ims.core.vo.lookups.MedicationFrequency getcolFrequency()
		{
			return (ims.core.vo.lookups.MedicationFrequency)super.row.get(2);
		}
		public void setcolFrequency(ims.core.vo.lookups.MedicationFrequency value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolFrequencyTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.core.vo.PatientMedicationLiteVo getValue()
		{
			return (ims.core.vo.PatientMedicationLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientMedicationLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMedicationRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMedicationRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMedicationRow get(int index)
		{
			return new grdMedicationRow(super.collection.get(index));
		}
		public grdMedicationRow newRow()
		{
			return new grdMedicationRow(super.collection.newRow());
		}
		public grdMedicationRow newRow(boolean autoSelect)
		{
			return new grdMedicationRow(super.collection.newRow(autoSelect));
		}
		public grdMedicationRow newRowAt(int index)
		{
			return new grdMedicationRow(super.collection.newRowAt(index));
		}
		public grdMedicationRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMedicationRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMedicationGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientMedicationLiteVoCollection getValues()
		{
			ims.core.vo.PatientMedicationLiteVoCollection listOfValues = new ims.core.vo.PatientMedicationLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientMedicationLiteVo getValue()
		{
			return (ims.core.vo.PatientMedicationLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientMedicationLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdMedicationRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMedicationRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMedicationRowCollection getRows()
		{
			return new grdMedicationRowCollection(super.grid.getRows());
		}
		public grdMedicationRow getRowByValue(ims.core.vo.PatientMedicationLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMedicationRow(row);
		}
		public void setcolDrugHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDrugHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolFrequencyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolFrequencyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colFrequencyComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
	}
	public static class grdCoMorbitiesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdCoMorbitiesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setCoMorbitiesReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isCoMorbitiesReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showCoMorbitiesOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getCoMorbities()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellCoMorbitiesTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientDiagnosisLiteVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdCoMorbitiesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdCoMorbitiesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdCoMorbitiesRow get(int index)
		{
			return new grdCoMorbitiesRow(super.collection.get(index));
		}
		public grdCoMorbitiesRow newRow()
		{
			return new grdCoMorbitiesRow(super.collection.newRow());
		}
		public grdCoMorbitiesRow newRow(boolean autoSelect)
		{
			return new grdCoMorbitiesRow(super.collection.newRow(autoSelect));
		}
		public grdCoMorbitiesRow newRowAt(int index)
		{
			return new grdCoMorbitiesRow(super.collection.newRowAt(index));
		}
		public grdCoMorbitiesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdCoMorbitiesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdCoMorbitiesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientDiagnosisLiteVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisLiteVoCollection listOfValues = new ims.core.vo.PatientDiagnosisLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisLiteVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdCoMorbitiesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdCoMorbitiesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdCoMorbitiesRowCollection getRows()
		{
			return new grdCoMorbitiesRowCollection(super.grid.getRows());
		}
		public grdCoMorbitiesRow getRowByValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdCoMorbitiesRow(row);
		}
		public void setCoMorbitiesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getCoMorbitiesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdAlergiesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAlergiesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setAllergyReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isAllergyReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showAllergyOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getAllergy()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellAllergyTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientAllergy getValue()
		{
			return (ims.core.vo.PatientAllergy)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientAllergy value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAlergiesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAlergiesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAlergiesRow get(int index)
		{
			return new grdAlergiesRow(super.collection.get(index));
		}
		public grdAlergiesRow newRow()
		{
			return new grdAlergiesRow(super.collection.newRow());
		}
		public grdAlergiesRow newRow(boolean autoSelect)
		{
			return new grdAlergiesRow(super.collection.newRow(autoSelect));
		}
		public grdAlergiesRow newRowAt(int index)
		{
			return new grdAlergiesRow(super.collection.newRowAt(index));
		}
		public grdAlergiesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAlergiesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAlergiesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientAllergyCollection getValues()
		{
			ims.core.vo.PatientAllergyCollection listOfValues = new ims.core.vo.PatientAllergyCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientAllergy getValue()
		{
			return (ims.core.vo.PatientAllergy)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientAllergy value)
		{
			super.grid.setValue(value);
		}
		public grdAlergiesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAlergiesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAlergiesRowCollection getRows()
		{
			return new grdAlergiesRowCollection(super.grid.getRows());
		}
		public grdAlergiesRow getRowByValue(ims.core.vo.PatientAllergy value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAlergiesRow(row);
		}
		public void setAllergyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getAllergyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdIssuesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIssuesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setPresentingIssueReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isPresentingIssueReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showPresentingIssueOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getPresentingIssue()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellPresentingIssueTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.clinical.vo.PatientComplaintVo getValue()
		{
			return (ims.clinical.vo.PatientComplaintVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientComplaintVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIssuesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIssuesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIssuesRow get(int index)
		{
			return new grdIssuesRow(super.collection.get(index));
		}
		public grdIssuesRow newRow()
		{
			return new grdIssuesRow(super.collection.newRow());
		}
		public grdIssuesRow newRow(boolean autoSelect)
		{
			return new grdIssuesRow(super.collection.newRow(autoSelect));
		}
		public grdIssuesRow newRowAt(int index)
		{
			return new grdIssuesRow(super.collection.newRowAt(index));
		}
		public grdIssuesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIssuesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIssuesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.clinical.vo.PatientComplaintVoCollection getValues()
		{
			ims.clinical.vo.PatientComplaintVoCollection listOfValues = new ims.clinical.vo.PatientComplaintVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientComplaintVo getValue()
		{
			return (ims.clinical.vo.PatientComplaintVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientComplaintVo value)
		{
			super.grid.setValue(value);
		}
		public grdIssuesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIssuesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIssuesRowCollection getRows()
		{
			return new grdIssuesRowCollection(super.grid.getRows());
		}
		public grdIssuesRow getRowByValue(ims.clinical.vo.PatientComplaintVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIssuesRow(row);
		}
		public void setPresentingIssueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getPresentingIssueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 528);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenumedicationsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenumedicationsMenuaddMedicationItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenuaddMedicationItem);
		contextMenus.RefMan.contextMenumedicationsMenuremoveMedicationItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenuremoveMedicationItem);
		contextMenus.RefMan.contextMenumedicationsMenueditMedicationItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(103102), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenueditMedicationItem);
		form.registerMenu(contextMenus.RefMan.contextMenumedicationsMenu);
		contextMenus.RefMan.contextMenuCoMorbidity = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuCoMorbidityaddItemItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuCoMorbidity.add(contextMenus.RefMan.contextMenuCoMorbidityaddItemItem);
		contextMenus.RefMan.contextMenuCoMorbidityremoveItemItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.RefMan.contextMenuCoMorbidity.add(contextMenus.RefMan.contextMenuCoMorbidityremoveItemItem);
		form.registerMenu(contextMenus.RefMan.contextMenuCoMorbidity);
		contextMenus.RefMan.contextMenuallergyMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuallergyMenuaddItemItem = factory.createMenuItem(startControlID.intValue() + 6, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2530001)))
			contextMenus.RefMan.contextMenuallergyMenu.add(contextMenus.RefMan.contextMenuallergyMenuaddItemItem);
		contextMenus.RefMan.contextMenuallergyMenuremoveItemItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2530002)))
			contextMenus.RefMan.contextMenuallergyMenu.add(contextMenus.RefMan.contextMenuallergyMenuremoveItemItem);
		form.registerMenu(contextMenus.RefMan.contextMenuallergyMenu);
		contextMenus.RefMan.contextMenuDetailsMenu = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.RefMan.contextMenuDetailsMenuAddItemItem = factory.createMenuItem(startControlID.intValue() + 8, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuDetailsMenu.add(contextMenus.RefMan.contextMenuDetailsMenuAddItemItem);
		contextMenus.RefMan.contextMenuDetailsMenuremoveItemItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.RefMan.contextMenuDetailsMenu.add(contextMenus.RefMan.contextMenuDetailsMenuremoveItemItem);
		form.registerMenu(contextMenus.RefMan.contextMenuDetailsMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 88, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Presenting Issue", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 624, 24, 15, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "   ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring User:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 456, 344, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Comorbidities", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 344, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allergies", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 568, 24, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 216, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medication on Referral", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 749, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 664, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 56, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 24, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbAuthorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbAuthorTemp);
		qmbAuthorComboBox qmbAuthor = (qmbAuthorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbAuthorComboBox.class, m_qmbAuthorTemp);
		super.addComboBox(qmbAuthor);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 552, 344, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"None Indicated", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 144, 88, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"None Indicated", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 176, 216, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"None Indicated", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 344, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"None Indicated", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 240, 800, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdMedicationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenumedicationsMenu, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMedicationTemp);
		grdMedicationGrid grdMedication = (grdMedicationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationGrid.class, m_grdMedicationTemp);
		grdMedication.addStringColumn("Drug", 0, 0, 450, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMedication.addDateColumn("Date", 0, 0, 100, false, true, null, false, 0, true);
		grdMedication.addComboBoxColumn("Frequency", 0, 0, -1, false, true, false, false, true, -1);
		super.addGrid(grdMedication);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 456, 368, 368, 97, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdCoMorbitiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuCoMorbidity, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdCoMorbitiesTemp);
		grdCoMorbitiesGrid grdCoMorbities = (grdCoMorbitiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCoMorbitiesGrid.class, m_grdCoMorbitiesTemp);
		grdCoMorbities.addMutableComboBoxColumn("Comorbidities", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grdCoMorbities);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 24, 368, 376, 97, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdAlergiesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuallergyMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAlergiesTemp);
		grdAlergiesGrid grdAlergies = (grdAlergiesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAlergiesGrid.class, m_grdAlergiesTemp);
		grdAlergies.addMutableComboBoxColumn("Allergy", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grdAlergies);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 800, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdIssuesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuDetailsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdIssuesTemp);
		grdIssuesGrid grdIssues = (grdIssuesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIssuesGrid.class, m_grdIssuesTemp);
		grdIssues.addMutableComboBoxColumn("Presenting Issue", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grdIssues);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Label lblServiceName()
	{
		return (Label)super.getControl(1);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(10);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(11);
	}
	public DateTimeControl dtimAuthoringDateTime()
	{
		return (DateTimeControl)super.getControl(12);
	}
	public qmbAuthorComboBox qmbAuthor()
	{
		return (qmbAuthorComboBox)super.getComboBox(0);
	}
	public CheckBox chkCoMorbitiesIndicated()
	{
		return (CheckBox)super.getControl(14);
	}
	public CheckBox chkComplaintsIndicated()
	{
		return (CheckBox)super.getControl(15);
	}
	public CheckBox chkMedicationsIndicated()
	{
		return (CheckBox)super.getControl(16);
	}
	public CheckBox chkAllergiesIndicated()
	{
		return (CheckBox)super.getControl(17);
	}
	public grdMedicationGrid grdMedication()
	{
		return (grdMedicationGrid)super.getGrid(0);
	}
	public grdCoMorbitiesGrid grdCoMorbities()
	{
		return (grdCoMorbitiesGrid)super.getGrid(1);
	}
	public grdAlergiesGrid grdAlergies()
	{
		return (grdAlergiesGrid)super.getGrid(2);
	}
	public grdIssuesGrid grdIssues()
	{
		return (grdIssuesGrid)super.getGrid(3);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectMedication = new LocalFormName(102265);
			}
			public final FormName SelectMedication;
		}

		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentPresentationReferralSummary = new ims.framework.ContextVariable("CurrentPresentationReferralSummary", prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier + "");
			cxl_Medications = new ims.framework.ContextVariable("Medications", prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__Medications_" + componentIdentifier + "");
			cxl_Dosages = new ims.framework.ContextVariable("Dosages", prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__Dosages_" + componentIdentifier + "");
			cxl_Frequency = new ims.framework.ContextVariable("Frequency", prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__Frequency_" + componentIdentifier + "");
			cxl_OriginalPresentationReferralSummaryVo = new ims.framework.ContextVariable("OriginalPresentationReferralSummaryVo", prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier + "");
		}
		
		public boolean getCurrentPresentationReferralSummaryIsNotNull()
		{
			return !cxl_CurrentPresentationReferralSummary.getValueIsNull(context);
		}
		public ims.RefMan.vo.PresentationReferralSummaryVo getCurrentPresentationReferralSummary()
		{
			return (ims.RefMan.vo.PresentationReferralSummaryVo)cxl_CurrentPresentationReferralSummary.getValue(context);
		}
		public void setCurrentPresentationReferralSummary(ims.RefMan.vo.PresentationReferralSummaryVo value)
		{
			cxl_CurrentPresentationReferralSummary.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentPresentationReferralSummary = null;
		public boolean getMedicationsIsNotNull()
		{
			return !cxl_Medications.getValueIsNull(context);
		}
		public ims.core.vo.MedicationLiteVoCollection getMedications()
		{
			return (ims.core.vo.MedicationLiteVoCollection)cxl_Medications.getValue(context);
		}
		public void setMedications(ims.core.vo.MedicationLiteVoCollection value)
		{
			cxl_Medications.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Medications = null;
		public boolean getDosagesIsNotNull()
		{
			return !cxl_Dosages.getValueIsNull(context);
		}
		public ims.core.vo.lookups.MedicationDoseUnitCollection getDosages()
		{
			return (ims.core.vo.lookups.MedicationDoseUnitCollection)cxl_Dosages.getValue(context);
		}
		public void setDosages(ims.core.vo.lookups.MedicationDoseUnitCollection value)
		{
			cxl_Dosages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Dosages = null;
		public boolean getFrequencyIsNotNull()
		{
			return !cxl_Frequency.getValueIsNull(context);
		}
		public ims.core.vo.lookups.MedicationFrequencyCollection getFrequency()
		{
			return (ims.core.vo.lookups.MedicationFrequencyCollection)cxl_Frequency.getValue(context);
		}
		public void setFrequency(ims.core.vo.lookups.MedicationFrequencyCollection value)
		{
			cxl_Frequency.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Frequency = null;
		public boolean getOriginalPresentationReferralSummaryVoIsNotNull()
		{
			return !cxl_OriginalPresentationReferralSummaryVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.PresentationReferralSummaryVo getOriginalPresentationReferralSummaryVo()
		{
			return (ims.RefMan.vo.PresentationReferralSummaryVo)cxl_OriginalPresentationReferralSummaryVo.getValue(context);
		}
		public void setOriginalPresentationReferralSummaryVo(ims.RefMan.vo.PresentationReferralSummaryVo value)
		{
			cxl_OriginalPresentationReferralSummaryVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OriginalPresentationReferralSummaryVo = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class medicationsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addMedication = 1;
				public static final int removeMedication = 2;
				public static final int editMedication = 3;
			}
			public void disableAllmedicationsMenuMenuItems()
			{
				this.contextMenumedicationsMenuaddMedicationItem.setEnabled(false);
				this.contextMenumedicationsMenuremoveMedicationItem.setEnabled(false);
				this.contextMenumedicationsMenueditMedicationItem.setEnabled(false);
			}
			public void hideAllmedicationsMenuMenuItems()
			{
				this.contextMenumedicationsMenuaddMedicationItem.setVisible(false);
				this.contextMenumedicationsMenuremoveMedicationItem.setVisible(false);
				this.contextMenumedicationsMenueditMedicationItem.setVisible(false);
			}
			private Menu contextMenumedicationsMenu;
			public MenuItem getmedicationsMenuaddMedicationItem()
			{
				return this.contextMenumedicationsMenuaddMedicationItem;
			}
			private MenuItem contextMenumedicationsMenuaddMedicationItem;
			public MenuItem getmedicationsMenuremoveMedicationItem()
			{
				return this.contextMenumedicationsMenuremoveMedicationItem;
			}
			private MenuItem contextMenumedicationsMenuremoveMedicationItem;
			public MenuItem getmedicationsMenueditMedicationItem()
			{
				return this.contextMenumedicationsMenueditMedicationItem;
			}
			private MenuItem contextMenumedicationsMenueditMedicationItem;
			public final class CoMorbidity implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addItem = 4;
				public static final int removeItem = 5;
			}
			public void disableAllCoMorbidityMenuItems()
			{
				this.contextMenuCoMorbidityaddItemItem.setEnabled(false);
				this.contextMenuCoMorbidityremoveItemItem.setEnabled(false);
			}
			public void hideAllCoMorbidityMenuItems()
			{
				this.contextMenuCoMorbidityaddItemItem.setVisible(false);
				this.contextMenuCoMorbidityremoveItemItem.setVisible(false);
			}
			private Menu contextMenuCoMorbidity;
			public ReadOnlyMenuItem getCoMorbidityaddItemItem()
			{
				return this.contextMenuCoMorbidityaddItemItem;
			}
			private MenuItem contextMenuCoMorbidityaddItemItem;
			public ReadOnlyMenuItem getCoMorbidityremoveItemItem()
			{
				return this.contextMenuCoMorbidityremoveItemItem;
			}
			private MenuItem contextMenuCoMorbidityremoveItemItem;
			public final class allergyMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addItem = 6;
				public static final int removeItem = 7;
			}
			public void disableAllallergyMenuMenuItems()
			{
				this.contextMenuallergyMenuaddItemItem.setEnabled(false);
				this.contextMenuallergyMenuremoveItemItem.setEnabled(false);
			}
			public void hideAllallergyMenuMenuItems()
			{
				this.contextMenuallergyMenuaddItemItem.setVisible(false);
				this.contextMenuallergyMenuremoveItemItem.setVisible(false);
			}
			private Menu contextMenuallergyMenu;
			public ReadOnlyMenuItem getallergyMenuaddItemItem()
			{
				return this.contextMenuallergyMenuaddItemItem;
			}
			private MenuItem contextMenuallergyMenuaddItemItem;
			public ReadOnlyMenuItem getallergyMenuremoveItemItem()
			{
				return this.contextMenuallergyMenuremoveItemItem;
			}
			private MenuItem contextMenuallergyMenuremoveItemItem;
			public final class DetailsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddItem = 8;
				public static final int removeItem = 9;
			}
			public void disableAllDetailsMenuMenuItems()
			{
				this.contextMenuDetailsMenuAddItemItem.setEnabled(false);
				this.contextMenuDetailsMenuremoveItemItem.setEnabled(false);
			}
			public void hideAllDetailsMenuMenuItems()
			{
				this.contextMenuDetailsMenuAddItemItem.setVisible(false);
				this.contextMenuDetailsMenuremoveItemItem.setVisible(false);
			}
			private Menu contextMenuDetailsMenu;
			public ReadOnlyMenuItem getDetailsMenuAddItemItem()
			{
				return this.contextMenuDetailsMenuAddItemItem;
			}
			private MenuItem contextMenuDetailsMenuAddItemItem;
			public ReadOnlyMenuItem getDetailsMenuremoveItemItem()
			{
				return this.contextMenuDetailsMenuremoveItemItem;
			}
			private MenuItem contextMenuDetailsMenuremoveItemItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[98];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-ID", "ID_PresentationReferralSummary");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-CATSREFERRAL", "CatsReferral");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-PRESENTINGISSUESNONINDICATED", "PresentingIssuesNonIndicated");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-MEDICATIONNONINDICATED", "MedicationNonIndicated");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-ALLERGIESISSUESNONINDICATED", "AllergiesIssuesNonIndicated");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_savedPresentationReferralSummary", "BO-1096100001-COMORBIDITIESISSUESNONINDICATED", "ComorbiditiesIssuesNonIndicated");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ID", "ID_Medication");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-MEDICATIONNAME", "MedicationName");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISCONTROLLEDDRUG", "IsControlledDrug");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-FREQUENCYDEFAULT", "FrequencyDefault");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-NOOFDAYSSUPPLYDEFAULT", "NoOfDaysSupplyDefault");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-ID", "ID_PresentationReferralSummary");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-CATSREFERRAL", "CatsReferral");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-PRESENTINGISSUESNONINDICATED", "PresentingIssuesNonIndicated");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-MEDICATIONNONINDICATED", "MedicationNonIndicated");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-ALLERGIESISSUESNONINDICATED", "AllergiesIssuesNonIndicated");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__CurrentPresentationReferralSummary_" + componentIdentifier, "BO-1096100001-COMORBIDITIESISSUESNONINDICATED", "ComorbiditiesIssuesNonIndicated");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-ID", "ID_PresentationReferralSummary");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-CATSREFERRAL", "CatsReferral");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-PRESENTINGISSUESNONINDICATED", "PresentingIssuesNonIndicated");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-MEDICATIONNONINDICATED", "MedicationNonIndicated");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-ALLERGIESISSUESNONINDICATED", "AllergiesIssuesNonIndicated");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PresentationComponent.__internal_x_context__OriginalPresentationReferralSummaryVo_" + componentIdentifier, "BO-1096100001-COMORBIDITIESISSUESNONINDICATED", "ComorbiditiesIssuesNonIndicated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
