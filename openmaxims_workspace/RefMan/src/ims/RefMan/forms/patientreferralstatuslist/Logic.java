// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.65 build 3183.27979)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.patientreferralstatuslist;

import ims.admin.vo.enums.ElectiveListDetails;
import ims.RefMan.forms.referralstatuslist.GenForm;
import ims.RefMan.vo.CATSReferralFilterVo;
import ims.RefMan.vo.CatsReferralListManualAssemblyVo;
import ims.RefMan.vo.CatsReferralListManualAssemblyVoCollection;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.lookups.AdditionalInvestigationAppointmentsStatus;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralNoteType;
import ims.configuration.gen.ConfigFlag;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ReferralNoteVo;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	public static final Integer		COLSERVICE			= new Integer(-1);
	public static final Integer		COLELECTIVELIST		= new Integer(-15);
	public static final Integer		COLRECIEVEDDATE		= new Integer(-2);
	public static final Integer		COLREMAININGDAYS	= new Integer(-3);
	public static final Integer		COLIMAGE			= new Integer(-4);
	public static final Integer		COLPDF				= new Integer(-7);
	public static final Integer		COLSTATUS			= new Integer(-8);
	public static final Integer		COLINV				= new Integer(-9);
	public static final Integer		COLBOOKING			= new Integer(-10);
	public static final Integer		COLINVNEEDAPPT		= new Integer(-11);
	public static final Integer		COLCAB				= new Integer(-12);
	public static final Integer		COLREVIEW			= new Integer(-13);
	public static final Integer		COL20KPI			= new Integer(-14);

	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setIsProviderCancellation(false);//wdev-6163
		
		initializeDynamicGrid();
		open();
	}
	
	@Override
	protected void onDyngrdReferralsRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		rowSelectionChange();
	}

	private void rowSelectionChange() 
	{
		form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
		
		if (form.dyngrdReferrals().getValue() != null
			&& ((CatsReferralListManualAssemblyVo) form.dyngrdReferrals().getValue()).getCatsReferralIdIsNotNull())
		{
			CatsReferralListVo vo = domain.getCatsReferral(new CatsReferralRefVo(((CatsReferralListManualAssemblyVo)form.dyngrdReferrals().getValue()).getCatsReferralId(), 0));
			
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			{
				form.getGlobalContext().RefMan.setPatientElectiveListRef(domain.getActivePatientElectiveListsForCurrentCatsReferral(vo));
			}
			
			form.getLocalContext().setSelectedRecord(vo);
			form.getGlobalContext().RefMan.setCatsReferral((CatsReferralRefVo) vo);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(vo.getContractIsNotNull() ? vo.getContract().getContractType() : null);
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(vo.getCareContext()));
			resetPIDBarText(); //WDEV-14660 
			updateContextMenus(vo);
		}
	}
	
	//WDEV-14660
	private void resetPIDBarText() 
	{
		if (form.getGlobalContext().Core.getPatientShort() == null)
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()));
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdReferrals().clear();
		form.dyngrdReferrals().setSelectable(true);
		
		DynamicGridColumn cabColumn = form.dyngrdReferrals().getColumns().newColumn("", COLCAB);
		cabColumn.setWidth(32);	

		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		{
			DynamicGridColumn eleColumn = form.dyngrdReferrals().getColumns().newColumn("", COLELECTIVELIST);
			eleColumn.setWidth(32);	
		}
		
		DynamicGridColumn serviceColumn = form.dyngrdReferrals().getColumns().newColumn("Service", COLSERVICE);
		serviceColumn.setWidth(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() ? 185 : 153);

		DynamicGridColumn revColumn = form.dyngrdReferrals().getColumns().newColumn("", COLREVIEW);
		revColumn.setWidth(40);	
		revColumn.setAlignment(Alignment.CENTER);

		DynamicGridColumn remainingColumn = form.dyngrdReferrals().getColumns().newColumn("RTT Breach Date", COL20KPI);//WDEV-11713 ////WDEV-11779 Modified to "RTT BREACH DATE"
		remainingColumn.setWidth(100);//WDEV-11779 

		DynamicGridColumn ubrnColumn = form.dyngrdReferrals().getColumns().newColumn("", COLIMAGE);
		ubrnColumn.setWidth(40);	
		
		DynamicGridColumn recColumn = form.dyngrdReferrals().getColumns().newColumn("Received Date", COLRECIEVEDDATE);
		recColumn.setWidth(95);	

		DynamicGridColumn pdfColumn = form.dyngrdReferrals().getColumns().newColumn("", COLPDF);
		pdfColumn.setWidth(32);		
		pdfColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn statusColumn = form.dyngrdReferrals().getColumns().newColumn("Status", COLSTATUS);
		statusColumn.setWidth(135);		
		statusColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn invColumn = form.dyngrdReferrals().getColumns().newColumn("", COLINV);
		invColumn.setWidth(32);		
		invColumn.setSortMode(SortMode.AUTOMATIC);

		DynamicGridColumn invNeedApptColumn = form.dyngrdReferrals().getColumns().newColumn("", COLINVNEEDAPPT);
		invNeedApptColumn.setWidth(32);		
		invNeedApptColumn.setSortMode(SortMode.AUTOMATIC);
		
		DynamicGridColumn bookColumn = form.dyngrdReferrals().getColumns().newColumn("", COLBOOKING);
		bookColumn.setWidth(-1);	
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.NewReferralWizard :
				launchNewReferralWizard();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.EDIT_REFERRAL_DETAILS :
				editReferralDetails();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.AtConsultation :
				viewAtColsultation();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.Presentation :
				viewPresentation();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.CALL_ATTEMPTS :
				viewCallAttempts();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.NEWREJECTEDONWARDREFERRAL:
				newRejectedOnwardReferral();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.EDITREJECTONWARDREFERRALDETAILS:
				editRejectOnWardReferralDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.NEWONWARDREFERRAL:
				newOnwardReferral();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ViewConsultationDetails:
				viewConsultationDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ViewReferralDetails:
				viewReferralDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ReAdmitPatient:
				admit();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.UNDO_PROVIDER_CANCELLATION:
				undoProviderCancellation();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.UNDO_REFERRAL_REJECTION:
				undoReferralRejection();
				break;
			
			
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.NEW_WAITING_LIST_ENTRY://WDEV-18083
				engine.open(form.getForms().RefMan.NewElectiveListEntry,new Object[]{1,form.getLocalContext().getSelectedRecord()});
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ADD_TO_BOOKED_LIST:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[]{ElectiveListDetails.ADDTOBOOKEDLIST});
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ADD_TO_PLANNED_LIST:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog,  new Object[]{ElectiveListDetails.ADDTOPLANNEDLIST});
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.ADD_TO_WAITING_LIST:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog,  new Object[]{ElectiveListDetails.ADDTOWAITINGLIST});
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.VIEW_EDIT_ELECTIVE_LIST_DETAILS:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog,  new Object[]{ElectiveListDetails.VIEWEDIT});
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralStatusListMenu.VIEW_ADMIN_EVENTS:
				engine.open(form.getForms().Pathways.AdminEvent,  new Object[]{FormMode.VIEW});
				break;
				
			default:
		}
	}
	
	private void admit() 
	{
		form.getGlobalContext().Core.getCurrentCareContext();
		form.getGlobalContext().Core.getPatientShort();
		
		engine.open(form.getForms().RefMan.TheatreReAdmissionDialog);
	}

	private void viewConsultationDetails()
	{
		setPatientShortGlobalContext();
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShort(form.getLocalContext().getSelectedRecord().getCareContext()));
		engine.open(form.getForms().RefMan.AtConsultationDialog, false);
	}

	private void newOnwardReferral() 
	{
		engine.open(form.getForms().RefMan.NewOnwardReferral);
	}

	private void editRejectOnWardReferralDetails() 
	{
		engine.open(form.getForms().RefMan.OnwardReferralRejection);
	}
	
	private void newRejectedOnwardReferral() 
	{
		engine.open(form.getForms().RefMan.OnwardReferralRejection);
	}
	
	private void editReferralDetails() 
	{
		setPatientShortGlobalContext();
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
	}


	private void viewCallAttempts() 
	{
		engine.open(form.getForms().RefMan.CallAttempts);
	}
	
	private void viewPresentation() 
	{
		engine.open(form.getForms().RefMan.Presentation); 
	}
	
	private void viewAtColsultation() 
	{
		engine.open(form.getForms().RefMan.AtConsultationDialog, false); 
	}
	
	private void launchNewReferralWizard() 
	{
	//	PatientShort voPatShort = new PatientShort();
	//	form.getGlobalContext().Core.setPatientToBeDisplayed(voPatShort);
		
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682
	
		engine.open(form.getForms().RefMan.ReferralWizardDialog);		
	}
	
	private void setPatientShortGlobalContext()
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.getLocalContext().getSelectedRecord().getPatient()));
			resetPIDBarText();//WDEV-15011
		}
	}


	private void viewReferralDetails() 
	{
		setPatientShortGlobalContext();
		engine.open(form.getForms().RefMan.ReferralDetailsDialog);
	}
	
	private void updateContextMenus(CatsReferralListVo voCats) 
	{
		form.getGlobalContext().RefMan.setIsProviderCancellation(false);//wdev-6163

		form.getContextMenus().RefMan.hideAllReferralStatusListMenuMenuItems();
		
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		form.getContextMenus().RefMan.getReferralStatusListMenuViewReferralDetailsItem().setVisible(isViewMode 
				&& form.dyngrdReferrals().getSelectedRow() != null); 

		form.getContextMenus().RefMan.getReferralStatusListMenuNEWREJECTEDONWARDREFERRALItem().setVisible(isViewMode 
			&& voCats != null && voCats.getOnwardReferralStatusIsNotNull()
			&& voCats.getOnwardReferralStatus().equals(OnwardReferralStatus.CURRENT_ONWARD_REFERRAL));
		
		form.getContextMenus().RefMan.getReferralStatusListMenuEDITREJECTONWARDREFERRALDETAILSItem().setVisible(isViewMode 
			&& voCats != null && voCats.getOnwardReferralStatusIsNotNull()
			&& voCats.getOnwardReferralStatus().equals(OnwardReferralStatus.ONWARD_REFERRAL_REJECTED));
		
		form.getContextMenus().RefMan.getReferralStatusListMenuNEWONWARDREFERRALItem().setVisible(isViewMode 
				&& voCats != null && voCats.getOnwardReferralStatusIsNotNull()
				&& voCats.getOnwardReferralStatus().equals(OnwardReferralStatus.ONWARD_REFERRAL_REJECTED));
		
		form.getContextMenus().RefMan.getReferralStatusListMenuViewConsultationDetailsItem().setVisible(voCats != null 
				&& voCats.getHasConsultationDetailsIsNotNull() && voCats.getHasConsultationDetails());
		
		
		//wdev-6163
		if (voCats != null && voCats.getProviderCancellationIsNotNull())
		{
				form.getGlobalContext().RefMan.setIsProviderCancellation(true);
		}

		
		if (ConfigFlag.GEN.ALLOW_RE_ADMIT_FUNCTIONALITY.getValue())
		{
			if (voCats != null
					&& voCats.getCurrentStatusIsNotNull()
					&& voCats.getCurrentStatus().getReferralStatusIsNotNull()
					&& ( voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED)
						|| voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED)
						|| voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.DISCHARGED)) 
					&& ! domain.isPatientAlreadyAdmitted(form.getGlobalContext().Core.getPatientShort())
					&& domain.hadPreviousAdmissionForThisReferral(voCats))
				{
				form.getContextMenus().RefMan.getReferralStatusListMenuReAdmitPatientItem().setVisible(isViewMode); 
			}
		}
		
		//Undo Provider Cancellation
		form.getContextMenus().RefMan.getReferralStatusListMenuUNDO_PROVIDER_CANCELLATIONItem().setVisible(voCats != null 
				&& voCats.getCurrentStatusIsNotNull() 
				&& ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voCats.getCurrentStatus().getReferralStatus()));
		
		//Undo Referral Rejection
		
		form.getContextMenus().RefMan.getReferralStatusListMenuUNDO_REFERRAL_REJECTIONItem().setVisible(voCats != null 
				&& voCats.getCurrentStatusIsNotNull()
				&& ReferralApptStatus.REFERRAL_REJECTED.equals(voCats.getCurrentStatus().getReferralStatus()));
		
		//WDEV-18083 //WDEV-18223
		boolean isElectiveListFuncInUse = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue();
		boolean isCabCancelld = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.CAB_CANCELLATION.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isCancelledByProvider = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralReceived = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_RECEIVED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralRejected = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_REJECTED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralEOC = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean areActivePatientElectiveListsForCurrentCatsReferral = form.getGlobalContext().RefMan.getPatientElectiveListRef() != null;
		//WDEV-18437
		boolean isReferralAwaitingTriage = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.AWAITING_TRIAGE.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralDischarged = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.DISCHARGED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralWaitingOnGPReferral = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.WAITING_ON_GP_REFERRAL.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralProvisionalRejection = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.PROVISIONAL_REJECTION.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isOnwardReferralRequested = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.ONWARDREFERRALREQUESTED.equals(voCats.getCurrentStatus().getReferralStatus());
		
		//WDEV-18247
		boolean canShowElectiveListCM = form.dyngrdReferrals().getSelectedRow() != null && isElectiveListFuncInUse	&& !isCabCancelld 
		&& !isCancelledByProvider && !isReferralReceived && !isReferralRejected && !areActivePatientElectiveListsForCurrentCatsReferral;
		
		boolean canShowViewEditElectiveListCM = form.dyngrdReferrals().getSelectedRow() != null && isElectiveListFuncInUse	&& !isCabCancelld 
		&& !isCancelledByProvider && !isReferralReceived && !isReferralRejected && areActivePatientElectiveListsForCurrentCatsReferral;
		
		//WDEV-18487 
		boolean hasAdminEvents = voCats !=null && voCats.getAdminEvent() != null && voCats.getAdminEvent().size() > 0;
		
		//WDEV-18425
		//WDEV-18437
		if (!form.getGlobalContext().Core.getPatientShort().getDodIsNotNull()
				&& (!isReferralRejected
				&&!isReferralDischarged
				&& !isReferralWaitingOnGPReferral
				&& !isReferralReceived
				&& !isCabCancelld
				&& !isCancelledByProvider
				&& !isReferralProvisionalRejection
				&& !isReferralAwaitingTriage
				&& !isReferralEOC
				&& !isOnwardReferralRequested)
				)
		{
			form.getContextMenus().RefMan.getReferralStatusListMenuADD_TO_BOOKED_LISTItem().setVisible(canShowElectiveListCM);
			form.getContextMenus().RefMan.getReferralStatusListMenuADD_TO_PLANNED_LISTItem().setVisible(canShowElectiveListCM);
			form.getContextMenus().RefMan.getReferralStatusListMenuADD_TO_WAITING_LISTItem().setVisible(canShowElectiveListCM);
		}
		
		form.getContextMenus().RefMan.getReferralStatusListMenuVIEW_EDIT_ELECTIVE_LIST_DETAILSItem().setVisible(canShowViewEditElectiveListCM);
		
		//WDEV-18381
		form.getContextMenus().RefMan.getReferralStatusListMenuVIEW_ADMIN_EVENTSItem().setVisible(hasAdminEvents);
		
		//WDEV-18441 //WDEV-18456 - context menu hidden
 		form.getContextMenus().RefMan.getReferralStatusListMenuRECORD_ADMIN_EVENTItem().setVisible(Boolean.FALSE);
	}

	private void open()
	{
		form.dyngrdReferrals().getRows().clear();
		updateContextMenus(null);
		
		form.getLocalContext().setSelectedRecord(null);

		CATSReferralFilterVo voFilter = new CATSReferralFilterVo();
		voFilter.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		CatsReferralListManualAssemblyVoCollection voCatsRefColl = domain.listCATSReferrals(voFilter, false, ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() ? true : false);
	
		for (int i = 0 ; voCatsRefColl != null && i < voCatsRefColl.size() ; i++)
			addNewDynamicGridRow(voCatsRefColl.get(i));
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdReferrals().getColumns().getByIdentifier(identifier);
	}

	private void addNewDynamicGridRow(CatsReferralListManualAssemblyVo voCatsRef)
	{
		DynamicGridRow newRow = form.dyngrdReferrals().getRows().newRow();

		if (voCatsRef.getIsCABIsNotNull() && voCatsRef.getIsCAB())
		{
			DynamicGridCell cabCell = newRow.getCells().newCell(getColumn(COLCAB), DynamicCellType.IMAGE);
			cabCell.setReadOnly(false);
			cabCell.setValue(form.getImages().OCRR.LetterC);
			cabCell.setTooltip("Choose and Book Referral");
		}	

		DynamicGridCell serviceCell = newRow.getCells().newCell(getColumn(COLSERVICE), DynamicCellType.LABEL);
		serviceCell.setValue(voCatsRef.getServiceNameIsNotNull() ? voCatsRef.getServiceName() : "");

		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		{
			DynamicGridCell eleCell = newRow.getCells().newCell(getColumn(COLELECTIVELIST), DynamicCellType.IMAGE);
			eleCell.setValue(voCatsRef.getLinkedELEIDIsNotNull() ? form.getImages().Core.UI16 : null);
			eleCell.setTooltip(voCatsRef.getLinkedELEIDIsNotNull() ? "Elective List Entry" : "");
			eleCell.setReadOnly(false);
		}
		
		DynamicGridCell rdCell = newRow.getCells().newCell(getColumn(COLREVIEW), DynamicCellType.IMAGE);
		if (voCatsRef.getIsFlaggedForReviewIsNotNull() && voCatsRef.getIsFlaggedForReview())
		{
			rdCell.setValue(form.getImages().Core.RedFlag);
		}

		DynamicGridCell recCell = newRow.getCells().newCell(getColumn(COLRECIEVEDDATE), DynamicCellType.LABEL);
		recCell.setValue(voCatsRef.getDateReceivedIsNotNull() ? voCatsRef.getDateReceived().toString() : "");
	
		DynamicGridCell remainingCell = newRow.getCells().newCell(getColumn(COL20KPI), DynamicCellType.LABEL);
		remainingCell.setValue("");
		//WDEV-11713
		if (voCatsRef.getEnd18WWIsNotNull()) //WDEV-11713
			remainingCell.setValue(voCatsRef.getEnd18WW().toString());//WDEV-11713
		
		DynamicGridCell imageCell = newRow.getCells().newCell(getColumn(COLIMAGE), DynamicCellType.IMAGE);
		DynamicGridCell pdfCell = null;
		if (voCatsRef.getHasDocumentsIsNotNull() && voCatsRef.getHasDocuments())
		{
			pdfCell = newRow.getCells().newCell(getColumn(COLPDF), DynamicCellType.IMAGEBUTTON);
			pdfCell.setReadOnly(false);
			pdfCell.setValue(form.getImages().Core.DocumentsBlue16);
			pdfCell.setAutoPostBack(true);
			pdfCell.setTooltip("Additional Documents with No Referral Letter");
		}	
	
		if (voCatsRef.getHasReferralLetterIsNotNull() && voCatsRef.getHasReferralLetter())
		{
			pdfCell = newRow.getCells().newCell(getColumn(COLPDF), DynamicCellType.IMAGEBUTTON);
			pdfCell.setReadOnly(false);
			pdfCell.setValue(form.getImages().Core.Memo);
			pdfCell.setAutoPostBack(true);
			pdfCell.setTooltip("Referral Letter");
		
			if (voCatsRef.getHasDocumentsIsNotNull() && voCatsRef.getHasDocuments())
			{
				pdfCell.setValue(form.getImages().OCRR.OrderEntryTemplate);
				pdfCell.setTooltip("Referral Letter with Additional Documents");
			}
		}	
		if (voCatsRef.getHasInvestigationsIsNotNull() && voCatsRef.getHasInvestigations())
		{
			DynamicGridCell typeInvCell = newRow.getCells().newCell(getColumn(COLINV), DynamicCellType.IMAGEBUTTON);
			typeInvCell.setReadOnly(false);
			typeInvCell.setValue(form.getImages().OCRR.Accepted);
			typeInvCell.setAutoPostBack(true);
			typeInvCell.setTooltip("Investigations Ordered");
		}
	
		if (voCatsRef.getAdditionalInvStatusIsNotNull() 
			&& voCatsRef.getAdditionalInvStatus().equals(AdditionalInvestigationAppointmentsStatus.TOBEBOOKED))
		{
			DynamicGridCell typeInvCell = newRow.getCells().newCell(getColumn(COLINVNEEDAPPT), DynamicCellType.IMAGEBUTTON);
			typeInvCell.setReadOnly(false);
			typeInvCell.setValue(form.getImages().OCRR.SpecimenDetails16);
			typeInvCell.setAutoPostBack(true);
			typeInvCell.setTooltip("Investigation Requires an Appointment");
		}
			

		DynamicGridCell statCell = newRow.getCells().newCell(getColumn(COLSTATUS), DynamicCellType.LABEL);
		statCell.setValue(voCatsRef.getCatsCurrentStatusIsNotNull() ? voCatsRef.getCatsCurrentStatus().getText().toString() : "");
		statCell.setTooltip(voCatsRef.getCatsCurrentStatusIsNotNull() ? voCatsRef.getCatsCurrentStatus().getText().toString() : "");
		statCell.setIdentifier(voCatsRef.getCatsCurrentStatusIsNotNull() ? voCatsRef.getCatsCurrentStatus() : null);
	
		if (voCatsRef.getHasApointmentsIsNotNull() && voCatsRef.getHasApointments())
		{
			DynamicGridCell bookCell = newRow.getCells().newCell(getColumn(COLBOOKING), DynamicCellType.IMAGEBUTTON);
			bookCell.setReadOnly(false);
			bookCell.setValue(form.getImages().Core.CalendarMonth16);
			bookCell.setAutoPostBack(true);
			//WDEV-18014
			bookCell.setTooltip("Appointments");
		}
	
		if (voCatsRef.getCatsCurrentStatusIsNotNull()
			&& voCatsRef.getCatsCurrentStatus().equals(ReferralApptStatus.FURTHER_MANAGEMENT_REQUIRED)) 
			newRow.setBackColor(ConfigFlag.UI.FURTHER_MANAGEMENT_REQUIRED_ROW_COLOUR.getValue());

		newRow.setValue(voCatsRef);
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(form.getForms().RefMan.AtConsultationDialog.equals(formName))//WDEV-15488
		{
			form.getGlobalContext().RefMan.setSpecimenWorkListItemForReports(null);
		}
		
		open();//wdev-6399
//		if(formName.equals(form.getForms().RefMan.OnwardReferralRejection) && result.equals(DialogResult.OK))
//		{
//			open();
//		}
//		if(formName.equals(form.getForms().RefMan.NewOnwardReferral) && result.equals(DialogResult.OK))
//		{
//			open();
//		}
		
	}
	private void undoProviderCancellation()
	{
		form.getLocalContext().setIdUndoCancelProviderMessageBox(engine.showMessage("Please confirm if you wish to proceed with the UNDO of this Provider Cancellation","Please confirm",MessageButtons.YESNO,MessageIcon.QUESTION));
	}

	private void undoReferralRejection()
	{
		form.getLocalContext().setIdUndoReferralRejectionMessageBox(engine.showMessage("Please confirm if you wish to proceed with the UNDO of this Referral Rejection","Please confirm",MessageButtons.YESNO,MessageIcon.QUESTION));
		
	}
	
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
    		if (form.getLocalContext().getIdUndoCancelProviderMessageBoxIsNotNull() &&
    				form.getLocalContext().getIdUndoCancelProviderMessageBox() == messageBoxId)
    			{
    				try
    				{
    					//WDEV-12088 - starts here
        				ReferralNoteVo referralNote = populateReferralNote();
        				String[] referralNoteErrors = referralNote.validate();
        				if(referralNoteErrors != null && referralNoteErrors.length > 0)
        				{
        					engine.showErrors(referralNoteErrors);
        					return;
        				}
        				//WDEV-12088 - ends here
        				
            			CatsReferralListVo vo = domain.getCatsReferral(new CatsReferralRefVo(((CatsReferralListManualAssemblyVo)form.dyngrdReferrals().getValue()).getCatsReferralId(), 0));
 		  				domain.undoProviderCancellation(vo, referralNote);
    				}
    				catch (StaleObjectException e)
    				{
    					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
    				}
    				catch (ForeignKeyViolationException e)
    				{
    					engine.showMessage(e.getMessage());
    				}
    				
    			}
    		else
    		{
    			if (form.getLocalContext().getIdUndoReferralRejectionMessageBoxIsNotNull() 
    					&& form.getLocalContext().getIdUndoReferralRejectionMessageBox() == messageBoxId)
    			{
    				try
        			{
           				CatsReferralListVo vo = domain.getCatsReferral(new CatsReferralRefVo(((CatsReferralListManualAssemblyVo)form.dyngrdReferrals().getValue()).getCatsReferralId(), 0));
           			 	domain.undoReferralRejection(vo);
        			}
        			catch (StaleObjectException e)
        			{
        				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
        			}
        			catch (ForeignKeyViolationException e)
        			{
        				engine.showMessage(e.getMessage());
        			}
    			}
    		}
   		open();
		}
		
	}

	//WDEV-12088
	private ReferralNoteVo populateReferralNote() 
	{
		ReferralNoteVo voNote = new ReferralNoteVo();
		
		voNote.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());//wdev-17849
		
		Object voMos = domain.getMosUser();
		if (voMos instanceof MemberOfStaffLiteVo)
			voNote.setRecordingUser((MemberOfStaffLiteVo) voMos);
		
		voNote.setRecordingDateTime(new DateTime());
		voNote.setNoteType(ReferralNoteType.NON_CLINICAL);	
		
		String note = "UNDO PROVIDER CANCELLATION";
		
		voNote.setNote(note);
		
		return voNote;
	}
}
