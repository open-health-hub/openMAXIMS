// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.clinicaloutcomedetails;

import java.util.ArrayList;

import ims.RefMan.forms.clinicaloutcomedetails.GenForm.GroupOutcomeEnumeration;
import ims.RefMan.vo.ClinicalOutcomeProcedureVo;
import ims.RefMan.vo.ClinicalOutcomeProcedureVoCollection;
import ims.RefMan.vo.ClinicalOutcomeVo;
import ims.RefMan.vo.lookups.ClinicalOutcomeContext;
import ims.RefMan.vo.lookups.ClinicalOutcomeContextCollection;
import ims.clinicaladmin.vo.ClinicalOutcomeConfigLiteVo;
import ims.clinicaladmin.vo.ClinicalOutcomeConfigLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Event Handlers
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		// Initialize form
		initialize();
		// Refresh data
		open();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onRadioButtonGroupOutcomeValueChanged() throws PresentationLogicException
	{
		form.cmbOutcome().clear();
		
		// Clear category combo box if 'Speciality' is selected
		if (GroupOutcomeEnumeration.rdoSpecialty.equals(form.GroupOutcome().getValue()))
		{
			form.cmbCategory().setValue(null);
			form.getLocalContext().setClinicalOutcomeCategoryConfig(null);
			setClinicalOutcomeConfig(domain.listClinicalOutcomeConfig(null, form.getGlobalContext().RefMan.getCatsReferral()));
		}
		
		// Update controls state
		updateControlsState();
	}
	

	@Override
	protected void onCmbCategoryValueChanged() throws PresentationLogicException
	{
		if (form.cmbCategory().getValue() != null)
		{
			form.getLocalContext().setClinicalOutcomeCategoryConfig(domain.getClinicalOutcomeCategoryConfig(form.cmbCategory().getValue()));
			setClinicalOutcomeConfig(domain.listClinicalOutcomeConfig(form.cmbCategory().getValue(), form.getGlobalContext().RefMan.getCatsReferral()));
		}
		else
		{
			form.getLocalContext().setClinicalOutcomeCategoryConfig(null);
			setClinicalOutcomeConfig(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onCmbOutcomeValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Close this dialog with OK if the save succeeds
		if (save())
			engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Close this dialog with CANCEL
		engine.close(DialogResult.CANCEL);
	}

	
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize form
	 * Will perform one-time only actions that must take place only once on this form
	 * and keep the result in local context variables if needed
	 */
	private void initialize()
	{
		// Clear local contexts
		form.getLocalContext().setClinicalOutcomeCategoryConfig(null);
		
		// Clear instance controls - this has to be done only once
		clearInstanceControls();
		
		// Set default values for Procedure combo box
		setDefaultProcedures(domain.listProcedures((form.getGlobalContext().RefMan.getClinicalOutcomeIsNotNull() && form.getGlobalContext().RefMan.getClinicalOutcome().getCatsReferralIsNotNull()) ? form.getGlobalContext().RefMan.getClinicalOutcome().getCatsReferral() : form.getGlobalContext().RefMan.getCatsReferral()));
		// Set default value for ClinicalOutcome
		form.GroupOutcome().setValue(GroupOutcomeEnumeration.rdoSpecialty);
		// Set default values for Clinical Outcome Configuration combo box
		setClinicalOutcomeConfig(domain.listClinicalOutcomeConfig(form.cmbCategory().getValue(), form.getGlobalContext().RefMan.getCatsReferral()));
		
		form.getLocalContext().setClinicalOutcomeContextWithNotMandatoryProcedure(domain.listClinicalOutcomeContextWithNotMandatoryProcedure());
	}

	/**
	 * Function used to refresh data on form 
	 * Will clear screen, populate screen with data and set the form to EDIT mode
	 * Will perform actions that must take place every time screen is refreshed 
	 */
	private void open()
	{
		// Populate instance controls with ClinicalOutcome record to edit
		// Or it will just clear them if we are creating a new one
		populateInstanceControls(form.getGlobalContext().RefMan.getClinicalOutcome());
		
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Function used to commit ClinicalOutcome instance to database
	 * Will populate ClinicalOutcome instance with on screen values, validated it,
	 * then will attempt to save it in database
	 */
	private boolean save()
	{
		try
		{
			// Get on screen values
			form.getGlobalContext().RefMan.setClinicalOutcome(populateDataFromInstanceControls(form.getGlobalContext().RefMan.getClinicalOutcome()));

			// Validate ClinicalOutcome instance
			String[] errors = validateUIRules(); 
			errors = form.getGlobalContext().RefMan.getClinicalOutcome().validate(errors);

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to commit to data base ClinicalOutcome instance
			form.getGlobalContext().RefMan.setClinicalOutcome(domain.saveClinicalOutcome(form.getGlobalContext().RefMan.getClinicalOutcome()));
			
			// Save succeeded
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			engine.close(DialogResult.CANCEL);
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * Function used to perform custom validation
	 */
	private String[] validateUIRules()
	{
		// Start with an empty error list
		ArrayList<String> errorList = new ArrayList<String>();
		
		ClinicalOutcomeContext coc=getClinicalOutcomeContext();
		
		if (!(coc != null && form.getLocalContext().getClinicalOutcomeContextWithNotMandatoryProcedureIsNotNull() && form.getLocalContext().getClinicalOutcomeContextWithNotMandatoryProcedure().contains(coc)))
		{
			// Check if selected outcome configuration requires a procedure needs to be linked and if one procedure is linked
			if (((form.getLocalContext().getClinicalOutcomeCategoryConfigIsNotNull()
					&& Boolean.TRUE.equals(form.getLocalContext().getClinicalOutcomeCategoryConfig().getRequiresProcedureLink()))
					|| form.cmbOutcome().getValue() != null && Boolean.TRUE.equals(form.cmbOutcome().getValue().getRequiresProcedureLink()))
					&& form.cmbProcedure().getValue() == null)

				errorList.add("Procedure is mandatory.");
		}
		// WDEV-16273 - added UI validation, however the field is not saved in the database. This is how the form was initially designed.
		if (form.cmbCategory().getValue() == null && form.cmbCategory().isEnabled())
			{
				errorList.add("Clinical Outcome Category is mandatory.");
			}
		// Move the errors from a list into a string array
		String[] errors = errorList.toArray(new String[errorList.size()]);
		
		// Return string array of errors
		return errors;
	}


	/**
	 * Function used to clear instance controls
	 */
	private void clearInstanceControls()
	{
		form.dteOutcome().setValue(null);
		form.cmbProcedure().setValue(null);
		form.cmbCategory().setValue(null);
		form.cmbOutcome().clear();
		form.chklistOptions().setValues(null);
		form.txtOutcomeComments().setValue(null);
		form.ccAuthoring().setValue(null);
	}
	
	/**
	 * Function used to update controls state
	 */
	public void updateControlsState()
	{
		// Visual update the procedure combo-box as required
		// If the Clinical Outcome Category is configured as having the procedure mandatory				- WDEV-12618
		// or if the Clinical Outcome configuration is configured as having the procedure mandatory		- WDEV-12485
		ClinicalOutcomeContext coc = getClinicalOutcomeContext();
		form.cmbProcedure().setRequired(!(coc!=null && form.getLocalContext().getClinicalOutcomeContextWithNotMandatoryProcedureIsNotNull()
				&& form.getLocalContext().getClinicalOutcomeContextWithNotMandatoryProcedure().contains(coc))&&
				
				((form.getLocalContext().getClinicalOutcomeCategoryConfigIsNotNull()
												&& Boolean.TRUE.equals(form.getLocalContext().getClinicalOutcomeCategoryConfig().getRequiresProcedureLink()))
										|| form.cmbOutcome().getValue() != null && Boolean.TRUE.equals(form.cmbOutcome().getValue().getRequiresProcedureLink())));
		
		form.cmbCategory().setEnabled(GroupOutcomeEnumeration.rdoCategory.equals(form.GroupOutcome().getValue()));
	}
	
	
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Data exchange function
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to bind IntraOperative records to Procedure combo box
	 */
	private void setDefaultProcedures(ClinicalOutcomeProcedureVoCollection listProcedures)
	{
		// Clear combo box
		form.cmbProcedure().clear();
		
		// If no IntraOperative records were passed then exit function
		if (listProcedures == null)
			return;
		
		// Add each IntraOperative record to combobox
		for (ClinicalOutcomeProcedureVo outcomeProcedure : listProcedures)
		{
			// Build display string
			StringBuilder displayString = new StringBuilder();
			displayString.append(outcomeProcedure.getProcedureDateIsNotNull() ? outcomeProcedure.getProcedureDate().toString() : "");
			displayString.append(" - ");
			displayString.append(outcomeProcedure.getProcedureIsNotNull() ? outcomeProcedure.getProcedure().getProcedureDescription() : "");
			displayString.append(" - ");
			displayString.append(outcomeProcedure.getSurgeonIsNotNull() ? outcomeProcedure.getSurgeon().toString() : "");
			
			// Add IntraOperative record to combobox
			form.cmbProcedure().newRow(outcomeProcedure, displayString.toString());
		}
		
		// If only one IntraOperative record was found default to it
		if (listProcedures.size() == 1)
			form.cmbProcedure().setValue(listProcedures.get(0));
	}

	
	/**
	 * Function used to bind ClinicalOutcomeConfig records to combo box
	 */
	private void setClinicalOutcomeConfig(ClinicalOutcomeConfigLiteVoCollection clinicalOutcomes)
	{
		// Keep current value
		ClinicalOutcomeConfigLiteVo currentValue = form.cmbOutcome().getValue();
		
		// Clear combo box
		form.cmbOutcome().clear();
		
		// If no ClinicalOutcomeConfig records were passed then exit the function
		if (clinicalOutcomes == null)
			return;
	
		// Add each ClinicalOutcomeConfig record to combobox
		for (ClinicalOutcomeConfigLiteVo outcome : clinicalOutcomes)
		{
			// Build display string
			StringBuilder displayString = new StringBuilder();
			displayString.append(outcome.getClinicalOutcome());
			
			// Add ClinicalOutcomeConfig
			form.cmbOutcome().newRow(outcome, displayString.toString());
		}
		
		// Attempt to reselect initial value
		form.cmbOutcome().setValue(currentValue);
		
		// If only one ClinicalOutcomeConfig record was found default to it
		if (clinicalOutcomes.size() == 1)
			form.cmbOutcome().setValue(clinicalOutcomes.get(0));
	}

	/**
	 * Function used to populate instance controls with values from ClinicalOutcome instance
	 */
	private void populateInstanceControls(ClinicalOutcomeVo clinicalOutcome)
	{
		// Do not clear the instance controls
		
		// If the ClinicalOutcome instance is null initialize authoring information custom control
		if (clinicalOutcome == null)
		{
			form.dteOutcome().setValue(new Date());
			form.ccAuthoring().initializeComponent();
			return;
		}
		
		form.dteOutcome().setValue(clinicalOutcome.getDate());

		// Attempt to set procedure
		form.cmbProcedure().setValue(clinicalOutcome.getProcedure());				// This might be problematic
		// If procedure could not be set to combo box
		// then add it to combo box items & reselect it
		if (form.cmbProcedure().getValue() == null && clinicalOutcome.getProcedureIsNotNull())
		{
			// Build display string
			StringBuilder displayString = new StringBuilder();
			displayString.append(clinicalOutcome.getProcedure().getProcedureDateIsNotNull() ? clinicalOutcome.getProcedure().getProcedureDate().toString() : "");
			displayString.append(" - ");
			displayString.append(clinicalOutcome.getProcedure().getProcedureIsNotNull() ? clinicalOutcome.getProcedure().getProcedure().getProcedureDescription() : "");
			displayString.append(" - ");
			displayString.append(clinicalOutcome.getProcedure().getSurgeonIsNotNull() ? clinicalOutcome.getProcedure().getSurgeon().toString() : "");
			
			form.cmbProcedure().newRow(clinicalOutcome.getProcedure(), displayString.toString());
			form.cmbProcedure().setValue(clinicalOutcome.getProcedure());
		}
		
		// Attempt to set outcome
		form.cmbOutcome().setValue(clinicalOutcome.getClinicalOutcome());			// This is extreemly problematic
		// If clinical outcome could not be set to combo box
		// then add it to combo box items & reselect it
		if (form.cmbOutcome().getValue() == null && clinicalOutcome.getClinicalOutcomeIsNotNull())
		{
			form.cmbOutcome().newRow(clinicalOutcome.getClinicalOutcome(), clinicalOutcome.getClinicalOutcome().getClinicalOutcome());
			form.cmbOutcome().setValue(clinicalOutcome.getClinicalOutcome());
		}
		
		ClinicalOutcomeContextCollection outcomeContext = null;
		if (clinicalOutcome.getClinicalOutcomeContextIsNotNull())
		{
			outcomeContext = new ClinicalOutcomeContextCollection();
			outcomeContext.add(clinicalOutcome.getClinicalOutcomeContext());
		}
		form.chklistOptions().setValues(outcomeContext);
		
		form.txtOutcomeComments().setValue(clinicalOutcome.getActionComments());
		form.ccAuthoring().setValue(clinicalOutcome.getAuthoringInformation());
	}

	/**
	 * Function used to retrieve ClinicalOutcome instance populated with on screen values 
	 */
	private ClinicalOutcomeVo populateDataFromInstanceControls(ClinicalOutcomeVo clinicalOutcome)
	{
		if (clinicalOutcome == null)
		{
			clinicalOutcome = new ClinicalOutcomeVo();
			clinicalOutcome.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		
		// Get values from instance controls into ClinicalOutcome instance
		clinicalOutcome.setAuthoringInformation(form.ccAuthoring().getValue());
		clinicalOutcome.setDate(form.dteOutcome().getValue());
		clinicalOutcome.setProcedure(form.cmbProcedure().getValue());
		clinicalOutcome.setClinicalOutcome(form.cmbOutcome().getValue());
		clinicalOutcome.setClinicalOutcomeContext(getClinicalOutcomeContext());
		clinicalOutcome.setActionComments(form.txtOutcomeComments().getValue());

		return clinicalOutcome;
	}

	private ClinicalOutcomeContext getClinicalOutcomeContext()
	{
		if (form.chklistOptions().getValues() == null || form.chklistOptions().getValues().size() == 0)
			return null;
		else if (form.chklistOptions().getValues().size() > 1)
			return null;
		else
			return form.chklistOptions().getValues().get(0);
			
	}

	@Override
	protected void onChklistOptionsValueChanged() throws PresentationLogicException
	{
		updateControlsState();
		
	}
}
