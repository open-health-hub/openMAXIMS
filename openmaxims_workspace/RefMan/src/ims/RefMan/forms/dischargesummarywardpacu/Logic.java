// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3530.15003)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.dischargesummarywardpacu;

import ims.RefMan.forms.dischargesummarywardpacu.GenForm.lyrContentLayer.tabDischargeDetailsContainer.grdAppointmentsRow;
import ims.RefMan.forms.dischargesummarywardpacu.GenForm.lyrContentLayer.tabNursingContainer.grdDressingAndAidsRow;
import ims.RefMan.forms.dischargesummarywardpacu.GenForm.lyrContentLayer.tabNursingContainer.grdMedicationsRow;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo;
import ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection;
import ims.RefMan.vo.DischargeSummaryPacuAndWardRefVo;
import ims.RefMan.vo.DischargeSummaryPacuAndWardVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.DressingAndAidsVo;
import ims.clinical.vo.DressingAndAidsVoCollection;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.PatientMedicationVo;
import ims.core.vo.PatientMedicationVoCollection;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Comparator;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int REPORT_DISCHARGE_SUMMARY = 1;
	private static final int REPORT_DISCHARGE_REPORT = 2;
	private static final int REPORT_PATIENT_PRESCRIPTION = 3;
	
	//-------------------------------------------------------------------------------------------------------------------------------------------
	//	EVENTS REGION
	//-------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.Medications) && DialogResult.OK.equals(result))
		{
			grdMedicationsRow row = form.lyrContent().tabNursing().grdMedications().getRowByValue(form.getGlobalContext().RefMan.getPatientMedication());
			
			if (row == null)
			{
				row = form.lyrContent().tabNursing().grdMedications().getRows().newRow();
			}
			
			setMedicationRow(row, form.getGlobalContext().RefMan.getPatientMedication());
			
			// Select the new medication / edited medication
			form.lyrContent().tabNursing().grdMedications().setValue(form.getGlobalContext().RefMan.getPatientMedication());
		}
		else if (formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if (DialogResult.OK.equals(result))
			{
				Booking_AppointmentVo appointment = cancelAppointmentFinish();
				
				if (appointment == null)
				{
					appointmentsCleanUpAndRefresh();
					updateControlsState();
					return;
				}
				
				if (form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected()))
				{
					if (appointment.getTheatreBookingIsNotNull())
					{
						rebookTheatreAppointment(domain.getTheatreAppointment(appointment));
					}
					else
					{
						rebookAppointment(appointment);
					}
					
					// Keep these lines here (the appointment clean up must not occur if the appointment needs to be re booked)
					updateControlsState();
					return;
				}
				
				appointmentsCleanUpAndRefresh();
				updateControlsState();
				return;
			}
			else if (DialogResult.CANCEL.equals(result))
			{
				appointmentsCleanUpAndRefresh();
				updateControlsState();
				return;
			}
		}
		else if (formName.equals(form.getForms().OCRR.SelectAndOrderDialog) || formName.equals(form.getForms().RefMan.BookAppointmentDialog) || formName.equals(form.getForms().RefMan.BookTheatreDialog) || formName.equals(form.getForms().RefMan.BookTheatreSlot)) //WDEV-15343
		{
			appointmentsCleanUpAndRefresh();
		}

		updateControlsState();
	}
	
	//WDEV-11899 - starts here
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getWarningBoxIdIsNotNull() && messageBoxId == form.getLocalContext().getWarningBoxId())
		{
			if(DialogResult.YES.equals(result))
			{
				if(save(Boolean.TRUE.equals(form.getLocalContext().getIsDischargeMode()), false))
					open();
			}
		}
		
		form.lyrContent().tabDischargeSummary().htmReportPreview().setHTML(form.getLocalContext().getDocumentURL());	
	}
	//WDEV-11899 - ends here

	@Override
	protected void onRecBrowserValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setDischargeSummaryPacuAndWard(domain.getDischargeSummaryWardAndPacu(form.recBrowser().getValue()));
		populateScreenFromInstance(form.getLocalContext().getDischargeSummaryPacuAndWard());
		
		updateControlsState();
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		// WDEV-11672 - Pass false to prevent from discharging, WDEV-11899
		if (save(false, true))
			open();
	}

	// WDEV-11672 - New button "Discharge" was added
	@Override 
	protected void onBtnDischargeClick() throws PresentationLogicException
	{
		// WDEV-11672 - Pass true to discharge the patient, WDEV-11899
		if (save(true, true))
			open();
	}

	@Override
	protected void onBtnBookAppointmentClick() throws PresentationLogicException
	{
		bookAppointment();
	}
	
	@Override
	protected void onBtnPrintDischargeReportClick() throws PresentationLogicException
	{
		printReport(REPORT_DISCHARGE_REPORT);
	}

	@Override
	protected void onBtnPrintDischargeSummaryClick() throws PresentationLogicException
	{
		printReport(REPORT_DISCHARGE_SUMMARY);
	}

	@Override
	protected void onBtnTTOPrintClick() throws PresentationLogicException
	{
		printReport(REPORT_PATIENT_PRESCRIPTION);
	}

	@Override
	protected void onGrdAppointmentsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdAppointmentsSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdDressingAndAidsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}
	
	@Override
	protected void onGrdDressingAndAidsSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdMedicationsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onGrdMedicationsSelectionCleared() throws PresentationLogicException
	{
		updateControlsState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_APPT:
				bookAppointment();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_THEATRE_APPT:
				bookTheatreAppointment();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_APPT:
				cancelAppointmentBegin();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_THEATRE_APPT:
				cancelTheatreAppointmentBegin();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_APPT:
				rebookAppointment(form.lyrContent().tabDischargeDetails().grdAppointments().getValue());
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_THEATRE_APPT:
				rebookTheatreAppointment(form.lyrContent().tabDischargeDetails().grdAppointments().getValue());
				break;
				
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.ORDER_INVESTIGATION:
				orderInvestigation();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.medicationsMenu.addMedication:
				addMedication();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.medicationsMenu.editMedication:
				editMedication();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.medicationsMenu.removeMedication:
				removeMedication();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.DischargeSummaryWardPacu.ADD:
				addDressingAndAids();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.DischargeSummaryWardPacu.REMOVE:
				removeDressingAndAids();
				break;
		}
		
		updateControlsState();
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Form controls functions region
	//-----------------------------------------------------------------------------------------------------------------------------------------

	public void clearInstanceControls()
	{
		// Clear discharge details tab
		form.lyrContent().tabDischargeDetails().dteDischargeDate().setValue(null);
		form.lyrContent().tabDischargeDetails().cmbDischargeType().setValue(null);
		form.lyrContent().tabNursing().grdMedications().getRows().clear();
		form.lyrContent().tabNursing().txtProblemsNeeds().setValue(null);
		form.lyrContent().tabNursing().txtAdditionalComments().setValue(null);
		form.lyrContent().tabDischargeDetails().cmbFollowUpType().setValue(null);
		form.lyrContent().tabNursing().txtFurtherManagementInstructions().setValue(null);
		//form.lyrContent().tabDischargeDetails().grdAppointments().getRows().clear();
		
		// Clear nursing tab
		form.lyrContent().tabNursing().grdDressingAndAids().getRows().clear();
		
		// Clear discharge summary tab
	}
	
	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(true);
			// WDEV-11672
			form.btnNew().setEnabled(form.getLocalContext().getInpatientIsNotNull()						// "New" button is enabled only if there is an InpatientEpisode
					&& Boolean.FALSE.equals(form.getLocalContext().getRecordAwaitingDischarge()));		// and there is no record awaiting discharge - do we need this condition? only one inpatient episode per patient
			
			form.btnEdit().setEnabled(form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull()					// "Edit" button is only enabled if a selection is made
						&& (Boolean.TRUE.equals(form.getLocalContext().getDischargeSummaryPacuAndWard().getIsCurrent())	// & WDEV-12134 - selected record is the latest discharge
						&& !Boolean.TRUE.equals(form.getLocalContext().getHasInpatient())								// & no InpatientEpisodes exists
						|| !form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull()));	// & selected record has no discharge

			form.btnEdit().setVisible(true);
			
			form.btnClose().setVisible(form.getForms().RefMan.DischargeSummaryWardPacuDialogAlias.equals(engine.getFormName()));
			
			//wdev-11874
			form.lyrContent().tabDischargeSummary().btnPrintDischargeReport().setVisible(engine.hasRight(AppRight.CAN_PRINT_DISCHARGE_FROM_WARD_PACU_SCREEN));
			form.lyrContent().tabDischargeSummary().btnPrintDischargeReport().setEnabled(engine.hasRight(AppRight.CAN_PRINT_DISCHARGE_FROM_WARD_PACU_SCREEN));
			//wdev-11874
		}
		else // WDEV-11672 (FormMode is EDIT)
		{
			//wdev-11969
			form.lyrContent().tabDischargeSummary().btnPrintDischargeReport().setVisible(engine.hasRight(AppRight.CAN_PRINT_DISCHARGE_FROM_WARD_PACU_SCREEN));
			//------
			form.btnDischarge().setEnabled(true);
			form.btnDischarge().setVisible(!form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull()		// Discharge button should be visible only for new records
					|| !form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull());	// or the current record was not discharge yet
		}
		
		form.lyrContent().tabDischargeDetails().btnBookAppointment().setEnabled(!isLinkedICPCompleted() && Boolean.TRUE.equals(form.getLocalContext().getisReferralAccepted()));
		
		updateContextMenuState();
	}
	
	private void updateContextMenuState()
	{
		// Medication grid context menu options
		form.getContextMenus().RefMan.getmedicationsMenuaddMedicationItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().RefMan.getmedicationsMenueditMedicationItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (form.lyrContent().tabNursing().grdMedications().getValue() != null));
		form.getContextMenus().RefMan.getmedicationsMenuremoveMedicationItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (form.lyrContent().tabNursing().grdMedications().getValue() != null));

		// Dressing and Aids grid context menu options
		form.getContextMenus().RefMan.getDischargeSummaryWardPacuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().RefMan.getDischargeSummaryWardPacuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && (form.lyrContent().tabNursing().grdDressingAndAids().getValue() != null));
		
		// Booking Appointments context menu options
		ReferralAppointmentDetailsBookingAppointmentVo booking = form.lyrContent().tabDischargeDetails().grdAppointments().getValue();

		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_APPTItem().setVisible(!isLinkedICPCompleted() && Boolean.TRUE.equals(form.getLocalContext().getisReferralAccepted()));
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setVisible(!isLinkedICPCompleted() && Boolean.TRUE.equals(form.getLocalContext().getisReferralAccepted()) && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_APPTItem().setVisible(booking != null && !booking.getTheatreBookingIsNotNull() && Status_Reason.BOOKED.equals(booking.getApptStatus()));
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem().setVisible(booking != null && booking.getTheatreBookingIsNotNull() && Status_Reason.BOOKED.equals(booking.getApptStatus()));
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_APPTItem().setVisible(booking != null && !isLinkedICPCompleted() && !booking.getTheatreBookingIsNotNull() && form.getLocalContext().getisReferralAccepted() && Status_Reason.BOOKED.equals(booking.getApptStatus()) && Boolean.TRUE.equals(booking.getRequiresRebook()));
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem().setVisible(booking != null && !isLinkedICPCompleted() &&  booking.getTheatreBookingIsNotNull() && form.getLocalContext().getisReferralAccepted() && Status_Reason.BOOKED.equals(booking.getApptStatus()) && Boolean.TRUE.equals(booking.getRequiresRebook()));
		
		// form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem().setVisible(booking != null && Status_Reason.BOOKED.equals(booking.getApptStatus()) && ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue());
	}

	public String[] validateUIRules()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();
		
		if (form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue() != null && form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue().isGreaterThan(new Date()))
		{
			listOfErrors.add("Discharge Date can not be set into the future.");
		}
		
		// Check for edited records that have a dischargeEpisode - for these we need to check the discharge date against previously admission date
		// not the current admission date.
		if (form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull()
				&& form.getLocalContext().getDischargeSummaryPacuAndWard().getID_DischargeSummaryPacuAndWardIsNotNull()
				&& form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull())
		{
			// Check discharge date against previously used admission date, not the current one
			if (form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue() != null
				&& form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue().isLessThan(domain.getCurrentAddmissionDate(form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisode())))
			{
				listOfErrors.add("Discharge Date can not be set before date of admission.");
			}
		}
		else if (form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue() != null && form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue().isLessThan(domain.getAdmissionDate(form.getGlobalContext().RefMan.getCatsReferral())))
		{
			listOfErrors.add("Discharge Date can not be set before date of admission.");
		}
		
		if (listOfErrors.size() == 0)
			return null;
		
		String[] errors = new String[listOfErrors.size()];
		
		for (int i = 0; i < listOfErrors.size(); i++)
		{
			errors[i] = listOfErrors.get(i);
		}
		
		return errors;
	}

	//---------------------------------------------------------------------------------------------------------------------------------------------
	// Form logic functions region
	//---------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialise the form - set initial values to local context variables, call other initialization functions
	 */
	public void initialize() throws FormOpenException
	{
		try
		{
			// Set local context to default values
			form.getLocalContext().setDischargeSummaryCollection(null);
			form.getLocalContext().setDischargeSummaryPacuAndWard(null);
			form.getLocalContext().setAppointmentToCancel(null);
			form.getLocalContext().setisReferralAccepted(domain.getReferralAccepted(form.getGlobalContext().RefMan.getCatsReferral()));
			
			//wdev-11899
			form.getLocalContext().setIsDischargeMode(null);
			form.getLocalContext().setWarningBoxId(null);
			form.getLocalContext().setLinkedICPCompleted(domain.isLinkedICPCompleted(form.getGlobalContext().RefMan.getCatsReferral()));
		}
		catch (DomainInterfaceException e)
		{
			throw new FormOpenException(e.getMessage());
		}
		
		initializeContextMenus();
	}
	
	private boolean isLinkedICPCompleted()
	{
		return form.getLocalContext().getLinkedICPCompletedIsNotNull() && form.getLocalContext().getLinkedICPCompleted().booleanValue();
	}
	
	/**
	 * Function used to initialise the context menus on this form - it will only enable all the options
	 * Use updateContextMenuState() function to dynamically control the visibility of context menu options
	 */
	private void initializeContextMenus()
	{
		// Grid 'Medication' context menu items
		form.getContextMenus().RefMan.getmedicationsMenuaddMedicationItem().setEnabled(true);
		form.getContextMenus().RefMan.getmedicationsMenuremoveMedicationItem().setEnabled(true);
		form.getContextMenus().RefMan.getmedicationsMenueditMedicationItem().setEnabled(true);
		
		// Grid 'Appointments' context menu items
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_APPTItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_APPTItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_APPTItem().setEnabled(true);
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem().setEnabled(true);

		// Grid 'Dressing and Aids' context menu items
		form.getContextMenus().RefMan.getDischargeSummaryWardPacuADDItem().setEnabled(true);
		form.getContextMenus().RefMan.getDischargeSummaryWardPacuREMOVEItem().setEnabled(true);
	}

	/**
	 * Function used to refresh the screen - it will retrieve data, fill local context, display it on screen, set form mode to VIEW
	 * Setting the form mode to VIEW will trigger onFormModeChanged() event -> that calls updateControlsState() function, no need to call it
	 * in open() function 
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Retrieve selection
		form.getLocalContext().setDischargeSummaryPacuAndWard(domain.getDischargeSummaryWardAndPacu(form.getLocalContext().getDischargeSummaryPacuAndWard()));

		// Based on CatsReferral provided (mandatory global context) retrieve from domain the discharge summary collection
		form.getLocalContext().setDischargeSummaryCollection(domain.listDischargeSummaryWardAndPacu(form.getGlobalContext().RefMan.getCatsReferral()));
		
		// Populate the record browser with the discharge summary collection
		populateRecordBrowser(form.getLocalContext().getDischargeSummaryCollection());
		
		// Populate the form with the appointments (retrieved from domain based on CatsReferral)
		populateAppointments(domain.getAppointments(form.getGlobalContext().RefMan.getCatsReferral()));

		// Populate the instance controls with selected discharge summary (null, first in collection, or last edited in form)
		populateScreenFromInstance(form.getLocalContext().getDischargeSummaryPacuAndWard());
		// WDEV-11672 Reselect instance in browser
		form.recBrowser().setValue(form.getLocalContext().getDischargeSummaryPacuAndWard());
		
		// Get the in patient episode record (if any) for this referral
		form.getLocalContext().setInpatient(domain.getInpatientEpisode(form.getGlobalContext().RefMan.getCatsReferral()));
		// If current referral doesn't have an inpatient check if an inpatient for patient exits
		if (form.getLocalContext().getInpatientIsNotNull())
			form.getLocalContext().setHasInpatient(Boolean.TRUE);
		else
			form.getLocalContext().setHasInpatient(domain.hasInapatientEpisode(form.getGlobalContext().Core.getPatientShort()));

		// Set form mode to VIEW
		form.setMode(FormMode.VIEW);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		form.getLocalContext().setDischargeSummaryPacuAndWard(null);
		form.lyrContent().tabDischargeDetails().ccAuthoringInformation().initializeComponent();

		form.setMode(FormMode.EDIT);
	}
	
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	
	// WDEV-11672 - new parameter added
	// WDEV-11899 - check parameter added
	public boolean save(boolean discharge, boolean check) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setDischargeSummaryPacuAndWard(populateInstanceFromScreen(form.getLocalContext().getDischargeSummaryPacuAndWard()));

		String [] errors = validateUIRules();
		errors = form.getLocalContext().getDischargeSummaryPacuAndWard().validate(errors);
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		//WDEV-11899 - starts here
		if(check && new Date().isGreaterThan(form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeDate()))
		{
			form.getLocalContext().setIsDischargeMode(discharge);
			form.getLocalContext().setWarningBoxId(engine.showMessage("Discharge Date Entered is a date in the past. Do you wish to proceed with the save?", "Warning", MessageButtons.YESNO, MessageIcon.WARNING));
			form.lyrContent().tabDischargeSummary().htmReportPreview().setHTML("");			
			
			return false;
		}
		//WDEV-11899 - ends here
		
		try
		{
			CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

			if (form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull() || discharge)
			{
				voCats.setDischargeDate(form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue());
				voCats.setRequiresDischargeRep(Boolean.TRUE);
			}
			voCats.setProcedureForPostOpReview(domain.getPerformedProcedureFromLastIntraOperativeRecordForCareContext(voCats.getCareContext()));
			
			String [] errors2 = voCats.validate();
			
			if (errors2 != null && errors2.length > 0)
			{
				engine.showErrors(errors2);
				return false;
			}

			// CORRECTION only save a discharge if it's null in discharge summary (else there could be an edit)
			// WDEV-11672 - Added a new condition - discharge only if "Discharge" button is pressed
			if ((form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull()) 
				|| (!form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull() && form.getLocalContext().getInpatientIsNotNull() && discharge))
			{
				DischargedEpisodeVo dischargeEpisode = null;
				if (!form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisodeIsNotNull())
				{
					dischargeEpisode = new DischargedEpisodeVo();
					dischargeEpisode.setAdmissionType(form.getLocalContext().getInpatient().getAdmissionType());
				}
				else
					dischargeEpisode = domain.getDischargedEpisode(form.getLocalContext().getDischargeSummaryPacuAndWard().getDischargeEpisode());
					
				dischargeEpisode.setDischargeDateTime(new DateTime(form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue(), new Time()));
				
				String[] dischargeErrors = dischargeEpisode.validate();
				String[] validateErrors = form.getLocalContext().getDischargeSummaryPacuAndWard().validate(dischargeErrors);
				
				if (validateErrors != null && validateErrors.length > 0)
				{
					engine.showErrors(validateErrors);
					return false;
				}

				// WDEV-12134 - pass the current editable record
				form.getLocalContext().setDischargeSummaryPacuAndWard(domain.saveAndDischarge(form.getLocalContext().getDischargeSummaryPacuAndWard(), form.getLocalContext().getCurrentEditableRecord(), voCats, dischargeEpisode,form.getLocalContext().getInpatient()));
				return true;
			}
			
			// WDEV-12134 - pass the current editable record
			// ALWAYS set the referral as needing to reprint the discharge report (and EDIT could mean data was modified)
			form.getLocalContext().setDischargeSummaryPacuAndWard(domain.saveDischargeSummaryWardAndPacuPlusCatsReferral(form.getLocalContext().getDischargeSummaryPacuAndWard(), form.getLocalContext().getCurrentEditableRecord(), voCats,form.getLocalContext().getInpatient()));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	

	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Data Exchange region
	//-----------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate the record browser with discharge summary collection
	 * @param dischargeSummaryPacuAndWardLiteVoCollection - provided discharge summary collection; pass null to clear the record browser
	 */
	private void populateRecordBrowser(DischargeSummaryPacuAndWardLiteVoCollection dischargeSummaryPacuAndWardLiteVoCollection)
	{
		// Clear the record browser
		form.recBrowser().clear();
		
		// WDEV-12134 - Clear current editable record 
		form.getLocalContext().setCurrentEditableRecord(null);
		// WDEV-11672 Set local context for existing recored awaiting discharge episode to false
		form.getLocalContext().setRecordAwaitingDischarge(Boolean.FALSE);
		
		// If the collection passed is null - clear the selected local context and break the execution  
		if (dischargeSummaryPacuAndWardLiteVoCollection == null)
		{
			form.getLocalContext().setDischargeSummaryPacuAndWard(null);
			return;
		}
		
		// Fill the record browser with the discharge summaries from the collection
		for (int i = 0; i < dischargeSummaryPacuAndWardLiteVoCollection.size(); i++)
		{
			DischargeSummaryPacuAndWardLiteVo dischargeSummary = dischargeSummaryPacuAndWardLiteVoCollection.get(i);
			
			// If the discharge summary is null - skip to next discharge summary
			if (dischargeSummary == null)
				continue;
			
			// Build text to display on record browser for discharge summary
			StringBuffer text = new StringBuffer();
			text.append(dischargeSummary.getDischargeDateIsNotNull() ? dischargeSummary.getDischargeDate() : "");
			text.append(" - ");
			text.append(dischargeSummary.getDischargeTypeIsNotNull() ? dischargeSummary.getDischargeType() : "");
			text.append(" - ");
			text.append(dischargeSummary.getAuthoringInformationIsNotNull() && dischargeSummary.getAuthoringInformation().getAuthoringHcpIsNotNull() ? dischargeSummary.getAuthoringInformation().getAuthoringHcp().getName().toString() : "");
			
			// Test if discharge record is from current referral
			boolean isFromCurrentReferral = dischargeSummary.getCatsReferral().getID_CatsReferral().intValue() == form.getGlobalContext().RefMan.getCatsReferral().getID_CatsReferral().intValue();

			// WDEV-11672 If the discharge summary doesn't have a discharge episode linked - set the local context for existing record awaiting discharge to true
			if (!dischargeSummary.getDischargeEpisodeIsNotNull() && isFromCurrentReferral)
			{
				form.getLocalContext().setRecordAwaitingDischarge(Boolean.TRUE);

				if (!form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull())
					form.getLocalContext().setDischargeSummaryPacuAndWard(domain.getDischargeSummaryWardAndPacu(dischargeSummary));
			}
			
			// WDEV-12134 - Retain the current record
			if (Boolean.TRUE.equals(dischargeSummary.getIsCurrent()))
			{
				form.getLocalContext().setCurrentEditableRecord(dischargeSummary);
			}
			
			// Add the discharge summary to record browser
			if (isFromCurrentReferral)
				form.recBrowser().newRow(dischargeSummary, text.toString());
		}


		// WDEV-11672
		if (!form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull())
		{
			if (form.recBrowser().getValues().size() > 0 && form.recBrowser().getValues().get(0) instanceof DischargeSummaryPacuAndWardLiteVo)
			{
    			DischargeSummaryPacuAndWardVo latestDischarge = domain.getDischargeSummaryWardAndPacu((DischargeSummaryPacuAndWardRefVo) form.recBrowser().getValues().get(0));
    			form.getLocalContext().setDischargeSummaryPacuAndWard(latestDischarge);
			}
		}
	}

	/**
	 * Function used to populate the instance controls with discharge summary VO
	 * @param dischargeSummary - provided discharge summary VO; pass null to clear the instance controls
	 */
	private void populateScreenFromInstance(DischargeSummaryPacuAndWardVo dischargeSummary)
	{
		// Clear instance controls
		clearInstanceControls();
		
		if (dischargeSummary == null)
			return;
		
		form.lyrContent().tabDischargeDetails().ccAuthoringInformation().setValue(dischargeSummary.getAuthoringInformation());
		form.lyrContent().tabDischargeDetails().dteDischargeDate().setValue(dischargeSummary.getDischargeDate());
		form.lyrContent().tabDischargeDetails().cmbDischargeType().setValue(dischargeSummary.getDischargeType());
		
		// Set medications
		setMedications(dischargeSummary.getMedicationOnDischarge());
		
		form.lyrContent().tabNursing().txtProblemsNeeds().setValue(dischargeSummary.getProblemsAndNeeds());
		form.lyrContent().tabNursing().txtAdditionalComments().setValue(dischargeSummary.getAdditionalComments());
		form.lyrContent().tabDischargeDetails().cmbFollowUpType().setValue(dischargeSummary.getFollowupType());
		form.lyrContent().tabNursing().txtFurtherManagementInstructions().setValue(dischargeSummary.getFurtherManagementInstructions());
		
		// Set Dressing and Aids
		setDressingAndAids(dischargeSummary.getDressingsAndAids());
	}

	@SuppressWarnings("unused")
	private DischargeSummaryPacuAndWardVo populateInstanceFromScreen()
	{
		return populateInstanceFromScreen(null);
	}

	private DischargeSummaryPacuAndWardVo populateInstanceFromScreen(DischargeSummaryPacuAndWardVo dischargeSummaryPacuAndWard)
	{
		if (dischargeSummaryPacuAndWard == null)
		{
			dischargeSummaryPacuAndWard = new DischargeSummaryPacuAndWardVo();
			dischargeSummaryPacuAndWard.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			// WDEV-12134 - Mark the new record as current
			dischargeSummaryPacuAndWard.setIsCurrent(Boolean.TRUE);
		}
		
		dischargeSummaryPacuAndWard.setAuthoringInformation(form.lyrContent().tabDischargeDetails().ccAuthoringInformation().getValue());
		dischargeSummaryPacuAndWard.setDischargeDate(form.lyrContent().tabDischargeDetails().dteDischargeDate().getValue());
		dischargeSummaryPacuAndWard.setDischargeType(form.lyrContent().tabDischargeDetails().cmbDischargeType().getValue());
		
		dischargeSummaryPacuAndWard.setFollowupType(form.lyrContent().tabDischargeDetails().cmbFollowUpType().getValue());
		
		// Get Medications
		dischargeSummaryPacuAndWard.setMedicationOnDischarge(getMedications(dischargeSummaryPacuAndWard.getMedicationOnDischarge()));

		dischargeSummaryPacuAndWard.setProblemsAndNeeds(form.lyrContent().tabNursing().txtProblemsNeeds().getValue());
		dischargeSummaryPacuAndWard.setAdditionalComments(form.lyrContent().tabNursing().txtAdditionalComments().getValue());
		dischargeSummaryPacuAndWard.setFurtherManagementInstructions(form.lyrContent().tabNursing().txtFurtherManagementInstructions().getValue());
		
		// Get Dressing and Aids
		dischargeSummaryPacuAndWard.setDressingsAndAids(getDressingAndAids(dischargeSummaryPacuAndWard.getDressingsAndAids()));
		
		// Get Diagnosis
		dischargeSummaryPacuAndWard.setDiagnosis(domain.getDiagnosis(domain.getCareContextRef(form.getGlobalContext().RefMan.getCatsReferral())));
		
		return dischargeSummaryPacuAndWard;
	}

	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Appointments region
	//-----------------------------------------------------------------------------------------------------------------------------------------
	
	private void populateAppointments(ReferralAppointmentDetailsBookingAppointmentVoCollection appointments)
	{
		form.lyrContent().tabDischargeDetails().grdAppointments().getRows().clear();
		
		if (appointments == null)
			return;
		
		for (int i = 0; i < appointments.size(); i++)
		{
			ReferralAppointmentDetailsBookingAppointmentVo appointment = appointments.get(i);
			
			if (appointment == null)
				continue;
			
			setAppointmentRow(form.lyrContent().tabDischargeDetails().grdAppointments().getRows().newRow(), appointment);
		}
	}

	private void setAppointmentRow(grdAppointmentsRow row, ReferralAppointmentDetailsBookingAppointmentVo appointment)
	{
		// This should not occur
		if (appointment == null)
			return;
		
		if (appointment.getTheatreBookingIsNotNull())
		{
			// WDEV-11954
			row.setcolDateTime(appointment.getAppointmentDate() == null ? "" : (appointment.getAppointmentDate().toString() + (appointment.getTheatreBooking().getTCITimeIsNotNull() ? (" " + appointment.getTheatreBooking().getTCITime().toString()) : 
						(appointment.getTheatreSlotIsNotNull() && appointment.getTheatreSlot().getToComeInTimeIsNotNull() ? " " + appointment.getTheatreSlot().getToComeInTime().toString() : ""))));
		}
		else
		{
			row.setcolDateTime(appointment.getAppointmentDate() == null ? "" : (appointment.getAppointmentDate().toString() + (appointment.getApptStartTime() == null ? "" : (" " + appointment.getApptStartTime().toString()))));
		}
		
		row.setcolService(appointment.getSession() == null ? "" : (appointment.getSession().getService() == null ? "" : appointment.getSession().getService().getServiceName()));
		row.setcolClinic(appointment.getSession() == null ? "" : appointment.getSession().getName());
		row.setcolStatus(appointment.getApptStatus());
		row.setValue(appointment);
	}
	
	private void bookAppointment()
	{
		engine.open(form.getForms().RefMan.BookAppointmentDialog);
	}

	private void bookTheatreAppointment()
	{
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().RefMan.BookTheatreDialog);
		else
			engine.open(form.getForms().RefMan.BookTheatreSlot);
	}

	private void cancelAppointmentBegin()
	{
		try
		{
			ReferralAppointmentDetailsBookingAppointmentVo appointment = form.lyrContent().tabDischargeDetails().grdAppointments().getValue();

			SessionServiceAndSlotActivityVo serviceAndActivityByAppt = domain.getServiceAndActivityByAppt(appointment);
			
			//wdev-11902
			CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getGlobalContext().RefMan.setCatsReferralStatus(voCats.getCurrentStatus());
			
			if (serviceAndActivityByAppt != null)
			{
				form.getLocalContext().setAppointmentToCancel(appointment);
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(appointment);
				form.getGlobalContext().Scheduling.setBookingActivity(serviceAndActivityByAppt.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(serviceAndActivityByAppt.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(appointment == null ? null : appointment.getSession());
				form.getGlobalContext().ChooseAndBook.setisCABAppt(appointment == null ? null : appointment.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
	}
	
	private Booking_AppointmentVo cancelAppointmentFinish()
	{
		try
		{
			Booking_AppointmentVo appointment = domain.getAppointmentFull(form.getLocalContext().getAppointmentToCancel());
			
			if (appointment == null)
				return null;
			
			if (form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				// Build status (Canceled) for appointment
				Appointment_StatusVo statusVo = new Appointment_StatusVo();
				
				statusVo.setApptDate(appointment.getAppointmentDate());
				
				if (appointment.getSessionSlotIsNotNull())
				{
					statusVo.setApptTime(appointment.getSessionSlot().getStartTm());
					statusVo.setStatusChangeDateTime(new DateTime());
					statusVo.setPriority(appointment.getSessionSlot().getPriority());
				}
				//WDEV-11887
				else if(appointment.getApptStartTimeIsNotNull())
				{
					statusVo.setApptTime(appointment.getApptStartTime());
					statusVo.setStatusChangeDateTime(new DateTime());
				}
				
				if (form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
				{
					statusVo.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
					statusVo.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
					statusVo.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
					statusVo.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
					statusVo.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				}
				
				// Set the current status
				appointment.setCurrentStatusRecord(statusVo);

				// Add status to appointment status history
				if (!appointment.getApptStatusHistoryIsNotNull())
				{
					appointment.setApptStatusHistory(new Appointment_StatusVoCollection());
				}
				
				appointment.getApptStatusHistory().add(statusVo);
				
				// Now set the DUPLICATE fields of status in BOOKING_APPOINT
				appointment.setApptStatus(Status_Reason.CANCELLED);
				appointment.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				appointment.setRequiresRebook(Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected()));
				
				if (appointment.getSessionSlotIsNotNull())
				{
					appointment.getSessionSlot().setStatus(Status_Reason.SLOTOPENED);
				}
				
				String[] errors = appointment.validate();
				
				if (errors != null && errors.length != 0)
				{
					engine.showErrors(errors);
					return null;
				}
				
				try
				{
					appointment = domain.cancelAppointment(appointment, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Discharge Summary Ward and Pacu");
					
					// WDEV-11987 - Mark CATS Referral as having cancelled appointments 
					domain.updateCatsReferralCancelStatus(form.getGlobalContext().RefMan.getCatsReferral());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					return null;
				}
			}
			
			return appointment;
		}
		catch (DomainInterfaceException e)
		{
			return null;
		}
	}

	private void cancelTheatreAppointmentBegin()
	{
		ReferralAppointmentDetailsBookingAppointmentVo appointment = form.lyrContent().tabDischargeDetails().grdAppointments().getValue();
		
		TheatreProcedureServiceAndConsultantLiteVo theatreServiceProcedureAndConsultant = domain.getTheatreServiceProcedureAndConsultant(appointment);
		
		if (theatreServiceProcedureAndConsultant != null)
		{
			//wdev-11902
			CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getGlobalContext().RefMan.setCatsReferralStatus(voCats.getCurrentStatus());

			form.getLocalContext().setAppointmentToCancel(appointment);
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(appointment);
			form.getGlobalContext().Scheduling.setTheatreService(theatreServiceProcedureAndConsultant.getService());
			form.getGlobalContext().Scheduling.setTheatreProcedure(theatreServiceProcedureAndConsultant.getProcedure());
			form.getGlobalContext().Scheduling.setTheatreConsultant(theatreServiceProcedureAndConsultant.getConsultant());
			
			engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
		}
		
	}

	private void rebookAppointment(Booking_AppointmentRefVo booking)
	{
		try
		{
			Booking_AppointmentVo appointment = domain.getAppointmentFull(booking);
			
			// Set global context necessary for rebooking
			form.getGlobalContext().Scheduling.setBookingAppointment(appointment);
			form.getGlobalContext().Scheduling.setBookingService(appointment == null ? null : (appointment.getSessionIsNotNull() ? appointment.getSession().getService() : null));
			form.getGlobalContext().Scheduling.setBookingActivity(appointment == null? null : appointment.getActivity());
			
			bookAppointment();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
	}

	private void rebookTheatreAppointment(Booking_AppointmentRefVo booking)
	{
		BookingAppointmentTheatreVo theatreAppointment = domain.getTheatreAppointment(booking);
		
		form.getGlobalContext().Scheduling.setTheatreAppointment(theatreAppointment);
		
		if (theatreAppointment != null && theatreAppointment.getSessionIsNotNull())
		{
			form.getGlobalContext().Scheduling.setTheatreType(theatreAppointment.getSession().getTheatreType());
		}
		
		TheatreProcedureServiceAndConsultantLiteVo theatreServiceProcedureAndConsultant = domain.getTheatreServiceProcedureAndConsultant(booking);
		
		if (theatreServiceProcedureAndConsultant != null)
		{
			form.getGlobalContext().Scheduling.setTheatreService(theatreServiceProcedureAndConsultant.getService());
			form.getGlobalContext().Scheduling.setTheatreProcedure(theatreServiceProcedureAndConsultant.getProcedure());
			form.getGlobalContext().Scheduling.setTheatreConsultant(theatreServiceProcedureAndConsultant.getConsultant());
			
			//WDEV-12918
			if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
				engine.open(form.getForms().RefMan.BookTheatreDialog);
			else
				engine.open(form.getForms().RefMan.BookTheatreSlot);
		}
	}

	private void orderInvestigation()
	{
		form.getGlobalContext().Rotherham.setAppointmentToLink(null);
		
		if (ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue())
		{
			ReferralAppointmentDetailsBookingAppointmentVo appointment = form.lyrContent().tabDischargeDetails().grdAppointments().getValue();
			
			if (appointment != null && Status_Reason.BOOKED.equals(appointment.getApptStatus()))
			{
				form.getGlobalContext().Rotherham.setAppointmentToLink(appointment);
			}
		}

		engine.open(form.getForms().OCRR.SelectAndOrderDialog);		
	}

	private void appointmentsCleanUpAndRefresh()
	{
		// Clean up code (for cancel for now)
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingSession(null);
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		
		form.getLocalContext().setAppointmentToCancel(null);

		populateAppointments(domain.getAppointments(form.getGlobalContext().RefMan.getCatsReferral()));
		
		return;
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Medications region
	//-----------------------------------------------------------------------------------------------------------------------------------------
	private void setMedications(PatientMedicationVoCollection patientMedicationVoCollection)
	{
		form.lyrContent().tabNursing().grdMedications().getRows().clear();
		
		if (patientMedicationVoCollection == null)
			return;
		patientMedicationVoCollection.sort(new MedicationComparator(SortOrder.ASCENDING));
		for (int i = 0; i < patientMedicationVoCollection.size(); i++)
		{
			PatientMedicationVo medication = patientMedicationVoCollection.get(i);

			if (medication == null)
				continue;
			
			setMedicationRow(form.lyrContent().tabNursing().grdMedications().getRows().newRow(), medication);
		}
	}
	public class MedicationComparator implements Comparator<PatientMedicationVo>
	{
		private int direction = 1;
		
		public MedicationComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public MedicationComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}

		public int compare(PatientMedicationVo medication1, PatientMedicationVo medication2)
		{
			if (medication1 != null && medication2 != null)
			{
				return medication1.getSysInfo().getCreationDateTime().compareTo(medication2.getSysInfo().getCreationDateTime()) * direction;
			}
			
			if (medication1 != null && medication2 == null)
			{
				return direction;
			}
			
			if (medication1 == null && medication2 != null)
			{
				return (-1) * direction;
			}
			
			return 0;
		}
	}


	private void setMedicationRow(grdMedicationsRow row, PatientMedicationVo medication)
	{
		// This should never occur
		if (medication == null)
			return;
		
		row.setcolPrescriptionDrug(medication.getOtherMedicationText());
		row.setcolDate(medication.getCommencedDate());
		row.setcolFrequency(medication.getFrequency());
		row.setcolNoOfDaysSupply(medication.getNoDaysSupply());
		
		row.setValue(medication);
	}

	private PatientMedicationVoCollection getMedications(PatientMedicationVoCollection patientMedicationVoCollection)
	{
		if (!hasMedication())
			return null;
		
		if (patientMedicationVoCollection == null)
		{
			patientMedicationVoCollection = new PatientMedicationVoCollection();
		}
		
		patientMedicationVoCollection.clear();
		
		for (int i = 0; i < form.lyrContent().tabNursing().grdMedications().getRows().size(); i++)
		{
			grdMedicationsRow row = form.lyrContent().tabNursing().grdMedications().getRows().get(i);
			
			if (row.getcolDate() == null && row.getcolFrequency() == null && row.getcolNoOfDaysSupply() == null && row.getcolPrescriptionDrug() == null)
				continue;
			
			row.getValue().setOtherMedicationText(row.getcolPrescriptionDrug());
			row.getValue().setCommencedDate(row.getcolDate());
			row.getValue().setFrequency(row.getcolFrequency());
			row.getValue().setNoDaysSupply(row.getcolNoOfDaysSupply());
			
			patientMedicationVoCollection.add(row.getValue());
		}
		
		return patientMedicationVoCollection;
	}

	private boolean hasMedication()
	{
		if (form.lyrContent().tabNursing().grdMedications().getRows().size() == 0)
			return false;
		
		for (int i = 0; i < form.lyrContent().tabNursing().grdMedications().getRows().size(); i++)
		{
			grdMedicationsRow row = form.lyrContent().tabNursing().grdMedications().getRows().get(i);
		
			if (row.getcolPrescriptionDrug() != null)
				return true;
			
			if (row.getcolDate() != null)
				return true;
			
			if (row.getcolFrequency() != null)
				return true;
			
			if (row.getcolNoOfDaysSupply() != null)
				return true;
		}
		
		return false;
	}
	
	private void addMedication()
	{
		form.getGlobalContext().RefMan.setPatientMedication(null);
		
		engine.open(form.getForms().RefMan.Medications);
	}

	private void removeMedication()
	{
		form.lyrContent().tabNursing().grdMedications().getRows().remove(form.lyrContent().tabNursing().grdMedications().getSelectedRowIndex());
	}
	

	private void editMedication()
	{
		form.getGlobalContext().RefMan.setPatientMedication(form.lyrContent().tabNursing().grdMedications().getValue());
		
		engine.open(form.getForms().RefMan.Medications);
	}


	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Dressing region
	//-----------------------------------------------------------------------------------------------------------------------------------------
	
	private void setDressingAndAids(DressingAndAidsVoCollection dressingsAndAids)
	{
		form.lyrContent().tabNursing().grdDressingAndAids().getRows().clear();
		
		if (dressingsAndAids == null)
			return;
		
		for (int i = 0; i < dressingsAndAids.size(); i++)
		{
			DressingAndAidsVo dressing = dressingsAndAids.get(i);
			
			if (dressing == null)
				continue;
			
			setDressingRow(form.lyrContent().tabNursing().grdDressingAndAids().getRows().newRow(), dressing);
		}
	}

	private void setDressingRow(grdDressingAndAidsRow row, DressingAndAidsVo dressing)
	{
		// This should never occur
		if (dressing == null)
			return;
	
		row.setcolDressingAid(dressing.getDressingsAndAids());
		row.setcolPeriod(dressing.getPeriodValue());
		row.setcolPeriodInterval(dressing.getPeriodInterval());

		row.setValue(dressing);
	}
	
	private DressingAndAidsVoCollection getDressingAndAids(DressingAndAidsVoCollection dressingsAndAids)
	{
		if (!hasDressingAndAids())
			return null;
		
		if (dressingsAndAids == null)
		{
			dressingsAndAids = new DressingAndAidsVoCollection();
		}
		
		dressingsAndAids.clear();
		
		for (int i = 0; i < form.lyrContent().tabNursing().grdDressingAndAids().getRows().size(); i++)
		{
			grdDressingAndAidsRow row = form.lyrContent().tabNursing().grdDressingAndAids().getRows().get(i);
			
			if (row.getcolDressingAid() == null && row.getcolPeriod() == null && row.getcolPeriod() == null)
				continue;
			
			row.getValue().setDressingsAndAids(row.getcolDressingAid());
			row.getValue().setPeriodValue(row.getcolPeriod());
			row.getValue().setPeriodInterval(row.getcolPeriodInterval());
			
			dressingsAndAids.add(row.getValue());
		}
		
		return dressingsAndAids;
	}

	private boolean hasDressingAndAids()
	{
		if (form.lyrContent().tabNursing().grdDressingAndAids().getRows().size() == 0)
			return false;
		
		for (int i = 0; i < form.lyrContent().tabNursing().grdDressingAndAids().getRows().size(); i++)
		{
			grdDressingAndAidsRow row = form.lyrContent().tabNursing().grdDressingAndAids().getRows().get(i);
			
			if (row.getcolDressingAid() != null)
				return true;
			
			if (row.getcolPeriod() != null)
				return true;
			
			if (row.getcolPeriodInterval() != null)
				return true;
		}
		
		return false;
	}

	private void addDressingAndAids()
	{
		grdDressingAndAidsRow row = form.lyrContent().tabNursing().grdDressingAndAids().getRows().newRow();
		row.setValue(new DressingAndAidsVo());
	}

	private void removeDressingAndAids()
	{
		form.lyrContent().tabNursing().grdDressingAndAids().getRows().remove(form.lyrContent().tabNursing().grdDressingAndAids().getSelectedRowIndex());
	}

	//-----------------------------------------------------------------------------------------------------------------------------------------
	// Report region
	//-----------------------------------------------------------------------------------------------------------------------------------------

	private void printReport(int reportType)
	{
		// Check mandatory seed
		if (!form.getLocalContext().getDischargeSummaryPacuAndWardIsNotNull())
		{
			engine.showMessage("A discharge summary must be selected to view report.");
			return;
		}
		
		// Build report
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlPdfUploadServer = ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		
		if (urlPdfUploadServer == "")
		{
			engine.showMessage("PDF_UPLOAD_URL flag need to be set");
			return;
		}
		
		String fileName = generateName() + ".pdf";
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		String documentName = null;
		DocumentCategory documentCategory = null;
		Integer reportID = 174;

		switch (reportType)
		{
			case REPORT_DISCHARGE_REPORT:
				documentName = "Discharge Report (Ward and PACU)";
				documentCategory = DocumentCategory.DISCHARGE_SUPPLEMENTARY;
				reportID = 174;
				break;
				
			case REPORT_DISCHARGE_SUMMARY:
				documentName = "Discharge Summary (Ward and PACU)";
				documentCategory = DocumentCategory.DISCHARGE_SUMMARY;
				reportID = 173;
				break;
				
			case REPORT_PATIENT_PRESCRIPTION:
				documentName = "Patient Prescription";
				documentCategory =  DocumentCategory.PRESCRIPTIONS;
				reportID = 193;
				break;
		}

		Object[] obj = domain.getSystemReportAndTemplate(new Integer(reportID));
		client.addSeed(new SeedValue("DischargeSummaryID", form.getLocalContext().getDischargeSummaryPacuAndWard().getID_DischargeSummaryPacuAndWard(), Integer.class));
		
		if (obj == null || obj.length < 2)
		{
			engine.showMessage("Could not get report and template!");
			return;
		}
		
		if (obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed");
			return;
		}
		
		String[] dischargeReport = domain.getSystemReportAndTemplate(reportID);
		
		if (dischargeReport == null)
		{
			engine.showMessage("No template was assigned to this dialog!");
			return;
		}
		
		
		
		try
		{
			String result = client.buildReportAsUrlInlineFrame((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
			
			byte[] buffer = client.buildReport((String) obj[0], (String) obj[1], urlReportServer, "PDF", "", 1);
			
			if (buffer == null || buffer.length == 0)
			{
				engine.showMessage("PDF file size is 0");
				return;
			}
			
			try
			{
				form.lyrContent().tabDischargeSummary().htmReportPreview().setHTML(result);
				engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), buffer, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
			}
			catch (Exception exception)
			{
				engine.showMessage(exception.getMessage());
			}
			
			saveReport(fileName, documentName, documentCategory);
			
			
			
			
			
		}
		catch (QueryBuilderClientException exception)
		{
			engine.showMessage(exception.getMessage());
		}
	}


	private boolean saveReport(String fileName, String documentName, DocumentCategory documentCategory)
	{
		PatientDocumentVo document = populatePatientDocument(populateServerDocument(fileName), documentName, documentCategory);

		String[] errors = document.validate();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveDocument(document, form.getGlobalContext().RefMan.getCatsReferral(), form.getLocalContext().getDischargeSummaryPacuAndWard().getIsCurrent());
			String url = "<IFRAME id=\"PostFrame\" name=\"PostFrame\" width=\"100%\" height=\"100%\" frameborder=0 src='" + ConfigFlag.GEN.FILE_SERVER_URL.getValue() + document.getServerDocument().getFileName() +  "'></IFRAME>";
			form.getLocalContext().setDocumentURL(url);			
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
	}

	private PatientDocumentVo populatePatientDocument(ServerDocumentVo serverDocument, String documentName, DocumentCategory documentCategory)
	{
		PatientDocumentVo document = new PatientDocumentVo();
		
		document.setPatient(domain.getPatientRef(form.getGlobalContext().RefMan.getCatsReferral()));
		document.setCareContext(domain.getCareContextRef(form.getGlobalContext().RefMan.getCatsReferral()));
		document.setEpisodeofCare(domain.getEpisodeOfCareRef(form.getGlobalContext().RefMan.getCatsReferral()));
		document.setReferral(null);
		
		document.setName(documentName);
		document.setServerDocument(serverDocument);
		document.setCreationType(DocumentCreationType.GENERATED);
		document.setCategory(documentCategory);
		
		document.setRecordingUser((MemberOfStaffRefVo) domain.getMosUser(engine.getLoggedInUser().getUsername()));
		document.setRecordingDateTime(new DateTime());
		document.setStatus(PreActiveActiveInactiveStatus.ACTIVE);

		return document;
	}

	private ServerDocumentVo populateServerDocument(String fileName)
	{
		DateTime date = new DateTime();
		
		int year = date.getDate().getYear();
		int month = date.getDate().getMonth();
		int day = date.getDate().getDay();

		String filePath = year + "/" + month + "/" + day + "/" + fileName;
		
		ServerDocumentVo document = new ServerDocumentVo();
		
		document.setFileName(filePath);
		document.setFileType(FileType.PDF);

		return document;
	}

	private String generateName()
	{
		  String str = "";
		  
		  try
		  {
			  // Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  // Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  // Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      // Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      // Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException ex)
		  {
		      ex.getMessage();
		  }
		  
		  return str;
	}
}
