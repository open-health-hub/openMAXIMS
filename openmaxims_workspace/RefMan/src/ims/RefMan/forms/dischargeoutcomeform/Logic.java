// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3467.22451)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.dischargeoutcomeform;

import ims.RefMan.vo.ConsultationOutcomeVo;
import ims.RefMan.vo.ConsultationOutcomeVoCollection;
import ims.RefMan.vo.lookups.ConsultationOutcomeType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DischargedEpisodeVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		form.setMode(FormMode.VIEW);
		open();
	}

	private void open() 
	{
		ConsultationOutcomeVoCollection voColl = domain.listAllConsultationOutcomesByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		showHideFollowUp(false);
		populateRecordBrowser(voColl);
		
		clearScreen();

		form.getLocalContext().setSelectedConsOutcome(form.recbrConsultationOutcome().getValue());
		
		form.btnEdit().setEnabled(false);
		if (form.getLocalContext().getSelectedConsOutcome() != null)
		{
			populateScreen(form.getLocalContext().getSelectedConsOutcome() );
			form.btnEdit().setEnabled(true);
			form.btnEdit().setVisible(true);
		}
	}
	
	private void populateRecordBrowser(ConsultationOutcomeVoCollection voColl) 
	{
		form.recbrConsultationOutcome().clear();
		
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			StringBuffer sb = new StringBuffer();
			sb.append(voColl.get(i).getDischargeDateIsNotNull() ? voColl.get(i).getDischargeDate().toString() : "");
			sb.append(" - ");
			sb.append(voColl.get(i).getDischargeTypeIsNotNull() ? voColl.get(i).getDischargeType().toString() : "");
			sb.append(" - ");
			sb.append(voColl.get(i).getAuthoringInformationIsNotNull() && voColl.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull() ? voColl.get(i).getAuthoringInformation().getAuthoringHcp().getName().toString() : "");
			
			form.recbrConsultationOutcome().newRow(voColl.get(i), sb.toString());
			if (i == 0)
				form.recbrConsultationOutcome().setValue(voColl.get(i));
		}
	}

	private void initialise() 
	{
		showHideFollowUp(false);
	}

	private void showHideFollowUp(boolean bShow) 
	{
		form.lblFOllowUp().setVisible(bShow);
		form.cmbFollowupType().setVisible(bShow);
		form.cmbFollowupType().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.txtCommenst().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.txtCommenst().setVisible(bShow);
		form.lblComments().setVisible(bShow);
	}
	@Override
	protected void onCmbDischTypeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		dischTypeComboChanged();
	}
	
	private void dischTypeComboChanged() 
	{
		showHideFollowUp(false);
		form.cmbFollowupType().setValue(null);
		form.txtCommenst().setValue(null);
		if (form.cmbDischType().getValue() != null && form.cmbDischType().getValue().equals(ConsultationOutcomeType.FOLLOW_UP))
			showHideFollowUp(true);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedConsOutcome(null);
		clearScreen();
		form.ccAuthoring().initializeComponent(HcpDisType.MEDICAL);
		dischTypeComboChanged();
	
		form.setMode(FormMode.EDIT);
	}
	private void clearScreen() 
	{
		form.ccAuthoring().setValue(null);
		form.dteDD().setValue(null);
		form.cmbDischType().setValue(null);
		form.cmbFollowupType().setValue(null);
		form.cmbDischMethod().setValue(null);
		form.txtCommenst().setValue(null);
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedConsOutcome(domain.getConsultationOutcome(form.getLocalContext().getSelectedConsOutcome()));
		form.setMode(FormMode.EDIT);
		dischTypeComboChanged();
		populateScreen(form.getLocalContext().getSelectedConsOutcome());
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.dteDD().getValue() == null)
		{
			engine.showMessage("Discharge Date is mandatory.");
			return;
		}
		Boolean bIP = Boolean.FALSE;
		InpatientEpisodeVo voIP = domain.getInpatientEpisode(form.getGlobalContext().Core.getPatientShort());
		if (voIP != null)
			bIP = Boolean.TRUE;
		
		DischargedEpisodeVo voDisc = new DischargedEpisodeVo();
		voDisc.setDischargeDateTime(new DateTime(form.dteDD().getValue(), new Time()));
		voDisc.setAdmissionType(voIP != null ? voIP.getAdmissionType() : null); 
			
		String[] errs = form.getGlobalContext().Core.getPatientShort().validate();
		if (errs != null)
		{
			engine.showErrors(errs);
		}
		errs = voDisc.validate();
		if (errs != null)
		{
			engine.showErrors(errs);
		}
		
		ConsultationOutcomeVo voConsOutcome = populateDataFromScreen();
			
		String[] strErr = voConsOutcome.validate();
		if (strErr != null)
		{
			engine.showErrors(strErr);
			return;
		}
		
		Boolean bFollow = Boolean.FALSE;
		if (form.cmbDischType().getValue() != null && form.cmbDischType().getValue().equals(ConsultationOutcomeType.FOLLOW_UP))
			bFollow = Boolean.TRUE;

		try 
		{
			voConsOutcome = domain.saveConsultationOutcome(voConsOutcome);

			if (bIP)
				domain.dischargePatient(form.getGlobalContext().Core.getPatientShort(), voDisc, bFollow);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		} 
		catch (ForeignKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
		}

		form.setMode(FormMode.VIEW);
		open();
	}
	
	private ConsultationOutcomeVo populateDataFromScreen() 
	{
		ConsultationOutcomeVo voCons = form.getLocalContext().getSelectedConsOutcome();
		
		if (voCons == null)
			voCons = new ConsultationOutcomeVo();
		
		voCons.setAuthoringInformation(form.ccAuthoring().getValue());
		voCons.setDischargeDate(form.dteDD().getValue());
		voCons.setDischargeType(form.cmbDischType().getValue());
		voCons.setFollowupType(form.cmbFollowupType().getValue());
		voCons.setDischargeMethod(form.cmbDischMethod().getValue());
		voCons.setFurtherManagement(form.txtCommenst().getValue());
		if (voCons.getCareContext() == null)
			voCons.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		if (voCons.getPatient() == null)
			voCons.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		return voCons;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	@Override
	protected void onRecbrConsultationOutcomeValueChanged() throws PresentationLogicException 
	{
		populateScreen(form.recbrConsultationOutcome().getValue());
		form.getLocalContext().setSelectedConsOutcome(form.recbrConsultationOutcome().getValue());
		form.btnEdit().setEnabled(true);
		form.btnEdit().setVisible(true);

	}

	private void populateScreen(ConsultationOutcomeVo voCO)
	{
		clearScreen();
		
		form.ccAuthoring().setValue(voCO.getAuthoringInformation());
		form.dteDD().setValue(voCO.getDischargeDate());
		form.cmbDischType().setValue(voCO.getDischargeType());
		showHideFollowUp(false);
		form.cmbFollowupType().setValue(null);
		if (voCO.getDischargeTypeIsNotNull() && voCO.getDischargeType().equals(ConsultationOutcomeType.FOLLOW_UP))
		{
			showHideFollowUp(true);
			form.cmbFollowupType().setValue(voCO.getFollowupType());
		}
		form.cmbDischMethod().setValue(voCO.getDischargeMethod());
		form.txtCommenst().setValue(voCO.getFurtherManagement());
	}

	@Override
	protected void onFormModeChanged() {
		// TODO Auto-generated method stub
		
	}
}
