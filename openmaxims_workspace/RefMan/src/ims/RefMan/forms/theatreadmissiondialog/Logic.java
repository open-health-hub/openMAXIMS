// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3454.29123)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.theatreadmissiondialog;

import ims.RefMan.forms.theatreadmissiondialog.GenForm.grdIdentifiersRow;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVo;
import ims.RefMan.vo.PatientElectiveListBedAdmissionVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.AdmissionType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PatIdTypeCollection;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-13307
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof InpatientEpisodeVo)
				form.getLocalContext().setInpatienEpisode((InpatientEpisodeVo) args[0]);
		}
		
		initialise();
		populateDemographicINfo();
		populateTheatreAndProcDetails();
		
		if(form.getLocalContext().getInpatienEpisode() == null)//WDEV-13307
			estimateDischargeDate();
		
		updateControlsState();//WDEV-13307
	}
	


	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
			PatientElectiveListBedAdmissionVo patientElectiveList = form.getLocalContext().getPatientElectiveList();
			PatientElectiveListBedAdmissionVoCollection differentPatientElectiveListForService = null;
			
			if (patientElectiveList != null)
			{
				differentPatientElectiveListForService = domain.getDifferentPatientElectiveListForService(form.getGlobalContext().Core.getPatientShort(), patientElectiveList, patientElectiveList.getElectiveList().getService());
				
				for (PatientElectiveListBedAdmissionVo patientElective : differentPatientElectiveListForService)
				{
					TCIOutcomeForPatientElectiveListVo outcome = new TCIOutcomeForPatientElectiveListVo();
					if (patientElective.getTCIDetails().getTCIDate().isLessThan(new ims.framework.utils.Date()))
						outcome.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
					else
						outcome.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
					outcome.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
					outcome.setStatusDateTime(new DateTime());
					outcome.setOutcomeReason(TCIStatusChangeReason.CANCELLEDBYREMOVALOFELECTIVELISTRECORD);
					
					patientElective.getTCIDetails().setCurrentOutcome(outcome);
					patientElective.getTCIDetails().getOutcomeHistory().add(outcome);
					patientElective.getTCIDetails().setIsActive(false);
				}
			}
			
			if (saveAdmission(patientElectiveList, differentPatientElectiveListForService))
				engine.close(DialogResult.OK);
		}
		else if (DialogResult.NO.equals(result))
		{
			if (saveAdmission(form.getLocalContext().getPatientElectiveList(), null))
				engine.close(DialogResult.OK);
		}
	}

	
	
	//WDEV-13307
	private void updateControlsState() 
	{
		form.qmbConsultant().setEnabled(form.getLocalContext().getInpatienEpisode() == null);
		form.dtimAdm().setEnabled(form.getLocalContext().getInpatienEpisode() == null);
	}

	private void estimateDischargeDate()
	{
		if (form.getGlobalContext().RefMan.getTheatreAdmitDetailsIsNotNull()
			&& form.getGlobalContext().RefMan.getTheatreAdmitDetails().getLOSIsNotNull())
			form.dteDisch().setValue(new DateTime().addDays(form.getGlobalContext().RefMan.getTheatreAdmitDetails().getLOS()).getDate());
	}

	private void populateTheatreAndProcDetails()
	{
		form.lblTCITime().setValue(form.getGlobalContext().RefMan.getTheatreAdmitDetails().getTCITime());
		form.lblTheatre().setValue(form.getGlobalContext().RefMan.getTheatreAdmitDetails().getTheatreText());
		form.txtProcedure().setValue(form.getGlobalContext().RefMan.getTheatreAdmitDetails().getProcedureText());
	}

	private void populateDemographicINfo() 
	{
		PatientShort pat = form.getGlobalContext().Core.getPatientShort();
		
		if (pat == null)
			throw new DomainRuntimeException("No Patient Supplied");

		if (pat.getNameIsNotNull())
		{
			form.lblSurname().setValue(pat.getName().getSurname());
			form.lblForename().setValue(pat.getName().getForename());
		}

		form.lblSex().setValue(pat.getSexIsNotNull() ? pat.getSex().toString() : "");
		form.lblDOB().setValue(pat.getDobIsNotNull() ? pat.getDob().toString() : "");

		GenForm.grdIdentifiersRow row;

		PatientIdCollection identifers = pat.getIdentifiers();
		if (identifers != null)
		{
			for (int i = 0; i < identifers.size(); i++)
			{
				ims.core.vo.PatientId id = identifers.get(i);
				row = form.grdIdentifiers().getRows().newRow();
				bindColType(row, false);
				row.getcolIdType().setValue(id.getType());
				row.setcolIdValue(id.getValue());
				row.setValue(id);
				if (id.getVerifiedIsNotNull() && !id.getVerified() && id.getType().equals(PatIdType.NHSN))
				{
					row.setBackColor(Color.Orange);
					row.setReadOnly(true);
				}
				if (id.getTypeIsNotNull() && id.getType().equals(PatIdType.NHSN) && !ConfigFlag.GEN.ALLOW_UPDATES_TO_NHS_NO.getValue())
					row.setReadOnly(true);

			}
		}
	}
	private void bindColType(grdIdentifiersRow row, boolean isNew)
	{
		row.getcolIdType().clear();
		PatIdTypeCollection collTypes = LookupHelper.getPatIdType(domain.getLookupService());
		for(int i=0;i<collTypes.size();i++)
		{
			if(ConfigFlag.DOM.HEARTS_REPLICATE_PATIENTS.getValue())
			{
				if(isNew)
				{
					if(collTypes.get(i).equals(PatIdType.HOSPNUM) || collTypes.get(i).equals(PatIdType.PKEY))
						continue;
				}
			}
			row.getcolIdType().newRow(collTypes.get(i), collTypes.get(i).getText());
		}
	}


	private void initialise() 
	{
		// WDEV-12293 - Get service for CatsReferral (but we need to pass the CareContext id as the CatsReferral is not available in context)
		// and default the speciality combo box to it
		
		populateWardCombo();
		
		// WDEV-18138 
		LocShortMappingsVo wardLocation = null;
		if (form.cmbWard().getValues().size() == 1)
			wardLocation = (LocShortMappingsVo) form.cmbWard().getValues().get(0);
		else if (form.cmbWard().getValues().size() > 1)
			wardLocation = domain.getBookingApptSessionLocation(form.getGlobalContext().RefMan.getTheatreBookingAppointment().getID_Booking_Appointment());
			
		if(form.getLocalContext().getInpatienEpisode() == null)//	WDEV-13307
		{
			Specialty specialty = domain.getReferralSpecialty(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
			form.cmbSpecialty().setValue(specialty);
		
			form.dtimAdm().setValue(new DateTime());
		
		
			HcpLiteVo hcpLiteVo = (HcpLiteVo) domain.getHcpLiteUser();
			if (hcpLiteVo != null
					&& hcpLiteVo.getHcpTypeIsNotNull() 
					&& hcpLiteVo.getHcpType().equals(HcpDisType.MEDICAL))
			{
				MedicLiteVo vo = new MedicLiteVo(hcpLiteVo.getID_Hcp(), hcpLiteVo.getVersion_Hcp());
				form.qmbConsultant().newRow( vo, hcpLiteVo.getName().toString());
				form.qmbConsultant().setValue(vo);
			}
			
			// WDEV-18138 
			if (wardLocation != null)
			{
				form.cmbWard().setValue(wardLocation);
			}
				
		}
		else//	WDEV-13307
		{
			form.dtimAdm().setValue(form.getLocalContext().getInpatienEpisode().getAdmissionDateTime());
			
			if(form.getLocalContext().getInpatienEpisode().getPasEvent() != null)
			{
				form.cmbSpecialty().setValue(form.getLocalContext().getInpatienEpisode().getPasEvent().getSpecialty());
				
				if(form.getLocalContext().getInpatienEpisode().getPasEvent().getConsultant() != null)
				{
					MedicLiteVo medic = new MedicLiteVo(form.getLocalContext().getInpatienEpisode().getPasEvent().getConsultant().getID_Hcp(), form.getLocalContext().getInpatienEpisode().getPasEvent().getConsultant().getVersion_Hcp());
					form.qmbConsultant().newRow(medic, form.getLocalContext().getInpatienEpisode().getPasEvent().getConsultant().getName().toString());
					form.qmbConsultant().setValue(medic);
				}
				
				form.cmbWard().setValue(new LocShortMappingsVo(form.getLocalContext().getInpatienEpisode().getPasEvent().getLocation().getID_Location(), form.getLocalContext().getInpatienEpisode().getPasEvent().getLocation().getVersion_Location()));
			}
			
			form.txtBedNo().setValue(form.getLocalContext().getInpatienEpisode().getBedNo());
			form.dteDisch().setValue(form.getLocalContext().getInpatienEpisode().getEstDischargeDate());
		}
		
		
	}

	private String[] validateUILogic()
	{
		ArrayList<String> errs = new ArrayList<String>();

		if (form.qmbConsultant().getValue() == null)
			errs.add("Admitting Consultant must be specified.");
		
		if (form.dtimAdm().getValue() == null)
			errs.add("Admission Date/Time must be specified.");
		else if (form.dtimAdm().getValue().isGreaterThan(new DateTime()))
			errs.add("Admission Date/Time cannot be in the future.");
		else if (form.dtimAdm().isEnabled() && form.getLocalContext().getTheatreBooking() != null && form.getLocalContext().getTheatreBooking().getAppointmentDate() != null && form.dtimAdm().getValue().getDate().isLessThan(form.getLocalContext().getTheatreBooking().getAppointmentDate().addDay(-5)))
			errs.add("A patient can only be admitted up to 5 days prior to their Theatre Appointment.");
		
		if (form.cmbSpecialty().getValue() == null)
			errs.add("Specialty must be specified.");
		
		if (form.cmbWard().getValue() == null)
			errs.add("Ward must be specified.");
		
		return errs.toArray(new String[errs.size()]);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().RefMan.getTheatreBookingAppointmentIsNotNull())
		{
			Booking_AppointmentVo voBooking = domain.getBookingAppt(form.getGlobalContext().RefMan.getTheatreBookingAppointment());
			form.getLocalContext().setTheatreBooking(voBooking); //WDEV-18008
			
			if(form.getLocalContext().getInpatienEpisode() == null)//WDEV-13307
			{
				if ( ! domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort())
					|| (voBooking.getApptStatusIsNotNull()
						&&  !voBooking.getApptStatus().equals(Status_Reason.BOOKED)) )
				{
					engine.showMessage("The Patient is already Admitted or the status of the Booking has changed. Close this dialog and refer to the Theatre list again.");
					return;
				}
			}
			else//WDEV-13307
			{
				if (domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort())
						|| (voBooking.getApptStatusIsNotNull()
							&&  !voBooking.getApptStatus().equals(Status_Reason.BOOKED)) )
					{
						engine.showMessage("The Patient is no longer an Inpatient or the status of the Booking has changed. Close this dialog and refer to the Theatre list again.");
						return;
					}
			}
		}
		
		PatientElectiveListBedAdmissionVo patientElectiveList = null;
		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			// Get current Patient Elective List
			patientElectiveList = domain.getPatientElectiveListForAppointment(form.getGlobalContext().RefMan.getTheatreBookingAppointment());
			
			if (patientElectiveList != null)
			{
				// If there are no other elective list to be cancelled
				TCIOutcomeForPatientElectiveListVo outcome = new TCIOutcomeForPatientElectiveListVo();
				
				if (ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
					outcome.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED);
				else
					outcome.setOutcome(AdmissionOfferOutcome.PATIENT_ADMITTED_COMMENCED_8);
				
				outcome.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
				outcome.setStatusDateTime(new DateTime());
				outcome.setOutcomeReason(null);
				
				patientElectiveList.getTCIDetails().setCurrentOutcome(outcome);
				patientElectiveList.getTCIDetails().getOutcomeHistory().add(outcome);
				patientElectiveList.getTCIDetails().setIsActive(Boolean.FALSE);
				
				if (!ElectiveListReason.DIAGNOSTIC.equals(patientElectiveList.getElectiveListReason()))
				{
					if (patientElectiveList.getPathwayClock() != null)
						patientElectiveList.getPathwayClock().setStopDate(form.dtimAdm().getValue() != null ? form.dtimAdm().getValue().getDate() : null);
				}

				if (Specialty.EMERGENCY.equals(form.cmbSpecialty().getValue()))
				{
					// Check for existing Patient Elective list
					if (Boolean.TRUE.equals(domain.hasPatientElectiveListsToBeCancelled(form.getGlobalContext().Core.getPatientShort(), patientElectiveList, patientElectiveList.getElectiveList().getService())))
					{
						form.getLocalContext().setPatientElectiveList(patientElectiveList);
						engine.showMessage("Patient has other Patient Elective records for the same service. Cancel these records?", "Warning", MessageButtons.YESNOCANCEL);
						return;
					}
				}
			}
		}

		if (saveAdmission(patientElectiveList, null))
			engine.close(DialogResult.OK);
	}

	private boolean saveAdmission(PatientElectiveListBedAdmissionVo patientElectiveList, PatientElectiveListBedAdmissionVoCollection differentPatientElectiveListForService)
	{
		PasEventVo voPasEvent = form.getLocalContext().getInpatienEpisode() == null ? new PasEventVo() : form.getLocalContext().getInpatienEpisode().getPasEvent();//	WDEV-13307
		if (form.qmbConsultant().getValue() != null)
		{
			MedicWithMappingsLiteVo medLite = new MedicWithMappingsLiteVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp());
			voPasEvent.setConsultant(medLite);
		}
		
		voPasEvent.setEventDateTime(form.dtimAdm().getValue());
		voPasEvent.setEventType(PasEventType.INPATIENT);
		voPasEvent.setIsVip(false);
		voPasEvent.setLocation(form.cmbWard().getValue());
		voPasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
		voPasEvent.setSpecialty(form.cmbSpecialty().getValue());
		voPasEvent.setPasEventId(new DateTime().toString());
		
		InpatientEpisodeVo voInpatientEpis = form.getLocalContext().getInpatienEpisode() == null ? new InpatientEpisodeVo() : form.getLocalContext().getInpatienEpisode();//WDEV-13307
		voInpatientEpis.setIsOnLeave(false);
		voInpatientEpis.setAdmissionDateTime(form.dtimAdm().getValue());
		voInpatientEpis.setEstDischargeDate(form.dteDisch().getValue());
		voInpatientEpis.setPasEvent(voPasEvent);
		voInpatientEpis.setBedNo(form.txtBedNo().getValue());
		voInpatientEpis.setAdmissionType(form.getLocalContext().getInpatienEpisode() == null ? AdmissionType.PLANNED : AdmissionType.RE_ADMISSION);//WDEV-13307
		
		String[] arrErrors = voInpatientEpis.validate(validateUILogic());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		arrErrors = form.getGlobalContext().Core.getPatientShort().validate(arrErrors);
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		try
		{
			//CatsReferralWizardVo voCats = domain.getCatsReferralWizardVoForCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
			voCats.setRequiresDischargeRep(null);
			voCats.setDischargeDate(null);//wdev-11889
			String [] errors2 = voCats.validate();
			if (errors2 != null && errors2.length > 0)
			{
				engine.showErrors(errors2);
				return false;
			}
			
			CareContextShortVo voCC = domain.admitPatient(form.getGlobalContext().Core.getPatientShort(), voInpatientEpis, form.getGlobalContext().Scheduling.getBookingAppointmentRef(), voCats, form.getLocalContext().getInpatienEpisode() != null, patientElectiveList, differentPatientElectiveListForService);//	WDEV-13307
			if (voCC != null)
				form.getGlobalContext().Core.setCurrentCareContext(voCC);
			
			return true;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
	}
	
	
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private void populateWardCombo()
	{
		form.cmbWard().clear();

		if (form.getGlobalContext().Core.getHospitalLocIsNotNull())
		{
			LocShortVo location = form.getGlobalContext().Core.getHospitalLoc();
			
			//WDEV-18007
			if (!LocationType.HOSP.equals(form.getGlobalContext().Core.getHospitalLoc().getType()))
			{
				location = domain.getCurrentHospital(location);
			}
			
			LocShortMappingsVoCollection voLocShortMapColl = domain.listActiveWardsForHospital(location);
			
			if (voLocShortMapColl != null)
			{
				for (int i = 0; i < voLocShortMapColl.size(); i++)
				{
					LocShortMappingsVo voLocShortMap = voLocShortMapColl.get(i);
					form.cmbWard().newRow(voLocShortMap, voLocShortMap.getName());
				}
			}
		}

	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbConsultant().clear();

		if (value != null)
		{
			MedicLiteVo med = null;
			MedicLiteVoCollection voMedicColl = domain.listActiveMedics(value);
			if (voMedicColl != null)
			{
				for (int i = 0; i < voMedicColl.size(); i++)
				{
					med = voMedicColl.get(i);
					form.qmbConsultant().newRow(med, med.toString());			
				}
			}
			if (voMedicColl != null &&
					voMedicColl.size() == 1)
							form.qmbConsultant().setValue(voMedicColl.get(0));
			else if (voMedicColl != null &&
						voMedicColl.size() > 1)
							form.qmbConsultant().showOpened();
			
	
			Integer id = engine.getLoggedInUser().getHcpId();
			if (med != null && id != null && id.equals(med.getID_Hcp()))
				form.qmbConsultant().setValue(med);
		}
	}
}
