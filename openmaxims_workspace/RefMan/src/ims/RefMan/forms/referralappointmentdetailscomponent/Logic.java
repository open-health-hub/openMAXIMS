// This code was generated by Daniel Laffan using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referralappointmentdetailscomponent;

import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.grdStatusHistoryRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabAppInvsContainer.grdApptsRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabAppInvsContainer.grdInvestigationsRow;
import ims.RefMan.forms.referralappointmentdetailscomponent.GenForm.lyrSelectLayer.tabWaitingListContainer.grdWaitingListRow;
import ims.RefMan.vo.CatsReferralCurrentStatusVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.OrderInvApptListVo;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVo;
import ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReferralERODVoCollection;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.enums.ReferralAppointmentDetailsAction;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.Button;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.ImportResultsConfigVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOcsOrderVo;
import ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVo;
import ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo;
import ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.ValueObject;
import ims.vo.interfaces.IReferralApptDetail;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int ACTIONED = -1;
	private static final int CANCELLED = -2;
	private static final int DNAED = -3;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
	} 

	private void clearScreen()
	{
		form.txtService().setValue(null);
		form.txtReferredBy().setValue(null);
		form.txtUBRN().setValue(null);
		form.txtRTTCurrentStatus().setValue(null);
		form.dteReferral().setValue(null);
		form.dteReferralReceived().setValue(null);
		form.grdStatusHistory().getRows().clear();
		form.lyrSelect().tabAppInvs().grdAppts().getRows().clear();
		form.lyrSelect().tabAppInvs().grdInvestigations().getRows().clear();
	}

	private void populateScreenFromData(IReferralApptDetail iReferralApptDetail)
	{
		clearScreen();

		if(iReferralApptDetail == null)
			return;
		
		//list of all specimenworklistitems
		SpecimenWorkListItemLiteVoCollection voCollWorkListItem = domain.listSpecimenWorKlistItemsForCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if(voCollWorkListItem != null && voCollWorkListItem.size() > 0)
		{
			SpecimenWorkListItemLiteVoCollection voCollWorkListNotCollected = new SpecimenWorkListItemLiteVoCollection();
			SpecimenWorkListItemLiteVoCollection voCollWorkListCollectedItems = new SpecimenWorkListItemLiteVoCollection();

			for(SpecimenWorkListItemLiteVo voSpecWork : voCollWorkListItem)
			{
				if(voSpecWork.getDateToCollect() == null && voSpecWork.getWard() == null)
					voCollWorkListNotCollected.add(voSpecWork);
				else
					voCollWorkListCollectedItems.add(voSpecWork);
			}
			form.getGlobalContext().RefMan.setSpecimenWorkListItems(voCollWorkListNotCollected.size() > 0 ? voCollWorkListNotCollected : null);
			form.getLocalContext().setCollectedWorkListItems(voCollWorkListCollectedItems);
		}	
		else
		{
			form.getGlobalContext().RefMan.setSpecimenWorkListItems(null);
			form.getGlobalContext().RefMan.setSpecimenWorkListItem(null);
			form.getLocalContext().setCollectedWorkListItems(null);
		}
		
		form.getLocalContext().setReferralApptDetail(iReferralApptDetail);
		form.txtService().setValue(iReferralApptDetail.getIReferralApptDetailServiceName());
		form.dteReferral().setValue(iReferralApptDetail.getIReferralApptDetailDateReferral());
		form.dteReferralReceived().setValue(iReferralApptDetail.getIReferralApptDetailDateReferralReceived());
		form.txtReferredBy().setValue(iReferralApptDetail.getiReferralApptDetailReferredBy());
		form.txtUBRN().setValue(iReferralApptDetail.getIReferralApptDetailUBRN());
		form.txtPathwayID().setValue(iReferralApptDetail.getIReferralApptDetailPathwayID());
		
		//WDEV-18387 
		if (form.getLocalContext().getbDisplayRttCurrentStatusFields())
		{
			String rttCurrentStatus = "";
			if (iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus() != null && iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatusIsNotNull())
				rttCurrentStatus = iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getNationalCodeIsNotNull() ? iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getNationalCode().toString() + ". " + iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getDescription() : iReferralApptDetail.getIReferralApptDetailCurrentRTTStatus().getRTTStatus().getDescription();
			form.txtRTTCurrentStatus().setValue(rttCurrentStatus);
			form.txtRTTCurrentStatus().setTooltip(form.txtRTTCurrentStatus().getValue());
		}
				
		// Status
		if(iReferralApptDetail.getIReferralApptDetailStatusHistory() != null)
		{
			iReferralApptDetail.getIReferralApptDetailStatusHistory().sort(SortOrder.DESCENDING);
			for(CatsReferralStatusVo voStatus : iReferralApptDetail.getIReferralApptDetailStatusHistory())
			{
				grdStatusHistoryRow row = form.grdStatusHistory().getRows().newRow();
				if(voStatus.getStatusDateTimeIsNotNull())
					row.setcolDateTime(voStatus.getStatusDateTime().toString(true));
				
				if(voStatus.getReferralStatusIsNotNull())
				{
					row.setcolStatus(voStatus.getReferralStatus().toString());
					row.setTooltipForcolStatus(voStatus.getReferralStatus().toString());
				}
			}
		}
		
		// Appts
		if(iReferralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			for(ReferralAppointmentDetailsBookingAppointmentVo voAppt : iReferralApptDetail.getIReferralApptDetailAppointments())
			{
				//Check to see if this appointment is linekd to an investigation
				if ( ! findAnyInvestigationForThisAppointment(iReferralApptDetail, voAppt))
				{
					grdApptsRow row = form.lyrSelect().tabAppInvs().grdAppts().getRows().newRow();
					String dateTimeStr = "";
					if(voAppt.getAppointmentDateIsNotNull())
						dateTimeStr += voAppt.getAppointmentDate().toString() + " ";
					if(voAppt.getApptStartTimeIsNotNull())
						dateTimeStr += voAppt.getApptStartTime().toString();
					else if(voAppt.getTheatreBookingIsNotNull() && voAppt.getTheatreBooking().getTCITimeIsNotNull())
						dateTimeStr += voAppt.getTheatreBooking().getTCITime().getText();
			
					row.setcolDateTime(dateTimeStr);
					
					if(voAppt.getSessionIsNotNull())
					{
						row.setcolClinic(voAppt.getSession().getName());
						if(voAppt.getSession().getServiceIsNotNull())
							row.setcolService(voAppt.getSession().getService().getServiceName());
					}
				
					row.setcolStatus(voAppt.getApptStatus());
					row.setValue(voAppt);
				}
				
			}
		}
		
		// investigations
		if(iReferralApptDetail.getIReferralApptDetailInvestigations() != null)
		{
			for(ReferralAppointmentDetailsOcsOrderVo voOrder : iReferralApptDetail.getIReferralApptDetailInvestigations())
			{
				for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
				{
					grdInvestigationsRow row = form.lyrSelect().tabAppInvs().grdInvestigations().getRows().newRow();
					if(voOrder.getSysInfoIsNotNull() && voOrder.getSysInfo().getCreationDateTime() != null)
						//-------------------------
						row.setcolDate(voOrder.getSysInfo().getCreationDateTime().getDate());
						//row.setcolDate(voOrder.getSysInfo().getCreationDateTime().toString(false));
						//--------------------------
					
					//Need to find this OrderInv in the OrderInvAppts collection or SpecimeWorkListItems and display relevant data
					populateAppointmentData(iReferralApptDetail, voOrderInv, row, voCollWorkListItem);
					
					if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull())
					{
						row.setcolInvestigation(voOrderInv.getInvestigation().getInvestigationIndex().getName());
						//WDEV-6161 - 1
						if(voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterfaceIsNotNull())
						{
							if(voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL) && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterface() == true)
							{	
								//-------------------------
								row.setcolApptDate(voOrderInv.getAppointmentDateIsNotNull() ? voOrderInv.getAppointmentDate().getDate() : null);
								//row.setcolApptDate(voOrderInv.getAppointmentDateIsNotNull() ? voOrderInv.getAppointmentDate().getDate().toString() : null);
								//-----------------
//								if(voOrderInv.getAppointmentDateIsNotNull() && voOrderInv.getAppointmentDate().getTime() != null)
//									row.setTooltipForcolApptDate("Appointment Time : " + voOrderInv.getAppointmentDate().getTime().toString());
							}
						}
					}
						
					if((voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduledIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getCanBeScheduled()))
					{
						if(voOrderInv.getAppointmentDate() == null && row.getcolApptDate() == null)
						{
							row.setcolImage(form.getImages().OCRR.Information);
							row.setTooltipForcolImage("Investigation requires an Appointment");
						}
					}
					
					if(voOrderInv.getOrdInvCurrentStatusIsNotNull() && voOrderInv.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull()
							&& (voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCEL_REQUEST)
									|| voOrderInv.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCELLED)))
						row.setBackColor(ConfigFlag.UI.CANCELLED_INVESTIGATION_ROW_COLOUR.getValue());
					
					row.setValue(voOrderInv);
				}
			}
		}			
		updateControlState();
		
	}
		
	private boolean findAnyInvestigationForThisAppointment(IReferralApptDetail referralApptDetail, ReferralAppointmentDetailsBookingAppointmentVo voAppt) 
	{
		if(referralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			//Find the Order Investigaion in the OrderInvApt collection
			for(OrderInvApptListVo voOrderInvAppt : referralApptDetail.getIReferralApptDetailOrdInvAppts())
			{
				if (voOrderInvAppt.getAppointmentIsNotNull()
					&& voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
					return true;
			}
		}
		return false;
	}

	private void populateAppointmentData(IReferralApptDetail referralApptDetail, ReferralAppointmentDetailsOrderInvestigationVo voOrderInv, grdInvestigationsRow row, SpecimenWorkListItemLiteVoCollection voCollWorkListItem) 
	{
		if(referralApptDetail.getIReferralApptDetailAppointments() != null)
		{
			//Find the Order Investigaion in the OrderInvAppt collection 
			boolean bFound = false;
			for(OrderInvApptListVo voOrderInvAppt : referralApptDetail.getIReferralApptDetailOrdInvAppts())
			{
				if (voOrderInvAppt.getOrderInvestigationIsNotNull()
					&& voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigationIsNotNull()
					&& voOrderInv.getID_OrderInvestigationIsNotNull()
					&& voOrderInv.getID_OrderInvestigation().equals(voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigation()) )
				{
					//Found the investigation - Now find the corresponding Appt
					for(ReferralAppointmentDetailsBookingAppointmentVo voAppt : referralApptDetail.getIReferralApptDetailAppointments())
					{
						if (voOrderInvAppt.getAppointmentIsNotNull()
								&& voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
						{
							bFound = true;
							row.setColOrdInvAppt(voOrderInvAppt);
							if (voAppt.getSessionIsNotNull())
							{
								if(voAppt.getSession().getServiceIsNotNull())
									row.setcolService(voAppt.getSession().getService().getServiceName());
											
								if(voAppt.getSession().getSchLocationIsNotNull())
									row.setcolLocation(voAppt.getSession().getSchLocation().getName());

								if(voAppt.getAppointmentDateIsNotNull())
									//--------------------------
									row.setcolApptDate(voAppt.getAppointmentDate());
									//row.setcolApptDate(voAppt.getAppointmentDate().toString());
									//------------------------------------------------
								
								if(voAppt.getApptStartTimeIsNotNull())
									row.setTooltipForcolApptDate("Appointment Time : " + voAppt.getApptStartTime().toString());
											
								if(voAppt.getApptStatusIsNotNull())
									row.setcolApptStatus(voAppt.getApptStatus().toString());

								row.setcolAPPTVO(voAppt);
								break;
							}
						}
					}
				}
			}
			if(!bFound)
			{
				//find the item in the SpecimenWorkListItem Collection
				if(voCollWorkListItem != null)
				{
					for(SpecimenWorkListItemLiteVo voWorkListItem : voCollWorkListItem)
					{
						if(voWorkListItem.getSpecimenIsNotNull() && voOrderInv.getSpecimenIsNotNull() &&  voWorkListItem.getSpecimen().equals(voOrderInv.getSpecimen()))
						{
							//-----------------
							row.setcolApptDate(voWorkListItem.getDateToCollectIsNotNull() ? voWorkListItem.getDateToCollect() : null);
							//row.setcolApptDate(voWorkListItem.getDateToCollectIsNotNull() ? voWorkListItem.getDateToCollect().toString() : null);
							//----------------
							row.setcolLocation(voWorkListItem.getWardIsNotNull() ? voWorkListItem.getWard().getName() : null);
							break;
						}
					}
				}
			}
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		ReferralAppointmentDetailsBookingAppointmentVo voApptToCancel = null;
		SessionServiceAndSlotActivityVo voServiceAndActivity = null;
		Booking_AppointmentVo voAppt = null;
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_APPT:
				bookNewAppt();			// WDEV-12159
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_APPT:
				// get the full appointment record to be rebooked and set the
				// appropriate context to initialize the screen
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				rebookAppt(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.ORDER_INVESTIGATION:
				orderInvestigation();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.BOOK_THEATRE_APPT:
				bookTheatreAppt();
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.CANCEL_THEATRE_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelTheatreAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.REBOOK_THEATRE_APPT:
				BookingAppointmentTheatreVo voTheatreAppt = domain.getTheatreAppointment(form.lyrSelect().tabAppInvs().grdAppts().getValue());
				rebookTheatreAppt(voTheatreAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CancelAppointment:
				voApptToCancel = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO();
				form.getLocalContext().setApptToCancel(voApptToCancel);
				voServiceAndActivity = domain.getServiceAndActivityByAppt(voApptToCancel, null);
				if(voServiceAndActivity != null)
				{
					form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
					form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
					form.getGlobalContext().Scheduling.setBookingSession(voApptToCancel != null ? voApptToCancel.getSession() : null);
					form.getGlobalContext().ChooseAndBook.setisCABAppt(voApptToCancel.getIsCABBooking());
					engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.RebookAppointment:
				// get the full appointment record to be rebooked and set the
				// appropriate context to initialize the screen
				if(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO() != null)
					rebookAppt(domain.getBookingAppointment(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO()), form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO());
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewOrder:				
				if(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null)
				{
					form.getGlobalContext().OCRR.PathologyResults.setOrder(form.lyrSelect().tabAppInvs().grdInvestigations().getValue().getOrderDetails());
					engine.open(form.getForms().OCRR.OrderSummaryDialog);
				}
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewResult:
				form.getGlobalContext().OCRR.setResultDisplayDate(getSelectedDisplayDateTime() != null ? getSelectedDisplayDateTime().getDate() : null);
				form.getGlobalContext().OCRR.setCurrentPathRadResult(getPathRadResult(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
				engine.open(form.getForms().OCRR.ResultDialog);
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ENTER_APPT_DETAILS:
				enterAppointmentDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.EDIT_COLLECTION_DETAILS:
				editCollectionDetails();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.ViewRejectionDetails:
				engine.open(form.getForms().OCRR.RejectedInvestigationDetails);
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CHANGE_APPT:
				changeAppointment();
				break;
			case GenForm.ContextMenus.RefManNamespace.InvestigstionsMenu.CANCEL_THEATRE_APPT:
				voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.lyrSelect().tabAppInvs().grdAppts().getValue());
				cancelTheatreAppointment(voAppt, form.lyrSelect().tabAppInvs().grdAppts().getValue());
			case GenForm.ContextMenus.RefManNamespace.ReferralAppointmentDetailsComponent.VIEW_APPT_HISTORY:
				 viewAppHistory();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.REMOVE_ELECTIVE_LIST:  //wdev-18365
				PatientElectiveListForReferralDetailsVo tempVo = form.lyrSelect().tabWaitingList().grdWaitingList().getSelectedRow().getValue();
				engine.open(form.getForms().RefMan.RemoveFromElectiveList, new Object[] {tempVo}); 
			break;
			
			//WDEV-18092
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.CANCEL_TCI:
				
				//WDEV-18541
				if (form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails() != null)
				{
					TCIOutcomeForPatientElectiveListVo dummyTCIOutcome = new TCIOutcomeForPatientElectiveListVo();
					dummyTCIOutcome.setTciId(form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getID_TCIForPatientElectiveList());
					
					form.getGlobalContext().RefMan.setTCIOutcomeForPatientElectiveList(dummyTCIOutcome);
				}
				
				engine.open(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog);
				break;
				
			//WDEV-18391
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_WAITING_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
					engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST});
					break;
			}
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_BOOKED_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
					engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOBOOKEDLIST});
					break;
			}
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.ADD_NEW_PLANNED_LIST:
			{
					form.getGlobalContext().RefMan.setPatientElectiveListRef(null);				
					engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST});
					break;
			}
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.VIEW_ELECTIVE_LIST: 
					engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.VIEWEDIT});
					break;
			
			//WDEV-18391 a1)
			case GenForm.ContextMenus.RefManNamespace.WaitingListForReferralDetailsCancelMenu.BOOK_THEATRE:
				bookTheatreAppt();
				break;
			
			default:
		}
	}

	private void changeAppointment()
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().Rotherham.setBookedAppointments(getBookedAppointmentsCollectionFromApptsGrid());
		engine.open(form.getForms().RefMan.BookedAppointments);
	}

	private void editCollectionDetails() 
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().RefMan.setSpecimenWorkListItem(isPathologyAndSpecimenWorkListItemExists(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
		engine.open(form.getForms().RefMan.BookSpecimenAppointmentDialog);
	}

	private void enterAppointmentDetails() 
	{
		if (isReferralEndOfCare())
			return;
		//WDEV-16850
		grdInvestigationsRow row = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow();
		engine.open(form.getForms().RefMan.EnterAppointmentDetails, new Object[]{Boolean.TRUE.equals(row.getValue() != null && row.getValue().getSysInfoIsNotNull() && row.getValue().getSysInfo().getCreationDateTime() != null) ? row.getValue().getSysInfo().getCreationDateTime().getDate() : null });
	}

	private void cancelTheatreAppointment(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voApptToCancel) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& voAppt.getApptStatus().equals(Status_Reason.BOOKED) 
			&& isTheatreAppt)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			form.getLocalContext().setApptToCancel(voApptToCancel);
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voApptToCancel);
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[] {null, isTheatreAppt});
			}
		}
		else if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voApptToCancel != null
			&& voAppt.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voApptToCancel.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
	}

	private void cancelAppointment(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voReferralAppointmentDetailsBookingAppointment) 
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null 
			&& voAppt.getApptStatusIsNotNull()
			&& voAppt.getApptStatus().equals(Status_Reason.BOOKED) 
			&& !isTheatreAppt)
		{
			form.getLocalContext().setApptToCancel(voReferralAppointmentDetailsBookingAppointment);
			SessionServiceAndSlotActivityVo voServiceAndActivity = domain.getServiceAndActivityByAppt(voAppt, null);
			if(voServiceAndActivity != null)
			{
				form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
				form.getGlobalContext().Scheduling.setBookingActivity(voServiceAndActivity.getSlotActivity());
				form.getGlobalContext().Scheduling.setBookingService(voServiceAndActivity.getSessionService());
				form.getGlobalContext().Scheduling.setBookingSession(voAppt != null ? voAppt.getSession() : null);
				form.getGlobalContext().ChooseAndBook.setisCABAppt(voAppt.getIsCABBooking());
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
			}
		}
		else if (voAppt != null
				&& voAppt.getApptStatusIsNotNull()
				&& voReferralAppointmentDetailsBookingAppointment != null
				&& voReferralAppointmentDetailsBookingAppointment.getApptStatusIsNotNull()
				&& ! voAppt.getApptStatus().equals(voReferralAppointmentDetailsBookingAppointment.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
	}

	private void viewAppHistory()
	{
		ReferralAppointmentDetailsBookingAppointmentVo value = form.lyrSelect().tabAppInvs().grdAppts().getValue();
		if (value == null)
			throw new CodingRuntimeException("No item is selected in grid");
		
		engine.open(form.getForms().Scheduling.AppointmentHistoryDialog,new Object[]{domain.listAppointmentHistory(value)});
		//Appointment_StatusVoCollection  
	}

	private void rebookTheatreAppt(BookingAppointmentTheatreVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{
		if (isReferralEndOfCare())
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voFromGrid != null
			&& voFromGrid.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
		else if (voAppt != null 
			&& voAppt.getRequiresRebookIsNotNull() 
			&& voAppt.getRequiresRebook() 
			&& isTheatreAppt
			&& form.getLocalContext().getbReferralAcceptedIsNotNull() 
			&& form.getLocalContext().getbReferralAccepted()
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.CANCELLED) || voAppt.getApptStatus().equals(Status_Reason.DNA)))	//WDEV-9091
		{
			form.getGlobalContext().Scheduling.setTheatreAppointment(voAppt);

			if(voAppt.getSessionIsNotNull())
				form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());
			
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voAppt);
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				
				//WDEV-12918
				if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
					engine.open(form.getForms().RefMan.BookTheatreDialog);
				else
					engine.open(form.getForms().RefMan.BookTheatreSlot);
			}
		}
	}

	private void bookTheatreAppt()
	{
		if (isReferralEndOfCare())
			return;
		
		// WDEV-13243
		// Clear the book theatre global context when booking a new appointment
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
		
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().RefMan.BookTheatreDialog);
		else
			engine.open(form.getForms().RefMan.BookTheatreSlot);
	}

	private ReferralAppointmentDetailsBookingAppointmentVoCollection getBookedAppointmentsCollectionFromApptsGrid()
	{
		ReferralAppointmentDetailsBookingAppointmentVoCollection voCollAppts = new ReferralAppointmentDetailsBookingAppointmentVoCollection();
		
		for(int i=0;i<form.lyrSelect().tabAppInvs().grdAppts().getRows().size(); i++)
		{
			if(isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i).getValue(), Status_Reason.BOOKED))
				voCollAppts.add(form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i).getValue());
		}
		
		return voCollAppts.size() > 0 ? voCollAppts : null;
	}

	private OcsPathRadResultVo getPathRadResult(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv == null)
			return null;
		
		OcsPathRadResultVo voPathRadResult = new OcsPathRadResultVo();
		voPathRadResult.setOrderInvestigation(voOrderInv);
		voPathRadResult.setCategory(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getCategory() : null);
		voPathRadResult.setDescription(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		
		return voPathRadResult;
	}

	private void bookAppt()
	{
		if (isReferralEndOfCare())
			return;

		engine.open(form.getForms().RefMan.BookAppointmentDialog);
	}

	private DateTime getSelectedDisplayDateTime()
	{
		if (form.lyrSelect().tabAppInvs().grdInvestigations().getValue() == null)
			return null;

		ReferralAppointmentDetailsOrderInvestigationVo voOrderInv = form.lyrSelect().tabAppInvs().grdInvestigations().getValue();
		return voOrderInv.getDisplayDateTime();
	}

	private void rebookAppt(Booking_AppointmentVo voAppt, ReferralAppointmentDetailsBookingAppointmentVo voFromGrid)
	{		
		if (isReferralEndOfCare())
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null
			&& voAppt.getApptStatusIsNotNull()
			&& voFromGrid != null
			&& voFromGrid.getApptStatusIsNotNull()
			&& ! voAppt.getApptStatus().equals(voFromGrid.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");

			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();	
		}
		else if ( voAppt != null 
			&& voAppt.getRequiresRebookIsNotNull() 
			&& voAppt.getRequiresRebook() 
			&& !isTheatreAppt
			&& voAppt.getApptStatusIsNotNull()
			&& (voAppt.getApptStatus().equals(Status_Reason.CANCELLED) || voAppt.getApptStatus().equals(Status_Reason.DNA)))
		{
			form.getGlobalContext().Scheduling.setBookingAppointment(voAppt);
			form.getGlobalContext().Scheduling.setBookingService(voAppt.getSessionIsNotNull() ? voAppt.getSession().getService() : null);
			form.getGlobalContext().Scheduling.setBookingActivity(voAppt.getActivityIsNotNull() ? voAppt.getActivity() : null);
			
			bookAppt();
		}
	}

	protected void onGrdApptsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.getContextMenus().RefMan.hideAllReferralAppointmentDetailsComponentMenuItems();
		form.getContextMenus().RefMan.hideAllWaitingListForReferralDetailsCancelMenuMenuItems();
		
		boolean icpCompleted =form.getLocalContext().getAssociatedICPCompletedIsNotNull() && form.getLocalContext().getAssociatedICPCompleted().booleanValue();
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_APPTItem().setVisible(!icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setVisible(!icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		// WDEV-18617 form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setEnabled(hasOutpatientAppointments()); //WDEV-17913
		form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem().setEnabled(true);
		
		//WDEV-18488
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && form.getLocalContext().getbReferralAccepted());
		}
		
		form.lyrSelect().tabAppInvs().btnBookTheatre().setVisible(!icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		// WDEV-18617 form.lyrSelect().tabAppInvs().btnBookTheatre().setEnabled(hasOutpatientAppointments()); //WDEV-17913
		
		if (form.lyrSelect().tabAppInvs().grdAppts().getSelectedRow() != null)
		{
			boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getTheatreBooking() != null;
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_APPTItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && !isTheatreAppt);
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_APPTItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebookIsNotNull() 
					&& form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebook() && !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem().setVisible(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue() && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) 
					&& !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && isTheatreAppt && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue()); //wdev-11631
			
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebookIsNotNull() && form.lyrSelect().tabAppInvs().grdAppts().getValue().getRequiresRebook() && isTheatreAppt
					 && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
			form.getContextMenus().RefMan.getReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem().setVisible(form.lyrSelect().tabAppInvs().grdAppts().getValue()!=null);
						
		}
		
		//Investigation Grid
		boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO() != null && form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getcolAPPTVO().getTheatreBookingIsNotNull();
		form.getContextMenus().RefMan.hideAllInvestigstionsMenuMenuItems();
		form.getContextMenus().RefMan.getInvestigstionsMenuCancelAppointmentItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdInvestigations().getValue(), Status_Reason.BOOKED) && findApptForGivenInv(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && !isTheatreAppt);
		form.getContextMenus().RefMan.getInvestigstionsMenuRebookAppointmentItem().setVisible(!icpCompleted && form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null && doesItRequireReboot(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) 
				&& !isTheatreAppt && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		
		if (form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow() != null)
		{			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewOrderItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue() != null);
			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewResultItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue() != null 
					&& hasInvestigationGotAResult(form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getValue()));
			
			form.getContextMenus().RefMan.getInvestigstionsMenuViewRejectionDetailsItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isResultRejected(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()));
			
			form.getContextMenus().RefMan.getInvestigstionsMenuENTER_APPT_DETAILSItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isClinicalAndNoInterfaceAndDateIsNull(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuEDIT_COLLECTION_DETAILSItem().setVisible(form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& isPathologyAndSpecimenWorkListItemExists(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuCHANGE_APPTItem().setVisible(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue() && form.lyrSelect().tabAppInvs().grdInvestigations().getValue() != null 
					&& findApptForGivenInv(form.lyrSelect().tabAppInvs().grdInvestigations().getValue()) != null && otherBookedAppointmentsExist() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
			
			form.getContextMenus().RefMan.getInvestigstionsMenuCANCEL_THEATRE_APPTItem().setVisible(isTheatreAppt && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdInvestigations().getValue(), Status_Reason.BOOKED));
		}

		form.lyrSelect().tabAppInvs().btnBookSpecimenCollect().setVisible(form.getGlobalContext().RefMan.getSpecimenWorkListItemsIsNotNull() && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted());
		if(form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
	
		//WDEV-18092 WDEV-18380
		//WDEV-18425 // WDEV-18527 
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && !form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{		
			form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem().setVisible(form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails() != null && !Boolean.TRUE.equals(form.getLocalContext().getReferralCancelledByProvider()));

		}

		//WDEV-18425
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem().setVisible(
					form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null 
					&& form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getElectiveListStatus().getElectiveListStatusIsNotNull() 
					&& !form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED));	//wdev-18365
		
		//WDEV-18488 EROD buttons
		boolean isReferralNotEocOrCancelledbyProvider = Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()) && !Boolean.TRUE.equals(form.getLocalContext().getReferralCancelledByProvider());
		Button outpERODBtn = form.lyrSelect().tabAppInvs().btnOutpatientEROD();
		outpERODBtn.setVisible(form.getLocalContext().getReferralApptDetail() != null && form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD() != null && form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD().size() > 0);
		outpERODBtn.setEnabled(outpERODBtn.isVisible() && isReferralNotEocOrCancelledbyProvider);
		
		Button theatreERODBtn = form.lyrSelect().tabAppInvs().btnTheatreEROD();
		theatreERODBtn.setVisible(form.getLocalContext().getReferralApptDetail() != null && form.getLocalContext().getReferralApptDetail().getIReferralTheatreEROD() != null && form.getLocalContext().getReferralApptDetail().getIReferralTheatreEROD().size() > 0);
		theatreERODBtn.setEnabled(theatreERODBtn.isVisible() && isReferralNotEocOrCancelledbyProvider);
		
		if(form.getLocalContext().getReferralApptDetail() != null)
		{
			form.lyrSelect().tabAppInvs().btnOutpatientEROD().setTooltip(getErodInfo(getLastEROD(form.getLocalContext().getReferralApptDetail().getIReferralOutpatientEROD())));
			form.lyrSelect().tabAppInvs().btnTheatreEROD().setTooltip(getErodInfo(getLastEROD(form.getLocalContext().getReferralApptDetail().getIReferralTheatreEROD())));
		}	
		
		// WDEV-18387 
		if (form.getLocalContext().getbDisplayRttCurrentStatusFieldsIsNotNull())
		{
        	form.txtRTTCurrentStatus().setEnabled(false);
        	form.txtRTTCurrentStatus().setVisible(form.getLocalContext().getbDisplayRttCurrentStatusFields());
        	form.lblRttCurrentStatus().setVisible(form.getLocalContext().getbDisplayRttCurrentStatusFields());
		}
				
		//WDEV-18425
		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && !form.getGlobalContext().Core.getPatientShort().getDodIsNotNull())
		{		
			
			if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.lyrSelect().tabWaitingList().isVisible()
					&& !domain.thereAreActivePatientElectiveListsForCurrentCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()))
			{				
				//WDEV-18437
				CatsReferralCurrentStatusVo voCats = domain.getCatsReferralStatus(form.getGlobalContext().RefMan.getCatsReferral());
				
				boolean isReferralRejected = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_REJECTED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralDischarged = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.DISCHARGED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralWaitingOnGPReferral = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.WAITING_ON_GP_REFERRAL.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralProvisionalRejection = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.PROVISIONAL_REJECTION.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isOnwardReferralRequested = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.ONWARDREFERRALREQUESTED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralReceived = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_RECEIVED.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isCabCancelld = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.CAB_CANCELLATION.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isCancelledByProvider = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralAwaitingTriage = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.AWAITING_TRIAGE.equals(voCats.getCurrentStatus().getReferralStatus());
				boolean isReferralEOC = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(voCats.getCurrentStatus().getReferralStatus());
				
				if (!isReferralRejected
						&&!isReferralDischarged
						&& !isReferralWaitingOnGPReferral
						&& !isReferralReceived
						&& !isCabCancelld
						&& !isCancelledByProvider
						&& !isReferralProvisionalRejection
						&& !isReferralAwaitingTriage
						&& !isReferralEOC
						&& !isOnwardReferralRequested
						)
				{				
					form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem().setVisible(true);
					form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem().setVisible(true);
					form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem().setVisible(true);
				}
			}		
		
				
		}
		//wdev-18457
		if( ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null)
		{						
			form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem().setVisible(true);
		}		
		 
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem().setVisible(!icpCompleted && form.getLocalContext().getbReferralAcceptedIsNotNull() && form.getLocalContext().getbReferralAccepted() && ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue());
		form.getContextMenus().RefMan.getWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem().setEnabled(hasOutpatientAppointments());
		
	}
	
	private ReferralERODVo getLastEROD(ReferralERODVoCollection referralERODVoCollection)
	{
		if(referralERODVoCollection == null || referralERODVoCollection.size() == 0)
			return null;
		
		int sequence = 0;
		ReferralERODVo lastReferralEROD = null;
		
		for(int i=0; i<referralERODVoCollection.size(); i++)
		{
			if(referralERODVoCollection.get(i) == null)
				continue;
			
			if(referralERODVoCollection.get(i).getSequence() != null && sequence < referralERODVoCollection.get(i).getSequence())
			{
				sequence = referralERODVoCollection.get(i).getSequence();
				lastReferralEROD = referralERODVoCollection.get(i);
			}
		}
		
		return lastReferralEROD;
	}

	private String getErodInfo(ReferralERODVo iReferralOutpatientEROD)
	{
		if(iReferralOutpatientEROD == null)
			return null;
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append("<b>Earliest Date Offered: </b>" + iReferralOutpatientEROD.getERODDate1());
		
		if(iReferralOutpatientEROD.getERODDate2() != null)
		{
			tooltip.append("<br><b>Second Date Offered: </b>" + iReferralOutpatientEROD.getERODDate2());
		}
		
		if(iReferralOutpatientEROD.getPatAvailFromDate() != null)
		{
			tooltip.append("<br><b>Patient Available from Date: </b>" + iReferralOutpatientEROD.getPatAvailFromDate());
		}
		
		tooltip.append("<br><b>EROD Type: </b>" + iReferralOutpatientEROD.getERODType().getText());
		
		if(iReferralOutpatientEROD.getAppointment() != null)
		{
			tooltip.append("<br><b>Appointment Date: </b>" + (iReferralOutpatientEROD.getAppointment() != null ? iReferralOutpatientEROD.getAppointment().getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>" + ((iReferralOutpatientEROD.getAppointment() != null && iReferralOutpatientEROD.getAppointment().getSession() != null) ? iReferralOutpatientEROD.getAppointment().getSession().getName() : ""));
		}
		
		return tooltip.toString();
	}

	private boolean hasOutpatientAppointments()
	{
		for (int i = 0; i < form.lyrSelect().tabAppInvs().grdAppts().getRows().size(); i++)
		{
			grdApptsRow appointment = form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i);
			
			if (appointment.getValue().getTheatreBooking() == null)
				return true;
		}
		
		return false;
	}

	/**
	 * Read Appointments grid and check if there are any booked appointments
	 */
	private boolean otherBookedAppointmentsExist()
	{
		for(int i =0; i<form.lyrSelect().tabAppInvs().grdAppts().getRows().size() ;i++)
		{
			grdApptsRow row = form.lyrSelect().tabAppInvs().grdAppts().getRows().get(i);
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = row.getValue();
			if(isApptStatusEqual(voAppt, Status_Reason.BOOKED))
				return true;
		}
			
		return false;
	}

	private SpecimenWorkListItemLiteVo isPathologyAndSpecimenWorkListItemExists(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv == null)
			throw new CodingRuntimeException("voOrderInv is null in method isPathologyAndSpecimenWorkListItemExists");
		
		if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.PATHOLOGY))
		{
			SpecimenWorkListItemLiteVoCollection voCollWorkList = form.getLocalContext().getCollectedWorkListItems();
			if(voCollWorkList != null)
			{
				for (SpecimenWorkListItemLiteVo voSpecimenWorkListItem : voCollWorkList)
				{
					if(voOrderInv.getSpecimenIsNotNull())
						if(voSpecimenWorkListItem.getSpecimenIsNotNull() && voSpecimenWorkListItem.getSpecimen().equals(voOrderInv.getSpecimen()))
							return voSpecimenWorkListItem;
				}
			}
		}
		return null;
	}

	private boolean isApptStatusEqual(ReferralAppointmentDetailsBookingAppointmentVo voAppt, Status_Reason status)
	{
		if(status == null)
			throw new CodingRuntimeException("status is null in method isApptStatusEqual");
		
		if(voAppt != null)
		{
			if(voAppt.getApptStatusIsNotNull())
			{
				if(voAppt.getApptStatus().equals(status))
					return true;
			}
		}
		
		return false;
	}

	private boolean isClinicalAndNoInterfaceAndDateIsNull(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv)
	{
		if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterfaceIsNotNull())
			if(voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(Category.CLINICAL) && voOrderInv.getInvestigation().getInvestigationIndex().getNoInterface() && voOrderInv.getAppointmentDate() == null)
				return true;
		
		return false;
		
	}

	private boolean isResultRejected(OrderInvestigationRefVo voInvRef) 
	{
		if (voInvRef == null)
			return false;
		
		ReferralAppointmentDetailsOrderInvestigationVo voInvt = findInv(voInvRef);
		if (voInvt.getOrdInvCurrentStatusIsNotNull()
			&& voInvt.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull()
			&& voInvt.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.REJECTED))
			return true;
		else
			return false;
	}

	private ReferralAppointmentDetailsOrderInvestigationVo findInv(OrderInvestigationRefVo voInvRef)
	{
		for(ReferralAppointmentDetailsOcsOrderVo voOrder : form.getLocalContext().getReferralApptDetail().getIReferralApptDetailInvestigations())
		{
			for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
			{
				if (voOrderInv.getID_OrderInvestigation().equals(voInvRef.getID_OrderInvestigation()) )
					return voOrderInv;
			}
		}
		return null;
	}

	//	WDEV-13251
	private boolean hasInvestigationGotAResult(OrderInvestigationRefVo voInvRef) 
	{
		if (voInvRef == null)
			return false;
		
		ReferralAppointmentDetailsOrderInvestigationVo voInvt = findInv(voInvRef);
		
		if(voInvt == null)
			return false;
		
		if(voInvt.getResultDetailsIsNotNull() && voInvt.getResultDetails().getDocumentResultDetailsIsNotNull())  // WDEV-16224
			return true;
		
		return false;
	}
	
	private boolean isApptStatusEqual(ims.ocrr.orderingresults.vo.OrderInvestigationRefVo voInvRef, Status_Reason status)
	{
		if(status == null)
			throw new CodingRuntimeException("status is null in method isApptStatusEqual");

		//Find the Inv in the OrderInvAppts Collection, for this get the ReferrapApptDetailsBookingApptVo and its status
		if(voInvRef != null)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = findApptForGivenInv(voInvRef);
			if(voAppt != null
				&& voAppt.getApptStatusIsNotNull()
				&& voAppt.getApptStatus().equals(status))
				return true;
		}
		
		return false;
	}

	private ReferralAppointmentDetailsBookingAppointmentVo findApptForGivenInv(OrderInvestigationRefVo voInvRef) 
	{
		for(OrderInvApptListVo voOrderInvAppt : form.getLocalContext().getReferralApptDetail().getIReferralApptDetailOrdInvAppts())
		{
			if (voOrderInvAppt.getOrderInvestigation().getID_OrderInvestigation().equals(voInvRef.getID_OrderInvestigation()))
			{
				for(ReferralAppointmentDetailsBookingAppointmentVo voAppt: form.getLocalContext().getReferralApptDetail().getIReferralApptDetailAppointments())
				{
					if (voAppt.getID_Booking_Appointment().equals(voOrderInvAppt.getAppointment().getID_Booking_Appointment()))
						return voAppt;
				}					
			}
		}
		return null;
	}

	private boolean doesItRequireReboot(ims.ocrr.orderingresults.vo.OrderInvestigationRefVo voInvRef)
	{
		//Find the Inv in the OrderInvAppts Collection, for this get the ReferrapApptDetailsBookingApptVo and its status
		if(voInvRef != null)
		{
			ReferralAppointmentDetailsBookingAppointmentVo voAppt = findApptForGivenInv(voInvRef);
			if(voAppt != null
				&& voAppt.getRequiresRebookIsNotNull()
				&& voAppt.getRequiresRebook())
				return true;
		}
		
		return false;
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				Booking_AppointmentVo voAppt = cancelAppt(false);
				if(voAppt == null)
				{
					setActionedDNAedAndCancelledButtons();
					form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
					form.fireCustomControlValueChanged();	
					return;
				}
				
				setActionedDNAedAndCancelledButtons();
				
				// rebook
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected())
				{	
					if(voAppt.getTheatreBookingIsNotNull())
						rebookTheatreAppt(domain.getTheatreAppointment(voAppt), null);
					else
						rebookAppt(voAppt, null);
					return;
				}
				
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();	
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().Scheduling.setBookingActivity(null);
				form.getGlobalContext().Scheduling.setBookingService(null);
				form.getGlobalContext().Scheduling.setBookingAppointment(null);
			}
			form.getLocalContext().setApptToCancel(null);
		}
		else if(formName.equals(form.getForms().OCRR.SelectAndOrderDialog) || formName.equals(form.getForms().RefMan.BookAppointmentDialog)
				|| formName.equals(form.getForms().RefMan.BookSpecimenAppointmentDialog) || formName.equals(form.getForms().OCRR.OrderSummaryDialog) 
				|| formName.equals(form.getForms().RefMan.BookTheatreDialog) || formName.equals(form.getForms().OCRR.ImportResultsDialog)
				|| formName.equals(form.getForms().RefMan.BookTheatreSlot) || formName.equals(form.getForms().OCRR.ResultDialog))				// WDEV-13683
		{
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
			setActionedDNAedAndCancelledButtons();
		}
		else if(formName.equals(form.getForms().RefMan.EnterAppointmentDetails))
		{
			if(result.equals(DialogResult.OK))
			{
				ReferralAppointmentDetailsOrderInvestigationVo voOrderInv = form.lyrSelect().tabAppInvs().grdInvestigations().getValue();
				voOrderInv.setAppointmentDate( form.getGlobalContext().RefMan.EnterAppointmentDetails.getApptDate());
				try
				{
					domain.saveOrderInv(voOrderInv);
					domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
			
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();	
					
				form.getGlobalContext().RefMan.EnterAppointmentDetails.setApptDate(null);
			}
		}
		else if(formName.equals(form.getForms().RefMan.BookedAppointments))
		{
			//WDEV-6787 point 2)
			if(result.equals(DialogResult.OK))
			{
				if(form.getGlobalContext().Rotherham.getAppointmentToLink() == null || form.lyrSelect().tabAppInvs().grdInvestigations().getValue() == null)
					throw new CodingRuntimeException("appt or inv not provide for 'change' appt process");
				
				OrderInvApptListVo voOrdInv = form.lyrSelect().tabAppInvs().grdInvestigations().getSelectedRow().getColOrdInvAppt();
				if(voOrdInv != null)
				{
					voOrdInv.setAppointment(form.getGlobalContext().Rotherham.getAppointmentToLink());
					try
					{
						domain.saveOrdInvApptAndUpdateCatsReferral(voOrdInv, form.getGlobalContext().RefMan.getCatsReferral());
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
				}
				
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();
				
				form.getGlobalContext().Rotherham.setAppointmentToLink(null);
			}
		}
		else if(formName.equals(form.getForms().RefMan.ERODDialog))
		{
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
		else if (formName.equals(form.getForms().RefMan.CancelTCIForPatientElectiveListDialog))
		{
			if (DialogResult.OK.equals(result))
			{
				cancelTCI();
			}
				
			populateWaitingListGrid();
		}
		else if (formName.equals(form.getForms().RefMan.RemoveFromElectiveList))			//wdev-18365
		{
			if (DialogResult.OK.equals(result))
			{
				form.getLocalContext().setWasElectiveListTab(true);
				form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
				form.fireCustomControlValueChanged();
				setActionedDNAedAndCancelledButtons();
					
			}
			else
				form.getLocalContext().setWasElectiveListTab(null);
			
			
			populateWaitingListGrid();
		}
		else if (formName.equals(form.getForms().RefMan.NewElectiveListTCIErodDialog))
		{
				form.getLocalContext().setWasElectiveListTab(true);
				form.fireCustomControlValueChanged();
				populateWaitingListGrid();
				updateControlState();
		}
	}
	
	private Booking_AppointmentVo cancelAppt(Boolean tciCancelation) 
	{
		ReferralAppointmentDetailsBookingAppointmentVo voAppt = form.getLocalContext().getApptToCancel();
		if(voAppt == null)
			return null;
		
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
			
		if (voApptFull.getApptStatusIsNotNull()
			&& voAppt.getApptStatusIsNotNull()
			&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
		{
			engine.showMessage("The Status of the appointment has already been changed.");
			return null;
		}
			
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			// appt status and status history
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptFull.setCurrentStatusRecord(voApptStatus);

			voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		if (voApptFull.getSessionSlotIsNotNull())
			voApptFull.getSessionSlot().setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voApptFull.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}

		try 
		{
			if (tciCancelation)
				voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested By TCI cancellation");
			else
				voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");
		
			domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
			
			domain.updateCatsReferralCancelStatus(form.getGlobalContext().RefMan.getCatsReferral());
			
			if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI())) //WDEV-18249
			{
				domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()), Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}
		
		return voApptFull;
	}
	
	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	private boolean clinicalInvestigationExists() {
		
		IReferralApptDetail iReferralApptDetail = form.getLocalContext().getReferralApptDetail();
		if(iReferralApptDetail != null && iReferralApptDetail.getIReferralApptDetailInvestigations() != null)
		{
			for(ReferralAppointmentDetailsOcsOrderVo voOrder : iReferralApptDetail.getIReferralApptDetailInvestigations())
			{
				for(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv : voOrder.getInvestigations())
				{
					if(configCategory(voOrderInv))
						return true;
				}
			}
		}
				
		return false;
	}

	private boolean configCategory(ReferralAppointmentDetailsOrderInvestigationVo voOrderInv) {
		ImportResultsConfigVo voImportResultsConfig = form.getLocalContext().getImportResultsConfigVo();
		
		if(voImportResultsConfig!=null)
			for (int i = 0 ; i < voImportResultsConfig.getCategories().size() ; i++)
			{
				if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() && 
					voOrderInv.getInvestigation().getInvestigationIndex().getCategoryIsNotNull() && 
					 voOrderInv.getInvestigation().getInvestigationIndex().getCategory().equals(voImportResultsConfig.getCategories().get(i)))
					
						return true;
			}
		
		return false;
	}

	private void setActionedDNAedAndCancelledButtons() 
	{
		form.lyrSelect().tabAppInvs().btnActioned().setVisible(false);
		form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(false);
		form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(false);

		CatsReferralVo voRefWizard = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRefWizard.getHasRejectedInvIsNotNull()
				&& voRefWizard.getHasRejectedInv().booleanValue() )
		{
			form.lyrSelect().tabAppInvs().btnActioned().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnActioned().setVisible(true);
		}
		if (voRefWizard.getHasDNAApptsForReviewIsNotNull()
			&& voRefWizard.getHasDNAApptsForReview().booleanValue()
			&& engine.hasRight(AppRight.CAN_REVIEW_AND_REMOVE_DNA_APPTS))
		{
			form.lyrSelect().tabAppInvs().btnDNAReviewed().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(true);
		}
		if (voRefWizard.getHasCancelledApptsForReviewIsNotNull()
			&& voRefWizard.getHasCancelledApptsForReview().booleanValue()
			&& engine.hasRight(AppRight.CAN_REVIEW_AND_REMOVE_CANCELLED_APPTS))
		{
			form.lyrSelect().tabAppInvs().btnCancelReviewed().setEnabled(true);
			form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(true);
		}
		
		//WDEV-18380
		form.getLocalContext().setReferralCancelledByProvider(voRefWizard.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voRefWizard.getCurrentStatus().getReferralStatus()));
	}
	
	protected void onBtnImportResultClick() throws PresentationLogicException
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().OCRR.setReferralAppointmentDetailsOcsOrderVoCollection(form.getLocalContext().getReferralApptDetail().getIReferralApptDetailInvestigations());
		engine.open(form.getForms().OCRR.ImportResultsDialog);
	}

	protected void onBtnBookApptClick() throws PresentationLogicException 
	{
		// WDEV-12159
		// Book a new appointment
		bookNewAppt();
	}

	/**
	 * WDEV-12159
	 * Function used to book a new appointment
	 */
	private void bookNewAppt()
	{
		// Reset global context
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);

		// Call function to book appointment
		bookAppt();
	}

	protected void onBtnOrderInvClick() throws PresentationLogicException 
	{
		orderInvestigation();	
	}

	private void orderInvestigation()
	{
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().Rotherham.setAppointmentToLink(null);
		
		if(ConfigFlag.GEN.ALLOW_LINK_EXISTING_APPOINTMENTS_AND_ORDERS.getValue())
		{
			boolean isTheatreAppt = form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && form.lyrSelect().tabAppInvs().grdAppts().getValue().getTheatreBooking() != null;
			if(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED) && !isTheatreAppt)
				form.getGlobalContext().Rotherham.setAppointmentToLink(form.lyrSelect().tabAppInvs().grdAppts().getValue());
		}
			
		engine.open(form.getForms().OCRR.SelectAndOrderDialog);
	}

	@Override
	protected void onBtnActionedClick() throws PresentationLogicException 
	{
		updateCatsReferral(ACTIONED);
		form.lyrSelect().tabAppInvs().btnActioned().setVisible(false);
	}

	private boolean isReferralEndOfCare()
	{
		CatsReferralVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		if (voRef.getCurrentStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
			form.lyrSelect().tabAppInvs().btnBookAppt().setVisible(Boolean.FALSE);
			form.lyrSelect().tabAppInvs().btnOrderInv().setVisible(Boolean.FALSE);
			
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFERRALSTATUSCHANGED);
			form.fireCustomControlValueChanged();	
			
			updateControlState();
			return true;
		}
		else
			return false;
	}
	private void updateCatsReferral(int action) 
	{
		CatsReferralVo voRef = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (action == ACTIONED) 
		{
			if (voRef.getHasRejectedInv() == null)
				return;
			
			voRef.setHasRejectedInv(null);
		}
		
		if (action == DNAED) 
			voRef.setHasDNAApptsForReview(Boolean.FALSE);
		
		if (action == CANCELLED) 
		{
			voRef.setHasCancelledApptsForReview(Boolean.FALSE);
			for (int i = 0 ; voRef.getAppointmentsIsNotNull()&& i < voRef.getAppointments().size() ; i++)
			{
				if (voRef.getAppointments().get(i).getApptStatusIsNotNull()
					&& voRef.getAppointments().get(i).getApptStatus().equals(Status_Reason.CANCELLED))
						voRef.getAppointments().get(i).setWasReviewed(true);
			}
		}

		String[] arrErrors = voRef.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try 
		{
			voRef = domain.saveCatsReferral(voRef);
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
	}

	@Override
	protected void onGrdInvestigationsSelectionChanged() throws PresentationLogicException 
	{
		updateControlState();
	}

	@Override
	protected void onBtnBookSpecimenCollectClick() throws PresentationLogicException
	{		
		if (isReferralEndOfCare())
			return;

		form.getGlobalContext().RefMan.setSpecimenWorkListItem(null);
		engine.open(form.getForms().RefMan.BookSpecimenAppointmentDialog);
	}

	@Override
	protected void onBtnBookTheatreClick() throws PresentationLogicException
	{
		bookTheatreAppt();
	}

	// /////////////////////////////////////////
	// component interface methods below here //
	// /////////////////////////////////////////
	
	/**
	 * getValue
	 */
	public IReferralApptDetail getValue()
	{
		return form.getLocalContext().getReferralApptDetail();
	}

	/**
	 * setValue
	 */
	public void setValue(IReferralApptDetail iReferralApptDetail)
	{
		form.getLocalContext().setAction(null);
		form.getLocalContext().setAssociatedICPCompleted(domain.isReferralICPCompleted(form.getGlobalContext().RefMan.getCatsReferral()));
		if(! Boolean.TRUE.equals(form.getLocalContext().getWasElectiveListTab()))	//wdev-18365
			form.lyrSelect().showtabAppInvs();
		else
			form.getLocalContext().setWasElectiveListTab(null);
		
		// WDEV-18387 
		if (Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && Boolean.TRUE.equals(iReferralApptDetail.getIReferralApptDetailHasRTTClockImpact()))
			form.getLocalContext().setbDisplayRttCurrentStatusFields(true);
		else
			form.getLocalContext().setbDisplayRttCurrentStatusFields(false);
		
		populateScreenFromData(iReferralApptDetail);
	}
	private boolean isAssociatedICPCompleted()
	{
		return form.getLocalContext().getAssociatedICPCompletedIsNotNull() && form.getLocalContext().getAssociatedICPCompleted().booleanValue();
	}
	public void initialise(Boolean canOrderInvestigations)
	{
		form.getLocalContext().setAssociatedICPCompleted(domain.isReferralICPCompleted(form.getGlobalContext().RefMan.getCatsReferral()));
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setReferralApptDetail(null);
		form.getLocalContext().setAction(null);
		form.getLocalContext().setbCanOrderInvestigation(canOrderInvestigations);
		form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
		form.getLocalContext().setWasElectiveListTab(null);  //wdev-18365
		//WDEV-18488 - moved to updateControlsState
		/*if(form.getMode() == FormMode.EDIT)
		{
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && form.getLocalContext().getbReferralAccepted());
		}
		*/
		updateOrderInvestigationButtonState(canOrderInvestigations);
			
		form.getLocalContext().setImportResultsConfigVo(domain.getImportResultsConfig());
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
				
		clearScreen();
		setActionedDNAedAndCancelledButtons();
		updateControlState();
		
	}

	private void updateOrderInvestigationButtonState(Boolean canOrderInvestigations)
	{
		// WDEV-11117
		if (FormMode.EDIT.equals(form.getMode()))
		{
			if (Boolean.TRUE.equals(canOrderInvestigations))
				form.lyrSelect().tabAppInvs().btnOrderInv().setEnabled(Boolean.TRUE.equals(form.getLocalContext().getbReferralAccepted()));
			else
				form.lyrSelect().tabAppInvs().btnOrderInv().setEnabled(false);
		}
	}
	
	public String[] validate()
	{
		if(form.getLocalContext().getReferralApptDetailIsNotNull())
		{
			if(form.getLocalContext().getReferralApptDetail() instanceof ValueObject)
				return ((ValueObject)form.getLocalContext().getReferralApptDetail()).validate();
		}
		return null;
	}

	public ReferralAppointmentDetailsAction getAction()
	{
		return form.getLocalContext().getAction();
	}

	public void setReferralAccepted() 
	{
		form.getLocalContext().setbReferralAccepted(Boolean.TRUE);
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(!isAssociatedICPCompleted() && form.getLocalContext().getbReferralAccepted());
		
		updateOrderInvestigationButtonState(form.getLocalContext().getbCanOrderInvestigation());
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnImportResult().setEnabled(form.getLocalContext().getbReferralAccepted() && clinicalInvestigationExists());
		updateControlState();
	}

	public void enableBookingButton() 
	{
		if (form.getMode().equals(FormMode.EDIT))
			form.lyrSelect().tabAppInvs().btnBookAppt().setEnabled(true);
	}

	public Booking_AppointmentRefVo getSelectedBookedAppointment()
	{
		if(form.lyrSelect().tabAppInvs().grdAppts().getValue() != null && isApptStatusEqual(form.lyrSelect().tabAppInvs().grdAppts().getValue(), Status_Reason.BOOKED))
			return form.lyrSelect().tabAppInvs().grdAppts().getValue();
		
		return null;	
	}	
	// /////////////////////////////////////////
	// end component interface methods here //
	// /////////////////////////////////////////

	@Override
	protected void onBtnCancelReviewedClick() throws PresentationLogicException 
	{
		updateCatsReferral(CANCELLED);
		form.lyrSelect().tabAppInvs().btnCancelReviewed().setVisible(false);
	}

	@Override
	protected void onBtnDNAReviewedClick() throws PresentationLogicException 
	{
		updateCatsReferral(DNAED);
		form.lyrSelect().tabAppInvs().btnDNAReviewed().setVisible(false);
	}

	@Override
	protected void onlyrSelectTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrSelect().tabWaitingList()))
		{
			populateWaitingListGrid();
		}
		//WDEV-18449 
		if (tab.equals(form.lyrSelect().tabAppInvs()))
		{
			form.getLocalContext().setAction(ReferralAppointmentDetailsAction.REFRESH);
			form.fireCustomControlValueChanged();
		}
	}

	private void populateWaitingListGrid()
	{
		form.lyrSelect().tabWaitingList().grdWaitingList().getRows().clear();

		PatientElectiveListForReferralDetailsVoCollection waitingList = domain.getWaitingListForReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (waitingList == null)
		{
			updateControlState();
			return;
		}

		for (int i = 0; i < waitingList.size(); i++)
		{
			grdWaitingListRow newRow = form.lyrSelect().tabWaitingList().grdWaitingList().getRows().newRow();

			newRow.setColName(waitingList.get(i).getElectiveList() != null ? waitingList.get(i).getElectiveList().getWaitingListName() : "");
			newRow.setProcedure(waitingList.get(i) != null ? waitingList.get(i).getPrimaryProcedureIsNotNull()? waitingList.get(i).getPrimaryProcedure().getProcedureName() : "" : "");
			newRow.setColStatus(waitingList.get(i).getElectiveListStatus() != null && waitingList.get(i).getElectiveListStatus().getElectiveListStatus() != null ? waitingList.get(i).getElectiveListStatus().getElectiveListStatus().getText() : "");
			newRow.setTooltipForColStatus(waitingList.get(i).getElectiveListStatus() != null && waitingList.get(i).getElectiveListStatus().getElectiveListStatus() != null && WaitingListStatus.REMOVED.equals(waitingList.get(i).getElectiveListStatus().getElectiveListStatus())? "Status: " +waitingList.get(i).getElectiveListStatus().getElectiveListStatus().getText()+ "<br> Removal Reason: " +(waitingList.get(i).getElectiveListStatus().getRemovalReasonIsNotNull() ? waitingList.get(i).getElectiveListStatus().getRemovalReason(): "")  : ""); //WDEV-18564
			
			newRow.setColDateOnList(waitingList.get(i).getDateOnList() != null ? waitingList.get(i).getDateOnList().toString() : "");

			if (waitingList.get(i).getTCIDetails() != null)
			{
				newRow.setColTciDate(waitingList.get(i).getTCIDetails() != null && waitingList.get(i).getTCIDetails().getTCIDateIsNotNull() ? waitingList.get(i).getTCIDetails().getTCIDate().toString() : "");
				newRow.setColTciTime(waitingList.get(i).getTCIDetails() != null && waitingList.get(i).getTCIDetails().getTCITimeIsNotNull() ? waitingList.get(i).getTCIDetails().getTCITime().toString() : "");				
			}
			
			newRow.setValue(waitingList.get(i));
		}
		
		updateControlState();
	}

	
	@Override
	protected void onGrdWaitingListSelectionChanged() throws PresentationLogicException
	{
		//WDEV-18391
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.lyrSelect().tabWaitingList().grdWaitingList().getValue());
		updateControlState();
	}

	private void cancelTCI()
	{
		//WDEV-18449 -- start
		ReferralAppointmentDetailsBookingAppointmentVo appointmentsDetails = null;
		Boolean tciHasAppointment = false;
		if (form.lyrSelect().tabWaitingList().grdWaitingList().getValue() != null && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetailsIsNotNull() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointmentIsNotNull() && form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment().getTheatreBookingIsNotNull())
		{
			appointmentsDetails = form.lyrSelect().tabWaitingList().grdWaitingList().getValue().getTCIDetails().getAppointment();
			form.getGlobalContext().Scheduling.setApptCancelStatus(setAppointmentStatus(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList()));
			tciHasAppointment = true;
		}
		//WDEV-18449 -- end
		
		try
		{
			domain.cancelTCI(form.lyrSelect().tabWaitingList().grdWaitingList().getValue(), form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		//WDEV-18449 -- start
		if (tciHasAppointment && form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList() != null && Boolean.TRUE.equals(form.getGlobalContext().RefMan.getTCIOutcomeForPatientElectiveList().getCancelTheatreAppointment()))
		{
			form.getLocalContext().setApptToCancel(appointmentsDetails);
			cancelAppt(true);
			setActionedDNAedAndCancelledButtons();
		}
		//WDEV-18449 -- end
	}
	
	private Appointment_StatusVo setAppointmentStatus(TCIOutcomeForPatientElectiveListVo tciOutcomeForPatientElectiveList)
	{
		if (tciOutcomeForPatientElectiveList != null)
		{
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			voApptStatus.setStatusReason(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_PATIENT_2.equals(tciOutcomeForPatientElectiveList.getOutcome()) ? Status_Reason.PATIENTCANCELLED : Status_Reason.HOSPITALCANCELLED);
			voApptStatus.setRebookSelected(false);	
			return voApptStatus;			
		}
		return null;
	}

	@Override
	protected void onBtnTheatreERODClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] {ERODType.ELECTIVE});
	}

	@Override
	protected void onBtnOutpatientERODClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] {ERODType.OUTPATIENT});
	}

	//WDEV-18488  - to refresh controls on component when called from Referral Details form
	public void refreshComponentScreenControls(Boolean canOrderInvestigations, Boolean wasReferralChangedToEOC)
	{
		setActionedDNAedAndCancelledButtons();
		form.getLocalContext().setbReferralAccepted(!wasReferralChangedToEOC);
		updateOrderInvestigationButtonState(canOrderInvestigations);
		updateControlState();
		
	}	
}
