// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralappointmentdetailscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSelectLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabAppInvsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdInvestigationsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInvestigationsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColOrdInvApptReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColOrdInvApptReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColOrdInvApptOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColOrdInvAppt(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.RefMan.vo.OrderInvApptListVo getColOrdInvAppt()
				{
					return (ims.RefMan.vo.OrderInvApptListVo)super.row.get(0);
				}
				public void setColOrdInvAppt(ims.RefMan.vo.OrderInvApptListVo value)
				{
					super.row.set(0, value);
				}
				public void setCellColOrdInvApptTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForcolImage(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(1);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(1, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolDateReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolDateReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolDateOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForcolDate(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Date getcolDate()
				{
					return (ims.framework.utils.Date)super.row.get(2);
				}
				public void setcolDate(ims.framework.utils.Date value)
				{
					super.row.set(2, value);
				}
				public void setCellcolDateTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolInvestigationReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolInvestigationReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolInvestigationOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForcolInvestigation(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getcolInvestigation()
				{
					return (String)super.row.get(3);
				}
				public void setcolInvestigation(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolInvestigationTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolServiceReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolServiceOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForcolService(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getcolService()
				{
					return (String)super.row.get(4);
				}
				public void setcolService(String value)
				{
					super.row.set(4, value);
				}
				public void setCellcolServiceTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolLocationReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolLocationOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolLocation(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getcolLocation()
				{
					return (String)super.row.get(5);
				}
				public void setcolLocation(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolLocationTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setcolAPPTVOReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean iscolAPPTVOReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showcolAPPTVOOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForcolAPPTVO(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getcolAPPTVO()
				{
					return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)super.row.get(6);
				}
				public void setcolAPPTVO(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					super.row.set(6, value);
				}
				public void setCellcolAPPTVOTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setcolApptDateReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean iscolApptDateReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showcolApptDateOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForcolApptDate(String value)
				{
					super.row.setTooltip(7, value);
				}
				public ims.framework.utils.Date getcolApptDate()
				{
					return (ims.framework.utils.Date)super.row.get(7);
				}
				public void setcolApptDate(ims.framework.utils.Date value)
				{
					super.row.set(7, value);
				}
				public void setCellcolApptDateTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setcolApptStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean iscolApptStatusReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showcolApptStatusOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForcolApptStatus(String value)
				{
					super.row.setTooltip(8, value);
				}
				public String getcolApptStatus()
				{
					return (String)super.row.get(8);
				}
				public void setcolApptStatus(String value)
				{
					super.row.set(8, value);
				}
				public void setCellcolApptStatusTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo getValue()
				{
					return (ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInvestigationsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInvestigationsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInvestigationsRow get(int index)
				{
					return new grdInvestigationsRow(super.collection.get(index));
				}
				public grdInvestigationsRow newRow()
				{
					return new grdInvestigationsRow(super.collection.newRow());
				}
				public grdInvestigationsRow newRow(boolean autoSelect)
				{
					return new grdInvestigationsRow(super.collection.newRow(autoSelect));
				}
				public grdInvestigationsRow newRowAt(int index)
				{
					return new grdInvestigationsRow(super.collection.newRowAt(index));
				}
				public grdInvestigationsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInvestigationsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInvestigationsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVoCollection getValues()
				{
					ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVoCollection listOfValues = new ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo getValue()
				{
					return (ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo value)
				{
					super.grid.setValue(value);
				}
				public grdInvestigationsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInvestigationsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInvestigationsRowCollection getRows()
				{
					return new grdInvestigationsRowCollection(super.grid.getRows());
				}
				public grdInvestigationsRow getRowByValue(ims.ocrr.vo.ReferralAppointmentDetailsOrderInvestigationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInvestigationsRow(row);
				}
				public void setColOrdInvApptHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColOrdInvApptHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolInvestigationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolInvestigationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setcolAPPTVOHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getcolAPPTVOHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setcolApptDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getcolApptDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setcolApptStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getcolApptStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
			}
			public static class grdApptsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdApptsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setcolDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolServiceReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolServiceOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolService()
				{
					return (String)super.row.get(1);
				}
				public void setcolService(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolServiceTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolClinicReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolClinicReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolClinicOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolClinic()
				{
					return (String)super.row.get(2);
				}
				public void setcolClinic(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolClinicTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(3);
				}
				public ims.scheduling.vo.lookups.Status_Reason getcolStatus()
				{
					return (ims.scheduling.vo.lookups.Status_Reason)super.row.get(3);
				}
				public void setcolStatus(ims.scheduling.vo.lookups.Status_Reason value)
				{
					super.row.set(3, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getValue()
				{
					return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdApptsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdApptsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdApptsRow get(int index)
				{
					return new grdApptsRow(super.collection.get(index));
				}
				public grdApptsRow newRow()
				{
					return new grdApptsRow(super.collection.newRow());
				}
				public grdApptsRow newRow(boolean autoSelect)
				{
					return new grdApptsRow(super.collection.newRow(autoSelect));
				}
				public grdApptsRow newRowAt(int index)
				{
					return new grdApptsRow(super.collection.newRowAt(index));
				}
				public grdApptsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdApptsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdApptsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection getValues()
				{
					ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection listOfValues = new ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getValue()
				{
					return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					super.grid.setValue(value);
				}
				public grdApptsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdApptsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdApptsRowCollection getRows()
				{
					return new grdApptsRowCollection(super.grid.getRows());
				}
				public grdApptsRow getRowByValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdApptsRow(row);
				}
				public void setcolDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolClinicHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolClinicHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 182, 94, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Investigations :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointments:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 131, 63, 45, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 131, 33, 45, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 724, 364, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actioned", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 288, 364, 160, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Book Specimen Collection", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 160, 364, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Import Result", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 364, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Order Investigations", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 168, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancelled Appt Reviewed + Remove From Worklist", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 91, 168, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DNA Appt reviewed + Remove from Worklist", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 62, 120, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Book Theatre", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 120, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Book Appointment", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 828, 156, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdInvestigationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuInvestigstionsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInvestigationsTemp);
				grdInvestigationsGrid grdInvestigations = (grdInvestigationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvestigationsGrid.class, m_grdInvestigationsTemp);
				grdInvestigations.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigations.addImageColumn(" ", 0, 0, 25, true, 0);
				grdInvestigations.addDateColumn("Order Date", 0, 0, 100, true, true, null, false, 1, true);
				grdInvestigations.addStringColumn("Investigation", 0, 0, 190, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigations.addStringColumn("Service", 0, 0, 135, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigations.addStringColumn("Location", 0, 0, 135, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigations.addStringColumn(" ", 0, 0, 0, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigations.addDateColumn("Appt Date", 0, 0, 90, true, true, null, false, 1, true);
				grdInvestigations.addStringColumn("Appt Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdInvestigations);
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 187, 8, 649, 168, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdApptsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdApptsTemp);
				grdApptsGrid grdAppts = (grdApptsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptsGrid.class, m_grdApptsTemp);
				grdAppts.addStringColumn("Date/Time", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppts.addStringColumn("Service", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppts.addStringColumn("Clinic", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppts.addComboBoxColumn("Status", 0, 0, -1, true, true, false, false, true, -1);
				super.addGrid(grdAppts);
			}

			public Button btnTheatreEROD()
			{
				return (Button)super.getControl(2);
			}
			public Button btnOutpatientEROD()
			{
				return (Button)super.getControl(3);
			}
			public Button btnActioned()
			{
				return (Button)super.getControl(4);
			}
			public Button btnBookSpecimenCollect()
			{
				return (Button)super.getControl(5);
			}
			public Button btnImportResult()
			{
				return (Button)super.getControl(6);
			}
			public Button btnOrderInv()
			{
				return (Button)super.getControl(7);
			}
			public Button btnCancelReviewed()
			{
				return (Button)super.getControl(8);
			}
			public Button btnDNAReviewed()
			{
				return (Button)super.getControl(9);
			}
			public Button btnBookTheatre()
			{
				return (Button)super.getControl(10);
			}
			public Button btnBookAppt()
			{
				return (Button)super.getControl(11);
			}
			public grdInvestigationsGrid grdInvestigations()
			{
				return (grdInvestigationsGrid)super.getGrid(0);
			}
			public grdApptsGrid grdAppts()
			{
				return (grdApptsGrid)super.getGrid(1);
			}
		}
		public static class tabWaitingListContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdWaitingListRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdWaitingListRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setProcedureReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isProcedureReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showProcedureOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForProcedure(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getProcedure()
				{
					return (String)super.row.get(1);
				}
				public void setProcedure(String value)
				{
					super.row.set(1, value);
				}
				public void setCellProcedureTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColStatus()
				{
					return (String)super.row.get(2);
				}
				public void setColStatus(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDateOnListReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDateOnListReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDateOnListOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDateOnList(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDateOnList()
				{
					return (String)super.row.get(3);
				}
				public void setColDateOnList(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDateOnListTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColTciDateReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColTciDateReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColTciDateOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColTciDate(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColTciDate()
				{
					return (String)super.row.get(4);
				}
				public void setColTciDate(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColTciDateTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColTciTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColTciTimeReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColTciTimeOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColTciTime(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColTciTime()
				{
					return (String)super.row.get(5);
				}
				public void setColTciTime(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColTciTimeTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.RefMan.vo.PatientElectiveListForReferralDetailsVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListForReferralDetailsVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListForReferralDetailsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdWaitingListRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdWaitingListRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdWaitingListRow get(int index)
				{
					return new grdWaitingListRow(super.collection.get(index));
				}
				public grdWaitingListRow newRow()
				{
					return new grdWaitingListRow(super.collection.newRow());
				}
				public grdWaitingListRow newRow(boolean autoSelect)
				{
					return new grdWaitingListRow(super.collection.newRow(autoSelect));
				}
				public grdWaitingListRow newRowAt(int index)
				{
					return new grdWaitingListRow(super.collection.newRowAt(index));
				}
				public grdWaitingListRow newRowAt(int index, boolean autoSelect)
				{
					return new grdWaitingListRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdWaitingListGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection getValues()
				{
					ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection listOfValues = new ims.RefMan.vo.PatientElectiveListForReferralDetailsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.PatientElectiveListForReferralDetailsVo getValue()
				{
					return (ims.RefMan.vo.PatientElectiveListForReferralDetailsVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.PatientElectiveListForReferralDetailsVo value)
				{
					super.grid.setValue(value);
				}
				public grdWaitingListRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdWaitingListRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdWaitingListRowCollection getRows()
				{
					return new grdWaitingListRowCollection(super.grid.getRows());
				}
				public grdWaitingListRow getRowByValue(ims.RefMan.vo.PatientElectiveListForReferralDetailsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdWaitingListRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setProcedureHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getProcedureHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDateOnListHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDateOnListHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColTciDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColTciDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColTciTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColTciTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 11, 10, 824, 376, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdWaitingListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdWaitingListTemp);
				grdWaitingListGrid grdWaitingList = (grdWaitingListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdWaitingListGrid.class, m_grdWaitingListTemp);
				grdWaitingList.addStringColumn("Name", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWaitingList.addStringColumn("Procedure", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWaitingList.addStringColumn("Status", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWaitingList.addStringColumn("Date On List", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWaitingList.addStringColumn("TCI Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdWaitingList.addStringColumn("TCI Time", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdWaitingList);
			}

			public grdWaitingListGrid grdWaitingList()
			{
				return (grdWaitingListGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 852, 420, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAppInvs = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Appointments / Investigations", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAppInvsContainer m_tabAppInvsContainer = (tabAppInvsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAppInvsContainer.class, m_tabAppInvs, factory);
			super.addContainer(m_tabAppInvs, m_tabAppInvsContainer);
			ims.framework.utils.SizeInfo m_tabAppInvsDesignSize = new ims.framework.utils.SizeInfo(852, 420);
			ims.framework.utils.SizeInfo m_tabAppInvsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabAppInvsContainer.setContext(form, appForm, m_tabAppInvs, loader, form_images_local, contextMenus, startControlID, m_tabAppInvsDesignSize, m_tabAppInvsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 852, 420, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabWaitingList = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Elective List / TCI", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabWaitingListContainer m_tabWaitingListContainer = (tabWaitingListContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWaitingListContainer.class, m_tabWaitingList, factory);
			super.addContainer(m_tabWaitingList, m_tabWaitingListContainer);
			ims.framework.utils.SizeInfo m_tabWaitingListDesignSize = new ims.framework.utils.SizeInfo(852, 420);
			ims.framework.utils.SizeInfo m_tabWaitingListRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabWaitingListContainer.setContext(form, appForm, m_tabWaitingList, loader, form_images_local, contextMenus, startControlID, m_tabWaitingListDesignSize, m_tabWaitingListRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabAppInvs().setVisible(false);
			tabWaitingList().setVisible(false);
		}
		public void settabAppInvsEnabled(boolean value)
		{
			tabAppInvs().setEnabled(value);
		}
		public void settabWaitingListEnabled(boolean value)
		{
			tabWaitingList().setEnabled(value);
		}
		public void showtabAppInvs()
		{
			tabWaitingList().setVisible(false);
			tabAppInvs().setVisible(true);
		}
		public void showtabWaitingList()
		{
			tabAppInvs().setVisible(false);
			tabWaitingList().setVisible(true);
		}

		public tabAppInvsContainer tabAppInvs()
		{
			return (tabAppInvsContainer)super.layers.get(0);
		}
		public tabWaitingListContainer tabWaitingList()
		{
			return (tabWaitingListContainer)super.layers.get(1);
		}
	}
	public static class grdStatusHistoryRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdStatusHistoryRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolStatus(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(0);
		}
		public void setcolStatus(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDateTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDateTimeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolDateTime(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolDateTime()
		{
			return (String)super.row.get(1);
		}
		public void setcolDateTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDateTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdStatusHistoryRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdStatusHistoryRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdStatusHistoryRow get(int index)
		{
			return new grdStatusHistoryRow(super.collection.get(index));
		}
		public grdStatusHistoryRow newRow()
		{
			return new grdStatusHistoryRow(super.collection.newRow());
		}
		public grdStatusHistoryRow newRow(boolean autoSelect)
		{
			return new grdStatusHistoryRow(super.collection.newRow(autoSelect));
		}
		public grdStatusHistoryRow newRowAt(int index)
		{
			return new grdStatusHistoryRow(super.collection.newRowAt(index));
		}
		public grdStatusHistoryRow newRowAt(int index, boolean autoSelect)
		{
			return new grdStatusHistoryRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdStatusHistoryGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdStatusHistoryRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdStatusHistoryRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdStatusHistoryRowCollection getRows()
		{
			return new grdStatusHistoryRowCollection(super.grid.getRows());
		}
		public grdStatusHistoryRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdStatusHistoryRow(row);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(864, 560);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuInvestigstionsMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuInvestigstionsMenuCancelAppointmentItem = factory.createMenuItem(startControlID.intValue() + 1, "Cancel Appointment ", true, false, new Integer(116126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600001)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuCancelAppointmentItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuRebookAppointmentItem = factory.createMenuItem(startControlID.intValue() + 2, "Rebook Appointment ", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600002)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuRebookAppointmentItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuViewOrderItem = factory.createMenuItem(startControlID.intValue() + 3, "View Order", true, false, new Integer(116104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600003)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuViewOrderItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuViewResultItem = factory.createMenuItem(startControlID.intValue() + 4, "View Result ", true, false, new Integer(116130), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600004)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuViewResultItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuViewRejectionDetailsItem = factory.createMenuItem(startControlID.intValue() + 5, "View Rejection Details ", true, false, new Integer(116134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600005)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuViewRejectionDetailsItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 6, "Enter Appointment Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600005)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit Collection Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2600005)))
			contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuCHANGE_APPTItem = factory.createMenuItem(startControlID.intValue() + 8, "Change Appointment", true, false, new Integer(102150), true, false);
		contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuCHANGE_APPTItem);
		contextMenus.RefMan.contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 9, "Cancel Theatre Appointment", true, false, new Integer(102148), true, false);
		contextMenus.RefMan.contextMenuInvestigstionsMenu.add(contextMenus.RefMan.contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuInvestigstionsMenu);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 10, "Book New Appointment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550001)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem = factory.createMenuItem(startControlID.intValue() + 11, "Cancel Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550002)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 12, "Rebook Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550003)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 13, "Order Investigation", true, false, new Integer(116112), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550008)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 14, "Book Theatre Appointment", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550004)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 15, "Cancel Theatre Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550005)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 16, "Rebook Theatre Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550006)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem = factory.createMenuItem(startControlID.intValue() + 17, "View Appointment History", true, false, new Integer(102555), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550007)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem = factory.createMenuItem(startControlID.intValue() + 18, "Cancel TCI", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320001)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem = factory.createMenuItem(startControlID.intValue() + 19, "Remove Elective List", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320002)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem = factory.createMenuItem(startControlID.intValue() + 20, "Add New Waiting List", true, false, new Integer(102330), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320003)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem = factory.createMenuItem(startControlID.intValue() + 21, "Add New Booked List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320004)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem = factory.createMenuItem(startControlID.intValue() + 22, "Add New Planned List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320005)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem = factory.createMenuItem(startControlID.intValue() + 23, "View Elective List", true, false, new Integer(102223), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320006)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem);
		contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem = factory.createMenuItem(startControlID.intValue() + 24, "Book Theatre", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5320007)))
			contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu.add(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem);
		form.registerMenu(contextMenus.RefMan.contextMenuWaitingListForReferralDetailsCancelMenu);


		// Layer Clasess
		lyrSelectLayer m_lyrSelectLayer = (lyrSelectLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSelectLayer.class, this, factory);
		super.addLayer(m_lyrSelectLayer);
		m_lyrSelectLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pathway ID:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 411, 37, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "RTT Current Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 411, 62, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status History:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 177, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Referral Letter Received:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referred By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Referral Received:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 411, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "UBRN:", new Integer(1), null, new Integer(0)}));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 196, 32, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(20), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 528, 35, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 196, 8, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 196, 56, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 528, 8, 320, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 196, 104, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 196, 80, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 528, 62, 320, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdStatusHistoryTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdStatusHistoryTemp);
		grdStatusHistoryGrid grdStatusHistory = (grdStatusHistoryGrid)GridFlyweightFactory.getInstance().createGridBridge(grdStatusHistoryGrid.class, m_grdStatusHistoryTemp);
		grdStatusHistory.addStringColumn("Status", 0, 0, 140, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdStatusHistory.addStringColumn("Date/Time", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdStatusHistory);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSelectLayer lyrSelect()
	{
		return (lyrSelectLayer)super.getLayer(0);
	}
	public Label lblRttCurrentStatus()
	{
		return (Label)super.getControl(3);
	}
	public TextBox txtPathwayID()
	{
		return (TextBox)super.getControl(10);
	}
	public TextBox txtRTTCurrentStatus()
	{
		return (TextBox)super.getControl(11);
	}
	public TextBox txtService()
	{
		return (TextBox)super.getControl(12);
	}
	public TextBox txtReferredBy()
	{
		return (TextBox)super.getControl(13);
	}
	public TextBox txtUBRN()
	{
		return (TextBox)super.getControl(14);
	}
	public DateControl dteReferralReceived()
	{
		return (DateControl)super.getControl(15);
	}
	public DateControl dteReferral()
	{
		return (DateControl)super.getControl(16);
	}
	public grdStatusHistoryGrid grdStatusHistory()
	{
		return (grdStatusHistoryGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			OCRR = new OCRRForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				CancelAppointmentDialog = new LocalFormName(114160);
				AppointmentHistoryDialog = new LocalFormName(135103);
			}
			public final FormName CancelAppointmentDialog;
			public final FormName AppointmentHistoryDialog;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
				ImportResultsDialog = new LocalFormName(116149);
				RejectedInvestigationDetails = new LocalFormName(116150);
				ResultDialog = new LocalFormName(116128);
				OrderSummaryDialog = new LocalFormName(116132);
			}
			public final FormName SelectAndOrderDialog;
			public final FormName ImportResultsDialog;
			public final FormName RejectedInvestigationDetails;
			public final FormName ResultDialog;
			public final FormName OrderSummaryDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointmentDialog = new LocalFormName(134134);
				BookSpecimenAppointmentDialog = new LocalFormName(134139);
				EnterAppointmentDetails = new LocalFormName(134146);
				BookedAppointments = new LocalFormName(134113);
				BookTheatreDialog = new LocalFormName(134159);
				BookTheatreSlot = new LocalFormName(134208);
				ERODDialog = new LocalFormName(134216);
				CancelTCIForPatientElectiveListDialog = new LocalFormName(134227);
				RemoveFromElectiveList = new LocalFormName(134229);
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
			}
			public final FormName BookAppointmentDialog;
			public final FormName BookSpecimenAppointmentDialog;
			public final FormName EnterAppointmentDetails;
			public final FormName BookedAppointments;
			public final FormName BookTheatreDialog;
			public final FormName BookTheatreSlot;
			public final FormName ERODDialog;
			public final FormName CancelTCIForPatientElectiveListDialog;
			public final FormName RemoveFromElectiveList;
			public final FormName NewElectiveListTCIErodDialog;
		}

		public SchedulingForms Scheduling;
		public OCRRForms OCRR;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Information;
		}
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ReferralApptDetail = new ims.framework.ContextVariable("ReferralApptDetail", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ReferralApptDetail_" + componentIdentifier + "");
			cxl_Action = new ims.framework.ContextVariable("Action", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__Action_" + componentIdentifier + "");
			cxl_bReferralAccepted = new ims.framework.ContextVariable("bReferralAccepted", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__bReferralAccepted_" + componentIdentifier + "");
			cxl_ApptToCancel = new ims.framework.ContextVariable("ApptToCancel", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier + "");
			cxl_ImportResultsConfigVo = new ims.framework.ContextVariable("ImportResultsConfigVo", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ImportResultsConfigVo_" + componentIdentifier + "");
			cxl_bCanOrderInvestigation = new ims.framework.ContextVariable("bCanOrderInvestigation", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__bCanOrderInvestigation_" + componentIdentifier + "");
			cxl_CollectedWorkListItems = new ims.framework.ContextVariable("CollectedWorkListItems", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__CollectedWorkListItems_" + componentIdentifier + "");
			cxl_AssociatedICPCompleted = new ims.framework.ContextVariable("AssociatedICPCompleted", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__AssociatedICPCompleted_" + componentIdentifier + "");
			cxl_WasElectiveListTab = new ims.framework.ContextVariable("WasElectiveListTab", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__WasElectiveListTab_" + componentIdentifier + "");
			cxl_ReferralCancelledByProvider = new ims.framework.ContextVariable("ReferralCancelledByProvider", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ReferralCancelledByProvider_" + componentIdentifier + "");
			cxl_bDisplayRttCurrentStatusFields = new ims.framework.ContextVariable("bDisplayRttCurrentStatusFields", prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__bDisplayRttCurrentStatusFields_" + componentIdentifier + "");
		}
		
		public boolean getReferralApptDetailIsNotNull()
		{
			return !cxl_ReferralApptDetail.getValueIsNull(context);
		}
		public ims.vo.interfaces.IReferralApptDetail getReferralApptDetail()
		{
			return (ims.vo.interfaces.IReferralApptDetail)cxl_ReferralApptDetail.getValue(context);
		}
		public void setReferralApptDetail(ims.vo.interfaces.IReferralApptDetail value)
		{
			cxl_ReferralApptDetail.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralApptDetail = null;
		public boolean getActionIsNotNull()
		{
			return !cxl_Action.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.ReferralAppointmentDetailsAction getAction()
		{
			return (ims.RefMan.vo.enums.ReferralAppointmentDetailsAction)cxl_Action.getValue(context);
		}
		public void setAction(ims.RefMan.vo.enums.ReferralAppointmentDetailsAction value)
		{
			cxl_Action.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Action = null;
		public boolean getbReferralAcceptedIsNotNull()
		{
			return !cxl_bReferralAccepted.getValueIsNull(context);
		}
		public Boolean getbReferralAccepted()
		{
			return (Boolean)cxl_bReferralAccepted.getValue(context);
		}
		public void setbReferralAccepted(Boolean value)
		{
			cxl_bReferralAccepted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bReferralAccepted = null;
		public boolean getApptToCancelIsNotNull()
		{
			return !cxl_ApptToCancel.getValueIsNull(context);
		}
		public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getApptToCancel()
		{
			return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)cxl_ApptToCancel.getValue(context);
		}
		public void setApptToCancel(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
		{
			cxl_ApptToCancel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptToCancel = null;
		public boolean getImportResultsConfigVoIsNotNull()
		{
			return !cxl_ImportResultsConfigVo.getValueIsNull(context);
		}
		public ims.ocrr.vo.ImportResultsConfigVo getImportResultsConfigVo()
		{
			return (ims.ocrr.vo.ImportResultsConfigVo)cxl_ImportResultsConfigVo.getValue(context);
		}
		public void setImportResultsConfigVo(ims.ocrr.vo.ImportResultsConfigVo value)
		{
			cxl_ImportResultsConfigVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ImportResultsConfigVo = null;
		public boolean getbCanOrderInvestigationIsNotNull()
		{
			return !cxl_bCanOrderInvestigation.getValueIsNull(context);
		}
		public Boolean getbCanOrderInvestigation()
		{
			return (Boolean)cxl_bCanOrderInvestigation.getValue(context);
		}
		public void setbCanOrderInvestigation(Boolean value)
		{
			cxl_bCanOrderInvestigation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bCanOrderInvestigation = null;
		public boolean getCollectedWorkListItemsIsNotNull()
		{
			return !cxl_CollectedWorkListItems.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection getCollectedWorkListItems()
		{
			return (ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection)cxl_CollectedWorkListItems.getValue(context);
		}
		public void setCollectedWorkListItems(ims.ocrr.vo.SpecimenWorkListItemLiteVoCollection value)
		{
			cxl_CollectedWorkListItems.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CollectedWorkListItems = null;
		public boolean getAssociatedICPCompletedIsNotNull()
		{
			return !cxl_AssociatedICPCompleted.getValueIsNull(context);
		}
		public Boolean getAssociatedICPCompleted()
		{
			return (Boolean)cxl_AssociatedICPCompleted.getValue(context);
		}
		public void setAssociatedICPCompleted(Boolean value)
		{
			cxl_AssociatedICPCompleted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AssociatedICPCompleted = null;
		public boolean getWasElectiveListTabIsNotNull()
		{
			return !cxl_WasElectiveListTab.getValueIsNull(context);
		}
		public Boolean getWasElectiveListTab()
		{
			return (Boolean)cxl_WasElectiveListTab.getValue(context);
		}
		public void setWasElectiveListTab(Boolean value)
		{
			cxl_WasElectiveListTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasElectiveListTab = null;
		public boolean getReferralCancelledByProviderIsNotNull()
		{
			return !cxl_ReferralCancelledByProvider.getValueIsNull(context);
		}
		public Boolean getReferralCancelledByProvider()
		{
			return (Boolean)cxl_ReferralCancelledByProvider.getValue(context);
		}
		public void setReferralCancelledByProvider(Boolean value)
		{
			cxl_ReferralCancelledByProvider.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralCancelledByProvider = null;
		public boolean getbDisplayRttCurrentStatusFieldsIsNotNull()
		{
			return !cxl_bDisplayRttCurrentStatusFields.getValueIsNull(context);
		}
		public Boolean getbDisplayRttCurrentStatusFields()
		{
			return (Boolean)cxl_bDisplayRttCurrentStatusFields.getValue(context);
		}
		public void setbDisplayRttCurrentStatusFields(Boolean value)
		{
			cxl_bDisplayRttCurrentStatusFields.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDisplayRttCurrentStatusFields = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class InvestigstionsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CancelAppointment = 1;
				public static final int RebookAppointment = 2;
				public static final int ViewOrder = 3;
				public static final int ViewResult = 4;
				public static final int ViewRejectionDetails = 5;
				public static final int ENTER_APPT_DETAILS = 6;
				public static final int EDIT_COLLECTION_DETAILS = 7;
				public static final int CHANGE_APPT = 8;
				public static final int CANCEL_THEATRE_APPT = 9;
			}
			public void disableAllInvestigstionsMenuMenuItems()
			{
				this.contextMenuInvestigstionsMenuCancelAppointmentItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuRebookAppointmentItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuViewOrderItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuViewResultItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuViewRejectionDetailsItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuCHANGE_APPTItem.setEnabled(false);
				this.contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem.setEnabled(false);
			}
			public void hideAllInvestigstionsMenuMenuItems()
			{
				this.contextMenuInvestigstionsMenuCancelAppointmentItem.setVisible(false);
				this.contextMenuInvestigstionsMenuRebookAppointmentItem.setVisible(false);
				this.contextMenuInvestigstionsMenuViewOrderItem.setVisible(false);
				this.contextMenuInvestigstionsMenuViewResultItem.setVisible(false);
				this.contextMenuInvestigstionsMenuViewRejectionDetailsItem.setVisible(false);
				this.contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem.setVisible(false);
				this.contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem.setVisible(false);
				this.contextMenuInvestigstionsMenuCHANGE_APPTItem.setVisible(false);
				this.contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem.setVisible(false);
			}
			private Menu contextMenuInvestigstionsMenu;
			public ReadOnlyMenuItem getInvestigstionsMenuCancelAppointmentItem()
			{
				return this.contextMenuInvestigstionsMenuCancelAppointmentItem;
			}
			private MenuItem contextMenuInvestigstionsMenuCancelAppointmentItem;
			public ReadOnlyMenuItem getInvestigstionsMenuRebookAppointmentItem()
			{
				return this.contextMenuInvestigstionsMenuRebookAppointmentItem;
			}
			private MenuItem contextMenuInvestigstionsMenuRebookAppointmentItem;
			public ReadOnlyMenuItem getInvestigstionsMenuViewOrderItem()
			{
				return this.contextMenuInvestigstionsMenuViewOrderItem;
			}
			private MenuItem contextMenuInvestigstionsMenuViewOrderItem;
			public ReadOnlyMenuItem getInvestigstionsMenuViewResultItem()
			{
				return this.contextMenuInvestigstionsMenuViewResultItem;
			}
			private MenuItem contextMenuInvestigstionsMenuViewResultItem;
			public ReadOnlyMenuItem getInvestigstionsMenuViewRejectionDetailsItem()
			{
				return this.contextMenuInvestigstionsMenuViewRejectionDetailsItem;
			}
			private MenuItem contextMenuInvestigstionsMenuViewRejectionDetailsItem;
			public ReadOnlyMenuItem getInvestigstionsMenuENTER_APPT_DETAILSItem()
			{
				return this.contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem;
			}
			private MenuItem contextMenuInvestigstionsMenuENTER_APPT_DETAILSItem;
			public ReadOnlyMenuItem getInvestigstionsMenuEDIT_COLLECTION_DETAILSItem()
			{
				return this.contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem;
			}
			private MenuItem contextMenuInvestigstionsMenuEDIT_COLLECTION_DETAILSItem;
			public ReadOnlyMenuItem getInvestigstionsMenuCHANGE_APPTItem()
			{
				return this.contextMenuInvestigstionsMenuCHANGE_APPTItem;
			}
			private MenuItem contextMenuInvestigstionsMenuCHANGE_APPTItem;
			public ReadOnlyMenuItem getInvestigstionsMenuCANCEL_THEATRE_APPTItem()
			{
				return this.contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem;
			}
			private MenuItem contextMenuInvestigstionsMenuCANCEL_THEATRE_APPTItem;
			public final class ReferralAppointmentDetailsComponent implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int BOOK_APPT = 10;
				public static final int CANCEL_APPT = 11;
				public static final int REBOOK_APPT = 12;
				public static final int ORDER_INVESTIGATION = 13;
				public static final int BOOK_THEATRE_APPT = 14;
				public static final int CANCEL_THEATRE_APPT = 15;
				public static final int REBOOK_THEATRE_APPT = 16;
				public static final int VIEW_APPT_HISTORY = 17;
			}
			public void disableAllReferralAppointmentDetailsComponentMenuItems()
			{
				this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem.setEnabled(false);
			}
			public void hideAllReferralAppointmentDetailsComponentMenuItems()
			{
				this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem.setVisible(false);
			}
			private Menu contextMenuReferralAppointmentDetailsComponent;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentBOOK_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentCANCEL_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentREBOOK_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem;
			public final class WaitingListForReferralDetailsCancelMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CANCEL_TCI = 18;
				public static final int REMOVE_ELECTIVE_LIST = 19;
				public static final int ADD_NEW_WAITING_LIST = 20;
				public static final int ADD_NEW_BOOKED_LIST = 21;
				public static final int ADD_NEW_PLANNED_LIST = 22;
				public static final int VIEW_ELECTIVE_LIST = 23;
				public static final int BOOK_THEATRE = 24;
			}
			public void disableAllWaitingListForReferralDetailsCancelMenuMenuItems()
			{
				this.contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem.setEnabled(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem.setEnabled(false);
			}
			public void hideAllWaitingListForReferralDetailsCancelMenuMenuItems()
			{
				this.contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem.setVisible(false);
				this.contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem.setVisible(false);
			}
			private Menu contextMenuWaitingListForReferralDetailsCancelMenu;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuCANCEL_TCIItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuREMOVE_ELECTIVE_LISTItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_WAITING_LISTItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_BOOKED_LISTItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuADD_NEW_PLANNED_LISTItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuVIEW_ELECTIVE_LISTItem;
			public ReadOnlyMenuItem getWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem()
			{
				return this.contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem;
			}
			private MenuItem contextMenuWaitingListForReferralDetailsCancelMenuBOOK_THEATREItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[161];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItem", "BO-1061100014-ID", "ID_SpecimenWorkListItem");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItem", "BO-1061100014-DATETOCOLLECT", "DateToCollect");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItem", "BO-1061100014-SPECIMEN", "Specimen");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-INITIALS", "Initials");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-ID", "ID_TCIOutcomeForPatientElectiveList");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOME", "Outcome");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CHANGEBY", "ChangeBy");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-STATUSDATETIME", "StatusDateTime");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-OUTCOMEREASON", "OutcomeReason");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.TCIOutcomeForPatientElectiveList", "BO-1096100068-CANCELLEDFORNONMEDICALREASON", "CancelledForNonMedicalReason");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_OCRR.PathologyResults.Order", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_Rotherham.AppointmentToLink", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ApptToCancel_" + componentIdentifier, "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralAppointmentDetailsComponent.__internal_x_context__ImportResultsConfigVo_" + componentIdentifier, "BO-1061100017-ID", "ID_ImportResultsConfig");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
