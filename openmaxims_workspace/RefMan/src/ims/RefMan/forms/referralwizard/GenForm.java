// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referralwizard;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrPageLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPagePatientSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 558, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccPatientSearchForm = loader.loadComponent(102276, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccPatientSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(558), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccPatientSearchForm, instance1 } );
				ims.framework.Control m_ccPatientSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccPatientSearchForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPatientSearchControl);
				Menu[] menus1 = m_ccPatientSearchForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.patientsearchcomponent.IComponent ccPatientSearch()
			{
				return (ims.core.forms.patientsearchcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPatientSearchValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPatientSearchVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPatientSearchVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPatientSearchEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPatientSearchEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageDemographicsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 558, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccDemographicsForm = loader.loadComponent(134124, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1009, skipContextValidation);
				//ims.framework.Control m_ccDemographicsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(824), new Integer(558), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1009), m_ccDemographicsForm, instance1 } );
				ims.framework.Control m_ccDemographicsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1009), m_ccDemographicsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDemographicsControl);
				Menu[] menus1 = m_ccDemographicsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.demographicscomponent.IComponent ccDemographics()
			{
				return (ims.core.forms.demographicscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDemographicsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDemographicsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDemographicsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDemographicsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDemographicsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageReferralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 809, 584, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccReferralDetailsForm = loader.loadComponent(134118, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2016, skipContextValidation);
				//ims.framework.Control m_ccReferralDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(8), new Integer(8), new Integer(809), new Integer(584), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2016), m_ccReferralDetailsForm, instance1 } );
				ims.framework.Control m_ccReferralDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2016), m_ccReferralDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReferralDetailsControl);
				Menu[] menus1 = m_ccReferralDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 968, 888, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Recording User :", new Integer(1), null, new Integer(0)}));
			}

			public ims.RefMan.forms.referraldetailscomponent.IComponent ccReferralDetails()
			{
				return (ims.RefMan.forms.referraldetailscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReferralDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReferralDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReferralDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReferralDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReferralDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPayorContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyr1Layer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInsuranceDetailsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmb1ComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmb2ComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Holder Name:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 107, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Membership No:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 139, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Valid From:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 296, 139, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Valid To:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Insurer:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 171, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scale of Cover:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 104, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 120, 168, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 136, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 352, 136, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmb1Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmb1Temp);
						cmb1ComboBox cmb1 = (cmb1ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb1ComboBox.class, m_cmb1Temp);
						super.addComboBox(cmb1);
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmb2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmb2Temp);
						cmb2ComboBox cmb2 = (cmb2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb2ComboBox.class, m_cmb2Temp);
						super.addComboBox(cmb2);
					}
		
					public TextBox txt1()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txt2()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txt3()
					{
						return (TextBox)super.getControl(9);
					}
					public DateControl dte1()
					{
						return (DateControl)super.getControl(10);
					}
					public DateControl dte2()
					{
						return (DateControl)super.getControl(11);
					}
					public cmb1ComboBox cmb1()
					{
						return (cmb1ComboBox)super.getComboBox(0);
					}
					public cmb2ComboBox cmb2()
					{
						return (cmb2ComboBox)super.getComboBox(1);
					}
				}
				public static class tabSelfPayContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
				
					public static class Group1RadioButton extends RadioButtonBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
						{
							if(startTabIndex == null)
								throw new RuntimeException("Invalid startTabIndex ");
							RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 112, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(0, anchoringHelper19.getX(), anchoringHelper19.getY(), anchoringHelper19.getWidth(), "Line by Line", -1);
							RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(1, anchoringHelper20.getX(), anchoringHelper20.getY(), anchoringHelper20.getWidth(), "Package", -1);
						}
						public void setText(Group1Enumeration option, String value)
						{
							if(option != null && option.id >= 0 && value != null)
								control.setText(option.id, value);
						}
						public Group1Enumeration getValue()
						{
							switch (super.control.getValue())
							{
								case -1: return Group1Enumeration.None;
								case 0: return Group1Enumeration.rdo1;
								case 1: return Group1Enumeration.rdo2;
							}
							return null;
						}
						public void setValue(Group1Enumeration value)
						{
							if(value != null)
								super.control.setValue(value.id);
							else
								super.control.setValue(Group1Enumeration.None.id);
						}
						public boolean isEnabled(Group1Enumeration option)
						{
							return super.control.isEnabled(option.id);
						}
						public void setEnabled(Group1Enumeration option, boolean value)
						{
							super.control.setEnabled(option.id, value);
						}
						public boolean isVisible(Group1Enumeration option)
						{
							return super.control.isVisible(option.id);
						}
						public void setVisible(Group1Enumeration option, boolean value)
						{
							super.control.setVisible(option.id, value);
						}
						public void setVisible(boolean value)
						{
							super.control.setVisible(value);
						}
						public void setEnabled(boolean value)
						{
							super.control.setEnabled(value);
						}
					}
					public static class Group1Enumeration implements java.io.Serializable
					{
						private static final long serialVersionUID = 1L;
						public static Group1Enumeration None = new Group1Enumeration(-1);
						public static Group1Enumeration rdo1 = new Group1Enumeration(0);
						public static Group1Enumeration rdo2 = new Group1Enumeration(1);
						private Group1Enumeration(int id)
						{
							this.id = id;
						}
						public boolean equals(Object o)
						{
							return this.id == ((Group1Enumeration)o).id;
						}
						private int id;
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 144, 136, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deposit Amount:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 144, 64, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Package Amount:", new Integer(0), null, new Integer(0)}));
				
						// DecimalBox Controls
						RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 240, 133, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
						RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 240, 61, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
				
						// RadioButton Controls
						RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
						super.addControl(tmpGroup1);
						Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
						Group1.setContext(startTabIndex, designSize, runtimeSize);
						super.addRadioButton(Group1);
					}
		
					public DecimalBox dec1()
					{
						return (DecimalBox)super.getControl(2);
					}
					public DecimalBox dec2()
					{
						return (DecimalBox)super.getControl(3);
					}
					public Group1RadioButton Group1()
					{
						return (Group1RadioButton)super.getRadioButton(0);
					}
				}
				public static class tab3rdPartyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmb3ComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmb4ComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class grd1Row extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grd1Row(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColContactTypeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColContactTypeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColContactTypeOpened()
						{
							super.row.showOpened(0);
						}
						public String getColContactType()
						{
							return (String)super.row.get(0);
						}
						public void setColContactType(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColContactTypeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColContactValueReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColContactValueReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColContactValueOpened()
						{
							super.row.showOpened(1);
						}
						public String getColContactValue()
						{
							return (String)super.row.get(1);
						}
						public void setColContactValue(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColContactValueTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public String getValue()
						{
							return (String)super.row.getValue();
						}
						public void setValue(String value)
						{
							super.row.setValue(value);
						}
					}
					public static class grd1RowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grd1RowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grd1Row get(int index)
						{
							return new grd1Row(super.collection.get(index));
						}
						public grd1Row newRow()
						{
							return new grd1Row(super.collection.newRow());
						}
						public grd1Row newRow(boolean autoSelect)
						{
							return new grd1Row(super.collection.newRow(autoSelect));
						}
						public grd1Row newRowAt(int index)
						{
							return new grd1Row(super.collection.newRowAt(index));
						}
						public grd1Row newRowAt(int index, boolean autoSelect)
						{
							return new grd1Row(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grd1Grid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public String[] getValues()
						{
							String[] listOfValues = new String[this.getRows().size()];
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues[x] = this.getRows().get(x).getValue();
							}
							return listOfValues;
						}
						public String getValue()
						{
							return (String)super.grid.getValue();
						}
						public void setValue(String value)
						{
							super.grid.setValue(value);
						}
						public grd1Row getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grd1Row(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grd1RowCollection getRows()
						{
							return new grd1RowCollection(super.grid.getRows());
						}
						public grd1Row getRowByValue(String value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grd1Row(row);
						}
						public void setColContactTypeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColContactTypeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColContactValueHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColContactValueHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Panel Controls
						RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 512, 43, 280, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Contact Details", new Integer(2), ""}));
				
						// Label Controls
						RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 175, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 46, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 232, 174, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Relationship to client:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 14, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "3rd Party Name:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 120, 11, 664, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 120, 139, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 120, 107, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 120, 75, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 120, 43, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 120, 171, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmb3Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmb3Temp);
						cmb3ComboBox cmb3 = (cmb3ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb3ComboBox.class, m_cmb3Temp);
						super.addComboBox(cmb3);
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 368, 171, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmb4Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmb4Temp);
						cmb4ComboBox cmb4 = (cmb4ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb4ComboBox.class, m_cmb4Temp);
						super.addComboBox(cmb4);
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 520, 67, 264, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						Grid m_grd1Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grd1Temp);
						grd1Grid grd1 = (grd1Grid)GridFlyweightFactory.getInstance().createGridBridge(grd1Grid.class, m_grd1Temp);
						grd1.addStringColumn("Contact Type", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grd1.addStringColumn("Contact Value", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grd1);
					}
		
					public TextBox txt4()
					{
						return (TextBox)super.getControl(5);
					}
					public TextBox txt5()
					{
						return (TextBox)super.getControl(6);
					}
					public TextBox txt6()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txt7()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txt8()
					{
						return (TextBox)super.getControl(9);
					}
					public cmb3ComboBox cmb3()
					{
						return (cmb3ComboBox)super.getComboBox(0);
					}
					public cmb4ComboBox cmb4()
					{
						return (cmb4ComboBox)super.getComboBox(1);
					}
					public grd1Grid grd1()
					{
						return (grd1Grid)super.getGrid(0);
					}
				}
				public static class tabNHSContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmb5ComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contract:", new Integer(1), null, new Integer(0)}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 112, 72, 680, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmb5Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmb5Temp);
						cmb5ComboBox cmb5 = (cmb5ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb5ComboBox.class, m_cmb5Temp);
						super.addComboBox(cmb5);
					}
		
					public cmb5ComboBox cmb5()
					{
						return (cmb5ComboBox)super.getComboBox(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabInsuranceDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Insurance Details", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabInsuranceDetailsContainer m_tabInsuranceDetailsContainer = (tabInsuranceDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInsuranceDetailsContainer.class, m_tabInsuranceDetails, factory);
					super.addContainer(m_tabInsuranceDetails, m_tabInsuranceDetailsContainer);
					ims.framework.utils.SizeInfo m_tabInsuranceDetailsDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabInsuranceDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
					m_tabInsuranceDetailsContainer.setContext(form, appForm, m_tabInsuranceDetails, loader, form_images_local, startControlID, m_tabInsuranceDetailsDesignSize, m_tabInsuranceDetailsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabSelfPay = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Self Pay Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabSelfPayContainer m_tabSelfPayContainer = (tabSelfPayContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSelfPayContainer.class, m_tabSelfPay, factory);
					super.addContainer(m_tabSelfPay, m_tabSelfPayContainer);
					ims.framework.utils.SizeInfo m_tabSelfPayDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabSelfPayRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
					m_tabSelfPayContainer.setContext(form, appForm, m_tabSelfPay, loader, form_images_local, startControlID, m_tabSelfPayDesignSize, m_tabSelfPayRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tab3rdParty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"3rd Party Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tab3rdPartyContainer m_tab3rdPartyContainer = (tab3rdPartyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab3rdPartyContainer.class, m_tab3rdParty, factory);
					super.addContainer(m_tab3rdParty, m_tab3rdPartyContainer);
					ims.framework.utils.SizeInfo m_tab3rdPartyDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tab3rdPartyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper42.getWidth(), anchoringHelper42.getHeight());
					m_tab3rdPartyContainer.setContext(form, appForm, m_tab3rdParty, loader, form_images_local, startControlID, m_tab3rdPartyDesignSize, m_tab3rdPartyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabNHS = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"NHS/PCT", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabNHSContainer m_tabNHSContainer = (tabNHSContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNHSContainer.class, m_tabNHS, factory);
					super.addContainer(m_tabNHS, m_tabNHSContainer);
					ims.framework.utils.SizeInfo m_tabNHSDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabNHSRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper43.getWidth(), anchoringHelper43.getHeight());
					m_tabNHSContainer.setContext(form, appForm, m_tabNHS, loader, form_images_local, startControlID, m_tabNHSDesignSize, m_tabNHSRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
				}
				public void showtabInsuranceDetails()
				{
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
					tabInsuranceDetails().setVisible(true);
				}
				public void showtabSelfPay()
				{
					tabInsuranceDetails().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
					tabSelfPay().setVisible(true);
				}
				public void showtab3rdParty()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tabNHS().setVisible(false);
					tab3rdParty().setVisible(true);
				}
				public void showtabNHS()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(true);
				}
		
				public tabInsuranceDetailsContainer tabInsuranceDetails()
				{
					return (tabInsuranceDetailsContainer)super.layers.get(0);
				}
				public tabSelfPayContainer tabSelfPay()
				{
					return (tabSelfPayContainer)super.layers.get(1);
				}
				public tab3rdPartyContainer tab3rdParty()
				{
					return (tab3rdPartyContainer)super.layers.get(2);
				}
				public tabNHSContainer tabNHS()
				{
					return (tabNHSContainer)super.layers.get(3);
				}
			}
			public static class cmb16ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grd5Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd5Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColInvoiceNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColInvoiceNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColInvoiceNoOpened()
				{
					super.row.showOpened(1);
				}
				public String getColInvoiceNo()
				{
					return (String)super.row.get(1);
				}
				public void setColInvoiceNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColInvoiceNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDescriptionReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDescriptionOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDescription()
				{
					return (String)super.row.get(2);
				}
				public void setColDescription(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDescriptionTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSubTotalReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSubTotalReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSubTotalOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSubTotal()
				{
					return (String)super.row.get(3);
				}
				public void setColSubTotal(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSubTotalTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColVATReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColVATReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColVATOpened()
				{
					super.row.showOpened(4);
				}
				public String getColVAT()
				{
					return (String)super.row.get(4);
				}
				public void setColVAT(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColVATTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColTotalReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColTotalReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColTotalOpened()
				{
					super.row.showOpened(5);
				}
				public String getColTotal()
				{
					return (String)super.row.get(5);
				}
				public void setColTotal(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColTotalTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(6);
				}
				public String getColStatus()
				{
					return (String)super.row.get(6);
				}
				public void setColStatus(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd5RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd5RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd5Row get(int index)
				{
					return new grd5Row(super.collection.get(index));
				}
				public grd5Row newRow()
				{
					return new grd5Row(super.collection.newRow());
				}
				public grd5Row newRow(boolean autoSelect)
				{
					return new grd5Row(super.collection.newRow(autoSelect));
				}
				public grd5Row newRowAt(int index)
				{
					return new grd5Row(super.collection.newRowAt(index));
				}
				public grd5Row newRowAt(int index, boolean autoSelect)
				{
					return new grd5Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd5Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd5Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd5Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd5RowCollection getRows()
				{
					return new grd5RowCollection(super.grid.getRows());
				}
				public grd5Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd5Row(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColInvoiceNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColInvoiceNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSubTotalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSubTotalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColVATHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColVATHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColTotalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColTotalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
		
			public static class Group1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper44.getX(), anchoringHelper44.getY(), anchoringHelper44.getWidth(), "Insurance", startTabIndex.intValue() + 4039);
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 256, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper45.getX(), anchoringHelper45.getY(), anchoringHelper45.getWidth(), "NHS/PCT", startTabIndex.intValue() + 4037);
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 184, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper46.getX(), anchoringHelper46.getY(), anchoringHelper46.getWidth(), "Self-Pay", startTabIndex.intValue() + 4036);
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(3, anchoringHelper47.getX(), anchoringHelper47.getY(), anchoringHelper47.getWidth(), "3rd Party", startTabIndex.intValue() + 4035);
				}
				public void setText(Group1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group1Enumeration.None;
						case 0: return Group1Enumeration.rdoInsurance;
						case 1: return Group1Enumeration.rdoNHS;
						case 2: return Group1Enumeration.rdoSelfPay;
						case 3: return Group1Enumeration.rdo3rdParty;
					}
					return null;
				}
				public void setValue(Group1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group1Enumeration.None.id);
				}
				public boolean isEnabled(Group1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group1Enumeration None = new Group1Enumeration(-1);
				public static Group1Enumeration rdoInsurance = new Group1Enumeration(0);
				public static Group1Enumeration rdoNHS = new Group1Enumeration(1);
				public static Group1Enumeration rdoSelfPay = new Group1Enumeration(2);
				public static Group1Enumeration rdo3rdParty = new Group1Enumeration(3);
				private Group1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group1Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 8, 423, 808, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Bad Debts", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 263, 480, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Debit/Credit Card Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 496, 263, 320, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Credit Control Notes", new Integer(2), ""}));
		
				// Layer Clasess
				lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
				super.addLayer(m_lyr1Layer);
				m_lyr1Layer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 16, 383, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cardholder Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 16, 351, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card Expiry Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 16, 319, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card No:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 16, 287, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card Type:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 128, 380, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 504, 287, 304, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 128, 348, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 128, 287, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmb16Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb16Temp);
				cmb16ComboBox cmb16 = (cmb16ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb16ComboBox.class, m_cmb16Temp);
				super.addComboBox(cmb16);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 16, 447, 792, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd5Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grd5Temp);
				grd5Grid grd5 = (grd5Grid)GridFlyweightFactory.getInstance().createGridBridge(grd5Grid.class, m_grd5Temp);
				grd5.addStringColumn("Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("Invoice No", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("Description", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("Sub-Total", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("VAT", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("TOTAL", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd5.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grd5);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 128, 317, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroup1);
				Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
				Group1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group1);
			}

			public lyr1Layer lyr1()
			{
				return (lyr1Layer)super.getLayer(0);
			}
			public TextBox txt25()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txt27()
			{
				return (TextBox)super.getControl(12);
			}
			public DateControl dte7()
			{
				return (DateControl)super.getControl(13);
			}
			public cmb16ComboBox cmb16()
			{
				return (cmb16ComboBox)super.getComboBox(0);
			}
			public grd5Grid grd5()
			{
				return (grd5Grid)super.getGrid(0);
			}
			public IntBox int1()
			{
				return (IntBox)super.getControl(16);
			}
			public Group1RadioButton Group1()
			{
				return (Group1RadioButton)super.getRadioButton(0);
			}
		}
		public static class tabContractDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmb6ComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grd2Row extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grd2Row(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAuthNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAuthNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAuthNoOpened()
				{
					super.row.showOpened(1);
				}
				public String getColAuthNo()
				{
					return (String)super.row.get(1);
				}
				public void setColAuthNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColAuthNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAuthDetailsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAuthDetailsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAuthDetailsOpened()
				{
					super.row.showOpened(2);
				}
				public String getColAuthDetails()
				{
					return (String)super.row.get(2);
				}
				public void setColAuthDetails(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColAuthDetailsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColAuthByReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColAuthByReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColAuthByOpened()
				{
					super.row.showOpened(3);
				}
				public String getColAuthBy()
				{
					return (String)super.row.get(3);
				}
				public void setColAuthBy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColAuthByTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColReqByReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColReqByReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColReqByOpened()
				{
					super.row.showOpened(4);
				}
				public String getColReqBy()
				{
					return (String)super.row.get(4);
				}
				public void setColReqBy(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColReqByTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(5);
				}
				public String getColStatus()
				{
					return (String)super.row.get(5);
				}
				public void setColStatus(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grd2RowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grd2RowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grd2Row get(int index)
				{
					return new grd2Row(super.collection.get(index));
				}
				public grd2Row newRow()
				{
					return new grd2Row(super.collection.newRow());
				}
				public grd2Row newRow(boolean autoSelect)
				{
					return new grd2Row(super.collection.newRow(autoSelect));
				}
				public grd2Row newRowAt(int index)
				{
					return new grd2Row(super.collection.newRowAt(index));
				}
				public grd2Row newRowAt(int index, boolean autoSelect)
				{
					return new grd2Row(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grd2Grid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grd2Row getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grd2Row(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grd2RowCollection getRows()
				{
					return new grd2RowCollection(super.grid.getRows());
				}
				public grd2Row getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grd2Row(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAuthNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAuthNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAuthDetailsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAuthDetailsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColAuthByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColAuthByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColReqByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColReqByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 307, 808, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Authorisation Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 808, 288, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Plan Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 776, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Contact Information for Payor", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 40, 224, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "FAX:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 40, 192, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "E-Mail:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 40, 160, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Telephone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 40, 128, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 400, 76, 187, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Internal Plan/Contract Ref. No.:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 24, 76, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ext. Plan/Contract Ref No:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 24, 44, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 24, 272, 192, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Contract and cover Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 184, 224, 384, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 184, 192, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 184, 160, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 184, 128, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 600, 76, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 184, 76, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 184, 44, 616, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmb6Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmb6Temp);
				cmb6ComboBox cmb6 = (cmb6ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmb6ComboBox.class, m_cmb6Temp);
				super.addComboBox(cmb6);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 16, 331, 792, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grd2Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grd2Temp);
				grd2Grid grd2 = (grd2Grid)GridFlyweightFactory.getInstance().createGridBridge(grd2Grid.class, m_grd2Temp);
				grd2.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addStringColumn("Authorisation No", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addStringColumn("Authorisation Details", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addStringColumn("Authorised By", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addStringColumn("Request By", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grd2.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grd2);
			}

			public Button btn1()
			{
				return (Button)super.getControl(10);
			}
			public TextBox txt9()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txt10()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txt11()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txt12()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txt13()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txt15()
			{
				return (TextBox)super.getControl(16);
			}
			public cmb6ComboBox cmb6()
			{
				return (cmb6ComboBox)super.getComboBox(0);
			}
			public grd2Grid grd2()
			{
				return (grd2Grid)super.getGrid(0);
			}
		}
		public static class tabPageLetterContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 546, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccUploadDocForm = loader.loadComponent(102264, appForm, startControlID * 10 + 4000, anchoringHelper80.getSize(), instance1, startTabIndex.intValue() + 3027, skipContextValidation);
				//ims.framework.Control m_ccUploadDocControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(8), new Integer(8), new Integer(808), new Integer(546), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3027), m_ccUploadDocForm, instance1 } );
				ims.framework.Control m_ccUploadDocControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1079),  new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3027), m_ccUploadDocForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccUploadDocControl);
				Menu[] menus1 = m_ccUploadDocForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.uploaddocument.IComponent ccUploadDoc()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccUploadDocValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccUploadDocVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccUploadDocVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccUploadDocEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccUploadDocEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPagePatientSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Patient Search", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPagePatientSearchContainer m_tabPagePatientSearchContainer = (tabPagePatientSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePatientSearchContainer.class, m_tabPagePatientSearch, factory);
			super.addContainer(m_tabPagePatientSearch, m_tabPagePatientSearchContainer);
			ims.framework.utils.SizeInfo m_tabPagePatientSearchDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPagePatientSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper81.getWidth(), anchoringHelper81.getHeight());
			m_tabPagePatientSearchContainer.setContext(form, appForm, m_tabPagePatientSearch, loader, form_images_local, startControlID, m_tabPagePatientSearchDesignSize, m_tabPagePatientSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageDemographics = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Demographics", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageDemographicsContainer m_tabPageDemographicsContainer = (tabPageDemographicsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageDemographicsContainer.class, m_tabPageDemographics, factory);
			super.addContainer(m_tabPageDemographics, m_tabPageDemographicsContainer);
			ims.framework.utils.SizeInfo m_tabPageDemographicsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPageDemographicsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper82.getWidth(), anchoringHelper82.getHeight());
			m_tabPageDemographicsContainer.setContext(form, appForm, m_tabPageDemographics, loader, form_images_local, startControlID, m_tabPageDemographicsDesignSize, m_tabPageDemographicsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageReferral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Referral Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageReferralContainer m_tabPageReferralContainer = (tabPageReferralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReferralContainer.class, m_tabPageReferral, factory);
			super.addContainer(m_tabPageReferral, m_tabPageReferralContainer);
			ims.framework.utils.SizeInfo m_tabPageReferralDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPageReferralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper83.getWidth(), anchoringHelper83.getHeight());
			m_tabPageReferralContainer.setContext(form, appForm, m_tabPageReferral, loader, form_images_local, startControlID, m_tabPageReferralDesignSize, m_tabPageReferralRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPayor = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Payor Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPayorContainer m_tabPayorContainer = (tabPayorContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPayorContainer.class, m_tabPayor, factory);
			super.addContainer(m_tabPayor, m_tabPayorContainer);
			ims.framework.utils.SizeInfo m_tabPayorDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPayorRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper84.getWidth(), anchoringHelper84.getHeight());
			m_tabPayorContainer.setContext(form, appForm, m_tabPayor, loader, form_images_local, startControlID, m_tabPayorDesignSize, m_tabPayorRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabContractDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Contract Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabContractDetailsContainer m_tabContractDetailsContainer = (tabContractDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabContractDetailsContainer.class, m_tabContractDetails, factory);
			super.addContainer(m_tabContractDetails, m_tabContractDetailsContainer);
			ims.framework.utils.SizeInfo m_tabContractDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabContractDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper85.getWidth(), anchoringHelper85.getHeight());
			m_tabContractDetailsContainer.setContext(form, appForm, m_tabContractDetails, loader, form_images_local, startControlID, m_tabContractDetailsDesignSize, m_tabContractDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageLetter = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Letter(s)", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageLetterContainer m_tabPageLetterContainer = (tabPageLetterContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageLetterContainer.class, m_tabPageLetter, factory);
			super.addContainer(m_tabPageLetter, m_tabPageLetterContainer);
			ims.framework.utils.SizeInfo m_tabPageLetterDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPageLetterRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper86.getWidth(), anchoringHelper86.getHeight());
			m_tabPageLetterContainer.setContext(form, appForm, m_tabPageLetter, loader, form_images_local, startControlID, m_tabPageLetterDesignSize, m_tabPageLetterRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageDemographics().setVisible(false);
			tabPageReferral().setVisible(false);
			tabPayor().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(false);
		}
		public void settabPagePatientSearchEnabled(boolean value)
		{
			tabPagePatientSearch().setEnabled(value);
		}
		public void settabPageDemographicsEnabled(boolean value)
		{
			tabPageDemographics().setEnabled(value);
		}
		public void settabPageReferralEnabled(boolean value)
		{
			tabPageReferral().setEnabled(value);
		}
		public void settabPayorEnabled(boolean value)
		{
			tabPayor().setEnabled(value);
		}
		public void settabContractDetailsEnabled(boolean value)
		{
			tabContractDetails().setEnabled(value);
		}
		public void settabPageLetterEnabled(boolean value)
		{
			tabPageLetter().setEnabled(value);
		}
		public void showtabPagePatientSearch()
		{
			tabPageDemographics().setVisible(false);
			tabPageReferral().setVisible(false);
			tabPayor().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(false);
			tabPagePatientSearch().setVisible(true);
		}
		public void showtabPageDemographics()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageReferral().setVisible(false);
			tabPayor().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(false);
			tabPageDemographics().setVisible(true);
		}
		public void showtabPageReferral()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageDemographics().setVisible(false);
			tabPayor().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(false);
			tabPageReferral().setVisible(true);
		}
		public void showtabPayor()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageDemographics().setVisible(false);
			tabPageReferral().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(false);
			tabPayor().setVisible(true);
		}
		public void showtabContractDetails()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageDemographics().setVisible(false);
			tabPageReferral().setVisible(false);
			tabPayor().setVisible(false);
			tabPageLetter().setVisible(false);
			tabContractDetails().setVisible(true);
		}
		public void showtabPageLetter()
		{
			tabPagePatientSearch().setVisible(false);
			tabPageDemographics().setVisible(false);
			tabPageReferral().setVisible(false);
			tabPayor().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPageLetter().setVisible(true);
		}

		public tabPagePatientSearchContainer tabPagePatientSearch()
		{
			return (tabPagePatientSearchContainer)super.layers.get(0);
		}
		public tabPageDemographicsContainer tabPageDemographics()
		{
			return (tabPageDemographicsContainer)super.layers.get(1);
		}
		public tabPageReferralContainer tabPageReferral()
		{
			return (tabPageReferralContainer)super.layers.get(2);
		}
		public tabPayorContainer tabPayor()
		{
			return (tabPayorContainer)super.layers.get(3);
		}
		public tabContractDetailsContainer tabContractDetails()
		{
			return (tabContractDetailsContainer)super.layers.get(4);
		}
		public tabPageLetterContainer tabPageLetter()
		{
			return (tabPageLetterContainer)super.layers.get(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientFilter.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientFilter' of the global context variable 'Core.PatientFilter' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrPageLayer m_lyrPageLayer = (lyrPageLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPageLayer.class, this, factory);
		super.addLayer(m_lyrPageLayer);
		m_lyrPageLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 4028), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 4030), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 685, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 4032), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 4034), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrPageLayer lyrPage()
	{
		return (lyrPageLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(8);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(9);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Admin = new AdminForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				GpSelectionOnly = new LocalFormName(102251);
			}
			public final FormName GpSelectionOnly;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				GPPracticeSelect = new LocalFormName(103112);
			}
			public final FormName GPPracticeSelect;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ReferralWizardDialog = new LocalFormName(134109);
				ChangeServiceDialog = new LocalFormName(134122);
			}
			public final FormName ReferralWizardDialog;
			public final FormName ChangeServiceDialog;
		}

		public CoreForms Core;
		public AdminForms Admin;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ZoomInDisabled16 = new ImageHelper(102159, "Images/Core/zoom_disabled.png", new Integer(16), new Integer(16));
				ZoomInEnabled16 = new ImageHelper(102158, "Images/Core/zoom.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ZoomInDisabled16;
			public final ims.framework.utils.Image ZoomInEnabled16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Record = new ims.framework.ContextVariable("Record", prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier + "");
			cxl_bDemographicsSaved = new ims.framework.ContextVariable("bDemographicsSaved", prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__bDemographicsSaved_" + componentIdentifier + "");
			cxl_SelectedReferralService = new ims.framework.ContextVariable("SelectedReferralService", prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__SelectedReferralService_" + componentIdentifier + "");
			cxl_TabPayorSelected = new ims.framework.ContextVariable("TabPayorSelected", prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__TabPayorSelected_" + componentIdentifier + "");
			cxl_TabContractSelected = new ims.framework.ContextVariable("TabContractSelected", prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__TabContractSelected_" + componentIdentifier + "");
		}
		
		public boolean getRecordIsNotNull()
		{
			return !cxl_Record.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralWizardVo getRecord()
		{
			return (ims.RefMan.vo.CatsReferralWizardVo)cxl_Record.getValue(context);
		}
		public void setRecord(ims.RefMan.vo.CatsReferralWizardVo value)
		{
			cxl_Record.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Record = null;
		public boolean getbDemographicsSavedIsNotNull()
		{
			return !cxl_bDemographicsSaved.getValueIsNull(context);
		}
		public Boolean getbDemographicsSaved()
		{
			return (Boolean)cxl_bDemographicsSaved.getValue(context);
		}
		public void setbDemographicsSaved(Boolean value)
		{
			cxl_bDemographicsSaved.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bDemographicsSaved = null;
		public boolean getSelectedReferralServiceIsNotNull()
		{
			return !cxl_SelectedReferralService.getValueIsNull(context);
		}
		public ims.core.clinical.vo.ServiceRefVo getSelectedReferralService()
		{
			return (ims.core.clinical.vo.ServiceRefVo)cxl_SelectedReferralService.getValue(context);
		}
		public void setSelectedReferralService(ims.core.clinical.vo.ServiceRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedReferralService' RefVo context variable.");
			if(value == null)
				cxl_SelectedReferralService.setValue(context, null);
			else
				cxl_SelectedReferralService.setValue(context, new ims.core.clinical.vo.ServiceRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedReferralService = null;
		public boolean getTabPayorSelectedIsNotNull()
		{
			return !cxl_TabPayorSelected.getValueIsNull(context);
		}
		public Boolean getTabPayorSelected()
		{
			return (Boolean)cxl_TabPayorSelected.getValue(context);
		}
		public void setTabPayorSelected(Boolean value)
		{
			cxl_TabPayorSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TabPayorSelected = null;
		public boolean getTabContractSelectedIsNotNull()
		{
			return !cxl_TabContractSelected.getValueIsNull(context);
		}
		public Boolean getTabContractSelected()
		{
			return (Boolean)cxl_TabContractSelected.getValue(context);
		}
		public void setTabContractSelected(Boolean value)
		{
			cxl_TabContractSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TabContractSelected = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[179];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ID", "ID_Organisation");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-NAME", "Name");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-TYPE", "Type");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-COMMENT", "Comment");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-PCTCODE", "PctCode");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ID", "ID_CatsReferral");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CARECONTEXT", "CareContext");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISCAB", "IsCAB");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-URGENCY", "Urgency");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PATHWAYID", "PathwayID");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralTransfer", "BO-1096100070-ID", "ID_ReferralTransfer");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralTransfer", "BO-1096100070-RTTSTATUSDATE", "RTTStatusDate");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralTransfer", "BO-1096100070-OTHERPATIENTNUMBER", "OtherPatientNumber");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralTransfer", "BO-1096100070-OTHERORGANISATIONCODE", "OTherOrganisationCode");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientsGP", "BO-1006100001-ID", "ID_Gp");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientsGP", "BO-1006100001-STATUS", "Status");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__Record_" + componentIdentifier, "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralWizard.__internal_x_context__SelectedReferralService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
