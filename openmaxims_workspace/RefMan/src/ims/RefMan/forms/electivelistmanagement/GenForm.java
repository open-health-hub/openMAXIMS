// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.electivelistmanagement;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.WaitingListStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.WaitingListStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.WaitingListStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.WaitingListStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.WaitingListStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.WaitingListStatus getValue()
		{
			return (ims.core.vo.lookups.WaitingListStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.WaitingListStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbElectiveListNameComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.ElectiveListConfigLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.ElectiveListConfigLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.ElectiveListConfigLiteVo getValue()
		{
			return (ims.admin.vo.ElectiveListConfigLiteVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.ElectiveListConfigLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbConsultantComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.HcpLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.HcpLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.HcpLiteVo getValue()
		{
			return (ims.core.vo.HcpLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.HcpLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.ServiceForElectiveListConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.ServiceForElectiveListConfigVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.ServiceForElectiveListConfigVo getValue()
		{
			return (ims.admin.vo.ServiceForElectiveListConfigVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.ServiceForElectiveListConfigVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdElectiveListRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdElectiveListRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnPatientNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnPatientNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnPatientNameOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnPatientName(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnPatientName()
		{
			return (String)super.row.get(0);
		}
		public void setColumnPatientName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnPatientNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnIdentifierReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnIdentifierReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnIdentifierOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnIdentifier(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColumnIdentifier()
		{
			return (String)super.row.get(1);
		}
		public void setColumnIdentifier(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnIdentifierTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnListNameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnListNameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnListNameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnListName(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColumnListName()
		{
			return (String)super.row.get(2);
		}
		public void setColumnListName(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnListNameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnConsultantReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnConsultantOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColumnConsultant(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColumnConsultant()
		{
			return (String)super.row.get(3);
		}
		public void setColumnConsultant(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnConsultantTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnServiceReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnServiceReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnServiceOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColumnService(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColumnService()
		{
			return (String)super.row.get(4);
		}
		public void setColumnService(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnServiceTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColumnDateOnListReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColumnDateOnListReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColumnDateOnListOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColumnDateOnList(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColumnDateOnList()
		{
			return (String)super.row.get(5);
		}
		public void setColumnDateOnList(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColumnDateOnListTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColumnStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColumnStatusReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColumnStatusOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColumnStatus(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColumnStatus()
		{
			return (String)super.row.get(6);
		}
		public void setColumnStatus(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColumnStatusTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColumnImageReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColumnImageReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColumnImageOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColumnImage(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.framework.utils.Image getColumnImage()
		{
			return (ims.framework.utils.Image)super.row.get(7);
		}
		public void setColumnImage(ims.framework.utils.Image value)
		{
			super.row.set(7, value);
		}
		public void setCellColumnImageTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.RefMan.vo.PatientElevectiveListManagementVo getValue()
		{
			return (ims.RefMan.vo.PatientElevectiveListManagementVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElevectiveListManagementVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdElectiveListRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdElectiveListRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdElectiveListRow get(int index)
		{
			return new grdElectiveListRow(super.collection.get(index));
		}
		public grdElectiveListRow newRow()
		{
			return new grdElectiveListRow(super.collection.newRow());
		}
		public grdElectiveListRow newRow(boolean autoSelect)
		{
			return new grdElectiveListRow(super.collection.newRow(autoSelect));
		}
		public grdElectiveListRow newRowAt(int index)
		{
			return new grdElectiveListRow(super.collection.newRowAt(index));
		}
		public grdElectiveListRow newRowAt(int index, boolean autoSelect)
		{
			return new grdElectiveListRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdElectiveListGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setColumnIdentifierCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.RefMan.vo.PatientElevectiveListManagementVoCollection getValues()
		{
			ims.RefMan.vo.PatientElevectiveListManagementVoCollection listOfValues = new ims.RefMan.vo.PatientElevectiveListManagementVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientElevectiveListManagementVo getValue()
		{
			return (ims.RefMan.vo.PatientElevectiveListManagementVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientElevectiveListManagementVo value)
		{
			super.grid.setValue(value);
		}
		public grdElectiveListRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdElectiveListRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdElectiveListRowCollection getRows()
		{
			return new grdElectiveListRowCollection(super.grid.getRows());
		}
		public grdElectiveListRow getRowByValue(ims.RefMan.vo.PatientElevectiveListManagementVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdElectiveListRow(row);
		}
		public void setColumnPatientNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnPatientNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnIdentifierHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnIdentifierHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnListNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnListNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnServiceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnServiceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColumnDateOnListHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColumnDateOnListHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColumnStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColumnStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColumnImageHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColumnImageHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}

	public static class GroupShowRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 456, 112, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Show 28 day Rule patients", startTabIndex.intValue() + 12);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 456, 90, 216, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Show Suspended records requiring TCI", startTabIndex.intValue() + 11);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 456, 66, 264, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Show Admitted and Deferred records requiring TCI", startTabIndex.intValue() + 10);
		}
		public void setText(GroupShowEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupShowEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupShowEnumeration.None;
				case 0: return GroupShowEnumeration.rdo28Day;
				case 1: return GroupShowEnumeration.rdoShowSuspended;
				case 2: return GroupShowEnumeration.rdoShowAdmited;
			}
			return null;
		}
		public void setValue(GroupShowEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupShowEnumeration.None.id);
		}
		public boolean isEnabled(GroupShowEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupShowEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupShowEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupShowEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupShowEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupShowEnumeration None = new GroupShowEnumeration(-1);
		public static GroupShowEnumeration rdo28Day = new GroupShowEnumeration(0);
		public static GroupShowEnumeration rdoShowSuspended = new GroupShowEnumeration(1);
		public static GroupShowEnumeration rdoShowAdmited = new GroupShowEnumeration(2);
		private GroupShowEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupShowEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo' of the global context variable 'RefMan.SearchCriteriaForElectiveListManagement' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(140);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuPatientElectiveListManagement = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem = factory.createMenuItem(startControlID.intValue() + 1, "Review", true, false, new Integer(134125), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360001)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORDTCIItem = factory.createMenuItem(startControlID.intValue() + 2, "Record TCI", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360002)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORDTCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_TCIItem = factory.createMenuItem(startControlID.intValue() + 3, "Amend TCI", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360003)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 4, "Suspend Elective List Entry", true, false, new Integer(114134), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360004)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 5, "Unsuspend Elective List Entry", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360005)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORD_ERODItem = factory.createMenuItem(startControlID.intValue() + 6, "Record EROD", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360006)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementRECORD_ERODItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_ERODItem = factory.createMenuItem(startControlID.intValue() + 7, "Amend EROD", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360007)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementAMEND_ERODItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementCANCEL_TCIItem = factory.createMenuItem(startControlID.intValue() + 8, "Cancel TCI", true, false, new Integer(114104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360008)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementCANCEL_TCIItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem = factory.createMenuItem(startControlID.intValue() + 9, "Remove From Elective List", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360009)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem = factory.createMenuItem(startControlID.intValue() + 10, "Add current Patient to a different Waiting List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360010)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem = factory.createMenuItem(startControlID.intValue() + 11, "Add current Patient to a different Booked List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360011)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem = factory.createMenuItem(startControlID.intValue() + 12, "Add current Patient to a different Planned List", true, false, new Integer(102330), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360012)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit Elective List Entry", true, false, new Integer(103102), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360013)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem);
		contextMenus.RefMan.contextMenuPatientElectiveListManagementBOOK_THEATREItem = factory.createMenuItem(startControlID.intValue() + 14, "Book Theatre", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5360014)))
			contextMenus.RefMan.contextMenuPatientElectiveListManagement.add(contextMenus.RefMan.contextMenuPatientElectiveListManagementBOOK_THEATREItem);
		form.registerMenu(contextMenus.RefMan.contextMenuPatientElectiveListManagement);


		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 114, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 390, 42, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 390, 18, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 601, 18, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 90, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 66, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Code:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 696, 600, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Transfer", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 128, 64, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 456, 16, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 656, 16, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 456, 40, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 128, 112, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProcedureTemp);
		qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
		super.addComboBox(qmbProcedure);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbElectiveListNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbElectiveListNameTemp);
		qmbElectiveListNameComboBox qmbElectiveListName = (qmbElectiveListNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbElectiveListNameComboBox.class, m_qmbElectiveListNameTemp);
		super.addComboBox(qmbElectiveListName);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 128, 88, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantTemp);
		qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
		super.addComboBox(qmbConsultant);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 128, 16, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbServiceTemp);
		qmbServiceComboBox qmbService = (qmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbServiceComboBox.class, m_qmbServiceTemp);
		super.addComboBox(qmbService);

		// Grid Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 148, 832, 448, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdElectiveListTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuPatientElectiveListManagement, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdElectiveListTemp);
		grdElectiveListGrid grdElectiveList = (grdElectiveListGrid)GridFlyweightFactory.getInstance().createGridBridge(grdElectiveListGrid.class, m_grdElectiveListTemp);
		grdElectiveList.addStringColumn("Patient Name", 0, 0, 160, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("Identifier", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("List Name", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("List Owner", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("Service", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("Date On List", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addStringColumn("Status", 0, 0, 80, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdElectiveList.addImageColumn("  ", 0, 1, -1, true, 2);
		super.addGrid(grdElectiveList);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 808, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 776, 11, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for Elective entries matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupShow = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
		super.addControl(tmpGroupShow);
		GroupShowRadioButton GroupShow = (GroupShowRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupShowRadioButton.class, tmpGroupShow);
		GroupShow.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupShow);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnTransferToEL()
	{
		return (Button)super.getControl(8);
	}
	public TextBox txtElectiveListCode()
	{
		return (TextBox)super.getControl(9);
	}
	public DateControl dteDateFrom()
	{
		return (DateControl)super.getControl(10);
	}
	public DateControl dteDateTo()
	{
		return (DateControl)super.getControl(11);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public qmbProcedureComboBox qmbProcedure()
	{
		return (qmbProcedureComboBox)super.getComboBox(1);
	}
	public qmbElectiveListNameComboBox qmbElectiveListName()
	{
		return (qmbElectiveListNameComboBox)super.getComboBox(2);
	}
	public qmbConsultantComboBox qmbConsultant()
	{
		return (qmbConsultantComboBox)super.getComboBox(3);
	}
	public qmbServiceComboBox qmbService()
	{
		return (qmbServiceComboBox)super.getComboBox(4);
	}
	public grdElectiveListGrid grdElectiveList()
	{
		return (grdElectiveListGrid)super.getGrid(0);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(18);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(19);
	}
	public GroupShowRadioButton GroupShow()
	{
		return (GroupShowRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ERODDialog = new LocalFormName(134216);
				BookAppointment = new LocalFormName(134123);
				BookTheatreSlot = new LocalFormName(134208);
				BookAppointmentDialog = new LocalFormName(134134);
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				NewElectiveListEntry = new LocalFormName(134217);
				SuspensionDetails = new LocalFormName(134225);
				RemoveFromElectiveList = new LocalFormName(134229);
				TransferElectiveListDialog = new LocalFormName(134234);
			}
			public final FormName ERODDialog;
			public final FormName BookAppointment;
			public final FormName BookTheatreSlot;
			public final FormName BookAppointmentDialog;
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName NewElectiveListEntry;
			public final FormName SuspensionDetails;
			public final FormName RemoveFromElectiveList;
			public final FormName TransferElectiveListDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				BookAppointmentDialog = new LocalFormName(114162);
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName BookAppointmentDialog;
			public final FormName CancelAppointmentDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			RefMan = new RefManImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Appointment16 = new ImageHelper(134121, "Images/RefMan/appointment_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Appointment16;
		}
		public final CoreImages Core;
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_MessageBoxIdForRemoveEntryList = new ims.framework.ContextVariable("MessageBoxIdForRemoveEntryList", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__MessageBoxIdForRemoveEntryList_" + componentIdentifier + "");
			cxl_bReferralAccepted = new ims.framework.ContextVariable("bReferralAccepted", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__bReferralAccepted_" + componentIdentifier + "");
			cxl_CatsReferralListVo = new ims.framework.ContextVariable("CatsReferralListVo", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier + "");
			cxl_SortOrderImage28DayRule = new ims.framework.ContextVariable("SortOrderImage28DayRule", prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__SortOrderImage28DayRule_" + componentIdentifier + "");
		}
		
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getMessageBoxIdForRemoveEntryListIsNotNull()
		{
			return !cxl_MessageBoxIdForRemoveEntryList.getValueIsNull(context);
		}
		public Integer getMessageBoxIdForRemoveEntryList()
		{
			return (Integer)cxl_MessageBoxIdForRemoveEntryList.getValue(context);
		}
		public void setMessageBoxIdForRemoveEntryList(Integer value)
		{
			cxl_MessageBoxIdForRemoveEntryList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxIdForRemoveEntryList = null;
		public boolean getbReferralAcceptedIsNotNull()
		{
			return !cxl_bReferralAccepted.getValueIsNull(context);
		}
		public Boolean getbReferralAccepted()
		{
			return (Boolean)cxl_bReferralAccepted.getValue(context);
		}
		public void setbReferralAccepted(Boolean value)
		{
			cxl_bReferralAccepted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bReferralAccepted = null;
		public boolean getCatsReferralListVoIsNotNull()
		{
			return !cxl_CatsReferralListVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralListVo getCatsReferralListVo()
		{
			return (ims.RefMan.vo.CatsReferralListVo)cxl_CatsReferralListVo.getValue(context);
		}
		public void setCatsReferralListVo(ims.RefMan.vo.CatsReferralListVo value)
		{
			cxl_CatsReferralListVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferralListVo = null;
		public boolean getSortOrderImage28DayRuleIsNotNull()
		{
			return !cxl_SortOrderImage28DayRule.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortOrderImage28DayRule()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortOrderImage28DayRule.getValue(context);
		}
		public void setSortOrderImage28DayRule(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortOrderImage28DayRule.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortOrderImage28DayRule = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientElectiveListManagement implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int SET_STATUS_REQUIRES_TCI = 1;
				public static final int RECORDTCI = 2;
				public static final int AMEND_TCI = 3;
				public static final int SUSPEND_ELECTIVE_LIST_ENTRY = 4;
				public static final int UNSUSPEND_ELECTIVE_LIST_ENTRY = 5;
				public static final int RECORD_EROD = 6;
				public static final int AMEND_EROD = 7;
				public static final int CANCEL_TCI = 8;
				public static final int REMOVE_FROM_ELECTIVE_LIST = 9;
				public static final int ADD_TO_WAITING_LIST = 10;
				public static final int ADD_TO_BOOKED_LIST = 11;
				public static final int ADD_TO_PLANNED_LIST = 12;
				public static final int EDIT_ELECTIVE_LIST_ENTRY = 13;
				public static final int BOOK_THEATRE = 14;
			}
			public void disableAllPatientElectiveListManagementMenuItems()
			{
				this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementRECORDTCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementAMEND_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementRECORD_ERODItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementAMEND_ERODItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementCANCEL_TCIItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem.setEnabled(false);
				this.contextMenuPatientElectiveListManagementBOOK_THEATREItem.setEnabled(false);
			}
			public void hideAllPatientElectiveListManagementMenuItems()
			{
				this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementRECORDTCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementAMEND_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementRECORD_ERODItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementAMEND_ERODItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementCANCEL_TCIItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem.setVisible(false);
				this.contextMenuPatientElectiveListManagementBOOK_THEATREItem.setVisible(false);
			}
			private Menu contextMenuPatientElectiveListManagement;
			public ReadOnlyMenuItem getPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementRECORDTCIItem()
			{
				return this.contextMenuPatientElectiveListManagementRECORDTCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementRECORDTCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementAMEND_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementAMEND_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementAMEND_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementRECORD_ERODItem()
			{
				return this.contextMenuPatientElectiveListManagementRECORD_ERODItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementRECORD_ERODItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementAMEND_ERODItem()
			{
				return this.contextMenuPatientElectiveListManagementAMEND_ERODItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementAMEND_ERODItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementCANCEL_TCIItem()
			{
				return this.contextMenuPatientElectiveListManagementCANCEL_TCIItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementCANCEL_TCIItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_WAITING_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_WAITING_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_BOOKED_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_BOOKED_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementADD_TO_PLANNED_LISTItem()
			{
				return this.contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementADD_TO_PLANNED_LISTItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem()
			{
				return this.contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem;
			public ReadOnlyMenuItem getPatientElectiveListManagementBOOK_THEATREItem()
			{
				return this.contextMenuPatientElectiveListManagementBOOK_THEATREItem;
			}
			private MenuItem contextMenuPatientElectiveListManagementBOOK_THEATREItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[197];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-ID", "ID_TCIForPatientElectiveList");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIDATE", "TCIDate");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCITIME", "TCITime");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIOFFERMETHOD", "TCIOfferMethod");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DATETCIACCEPTED", "DateTCIAccepted");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-SESSION", "Session");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-COMMENTS", "Comments");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-PLANNINGELECTIVE", "PlanningElective");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-TCIBED", "TCIBed");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-DATETCIOFFERED", "DateTCIOffered");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-ISACTIVE", "IsActive");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListTCI", "BO-1096100064-KPIEXCEEDEDREASON", "KPIExceededReason");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveListRef", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-WARD", "Ward");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-CONSULTANT", "Consultant");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIMARYPROCEDURE", "PrimaryProcedure");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFLAGGEDFORREVIEW", "IsFlaggedForReview");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTLTSTARTCONTACT", "HasTLTStartContact");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASTHEATREAPPT", "HasTheatreAppt");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISCURRENTLYALLOCATED", "IsCurrentlyAllocated");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-OPDLOCATION", "OPDLocation");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-SUITABLEFORSURGERYDATE", "SuitableForSurgeryDate");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ElectiveListManagement.__internal_x_context__CatsReferralListVo_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
