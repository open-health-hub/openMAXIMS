// This code was generated by Ander Telleria using IMS Development Environment (version 1.66 build 3257.22034)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.procedureactivitymapping;


import java.util.ArrayList;

import ims.RefMan.domain.objects.ProcedureActivityMapping;
import ims.RefMan.vo.ProcedureActivityMappingVo;
import ims.RefMan.vo.ProcedureActivityMappingVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ProcedureRefVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setActivitiesToRemove(new ProcedureActivityMappingVoCollection());
		form.setMode(FormMode.VIEW);
		populateTree();
	}

	private void populateTree() {
		ProcedureActivityMappingVoCollection procedureActivities = domain.listProcedureActivies();
		form.getLocalContext().setProcedureActivityMappingVo(procedureActivities);
		populateTree(procedureActivities);
	}

	private void populateTree(ProcedureActivityMappingVoCollection procedureActivities) 
	{
		form.tre().clear();
		if (procedureActivities!=null)
			for (ProcedureActivityMappingVo item : procedureActivities)
			{
				TreeNode node = form.tre().getNodes().add(item,item.getActivityCode());
				node.setCollapsedImage(form.getImages().Core.GreenSquare);
				if (item.getProceduresIsNotNull())
					for (int j=0;j<item.getProcedures().size();j++)
					{
						ProcedureLiteVo procedure = domain.getProcedure(item.getProcedures().get(j));
						TreeNode subNode = node.getNodes().add(procedure, procedure.getProcedureName());
						subNode.setCollapsedImage(form.getImages().Core.BlueSquare);
					}
				
			}
	}
	
	private void manageMenus()
	{
		if (form.getMode().equals(FormMode.EDIT));
		{
			form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddActivityCodeItem().setVisible(true);
			form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddActivityCodeItem().setEnabled(true);
			if (form.tre().getSelectedNode()!=null)
			{
				if (form.tre().getSelectedNode().getValue() instanceof ProcedureLiteVo)
				{
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setVisible(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setEnabled(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setVisible(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setEnabled(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setVisible(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setEnabled(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setVisible(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setEnabled(false);
				}
				else
				{
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setVisible(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setEnabled(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setVisible(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setEnabled(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setVisible(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setEnabled(true);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setVisible(false);
					form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setEnabled(false);
				}
			}
			else
			{
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setVisible(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveProcedureItem().setEnabled(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setVisible(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuEditActivityCodeItem().setEnabled(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setVisible(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuRemoveActivityItem().setEnabled(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setVisible(false);
				form.getContextMenus().RefMan.getProcedureActivityMappingMenuAddProcedureItem().setEnabled(false);
			}
		}
		if (form.getMode().equals(FormMode.VIEW))
			form.getContextMenus().RefMan.hideAllProcedureActivityMappingMenuMenuItems();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ProcedureActivityMappingVoCollection procActivities=new ProcedureActivityMappingVoCollection();
		ProcedureActivityMappingVo proAct=null;
		if (form.tre().getNodes().size()==0)
		{
			procActivities=null;
		}
		for (int j=0;j<form.tre().getNodes().size();j++)
		{
			TreeNode activity = form.tre().getNodes().get(j);
			ArrayList<String> errors=new ArrayList<String>();
			if (activity!=null)
			{
				if (activity.getText()!=null)
					if (activity.getText().length()>10)
					{
						
						errors.add("Activity code cannot be longer than 10 characters");
						engine.showErrors(errors.toArray(new String[0]));
						return;
					}
					else if (activity.getText()==null||activity.getText().equals(""))
					{
						errors.add("Activity Code is Mandatory");
						engine.showErrors(errors.toArray(new String[0]));
						return;
					}
			}
			if (activity.getValue()!=null)
				if (activity.getValue() instanceof ProcedureActivityMappingVo)
				{
					proAct=(ProcedureActivityMappingVo) activity.getValue();//new ProcedureActivityMappingVo();
					ProcedureRefVoCollection procedures=new ProcedureRefVoCollection();
					for (int i=0;i<activity.getNodes().size();i++)
					{
						ProcedureLiteVo proc = (ProcedureLiteVo) activity.getNodes().get(i).getValue();
						procedures.add(proc.toProcedureRefVo());
					}
					proAct.setProcedures(procedures);
					procActivities.add(proAct);
				}
				else
				{
					proAct=new ProcedureActivityMappingVo();
					proAct.setActivityCode(activity.getText());
					ProcedureRefVoCollection procedures=new ProcedureRefVoCollection();
					for (int i=0;i<activity.getNodes().size();i++)
					{
						ProcedureLiteVo proc = (ProcedureLiteVo) activity.getNodes().get(i).getValue();
						procedures.add(proc.toProcedureRefVo());
					}
					proAct.setProcedures(procedures);
					form.tre().getNodes().get(j).remove(form.tre().getNodes().get(j));
					procActivities.add(proAct);
				}
					
		}
		try 
		{
			form.getLocalContext().setProcedureActivityMappingVo(domain.saveProcedureActivities(procActivities,form.getGlobalContext().RefMan.getActivitiesToRemove()));
			
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateTree(form.getLocalContext().getProcedureActivityMappingVo());
		}
		form.setMode(FormMode.VIEW);
		
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getGlobalContext().RefMan.setActivitiesToRemove(new ProcedureActivityMappingVoCollection());
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		populateTree(form.getLocalContext().getProcedureActivityMappingVo());
	}
	
	protected void onTreTreeViewSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		manageMenus();
	}
	
	protected void onTreTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		manageMenus();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)
			throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.procedureactivitymapping.GenForm.ContextMenus.RefManNamespace.ProcedureActivityMappingMenu.AddActivityCode :
				addActivityCode();
				break;
			case ims.RefMan.forms.procedureactivitymapping.GenForm.ContextMenus.RefManNamespace.ProcedureActivityMappingMenu.EditActivityCode :
				editActivityCode();
				break;
			case ims.RefMan.forms.procedureactivitymapping.GenForm.ContextMenus.RefManNamespace.ProcedureActivityMappingMenu.RemoveActivity :
				removeActivityCode();
				break;
			case ims.RefMan.forms.procedureactivitymapping.GenForm.ContextMenus.RefManNamespace.ProcedureActivityMappingMenu.AddProcedure :
				addProcedure();
				break;
			case ims.RefMan.forms.procedureactivitymapping.GenForm.ContextMenus.RefManNamespace.ProcedureActivityMappingMenu.RemoveProcedure :
				removeProcedure();
				break;
	}
}

	private void removeProcedure() 
	{	
		
		form.tre().getNodes().remove(form.tre().getSelectedNode());
		
		manageMenus();
	}

	private void addProcedure() 
	{	
		
		ProcedureLiteVoCollection unavailableProcedures=new ProcedureLiteVoCollection();
		ProcedureLiteVoCollection associatedProcedures=new ProcedureLiteVoCollection();
		
		for (int z=0;z<form.tre().getSelectedNode().getNodes().size();z++)
		{
			associatedProcedures.add((ProcedureLiteVo) form.tre().getSelectedNode().getNodes().get(z).getValue());
		}
		form.getGlobalContext().RefMan.setAssociatedProcedures(associatedProcedures);
		for (int i=0;i<form.tre().getNodes().size();i++)
		{
			for (int j=0;j<form.tre().getNodes().get(i).getNodes().size();j++)
			{
				unavailableProcedures.add((ProcedureLiteVo) form.tre().getNodes().get(i).getNodes().get(j).getValue());
			}
		}
		form.getGlobalContext().RefMan.setunavailableProcedures(unavailableProcedures);
		
		engine.open(form.getForms().RefMan.SelectProcedure);
		
	}

	private void removeActivityCode() 
	{
		if (form.tre().getSelectedNode().getValue() instanceof ProcedureActivityMappingVo)
		{
			ProcedureActivityMappingVo procedure= (ProcedureActivityMappingVo) form.tre().getSelectedNode().getValue();
			if (procedure.getID_ProcedureActivityMappingIsNotNull())
				if (form.getGlobalContext().RefMan.getActivitiesToRemoveIsNotNull())
					form.getGlobalContext().RefMan.getActivitiesToRemove().add((ProcedureActivityMappingVo) form.tre().getSelectedNode().getValue());
		}
		form.tre().getNodes().remove(form.tre().getSelectedNode());
		manageMenus();
	}

	private void editActivityCode() 
	{
		form.tre().beginEditSelectedNode();
	}

	private void addActivityCode() 
	{
		
		TreeNode rootNode = form.tre().getNodes().add("Act" + (form.tre().getNodes().size() + 1), "Act" + (form.tre().getNodes().size() + 1));
		rootNode.setCollapsedImage(form.getImages().Core.GreenSquare);
		form.tre().setValue(rootNode.getValue());
		form.tre().beginEditSelectedNode();
		manageMenus();
	}

	@Override
	protected void onFormModeChanged() 
	{	
		manageMenus();	
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.OK))
		{
			populateTreeNode(form.getGlobalContext().RefMan.getprocedureListForActivity());
		}
	}

	private void populateTreeNode(ProcedureLiteVoCollection procedureListForActivity) 
	{
		if (procedureListForActivity!=null)
		{
			form.tre().getSelectedNode().getNodes().clear();
			for (int i=0;i<procedureListForActivity.size();i++)
			{
				TreeNode node = form.tre().getSelectedNode().getNodes().add(procedureListForActivity.get(i), procedureListForActivity.get(i).getProcedureName());
				node.setCollapsedImage(form.getImages().Core.BlueSquare);
			}
		}
	}
}
