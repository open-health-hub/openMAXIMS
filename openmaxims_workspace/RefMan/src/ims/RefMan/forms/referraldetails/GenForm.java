// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referraldetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabOverviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 808, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccReferralOverviewAndKpisForm = loader.loadComponent(134129, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccReferralOverviewAndKpisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(0), new Integer(808), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccReferralOverviewAndKpisForm, instance1 } );
				ims.framework.Control m_ccReferralOverviewAndKpisControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccReferralOverviewAndKpisForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReferralOverviewAndKpisControl);
				Menu[] menus1 = m_ccReferralOverviewAndKpisForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referraloverviewandkpis.IComponent ccReferralOverviewAndKpis()
			{
				return (ims.RefMan.forms.referraloverviewandkpis.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReferralOverviewAndKpisValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReferralOverviewAndKpisVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReferralOverviewAndKpisVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReferralOverviewAndKpisEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReferralOverviewAndKpisEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 832, 560, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccDetailsForm = loader.loadComponent(134118, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1009, skipContextValidation);
				//ims.framework.Control m_ccDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(832), new Integer(560), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1009), m_ccDetailsForm, instance1 } );
				ims.framework.Control m_ccDetailsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1009), m_ccDetailsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccDetailsControl);
				Menu[] menus1 = m_ccDetailsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referraldetailscomponent.IComponent ccDetails()
			{
				return (ims.RefMan.forms.referraldetailscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccDetailsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccDetailsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccDetailsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccDetailsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccDetailsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPayerDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrDetailsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabInsuranceDetailsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbInsurerCompanyComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbInsurarPlanComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 42, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan Holder Name:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 107, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Membership No:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 139, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Valid From:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 296, 139, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Valid To:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Insurer:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 171, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Scale of Cover:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 120, 72, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 104, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 120, 168, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 120, 136, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 352, 136, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInsurerCompanyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbInsurerCompanyTemp);
						cmbInsurerCompanyComboBox cmbInsurerCompany = (cmbInsurerCompanyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInsurerCompanyComboBox.class, m_cmbInsurerCompanyTemp);
						super.addComboBox(cmbInsurerCompany);
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 672, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbInsurarPlanTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbInsurarPlanTemp);
						cmbInsurarPlanComboBox cmbInsurarPlan = (cmbInsurarPlanComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbInsurarPlanComboBox.class, m_cmbInsurarPlanTemp);
						super.addComboBox(cmbInsurarPlan);
					}
		
					public TextBox txtHolderName()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txtMembershipNo()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txtScaleOfCover()
					{
						return (TextBox)super.getControl(9);
					}
					public DateControl dteValidFrom()
					{
						return (DateControl)super.getControl(10);
					}
					public DateControl dteValidTo()
					{
						return (DateControl)super.getControl(11);
					}
					public cmbInsurerCompanyComboBox cmbInsurerCompany()
					{
						return (cmbInsurerCompanyComboBox)super.getComboBox(0);
					}
					public cmbInsurarPlanComboBox cmbInsurarPlan()
					{
						return (cmbInsurarPlanComboBox)super.getComboBox(1);
					}
				}
				public static class tabSelfPayContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
				
					public static class Group1RadioButton extends RadioButtonBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
						{
							if(startTabIndex == null)
								throw new RuntimeException("Invalid startTabIndex ");
							RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 120, 112, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(0, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Line by Line", -1);
							RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
							control.addButton(1, anchoringHelper18.getX(), anchoringHelper18.getY(), anchoringHelper18.getWidth(), "Package", -1);
						}
						public void setText(Group1Enumeration option, String value)
						{
							if(option != null && option.id >= 0 && value != null)
								control.setText(option.id, value);
						}
						public Group1Enumeration getValue()
						{
							switch (super.control.getValue())
							{
								case -1: return Group1Enumeration.None;
								case 0: return Group1Enumeration.rdoLinebyLine;
								case 1: return Group1Enumeration.rdoPackage;
							}
							return null;
						}
						public void setValue(Group1Enumeration value)
						{
							if(value != null)
								super.control.setValue(value.id);
							else
								super.control.setValue(Group1Enumeration.None.id);
						}
						public boolean isEnabled(Group1Enumeration option)
						{
							return super.control.isEnabled(option.id);
						}
						public void setEnabled(Group1Enumeration option, boolean value)
						{
							super.control.setEnabled(option.id, value);
						}
						public boolean isVisible(Group1Enumeration option)
						{
							return super.control.isVisible(option.id);
						}
						public void setVisible(Group1Enumeration option, boolean value)
						{
							super.control.setVisible(option.id, value);
						}
						public void setVisible(boolean value)
						{
							super.control.setVisible(value);
						}
						public void setEnabled(boolean value)
						{
							super.control.setEnabled(value);
						}
					}
					public static class Group1Enumeration implements java.io.Serializable
					{
						private static final long serialVersionUID = 1L;
						public static Group1Enumeration None = new Group1Enumeration(-1);
						public static Group1Enumeration rdoLinebyLine = new Group1Enumeration(0);
						public static Group1Enumeration rdoPackage = new Group1Enumeration(1);
						private Group1Enumeration(int id)
						{
							this.id = id;
						}
						public boolean equals(Object o)
						{
							return this.id == ((Group1Enumeration)o).id;
						}
						private int id;
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 144, 136, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Deposit Amount:", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 144, 64, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Package Amount:", new Integer(0), null, new Integer(0)}));
				
						// DecimalBox Controls
						RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 240, 133, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
						RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 240, 61, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
				
						// RadioButton Controls
						RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
						super.addControl(tmpGroup1);
						Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
						Group1.setContext(startTabIndex, designSize, runtimeSize);
						super.addRadioButton(Group1);
					}
		
					public DecimalBox decDeposit()
					{
						return (DecimalBox)super.getControl(2);
					}
					public DecimalBox decPackage()
					{
						return (DecimalBox)super.getControl(3);
					}
					public Group1RadioButton Group1()
					{
						return (Group1RadioButton)super.getRadioButton(0);
					}
				}
				public static class tab3rdPartyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbPostCodeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbRelationshipComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					public static class grdContactDetailsRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdContactDetailsRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColContactTypeReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColContactTypeReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColContactTypeOpened()
						{
							super.row.showOpened(0);
						}
						public String getColContactType()
						{
							return (String)super.row.get(0);
						}
						public void setColContactType(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColContactTypeTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColContactValueReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColContactValueReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColContactValueOpened()
						{
							super.row.showOpened(1);
						}
						public String getColContactValue()
						{
							return (String)super.row.get(1);
						}
						public void setColContactValue(String value)
						{
							super.row.set(1, value);
						}
						public void setCellColContactValueTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public String getValue()
						{
							return (String)super.row.getValue();
						}
						public void setValue(String value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdContactDetailsRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdContactDetailsRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdContactDetailsRow get(int index)
						{
							return new grdContactDetailsRow(super.collection.get(index));
						}
						public grdContactDetailsRow newRow()
						{
							return new grdContactDetailsRow(super.collection.newRow());
						}
						public grdContactDetailsRow newRow(boolean autoSelect)
						{
							return new grdContactDetailsRow(super.collection.newRow(autoSelect));
						}
						public grdContactDetailsRow newRowAt(int index)
						{
							return new grdContactDetailsRow(super.collection.newRowAt(index));
						}
						public grdContactDetailsRow newRowAt(int index, boolean autoSelect)
						{
							return new grdContactDetailsRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdContactDetailsGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						public String[] getValues()
						{
							String[] listOfValues = new String[this.getRows().size()];
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues[x] = this.getRows().get(x).getValue();
							}
							return listOfValues;
						}
						public String getValue()
						{
							return (String)super.grid.getValue();
						}
						public void setValue(String value)
						{
							super.grid.setValue(value);
						}
						public grdContactDetailsRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdContactDetailsRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdContactDetailsRowCollection getRows()
						{
							return new grdContactDetailsRowCollection(super.grid.getRows());
						}
						public grdContactDetailsRow getRowByValue(String value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdContactDetailsRow(row);
						}
						public void setColContactTypeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColContactTypeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColContactValueHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColContactValueHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Panel Controls
						RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 512, 43, 280, 144, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Contact Details", new Integer(2), ""}));
				
						// Label Controls
						RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 175, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Post Code:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 46, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Address:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 232, 174, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Relationship to client:", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 14, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "3rd Party Name:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 120, 11, 664, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 120, 139, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 120, 107, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 120, 75, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 120, 43, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 120, 171, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbPostCodeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbPostCodeTemp);
						cmbPostCodeComboBox cmbPostCode = (cmbPostCodeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPostCodeComboBox.class, m_cmbPostCodeTemp);
						super.addComboBox(cmbPostCode);
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 368, 171, 128, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbRelationshipTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbRelationshipTemp);
						cmbRelationshipComboBox cmbRelationship = (cmbRelationshipComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRelationshipComboBox.class, m_cmbRelationshipTemp);
						super.addComboBox(cmbRelationship);
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 520, 67, 264, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						Grid m_grdContactDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdContactDetailsTemp);
						grdContactDetailsGrid grdContactDetails = (grdContactDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdContactDetailsGrid.class, m_grdContactDetailsTemp);
						grdContactDetails.addStringColumn("Contact Type", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdContactDetails.addStringColumn("Contact Value", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						super.addGrid(grdContactDetails);
					}
		
					public TextBox txtName()
					{
						return (TextBox)super.getControl(5);
					}
					public TextBox txtAddress4()
					{
						return (TextBox)super.getControl(6);
					}
					public TextBox txtAddress3()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txtAddress2()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txtAddress1()
					{
						return (TextBox)super.getControl(9);
					}
					public cmbPostCodeComboBox cmbPostCode()
					{
						return (cmbPostCodeComboBox)super.getComboBox(0);
					}
					public cmbRelationshipComboBox cmbRelationship()
					{
						return (cmbRelationshipComboBox)super.getComboBox(1);
					}
					public grdContactDetailsGrid grdContactDetails()
					{
						return (grdContactDetailsGrid)super.getGrid(0);
					}
				}
				public static class tabNHSContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbContractComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 75, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contract:", new Integer(1), null, new Integer(0)}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 112, 72, 680, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_cmbContractTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbContractTemp);
						cmbContractComboBox cmbContract = (cmbContractComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbContractComboBox.class, m_cmbContractTemp);
						super.addComboBox(cmbContract);
					}
		
					public cmbContractComboBox cmbContract()
					{
						return (cmbContractComboBox)super.getComboBox(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabInsuranceDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Insurance Details", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabInsuranceDetailsContainer m_tabInsuranceDetailsContainer = (tabInsuranceDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInsuranceDetailsContainer.class, m_tabInsuranceDetails, factory);
					super.addContainer(m_tabInsuranceDetails, m_tabInsuranceDetailsContainer);
					ims.framework.utils.SizeInfo m_tabInsuranceDetailsDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabInsuranceDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
					m_tabInsuranceDetailsContainer.setContext(form, appForm, m_tabInsuranceDetails, loader, form_images_local, startControlID, m_tabInsuranceDetailsDesignSize, m_tabInsuranceDetailsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabSelfPay = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Self Pay Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabSelfPayContainer m_tabSelfPayContainer = (tabSelfPayContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSelfPayContainer.class, m_tabSelfPay, factory);
					super.addContainer(m_tabSelfPay, m_tabSelfPayContainer);
					ims.framework.utils.SizeInfo m_tabSelfPayDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabSelfPayRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
					m_tabSelfPayContainer.setContext(form, appForm, m_tabSelfPay, loader, form_images_local, startControlID, m_tabSelfPayDesignSize, m_tabSelfPayRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tab3rdParty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"3rd Party Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tab3rdPartyContainer m_tab3rdPartyContainer = (tab3rdPartyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab3rdPartyContainer.class, m_tab3rdParty, factory);
					super.addContainer(m_tab3rdParty, m_tab3rdPartyContainer);
					ims.framework.utils.SizeInfo m_tab3rdPartyDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tab3rdPartyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
					m_tab3rdPartyContainer.setContext(form, appForm, m_tab3rdParty, loader, form_images_local, startControlID, m_tab3rdPartyDesignSize, m_tab3rdPartyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabNHS = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"NHS/PCT", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabNHSContainer m_tabNHSContainer = (tabNHSContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNHSContainer.class, m_tabNHS, factory);
					super.addContainer(m_tabNHS, m_tabNHSContainer);
					ims.framework.utils.SizeInfo m_tabNHSDesignSize = new ims.framework.utils.SizeInfo(808, 224);
					ims.framework.utils.SizeInfo m_tabNHSRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
					m_tabNHSContainer.setContext(form, appForm, m_tabNHS, loader, form_images_local, startControlID, m_tabNHSDesignSize, m_tabNHSRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
				}
				public void showtabInsuranceDetails()
				{
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
					tabInsuranceDetails().setVisible(true);
				}
				public void showtabSelfPay()
				{
					tabInsuranceDetails().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(false);
					tabSelfPay().setVisible(true);
				}
				public void showtab3rdParty()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tabNHS().setVisible(false);
					tab3rdParty().setVisible(true);
				}
				public void showtabNHS()
				{
					tabInsuranceDetails().setVisible(false);
					tabSelfPay().setVisible(false);
					tab3rdParty().setVisible(false);
					tabNHS().setVisible(true);
				}
		
				public tabInsuranceDetailsContainer tabInsuranceDetails()
				{
					return (tabInsuranceDetailsContainer)super.layers.get(0);
				}
				public tabSelfPayContainer tabSelfPay()
				{
					return (tabSelfPayContainer)super.layers.get(1);
				}
				public tab3rdPartyContainer tab3rdParty()
				{
					return (tab3rdPartyContainer)super.layers.get(2);
				}
				public tabNHSContainer tabNHS()
				{
					return (tabNHSContainer)super.layers.get(3);
				}
			}
			public static class cmbCardTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdBadDebtsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBadDebtsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColInvoiceNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColInvoiceNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColInvoiceNoOpened()
				{
					super.row.showOpened(1);
				}
				public String getColInvoiceNo()
				{
					return (String)super.row.get(1);
				}
				public void setColInvoiceNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColInvoiceNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDescriptionReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDescriptionOpened()
				{
					super.row.showOpened(2);
				}
				public String getColDescription()
				{
					return (String)super.row.get(2);
				}
				public void setColDescription(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDescriptionTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColSubTotalReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColSubTotalReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColSubTotalOpened()
				{
					super.row.showOpened(3);
				}
				public String getColSubTotal()
				{
					return (String)super.row.get(3);
				}
				public void setColSubTotal(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColSubTotalTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColVATReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColVATReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColVATOpened()
				{
					super.row.showOpened(4);
				}
				public String getColVAT()
				{
					return (String)super.row.get(4);
				}
				public void setColVAT(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColVATTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColTotalReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColTotalReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColTotalOpened()
				{
					super.row.showOpened(5);
				}
				public String getColTotal()
				{
					return (String)super.row.get(5);
				}
				public void setColTotal(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColTotalTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(6);
				}
				public String getColStatus()
				{
					return (String)super.row.get(6);
				}
				public void setColStatus(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBadDebtsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBadDebtsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBadDebtsRow get(int index)
				{
					return new grdBadDebtsRow(super.collection.get(index));
				}
				public grdBadDebtsRow newRow()
				{
					return new grdBadDebtsRow(super.collection.newRow());
				}
				public grdBadDebtsRow newRow(boolean autoSelect)
				{
					return new grdBadDebtsRow(super.collection.newRow(autoSelect));
				}
				public grdBadDebtsRow newRowAt(int index)
				{
					return new grdBadDebtsRow(super.collection.newRowAt(index));
				}
				public grdBadDebtsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBadDebtsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBadDebtsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdBadDebtsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBadDebtsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBadDebtsRowCollection getRows()
				{
					return new grdBadDebtsRowCollection(super.grid.getRows());
				}
				public grdBadDebtsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBadDebtsRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColInvoiceNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColInvoiceNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColSubTotalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColSubTotalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColVATHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColVATHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColTotalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColTotalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
			}
		
			public static class Group1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 256, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper42.getX(), anchoringHelper42.getY(), anchoringHelper42.getWidth(), "NHS/PCT", -1);
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 184, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper43.getX(), anchoringHelper43.getY(), anchoringHelper43.getWidth(), "Self-Pay", -1);
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper44.getX(), anchoringHelper44.getY(), anchoringHelper44.getWidth(), "3rd Party", -1);
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(3, anchoringHelper45.getX(), anchoringHelper45.getY(), anchoringHelper45.getWidth(), "Insurance", -1);
				}
				public void setText(Group1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group1Enumeration.None;
						case 0: return Group1Enumeration.rdoNHS;
						case 1: return Group1Enumeration.rdoSelfPay;
						case 2: return Group1Enumeration.rdo3rdParty;
						case 3: return Group1Enumeration.rdoInsurance;
					}
					return null;
				}
				public void setValue(Group1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group1Enumeration.None.id);
				}
				public boolean isEnabled(Group1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group1Enumeration None = new Group1Enumeration(-1);
				public static Group1Enumeration rdoNHS = new Group1Enumeration(0);
				public static Group1Enumeration rdoSelfPay = new Group1Enumeration(1);
				public static Group1Enumeration rdo3rdParty = new Group1Enumeration(2);
				public static Group1Enumeration rdoInsurance = new Group1Enumeration(3);
				private Group1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group1Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 424, 808, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Bad Debts", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 480, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Debit/Credit Card Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 496, 264, 320, 152, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Credit Control Notes", new Integer(2), ""}));
		
				// Layer Clasess
				lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
				super.addLayer(m_lyrDetailsLayer);
				m_lyrDetailsLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 16, 384, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cardholder Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card Expiry Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 16, 320, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card No:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 16, 288, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Card Type:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 128, 381, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 504, 288, 304, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 128, 349, 104, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 128, 288, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCardTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCardTypeTemp);
				cmbCardTypeComboBox cmbCardType = (cmbCardTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCardTypeComboBox.class, m_cmbCardTypeTemp);
				super.addComboBox(cmbCardType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 792, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdBadDebtsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grdBadDebtsTemp);
				grdBadDebtsGrid grdBadDebts = (grdBadDebtsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBadDebtsGrid.class, m_grdBadDebtsTemp);
				grdBadDebts.addStringColumn("Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("Invoice No", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("Description", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("Sub-Total", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("VAT", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("TOTAL", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBadDebts.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdBadDebts);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 128, 318, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroup1);
				Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
				Group1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group1);
			}

			public lyrDetailsLayer lyrDetails()
			{
				return (lyrDetailsLayer)super.getLayer(0);
			}
			public TextBox txtCardholderName()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtCreditControlNotes()
			{
				return (TextBox)super.getControl(12);
			}
			public DateControl dteExpDate()
			{
				return (DateControl)super.getControl(13);
			}
			public cmbCardTypeComboBox cmbCardType()
			{
				return (cmbCardTypeComboBox)super.getComboBox(0);
			}
			public grdBadDebtsGrid grdBadDebts()
			{
				return (grdBadDebtsGrid)super.getGrid(0);
			}
			public IntBox intCardNo()
			{
				return (IntBox)super.getControl(16);
			}
			public Group1RadioButton Group1()
			{
				return (Group1RadioButton)super.getRadioButton(0);
			}
		}
		public static class tabContractDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPlanComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(String value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(String value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(String value)
				{
					return super.control.removeRow(value);
				}
				public String getValue()
				{
					return (String)super.control.getValue();
				}
				public void setValue(String value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdAuthorisationDetailsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAuthorisationDetailsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateOpened()
				{
					super.row.showOpened(0);
				}
				public String getColDate()
				{
					return (String)super.row.get(0);
				}
				public void setColDate(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColAuthNoReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColAuthNoReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColAuthNoOpened()
				{
					super.row.showOpened(1);
				}
				public String getColAuthNo()
				{
					return (String)super.row.get(1);
				}
				public void setColAuthNo(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColAuthNoTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColAuthDetailsReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColAuthDetailsReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColAuthDetailsOpened()
				{
					super.row.showOpened(2);
				}
				public String getColAuthDetails()
				{
					return (String)super.row.get(2);
				}
				public void setColAuthDetails(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColAuthDetailsTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColAuthByReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColAuthByReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColAuthByOpened()
				{
					super.row.showOpened(3);
				}
				public String getColAuthBy()
				{
					return (String)super.row.get(3);
				}
				public void setColAuthBy(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColAuthByTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColReqByReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColReqByReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColReqByOpened()
				{
					super.row.showOpened(4);
				}
				public String getColReqBy()
				{
					return (String)super.row.get(4);
				}
				public void setColReqBy(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColReqByTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(5);
				}
				public String getColStatus()
				{
					return (String)super.row.get(5);
				}
				public void setColStatus(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getValue()
				{
					return (String)super.row.getValue();
				}
				public void setValue(String value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAuthorisationDetailsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAuthorisationDetailsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAuthorisationDetailsRow get(int index)
				{
					return new grdAuthorisationDetailsRow(super.collection.get(index));
				}
				public grdAuthorisationDetailsRow newRow()
				{
					return new grdAuthorisationDetailsRow(super.collection.newRow());
				}
				public grdAuthorisationDetailsRow newRow(boolean autoSelect)
				{
					return new grdAuthorisationDetailsRow(super.collection.newRow(autoSelect));
				}
				public grdAuthorisationDetailsRow newRowAt(int index)
				{
					return new grdAuthorisationDetailsRow(super.collection.newRowAt(index));
				}
				public grdAuthorisationDetailsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAuthorisationDetailsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAuthorisationDetailsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public String[] getValues()
				{
					String[] listOfValues = new String[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public String getValue()
				{
					return (String)super.grid.getValue();
				}
				public void setValue(String value)
				{
					super.grid.setValue(value);
				}
				public grdAuthorisationDetailsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAuthorisationDetailsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAuthorisationDetailsRowCollection getRows()
				{
					return new grdAuthorisationDetailsRowCollection(super.grid.getRows());
				}
				public grdAuthorisationDetailsRow getRowByValue(String value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAuthorisationDetailsRow(row);
				}
				public void setColDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColAuthNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColAuthNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColAuthDetailsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColAuthDetailsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColAuthByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColAuthByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColReqByHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColReqByHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 312, 808, 232, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Authorisation Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 288, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Plan Details", new Integer(2), ""}));
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 776, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Contact Information for Payor", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 40, 216, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "FAX:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 40, 184, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "E-Mail:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 40, 152, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Telephone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 40, 120, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 400, 68, 187, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Internal Plan/Contract Ref. No.:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 24, 68, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ext. Plan/Contract Ref No:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 24, 36, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Plan:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 24, 264, 192, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Contract and cover Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 184, 216, 384, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 184, 184, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 184, 152, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 184, 120, 600, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 600, 68, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 184, 68, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 184, 36, 616, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPlanTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPlanTemp);
				cmbPlanComboBox cmbPlan = (cmbPlanComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPlanComboBox.class, m_cmbPlanTemp);
				super.addComboBox(cmbPlan);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 792, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdAuthorisationDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
				addControl(m_grdAuthorisationDetailsTemp);
				grdAuthorisationDetailsGrid grdAuthorisationDetails = (grdAuthorisationDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAuthorisationDetailsGrid.class, m_grdAuthorisationDetailsTemp);
				grdAuthorisationDetails.addStringColumn("Date", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAuthorisationDetails.addStringColumn("Authorisation No", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAuthorisationDetails.addStringColumn("Authorisation Details", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAuthorisationDetails.addStringColumn("Authorised By", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAuthorisationDetails.addStringColumn("Request By", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAuthorisationDetails.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdAuthorisationDetails);
			}

			public Button btnViewContract()
			{
				return (Button)super.getControl(10);
			}
			public TextBox txtFax()
			{
				return (TextBox)super.getControl(11);
			}
			public TextBox txtEmail()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtTelephone()
			{
				return (TextBox)super.getControl(13);
			}
			public TextBox txtContractName()
			{
				return (TextBox)super.getControl(14);
			}
			public TextBox txtInternalRefNo()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtExtRefNo()
			{
				return (TextBox)super.getControl(16);
			}
			public cmbPlanComboBox cmbPlan()
			{
				return (cmbPlanComboBox)super.getComboBox(0);
			}
			public grdAuthorisationDetailsGrid grdAuthorisationDetails()
			{
				return (grdAuthorisationDetailsGrid)super.getGrid(0);
			}
		}
		public static class tabPresentationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 560, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccPresentationForm = loader.loadComponent(134114, appForm, startControlID * 10 + 3000, anchoringHelper78.getSize(), instance1, startTabIndex.intValue() + 2021, skipContextValidation);
				//ims.framework.Control m_ccPresentationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(0), new Integer(0), new Integer(824), new Integer(560), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2021), m_ccPresentationForm, instance1 } );
				ims.framework.Control m_ccPresentationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1076),  new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2021), m_ccPresentationForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPresentationControl);
				Menu[] menus1 = m_ccPresentationForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.presentationcomponent.IComponent ccPresentation()
			{
				return (ims.RefMan.forms.presentationcomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPresentationValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPresentationVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPresentationVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPresentationEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPresentationEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabLetterContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccUploadForm = loader.loadComponent(102264, appForm, startControlID * 10 + 4000, anchoringHelper79.getSize(), instance1, startTabIndex.intValue() + 3026, skipContextValidation);
				//ims.framework.Control m_ccUploadControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(0), new Integer(0), new Integer(824), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3026), m_ccUploadForm, instance1 } );
				ims.framework.Control m_ccUploadControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1078),  new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3026), m_ccUploadForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccUploadControl);
				Menu[] menus1 = m_ccUploadForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.uploaddocument.IComponent ccUpload()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccUploadValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccUploadVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccUploadVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccUploadEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccUploadEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabApptContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 552, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccApptDetailForm = loader.loadComponent(134117, appForm, startControlID * 10 + 5000, anchoringHelper80.getSize(), instance1, startTabIndex.intValue() + 4028, skipContextValidation);
				//ims.framework.Control m_ccApptDetailControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(8), new Integer(8), new Integer(816), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4028), m_ccApptDetailForm, instance1 } );
				ims.framework.Control m_ccApptDetailControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1080),  new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4028), m_ccApptDetailForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccApptDetailControl);
				Menu[] menus1 = m_ccApptDetailForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referralappointmentdetailscomponent.IComponent ccApptDetail()
			{
				return (ims.RefMan.forms.referralappointmentdetailscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccApptDetailValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccApptDetailVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccApptDetailVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccApptDetailEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccApptDetailEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccNotesForm = loader.loadComponent(134140, appForm, startControlID * 10 + 6000, anchoringHelper81.getSize(), instance1, startTabIndex.intValue() + 5030, skipContextValidation);
				//ims.framework.Control m_ccNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(8), new Integer(8), new Integer(808), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5030), m_ccNotesForm, instance1 } );
				ims.framework.Control m_ccNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1082),  new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5030), m_ccNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccNotesControl);
				Menu[] menus1 = m_ccNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.referraldetailsnotes.IComponent ccNotes()
			{
				return (ims.core.forms.referraldetailsnotes.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabOnwardReferralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbReferredIntoComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ServiceReferredInto value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ServiceReferredInto value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ServiceReferredInto value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ServiceReferredInto value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ServiceReferredInto value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ServiceReferredInto getValue()
				{
					return (ims.RefMan.vo.lookups.ServiceReferredInto)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ServiceReferredInto value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSecondaryCareProviderComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.OrgLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.OrgLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.OrgLiteVo getValue()
				{
					return (ims.core.vo.OrgLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.OrgLiteVo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansCompleteAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansAgreeAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
		
			public static class ansRequestedByGPAnswerBox extends AnswerBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void clear()
				{
					control.clear();
				}
				public java.util.ArrayList getValues()
				{
					return control.getValues();
				}
				public void addOption(ims.core.vo.lookups.YesNo option)
				{
					control.addOption(option);
				}
				public ims.core.vo.lookups.YesNo getValue()
				{
					return (ims.core.vo.lookups.YesNo)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 32, 352, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral Complete:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 32, 288, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service Referred Into:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 32, 256, 148, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Secondary Care Provider:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 32, 320, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral Date and Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 32, 128, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notes:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 32, 88, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Agree With Decision:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 32, 56, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requested By GP:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 240, 520, 296, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 6040), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Remove from Onward Referral Requested Worklist", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 736, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 6043), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 656, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 6042), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 16, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 6039), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 232, 128, 344, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 6034), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(2000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 232, 320, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 6037), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 232, 288, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbReferredIntoTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 6036), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReferredIntoTemp);
				cmbReferredIntoComboBox cmbReferredInto = (cmbReferredIntoComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReferredIntoComboBox.class, m_cmbReferredIntoTemp);
				super.addComboBox(cmbReferredInto);
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 232, 256, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSecondaryCareProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 6035), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSecondaryCareProviderTemp);
				cmbSecondaryCareProviderComboBox cmbSecondaryCareProvider = (cmbSecondaryCareProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSecondaryCareProviderComboBox.class, m_cmbSecondaryCareProviderTemp);
				super.addComboBox(cmbSecondaryCareProvider);
		
				// AnswerBox Controls
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 232, 352, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansComplete = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 6038), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
				super.addControl(tmpansComplete);
				ansCompleteAnswerBox ansComplete = (ansCompleteAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansCompleteAnswerBox.class, tmpansComplete);
				super.addAnswerBox(ansComplete);
				RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 232, 88, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansAgree = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 6033), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.TRUE, Boolean.TRUE, new Integer(10), Boolean.TRUE});
				super.addControl(tmpansAgree);
				ansAgreeAnswerBox ansAgree = (ansAgreeAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansAgreeAnswerBox.class, tmpansAgree);
				super.addAnswerBox(ansAgree);
				RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 232, 56, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				AnswerBox tmpansRequestedByGP = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 6032), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.TRUE});
				super.addControl(tmpansRequestedByGP);
				ansRequestedByGPAnswerBox ansRequestedByGP = (ansRequestedByGPAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansRequestedByGPAnswerBox.class, tmpansRequestedByGP);
				super.addAnswerBox(ansRequestedByGP);
			}

			public Label lbl5()
			{
				return (Label)super.getControl(2);
			}
			public Button btnRemove()
			{
				return (Button)super.getControl(7);
			}
			public Button btnCancelOnward()
			{
				return (Button)super.getControl(8);
			}
			public Button btnSaveOnward()
			{
				return (Button)super.getControl(9);
			}
			public Button btnEditOnward()
			{
				return (Button)super.getControl(10);
			}
			public TextBox txtOnwardNotes()
			{
				return (TextBox)super.getControl(11);
			}
			public DateTimeControl dtimReferred()
			{
				return (DateTimeControl)super.getControl(12);
			}
			public cmbReferredIntoComboBox cmbReferredInto()
			{
				return (cmbReferredIntoComboBox)super.getComboBox(0);
			}
			public cmbSecondaryCareProviderComboBox cmbSecondaryCareProvider()
			{
				return (cmbSecondaryCareProviderComboBox)super.getComboBox(1);
			}
			public ansCompleteAnswerBox ansComplete()
			{
				return (ansCompleteAnswerBox)super.getAnswerBox(0);
			}
			public ansAgreeAnswerBox ansAgree()
			{
				return (ansAgreeAnswerBox)super.getAnswerBox(1);
			}
			public ansRequestedByGPAnswerBox ansRequestedByGP()
			{
				return (ansRequestedByGPAnswerBox)super.getAnswerBox(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOverview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Overview", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOverviewContainer m_tabOverviewContainer = (tabOverviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOverviewContainer.class, m_tabOverview, factory);
			super.addContainer(m_tabOverview, m_tabOverviewContainer);
			ims.framework.utils.SizeInfo m_tabOverviewDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabOverviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper100.getWidth(), anchoringHelper100.getHeight());
			m_tabOverviewContainer.setContext(form, appForm, m_tabOverview, loader, form_images_local, startControlID, m_tabOverviewDesignSize, m_tabOverviewRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Referral Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDetailsContainer m_tabDetailsContainer = (tabDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDetailsContainer.class, m_tabDetails, factory);
			super.addContainer(m_tabDetails, m_tabDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper101.getWidth(), anchoringHelper101.getHeight());
			m_tabDetailsContainer.setContext(form, appForm, m_tabDetails, loader, form_images_local, startControlID, m_tabDetailsDesignSize, m_tabDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPayerDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Payor Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPayerDetailsContainer m_tabPayerDetailsContainer = (tabPayerDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPayerDetailsContainer.class, m_tabPayerDetails, factory);
			super.addContainer(m_tabPayerDetails, m_tabPayerDetailsContainer);
			ims.framework.utils.SizeInfo m_tabPayerDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPayerDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper102.getWidth(), anchoringHelper102.getHeight());
			m_tabPayerDetailsContainer.setContext(form, appForm, m_tabPayerDetails, loader, form_images_local, startControlID, m_tabPayerDetailsDesignSize, m_tabPayerDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabContractDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Contract Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabContractDetailsContainer m_tabContractDetailsContainer = (tabContractDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabContractDetailsContainer.class, m_tabContractDetails, factory);
			super.addContainer(m_tabContractDetails, m_tabContractDetailsContainer);
			ims.framework.utils.SizeInfo m_tabContractDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabContractDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper103.getWidth(), anchoringHelper103.getHeight());
			m_tabContractDetailsContainer.setContext(form, appForm, m_tabContractDetails, loader, form_images_local, startControlID, m_tabContractDetailsDesignSize, m_tabContractDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPresentation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Presentation", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPresentationContainer m_tabPresentationContainer = (tabPresentationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPresentationContainer.class, m_tabPresentation, factory);
			super.addContainer(m_tabPresentation, m_tabPresentationContainer);
			ims.framework.utils.SizeInfo m_tabPresentationDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabPresentationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper104.getWidth(), anchoringHelper104.getHeight());
			m_tabPresentationContainer.setContext(form, appForm, m_tabPresentation, loader, form_images_local, startControlID, m_tabPresentationDesignSize, m_tabPresentationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLetter = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Documents", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabLetterContainer m_tabLetterContainer = (tabLetterContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLetterContainer.class, m_tabLetter, factory);
			super.addContainer(m_tabLetter, m_tabLetterContainer);
			ims.framework.utils.SizeInfo m_tabLetterDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabLetterRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper105.getWidth(), anchoringHelper105.getHeight());
			m_tabLetterContainer.setContext(form, appForm, m_tabLetter, loader, form_images_local, startControlID, m_tabLetterDesignSize, m_tabLetterRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAppt = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Referral/Appointment Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabApptContainer m_tabApptContainer = (tabApptContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabApptContainer.class, m_tabAppt, factory);
			super.addContainer(m_tabAppt, m_tabApptContainer);
			ims.framework.utils.SizeInfo m_tabApptDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabApptRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper106.getWidth(), anchoringHelper106.getHeight());
			m_tabApptContainer.setContext(form, appForm, m_tabAppt, loader, form_images_local, startControlID, m_tabApptDesignSize, m_tabApptRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Admin Notes", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotesContainer m_tabNotesContainer = (tabNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotesContainer.class, m_tabNotes, factory);
			super.addContainer(m_tabNotes, m_tabNotesContainer);
			ims.framework.utils.SizeInfo m_tabNotesDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper107.getWidth(), anchoringHelper107.getHeight());
			m_tabNotesContainer.setContext(form, appForm, m_tabNotes, loader, form_images_local, startControlID, m_tabNotesDesignSize, m_tabNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper108 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOnwardReferral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper108.getX()), new Integer(anchoringHelper108.getY()), new Integer(anchoringHelper108.getWidth()), new Integer(anchoringHelper108.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Onward Referral", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOnwardReferralContainer m_tabOnwardReferralContainer = (tabOnwardReferralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOnwardReferralContainer.class, m_tabOnwardReferral, factory);
			super.addContainer(m_tabOnwardReferral, m_tabOnwardReferralContainer);
			ims.framework.utils.SizeInfo m_tabOnwardReferralDesignSize = new ims.framework.utils.SizeInfo(832, 584);
			ims.framework.utils.SizeInfo m_tabOnwardReferralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper108.getWidth(), anchoringHelper108.getHeight());
			m_tabOnwardReferralContainer.setContext(form, appForm, m_tabOnwardReferral, loader, form_images_local, startControlID, m_tabOnwardReferralDesignSize, m_tabOnwardReferralRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
		}
		public void settabOverviewEnabled(boolean value)
		{
			tabOverview().setEnabled(value);
		}
		public void settabDetailsEnabled(boolean value)
		{
			tabDetails().setEnabled(value);
		}
		public void settabPayerDetailsEnabled(boolean value)
		{
			tabPayerDetails().setEnabled(value);
		}
		public void settabContractDetailsEnabled(boolean value)
		{
			tabContractDetails().setEnabled(value);
		}
		public void settabPresentationEnabled(boolean value)
		{
			tabPresentation().setEnabled(value);
		}
		public void settabLetterEnabled(boolean value)
		{
			tabLetter().setEnabled(value);
		}
		public void settabApptEnabled(boolean value)
		{
			tabAppt().setEnabled(value);
		}
		public void settabNotesEnabled(boolean value)
		{
			tabNotes().setEnabled(value);
		}
		public void settabOnwardReferralEnabled(boolean value)
		{
			tabOnwardReferral().setEnabled(value);
		}
		public void showtabOverview()
		{
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabOverview().setVisible(true);
		}
		public void showtabDetails()
		{
			tabOverview().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabDetails().setVisible(true);
		}
		public void showtabPayerDetails()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabPayerDetails().setVisible(true);
		}
		public void showtabContractDetails()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabContractDetails().setVisible(true);
		}
		public void showtabPresentation()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabPresentation().setVisible(true);
		}
		public void showtabLetter()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabLetter().setVisible(true);
		}
		public void showtabAppt()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabAppt().setVisible(true);
		}
		public void showtabNotes()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabOnwardReferral().setVisible(false);
			tabNotes().setVisible(true);
		}
		public void showtabOnwardReferral()
		{
			tabOverview().setVisible(false);
			tabDetails().setVisible(false);
			tabPayerDetails().setVisible(false);
			tabContractDetails().setVisible(false);
			tabPresentation().setVisible(false);
			tabLetter().setVisible(false);
			tabAppt().setVisible(false);
			tabNotes().setVisible(false);
			tabOnwardReferral().setVisible(true);
		}

		public tabOverviewContainer tabOverview()
		{
			return (tabOverviewContainer)super.layers.get(0);
		}
		public tabDetailsContainer tabDetails()
		{
			return (tabDetailsContainer)super.layers.get(1);
		}
		public tabPayerDetailsContainer tabPayerDetails()
		{
			return (tabPayerDetailsContainer)super.layers.get(2);
		}
		public tabContractDetailsContainer tabContractDetails()
		{
			return (tabContractDetailsContainer)super.layers.get(3);
		}
		public tabPresentationContainer tabPresentation()
		{
			return (tabPresentationContainer)super.layers.get(4);
		}
		public tabLetterContainer tabLetter()
		{
			return (tabLetterContainer)super.layers.get(5);
		}
		public tabApptContainer tabAppt()
		{
			return (tabApptContainer)super.layers.get(6);
		}
		public tabNotesContainer tabNotes()
		{
			return (tabNotesContainer)super.layers.get(7);
		}
		public tabOnwardReferralContainer tabOnwardReferral()
		{
			return (tabOnwardReferralContainer)super.layers.get(8);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.lookups.ReferralManagementContractType.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.lookups.ReferralManagementContractType' of the global context variable 'RefMan.ReferralContractTypeForPatient' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrDetailLayer m_lyrDetailLayer = (lyrDetailLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailLayer.class, this, factory);
		super.addLayer(m_lyrDetailLayer);
		m_lyrDetailLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper109 = new RuntimeAnchoring(designSize, runtimeSize, 59, 594, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper109.getX()), new Integer(anchoringHelper109.getY()), new Integer(anchoringHelper109.getWidth()), new Integer(anchoringHelper109.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper110 = new RuntimeAnchoring(designSize, runtimeSize, 11, 594, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(anchoringHelper110.getX()), new Integer(anchoringHelper110.getY()), new Integer(anchoringHelper110.getWidth()), new Integer(anchoringHelper110.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Status:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper111 = new RuntimeAnchoring(designSize, runtimeSize, 140, 610, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(anchoringHelper111.getX()), new Integer(anchoringHelper111.getY()), new Integer(anchoringHelper111.getWidth()), new Integer(anchoringHelper111.getHeight()), new Integer(startTabIndex.intValue() + 6050), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reject", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper112 = new RuntimeAnchoring(designSize, runtimeSize, 207, 610, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper112.getX()), new Integer(anchoringHelper112.getY()), new Integer(anchoringHelper112.getWidth()), new Integer(anchoringHelper112.getHeight()), new Integer(startTabIndex.intValue() + 6054), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit Second Opinion", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper113 = new RuntimeAnchoring(designSize, runtimeSize, 8, 610, 64, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1114), new Integer(anchoringHelper113.getX()), new Integer(anchoringHelper113.getY()), new Integer(anchoringHelper113.getWidth()), new Integer(anchoringHelper113.getHeight()), new Integer(startTabIndex.intValue() + 6044), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complete", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper114 = new RuntimeAnchoring(designSize, runtimeSize, 543, 610, 57, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1115), new Integer(anchoringHelper114.getX()), new Integer(anchoringHelper114.getY()), new Integer(anchoringHelper114.getWidth()), new Integer(anchoringHelper114.getHeight()), new Integer(startTabIndex.intValue() + 6058), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Link ICP", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper115 = new RuntimeAnchoring(designSize, runtimeSize, 602, 610, 184, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1116), new Integer(anchoringHelper115.getX()), new Integer(anchoringHelper115.getY()), new Integer(anchoringHelper115.getWidth()), new Integer(anchoringHelper115.getHeight()), new Integer(startTabIndex.intValue() + 6059), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Flag for Review + Review Detail", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper116 = new RuntimeAnchoring(designSize, runtimeSize, 212, 610, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1117), new Integer(anchoringHelper116.getX()), new Integer(anchoringHelper116.getY()), new Integer(anchoringHelper116.getWidth()), new Integer(anchoringHelper116.getHeight()), new Integer(startTabIndex.intValue() + 6052), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Second Opinion", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper117 = new RuntimeAnchoring(designSize, runtimeSize, 74, 610, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1118), new Integer(anchoringHelper117.getX()), new Integer(anchoringHelper117.getY()), new Integer(anchoringHelper117.getWidth()), new Integer(anchoringHelper117.getHeight()), new Integer(startTabIndex.intValue() + 6046), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Accept", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper118 = new RuntimeAnchoring(designSize, runtimeSize, 789, 610, 56, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1119), new Integer(anchoringHelper118.getX()), new Integer(anchoringHelper118.getY()), new Integer(anchoringHelper118.getWidth()), new Integer(anchoringHelper118.getHeight()), new Integer(startTabIndex.intValue() + 6061), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper119 = new RuntimeAnchoring(designSize, runtimeSize, 328, 610, 90, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1120), new Integer(anchoringHelper119.getX()), new Integer(anchoringHelper119.getY()), new Integer(anchoringHelper119.getWidth()), new Integer(anchoringHelper119.getHeight()), new Integer(startTabIndex.intValue() + 6056), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper120 = new RuntimeAnchoring(designSize, runtimeSize, 140, 610, 160, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1121), new Integer(anchoringHelper120.getX()), new Integer(anchoringHelper120.getY()), new Integer(anchoringHelper120.getWidth()), new Integer(anchoringHelper120.getHeight()), new Integer(startTabIndex.intValue() + 6048), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Accepted on CAB", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper121 = new RuntimeAnchoring(designSize, runtimeSize, 420, 610, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1122), new Integer(anchoringHelper121.getX()), new Integer(anchoringHelper121.getY()), new Integer(anchoringHelper121.getWidth()), new Integer(anchoringHelper121.getHeight()), new Integer(startTabIndex.intValue() + 6057), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Record Admin Event", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailLayer lyrDetail()
	{
		return (lyrDetailLayer)super.getLayer(0);
	}
	public Label lblActualStatus()
	{
		return (Label)super.getControl(9);
	}
	public Button btnReject()
	{
		return (Button)super.getControl(11);
	}
	public Button btnEditSecondOpinion()
	{
		return (Button)super.getControl(12);
	}
	public Button btnComplete()
	{
		return (Button)super.getControl(13);
	}
	public Button btnLinkICP()
	{
		return (Button)super.getControl(14);
	}
	public Button btnReview()
	{
		return (Button)super.getControl(15);
	}
	public Button btnSecondOpinion()
	{
		return (Button)super.getControl(16);
	}
	public Button btnAccept()
	{
		return (Button)super.getControl(17);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(18);
	}
	public Button btnOnward()
	{
		return (Button)super.getControl(19);
	}
	public Button btnAcceptOnCAB()
	{
		return (Button)super.getControl(20);
	}
	public Button btnRecAdminEvent()
	{
		return (Button)super.getControl(21);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			RefMan = new RefManForms();
			Core = new CoreForms();
			ICP = new ICPForms();
			Pathways = new PathwaysForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
				MyOrder = new LocalFormName(116111);
			}
			public final FormName SelectAndOrderDialog;
			public final FormName MyOrder;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				RejectionReasondialog = new LocalFormName(134102);
				ChangeServiceDialog = new LocalFormName(134122);
				BookAppointment = new LocalFormName(134123);
				SecondOpinionDialog = new LocalFormName(134127);
				ReferralReviewDetails = new LocalFormName(134133);
				PrinterSelectionDialog = new LocalFormName(134145);
				BookTheatreSlot = new LocalFormName(134208);
			}
			public final FormName RejectionReasondialog;
			public final FormName ChangeServiceDialog;
			public final FormName BookAppointment;
			public final FormName SecondOpinionDialog;
			public final FormName ReferralReviewDetails;
			public final FormName PrinterSelectionDialog;
			public final FormName BookTheatreSlot;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				ReferralDetailsNoteDialog = new LocalFormName(134130);
				UploadDocumentDialog = new LocalFormName(102268);
			}
			public final FormName ReferralDetailsNoteDialog;
			public final FormName UploadDocumentDialog;
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				ICPPatientSelect = new LocalFormName(118117);
			}
			public final FormName ICPPatientSelect;
		}
		public final class PathwaysForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PathwaysForms()
			{
				AdminEvent = new LocalFormName(132123);
			}
			public final FormName AdminEvent;
		}

		public OCRRForms OCRR;
		public RefManForms RefMan;
		public CoreForms Core;
		public ICPForms ICP;
		public PathwaysForms Pathways;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			ICP = new ICPImages();
			Admin = new AdminImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				Pupil_size2 = new ImageHelper(102127, "Images/Core/eye_2x.gif", new Integer(13), new Integer(13));
				RedTriangle = new ImageHelper(102268, "Images/Core/red-triangle.gif", new Integer(16), new Integer(16));
				YellowTriangleOut = new ImageHelper(102275, "Images/Core/yellow-tri-1-out.gif", new Integer(16), new Integer(16));
				MultiSelect = new ImageHelper(102233, "Images/Core/MultiSelect.gif", new Integer(16), new Integer(16));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image Pupil_size2;
			public final ims.framework.utils.Image RedTriangle;
			public final ims.framework.utils.Image YellowTriangleOut;
			public final ims.framework.utils.Image MultiSelect;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Child = new ImageHelper(118100, "Images/ICP/property.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Child;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Activity = new ImageHelper(103111, "Images/Admin/VSObject_Structure.gif", new Integer(16), new Integer(16));
				ActivityGroup = new ImageHelper(103129, "Images/Admin/Procedure.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Activity;
			public final ims.framework.utils.Image ActivityGroup;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				NewResult = new ImageHelper(116130, "Images/OCRR/NewResult.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image NewResult;
		}
		public final CoreImages Core;
		public final ICPImages ICP;
		public final AdminImages Admin;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_SelectedTab = new ims.framework.ContextVariable("SelectedTab", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedTab_" + componentIdentifier + "");
			cxl_FlagForReview = new ims.framework.ContextVariable("FlagForReview", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__FlagForReview_" + componentIdentifier + "");
			cxl_WorkAllocation = new ims.framework.ContextVariable("WorkAllocation", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier + "");
			cxl_OnwardReferral = new ims.framework.ContextVariable("OnwardReferral", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier + "");
			cxl_ChangeServiceMessageBoxID = new ims.framework.ContextVariable("ChangeServiceMessageBoxID", prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__ChangeServiceMessageBoxID_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralWizardVo getSelectedRecord()
		{
			return (ims.RefMan.vo.CatsReferralWizardVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.CatsReferralWizardVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getSelectedTabIsNotNull()
		{
			return !cxl_SelectedTab.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.ReferralDetailsSelectedTab getSelectedTab()
		{
			return (ims.RefMan.vo.enums.ReferralDetailsSelectedTab)cxl_SelectedTab.getValue(context);
		}
		public void setSelectedTab(ims.RefMan.vo.enums.ReferralDetailsSelectedTab value)
		{
			cxl_SelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTab = null;
		public boolean getFlagForReviewIsNotNull()
		{
			return !cxl_FlagForReview.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.ReferralReviewDetail getFlagForReview()
		{
			return (ims.RefMan.vo.enums.ReferralReviewDetail)cxl_FlagForReview.getValue(context);
		}
		public void setFlagForReview(ims.RefMan.vo.enums.ReferralReviewDetail value)
		{
			cxl_FlagForReview.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FlagForReview = null;
		public boolean getWorkAllocationIsNotNull()
		{
			return !cxl_WorkAllocation.getValueIsNull(context);
		}
		public ims.RefMan.vo.WorkAllocationVo getWorkAllocation()
		{
			return (ims.RefMan.vo.WorkAllocationVo)cxl_WorkAllocation.getValue(context);
		}
		public void setWorkAllocation(ims.RefMan.vo.WorkAllocationVo value)
		{
			cxl_WorkAllocation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WorkAllocation = null;
		public boolean getOnwardReferralIsNotNull()
		{
			return !cxl_OnwardReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.OnwardReferralFromTriageVo getOnwardReferral()
		{
			return (ims.RefMan.vo.OnwardReferralFromTriageVo)cxl_OnwardReferral.getValue(context);
		}
		public void setOnwardReferral(ims.RefMan.vo.OnwardReferralFromTriageVo value)
		{
			cxl_OnwardReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OnwardReferral = null;
		public boolean getChangeServiceMessageBoxIDIsNotNull()
		{
			return !cxl_ChangeServiceMessageBoxID.getValueIsNull(context);
		}
		public Integer getChangeServiceMessageBoxID()
		{
			return (Integer)cxl_ChangeServiceMessageBoxID.getValue(context);
		}
		public void setChangeServiceMessageBoxID(Integer value)
		{
			cxl_ChangeServiceMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChangeServiceMessageBoxID = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[160];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-ID", "ID_ReferralReject");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-REASON", "Reason");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-REJECTIONCOMMENTS", "RejectionComments");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-WASGPCONTACTED", "WasGPContacted");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.RejectionReason", "BO-1096100014-WASPATIENTCONTACTED", "WasPatientContacted");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralNote", "BO-1096100013-ID", "ID_CorrespondenceNote");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralNote", "BO-1096100013-CARECONTEXT", "CareContext");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralNote", "BO-1096100013-RECORDINGDATETIME", "RecordingDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralNote", "BO-1096100013-NOTE", "Note");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralNote", "BO-1096100013-NOTETYPE", "NoteType");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.SecondOpinionReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-ID", "ID_Service");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-SPECIALTY", "Specialty");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.CurrentServiceLiteVo", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_ICP.Service", "BO-1003100032-ID", "ID_Service");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_ICP.ProcedureID", "BO-1003100019-ID", "ID_Procedure");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-ID", "ID_WorkAllocation");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-CATSREFERRAL", "CatsReferral");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-DATEALLOCATED", "DateAllocated");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-COMPLETEDDATETIME", "CompletedDateTime");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-COMPLETEDBY", "CompletedBy");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-UNALLOCATEDBY", "UnallocatedBy");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-UNALLOCATEDDATE", "UnallocatedDate");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-REFERRALSTATUS", "ReferralStatus");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-ID", "ID_OnwardReferralFromTriage");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-CATSREFERRAL", "CatsReferral");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-REFERREDDATE", "ReferredDate");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-REQUESTEDBYGP", "RequestedByGP");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-AGREEWITHDECISION", "AgreeWithDecision");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-NOTES", "Notes");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-SERVICEREFERREDINTO", "ServiceReferredInto");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralDetails.__internal_x_context__OnwardReferral_" + componentIdentifier, "BO-1096100055-REFERRALCOMPLETE", "ReferralComplete");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
