// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.newelectivelisttcieroddialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.RefMan.domain.NewElectiveListTCIErodDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.RefMan.domain.NewElectiveListTCIErodDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbTCIOfferedMethodValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTCIOfferedMethod().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TCIOfferMethod existingInstance = (ims.core.vo.lookups.TCIOfferMethod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTCIOfferedMethodLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.TCIOfferMethod)
		{
			ims.core.vo.lookups.TCIOfferMethod instance = (ims.core.vo.lookups.TCIOfferMethod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTCIOfferedMethodLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TCIOfferMethod existingInstance = (ims.core.vo.lookups.TCIOfferMethod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTCIOfferedMethod().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTCIOfferedMethodLookup()
	{
		this.form.cmbTCIOfferedMethod().clear();
		ims.core.vo.lookups.TCIOfferMethodCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTCIOfferMethod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTCIOfferedMethod().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTCIOfferedMethodLookupValue(int id)
	{
		ims.core.vo.lookups.TCIOfferMethod instance = ims.core.vo.lookups.LookupHelper.getTCIOfferMethodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTCIOfferedMethod().setValue(instance);
	}
	protected final void defaultcmbTCIOfferedMethodLookupValue()
	{
		this.form.cmbTCIOfferedMethod().setValue((ims.core.vo.lookups.TCIOfferMethod)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TCIOfferMethod.class, engine.getFormName().getID(), ims.core.vo.lookups.TCIOfferMethod.TYPE_ID));
	}
	protected final void oncmbBreachReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbBreachReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.KPIExceededReason existingInstance = (ims.RefMan.vo.lookups.KPIExceededReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbBreachReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.KPIExceededReason)
		{
			ims.RefMan.vo.lookups.KPIExceededReason instance = (ims.RefMan.vo.lookups.KPIExceededReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbBreachReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.KPIExceededReason existingInstance = (ims.RefMan.vo.lookups.KPIExceededReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbBreachReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbBreachReasonLookup()
	{
		this.form.cmbBreachReason().clear();
		ims.RefMan.vo.lookups.KPIExceededReasonCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getKPIExceededReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbBreachReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbBreachReasonLookupValue(int id)
	{
		ims.RefMan.vo.lookups.KPIExceededReason instance = ims.RefMan.vo.lookups.LookupHelper.getKPIExceededReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbBreachReason().setValue(instance);
	}
	protected final void defaultcmbBreachReasonLookupValue()
	{
		this.form.cmbBreachReason().setValue((ims.RefMan.vo.lookups.KPIExceededReason)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.KPIExceededReason.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.KPIExceededReason.TYPE_ID));
	}
	protected final void oncmbInterpreterRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbInterpreterRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbInterpreterRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Language)
		{
			ims.core.vo.lookups.Language instance = (ims.core.vo.lookups.Language)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbInterpreterRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Language existingInstance = (ims.core.vo.lookups.Language)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbInterpreterRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbInterpreterRequiredLookup()
	{
		this.form.cmbInterpreterRequired().clear();
		ims.core.vo.lookups.LanguageCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getLanguage(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbInterpreterRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbInterpreterRequiredLookupValue(int id)
	{
		ims.core.vo.lookups.Language instance = ims.core.vo.lookups.LookupHelper.getLanguageInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbInterpreterRequired().setValue(instance);
	}
	protected final void defaultcmbInterpreterRequiredLookupValue()
	{
		this.form.cmbInterpreterRequired().setValue((ims.core.vo.lookups.Language)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Language.class, engine.getFormName().getID(), ims.core.vo.lookups.Language.TYPE_ID));
	}
	protected final void oncmbTransportRequiredValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbTransportRequired().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTransportRequiredLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.scheduling.vo.lookups.ApptTransportType)
		{
			ims.scheduling.vo.lookups.ApptTransportType instance = (ims.scheduling.vo.lookups.ApptTransportType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTransportRequiredLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.scheduling.vo.lookups.ApptTransportType existingInstance = (ims.scheduling.vo.lookups.ApptTransportType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbTransportRequired().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTransportRequiredLookup()
	{
		this.form.cmbTransportRequired().clear();
		ims.scheduling.vo.lookups.ApptTransportTypeCollection lookupCollection = ims.scheduling.vo.lookups.LookupHelper.getApptTransportType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbTransportRequired().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTransportRequiredLookupValue(int id)
	{
		ims.scheduling.vo.lookups.ApptTransportType instance = ims.scheduling.vo.lookups.LookupHelper.getApptTransportTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbTransportRequired().setValue(instance);
	}
	protected final void defaultcmbTransportRequiredLookupValue()
	{
		this.form.cmbTransportRequired().setValue((ims.scheduling.vo.lookups.ApptTransportType)domain.getLookupService().getDefaultInstance(ims.scheduling.vo.lookups.ApptTransportType.class, engine.getFormName().getID(), ims.scheduling.vo.lookups.ApptTransportType.TYPE_ID));
	}
	protected final void oncmbIntendedManagementValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIntendedManagement().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ManagementIntention existingInstance = (ims.core.vo.lookups.ManagementIntention)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIntendedManagementLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ManagementIntention)
		{
			ims.core.vo.lookups.ManagementIntention instance = (ims.core.vo.lookups.ManagementIntention)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIntendedManagementLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ManagementIntention existingInstance = (ims.core.vo.lookups.ManagementIntention)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIntendedManagement().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIntendedManagementLookup()
	{
		this.form.cmbIntendedManagement().clear();
		ims.core.vo.lookups.ManagementIntentionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getManagementIntention(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIntendedManagement().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIntendedManagementLookupValue(int id)
	{
		ims.core.vo.lookups.ManagementIntention instance = ims.core.vo.lookups.LookupHelper.getManagementIntentionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIntendedManagement().setValue(instance);
	}
	protected final void defaultcmbIntendedManagementLookupValue()
	{
		this.form.cmbIntendedManagement().setValue((ims.core.vo.lookups.ManagementIntention)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ManagementIntention.class, engine.getFormName().getID(), ims.core.vo.lookups.ManagementIntention.TYPE_ID));
	}
	protected final void oncmbPriorityValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPriority().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPriorityLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.ReferralUrgency)
		{
			ims.RefMan.vo.lookups.ReferralUrgency instance = (ims.RefMan.vo.lookups.ReferralUrgency)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPriorityLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.ReferralUrgency existingInstance = (ims.RefMan.vo.lookups.ReferralUrgency)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPriority().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPriorityLookup()
	{
		this.form.cmbPriority().clear();
		ims.RefMan.vo.lookups.ReferralUrgencyCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPriority().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPriorityLookupValue(int id)
	{
		ims.RefMan.vo.lookups.ReferralUrgency instance = ims.RefMan.vo.lookups.LookupHelper.getReferralUrgencyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPriority().setValue(instance);
	}
	protected final void defaultcmbPriorityLookupValue()
	{
		this.form.cmbPriority().setValue((ims.RefMan.vo.lookups.ReferralUrgency)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.ReferralUrgency.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.ReferralUrgency.TYPE_ID));
	}
	protected final void oncmbElectiveListReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbElectiveListReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ElectiveListReason existingInstance = (ims.emergency.vo.lookups.ElectiveListReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbElectiveListReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ElectiveListReason)
		{
			ims.emergency.vo.lookups.ElectiveListReason instance = (ims.emergency.vo.lookups.ElectiveListReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbElectiveListReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ElectiveListReason existingInstance = (ims.emergency.vo.lookups.ElectiveListReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbElectiveListReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbElectiveListReasonLookup()
	{
		this.form.cmbElectiveListReason().clear();
		ims.emergency.vo.lookups.ElectiveListReasonCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getElectiveListReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbElectiveListReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbElectiveListReasonLookupValue(int id)
	{
		ims.emergency.vo.lookups.ElectiveListReason instance = ims.emergency.vo.lookups.LookupHelper.getElectiveListReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbElectiveListReason().setValue(instance);
	}
	protected final void defaultcmbElectiveListReasonLookupValue()
	{
		this.form.cmbElectiveListReason().setValue((ims.emergency.vo.lookups.ElectiveListReason)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ElectiveListReason.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ElectiveListReason.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.RefMan.domain.NewElectiveListTCIErodDialog domain;
}
