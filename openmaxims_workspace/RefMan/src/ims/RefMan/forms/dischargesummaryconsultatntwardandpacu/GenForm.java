// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.dischargesummaryconsultatntwardandpacu;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrContentLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabConsultantContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 424, 368, 162, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Actions for GP - Community", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 368, 195, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Further Management Instruction:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 136, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Summary of Admission:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 424, 384, 393, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, new Integer(3500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 393, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 808, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 808, 208, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public TextBox txtActionsforGPCommunity()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtFurtherManagementInstructions()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtSummaryOfAdmission()
			{
				return (TextBox)super.getControl(6);
			}
			public DynamicGrid dyngrDiagnosis()
			{
				return (DynamicGrid)super.getControl(7);
			}
		}
		public static class tabDischargeSummaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 504, 496, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Discharge Summary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 664, 496, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "PrintDischargeReport", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 480, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public Button btnDischargeSummary()
			{
				return (Button)super.getControl(0);
			}
			public Button btnDischargeReport()
			{
				return (Button)super.getControl(1);
			}
			public HTMLViewer htmReportPreview()
			{
				return (HTMLViewer)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 832, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabConsultant = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Consultant", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabConsultantContainer m_tabConsultantContainer = (tabConsultantContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConsultantContainer.class, m_tabConsultant, factory);
			super.addContainer(m_tabConsultant, m_tabConsultantContainer);
			ims.framework.utils.SizeInfo m_tabConsultantDesignSize = new ims.framework.utils.SizeInfo(832, 552);
			ims.framework.utils.SizeInfo m_tabConsultantRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabConsultantContainer.setContext(form, appForm, m_tabConsultant, loader, startControlID, m_tabConsultantDesignSize, m_tabConsultantRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 832, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischargeSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Summary", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabDischargeSummaryContainer m_tabDischargeSummaryContainer = (tabDischargeSummaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeSummaryContainer.class, m_tabDischargeSummary, factory);
			super.addContainer(m_tabDischargeSummary, m_tabDischargeSummaryContainer);
			ims.framework.utils.SizeInfo m_tabDischargeSummaryDesignSize = new ims.framework.utils.SizeInfo(832, 552);
			ims.framework.utils.SizeInfo m_tabDischargeSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabDischargeSummaryContainer.setContext(form, appForm, m_tabDischargeSummary, loader, startControlID, m_tabDischargeSummaryDesignSize, m_tabDischargeSummaryRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabConsultant().setVisible(false);
			tabDischargeSummary().setVisible(false);
		}
		public void showtabConsultant()
		{
			tabDischargeSummary().setVisible(false);
			tabConsultant().setVisible(true);
		}
		public void showtabDischargeSummary()
		{
			tabConsultant().setVisible(false);
			tabDischargeSummary().setVisible(true);
		}

		public tabConsultantContainer tabConsultant()
		{
			return (tabConsultantContainer)super.layers.get(0);
		}
		public tabDischargeSummaryContainer tabDischargeSummary()
		{
			return (tabDischargeSummaryContainer)super.layers.get(1);
		}
	}
	public static class recordBrowserRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo getValue()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrContentLayer m_lyrContentLayer = (lyrContentLayer)LayerFlyweightFactory.getInstance().createLayer(lyrContentLayer.class, this, factory);
		super.addLayer(m_lyrContentLayer);
		m_lyrContentLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 768, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recordBrowserTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recordBrowserTemp);
		recordBrowserRecordBrowser recordBrowser = (recordBrowserRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recordBrowserRecordBrowser.class, m_recordBrowserTemp);
		super.addRecordBrowser(recordBrowser);
	}


	public lyrContentLayer lyrContent()
	{
		return (lyrContentLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(4);
	}
	public recordBrowserRecordBrowser recordBrowser()
	{
		return (recordBrowserRecordBrowser)super.getRecordBrowser(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_DischargeSummaryCollection = new ims.framework.ContextVariable("DischargeSummaryCollection", prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryCollection_" + componentIdentifier + "");
			cxl_DischargeSummaryWardAndPACU = new ims.framework.ContextVariable("DischargeSummaryWardAndPACU", prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier + "");
			cxl_Inpatient = new ims.framework.ContextVariable("Inpatient", prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier + "");
			cxl_HasInpatient = new ims.framework.ContextVariable("HasInpatient", prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__HasInpatient_" + componentIdentifier + "");
		}
		
		public boolean getDischargeSummaryCollectionIsNotNull()
		{
			return !cxl_DischargeSummaryCollection.getValueIsNull(context);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection getDischargeSummaryCollection()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection)cxl_DischargeSummaryCollection.getValue(context);
		}
		public void setDischargeSummaryCollection(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection value)
		{
			cxl_DischargeSummaryCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeSummaryCollection = null;
		public boolean getDischargeSummaryWardAndPACUIsNotNull()
		{
			return !cxl_DischargeSummaryWardAndPACU.getValueIsNull(context);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardVo getDischargeSummaryWardAndPACU()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardVo)cxl_DischargeSummaryWardAndPACU.getValue(context);
		}
		public void setDischargeSummaryWardAndPACU(ims.RefMan.vo.DischargeSummaryPacuAndWardVo value)
		{
			cxl_DischargeSummaryWardAndPACU.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeSummaryWardAndPACU = null;
		public boolean getInpatientIsNotNull()
		{
			return !cxl_Inpatient.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeVo getInpatient()
		{
			return (ims.core.vo.InpatientEpisodeVo)cxl_Inpatient.getValue(context);
		}
		public void setInpatient(ims.core.vo.InpatientEpisodeVo value)
		{
			cxl_Inpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Inpatient = null;
		public boolean getHasInpatientIsNotNull()
		{
			return !cxl_HasInpatient.getValueIsNull(context);
		}
		public Boolean getHasInpatient()
		{
			return (Boolean)cxl_HasInpatient.getValue(context);
		}
		public void setHasInpatient(Boolean value)
		{
			cxl_HasInpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasInpatient = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[98];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-ID", "ID_DischargeSummaryPacuAndWard");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-CATSREFERRAL", "CatsReferral");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-DISCHARGEDATE", "DischargeDate");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-DISCHARGETYPE", "DischargeType");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-DISCHARGEEPISODE", "DischargeEpisode");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-ISCURRENT", "IsCurrent");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-ADMISSIONSUMMARY", "AdmissionSummary");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-PROBLEMSANDNEEDS", "ProblemsAndNeeds");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-ADDITIONALCOMMENTS", "AdditionalComments");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-FOLLOWUPTYPE", "FollowupType");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-FURTHERMANAGEMENTINSTRUCTIONS", "FurtherManagementInstructions");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-MEDICALLYINCOMPLETE", "MedicallyIncomplete");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-INCOMPLETENOOFDAYS", "IncompleteNoOfDays");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-CURRENTONWARDREFERRAL", "CurrentOnwardReferral");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__DischargeSummaryWardAndPACU_" + componentIdentifier, "BO-1096100034-ACTIONSFORGPANDCOMMUNITY", "ActionsforGPandCommunity");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ISONLEAVE", "IsOnLeave");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-COMMENTS", "Comments");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-BEDNO", "BedNo");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ADMISSIONTYPE", "AdmissionType");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ISMATERNITYINPATIENT", "IsMaternityInpatient");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-REASONFORADMISSION", "ReasonForAdmission");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-WARDTYPE", "WardType");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-READMISSIONTYPE", "ReadmissionType");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryConsultatntWardAndPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-DISCHARGEREADYDATE", "DischargeReadyDate");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
