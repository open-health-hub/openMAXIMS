// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.clinicalnotescustomcontrol;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnoseReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnoseReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnoseOpened()
		{
			super.row.showOpened(0);
		}
		public String getColDiagnose()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnose(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnoseTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.RefMan.vo.PatientDiagnosisApptDetailVo getValue()
		{
			return (ims.RefMan.vo.PatientDiagnosisApptDetailVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientDiagnosisApptDetailVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection getValues()
		{
			ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection listOfValues = new ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientDiagnosisApptDetailVo getValue()
		{
			return (ims.RefMan.vo.PatientDiagnosisApptDetailVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientDiagnosisApptDetailVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(ims.RefMan.vo.PatientDiagnosisApptDetailVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setColDiagnoseHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnoseHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdProceduresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProceduresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(0);
		}
		public String getColProcedure()
		{
			return (String)super.row.get(0);
		}
		public void setColProcedure(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.RefMan.vo.PatientProcedureApptDetailVo getValue()
		{
			return (ims.RefMan.vo.PatientProcedureApptDetailVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientProcedureApptDetailVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProceduresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProceduresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProceduresRow get(int index)
		{
			return new grdProceduresRow(super.collection.get(index));
		}
		public grdProceduresRow newRow()
		{
			return new grdProceduresRow(super.collection.newRow());
		}
		public grdProceduresRow newRow(boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRow(autoSelect));
		}
		public grdProceduresRow newRowAt(int index)
		{
			return new grdProceduresRow(super.collection.newRowAt(index));
		}
		public grdProceduresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProceduresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.PatientProcedureApptDetailVoCollection getValues()
		{
			ims.RefMan.vo.PatientProcedureApptDetailVoCollection listOfValues = new ims.RefMan.vo.PatientProcedureApptDetailVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientProcedureApptDetailVo getValue()
		{
			return (ims.RefMan.vo.PatientProcedureApptDetailVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientProcedureApptDetailVo value)
		{
			super.grid.setValue(value);
		}
		public grdProceduresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProceduresRowCollection getRows()
		{
			return new grdProceduresRowCollection(super.grid.getRows());
		}
		public grdProceduresRow getRowByValue(ims.RefMan.vo.PatientProcedureApptDetailVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProceduresRow(row);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class GroupViewRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 136, 10, 120, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Chronological View", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 112, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Appointment View", startTabIndex.intValue() + 1);
		}
		public void setText(GroupViewEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupViewEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupViewEnumeration.None;
				case 0: return GroupViewEnumeration.rdoCronological;
				case 1: return GroupViewEnumeration.rdoAppointment;
			}
			return null;
		}
		public void setValue(GroupViewEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupViewEnumeration.None.id);
		}
		public boolean isEnabled(GroupViewEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupViewEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupViewEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupViewEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupViewEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupViewEnumeration None = new GroupViewEnumeration(-1);
		public static GroupViewEnumeration rdoCronological = new GroupViewEnumeration(0);
		public static GroupViewEnumeration rdoAppointment = new GroupViewEnumeration(1);
		private GroupViewEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupViewEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(776, 576);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuClinicalNotesMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuClinicalNotesMenuADD_NOTESItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Note", true, false, new Integer(134122), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920007)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuADD_NOTESItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuADD_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Diagnosis", true, false, new Integer(134124), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920008)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuADD_DIAGNOSISItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuADD_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Procedure", true, false, new Integer(134126), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920009)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuADD_PROCEDUREItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_NOTEItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Note", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920001)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_NOTEItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Diagnosis", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920002)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Procedure", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920003)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuEDIT_PROCEDUREItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_NOTEItem = factory.createMenuItem(startControlID.intValue() + 7, "RIE Note", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920004)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_NOTEItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 8, "RIE Diagnosis", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920005)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem);
		contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_PROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 9, "RIE Procedure", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3920006)))
			contextMenus.RefMan.contextMenuClinicalNotesMenu.add(contextMenus.RefMan.contextMenuClinicalNotesMenuDELETE_PROCEDUREItem);
		form.registerMenu(contextMenus.RefMan.contextMenuClinicalNotesMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 480, 304, 288, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,"Procedures", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 480, 9, 288, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Diagnosis", new Integer(2), ""}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 98, 547, 248, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Print Correspondence Note", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 304, 7, 168, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Previous Referrals", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 480, 32, 288, 264, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn("Differential Diagnosis", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDiagnosis);
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 480, 328, 288, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdProceduresTemp);
		grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
		grdProcedures.addStringColumn("Procedures Performed", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdProcedures);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 464, 512, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.RefMan.contextMenuClinicalNotesMenu, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));

		// RadioButton Controls
		RadioButton tmpGroupView = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupView);
		GroupViewRadioButton GroupView = (GroupViewRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupViewRadioButton.class, tmpGroupView);
		GroupView.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupView);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(2);
	}
	public Button btnPrevious()
	{
		return (Button)super.getControl(3);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(0);
	}
	public grdProceduresGrid grdProcedures()
	{
		return (grdProceduresGrid)super.getGrid(1);
	}
	public DynamicGrid dyngrdNotes()
	{
		return (DynamicGrid)super.getControl(6);
	}
	public GroupViewRadioButton GroupView()
	{
		return (GroupViewRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Core = new CoreForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ClinicalNoteDialog = new LocalFormName(134195);
				PatientDiagnosisDialog = new LocalFormName(134201);
				PatientProcedureDialog = new LocalFormName(134202);
				PreviousReferralsDialog = new LocalFormName(134204);
				AppointmentPatientDiagnosisDialog = new LocalFormName(134211);
				AppointmentPatientProcedureDialog = new LocalFormName(134212);
				ClinicalNotesCustomControl = new LocalFormName(134213);
				PrintCorrespondenceNoteDialog = new LocalFormName(134182);
			}
			public final FormName ClinicalNoteDialog;
			public final FormName PatientDiagnosisDialog;
			public final FormName PatientProcedureDialog;
			public final FormName PreviousReferralsDialog;
			public final FormName AppointmentPatientDiagnosisDialog;
			public final FormName AppointmentPatientProcedureDialog;
			public final FormName ClinicalNotesCustomControl;
			public final FormName PrintCorrespondenceNoteDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				PatientDocumentView = new LocalFormName(102335);
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName PatientDocumentView;
			public final FormName RieConfirmationDialog;
		}

		public RefManForms RefMan;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			RefMan = new RefManImages();
			Core = new CoreImages();
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				Appointment16 = new ImageHelper(134121, "Images/RefMan/appointment_16.png", new Integer(16), new Integer(16));
				Diagnosis16 = new ImageHelper(134124, "Images/RefMan/diagnosis_16.png", new Integer(16), new Integer(16));
				ClinicalNotes16 = new ImageHelper(134122, "Images/RefMan/clinical_notes_16.png", new Integer(16), new Integer(16));
				Procedures16 = new ImageHelper(134126, "Images/RefMan/procedures_16.png", new Integer(16), new Integer(16));
				CorrespondenceNotes16 = new ImageHelper(134123, "Images/RefMan/correspondence_notes_16.png", new Integer(16), new Integer(16));
				FollowUpNotes16 = new ImageHelper(134125, "Images/RefMan/follow_up_notes_16.png", new Integer(16), new Integer(16));
				DiagnosisChild16 = new ImageHelper(134130, "Images/RefMan/diagnosis_child_16.png", new Integer(16), new Integer(16));
				ClinicalNotesChild16 = new ImageHelper(134127, "Images/RefMan/clinical_notes_child_16.png", new Integer(16), new Integer(16));
				ProceduresChild16 = new ImageHelper(134131, "Images/RefMan/procedures_child_16.png", new Integer(16), new Integer(16));
				CorrespondenceNotesChild16 = new ImageHelper(134128, "Images/RefMan/correspondence_notes_child_16.png", new Integer(16), new Integer(16));
				FollowUpNotesChild16 = new ImageHelper(134129, "Images/RefMan/follow_up_notes_child_16.png", new Integer(16), new Integer(16));
				FollowUpNotesChildEdited16 = new ImageHelper(134132, "Images/RefMan/follow_up_notes_child_16_edited.png", new Integer(16), new Integer(16));
				ClinicalNotesChildEdited16 = new ImageHelper(134134, "Images/RefMan/clinical_notes_child_16_edited.png", new Integer(16), new Integer(16));
				CorrespondenceNotesChildEdited16 = new ImageHelper(134133, "Images/RefMan/correspondence_notes_child_16_edited.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Appointment16;
			public final ims.framework.utils.Image Diagnosis16;
			public final ims.framework.utils.Image ClinicalNotes16;
			public final ims.framework.utils.Image Procedures16;
			public final ims.framework.utils.Image CorrespondenceNotes16;
			public final ims.framework.utils.Image FollowUpNotes16;
			public final ims.framework.utils.Image DiagnosisChild16;
			public final ims.framework.utils.Image ClinicalNotesChild16;
			public final ims.framework.utils.Image ProceduresChild16;
			public final ims.framework.utils.Image CorrespondenceNotesChild16;
			public final ims.framework.utils.Image FollowUpNotesChild16;
			public final ims.framework.utils.Image FollowUpNotesChildEdited16;
			public final ims.framework.utils.Image ClinicalNotesChildEdited16;
			public final ims.framework.utils.Image CorrespondenceNotesChildEdited16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				DocumentsBlue16 = new ImageHelper(102332, "Images/Core/documents2_16x16.png", new Integer(16), new Integer(16));
				PDFIcon = new ImageHelper(102294, "Images/Core/pdf.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image DocumentsBlue16;
			public final ims.framework.utils.Image PDFIcon;
		}
		public final RefManImages RefMan;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ReferralClinicalNotes = new ims.framework.ContextVariable("ReferralClinicalNotes", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__ReferralClinicalNotes_" + componentIdentifier + "");
			cxl_HcpUser = new ims.framework.ContextVariable("HcpUser", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier + "");
			cxl_DateSortOrder = new ims.framework.ContextVariable("DateSortOrder", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__DateSortOrder_" + componentIdentifier + "");
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_IsReadOnlyMode = new ims.framework.ContextVariable("IsReadOnlyMode", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__IsReadOnlyMode_" + componentIdentifier + "");
			cxl_RIERecord = new ims.framework.ContextVariable("RIERecord", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__RIERecord_" + componentIdentifier + "");
			cxl_SelectedCategory = new ims.framework.ContextVariable("SelectedCategory", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__SelectedCategory_" + componentIdentifier + "");
			cxl_HcpSortOrder = new ims.framework.ContextVariable("HcpSortOrder", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpSortOrder_" + componentIdentifier + "");
			cxl_MosUser = new ims.framework.ContextVariable("MosUser", prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__MosUser_" + componentIdentifier + "");
		}
		
		public boolean getReferralClinicalNotesIsNotNull()
		{
			return !cxl_ReferralClinicalNotes.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralClinicalNotesVo getReferralClinicalNotes()
		{
			return (ims.RefMan.vo.ReferralClinicalNotesVo)cxl_ReferralClinicalNotes.getValue(context);
		}
		public void setReferralClinicalNotes(ims.RefMan.vo.ReferralClinicalNotesVo value)
		{
			cxl_ReferralClinicalNotes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralClinicalNotes = null;
		public boolean getHcpUserIsNotNull()
		{
			return !cxl_HcpUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getHcpUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_HcpUser.getValue(context);
		}
		public void setHcpUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_HcpUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpUser = null;
		public boolean getDateSortOrderIsNotNull()
		{
			return !cxl_DateSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getDateSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_DateSortOrder.getValue(context);
		}
		public void setDateSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_DateSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DateSortOrder = null;
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedInstance()
		{
			return (ims.vo.ValueObject)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.vo.ValueObject value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getIsReadOnlyModeIsNotNull()
		{
			return !cxl_IsReadOnlyMode.getValueIsNull(context);
		}
		public Boolean getIsReadOnlyMode()
		{
			return (Boolean)cxl_IsReadOnlyMode.getValue(context);
		}
		public void setIsReadOnlyMode(Boolean value)
		{
			cxl_IsReadOnlyMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsReadOnlyMode = null;
		public boolean getRIERecordIsNotNull()
		{
			return !cxl_RIERecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getRIERecord()
		{
			return (ims.vo.ValueObject)cxl_RIERecord.getValue(context);
		}
		public void setRIERecord(ims.vo.ValueObject value)
		{
			cxl_RIERecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIERecord = null;
		public boolean getSelectedCategoryIsNotNull()
		{
			return !cxl_SelectedCategory.getValueIsNull(context);
		}
		public Integer getSelectedCategory()
		{
			return (Integer)cxl_SelectedCategory.getValue(context);
		}
		public void setSelectedCategory(Integer value)
		{
			cxl_SelectedCategory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCategory = null;
		public boolean getHcpSortOrderIsNotNull()
		{
			return !cxl_HcpSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getHcpSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_HcpSortOrder.getValue(context);
		}
		public void setHcpSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_HcpSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HcpSortOrder = null;
		public boolean getMosUserIsNotNull()
		{
			return !cxl_MosUser.getValueIsNull(context);
		}
		public ims.core.resource.people.vo.MemberOfStaffRefVo getMosUser()
		{
			return (ims.core.resource.people.vo.MemberOfStaffRefVo)cxl_MosUser.getValue(context);
		}
		public void setMosUser(ims.core.resource.people.vo.MemberOfStaffRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'MosUser' RefVo context variable.");
			if(value == null)
				cxl_MosUser.setValue(context, null);
			else
				cxl_MosUser.setValue(context, new ims.core.resource.people.vo.MemberOfStaffRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_MosUser = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicalNotesMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_NOTES = 1;
				public static final int ADD_DIAGNOSIS = 2;
				public static final int ADD_PROCEDURE = 3;
				public static final int EDIT_NOTE = 4;
				public static final int EDIT_DIAGNOSE = 5;
				public static final int EDIT_PROCEDURE = 6;
				public static final int DELETE_NOTE = 7;
				public static final int DELETE_DIAGNOSIS = 8;
				public static final int DELETE_PROCEDURE = 9;
			}
			public void disableAllClinicalNotesMenuMenuItems()
			{
				this.contextMenuClinicalNotesMenuADD_NOTESItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuADD_DIAGNOSISItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuADD_PROCEDUREItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuEDIT_NOTEItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuEDIT_PROCEDUREItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuDELETE_NOTEItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem.setEnabled(false);
				this.contextMenuClinicalNotesMenuDELETE_PROCEDUREItem.setEnabled(false);
			}
			public void hideAllClinicalNotesMenuMenuItems()
			{
				this.contextMenuClinicalNotesMenuADD_NOTESItem.setVisible(false);
				this.contextMenuClinicalNotesMenuADD_DIAGNOSISItem.setVisible(false);
				this.contextMenuClinicalNotesMenuADD_PROCEDUREItem.setVisible(false);
				this.contextMenuClinicalNotesMenuEDIT_NOTEItem.setVisible(false);
				this.contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem.setVisible(false);
				this.contextMenuClinicalNotesMenuEDIT_PROCEDUREItem.setVisible(false);
				this.contextMenuClinicalNotesMenuDELETE_NOTEItem.setVisible(false);
				this.contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem.setVisible(false);
				this.contextMenuClinicalNotesMenuDELETE_PROCEDUREItem.setVisible(false);
			}
			private Menu contextMenuClinicalNotesMenu;
			public ReadOnlyMenuItem getClinicalNotesMenuADD_NOTESItem()
			{
				return this.contextMenuClinicalNotesMenuADD_NOTESItem;
			}
			private MenuItem contextMenuClinicalNotesMenuADD_NOTESItem;
			public ReadOnlyMenuItem getClinicalNotesMenuADD_DIAGNOSISItem()
			{
				return this.contextMenuClinicalNotesMenuADD_DIAGNOSISItem;
			}
			private MenuItem contextMenuClinicalNotesMenuADD_DIAGNOSISItem;
			public ReadOnlyMenuItem getClinicalNotesMenuADD_PROCEDUREItem()
			{
				return this.contextMenuClinicalNotesMenuADD_PROCEDUREItem;
			}
			private MenuItem contextMenuClinicalNotesMenuADD_PROCEDUREItem;
			public ReadOnlyMenuItem getClinicalNotesMenuEDIT_NOTEItem()
			{
				return this.contextMenuClinicalNotesMenuEDIT_NOTEItem;
			}
			private MenuItem contextMenuClinicalNotesMenuEDIT_NOTEItem;
			public ReadOnlyMenuItem getClinicalNotesMenuEDIT_DIAGNOSEItem()
			{
				return this.contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem;
			}
			private MenuItem contextMenuClinicalNotesMenuEDIT_DIAGNOSEItem;
			public ReadOnlyMenuItem getClinicalNotesMenuEDIT_PROCEDUREItem()
			{
				return this.contextMenuClinicalNotesMenuEDIT_PROCEDUREItem;
			}
			private MenuItem contextMenuClinicalNotesMenuEDIT_PROCEDUREItem;
			public ReadOnlyMenuItem getClinicalNotesMenuDELETE_NOTEItem()
			{
				return this.contextMenuClinicalNotesMenuDELETE_NOTEItem;
			}
			private MenuItem contextMenuClinicalNotesMenuDELETE_NOTEItem;
			public ReadOnlyMenuItem getClinicalNotesMenuDELETE_DIAGNOSISItem()
			{
				return this.contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem;
			}
			private MenuItem contextMenuClinicalNotesMenuDELETE_DIAGNOSISItem;
			public ReadOnlyMenuItem getClinicalNotesMenuDELETE_PROCEDUREItem()
			{
				return this.contextMenuClinicalNotesMenuDELETE_PROCEDUREItem;
			}
			private MenuItem contextMenuClinicalNotesMenuDELETE_PROCEDUREItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[111];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralClinicalNotes", "BO-1096100058-ID", "ID_ReferralClinicalNotes");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralClinicalNotes", "BO-1096100058-CATSREFERRAL", "CatsReferral");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-ID", "ID_AppointmentClinicalNotes");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-CATSREFERRAL", "CatsReferral");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-CLINICALNOTE", "ClinicalNote");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-CLINICALNOTETYPE", "ClinicalNoteType");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-APPOINTMENT", "Appointment");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-AUTHORINGUSER", "AuthoringUser");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-NOTETYPE", "NoteType");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-NOTESTATUS", "NoteStatus");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-COPYTOGP", "CopyToGP");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-COPYTOPATIENT", "CopyToPatient");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-COPYTOSECONDARYCARE", "CopyToSecondaryCare");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentClinicalNote", "BO-1096100059-CORRESPONDENCEMADEACTIVEDATETIME", "CorrespondenceMadeActiveDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientDiagnosis", "BO-1096100061-APPOINTMENT", "Appointment");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-PROCDATE", "ProcDate");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1003100017-INCOMPLETEREASON", "IncompleteReason");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1096100060-APPOINTMENT", "Appointment");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentPatientProcedure", "BO-1096100060-ISPRIMARYPROCEDURE", "IsPrimaryProcedure");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.AppointmentForPatientDiagnosisOrProcedures", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__ReferralClinicalNotes_" + componentIdentifier, "BO-1096100058-ID", "ID_ReferralClinicalNotes");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__ReferralClinicalNotes_" + componentIdentifier, "BO-1096100058-CATSREFERRAL", "CatsReferral");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__HcpUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ClinicalNotesCustomControl.__internal_x_context__MosUser_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
