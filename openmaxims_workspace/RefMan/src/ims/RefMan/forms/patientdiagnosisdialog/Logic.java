// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.patientdiagnosisdialog;

import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVo;
import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVoCollection;
import ims.RefMan.vo.CatsReferralForClinicalNotesVo;
import ims.RefMan.vo.PatientDiagnosisApptDetailVo;
import ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection;
import ims.RefMan.vo.ReferralClinicalNotesVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.PartialDate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public static final Integer COLDIAGNOSE = Integer.valueOf(-1);
	public static final Integer COLIMAGE = Integer.valueOf(-2);
	public static final Integer COLMAIN = Integer.valueOf(-3);

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open()
	{
		form.setMode(FormMode.EDIT);
	}

	private void initialize()
	{
		form.qmbDiagnosis().setFocus();
		
		form.ccAuthoringInfo().initializeComponent();
		form.ccAuthoringInfo().setEnabledAuthoringHCP(true);
		form.ccAuthoringInfo().setEnabledDateTime(true);
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(true);
		
		initializeSelectedDiagnosisGrid();
	}

	private void initializeSelectedDiagnosisGrid()
	{
		form.dyngrdDiagnosis().clear();

		form.dyngrdDiagnosis().setSelectable(true);
		
		DynamicGridColumn colDiagnose = form.dyngrdDiagnosis().getColumns().newColumn("Diagnosis", COLDIAGNOSE);
		colDiagnose.setWidth(550);
		colDiagnose.setReadOnly(true);
		
		DynamicGridColumn colMain = form.dyngrdDiagnosis().getColumns().newColumn("Main", COLMAIN);
		colMain.setWidth(50);
		colMain.setAlignment(Alignment.CENTER);

		DynamicGridColumn colImage = form.dyngrdDiagnosis().getColumns().newColumn("", COLIMAGE);
		colImage.setWidth(-1);
		colImage.setAlignment(Alignment.CENTER);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		ReferralClinicalNotesVo referralClinicalNotes = domain.getReferralClinicalNotes(form.getGlobalContext().RefMan.getCatsReferral());
		referralClinicalNotes = populateReferralClinicalNotes(referralClinicalNotes);
		
		String[] errors = referralClinicalNotes.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			return domain.saveReferralClinicalNotes(referralClinicalNotes);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dyngrdDiagnosis().getRows().size() == 0)
		{
			uiErrors.add("Please add a least one diagnose in Selected Diagnosis Grid.");					
		}
		
		String authoringErrors = form.ccAuthoringInfo().getErrors();
		
		if(authoringErrors != null && authoringErrors.length() > 0)
		{	
			uiErrors.add(authoringErrors);
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private ReferralClinicalNotesVo populateReferralClinicalNotes(ReferralClinicalNotesVo referralClinicalNotes)
	{
		if(referralClinicalNotes == null)
			referralClinicalNotes = new ReferralClinicalNotesVo();
		
		if(referralClinicalNotes.getCatsReferral() == null)
			referralClinicalNotes.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		if(referralClinicalNotes.getDiagnosis() == null)
			referralClinicalNotes.setDiagnosis(new PatientDiagnosisApptDetailVoCollection());
		
		CatsReferralForClinicalNotesVo referral = domain.getReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		for(int i=0; i<form.dyngrdDiagnosis().getRows().size(); i++)
		{
			if(form.dyngrdDiagnosis().getRows().get(i).getValue() instanceof DiagLiteVo)
			{
				PatientDiagnosisApptDetailVo patientDiagnose = populatePatientDiagnoseFromScreen((DiagLiteVo) form.dyngrdDiagnosis().getRows().get(i).getValue(), (Boolean) form.dyngrdDiagnosis().getRows().get(i).getCells().get(getSelectedColumn(COLMAIN)).getValue(), referral);
				
				CSPrimaryDiagnosisForClinicalNotesVo primary = getPrimaryDiagnosisRecord(patientDiagnose);
				
				if(primary != null)
				{
					clearPreviousPrimaryDiagnosis(referralClinicalNotes, patientDiagnose);
				}
				
				referralClinicalNotes.getDiagnosis().add(patientDiagnose);
			}
		}
		
		return referralClinicalNotes;
	}

	private void clearPreviousPrimaryDiagnosis(ReferralClinicalNotesVo referralClinicalNotes, PatientDiagnosisApptDetailVo patientDiagnose)
	{
		if(referralClinicalNotes == null || referralClinicalNotes.getDiagnosis() == null || patientDiagnose == null)
			return;
		
		for(int i=0; i<referralClinicalNotes.getDiagnosis().size(); i++)
		{
			if(referralClinicalNotes.getDiagnosis().get(i) != null && referralClinicalNotes.getDiagnosis().get(i).getID_PatientDiagnosisIsNotNull() && !patientDiagnose.equals(referralClinicalNotes.getDiagnosis().get(i)))
			{
				referralClinicalNotes.getDiagnosis().get(i).setPrimaryForCareSpells(null);
			}
		}
	}

	private PatientDiagnosisApptDetailVo populatePatientDiagnoseFromScreen(DiagLiteVo diagnose, Boolean isMain, CatsReferralForClinicalNotesVo referral)
	{
		if(diagnose == null)
			return null;
		
		PatientDiagnosisApptDetailVo patientDiagnose = new PatientDiagnosisApptDetailVo();
		patientDiagnose.setAppointment(form.getGlobalContext().RefMan.getAppointmentForPatientDiagnosisOrProcedures());
		
		patientDiagnose.setDiagnosis(diagnose);
		patientDiagnose.setDiagnosisDescription(diagnose.getDiagnosisName());
		patientDiagnose.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		patientDiagnose.setAuthoringInfo(form.ccAuthoringInfo().getValue());
		patientDiagnose.setEpisodeOfCare(referral.getCareContext().getEpisodeOfCare());
		patientDiagnose.setCareContext(referral.getCareContext());
		patientDiagnose.setDiagnosedDate(new PartialDate(new Date()));
		
		setCsPrimaryDiagnosis(patientDiagnose, isMain);
		
		return patientDiagnose;
	}
	
	private void setCsPrimaryDiagnosis(PatientDiagnosisApptDetailVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		CSPrimaryDiagnosisForClinicalNotesVo voCSPrimaryDiagnosis = getPrimaryDiagnosisRecord(voPatDiagnosis);
		
		if (voCSPrimaryDiagnosis != null || isChkPrimaryChecked)
		{
			if (voCSPrimaryDiagnosis == null)
			{
				voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(new CSPrimaryDiagnosisForClinicalNotesVo(), voPatDiagnosis, isChkPrimaryChecked);
				
				if (voPatDiagnosis.getPrimaryForCareSpells() == null)
					voPatDiagnosis.setPrimaryForCareSpells(new CSPrimaryDiagnosisForClinicalNotesVoCollection());
				
				voPatDiagnosis.getPrimaryForCareSpells().add(voCSPrimaryDiagnosis);
			}
			else
			{
				int index = voPatDiagnosis.getPrimaryForCareSpells().indexOf(voCSPrimaryDiagnosis);
				if (index >= 0)
				{
					voCSPrimaryDiagnosis = populatePrimaryDiagnosisDataFromScreen(voCSPrimaryDiagnosis, voPatDiagnosis, isChkPrimaryChecked);
					voPatDiagnosis.getPrimaryForCareSpells().set(index, voCSPrimaryDiagnosis);
				}
			}
		}
	}

	private CSPrimaryDiagnosisForClinicalNotesVo populatePrimaryDiagnosisDataFromScreen(CSPrimaryDiagnosisForClinicalNotesVo primaryDiagnosisVo, PatientDiagnosisApptDetailVo voPatDiagnosis, boolean isChkPrimaryChecked)
	{
		if (primaryDiagnosisVo == null)
			primaryDiagnosisVo = new CSPrimaryDiagnosisForClinicalNotesVo();
		
		primaryDiagnosisVo.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		primaryDiagnosisVo.setDiagnosis(voPatDiagnosis);
		primaryDiagnosisVo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(primaryDiagnosisVo.getEpisodeOfCare() == null)
			primaryDiagnosisVo.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		primaryDiagnosisVo.setIsActive(isChkPrimaryChecked);
		
		return primaryDiagnosisVo;
	}

	private CSPrimaryDiagnosisForClinicalNotesVo getPrimaryDiagnosisRecord(PatientDiagnosisApptDetailVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisForClinicalNotesVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext && voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive())
				return voColl.get(i);
		}

		return null;
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	private void updateControlsState()
	{
		form.btnAddDiagnosis().setEnabled(form.qmbDiagnosis().getValue() != null);
		form.getContextMenus().RefMan.getDifferentialDiagnosisMenuADDItem().setVisible(form.dyngrdDiagnosis().getValue() != null);
	}

	private String getListOfSelectedDiagnosis()
	{
		String ids = "";
		
		for(int i=0; i<form.dyngrdDiagnosis().getRows().size(); i++)
		{
			if(form.dyngrdDiagnosis().getRows().get(i).getValue() instanceof DiagLiteVo)
			{
				ids += (i>0 ? "," : "") + ((DiagLiteVo) form.dyngrdDiagnosis().getRows().get(i).getValue()).getID_Diagnosis();
			}
		}
		
		return ids.length() > 0 ? ids : null;
	}

	private void sortSelectedDiagnosisGrid()
	{
		if(form.dyngrdDiagnosis().getRows().size() == 0)
			return;
		
		DiagLiteVoCollection diagnosis = new DiagLiteVoCollection();
		HashMap<DiagLiteVo, Integer> diagCollection = new HashMap<DiagLiteVo, Integer>(); 
		
		for(int i=0; i<form.dyngrdDiagnosis().getRows().size(); i++)
		{
			if(form.dyngrdDiagnosis().getRows().get(i).getValue() instanceof DiagLiteVo)
			{
				DiagLiteVo diag = (DiagLiteVo) form.dyngrdDiagnosis().getRows().get(i).getValue();
				
				diagnosis.add(diag);
				
				if(diagCollection.containsKey(diag))
				{
					Integer diagValue = diagCollection.get(diag);
					diagCollection.put(diag, ++diagValue);
				}
				else
				{
					diagCollection.put(diag, 1);
				}
			}
		}
		
		diagnosis.sort();
		
		populateSelectedDiagnosisGrid(diagnosis, diagCollection);
	}

	private void populateSelectedDiagnosisGrid(DiagLiteVoCollection diagnosis, HashMap<DiagLiteVo, Integer> diagCollection)
	{
		form.dyngrdDiagnosis().getRows().clear();
		
		if(diagnosis == null)
			return;
		
		for(DiagLiteVo diagnose : diagnosis)
		{
			if(diagnose == null)
				continue;
			
			Integer numberOfSameDiagnosis = diagCollection.get(diagnose);
			
			for(int i=0; i<numberOfSameDiagnosis; i++)
			{
				addSelectedDiagnoseRow(diagnose);
			}
		}
	}

	private DynamicGridRow addSelectedDiagnoseRow(DiagLiteVo diagnose)
	{
		if(diagnose == null)
			return null;
		
		DynamicGridRow row = form.dyngrdDiagnosis().getRows().newRow();

		DynamicGridCell cell = row.getCells().newCell(getSelectedColumn(COLDIAGNOSE), DynamicCellType.LABEL);
		cell.setValue(diagnose.getDiagnosisName());
		cell.setIdentifier(diagnose.getDiagnosisName());
		cell.setTooltip(diagnose.getDiagnosisName());
		cell.setReadOnly(true);

		cell = row.getCells().newCell(getSelectedColumn(COLMAIN), DynamicCellType.BOOL);
		cell.setAutoPostBack(true);
		
		if(diagnose.equals(form.getLocalContext().getMainDiagnosis()) && !isDiagnosisAlreadyAdded(diagnose))
		{
			cell.setValue(true);
		}
		
		cell = row.getCells().newCell(getSelectedColumn(COLIMAGE), DynamicCellType.IMAGEBUTTON);
		cell.setValue(form.getImages().Core.Minus);
		cell.setTooltip("Remove Diagnosis");
		cell.setAutoPostBack(true);
		
		row.setValue(diagnose);
		
		return row;
	}

	private boolean isDiagnosisAlreadyAdded(DiagLiteVo diagnose)
	{
		if(diagnose == null)
			return false;
		
		for(int i=0; i<form.dyngrdDiagnosis().getRows().size(); i++)
		{
			if(diagnose.equals(form.dyngrdDiagnosis().getRows().get(i).getValue()))
				return true;
		}
		
		return false;
	}

	private DynamicGridColumn getSelectedColumn(Integer identifier)
	{
		return form.dyngrdDiagnosis().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onDyngrdDiagnosisCellValueChanged(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(getSelectedColumn(COLMAIN)) && cell.getValue() instanceof Boolean && (Boolean) cell.getValue())
		{
			if(cell.getRow().getValue() instanceof DiagLiteVo)
				form.getLocalContext().setMainDiagnosis((DiagLiteVo) cell.getRow().getValue());
			
			clearOtherRowsCheck(cell.getRow());
		}
	}

	private void clearOtherRowsCheck(DynamicGridRow row)
	{
		if(row == null)
			return;
		
		for(int i=0; i<form.dyngrdDiagnosis().getRows().size(); i++)
		{
			if(!form.dyngrdDiagnosis().getRows().get(i).equals(row))
			{
				form.dyngrdDiagnosis().getRows().get(i).getCells().get(getSelectedColumn(COLMAIN)).setValue(false);
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.DifferentialDiagnosisMenu.ADD:
				addDiagnosisTwice();
			break;
		}
		
		updateControlsState();
	}

	private void addDiagnosisTwice()
	{
		if(form.dyngrdDiagnosis().getValue() instanceof DiagLiteVo)
		{
			addSelectedDiagnoseRow((DiagLiteVo) form.dyngrdDiagnosis().getValue());
			
			sortSelectedDiagnosisGrid();
		}
	}

	@Override
	protected void onDyngrdDiagnosisRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onBtnAddDiagnosisClick() throws PresentationLogicException
	{
		if(form.qmbDiagnosis().getValue() == null)
		{
			updateControlsState();
			return;
		}
		
		addSelectedDiagnoseRow(form.qmbDiagnosis().getValue());
		
		form.qmbDiagnosis().removeRow(form.qmbDiagnosis().getValue());
		form.qmbDiagnosis().clear();
		
		sortSelectedDiagnosisGrid();
		updateControlsState();
	}

	@Override
	protected void onQmbDiagnosisValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onQmbDiagnosisTextSubmited(String value) throws PresentationLogicException
	{
		populateComorbidityQcmb(value);
		updateControlsState();
	}

	private void populateComorbidityQcmb(String value)
	{
		form.qmbDiagnosis().clear();
		DiagLiteVoCollection listDiag = domain.listDianosis(value, getListOfSelectedDiagnosis());
		
		if (listDiag == null || listDiag.size() == 0)
		{
			form.qmbDiagnosis().showOpened();
			return;
		}
			
		for (int i = 0 ; i < listDiag.size() ; i++)
		{
			form.qmbDiagnosis().newRow(listDiag.get(i),listDiag.get(i).getDiagnosisName());
		}
		
		form.qmbDiagnosis().showOpened();
	}

	@Override
	protected void onDyngrdDiagnosisCellButtonClicked(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(getSelectedColumn(COLIMAGE)) && cell.getRow().getValue() instanceof DiagLiteVo)
		{
			form.dyngrdDiagnosis().getRows().remove(cell.getRow());
		}
		
		updateControlsState();
	}
}
