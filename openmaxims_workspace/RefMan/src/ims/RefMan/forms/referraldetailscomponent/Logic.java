//This code was generated by Ander Telleria using IMS Development Environment (version 1.65 build 3159.24578)
//Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.referraldetailscomponent;

import ims.admin.vo.ConfigLocationLiteVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ContractConfigForReferralDetailsComponentVoCollection;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVoCollection;
import ims.RefMan.vo.ReferralServiceFullVo;
import ims.RefMan.vo.enums.CALLINGFORM;
import ims.RefMan.vo.enums.ReferralDetailsComponentButtonClicked;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.clinical.vo.ReferralLetterDetailsVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.AddressVo;
import ims.core.vo.CommChannelVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpToPracticesVo;
import ims.core.vo.GpToPracticesVoCollection;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.OrganisationWithSitesVo;
import ims.core.vo.PatientTransportRequirementsVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ChannelType;
import ims.core.vo.lookups.Language;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ReferralType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.SourceOfReferralCollection;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setIsInCreationMode(Boolean.FALSE);
		form.getLocalContext().setbReferralAccepted(false);
		form.getLocalContext().setCurrentAwaitingClinicalInformationVo(null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfo(null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfoBoolean(null);
		updateControlState();

	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().RefMan.ChangeServiceDialog) && result.equals(DialogResult.OK))
		{
			form.cmbService().setValue(form.getGlobalContext().RefMan.getCurrentServiceLiteVo());
		}
		else if (formName.equals(form.getForms().RefMan.AwaitingClinicalInformationDialog))
		{
			refreshAwaitingClinicalInformation(DialogResult.OK.equals(result));

			form.fireCustomControlValueChanged();
		}
		else if (formName.equals(form.getForms().RefMan.ReferralTransferDialog))
		{
			form.getLocalContext().setTransferInfo(form.getGlobalContext().RefMan.getReferralTransfer());
		}
		else if (result.equals(DialogResult.OK))
		{
			OrganisationWithSitesVo practice;

			if (formName.equals(form.getForms().Admin.GPPracticeSelect))
			{
				practice = form.getGlobalContext().Admin.getPractice();
				form.getLocalContext().setAHPInfo(practice);
				populateAHPDetailsPanelFromData(practice);
			}
			else if (formName.equals(form.getForms().Core.GpSelectionOnly))
			{
				GpShortVo gp = form.getGlobalContext().Core.getGPDetails();
				form.getLocalContext().setGPInfo(gp);
				populateGPDetailsPanelFromData(gp);
			}
		}
		else if ((formName.equals(form.getForms().Core.GpSelectionOnly) || formName.equals(form.getForms().Admin.GPPracticeSelect)) && result.equals(DialogResult.CANCEL))
			return;
		else if (!formName.equals(form.getForms().RefMan.ChangeServiceDialog) 
				&& !formName.equals(form.getForms().RefMan.AwaitingClinicalInformationDialog)
				&& !formName.equals(form.getForms().RefMan.ReferralTransferDialog)
				&& result.equals(DialogResult.CANCEL))
			setHCPInformationToNull();
	}

	private void refreshAwaitingClinicalInformation(boolean wasSave)
	{
		form.getLocalContext().setCurrentAwaitingClinicalInformationVo(form.getGlobalContext().RefMan.getAwaitingClinicalInfo());
		form.getGlobalContext().RefMan.setAwaitingClinicalInfo(null);

		form.btnClinicalInfo().setVisible(form.getLocalContext().getCurrentAwaitingClinicalInformationVoIsNotNull());

		if (wasSave)
		{
			form.chkAwaitingInfo().setValue(form.getGlobalContext().RefMan.getAwaitingClinicalInfoBooleanIsNotNull());

			form.getLocalContext().setCatsReferralWizardVo(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
		}
	}

	protected void onBtnGPSearch() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Core.GpSelectionOnly);
	}

	protected void onReferrerTypeSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		setHCPInformationToNull();

		// WDEV-17709
		form.chkPatientsGp().setValue(null);

		if (form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull())
			form.getGlobalContext().RefMan.setPatientsGP(domain.getPatientGP(form.getGlobalContext().Core.getPatientShort().getID_Patient()));
		
		updateControlState();

		form.getGlobalContext().RefMan.setReferralTransfer(form.getLocalContext().getTransferInfo());
		if (form.cmbSOR().getValue() != null
			&& form.cmbSOR().getValue().equals(SourceOfReferral.TRANSFER))
			engine.open(form.getForms().RefMan.ReferralTransferDialog);
		else if (form.cmbSOR().getValue()==null || !SourceOfReferral.TRANSFER.equals(form.cmbSOR().getValue()))
		{
			form.getLocalContext().setTransferInfo(null);
			form.getGlobalContext().RefMan.setReferralTransfer(null);
		}
		
		if (form.cmbSOR().getValue()==null || !SourceOfReferral.CONSULTANT.equals(form.cmbSOR().getValue()))
		{
			form.ccReferringConsultant().setValue(null);
		}
	}

	private void setHCPInformationToNull()
	{
		form.txtGPName().setValue(null); 

		//WDEV-11626o
		clearPracticeDetails();
	}

	//WDEV-11626 - starts here
	private void clearPracticeDetails() 
	{
		form.txtEmail().setValue(null);
		form.txtFaxNumber().setValue(null);
		form.txtGPAddress().setValue(null);
		form.txtLocation().setValue(null);
		form.txtMobilePhone().setValue(null);
		form.txtWorkPhone().setValue(null);
		form.RefPCTCode().setValue(null);
		form.txtRefPracticeCode().setValue(null);
	}
	//WDEv-11626 - ends here

	protected void onBtnAlliedPracticeSearch() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Admin.GPPracticeSelect);
	}

	protected void onChkIntrepreterValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbLanguage().setEnabled(form.chkIntrepreter().getValue());
		form.cmbLanguage().setRequired(form.chkIntrepreter().getValue());//WDEV-16178
		if (!form.chkIntrepreter().getValue())
		{
			form.cmbLanguage().setValue(null);
			form.OtherLanguage().setValue(null);
			updateControlState();
		}
	}

	protected void onValueChangedTransportRequired() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbType().setEnabled(form.chkTransport().getValue());
		form.cmbType().setRequired(form.chkTransport().getValue());//WDEV-16178
		if (!form.chkTransport().getValue())
		{
			form.cmbType().setValue(null);
			form.txtSpecialRequirements().setValue(null);
		}
		updateControlState();
	}

	public ims.clinical.vo.ReferralLetterDetailsVo getValue()
	{
		return populateDataFromScreen();
	}

	public void setValue(ims.clinical.vo.ReferralLetterDetailsVo referralDetails, CatsReferralWizardVo voCats)
	{
		form.getLocalContext().setCurrentAwaitingClinicalInformationVo(null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfo(null);

		String nat = "";
		String icab = "";
		form.getLocalContext().setbReferralDetailsInitialized(false);
		form.getLocalContext().setreferralVo(referralDetails);
		form.getLocalContext().setCatsReferralWizardVo(voCats);

		if (form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getID_PatientIsNotNull() && form.getMode().equals(FormMode.EDIT))
		{
			form.chkPatientsGp().setEnabled(false);
		}

		// If the user had a validation error on the demographics tab ignored it
		// and entered data on the referral details.
		// Then corrected the demographics and saved the referral details were
		// being blanked. Now shouldnt be.
		if (form.getLocalContext().getbReferralDetailsInitializedIsNotNull() && form.getLocalContext().getbReferralDetailsInitialized())
			return;

		if (referralDetails == null)
		{
			clearControls();
			clearDates();
			form.authoringControl().setValue((IMos) domain.getMosUser());
			form.dtimAuthoringDT().setValue(new DateTime());
			
			//WDEV-18395 default to checked (true)
			form.chkActivityRTTClock().setValue(true);

			form.getLocalContext().setbReferralDetailsInitialized(Boolean.TRUE);

			// wdev-8808
			if (form.btnCancel().isVisible())
			{
				form.btnCancel().setVisible(false);
				form.btnSave().setVisible(false);
			}
			return;
		}
		else
		{
			form.cmbCategory().setValue(voCats.getReferralCategory());//WDEV-12181

			form.cmbUrgency().setValue(voCats.getUrgency());  // WDEV-17930
			
			form.dteConsUpgradeDate().setValue(voCats.getConsUpgradeDate()); // WDEV-18452 

			//WDEV-18395
			form.chkActivityRTTClock().setValue(voCats.getRTTClockImpact());
			
			//wdev-12256
			if(voCats.getContractIsNotNull() && (form.cmbContract().getValues().isEmpty() || !form.cmbContract().getValues().contains(voCats.getContract())))
				form.cmbContract().newRow(voCats.getContract(), voCats.getContract().getContractName());
			//-----------
			form.cmbContract().setValue(voCats.getContract());
			if (!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())
			{
				if (voCats.getContractIsNotNull() && form.cmbContract().getValue() == null)
				{
					form.cmbContract().newRow(voCats.getContract(), voCats.getContract().getContractName());
					form.cmbContract().setValue(voCats.getContract());
				}
				loadLocations();
			}

			// loadLocations() will hide the location combo if there is no ReferralManagementContractType.DIAGNOSTIC for the site but
			// here we could have a referral being displayed that is not ReferralManagementContractType.DIAGNOSTIC and we want to hide location
			if (voCats.getContractIsNotNull()
					&& voCats.getContract().getContractTypeIsNotNull()
					&& ! voCats.getContract().getContractType().equals(ReferralManagementContractType.DIAGNOSTIC))
			{
				form.lblLocation().setVisible(false);
				form.cmbLocation().setVisible(false);
			}

			form.cmbLocation().setValue(referralDetails.getLocation());
			if (referralDetails.getLocationIsNotNull() && form.cmbLocation().getValue() == null)
			{
				form.cmbLocation().newRow(referralDetails.getLocation(), referralDetails.getLocation().getName());
				form.cmbLocation().setValue(referralDetails.getLocation());
			}
			form.cmbService().setValue(referralDetails.getService());
			//WDEV-18142
			form.ccConsultant().clear();
			form.ccConsultant().setValue(referralDetails.getConsultant());
			//wdev-13647
			if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
			{
				getAndPopulateNearestTreatmentCenterLocation();
				form.cmbNearestTreatmentCentreLocation().setValue(voCats.getNearestTreatmentCentre());
				if(voCats.getNearestTreatmentCentre() != null && form.cmbNearestTreatmentCentreLocation().getValue() == null)
				{
					form.cmbNearestTreatmentCentreLocation().newRow(voCats.getNearestTreatmentCentre(), voCats.getNearestTreatmentCentre().getName());
					form.cmbNearestTreatmentCentreLocation().setValue(voCats.getNearestTreatmentCentre());
				}
			}
			//---------

			form.qmbProcedure().clear();
			if (referralDetails.getProcedureIsNotNull())
			{
				form.qmbProcedure().newRow(referralDetails.getProcedure(), referralDetails.getProcedure().getProcedureName());
				form.qmbProcedure().setValue(referralDetails.getProcedure());
			}

			form.ccReferringConsultant().setVisible(false);

			if (referralDetails.getReferrerType() == null || referralDetails.getReferrerType().equals(SourceOfReferral.GP))
			{
				form.cmbSOR().setValue(SourceOfReferral.GP);
				if (referralDetails.getGPNameIsNotNull())
					if (referralDetails.getGPName().getNameIsNotNull())
						form.txtGPName().setValue(referralDetails.getGPName().getName().toString());

				if (referralDetails.getPracticeIsNotNull())
				{
					form.txtLocation().setValue(referralDetails.getPractice().getName());
					if (referralDetails.getPractice().getCodeMappingsIsNotNull())
						for (int j = 0; j < referralDetails.getPractice().getCodeMappings().size(); j++)
						{
							if (referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyNameIsNotNull())
								if (referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyName().equals(TaxonomyType.ICAB))
									// form.txtRefPracticeCode().setValue(referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyCode());
									icab = referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyCode();
							if (referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyName().equals(TaxonomyType.NAT_LOC_CODE))
								nat = referralDetails.getPractice().getCodeMappings().get(j).getTaxonomyCode();
							if (!icab.equals(""))
								form.txtRefPracticeCode().setValue(icab);
							else if (!nat.equals(""))
								form.txtRefPracticeCode().setValue(nat);

						}
					if (referralDetails.getPractice().getAddressIsNotNull())
					{
						StringTokenizer st = new StringTokenizer(referralDetails.getPractice().getAddress().toDisplayString(), ",");
						String address = " ";
						while (st.hasMoreElements())
						{
							address = address + st.nextElement() + "\n";
						}
						form.txtGPAddress().setValue(address);
					}
					if (referralDetails.getPractice().getCommChannelsIsNotNull() && referralDetails.getPractice().getCommChannels().size() > 0)
					{

						CommChannelVo workPhone, mobile, fax, email;
						if ((workPhone = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
							if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
								form.txtWorkPhone().setValue(workPhone.getCommValue());
						if ((mobile = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
							if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
								form.txtMobilePhone().setValue(mobile.getCommValue());
						if ((fax = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
							if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
								form.txtFaxNumber().setValue(fax.getCommValue());
						if ((email = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
							if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
								form.txtEmail().setValue(email.getCommValue());
					}
				}

			}
			else if (referralDetails.getReferrerType().equals(SourceOfReferral.AHP))
			{
				form.cmbSOR().setValue(SourceOfReferral.AHP);
				if (referralDetails.getPracticeIsNotNull())
				{
					if (referralDetails.getPractice().getAddressIsNotNull())
					{
						form.txtGPAddress().setValue(referralDetails.getPractice().getAddress().toDisplayString());
						if (referralDetails.getPractice().getCommChannelsIsNotNull() && referralDetails.getPractice().getCommChannels().size() > 0)
						{

							CommChannelVo workPhone, mobile, fax, email;
							if ((workPhone = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
								if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
									form.txtWorkPhone().setValue(workPhone.getCommValue());
							if ((mobile = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
								if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
									form.txtMobilePhone().setValue(mobile.getCommValue());
							if ((fax = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
								if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
									form.txtFaxNumber().setValue(fax.getCommValue());
							if ((email = referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
								if (referralDetails.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
									form.txtEmail().setValue(email.getCommValue());
						}
					}
					populateAHPDetailsPanelFromData(referralDetails.getPractice());
				}
				if (referralDetails.getAlliedHealthProfNameIsNotNull())
					form.txtGPName().setValue(referralDetails.getAlliedHealthProfName());
			}
			else if (referralDetails.getReferrerType().equals(SourceOfReferral.SELF))
			{
				form.cmbSOR().setValue(SourceOfReferral.SELF);
				form.txtGPName().setValue(voCats.getPatient().getName().toString());
				form.txtEmail().setValue(null);
				form.txtFaxNumber().setValue(null);
				form.txtGPAddress().setValue(voCats.getPatient().getAddress()!=null ? voCats.getPatient().getAddress().toDisplayStringForMultiLineTextBox() : null);//WDEV-18552
				form.txtLocation().setValue(null);
				form.txtMobilePhone().setValue(null);
				form.txtWorkPhone().setValue(null);
				//form.RefPCTCode().setValue(voCats.getPatient().getAddress().getPctCode());
				form.RefPCTCode().setValue(voCats.getReferralDetails().getPCT());
				form.txtRefPracticeCode().setValue(null);
				if (voCats.getPatient().getCommChannelsIsNotNull() && voCats.getPatient().getCommChannels().size() > 0)
				{

					CommChannelVo workPhone, mobile, fax, email;
					if ((workPhone = voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
						if (voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
							form.txtWorkPhone().setValue(workPhone.getCommValue());
					if ((mobile = voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
						if (voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
							form.txtMobilePhone().setValue(mobile.getCommValue());
					if ((fax = voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
						if (voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
							form.txtFaxNumber().setValue(fax.getCommValue());
					if ((email = voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
						if (voCats.getPatient().getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
							form.txtEmail().setValue(email.getCommValue());
				}
			}
			else if (referralDetails.getReferrerType().equals(SourceOfReferral.CONSULTANT))
			{
				form.cmbSOR().setValue(SourceOfReferral.CONSULTANT);
				
				form.getLocalContext().setTransferInfo(voCats.getReferralTransfer());
				if (form.getLocalContext().getTransferInfoIsNotNull())
					form.getLocalContext().getTransferInfo().setPathwayID(voCats.getPathwayID());

				form.ccReferringConsultant().setVisible(true);
				form.ccReferringConsultant().setValue(voCats.getReferralDetails().getReferringConsultant());
				
				form.RefPCTCode().setValue(voCats.getReferralDetails().getPCT());
				form.txtGPAddress().setValue(voCats.getReferralDetails().getRefererAddress());
			}
			else if (referralDetails.getReferrerType().equals(SourceOfReferral.TRANSFER))
			{
				form.cmbSOR().setValue(SourceOfReferral.TRANSFER);

				form.getLocalContext().setTransferInfo(voCats.getReferralTransfer());
				
				//WDEV-18552
				if (form.getLocalContext().getTransferInfo()!=null)
				{
					form.getLocalContext().getTransferInfo().setPathwayID(voCats.getPathwayID());
				}

				form.RefPCTCode().setValue(voCats.getReferralDetails().getPCT());
				form.txtGPName().setValue(voCats.getReferralDetails().getTransferedBY());
				form.txtGPAddress().setValue(voCats.getReferralDetails().getRefererAddress());
			}

			if (referralDetails.getOriginalDateOfReferralIsNotNull())
				form.dteOriginalReferralDate().setValue(referralDetails.getOriginalDateOfReferral());
			if (referralDetails.getDateOfReferralIsNotNull())
				form.dteReferral().setValue(referralDetails.getDateOfReferral());
			if (referralDetails.getDateReferralReceivedIsNotNull())
				form.dteReferralReceived().setValue(referralDetails.getDateReferralReceived());
			else
				form.dteReferralReceived().setValue(null);
			if (referralDetails.getEnd18WWIsNotNull())
				form.dtimWW().setValue(referralDetails.getEnd18WW());
			else
				form.dtimWW().setValue(null);
			// WDEV-11713 start
			if (referralDetails.getEndDateKPIIsNotNull())
				form.dtimKPI().setValue(referralDetails.getEndDateKPI());
			else
				form.dtimKPI().setValue(null);
			if (referralDetails.getEndDateEmailKPIIsNotNull())
				form.dteDEKPI().setValue(referralDetails.getEndDateEmailKPI());
			else
				form.dteDEKPI().setValue(null);
			if (referralDetails.getEndDatePaperKPIIsNotNull())
				form.dteDPKPI().setValue(referralDetails.getEndDatePaperKPI());
			else
				form.dteDPKPI().setValue(null);
			// WDEV-11713 stop

			if (referralDetails.getInterpreterRequiredIsNotNull())
				if (referralDetails.getInterpreterRequired().equals(YesNo.YES))
				{
					form.cmbLanguage().setValue(referralDetails.getLanguage());
					form.chkIntrepreter().setValue(true);
					if (referralDetails.getOtherLanguageIsNotNull())
						form.OtherLanguage().setValue(referralDetails.getOtherLanguage());
				}
				else
				{
					form.cmbLanguage().setValue(null);
					form.chkIntrepreter().setValue(false);
				}
			if (referralDetails.getTransportRequiredIsNotNull())
				if (referralDetails.getTransportRequired().equals(YesNo.YES))
				{
					form.cmbType().setValue(referralDetails.getTransport());
					form.chkTransport().setValue(true);
					if (referralDetails.getSpecialRequirementsIsNotNull())
						form.txtSpecialRequirements().setValue(referralDetails.getSpecialRequirements());
				}
				else
				{
					form.cmbType().setValue(null);
					form.chkTransport().setValue(false);
				}
			if (referralDetails.getAuthoringUserIsNotNull())
			{
				form.authoringControl().setValue(referralDetails.getAuthoringUser());
			}
			if (referralDetails.getPCTIsNotNull())
				form.RefPCTCode().setValue(referralDetails.getPCT());
			if (referralDetails.getFunctionIsNotNull())
			{
				//wdev-13737
				form.cmbClinicType().clear();
				if (form.cmbService().getValue() != null)
				{
					ServiceFunctionLiteVoCollection serviceFunctions = domain.listServiceFunctionsLite(form.cmbService().getValue());
					if (serviceFunctions != null)
					{
						for (int i = 0; i < serviceFunctions.size(); i++)
						{
							ServiceFunctionLiteVo voServiceFunctionLite = serviceFunctions.get(i);
							form.cmbClinicType().newRow(voServiceFunctionLite, voServiceFunctionLite.getFunction().getText());
						}
					}
				}

				form.cmbClinicType().newRow(referralDetails.getFunction(), referralDetails.getFunction().getFunction().getText());
				form.cmbClinicType().setValue(referralDetails.getFunction());
			}
			else
			{
				//wdev-13737
				form.cmbClinicType().clear();
				if (form.cmbService().getValue() != null)
				{
					ServiceFunctionLiteVoCollection serviceFunctions = domain.listServiceFunctionsLite(form.cmbService().getValue());
					if (serviceFunctions != null)
					{
						for (int i = 0; i < serviceFunctions.size(); i++)
						{
							ServiceFunctionLiteVo voServiceFunctionLite = serviceFunctions.get(i);
							form.cmbClinicType().newRow(voServiceFunctionLite, voServiceFunctionLite.getFunction().getText());
						}
					}
				}
			}

			form.chkCopyToPatient().setValue(referralDetails.getCopyDischargeToPatient());
			form.OtherLanguage().setValue(referralDetails.getOtherLanguage());
			form.txtSpecialRequirements().setValue(referralDetails.getSpecialRequirements());
			if (referralDetails.getIsReferrerPatientsGpIsNotNull())
				form.chkPatientsGp().setValue(referralDetails.getIsReferrerPatientsGp());
			if (referralDetails.getAuthoringDateTimeIsNotNull())
				form.dtimAuthoringDT().setValue(referralDetails.getAuthoringDateTime());

			if (voCats != null && voCats.getAwaitingClinicalInfoIsNotNull())
			{
				form.getLocalContext().setCurrentAwaitingClinicalInformationVo(voCats.getAwaitingClinicalInfo());
				form.getGlobalContext().RefMan.setAwaitingClinicalInfo(voCats.getAwaitingClinicalInfo());

				form.getGlobalContext().RefMan.setAwaitingClinicalInfoBoolean(voCats.getIsAwaitingClinicalInfo());

				form.chkAwaitingInfo().setValue(voCats.getIsAwaitingClinicalInfoIsNotNull());
			}
		}
	}

	private void clearControls()
	{
		//		wdev-12682
		if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
				&&  !form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
			form.cmbLocation().setValue(null);

		form.cmbContract().setValue(null);
		form.cmbService().setValue(null);
		//WDEV-18142
		form.ccConsultant().clear();
		form.cmbSOR().setValue(null);
		form.cmbUrgency().setValue(null); // WDEV-17930
		form.dteConsUpgradeDate().setValue(null);//WDEV-18452 
		form.cmbLanguage().setValue(null);
		form.cmbType().setValue(null);
		form.txtGPAddress().setValue(null);
		form.txtFaxNumber().setValue(null);
		form.txtLocation().setValue(null);
		form.txtGPName().setValue(null);
		form.txtWorkPhone().setValue(null);
		setHCPInformationToNull();
		form.RefPCTCode().setValue(null);
		// clearDates();
		form.chkIntrepreter().setValue(false);
		form.chkTransport().setValue(false);
		form.chkAwaitingInfo().setValue(false);
		form.cmbClinicType().setValue(null);
		form.chkPatientsGp().setValue(null);
		form.authoringControl().setValue(null);
		form.dtimAuthoringDT().setValue(null);
		form.ccReferringConsultant().initialize(MosType.MEDIC, true);
		form.ccReferringConsultant().setValue(null);

	}

	private void clearDates()
	{
		form.dteOriginalReferralDate().setValue(null);
		form.dteReferral().setValue(null);
		form.dteReferralReceived().setValue(null);
		// WDEV-11713
		clearKpi();
	}

	// WDEV-11713
	private void clearKpi()
	{
		form.dtimKPI().setValue(null);
		form.dtimWW().setValue(null);
		form.dteDEKPI().setValue(null);
		form.dteDPKPI().setValue(null);
	}

	public void initialize(CALLINGFORM callingForm)
	{
		form.authoringControl().setValue((IMos) domain.getMosUser());
		//WDEV-18142
		form.ccConsultant().initializeConsultantResponsibleHcp(MosType.MEDIC, MedicGrade.CONS, null);

		form.getLocalContext().setCurrentAwaitingClinicalInformationVo(null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfo(null);
		form.getGlobalContext().RefMan.setAwaitingClinicalInfoBoolean(null);

		//wdev-12430
		form.cmbSOR().clear();
		SourceOfReferralCollection tempVoColl = ims.core.vo.lookups.LookupHelper.getSourceOfReferral(domain.getLookupService());
		if(tempVoColl != null)
			for(int i = 0;i < tempVoColl.size();i++ )
			{
				if(tempVoColl.get(i) != null 
					&& (tempVoColl.get(i).equals(SourceOfReferral.GP) || tempVoColl.get(i).equals(SourceOfReferral.AHP)
					|| tempVoColl.get(i).equals(SourceOfReferral.TRANSFER) || tempVoColl.get(i).equals(SourceOfReferral.SELF) || tempVoColl.get(i).equals(SourceOfReferral.CONSULTANT) ))
					form.cmbSOR().newRow((SourceOfReferral)tempVoColl.get(i),tempVoColl.get(i).getText());
			}
		//------------------
		form.lblProcedure().setVisible(ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue());
		form.qmbProcedure().setVisible(ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue());


		// WDEV-12866
		// Use the new function to list active Contracts for a specific location
		//		ContractConfigForReferralDetailsComponentVoCollection contracts = domain.listActiveContracts(domain.getOrganisationByLocation(engine.getCurrentLocation().getID()));
		ContractConfigForReferralDetailsComponentVoCollection contracts = domain.listActiveContractsForLocation((LocationRefVo) engine.getCurrentLocation());
		for (int i = 0; contracts != null && i < contracts.size(); i++)
		{
			form.cmbContract().newRow(contracts.get(i), contracts.get(i).getContractName());
		}

		if (contracts != null && contracts.size() == 1)
			form.cmbContract().setValue(contracts.get(0));

		loadLocations();

		ReferralServiceFullVo services = domain.getReferralServices();
		if (services != null && services.getReferralServicesIsNotNull())
		{
			for (ServiceShortVo service : services.getReferralServices())
			{
				form.cmbService().newRow(service, service.getServiceName());
			}
		}
		clearControlsOnInitialize();

		//wdev-13647
		form.cmbNearestTreatmentCentreLocation().setVisible(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue());
		//form.lblCentreLocation().setVisible(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()); //WDEV-18142 
		form.lblNearestTreatment().setVisible(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue());
		if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
		{
			getAndPopulateNearestTreatmentCenterLocation();
		}
		//---------

		form.getLocalContext().setAHPInfo(null);
		form.getLocalContext().setGPInfo(null);
		form.getLocalContext().setreferralVo(null);
		form.getLocalContext().setcallingForm(callingForm);
		form.getLocalContext().setTransferInfo(null);	
		updateControlState();

	}

	private void loadLocations()
	{
		//		wdev-12682			
		if (form.cmbContract().getValue() != null
				&& form.cmbContract().getValue().getContractTypeIsNotNull()
				&& (form.cmbContract().getValue().getContractType().equals(ReferralManagementContractType.REFERRALTRIAGE)
						|| form.cmbContract().getValue().getContractType().equals(ReferralManagementContractType.NONDIAGNOSTIC)) )
		{
			form.lblLocation().setVisible(false);
			form.cmbLocation().setVisible(false);
			form.cmbLocation().setValue(null);
		}
		else if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
				&& form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
		{
			form.cmbLocation().clear();
			LocationLiteVoCollection voCollLocation = null;
			if (!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())
			{
				if (form.cmbContract().getValue() != null)
					voCollLocation = domain.listLocationByOrganisation(form.cmbContract().getValue().getContractOrganisation(), "");
			}
			else
				voCollLocation = domain.listLocationLite();

			if (voCollLocation != null && voCollLocation.size() > 0)
			{
				for (LocationLiteVo voLoc : voCollLocation)
					form.cmbLocation().newRow(voLoc, voLoc.getName());
			}

			form.cmbLocation().setValue(form.getLocalContext().getreferralVoIsNotNull() && form.getLocalContext().getreferralVo().getID_ReferralLetterDetailsIsNotNull() ? form.getLocalContext().getreferralVo().getLocation() : null);

			if (form.cmbLocation().getValue() == null && form.getLocalContext().getreferralVo() == null)
				defaultLocation();

			form.lblLocation().setVisible(true);
			form.cmbLocation().setVisible(true);
		}
		else
		{
			form.lblLocation().setVisible(false);
			form.cmbLocation().setVisible(false);
			form.cmbLocation().setValue(null);
		}
	}

	private void populateAHPDetailsPanelFromData(OrganisationWithSitesVo practice)
	{
		String referringCode = null;
		String referringCodeNat = null;

		//WDEV-11626
		clearPracticeDetails();

		if (practice != null)
		{
			form.txtLocation().setValue(practice.getName());

			if (practice.getAddressIsNotNull())
			{
				StringTokenizer st = new StringTokenizer(practice.getAddress().toDisplayString(), ",");
				String address = " ";
				while (st.hasMoreElements())
				{
					address = address + st.nextElement() + "\n";
				}
				form.txtGPAddress().setValue(address);
				if (practice.getAddress().getFaxIsNotNull())
					form.txtFaxNumber().setValue(practice.getAddress().getFax());
				if (practice.getAddress().getPhoneIsNotNull())
					form.txtWorkPhone().setValue(practice.getAddress().getPhone());
			}
			if (practice.getLocationSitesIsNotNull())
				if (practice.getLocationSites().size() > 0)
					form.txtLocation().setValue(practice.getName());// .getLocationSites().get(0).getName());

			for (TaxonomyMap mapping : practice.getCodeMappings())
			{
				if (mapping.getTaxonomyName().equals(TaxonomyType.ICAB))
					referringCode = mapping.getTaxonomyCode();
				else if (mapping.getTaxonomyName().equals(TaxonomyType.NAT_LOC_CODE))
					referringCodeNat = mapping.getTaxonomyCode();
			}

			//WDEV-11626
			if (practice.getCommChannelsIsNotNull() && practice.getCommChannels().size() > 0)
			{
				CommChannelVo workPhone, mobilePhone, fax, email;
				if ((workPhone = practice.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
					if (practice.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
						form.txtWorkPhone().setValue(workPhone.getCommValue());
				if ((mobilePhone = practice.getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
					if (practice.getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
						form.txtMobilePhone().setValue(mobilePhone.getCommValue());
				if ((fax = practice.getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
					if (practice.getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
						form.txtFaxNumber().setValue(fax.getCommValue());
				if ((email = practice.getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
					if (practice.getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
						form.txtEmail().setValue(email.getCommValue());
			}

			if (referringCode != null)
				form.txtRefPracticeCode().setValue(referringCode);
			else if (referringCodeNat != null)
				form.txtRefPracticeCode().setValue(referringCodeNat);
			if (practice.getPctCodeIsNotNull())
			{
				form.RefPCTCode().setValue(practice.getPctCode());
			}

		}
	}

	private void populateGPDetailsPanelFromData(GpShortVo gp)
	{
		String referringCode = null;
		String referringCodeNat = null;
		String refPCT = null;

		//WDEv-11626
		setHCPInformationToNull();

		form.txtGPName().setValue(gp.getName().toString());

		GpToPracticesVoCollection practices = gp.getPractices();
		if (practices.size() > 0)
		{
			for (GpToPracticesVo practice : practices)
			{
				if (practice.getPracticeIsNotNull())
				{
					if (practice.getIsPrimaryPractice())
					{
						if (practice.getPractice().getNameIsNotNull())
							form.txtLocation().setValue(practice.getPractice().getName());
						if (practice.getPractice().getAddressIsNotNull())
						{
							StringTokenizer st = new StringTokenizer(practice.getPractice().getAddress().toDisplayString(), ",");
							String address = " ";
							while (st.hasMoreElements())
							{
								address = address + st.nextElement() + "\n";
							}
							form.txtGPAddress().setValue(address);
						}

						/*
						 * if
						 * (practice.getPractice().getLocationSitesIsNotNull())
						 * if
						 * (practice.getPractice().getLocationSites().size()>0)
						 * form.txtLocation().setValue(practice.getPractice().
						 * getLocationSites().get(0).getName());
						 */

						if (practice.getPracticeIsNotNull())

							if (practice.getPractice().getPctCodeIsNotNull())
								refPCT = practice.getPractice().getPctCode();
						if (practice.getPractice().getCodeMappingsIsNotNull())
							for (TaxonomyMap mapping : practice.getPractice().getCodeMappings())
							{
								if (mapping.getTaxonomyName().equals(TaxonomyType.ICAB))
									referringCode = mapping.getTaxonomyCode();
								else if (mapping.getTaxonomyName().equals(TaxonomyType.NAT_LOC_CODE))
									referringCodeNat = mapping.getTaxonomyCode();

							}
						if (practice.getPractice().getCommChannelsIsNotNull() && practice.getPractice().getCommChannels().size() > 0)
						{
							CommChannelVo workPhone, mobilePhone, fax, email;
							if ((workPhone = practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
								if (practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
									form.txtWorkPhone().setValue(workPhone.getCommValue());
							if ((mobilePhone = practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
								if (practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
									form.txtMobilePhone().setValue(mobilePhone.getCommValue());
							if ((fax = practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
								if (practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
									form.txtFaxNumber().setValue(fax.getCommValue());
							if ((email = practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
								if (practice.getPractice().getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
									form.txtEmail().setValue(email.getCommValue());
						}
						if (referringCode != null)
							form.txtRefPracticeCode().setValue(referringCode);
						else if (referringCodeNat != null)
							form.txtRefPracticeCode().setValue(referringCodeNat);
						if (refPCT != null)
							form.RefPCTCode().setValue(refPCT);
					}
				}
			}
		}
		// if (gp.getCommChannelsIsNotNull()&&gp.getCommChannels().size()>0)
		// {
		// CommChannelVo workPhone, mobilePhone,fax,email;
		// if((workPhone=gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE))!=null)
		// if
		// (gp.getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
		// form.txtWorkPhone().setValue(workPhone.getCommValue());
		// if((mobilePhone=gp.getCommChannels().getCommunicationChannel(ChannelType.MOBILE))!=null)
		// if
		// (gp.getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
		// form.txtMobilePhone().setValue(mobilePhone.getCommValue());
		// if((fax=gp.getCommChannels().getCommunicationChannel(ChannelType.FAX))!=null)
		// if
		// (gp.getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
		// form.txtFaxNumber().setValue(fax.getCommValue());
		// if((email=gp.getCommChannels().getCommunicationChannel(ChannelType.EMAIL))!=null)
		// if
		// (gp.getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
		// form.txtEmail().setValue(email.getCommValue());
		// }
	}

	private ReferralLetterDetailsVo populateDataFromScreen()
	{
		ReferralLetterDetailsVo referralVo = form.getLocalContext().getreferralVo();

		if (referralVo == null)
			referralVo = new ReferralLetterDetailsVo();

		// TODO Ask Neill if the condition applies or not
		// if (form.qmbProcedure().getValue() != null &&
		// ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		// {
		referralVo.setProcedure(form.qmbProcedure().getValue());
		// }
		// WDEV-11713 start
		if (form.dteReferralReceived().getValue() != null)
		{
			if (form.dteDPKPI() != null)
				referralVo.setEndDateEmailKPI(form.dteDEKPI().getValue());// form.dte20DEKPI().setValue(end20DEKPI);
			if (form.dteDEKPI() != null)
				referralVo.setEndDatePaperKPI(form.dteDPKPI().getValue());
			if (form.dtimKPI() != null)
				referralVo.setEndDateKPI(form.dtimKPI().getValue());// form.dtimKPI().setValue(end);
			if (form.dtimWW() != null)
				referralVo.setEnd18WW(form.dtimWW().getValue());// form.dtimWW().setValue(endWW);
		}
		else
		{
			referralVo.setDateReferralReceived(null);
			referralVo.setEndDateEmailKPI(null);
			referralVo.setEndDateKPI(null);
			referralVo.setEndDatePaperKPI(null);
			referralVo.setEnd18WW(form.dtimWW().getValue());//WDEV-11783
			/*WDEV-11783
			if (form.dteReferral().getValue() != null)
			{
				referralVo.setDateOfReferral(form.dteReferral().getValue());
				Date endWW = form.dteReferral().getValue().copy().addDay(127);
				referralVo.setEnd18WW(endWW);// form.dtimWW().setValue(endWW);
			}*/
		}
		// WDEV-11713 stop
		referralVo.setCopyDischargeToPatient(form.chkCopyToPatient().getValue());
		if (form.authoringControl().getValue() != null)
		{
			referralVo.setAuthoringUser((MemberOfStaffLiteVo) form.authoringControl().getValue());
		}
		if (form.dtimAuthoringDT().getValue() != null)
			referralVo.setAuthoringDateTime(form.dtimAuthoringDT().getValue());
		if (form.dteOriginalReferralDate().getValue() != null)
			referralVo.setOriginalDateOfReferral(form.dteOriginalReferralDate().getValue());

		if (form.dteReferral().getValue() != null)
			referralVo.setDateOfReferral(form.dteReferral().getValue());
		if (form.dteReferralReceived().getValue() != null)
			referralVo.setDateReferralReceived(form.dteReferralReceived().getValue());
		/*
		 * if (form.dtimWW().getValue()!=null)
		 * referralVo.setEnd18WW(form.dtimWW().getValue()); if
		 * (form.dtimKPI().getValue()!=null)
		 * referralVo.setEnd20DayKPI(form.dtimKPI().getValue()); if
		 * (form.dte20DEKPI().getValue()!=null)
		 * referralVo.setEnd20DayEmailKPI(form.dte20DEKPI().getValue()); if
		 * (form.dte20DPKPI().getValue()!=null)
		 * referralVo.setEnd20DayPaperKPI(form.dte20DPKPI().getValue());
		 */
		if (form.chkIntrepreter().getValue())
		{
			referralVo.setInterpreterRequired(YesNo.YES);
			if (form.cmbLanguage().getValue() != null)
			{
				referralVo.setLanguage(form.cmbLanguage().getValue());
				if (form.cmbLanguage().getValue().equals(Language.OTHER))
				{

					if (form.OtherLanguage().getValue() != null)
						referralVo.setOtherLanguage(form.OtherLanguage().getValue());
				}
				else
				{
					referralVo.setOtherLanguage(null);
				}
			}
		}
		else
		{
			referralVo.setInterpreterRequired(YesNo.NO);
			referralVo.setOtherLanguage(null);
			referralVo.setLanguage(null);
		}

		//WDEV-18391		
		referralVo.setSpecialRequirements(form.txtSpecialRequirements().getValue());

		if (form.chkTransport().getValue())
		{
			referralVo.setTransportRequired(YesNo.YES);

		}
		else
		{
			referralVo.setTransportRequired(YesNo.NO);
			referralVo.setTransport(null);
			//referralVo.setSpecialRequirements(null);
		}
		if (form.chkTransport().getValue())
		{
			referralVo.setTransportRequired(YesNo.YES);
			referralVo.setTransport(form.cmbType().getValue());
		}
		else
			referralVo.setTransportRequired(YesNo.NO);

		//WDEV-18194 Get Patient Transport details
		PatientTransportRequirementsVo patientTransportDetails = referralVo.getTransportRequirements() != null ? referralVo.getTransportRequirements() : new PatientTransportRequirementsVo();

		patientTransportDetails.setTransportRequired(form.chkTransport().getValue());
		patientTransportDetails.setTransport(form.cmbType().getValue());
		patientTransportDetails.setSpecialRequirements(form.txtSpecialRequirements().getValue());
		
		referralVo.setTransportRequirements(patientTransportDetails);
		//end
		
		if (form.cmbSOR().getValue() != null)
		{
			if (form.cmbSOR().getValue().equals(SourceOfReferral.GP))
			{
				form.getLocalContext().setTransferInfo(null);
				referralVo.setReferrerType(SourceOfReferral.GP);
				if (form.getLocalContext().getGPInfoIsNotNull())
				{
					referralVo.setAlliedHealthProfName(null);
					referralVo.setGPName(form.getLocalContext().getGPInfo());
					for (GpToPracticesVo practice : form.getLocalContext().getGPInfo().getPractices())
					{
						if (practice.getPracticeIsNotNull())
						{
							if (practice.getIsPrimaryPractice())
							{
								// OrganisationVo org=new OrganisationVo();
								// org.setID_Organisation(practice.getPractice().getID_Organisation());
								// org.setName(practice.getPractice().getName());
								// org.setCodeMappings(practice.getPractice().getCodeMappings());
								// org.setType(practice.getPractice().getType());
								referralVo.setPractice(practice.getPractice());
								/*
								 * if
								 * (practice.getPractice().getLocationSitesIsNotNull
								 * (
								 * )&&practice.getPractice().getLocationSites().
								 * size()>0)
								 * referralVo.setPractice(practice.getPractice
								 * ().getLocationSites().get(0));
								 */
							}
						}
					}
				}

			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.AHP))
			{
				form.getLocalContext().setTransferInfo(null);
				referralVo.setGPName(null);

				referralVo.setReferrerType(SourceOfReferral.AHP);
				referralVo.setAlliedHealthProfName(form.txtGPName().getValue());

				if (form.getLocalContext().getAHPInfoIsNotNull())
				{
					// referralVo.setGPPractice(form.getLocalContext().getAHPInfo());
					// OrganisationVo org=new OrganisationVo();
					// org.setID_Organisation(
					// form.getLocalContext().getAHPInfo().getID_Organisation());
					// org.setName(
					// form.getLocalContext().getAHPInfo().getName());
					// org.setCodeMappings(
					// form.getLocalContext().getAHPInfo().getCodeMappings());
					// org.setType(
					// form.getLocalContext().getAHPInfo().getType());
					referralVo.setPractice(form.getLocalContext().getAHPInfo());

				}
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.SELF))
			{
				form.getLocalContext().setTransferInfo(null);
				referralVo.setGPName(null);

				referralVo.setReferrerType(SourceOfReferral.SELF);
				referralVo.setAlliedHealthProfName(null);
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.TRANSFER))
			{
				referralVo.setTransferedBY(form.txtGPName().getValue());
				referralVo.setReferrerType(SourceOfReferral.TRANSFER);
				referralVo.setAlliedHealthProfName(null);
				referralVo.setPCT(form.RefPCTCode().getValue());
				referralVo.setRefererAddress(form.txtGPAddress().getValue());
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.CONSULTANT))
			{
				referralVo.setGPName(null);

				referralVo.setReferrerType(SourceOfReferral.CONSULTANT);
				referralVo.setAlliedHealthProfName(null);
				referralVo.setPCT(form.RefPCTCode().getValue());
				
				Hcp voConsHCP = null;
				if (form.ccReferringConsultant().getValue() instanceof MedicVo)
					voConsHCP = new Hcp(((MedicVo)form.ccReferringConsultant().getValue()).getID_Hcp(),((MedicVo)form.ccReferringConsultant().getValue()).getBoVersion());
				else if (form.ccReferringConsultant().getValue() instanceof Hcp)
					voConsHCP = ((Hcp)form.ccReferringConsultant().getValue());
					
				referralVo.setReferringConsultant(voConsHCP);	
				referralVo.setRefererAddress(form.txtGPAddress().getValue());
			}
		}

		referralVo.setService(form.cmbService().getValue());

		//WDEV-18142
		HcpLiteVo voConsHCP = null;
		if (form.ccConsultant().getValue() instanceof MedicLiteVo)
		{
			voConsHCP = new HcpLiteVo(((MedicLiteVo)form.ccConsultant().getValue()).getID_Hcp(),((MedicLiteVo)form.ccConsultant().getValue()).getBoVersion());
		}
		else if (form.ccConsultant().getValue() instanceof HcpLiteVo)
		{
			voConsHCP = (HcpLiteVo) form.ccConsultant().getValue();
		}
		
		referralVo.setConsultant(voConsHCP);

		//		wdev-12682
		if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
				&& form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
			referralVo.setLocation(form.cmbLocation().getValue());

		if (form.authoringControl() != null)
		{
			referralVo.setAuthoringUser((MemberOfStaffLiteVo) form.authoringControl().getValue());
		}
		if (form.RefPCTCode().getValue() != null)
			referralVo.setPCT(form.RefPCTCode().getValue());

		referralVo.setFunction(form.cmbClinicType().getValue());
		referralVo.setIsReferrerPatientsGp(form.chkPatientsGp().getValue());


		if (form.getGlobalContext().RefMan.getCatsReferralWizard() == null) // wdev-10020
		{
			//CatsReferralWizardVo voCats = null;
			//if (form.getGlobalContext().RefMan.getCatsReferralWizard() == null)
			//it is null if it gets in here
			CatsReferralWizardVo voCats = new CatsReferralWizardVo();
			//else
				//voCats = form.getGlobalContext().RefMan.getCatsReferralWizard();

			voCats.setReferralCategory(form.cmbCategory().getValue());//WDEV-12181
			voCats.setIsAwaitingClinicalInfo(form.getGlobalContext().RefMan.getAwaitingClinicalInfoBoolean());
			voCats.setAwaitingClinicalInfo(form.getLocalContext().getCurrentAwaitingClinicalInformationVo());

			// WDEV-11713 if( !
			// ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())

			voCats.setContract(form.cmbContract().getValue());
			//wdev-13647
			if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
			{
				voCats.setNearestTreatmentCentre(form.cmbNearestTreatmentCentreLocation().getValue());
			}

			// WDEV-17930
			voCats.setUrgency(form.cmbUrgency().getValue());
			// WDEV-18452 
			voCats.setConsUpgradeDate(form.dteConsUpgradeDate().getValue());

			//-----------
			form.getGlobalContext().RefMan.setCatsReferralWizard(voCats);

		}		
		form.getGlobalContext().RefMan.getCatsReferralWizard().setReferralCategory(form.cmbCategory().getValue());

		//WDEV-18395
		form.getGlobalContext().RefMan.getCatsReferralWizard().setRTTClockImpact(form.chkActivityRTTClock().getValue());	
		if (form.getLocalContext().getTransferInfoIsNotNull())
		{
			form.getGlobalContext().RefMan.getCatsReferralWizard().setPathwayID(form.getLocalContext().getTransferInfo().getPathwayID());
			form.getGlobalContext().RefMan.getCatsReferralWizard().setReferralTransfer(form.getLocalContext().getTransferInfo());
		}
		return referralVo;

	}

	protected String[] validateUILogic()
	{
		List<String> errors = new ArrayList<String>();

		// if (form.cmbService().getValue() == null )
		// errors.add("Service is Mandatory");
		//wdev-18432
		if (form.dteOriginalReferralDate().getValue() != null && form.dteOriginalReferralDate().getValue().isGreaterThan(new Date()))
			errors.add("Original Referral date cannot be in the future.");

		if (form.dteReferral().getValue() != null && form.dteOriginalReferralDate().getValue() != null)
		{
			if (form.dteOriginalReferralDate().getValue().isGreaterThan(form.dteReferral().getValue()))
				errors.add("Original Referral date cannot be greater than Referral Received Date");
		}
		//wdev-18432
		
		if (form.dteReferral().getValue() != null && form.dteReferralReceived().getValue() != null)
		{
			if (form.dteReferral().getValue().isGreaterThan(form.dteReferralReceived().getValue()))
				//WDEV-16851
				errors.add("Referral Date cannot be greater than Referral Received Time");

			if (form.dteReferral().getValue().isGreaterThan(new Date()) || form.dteReferralReceived().getValue().isGreaterThan(new Date()))
				//WDEV-16851
				errors.add("Referral Dates cannot be future Dates");
		}
		else if (form.dteReferral().getValue() == null)
			errors.add("Date of Referral is Mandatory");

		if (form.chkIntrepreter().getValue() && form.cmbLanguage().getValue() == null)
			errors.add("If Interpreter is required, Language is Mandatory");
		if (form.cmbLanguage().getValue() != null)
			if (form.cmbLanguage().getValue().equals(Language.OTHER))
				if (form.OtherLanguage().getValue() == null)
					errors.add("If Other Language is selected, Other Language is Mandatory");
		if (form.chkTransport().getValue() && form.cmbType().getValue() == null)
			errors.add("If Transport is required, Transport is Mandatory");
		if (form.authoringControl().getValue() == null)
			errors.add("Authoring User is Mandatory");
		
		//WDEV-18554 WDEV-18599
		if (SourceOfReferral.TRANSFER.equals(form.cmbSOR().getValue()) && form.getLocalContext().getTransferInfo()==null)
		{
			errors.add("If Referral Type is Transfer, please fill in mandatory fields in Referral Transfer dialog");
		}
		
		if (form.RefPCTCode().getValue() == null
			&& (form.cmbSOR().getValue() != null))
			//WDEV-16851
			errors.add("Location and Referral CCG Code are Mandatory");
		if (form.cmbSOR().getValue() == null)
			errors.add("Referrer Type is Mandatory");

		if (form.cmbSOR().getValue() != null 
			&& form.cmbSOR().getValue().equals(SourceOfReferral.CONSULTANT)
			&& form.ccReferringConsultant().getValue() == null)
			errors.add("Referrer Name is Mandatory when referral type is 'Consultant'");
		
		// This code is only to execute if the method is called from the Wizard
		// form and not this form.
		if (!form.btnSave().isVisible() && form.cmbService().getVisible() && form.cmbService().getValue() == null)
			errors.add("Service is Mandatory");

		if (form.cmbContract().getVisible() && form.cmbContract().getValue() == null)
			errors.add("Contract is Mandatory");
		
		//WDEV-18452 
		if (form.dteConsUpgradeDate().isEnabled() && form.dteConsUpgradeDate().getValue() == null)
			errors.add("Consultant Upgrade Date is Mandatory");

		if (errors.size() > 0)
			return errors.toArray(new String[0]);
		return null;

	}
	
	protected void onFormModeChanged()
	{
		updateControlState();


		//		wdev-12682
		if (form.getGlobalContext().RefMan.getDiagnosticReferralForApplicationIsNotNull()
				&& form.getGlobalContext().RefMan.getDiagnosticReferralForApplication())
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				if (form.cmbLocation().getValue() == null && form.getLocalContext().getreferralVo() == null)
					defaultLocation();
			}
		}
	}

	public void defaultLocation()
	{
		for (int i = 0; i < form.cmbLocation().getValues().size(); i++)
		{
			LocationLiteVo voLoc = (LocationLiteVo) form.cmbLocation().getValues().get(i);
			if (engine.getCurrentLocation() != null && voLoc.getID_Location().equals(engine.getCurrentLocation().getID()))
				form.cmbLocation().setValue(voLoc);
		}

	}

	public Boolean anyDataToSave()
	{
		if (populateDataFromScreen().countFieldsWithValue() > 0)
			return true;
		return false;

	}

	public String[] validate(String[] errors)
	{
		String[] thisComponentErrors = validateUILogic();
		List<String> totalErrors = new ArrayList<String>();
		if (errors == null)
			return thisComponentErrors;
		else
		{
			for (int i = 0; i < errors.length; i++)
			{
				totalErrors.add(errors[i]);
			}
			if (thisComponentErrors != null)
				for (int j = 0; j < thisComponentErrors.length; j++)
				{
					totalErrors.add(thisComponentErrors[j]);
				}
			return totalErrors.toArray(new String[0]);
		}

	}

	private void clearControlsOnInitialize()
	{
		form.cmbLanguage().setValue(null);
		//WDEV-18142
		form.ccConsultant().clear();
		form.cmbType().setValue(null);
		form.txtGPAddress().setValue(null);
		form.txtFaxNumber().setValue(null);
		form.txtLocation().setValue(null);
		form.txtGPName().setValue(null);
		form.txtWorkPhone().setValue(null);
		setHCPInformationToNull();
		form.RefPCTCode().setValue(null);
		form.dtimKPI().setValue(null);
		form.dteReferral().setValue(null);
		form.dteOriginalReferralDate().setValue(null);//wdev-18432

		form.dteReferralReceived().setValue(null);
		form.dtimWW().setValue(null);
		form.chkIntrepreter().setValue(false);
		form.chkTransport().setValue(false);
		form.chkAwaitingInfo().setValue(false);
	}

	
	protected void onChkPatientsGpValueChanged() throws PresentationLogicException
	{
		GpShortVo patientGp = null;
		form.getLocalContext().setGPInfo(form.getGlobalContext().RefMan.getPatientsGP());
		if (form.chkPatientsGp().getValue())
		{
			form.getLocalContext().setGPInfo(form.getGlobalContext().RefMan.getPatientsGP());
			if (form.getGlobalContext().RefMan.getPatientsGPIsNotNull())
				patientGp = form.getGlobalContext().RefMan.getPatientsGP();
			else if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				patientGp = form.getLocalContext().getpatientsGp();// domain.getPatientGP(form.getGlobalContext().Core.getPatientShort().getID_Patient());

			if (patientGp != null)
				populateGPDetailsPanelFromData(patientGp);
			else
				onReferrerTypeSelectionChanged();

		}
		else if (!form.chkPatientsGp().getValue())
			onReferrerTypeSelectionChanged();
		else
			onReferrerTypeSelectionChanged();

	}

	
	protected void onCmbServiceValueChanged() throws PresentationLogicException
	{
		if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
			form.qmbProcedure().clear();

		form.cmbClinicType().clear();
		if (form.cmbService().getValue() != null)
		{
			ServiceFunctionLiteVoCollection serviceFunctions = domain.listServiceFunctionsLite(form.cmbService().getValue());
			if (serviceFunctions != null)
			{
				for (int i = 0; i < serviceFunctions.size(); i++)
				{
					ServiceFunctionLiteVo voServiceFunctionLite = serviceFunctions.get(i);
					form.cmbClinicType().newRow(voServiceFunctionLite, voServiceFunctionLite.getFunction().getText());
				}
			}
		}
		//wdev-13647
		if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
		{
			getAndPopulateNearestTreatmentCenterLocation();
			if( form.cmbNearestTreatmentCentreLocation().getValue() == null)
				getAndPopulateNearestLocation();
		}
		//---------
		updateControlState();

	}

	// WDEV-11713
	private String[] validateReferralReceivedDate()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.dteReferralReceived().getValue() != null)
		{
			// If the date of referral or the date of referral received is a
			// future date it will launch an exception.
			if (form.dteReferralReceived().getValue().isGreaterThan(new Date()))
				errors.add("Referral Dates can not be in the future");
			if (form.dteReferral().getValue() != null)
				if (form.dteReferral().getValue().isGreaterThan(form.dteReferralReceived().getValue()))
					errors.add("Referral Date can not be after Referral Received Date");
		}
		if (errors.size() == 0)
			return null;
		String[] result = new String[errors.size()];
		errors.toArray(result);
		return result;
	}

	
	protected void onDteReferralReceivedValueChanged() throws PresentationLogicException
	{


		String[] errors = validateReferralReceivedDate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
		}
		calculateKpi();

	}

	// WDEV-11713
	private void calculateKpi()
	{
		// startreceived
		clearKpi();
		if (form.cmbContract().getValue() == null)
			return;

		// end receive
		if (form.dteReferral().getValue() != null && form.cmbContract().getValue().getDaysToRTTBreachDateIsNotNull())
		{
			form.dtimWW().setValue(form.dteReferral().getValue().copy().addDay(form.cmbContract().getValue().getDaysToRTTBreachDate()));// form.dtimWW().setValue(endWW);
		}
	}

	private String[] validateReferralDate()
	{
		String[] result = null;
		if (form.dteReferral().getValue() != null)
		{
			// If the date of referral or the date of referral received is a
			// future date it will launch an exception.
			if (form.dteReferral().getValue().isGreaterThan(new Date()))
			{
				result = new String[]{"Referral Date can not be in the future"};
			}
		}
		return result;
	}

	
	protected void onDteReferralValueChanged() throws PresentationLogicException
	{

		String[] errors = validateReferralDate();
		if (errors!= null && errors.length>0)
		{
			engine.showErrors(errors);
			form.dteReferral().setValue(null);
			form.dteReferralReceived().setValue(null);
		}
		calculateKpi();


		updateControlState();
	}

	
	protected void onCmbLanguageValueChanged() throws PresentationLogicException
	{
		//WDEV-16178
		form.OtherLanguage().setRequired(Language.OTHER.equals(form.cmbLanguage().getValue()));

		updateControlState();
	}

	public void setInitializedBooleanToFalse()
	{
		form.getLocalContext().setbReferralDetailsInitialized(Boolean.FALSE);

	}

	private void updateControlState()
	{
		if (form.getLocalContext().getcallingFormIsNotNull())
		{
			if (form.getLocalContext().getcallingForm().equals(CALLINGFORM.REFERRALDETAILS))
			{
				if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
				{
					CatsReferralWizardVo catsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
					form.getLocalContext().sethasCatsReferralReferralLetter(false);
					form.chkAwaitingInfo().setValue(catsReferral.getIsAwaitingClinicalInfoIsNotNull());
					form.getGlobalContext().RefMan.setAwaitingClinicalInfoBoolean(catsReferral.getIsAwaitingClinicalInfo());
					form.btnClinicalInfo().setVisible(catsReferral.getAwaitingClinicalInfoIsNotNull() ? true : false);
					form.getLocalContext().setCurrentAwaitingClinicalInformationVo(catsReferral.getAwaitingClinicalInfo());

					if (catsReferral.getHasReferralLetterIsNotNull())
						if (catsReferral.getHasReferralLetter())
							form.getLocalContext().sethasCatsReferralReferralLetter(true);
						else
							form.getLocalContext().sethasCatsReferralReferralLetter(false);

					if (catsReferral != null && catsReferral.getCurrentStatusIsNotNull() && catsReferral.getCurrentStatus().getReferralStatusIsNotNull())
					{
						if (catsReferral.getIsCABIsNotNull())
						{
							if (catsReferral.getIsCAB())
								updateNormalControlState(form.getLocalContext().getreferralVoIsNotNull(), true, (catsReferral != null && catsReferral.getReferralDetailsIsNotNull() ? true : false), isRejectedOrCancelledOrNoDataAndAccepted(catsReferral));
							else
								updateNormalControlState(form.getLocalContext().getreferralVoIsNotNull(), false, (catsReferral != null && catsReferral.getReferralDetailsIsNotNull() ? true : false), isRejectedOrCancelledOrNoDataAndAccepted(catsReferral));
						}
						else
							updateNormalControlState(form.getLocalContext().getreferralVoIsNotNull(), false, (catsReferral != null && catsReferral.getReferralDetailsIsNotNull() ? true : false), isRejectedOrCancelledOrNoDataAndAccepted(catsReferral));
					}
				}
			}
			else
			{
				updateNormalControlState(form.getLocalContext().getreferralVoIsNotNull(), false, false, false);
			}
		}

		if (form.getMode().equals(FormMode.VIEW) && form.qmbProcedure().getVisible())// wdev-7624
			form.qmbProcedure().setEnabled(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(true);
		}

		// wdev-6163
		if (form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull() && form.getGlobalContext().RefMan.getIsProviderCancellation())
			form.btnEdit().setVisible(false);

		//wdev-13647
		if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
		{
			form.cmbNearestTreatmentCentreLocation().setEnabled(form.getMode().equals(FormMode.EDIT));
		}

		//WDEV-18395
		if (form.getMode().equals(FormMode.EDIT))
			form.chkActivityRTTClock().setEnabled(true);
		//-------



	}

	private boolean isRejectedOrCancelledOrNoDataAndAccepted(CatsReferralWizardVo voCats)
	{
		boolean bReturn = false;
		if (voCats != null && (voCats.getCurrentStatusIsNotNull() && voCats.getCurrentStatus().getReferralStatusIsNotNull()
				&& (voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER)
						|| voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.CAB_CANCELLATION))
						|| voCats.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.REFERRAL_REJECTED)))
			bReturn = true;

		for (int i = 0; voCats.getStatusHistoryIsNotNull() && i < voCats.getStatusHistory().size(); i++)
		{
			if (voCats.getStatusHistory().get(i).getReferralStatusIsNotNull() 
					&& voCats.getStatusHistory().get(i).getReferralStatus().equals(ReferralApptStatus.REFERRAL_ACCEPTED)
					&& voCats.getAwaitingClinicalInfo() == null)
				return true;
		}
		return bReturn;
	}

	private void updateNormalControlState(boolean bUpdating, Boolean bCAB, boolean bReferallLetterDetailsExist, boolean bDisable)
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (bCAB && form.getLocalContext().getbReferralDetailsInitializedIsNotNull() && form.getLocalContext().getbReferralDetailsInitialized())
			{
				form.btnSave().setVisible(true);
				form.btnCancel().setVisible(true);
			}

			if (form.getLocalContext().getbReferralDetailsInitializedIsNotNull() && !form.getLocalContext().getbReferralDetailsInitialized())
			{
				if (form.getLocalContext().getcallingForm().equals(CALLINGFORM.REFERRALDETAILS))
				{
					form.btnSave().setVisible(true);
					form.btnCancel().setVisible(true);
				}
			}
			form.cmbContract().setEnabled(!bDisable);//WDEV-11713
			// cmbPatientGP
			if (form.cmbSOR().getValue() != null)
				if (form.cmbSOR().getValue().equals(SourceOfReferral.GP))
					if (form.getGlobalContext().RefMan.getPatientsGPIsNotNull())
						form.chkPatientsGp().setEnabled(true);
					else
						form.chkPatientsGp().setEnabled(false);
				else
					form.chkPatientsGp().setEnabled(false);
			else
				form.chkPatientsGp().setEnabled(false);

			form.chkCopyToPatient().setEnabled(true);
			if (ConfigFlag.UI.ENABLE_AWAITING_CLINICAL_INFO_FUNCTIONALITY.getValue());
			{
				form.chkAwaitingInfo().setEnabled(!bDisable);

				// This is a problem...
				form.btnClinicalInfo().setVisible(form.getLocalContext().getCurrentAwaitingClinicalInformationVoIsNotNull());
			}
			form.cmbLocation().setEnabled(true);

			form.lblProcedure().setVisible(ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue());
			form.qmbProcedure().setVisible(ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue());
			form.qmbProcedure().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.cmbClinicType().setEnabled(true);
			form.dteReferralReceived().setEnabled(true);
			form.dteOriginalReferralDate().setEnabled(true); //wdev-18432
			form.chkIntrepreter().setEnabled(true);
			form.cmbLanguage().setEnabled(form.chkIntrepreter().getValue());
			form.chkTransport().setEnabled(true);
			//WDEV-18391
			form.txtSpecialRequirements().setEnabled(true);
			form.cmbType().setEnabled(form.chkTransport().getValue());
			//WDEV-18452 
			form.dteConsUpgradeDate().setEnabled(ReferralUrgency.CONSULTANT_UPGRADE.equals(form.cmbUrgency().getValue()));
			form.dteConsUpgradeDate().setRequired(form.dteConsUpgradeDate().isEnabled());
			
			manageLanguageIntrepreterTransportControls();

			if (form.cmbService().getValue() != null)
				form.cmbClinicType().setEnabled(true);
			else
				form.cmbClinicType().setEnabled(false);

			form.cmbService().setEnabled(true);
			form.ccReferringConsultant().setVisible(false);
			form.btnTransferDetails().setVisible(false);

			form.dteReferral().setEnabled(!bUpdating);

			if (bCAB && bReferallLetterDetailsExist)
				manageSORControls(true);
			else if (bCAB && !bReferallLetterDetailsExist)// CAB could have
				// blank RLD info,
				// treat as ordinary
				// referral so all
				// data is editable
				manageSORControls(false);
			else
				manageSORControls(false);
		}
		else
		{
			// wdev-8686 form.btnEdit().setVisible(false);
			form.cmbLocation().setEnabled(false);

			form.chkAwaitingInfo().setEnabled(false);

			form.chkAwaitingInfo().setVisible(ConfigFlag.UI.ENABLE_AWAITING_CLINICAL_INFO_FUNCTIONALITY.getValue());
			form.btnClinicalInfo().setVisible(ConfigFlag.UI.ENABLE_AWAITING_CLINICAL_INFO_FUNCTIONALITY.getValue() && form.getLocalContext().getCurrentAwaitingClinicalInformationVoIsNotNull());
		}
	}


	private void manageLanguageIntrepreterTransportControls()
	{
		if (form.cmbLanguage().getValue() != null)
		{
			if (form.cmbLanguage().getValue().equals(Language.OTHER))
				form.OtherLanguage().setEnabled(true);
			else
			{
				form.OtherLanguage().setValue(null);
				form.OtherLanguage().setEnabled(false);
			}
		}
		if (!form.chkIntrepreter().getValue())
		{
			form.cmbLanguage().setValue(null);
			form.cmbLanguage().setEnabled(false);
			form.OtherLanguage().setValue(null);
			form.OtherLanguage().setEnabled(false);
		}
	}

	private void manageSORControls(Boolean bCAB)
	{
		boolean bEnable = (form.cmbSOR().getValue() != null 
				&& ( (form.cmbSOR().getValue().equals(SourceOfReferral.SELF)) 
					|| (form.cmbSOR().getValue().equals(SourceOfReferral.TRANSFER))
					|| (form.cmbSOR().getValue().equals(SourceOfReferral.CONSULTANT))));
		
		form.RefPCTCode().setEnabled(bEnable);
		form.txtRefPracticeCode().setEnabled(bEnable);
		form.txtWorkPhone().setEnabled(bEnable);
		form.txtMobilePhone().setEnabled(bEnable);
		form.txtFaxNumber().setEnabled(bEnable);
		form.txtEmail().setEnabled(bEnable);
		form.txtRefPracticeCode().setRequired(true);
		form.txtGPName().setVisible(true);
		if (form.cmbSOR().getValue() != null && ! form.cmbSOR().getValue().equals(SourceOfReferral.CONSULTANT))
			form.ccReferringConsultant().setVisible(false);
		
		if (form.cmbSOR().getValue() != null)
		{
			form.cmbSOR().setEnabled(!bCAB);
			if (form.cmbSOR().getValue().equals(SourceOfReferral.GP))
			{
				form.AHPSearch().setVisible(false);
				form.GPSearch().setVisible(bCAB ? false : true);
				form.lbl7().setVisible(false);
				form.txtGPName().setEnabled(false);
				form.lbl8().setVisible(true);
				form.lbl8().setTextColor(Color.Red);
				form.txtGPName().setRequired(bCAB ? false : true);
				form.txtGPAddress().setEnabled(false);
				form.txtGPName().setVisible(true);
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.AHP))
			{
				form.txtGPName().setRequired(false);

				form.chkPatientsGp().setValue(null);
				form.GPSearch().setVisible(false);
				form.lbl7().setVisible(bCAB ? false : true);
				form.AHPSearch().setVisible(bCAB ? false : true);
				form.lbl8().setVisible(false);
				form.lbl7().setTextColor(Color.Red);
				form.txtGPName().setEnabled(bCAB ? false : true);
				form.txtGPAddress().setEnabled(false);
				form.txtGPName().setVisible(true);
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.SELF))
			{
				form.txtGPName().setRequired(false);

				form.chkPatientsGp().setValue(null);
				form.GPSearch().setVisible(false);
				form.lbl7().setVisible(false);
				form.AHPSearch().setVisible(false);
				form.lbl8().setVisible(false);
				form.txtGPName().setEnabled(false);
				form.txtGPAddress().setEnabled(false);
				form.txtLocation().setEnabled(false);
				form.txtGPName().setVisible(true);
				form.txtRefPracticeCode().setRequired(false);
				
				if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				{
					form.RefPCTCode().setValue(form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull() ?form.getGlobalContext().Core.getPatientShort().getAddress().getPctCode() : "");
					
					if (form.RefPCTCode().getValue() == null
						&& form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull()
						&& form.getGlobalContext().Core.getPatientShort().getAddress().getPostCodeIsNotNull())	
						form.RefPCTCode().setValue(domain.getCCGForPostCode(form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode()));
					
					form.txtGPName().setValue(form.getGlobalContext().Core.getPatientShort().getNameIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getName().toString() : "");
					form.txtGPAddress().setValue(form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull() ? form.getGlobalContext().Core.getPatientShort().getAddress().toDisplayStringForMultiLineTextBox() : "");
					if (form.getGlobalContext().Core.getPatientShort().getCommChannelsIsNotNull() && form.getGlobalContext().Core.getPatientShort().getCommChannels().size() > 0)
					{

						CommChannelVo workPhone, mobile, fax, email;
						if ((workPhone = form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE)) != null)
							if (form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.WORK_PHONE).getChannelTypeIsNotNull())
								form.txtWorkPhone().setValue(workPhone.getCommValue());
						if ((mobile = form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.MOBILE)) != null)
							if (form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.MOBILE).getChannelTypeIsNotNull())
								form.txtMobilePhone().setValue(mobile.getCommValue());
						if ((fax = form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.FAX)) != null)
							if (form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.FAX).getChannelTypeIsNotNull())
								form.txtFaxNumber().setValue(fax.getCommValue());
						if ((email = form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.EMAIL)) != null)
							if (form.getGlobalContext().Core.getPatientShort().getCommChannels().getCommunicationChannel(ChannelType.EMAIL).getChannelTypeIsNotNull())
								form.txtEmail().setValue(email.getCommValue());
					}

				}
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.CONSULTANT))
			{
				form.txtGPName().setRequired(false);

				form.chkPatientsGp().setValue(null);
				form.GPSearch().setVisible(false);
				form.lbl7().setVisible(false);
				form.AHPSearch().setVisible(false);
				form.lbl8().setVisible(false);
				form.txtGPName().setEnabled(false);
				form.txtGPName().setVisible(false);
				form.txtGPAddress().setEnabled(true);
				form.ccReferringConsultant().initialize(MosType.MEDIC, true);
				form.ccReferringConsultant().setVisible(true);
				form.ccReferringConsultant().isRequired(true);
				form.ccReferringConsultant().setEnabled(true);
				form.txtGPName().setVisible(false);
				form.btnTransferDetails().setVisible(true);
				form.txtRefPracticeCode().setRequired(false);
				
				if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				{
					if(Boolean.FALSE.equals(ConfigFlag.DOM.GP_USE_SURGERIES.getValue()))
					{
						LocSiteVo voSurgery = domain.getPatientSurgery(form.getGlobalContext().Core.getPatientShort());
						if (voSurgery != null)
						{
							form.RefPCTCode().setValue(voSurgery.getAddressIsNotNull() ? voSurgery.getAddress().getPCT() : null);

							if (form.RefPCTCode().getValue() == null
								&& voSurgery.getAddressIsNotNull()
								&& voSurgery.getAddress().getPostCodeIsNotNull())	
								form.RefPCTCode().setValue(domain.getCCGForPostCode(voSurgery.getAddress().getPostCode()));
						}
					}
					else
					{
						if (form.getGlobalContext().RefMan.getPatientsGPIsNotNull())
						{
							for (int i = 0 ; form.getGlobalContext().RefMan.getPatientsGP().getPracticesIsNotNull() && i < form.getGlobalContext().RefMan.getPatientsGP().getPractices().size() ; i++)
							{
								GpToPracticesVo voPractice = form.getGlobalContext().RefMan.getPatientsGP().getPractices().get(i);
								if (voPractice.getIsPrimaryPractice())
								{
									form.RefPCTCode().setValue(voPractice.getPracticeIsNotNull() ? voPractice.getPractice().getPctCode() : null);

									if (form.RefPCTCode().getValue() == null
										&& voPractice.getPracticeIsNotNull()
										&& voPractice.getPractice().getAddressIsNotNull()
										&& voPractice.getPractice().getAddress().getPostCodeIsNotNull())	
										form.RefPCTCode().setValue(domain.getCCGForPostCode(voPractice.getPractice().getAddress().getPostCode()));
								}
							}
						}
					}
					
					if (form.RefPCTCode().getValue() == null)
					{
						form.RefPCTCode().setValue(form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull() ?form.getGlobalContext().Core.getPatientShort().getAddress().getPctCode() : "");
						if (form.RefPCTCode().getValue() == null
							&& form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull()
							&& form.getGlobalContext().Core.getPatientShort().getAddress().getPostCodeIsNotNull())	
							form.RefPCTCode().setValue(domain.getCCGForPostCode(form.getGlobalContext().Core.getPatientShort().getAddress().getPostCode()));
					}
				}
			}
			else if (form.cmbSOR().getValue().equals(SourceOfReferral.TRANSFER))
			{
				form.txtGPName().setRequired(false);

				form.chkPatientsGp().setValue(null);
				form.GPSearch().setVisible(false);
				form.lbl7().setVisible(false);
				form.AHPSearch().setVisible(false);
				form.lbl8().setVisible(false);
				form.txtGPName().setEnabled(true);
				form.txtGPAddress().setEnabled(true);
				form.txtGPName().setVisible(true);
				form.btnTransferDetails().setVisible(true);
				form.txtRefPracticeCode().setRequired(false);
			}
			else if (form.cmbSOR().getValue() == null || form.cmbService() == null || form.chkPatientsGp() == null)
				initialize(form.getLocalContext().getcallingForm());
		}
		else
		{
			form.cmbSOR().setEnabled(true);
			form.AHPSearch().setVisible(false);
			form.lbl7().setVisible(false);
			form.lbl8().setVisible(false);
			form.GPSearch().setVisible(false);
			form.txtGPName().setEnabled(false);
		}
	}

	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setcomponentEvent(ReferralDetailsComponentButtonClicked.CANCEL);

		setValue(domain.getReferral(form.getLocalContext().getreferralVo()), domain.getCatsReferral(form.getLocalContext().getCatsReferralWizardVo()));

		form.setMode(FormMode.VIEW);
	}

	
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.getLocalContext().setcomponentEvent(ReferralDetailsComponentButtonClicked.EDIT);
		form.setMode(FormMode.EDIT);
		updateControlState();
		//wdev-13647
		if( form.cmbNearestTreatmentCentreLocation().getValue() == null)
			getAndPopulateNearestLocation();
		//--
	}

	
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		ReferralLetterDetailsVo referralDetailsVo = getValue();
		CatsReferralWizardVo voCats = null;
		try
		{
			String[] errors = validateUILogic();
			errors = referralDetailsVo.validate(errors);
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			// voCats.setIsAwaitingClinicalInfo(form.getGlobalContext().RefMan.getAwaitingClinicalInfoBoolean());
			// voCats.setAwaitingClinicalInfo(form.getLocalContext().getCurrentAwaitingClinicalInformationVo());

			//WDEV-11713 if (!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue())
			voCats.setContract(form.cmbContract().getValue());
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(form.cmbContract().getValue().getContractType());
			voCats.setReferralCategory(form.cmbCategory().getValue());//WDEV-12181
			voCats.setUrgency(form.cmbUrgency().getValue()); // WDEV-17930
			voCats.setConsUpgradeDate(form.dteConsUpgradeDate().getValue()); // WDEV-18452 
			
			voCats.setRTTClockImpact(form.chkActivityRTTClock().getValue());
			//WDEV-18432
			voCats.setReferralTransfer(form.getLocalContext().getTransferInfo());
			voCats.setPathwayID(form.getLocalContext().getTransferInfoIsNotNull() ? form.getLocalContext().getTransferInfo().getPathwayID() : null);

			//wdev-13647
			if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
			{
				voCats.setNearestTreatmentCentre(form.cmbNearestTreatmentCentreLocation().getValue());
			}
			//---

			errors = voCats.validate(errors);
			if (errors != null)
			{
				engine.showErrors(errors);
				return;
			}

			//			wdev-12682
			form.getLocalContext().setreferralVo(domain.save(referralDetailsVo, voCats, form.getGlobalContext().RefMan.getReferralContractTypeForPatientIsNotNull() && form.getGlobalContext().RefMan.getReferralContractTypeForPatient().equals(ReferralManagementContractType.DIAGNOSTIC)));

			//WDEV-11535 - update Global Context if specialty has changed
			if(form.getLocalContext().getreferralVoIsNotNull() && form.getLocalContext().getreferralVo().getEpisodeOfCareIsNotNull())
				form.getGlobalContext().Core.setEpisodeofCareShort(form.getLocalContext().getreferralVo().getEpisodeOfCare());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setreferralVo(domain.getReferral(referralDetailsVo.toReferralLetterDetailsRefVo()));
		}

		form.getLocalContext().setcomponentEvent(ReferralDetailsComponentButtonClicked.SAVE);
		if (referralDetailsVo.getDateReferralReceivedIsNotNull() && referralDetailsVo.getServiceIsNotNull() && form.getLocalContext().gethasCatsReferralReferralLetterIsNotNull() && form.getLocalContext().gethasCatsReferralReferralLetter())
			form.getLocalContext().setactiveDetailsButton(true);
		else
			form.getLocalContext().setactiveDetailsButton(false);

		form.setMode(FormMode.VIEW);
		//wdev-12256
		form.cmbContract().clear();

		// WDEV-12866
		// Use the new function to list active Contracts for a specific location
		// ContractConfigForReferralDetailsComponentVoCollection contracts = domain.listActiveContracts(domain.getOrganisationByLocation(engine.getCurrentLocation().getID()));
		ContractConfigForReferralDetailsComponentVoCollection contracts = domain.listActiveContractsForLocation((LocationRefVo) engine.getCurrentLocation());
		for (int i = 0; contracts != null && i < contracts.size(); i++)
		{
			form.cmbContract().newRow(contracts.get(i), contracts.get(i).getContractName());
		}
		//---end wdev-12256

		setValue(form.getLocalContext().getreferralVo(), domain.getCatsReferral(voCats));
	}

	// 
	// protected void onBtnChangeOfServiceClick() throws
	// PresentationLogicException
	// {
	// form.getGlobalContext().RefMan.setCurrentServiceLiteVo(form.cmbService().getValue());
	// engine.open(form.getForms().RefMan.ChangeServiceDialog);
	// }
	public void setReferralAccepted()
	{
		updateControlState();
	}

	public void setIsReferralAccepted(Boolean refStatus)
	{
		form.getLocalContext().setbReferralAccepted(refStatus);
		updateControlState();
	}

	public void setPatientsGp(GpShortVo gp)
	{
		form.getLocalContext().setpatientsGp(gp);
	}

	public Boolean getActiveDetails()
	{
		return form.getLocalContext().getactiveDetailsButton();

	}

	public ReferralDetailsComponentButtonClicked getComponentEvent()
	{
		return form.getLocalContext().getcomponentEvent();

	}

	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		if (form.cmbService().getValue() == null)
		{
			engine.showMessage("Please select a Service and query again.");
			form.qmbProcedure().setEditedText("");
			form.cmbService().setFocus();
			return;
		}

		try
		{
			populateProcedures(domain.listProcedures(value, form.cmbService().getValue()));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
	}

	private void populateProcedures(ProcedureLiteVoCollection listProcedures)
	{
		// Clear the query combo box
		form.qmbProcedure().clear();

		if (listProcedures == null)
			return;

		for (int i = 0; i < listProcedures.size(); i++)
		{
			ProcedureLiteVo procedure = listProcedures.get(i);

			if (procedure != null)
			{
				form.qmbProcedure().newRow(procedure, procedure.getProcedureName());
			}
		}

		if (form.qmbProcedure().getValues().size() == 1)
		{
			form.qmbProcedure().setValue((ProcedureLiteVo) form.qmbProcedure().getValues().get(0));
		}
		else
		{
			form.qmbProcedure().showOpened();
		}
	}

	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	
	protected void onCmbContactValueChanged() throws PresentationLogicException
	{
		loadLocations();
		// WDEV-11713
		clearKpi();
		calculateKpi();
		//wdev-13647
		if(Boolean.TRUE.equals(ConfigFlag.UI.REFERRAL_DETAILS_DISPLAY_NEAREST_TREATMENT_CENTRE.getValue()))
		{
			getAndPopulateNearestTreatmentCenterLocation();
			if( form.cmbNearestTreatmentCentreLocation().getValue() == null)
				getAndPopulateNearestLocation();
		}
		//---------
	}

	
	protected void onBtnClinicalInfoClick() throws PresentationLogicException
	{
		CatsReferralWizardVo voCats = null;
		if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull()) // The
			// global
			// context
			// is not
			// null
		{
			voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			form.getGlobalContext().RefMan.setAwaitingClinicalInfo(voCats.getAwaitingClinicalInfo());
		}
		else
		{
			form.getGlobalContext().RefMan.setAwaitingClinicalInfo(form.getLocalContext().getCurrentAwaitingClinicalInformationVo());
		}

		form.getGlobalContext().Core.setParentFormMode(form.getMode());

		engine.open(form.getForms().RefMan.AwaitingClinicalInformationDialog);
	}

	
	protected void onChkAwaitingInfoValueChanged() throws PresentationLogicException
	{
		if (form.chkAwaitingInfo().getValue())
		{
			if (form.getGlobalContext().RefMan.getCatsReferralIsNotNull()) // The
				// global
				// context
				// is
				// not
				// null
			{
				form.getGlobalContext().RefMan.setAwaitingClinicalInfo((domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()).getAwaitingClinicalInfo()));
			}
			else if (form.getGlobalContext().RefMan.getAwaitingClinicalInfo() == null)
			{
				form.getGlobalContext().RefMan.setAwaitingClinicalInfo(form.getLocalContext().getCurrentAwaitingClinicalInformationVo());
			}

			form.getGlobalContext().Core.setParentFormMode(form.getMode());
			engine.open(form.getForms().RefMan.AwaitingClinicalInformationDialog);
		}
	}

	public void setCreationMode(Boolean creationMode)
	{
		form.getLocalContext().setIsInCreationMode(creationMode);
	}

	public Boolean getTriageFromButton()
	{
		return Boolean.TRUE.equals(form.getLocalContext().getTriageFromButton());
	}
	//wdev-13647
	private void getAndPopulateNearestTreatmentCenterLocation()
	{
		form.cmbNearestTreatmentCentreLocation().clear();
		if(form.cmbContract().getValue() != null && form.cmbService().getValue() != null)
		{
			ContractServiceLocationsConfigVoCollection tempVoColl = domain.listLocationServiceByContractAndService(form.cmbContract().getValue(),form.cmbService().getValue());
			populateNearestTreatmentCentreCombo(tempVoColl);
		}
		/*if(form.cmbContract().getValue() != null && form.cmbService().getValue() == null)
		{
			ContractServiceLocationsConfigVoCollection tempVoColl = domain.listLocationServiceByContract(form.cmbContract().getValue());
			populateNearestTreatmentCentreCombo(tempVoColl);
		}*/
	}
	//wdev-13647
	private void populateNearestTreatmentCentreCombo(ContractServiceLocationsConfigVoCollection tempVoColl)
	{
		if(tempVoColl != null && tempVoColl.size() > 0)
		{
			ContractServiceLocationsConfigVoCollection locserVoColl = new ContractServiceLocationsConfigVoCollection();
			for(int i = 0; i < tempVoColl.size();i++)
			{
				ContractServiceLocationsConfigVo tempVo = tempVoColl.get(i);
				if(tempVo == null)
					continue;
				if(checIfLocationIsalreadyInCombo(locserVoColl,tempVo) == false)
				{
					locserVoColl.add(tempVo);
					form.cmbNearestTreatmentCentreLocation().newRow(tempVo.getLocation(), tempVo.getLocation().getName());
				}
			}
		}
	}
	//wdev-13647
	private boolean checIfLocationIsalreadyInCombo(ContractServiceLocationsConfigVoCollection locserVoColl,ContractServiceLocationsConfigVo tempVo)
	{
		if(locserVoColl == null || locserVoColl.size() == 0)
			return false;
		for(int i = 0; i < locserVoColl.size();i++)
		{
			ContractServiceLocationsConfigVo tempSerLocVo = locserVoColl.get(i);
			if(tempSerLocVo == null)
				continue;
			if(tempSerLocVo.getLocationIsNotNull() && tempVo.getLocationIsNotNull() && tempSerLocVo.getLocation().getID_Location().equals(tempVo.getLocation().getID_Location()) )
				return true;
		}
		return false;
	}
	//wdev-13647
	private void getAndPopulateNearestLocation()
	{
		try
		{

			if (engine.getAddressProvider() != null && form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getAddressIsNotNull())
				form.getLocalContext().setdistanceMAP(engine.getAddressProvider().computeDistances(form.getGlobalContext().Core.getPatientShort().getAddress(), "MILES"));

		}
		catch (PresentationLogicException e)
		{
			engine.showMessage(e.getMessage());
		}
		List<ConfigLocationLiteVo> tempVoColl = form.cmbNearestTreatmentCentreLocation().getValues();
		if(tempVoColl != null && tempVoColl.size() > 0)
		{
			Float distance[] = new Float[tempVoColl.size()];
			ConfigLocationLiteVo location[] = new ConfigLocationLiteVo[tempVoColl.size()];
			int k = 0;
			for(int i = 0; i < tempVoColl.size();i++)
			{
				if(form.getLocalContext().getdistanceMAPIsNotNull())
				{
					Object distanceObj = form.getLocalContext().getdistanceMAP().get(stripspaces(tempVoColl.get(i).getAddress() != null ? tempVoColl.get(i).getAddress().getAddressPostCode():null));
					if(distanceObj != null && distanceObj.toString() != null)
					{
						try
						{
							distance[k] = new Float(Float.parseFloat(distanceObj.toString()));
							location[k] = tempVoColl.get(i);
							k++;
						}
						catch (NumberFormatException e)
						{
							engine.showMessage("Error getting Nearest Treatment Center Location");
						}

					}
				}

			}

			Float min = distance[0];
			ConfigLocationLiteVo locVo= location[0];
			for(int j = 1; j < distance.length; j++)
			{
				if(distance[j] != null && distance[j] < min)
				{
					min = distance[j];
					locVo = location[j];
				}
			}
			if(min != null && locVo != null)
				form.cmbNearestTreatmentCentreLocation().setValue(locVo);


		}
	}
	//wdev-13647
	private String stripspaces(String addressPostCode)
	{
		if(addressPostCode == null)
			return null;
		StringTokenizer st = new StringTokenizer(addressPostCode);
		String t = "";
		while (st.hasMoreElements())
			t += st.nextElement();
		return t;
	}

	
	protected void onCcConsultantValueChanged()throws PresentationLogicException
	{
		form.fireCustomControlValueChanged(); 
	}

	 
	public Boolean getRTTClockImpact() {
		
		return (form.chkActivityRTTClock().getValue());
	}

	
	@Override
	protected void onBtnTransferDetailsClick() throws PresentationLogicException 
	{
		form.getGlobalContext().RefMan.setReferralTransfer(form.getLocalContext().getTransferInfo());
		if (form.getGlobalContext().RefMan.getReferralTransferIsNotNull())
			form.getGlobalContext().RefMan.getReferralTransfer().setPathwayID(form.getLocalContext().getTransferInfo().getPathwayID());
		
		engine.open(form.getForms().RefMan.ReferralTransferDialog, form.getMode().equals(FormMode.VIEW) ? new Object[]{FormMode.VIEW} : new Object[]{FormMode.EDIT});
	}

	public String getPathwayID() 
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected void onCmbUrgencyValueChanged() throws PresentationLogicException
	{
		form.dteConsUpgradeDate().setValue(null);
		updateControlState();		
	}

}
