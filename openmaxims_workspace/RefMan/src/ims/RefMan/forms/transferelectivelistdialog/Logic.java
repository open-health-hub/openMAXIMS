// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.transferelectivelistdialog;

import ims.RefMan.vo.ElectiveListConfigurationLiteVoCollection;
import ims.RefMan.vo.PatientElevectiveListManagementVo;
import ims.RefMan.vo.PatientElevectiveListManagementVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	
	public static final Integer		COLHIDDEN			= new Integer(0);
	public static final Integer		COLSEL				= new Integer(1);
	public static final Integer		COLPATIENT			= new Integer(2);
	public static final Integer		COLPATIENTID		= new Integer(3);
	public static final Integer		COLWAITINGLIST		= new Integer(4);
	public static final Integer		COLCONS				= new Integer(5);
	public static final Integer		COLSERVICE			= new Integer(6);
	public static final Integer		COLLISTDATE			= new Integer(7);
	public static final Integer		COLSTATUS			= new Integer(8);
	
	private static final long serialVersionUID = 1L;

	private static String enteredTargetText;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		form.ccListOwner().initialize(MosType.HCP);
		
		initializeDynamicGrid();
		enableTransfer();
		if (form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagementIsNotNull())
		{
			form.qmbService().newRow(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getService(),form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getServiceIsNotNull()?form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getService().getServiceName():"");
			form.qmbService().setValue(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getService());		
			form.qmbConsultant().newRow(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getConsultant(),form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getConsultantIsNotNull()?form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getConsultant().getName().toString():"");
			form.qmbConsultant().setValue(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getConsultant());
			form.qmbElectiveListName().newRow(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListName(), form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListNameIsNotNull()?form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListName().getWaitingListName():"");			
			form.qmbElectiveListName().setValue(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListName());

			search();
		}
		
	}
	
	private String search() 
	{
		form.dyngrdElectiveListEntries().getRows().clear();
		this.enteredTargetText = null;

		try
		{
			PatientElevectiveListManagementVoCollection voColl = domain.getElectiveListEntries(form.qmbService().getValue(), 
					form.qmbElectiveListName().getValue()!=null?form.qmbElectiveListName().getValue().getID_ElectiveListConfiguration():null, null, form.qmbConsultant().getValue(), null, null, null, null, null);
		
			if (voColl == null || voColl.size() == 0)
			{
				engine.showMessage("No records match your search criteria.", "No data found", MessageButtons.OK, MessageIcon.WARNING);
				form.btnSelectAll().setEnabled(false);
				form.btnTransfer().setEnabled(false);
				form.chkExtendSearch().setEnabled(false);
				form.qmbTargetElectiveList().setEnabled(false);
				return "";
			}			
			
			StringBuffer sb = new StringBuffer();
			for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
			{
				addNewDynamicGridRow(voColl.get(i));
				// If all list entries are Diagnostic, then allow transfer to all elective lists.
				// JNS/BW roll back  on spec form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().setElectiveReason(voColl.get(i).getElectiveListReason());
				sb.append(voColl.get(i).getID_PatientElectiveList());
				if (i < voColl.size() -1)
					sb.append(", ");
			}
						
			return sb.toString();
		}
		catch (CodingRuntimeException ce)
		{
			engine.showMessage(ce.getMessage());
		}
		

		return "";
	}

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdElectiveListEntries().getColumns().getByIdentifier(identifier);
	}

	private void addNewDynamicGridRow(
			PatientElevectiveListManagementVo patientElevectiveListManagementVo) 
	{
			
		DynamicGridRow row = form.dyngrdElectiveListEntries().getRows().newRow();
		DynamicGridCell checkCell = row.getCells().newCell(getColumn(COLSEL), DynamicCellType.BOOL);
		row.setValue(patientElevectiveListManagementVo);
		checkCell.setAutoPostBack(true);
		checkCell.setTooltip("Transfer"); 
		
		DynamicGridCell hiddenCell = row.getCells().newCell(getColumn(COLHIDDEN), DynamicCellType.BOOL);
		hiddenCell.setValue(Boolean.FALSE);
				
		if( patientElevectiveListManagementVo.getPatientIsNotNull() && patientElevectiveListManagementVo.getPatient().getNameIsNotNull() )
		{			
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLPATIENT), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getPatientIsNotNull() ? patientElevectiveListManagementVo.getPatient().getName().toString() : "");
			locCell.setTooltip(patientElevectiveListManagementVo.getPatientIsNotNull() ? patientElevectiveListManagementVo.getPatient().getName().toString() : "");
		}
		
		if( patientElevectiveListManagementVo.getPatientIsNotNull() &&  patientElevectiveListManagementVo.getPatient().getDisplayId() != null )
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLPATIENTID), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getPatient().getDisplayId().getIdValue());
			locCell.setTooltip(patientElevectiveListManagementVo.getPatient().getDisplayId().toString());			
		}
		
		if( patientElevectiveListManagementVo.getElectiveListIsNotNull() )
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLWAITINGLIST), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getElectiveListIsNotNull() ? patientElevectiveListManagementVo.getElectiveList().getWaitingListName() : "");
			locCell.setTooltip(patientElevectiveListManagementVo.getElectiveListIsNotNull() ? patientElevectiveListManagementVo.getElectiveList().getWaitingListName() : "");			
		}
						
		if( patientElevectiveListManagementVo.getConsultantIsNotNull() && patientElevectiveListManagementVo.getConsultant().getMosIsNotNull())
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLCONS), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getElectiveListIsNotNull() ? patientElevectiveListManagementVo.getConsultant().getMos().getIMosName() : "");
			locCell.setTooltip(patientElevectiveListManagementVo.getElectiveListIsNotNull() ? patientElevectiveListManagementVo.getConsultant().getMos().getIMosName() : "");			
		}
		
		if( patientElevectiveListManagementVo.getElectiveListIsNotNull() && patientElevectiveListManagementVo.getElectiveList().getServiceIsNotNull())
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLSERVICE), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getElectiveList().getService().getServiceName());
			locCell.setTooltip(patientElevectiveListManagementVo.getElectiveList().getService().getServiceName());			
		}
		
		if( patientElevectiveListManagementVo.getDateOnListIsNotNull())
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLLISTDATE), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getDateOnList().toString());
			locCell.setTooltip(patientElevectiveListManagementVo.getDateOnList().toString());			
		}
		
		if( patientElevectiveListManagementVo.getElectiveListStatusIsNotNull() && patientElevectiveListManagementVo.getElectiveListStatus().getElectiveListStatusIsNotNull() )
		{
			DynamicGridCell locCell = row.getCells().newCell(getColumn(COLSTATUS), DynamicCellType.LABEL);
			locCell.setValue(patientElevectiveListManagementVo.getElectiveListStatus().getElectiveListStatus().getIItemText());
			locCell.setTooltip(patientElevectiveListManagementVo.getElectiveListStatus().getElectiveListStatus().getIItemText());			
		}
	
		row.setSelectable(true);		
		
	}

	private void initializeDynamicGrid() 
	{
		form.dyngrdElectiveListEntries().clear();
		form.dyngrdElectiveListEntries().setSelectable(true);
		
		DynamicGridColumn sel = form.dyngrdElectiveListEntries().getColumns().newColumn("", COLSEL);
		sel.setWidth(30);	

		DynamicGridColumn hiddenSel = form.dyngrdElectiveListEntries().getColumns().newColumn("", COLHIDDEN);
		hiddenSel.setWidth(0);	

		DynamicGridColumn patientColumn = form.dyngrdElectiveListEntries().getColumns().newColumn("Patient Name", COLPATIENT);
		patientColumn.setWidth(160);	

		DynamicGridColumn patientId = form.dyngrdElectiveListEntries().getColumns().newColumn("Hospital Number", COLPATIENTID);
		patientId.setWidth(100);	

		DynamicGridColumn waitingList = form.dyngrdElectiveListEntries().getColumns().newColumn("List Name", COLWAITINGLIST);
		waitingList.setWidth(120);	

		DynamicGridColumn colCons = form.dyngrdElectiveListEntries().getColumns().newColumn("Consultant", COLCONS);
		colCons.setWidth(120);	

		DynamicGridColumn colService = form.dyngrdElectiveListEntries().getColumns().newColumn("Service", COLSERVICE);
		colService.setWidth(100);	

		DynamicGridColumn colListDate = form.dyngrdElectiveListEntries().getColumns().newColumn("Date On List", COLLISTDATE);
		colListDate.setWidth(80);	

		DynamicGridColumn colStatus = form.dyngrdElectiveListEntries().getColumns().newColumn("Status", COLSTATUS);
		colStatus.setWidth(80);	
		
		form.dyngrdElectiveListEntries().setCheckBoxesAutoPostBack(true);
	}

	protected void onCmbElectiveListTargetValueChanged()
			throws PresentationLogicException 
	{
		enableTransfer();
	}

	private void enableTransfer() 
	{
		form.btnTransfer().setEnabled(form.qmbTargetElectiveList().getValue() != null && isAnythingTicked());		
	}

	protected void onDyngrdElectiveListEntriesCellValueChanged(
			DynamicGridCell cell) 
	{			
		enableTransfer();
	}

	private boolean isAnythingTicked() 
	{
		for (int i = 0 ; i < form.dyngrdElectiveListEntries().getRows().size() ; i++)
		{
			Object objBool = form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLSEL)).getValue();
			Object objHiddenBool = form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLHIDDEN)).getValue();
			if (objBool instanceof Boolean
				&& ((Boolean)objBool)) 
			{
				if (objHiddenBool instanceof Boolean
					&&  !((Boolean)objHiddenBool)) 
				return true;
			}
		}
		return false;
	}
	
		
	protected void onBtnSelectAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		int size = form.dyngrdElectiveListEntries().getRows().size();
		if (form.getLocalContext().getSelectedAllIsNotNull()
				&& form.getLocalContext().getSelectedAll())
		{
			form.btnSelectAll().setText("Select All");
			form.getLocalContext().setSelectedAll(false);
			for (int i = 0; i < size; i++) 
			{
				form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLSEL)).setValue(Boolean.FALSE);
			}
		}
		else
		{
			form.btnSelectAll().setText("Unselect All");
			form.getLocalContext().setSelectedAll(true);
			
			for (int i = 0; i < size; i++) 
			{
				form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLSEL)).setValue(Boolean.TRUE);
			}			
		}

		enableTransfer();
	}
	
	protected void onBtnTransferClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.qmbTargetElectiveList().getValue() == null)
			return;
		
		try {
			domain.transferToElectiveList(getSelectedEntries(),form.qmbTargetElectiveList().getValue());
		} catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.close(DialogResult.OK);
	}
	
	private PatientElevectiveListManagementVoCollection getSelectedEntries() 
	{
		PatientElevectiveListManagementVoCollection selectedVoColl = new PatientElevectiveListManagementVoCollection();
		
		for (int i = 0 ; i < form.dyngrdElectiveListEntries().getRows().size() ; i++)
		{
			Object objBool = form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLSEL)).getValue();
			Object objHiddenBool = form.dyngrdElectiveListEntries().getRows().get(i).getCells().get(getColumn(COLHIDDEN)).getValue();
			if (objBool instanceof Boolean
				&& ((Boolean)objBool)) 
			{
				if (objHiddenBool instanceof Boolean
					&&  !((Boolean)objHiddenBool))
				{
					PatientElevectiveListManagementVo vo = (PatientElevectiveListManagementVo)form.dyngrdElectiveListEntries().getRows().get(i).getValue();
					selectedVoColl.add(vo);
				}
			}
		}
		
		return selectedVoColl;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	protected void onQmbTargetElectiveListValueChanged() throws PresentationLogicException 
	{	
		enableTransfer();
	}

	protected void onQmbTargetElectiveListTextSubmited(String value) throws PresentationLogicException 
	{
		this.enteredTargetText = value;
		form.qmbTargetElectiveList().clear();
		
		if(form.chkExtendSearch().getValue())
		{
			form.ccListOwner().setValue(null);
		}
		
		searchTargetElectiveList(form.chkExtendSearch().getValue());
		enableTransfer();
	}

	private void searchTargetElectiveList(boolean extendedSearch) 
	{
		if (!form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagementIsNotNull())
			return;
		
		ElectiveListConfigurationLiteVoCollection voCollElect = null;
		
		if(!extendedSearch)
		{
			voCollElect = domain.listElectiveListConfiguration(form.qmbService().getValue().getSpecialtyIsNotNull()?form.qmbService().getValue().getSpecialty():null, null, form.ccListOwner().getValue() != null ? "(" + form.ccListOwner().getValue().getIMosHcpId() + ")" : null , enteredTargetText);
		}
		else
		{
			voCollElect = domain.listOtherElectiveListConfiguration(form.qmbService().getValue(), form.qmbService().getValue() != null ? form.qmbService().getValue().getSpecialty() : null, null, enteredTargetText);
		}
		
		if (voCollElect==null || voCollElect.size() == 0)
		{
			engine.showMessage("No Elective lists found for the current search options.");
			return;
		}

		//add other el's except current
		for (int i = 0; i < voCollElect.size(); i++)
		{
			if (!voCollElect.get(i).getID_ElectiveListConfiguration().equals(form.qmbElectiveListName().getValue().getID_ElectiveListConfiguration()))
				form.qmbTargetElectiveList().newRow(voCollElect.get(i), voCollElect.get(i).getWaitingListName());
		}

		if (form.qmbTargetElectiveList().size() == 1)
		{
			form.qmbTargetElectiveList().setValue(voCollElect.get(0));
		}
		else
		{
			form.qmbTargetElectiveList().showOpened();	
		}
	}

	protected void onChkExtendSearchValueChanged() throws PresentationLogicException 
	{ 
		form.ccListOwner().setEnabled(!form.chkExtendSearch().getValue());
		
		if(form.chkExtendSearch().getValue())
		{			
			form.ccListOwner().setValue(null);			
		}
		
		if (form.qmbTargetElectiveList().getValue() != null)
		{
			form.qmbTargetElectiveList().clear();
			form.qmbTargetElectiveList().setValue(null);
		}
			
		
		enableTransfer();
	}

	
	protected void onCcListOwnerValueChanged()
			throws PresentationLogicException 
	{
		form.qmbTargetElectiveList().clear();
		form.qmbTargetElectiveList().setValue(null);
	}

}
