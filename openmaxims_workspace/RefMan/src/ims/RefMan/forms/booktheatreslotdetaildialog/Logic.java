// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.booktheatreslotdetaildialog;

import ims.admin.vo.ElectiveListConfigurationVoCollection;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListElectiveTCIVo;
import ims.RefMan.vo.PatientElectiveListNotesVo;
import ims.RefMan.vo.PatientElectiveListNotesVoCollection;
import ims.RefMan.vo.PatientElectiveListVo;
import ims.RefMan.vo.PatientElectiveListVoCollection;
import ims.RefMan.vo.ReferralERODForBookTheatreVo;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.clinical.vo.lookups.AnaestheticType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.lookups.Sex;
import ims.core.vo.lookups.WaitingListStatus;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.lookups.ElectiveListReason;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.WindowParam;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPFullVo;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.SessionParentChildSlotRefVoCollection;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.TheatreProcedureLiteVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int REASONABLE_DAYS_LIMIT = 21;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		//for ICP save
		if(args != null)
		{
			//WDEV-18396
			if(args.length > 0)
			{
				if(args[0] instanceof CareContextRefVo)
					form.getLocalContext().setReferralCareContext((CareContextRefVo) args[0]);
			}
			
			if (args.length > 1 && args[1] instanceof Boolean)
				form.getLocalContext().setElective((Boolean) args[1]);
			
			if (args.length > 2 && args[2] instanceof IGenericItem && args[2]!=null)
			{
				form.cmbProcedure().newRow((ProcedureLiteVo)args[2], ((ProcedureLiteVo)args[2]).getProcedureName());
				form.cmbProcedure().setValue((ProcedureLiteVo)args[2]);
			}
			
		}
		
		form.getLocalContext().setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));//WDEV-18084
		initialise();
		open();
	}
	private void open()
	{		
		if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogDataIsNotNull())
		{
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAppointmentDurationIsNotNull())
				form.intApptLength().setValue(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAppointmentDuration());
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlotIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getStartTimeIsNotNull())
				form.lblApptTime().setValue(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getStartTime().toString());
			
			//WDEV-18084
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlotIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getSessDateTimeIsNotNull())
				form.dteToComeIn().setValue(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getSessDateTime().getDate());
			
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebookIsNotNull())
			{
				//display previous appointment data on a rebook
				BookingAppointmentTheatreVo voAppt = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getTheatreApptToRebook();
				form.intApptLength().setValue(voAppt.getCustomProcedureDuration());
				if(voAppt.getTheatreBookingIsNotNull())
				{
					form.getLocalContext().setReferralERODForRebook(domain.getReferralERODByAppointment(voAppt));
					
					form.cmbProcedure().setValue(voAppt.getTheatreBooking().getProcedure());
					cmbProcedureValueChanged();
					form.cmbAnaesType().setValue(voAppt.getTheatreBooking().getAnaestheticType());
					form.cmbListOwners().setValue(voAppt.getTheatreBooking().getConsultant());
					
					
					if(form.getLocalContext().getReferralERODForRebook() != null)
					{
						form.dteErod().setValue(form.getLocalContext().getReferralERODForRebook().getERODDate1());
						form.dteEROD2().setValue(form.getLocalContext().getReferralERODForRebook().getERODDate2());
						form.chkErod().setValue(form.getLocalContext().getReferralERODForRebook().getERODDate1() != null);
					}
					
					//WDEV-18396
					if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective())
					{
						form.txtComments().setValue(voAppt.getComments());
					}
					else
					{
						form.txtCommentsNoEL().setValue(voAppt.getComments());
					}
				}	
							
			}
			//WDEV-18459
			if (form.getLocalContext().getReferralERODForRebook() == null && Boolean.TRUE.equals(form.getLocalContext().getHasTheatreEROD()) && form.getGlobalContext().RefMan.getReferralERODIsNotNull())
			{
				form.chkErod().setValue(form.getLocalContext().getHasTheatreEROD());
				form.dteErod().setValue(form.getGlobalContext().RefMan.getReferralEROD().getERODDate1());
				form.dteEROD2().setValue(Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective()) ? form.getGlobalContext().RefMan.getReferralEROD().getERODDate2() : null);
			}
			
			updateControlState();
		}
	}
	private void initialise()
	{		
		if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogDataIsNotNull())
		{
			//load Hcps for this Theatre Session
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSessionIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getListOwnersIsNotNull())
			{
				for(Session_ListOwnerVo voListOwner : form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getListOwners())
				{
					form.cmbListOwners().newRow(voListOwner.getHcp(), voListOwner.getHcp().toString());
				}				
				//WDEV-13344
				if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getConsultantToDefaultIsNotNull())
				{
					//WDEV-13793 - starts here
					HcpLiteVo hcp = null;
					IMos consultantToDefault = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getConsultantToDefault();
					
					if(consultantToDefault instanceof MedicLiteVo)
					{
						hcp = new HcpLiteVo(((MedicLiteVo)consultantToDefault).getID_Hcp(), ((MedicLiteVo)consultantToDefault).getVersion_Hcp());
					}
					else if(consultantToDefault instanceof HcpLiteVo)
					{
						hcp = (HcpLiteVo) consultantToDefault;
					}
					
					form.cmbListOwners().setValue(hcp);
					
					//WDEV-13793 - ends here
				}
			}
			//load procedures
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSessionIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getTheatreProceduresRemainingIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getTheatreProceduresRemaining().getProcedureDetailsIsNotNull())
			{
				for(TheatreProcedureLiteVo voProcedureLite : form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(voProcedureLite.getProcedureIsNotNull() && voProcedureLite.getProcedure().getProcedureNameIsNotNull())
						form.cmbProcedure().newRow(voProcedureLite.getProcedure(), voProcedureLite.getProcedure().getProcedureName());
				}
				//WDEV-13344
				if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefaultIsNotNull())
				{
					if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefault() instanceof ProcedureLiteVo)
					{
						form.cmbProcedure().setValue((ProcedureLiteVo) form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getProcedureToDefault());
						cmbProcedureValueChanged();
					}
				}
			}
			//load anaesthetictypes
			if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSessionIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getAnaestheticTypeIsNotNull())
			{
				for(int i=0;i<form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getAnaestheticType().size(); i++)
				{
					AnaestheticType lkpAnaes = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getAnaestheticType().get(i);
					form.cmbAnaesType().newRow(lkpAnaes, lkpAnaes.getText());
				}
				
				if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAnaestheticTypeToDefaultIsNotNull())
				{
					form.cmbAnaesType().setValue(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAnaestheticTypeToDefault());
					if(!engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE))
					{
						form.cmbAnaesType().setVisible(false); //hide the combo
						form.lblAnaestheticTypeText().setValue(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAnaestheticTypeToDefault().getText());
						form.lblAnaestheticTypeText().setVisible(true);
					}
				}
			}
		}
		
		form.getLocalContext().setHasTheatreEROD(domain.hasTheatreEROD(form.getGlobalContext().RefMan.getCatsReferral()));
		
		//WDEV-18396
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective())
		{
			BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
			//PatientElectiveListVo patientElectiveList = domain.getPatientElectiveListsOnFormOpen(form.getGlobalContext().RefMan.getCatsReferral(), voData.getSession()!=null ? voData.getSession().getService() : null, voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()): null, true,form.getLocalContext().getCatsReferral());
			
			PatientElectiveListVoCollection patElectiveListColl = domain.getPatientElectiveList(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().RefMan.getCatsReferral(),voData.getSession()!=null ? voData.getSession().getService() : null , form.cmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null, form.getLocalContext().getCatsReferral(),true);
			
			ElectiveListConfigurationVoCollection collElectiveListConfiguration = null;
			
			if (patElectiveListColl!=null && patElectiveListColl.size()>0)
			{
				form.getLocalContext().setPatientElectiveList(patElectiveListColl.get(0));
				form.getGlobalContext().RefMan.setSelectedWaitingListConfig(patElectiveListColl.get(0).getElectiveList());
			}
			else
			{	
				
				collElectiveListConfiguration =domain.getElectiveListConfigurationOnFormOpen( voData.getSession()!=null ? voData.getSession().getService() : null, null , voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null);
				
				if (collElectiveListConfiguration!=null && collElectiveListConfiguration.size()==1)
				{
					form.getGlobalContext().RefMan.setSelectedWaitingListConfig(collElectiveListConfiguration.get(0));
					form.htmElectiveListName().setHTML("<b>"+ form.getGlobalContext().RefMan.getSelectedWaitingListConfig().getWaitingListName() +"</b>" );
					
				}
				else if (collElectiveListConfiguration!=null && collElectiveListConfiguration.size()>1)
				{
					engine.open(form.getForms().RefMan.SelectElectiveListConfiguration, new Object[] {voData.getSession(), form.cmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null});
				}
					
			}
			
			populatePatientElectiveListFromData(form.getLocalContext().getPatientElectiveList());
			
		}
		
		if (Sex.MALE.equals(form.getGlobalContext().Core.getPatientShort().getSex()))
		{
			form.cmbElectiveListReason().removeRow(ElectiveListReason.MATERNITY);
		}
		
		//WDEV-18084
		populateWardCombo();
		updateControlState();
	}
	
	private void populateWardCombo()
	{
		form.cmbWard().clear();

		LocationLiteVoCollection wardsColl = domain.listWardsForCurrentLocation(domain.getCurrentLocation());

		if(wardsColl != null)
		{
			for(int x = 0; x < wardsColl.size(); x++)
			{
				addWard(wardsColl.get(x));
			}
		}
		
		if(wardsColl.size() == 1)
		{
			form.cmbWard().setValue(wardsColl.get(0));
		}
		
	}
		
	private void addWard(LocationLiteVo ward) 
	{
		if(ward == null)
			return;

		form.cmbWard().newRow(ward, ward.getName());
	}
	private void updateControlState()
	{
		//WDEV-18459
		boolean enabledERODControls = !(Boolean.TRUE.equals(form.getLocalContext().getHasTheatreEROD()) && form.getLocalContext().getReferralERODForRebook() == null);
		
		form.chkErod().setEnabled(enabledERODControls);
		form.dteErod().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()) && enabledERODControls);
		form.dteEROD2().setEnabled(Boolean.TRUE.equals(form.chkErod().getValue()) && enabledERODControls);
		
		form.cmbAnaesType().setVisible(engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE) || !isAnaestheticTypeDefaulted());
		form.cmbAnaesType().setEnabled((engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE) || !isAnaestheticTypeDefaulted()) && form.getMode().equals(FormMode.EDIT));
		form.lblAnaestheticTypeText().setVisible(!engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE) || isAnaestheticTypeDefaulted());
		
		if((!engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE)  || isAnaestheticTypeDefaulted()) && form.cmbAnaesType().getValue() != null)
			form.lblAnaestheticTypeText().setValue(form.cmbAnaesType().getValue().getText());
		
		
		boolean enableTciControls = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && (form.getLocalContext().getPatientElectiveListIsNotMandatory() == null || Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveListIsNotMandatory())) && (form.getLocalContext().getPatientElectiveList() == null || (form.getLocalContext().getPatientElectiveList() != null && form.getLocalContext().getPatientElectiveList().getTCIDetails() == null));//WDEV-18396
		boolean enablePatientElectiveListControls =ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() &&  (form.getLocalContext().getPatientElectiveListIsNotMandatory() == null || Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveListIsNotMandatory())); //WDEV-18396
		
		//WDEV-18084
		form.cmbExceededReason().setVisible(enableTciControls);
		form.cmbExceededReason().setEnabled(form.dteToComeIn().getValue()!=null && form.dteToComeIn().getValue().isGreaterThan(form.getLocalContext().getCatsReferral().getReferralDetails().getEnd18WW()));
		form.cmbExceededReason().setRequired(form.cmbExceededReason().isEnabled() && form.cmbExceededReason().getVisible());
		
		form.lblToComeInDate().setVisible(enableTciControls);
		form.dteToComeIn().setVisible(enableTciControls);
		//form.lblToComeInTime().setVisible(enableTciControls);
		//form.timTCI().setVisible(enableTciControls);
		
		form.lblExceededReason().setVisible(enableTciControls);
		form.cmbExceededReason().setVisible(enableTciControls);
		
		form.lblWard().setVisible(enablePatientElectiveListControls || enableTciControls);
		form.cmbWard().setVisible(enablePatientElectiveListControls || enableTciControls);
		
		form.lblBed().setVisible(enablePatientElectiveListControls || enableTciControls);
		form.txtBed().setVisible(enablePatientElectiveListControls || enableTciControls);
		
		form.lblIntendedManagement().setVisible(enablePatientElectiveListControls);
		form.cmbIntendedManagement().setVisible(enablePatientElectiveListControls);
		
		form.lblElectiveListName().setVisible(enablePatientElectiveListControls);
		form.htmElectiveListName().setVisible(enablePatientElectiveListControls);
		form.imbSelectElectiveListConfig().setVisible(enablePatientElectiveListControls && form.cmbElectiveListReason().getValue()!=null); //WDEV-18396
		
		form.lblElectiveListReason().setVisible(enablePatientElectiveListControls);
		form.cmbElectiveListReason().setVisible(enablePatientElectiveListControls);
		
		form.lblTCINotes().setVisible(enableTciControls);
		form.txtTCINotes().setVisible(enableTciControls);
		
		form.lblComments().setVisible(enablePatientElectiveListControls);
		form.txtComments().setVisible(enablePatientElectiveListControls);
		
		form.lblCommentsNoEL().setVisible(!(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective()));
		form.txtCommentsNoEL().setVisible(!(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective()));
		
		//WDEV-18459 //WDEV-18459 
		//boolean isElective = ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective();
		//form.dteEROD2().setVisible(isElective);
		//form.lblERODDate2().setVisible(isElective);
	}
	/**
	 * @return
	 */
	private boolean isAnaestheticTypeDefaulted()
	{
		return (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogDataIsNotNull() && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getAnaestheticTypeToDefaultIsNotNull());
	}
	
	@Override
	protected void onBtnBookClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUI())
		{
			if(form.getLocalContext().getKPIMessageBoxId() != null || !kpiValidateNeeded())
			{
				if(form.getLocalContext().getApptInPastMessageBoxId() != null || !apptInThePastValidateNeeded())
				{
					doBooking(null);
				}
			}
		}	
	}

	private void doBooking(Boolean reasonableOffer)
	{
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();

		//Sch_Booking
		form.getLocalContext().setSch_Booking(form.getGlobalContext().Scheduling.getSch_BookingTheatre());
		Sch_BookingTheatreVo voSchBooking = form.getLocalContext().getSch_Booking();
		if(voSchBooking == null)
			voSchBooking = new Sch_BookingTheatreVo();
	
		voSchBooking.setPatient(form.getGlobalContext().Core.getPatientShort());
		voSchBooking.setBookingComments(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() ? form.txtComments().getValue() : form.txtCommentsNoEL().getValue());//WDEV-18396
		
		//Booking_Appointment
		BookingAppointmentTheatreVo voTheatreAppt = voData.getTheatreApptToRebook();
		if(voTheatreAppt == null)
			voTheatreAppt = new BookingAppointmentTheatreVo();
		else
			voTheatreAppt = domain.getBookingTheatreAppointment(voTheatreAppt);
			
		voTheatreAppt.setPatient(form.getGlobalContext().Core.getPatientShort());
		voTheatreAppt.setParentChildSlot(voData.getParentChildSlot());
		voTheatreAppt.setCustomProcedureDuration(form.intApptLength().getValue());
		voTheatreAppt.setAppointmentTCITime(form.timTCI().getValue());
		if(voData.getParentChildSlotIsNotNull())
		{
			voTheatreAppt.setApptStartTime(voData.getParentChildSlot().getStartTime());
			voTheatreAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(voData.getParentChildSlot().getStartTime() , form.intApptLength().getValue()));
			voTheatreAppt.setParentChildSlot(voData.getParentChildSlot());
		}
		if(form.chkErod().getValue() == true)
			voTheatreAppt.setEarliestOfferedDate(form.dteErod().getValue());
		if(voData.getSessionIsNotNull())
		{
			voTheatreAppt.setAppointmentDate(voData.getSession().getSessionDate());
			voTheatreAppt.setSession(voData.getSession());
		}
		//Status and Status History
		populateStatus(voTheatreAppt);
				
		//TheatreBooking
		TheatreBookingLiteVo voBooking = voTheatreAppt.getTheatreBooking();
		if(voBooking == null)
			voBooking = new TheatreBookingLiteVo();
			
		voBooking.setConsultant(form.cmbListOwners().getValue());	
		if(voData.getSessionIsNotNull())
		{
			voBooking.setAnaestheticType(form.cmbAnaesType().getValue());
			voBooking.setConsultant(form.cmbListOwners().getValue());
			voBooking.setProcedure(form.cmbProcedure().getValue());
		}
		voTheatreAppt.setTheatreBooking(voBooking);
		
		if(form.getLocalContext().getCatsReferral() != null && form.getLocalContext().getCatsReferral().getJourney() != null)
		{
			voTheatreAppt.setPathwayClock(form.getLocalContext().getCatsReferral().getJourney().getCurrentClock());
		}
	
		BookingAppointmentTheatreVoCollection voCollAppts = voSchBooking.getAppointments();
		if(voCollAppts == null)
			voCollAppts = new BookingAppointmentTheatreVoCollection();
		else
			voCollAppts.clear();
		
		voCollAppts.add(voTheatreAppt);		
		voSchBooking.setAppointments(voCollAppts);
		voSchBooking.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		ReferralERODForBookTheatreVo erod = null;
		Boolean isDiagnostic = false;
		//WDEV-18459
		if(form.chkErod().getValue()) 
		{
			//  WDEV-18459 
			if (form.getGlobalContext().RefMan.getReferralEROD() == null || (form.getGlobalContext().RefMan.getReferralERODIsNotNull() && form.getGlobalContext().RefMan.getReferralEROD().getAppointment() == null) || (form.getGlobalContext().RefMan.getReferralERODIsNotNull() && form.getGlobalContext().RefMan.getReferralEROD().getAppointmentIsNotNull() && form.getLocalContext().getReferralERODForRebookIsNotNull()))
			{
				isDiagnostic = form.cmbElectiveListReason().getVisible() && ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) ? true : false;
				erod = createReferralEROD(voTheatreAppt, reasonableOffer, isDiagnostic);
			}
		}
		
		String[] arrErrors = voSchBooking.validate(getUIValidation());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		if(erod != null)
		{
			arrErrors = erod.validate();
			if(arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
		}
		
		if(form.getLocalContext().getReasonableDateMessageBoxId() == null && form.getGlobalContext().RefMan.getReferralEROD() == null && Boolean.FALSE.equals(form.getLocalContext().getHasTheatreEROD()))
		{
			String warnings = checkReasonableDate();
			if(warnings != null && warnings.length() > 0)
			{
				form.getLocalContext().setReasonableDateMessageBoxId(engine.showMessage(warnings, "", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;
			}
		}
		
		SessionParentChildSlotRefVoCollection voCollChildSlots = null;
		if(voData.getSessionIsNotNull() && voTheatreAppt.getParentChildSlotIsNotNull())
		{
			voCollChildSlots = voData.getSession().calculateChildSlots(voTheatreAppt.getParentChildSlot(), form.intApptLength().getValue());
			if(!engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			{
				if(voCollChildSlots == null)
				{
					engine.showMessage("Not enough Slots available to Book into");
					return;
				}
			}
		}
		
		//------------------
		//wdev-13765
		TheatreType thetreType = null;
		if(voData != null && voData.getSessionIsNotNull())
		{
			thetreType = voData.getSession().getTheatreType();
		}
		//------------
		
		//WDEV-18084
		PatientElectiveListVo patElectiveListToSave = null;
		if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && form.getLocalContext().getPatientElectiveListIsNotMandatory() == null || Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveListIsNotMandatory())) //WDEV-18396
		{
			patElectiveListToSave = populatePatElectiveListDataFromScreen(form.getLocalContext().getPatientElectiveList(),voTheatreAppt);
			String[] patElectiveListErrors = patElectiveListToSave.validate();
			if(patElectiveListErrors != null)
			{
				engine.showErrors(patElectiveListErrors);
				return;
			}
			
			//WDEV-18396
			if (patElectiveListToSave.getID_PatientElectiveList()==null && !ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) && domain.getPatientElectiveList(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().RefMan.getCatsReferral(),null , null,null, form.getLocalContext().getCatsReferral(),true)!=null)
			{
				engine.showMessage("A Non Diagnostic Patient Elective List already exist for current Care Context! ");
				return;
			}
		}
		
		try
		{			
			voSchBooking = domain.saveTheatreBooking(voSchBooking, form.getGlobalContext().RefMan.getCatsReferral(), voCollChildSlots, voData.getParentChildSlot(),thetreType, erod,patElectiveListToSave);   //wdev-13765 //WDEV-18084
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// WDEV-13222
			// In case of a stale message close the form as a successful operation
			// so that parent form refreshes
			engine.close(DialogResult.OK);
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		if(!saveICP(voSchBooking))
			return;
		
		//WDEV-8295		
		form.getGlobalContext().Scheduling.setAppointmentIds(getApptIds(voSchBooking));	
		form.getGlobalContext().RefMan.setReferralEROD(null); //WDEV-18459
		engine.open(form.getForms().Scheduling.PrintAppointment);
	}

	private String checkReasonableDate()
	{
		String warnings = "";
		int numberOfDates = 0;
		
		if(form.dteErod().getValue() != null && form.dteErod().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
		{
			warnings += "'Earliest Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
			numberOfDates++;
		}
		
		if(form.dteEROD2().getValue() != null && form.dteEROD2().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
		{
			warnings += (warnings.length() > 0 ? "\n" : "") + "'Second Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
			numberOfDates++;
		}
		
		if(warnings.length() > 0)
		{
			warnings += "\nDid the patient confirm " + (numberOfDates == 2 ? "these dates" : "this date") + "?";
		}
		
		return warnings.length() > 0 ? warnings : null;
	}
	
	//WDEV-18084
	private PatientElectiveListVo populatePatElectiveListDataFromScreen(PatientElectiveListVo patientElectiveListVo, BookingAppointmentTheatreVo voTheatreAppt)
	{
		if (patientElectiveListVo==null)
			patientElectiveListVo = new PatientElectiveListVo();
		else
			patientElectiveListVo=(PatientElectiveListVo) patientElectiveListVo.clone();
		
		//WDEV-18396
		if ( patientElectiveListVo!=null && patientElectiveListVo.getElectiveListStatus()!=null && patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()!=null && WaitingListStatus.SUSPENDED.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()))
		{
			for (int i=0;patientElectiveListVo.getSuspensionsIsNotNull() && patientElectiveListVo.getSuspensions().size()>0 && i<patientElectiveListVo.getSuspensions().size();i++)
			{
				if (patientElectiveListVo.getSuspensions().get(i)!=null && patientElectiveListVo.getSuspensions().get(i).getEndDate()==null)
				{
					patientElectiveListVo.getSuspensions().get(i).setEndDate(new Date());
				}
			}
			
			
		}
		
		patientElectiveListVo.setElectiveList(form.getGlobalContext().RefMan.getSelectedWaitingListConfig());
		patientElectiveListVo.setElectiveListReason(form.cmbElectiveListReason().getValue());
		
		if (patientElectiveListVo.getElectiveListStatus() == null || WaitingListStatus.REQUIRES_TCI.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.SUSPENDED.equals(patientElectiveListVo.getElectiveListStatus().getElectiveListStatus()))
		{
			ElectiveListStatusVo status = populateElectiveListStatus(WaitingListStatus.TCI_GIVEN);
			patientElectiveListVo.setElectiveListStatus(status);
			
			if(patientElectiveListVo.getElectiveListStatusHistory() == null)
				patientElectiveListVo.setElectiveListStatusHistory(new ElectiveListStatusVoCollection());
			
			patientElectiveListVo.getElectiveListStatusHistory().add(status);
		}
		
		patientElectiveListVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		patientElectiveListVo.setReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		patientElectiveListVo.setEpisodeOfCare(form.getLocalContext().getCatsReferral().getCareContext().getEpisodeOfCare());
		
		patientElectiveListVo.setConsultant(domain.getHCPMin( (HcpRefVo) form.cmbListOwners().getValue()));
		patientElectiveListVo.setWard(form.cmbWard().getValue());
		patientElectiveListVo.setBed(form.txtBed().getValue());
		
		patientElectiveListVo.setDateOnList(new Date());
		
		patientElectiveListVo.setOperativeProcedureStatus(true);
		patientElectiveListVo.setElectiveAdmissionType(ElectiveAdmissionType.BOOKED_TYPE12);
		patientElectiveListVo.setIntendedManagement(form.cmbIntendedManagement().getValue());
		
		patientElectiveListVo.setAnticipatedStay(form.cmbProcedure().getValue().getLOS());
		patientElectiveListVo.setPrimaryProcedure(form.cmbProcedure().getValue());
		patientElectiveListVo.setProcedureDescription(form.cmbProcedure().getValue()!=null ? form.cmbProcedure().getValue().getProcedureName() : null);//WDEV-18489
		
		if (form.txtTCINotes().getValue()!=null)
		{
			PatientElectiveListNotesVoCollection collNotes=patientElectiveListVo.getNotes();
			if (collNotes==null)
				collNotes=new PatientElectiveListNotesVoCollection();
			
			collNotes.add(populateElectiveListNotes());
			
			patientElectiveListVo.setNotes(collNotes);
		}
		
		if( patientElectiveListVo.getTCIDetails() == null)
		{
			patientElectiveListVo.setTCIDetails(populatePatientElectiveListTCI(patientElectiveListVo, voTheatreAppt));
			patientElectiveListVo.setRequiresTCIBy(null);	//wdev-18419
		}
		else if (patientElectiveListVo.getTCIDetails() != null && (patientElectiveListVo.getTCIDetails().getAppointment()==null || (patientElectiveListVo.getTCIDetails().getAppointment()!=null && Status_Reason.CANCELLED.equals(patientElectiveListVo.getTCIDetails().getAppointment().getApptStatus()))))//WDEV-18490
		{
			patientElectiveListVo.setTCIDetails(populatePatientElectiveListTCI(patientElectiveListVo, voTheatreAppt));
			patientElectiveListVo.getTCIDetails().setAppointment(voTheatreAppt);
		}
			
		if (form.getLocalContext().getCatsReferral().getReferralDetails()!=null && form.getLocalContext().getCatsReferral().getReferralDetails().getInterpreterRequired()!=null)
		{
			patientElectiveListVo.setInterpretatorRequired(YesNo.YES.equals(form.getLocalContext().getCatsReferral().getReferralDetails().getInterpreterRequired()) ? true : (YesNo.NO.equals(form.getLocalContext().getCatsReferral().getReferralDetails().getInterpreterRequired()) ? false : null));
		}
		
		if (form.getLocalContext().getCatsReferral().getReferralDetails()!=null && form.getLocalContext().getCatsReferral().getReferralDetails().getInterpreterRequired()!=null)
		{
			patientElectiveListVo.setTransportRequired(YesNo.YES.equals(form.getLocalContext().getCatsReferral().getReferralDetails().getTransportRequired()) ? true : (YesNo.NO.equals(form.getLocalContext().getCatsReferral().getReferralDetails().getTransportRequired()) ? false : null));
		}
		
		patientElectiveListVo.setTransport(form.getLocalContext().getCatsReferral().getReferralDetails()!=null ? form.getLocalContext().getCatsReferral().getReferralDetails().getTransport() : null);
		patientElectiveListVo.setPathwayClock(!ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) && form.getLocalContext().getCatsReferral().getJourney()!=null ? form.getLocalContext().getCatsReferral().getJourney().getCurrentClock() : null);
		
		return patientElectiveListVo;
	}
	
	//WDEV-18084
	private PatientElectiveListNotesVo populateElectiveListNotes()
	{
		PatientElectiveListNotesVo notes = new PatientElectiveListNotesVo();
		notes.setAuthoringDateTime(new Date());
		
		Object mos = domain.getMosUser();
		if (mos !=null && mos instanceof MemberOfStaffLiteVo)
		{
			notes.setAuthoringUser((MemberOfStaffLiteVo) mos);
		}
		notes.setNotes(form.txtTCINotes().getValue());
		
		return notes;
	}
	
	//WDEV-18084
	private PatientElectiveListElectiveTCIVo populatePatientElectiveListTCI(PatientElectiveListVo patientElectiveListVo, BookingAppointmentTheatreVo voTheatreAppt)
	{
		
		PatientElectiveListElectiveTCIVo tciDet = patientElectiveListVo.getTCIDetails();
		if (tciDet == null)
		{
			tciDet = new PatientElectiveListElectiveTCIVo();
			tciDet.setDateTCIOffered(new Date());
			tciDet.setAppointment(voTheatreAppt);
			tciDet.setTCIDate(form.dteToComeIn().getValue());
		}
		
		tciDet.setTCITime(form.timTCI().getValue());
		tciDet.setComments(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() ? form.txtComments().getValue() : form.txtCommentsNoEL().getValue()); //WDEV-18396
		tciDet.setKPIExceededReason(form.cmbExceededReason().getValue());
		tciDet.setSession(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession());
		tciDet.setTCIWard(form.cmbWard().getValue());
		tciDet.setTCIHospital(getParentHospitalLocation(form.cmbWard().getValue())); //WDEV-18656
		tciDet.setTCIBed(form.txtBed().getValue());
		tciDet.setTCIConsultant((HcpLiteVo) form.cmbListOwners().getValue());
		tciDet.setIsActive(true);
		tciDet.setAppointment(voTheatreAppt);
		return tciDet;
	}
	//WDEV-18656
	private LocationLiteVo getParentHospitalLocation(LocationLiteVo location)
	{
		return domain.getParentHospitalLocation(location);
		
	}
	
	//WDEV-18084
	private ElectiveListStatusVo populateElectiveListStatus(WaitingListStatus status)
	{
		ElectiveListStatusVo electiveListStatus = new ElectiveListStatusVo();
		
		electiveListStatus.setElectiveListStatus(status); 
		electiveListStatus.setStatusDateTime(new DateTime());
		
		Object mos = domain.getMosUser();
		if (mos !=null && mos instanceof MemberOfStaffLiteVo)
		{
			electiveListStatus.setAuthoringUser((MemberOfStaffLiteVo) mos);
		}
		return electiveListStatus;
	}
	
	private ReferralERODForBookTheatreVo createReferralEROD(BookingAppointmentTheatreVo voTheatreAppt, Boolean reasonableOffer, Boolean isDiagnostic)
	{
		ReferralERODForBookTheatreVo erod = null;
		
		//  WDEV-18459 
		if (form.getGlobalContext().RefMan.getReferralERODIsNotNull() && form.getGlobalContext().RefMan.getReferralEROD().getAppointment() == null && form.getLocalContext().getReferralERODForRebook() == null)
		{	
			erod = new ReferralERODForBookTheatreVo(form.getGlobalContext().RefMan.getReferralEROD().getID_ReferralEROD(), form.getGlobalContext().RefMan.getReferralEROD().getBoVersion());
		}
	
		if(form.getLocalContext().getReferralERODForRebook() != null)
		{	
			erod = new ReferralERODForBookTheatreVo(form.getLocalContext().getReferralERODForRebook().getID_ReferralEROD(), form.getLocalContext().getReferralERODForRebook().getBoVersion());
		}
		
		if(erod == null)
			erod = new ReferralERODForBookTheatreVo();
		
		erod.setERODDate1(form.dteErod().getValue());
		erod.setERODDate2(form.dteEROD2().getValue());
		
		erod.setPatAvailFromDate(voTheatreAppt != null ? voTheatreAppt.getAppointmentDate() : null);
		
		if (isDiagnostic)
			erod.setERODType(ERODType.DIAGNOSTIC);
		else
			erod.setERODType(ERODType.ELECTIVE);
		erod.setAppointment(voTheatreAppt);
		erod.setReasonableOffer(reasonableOffer);
		erod.setIsActive(true);
		
		return erod;
	}
	
	public java.util.ArrayList<Integer> getApptIds(Sch_BookingTheatreVo voBooking)
	{
		if(voBooking.getAppointments() == null || voBooking.getAppointments().size() == 0)
			return null;
		
		java.util.ArrayList<Integer> ids = new java.util.ArrayList<Integer>();
		for(int i=0;i<voBooking.getAppointments().size();i++)
			ids.add(voBooking.getAppointments().get(i).getID_Booking_Appointment());
		
		return ids;
	}
	
	private boolean saveICP(Sch_BookingTheatreVo voBooking)
	{
		//if no CareContext we cant saveICP
		if(form.getLocalContext().getReferralCareContext() == null)
			return false;
		
		PatientICPFullVo voICP = domain.getPatientICP(form.getLocalContext().getReferralCareContext());
			
		if  (voICP != null)
		{
			Booking_AppointmentRefVoCollection voApptsColl = voICP.getAppointments();
			if (voApptsColl == null)
				voApptsColl = new Booking_AppointmentRefVoCollection();
	
			BookingAppointmentTheatreVoCollection voCollBookAppointments = voBooking.getAppointments();
				
			for (int i = 0; i < voCollBookAppointments.size(); i++)
				voApptsColl.add(voCollBookAppointments.get(i));
			
			voICP.setAppointments(voApptsColl);
				
			String[] strErr = voICP.validate();
			if (strErr != null)
			{
				engine.showErrors(strErr);
				return false;
			}
	
			try 
			{
				domain.savePatientICP(voICP);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				form.setMode(FormMode.VIEW);
				return false;
			}
		}
		
		return true;
	}

	
	private void populateStatus(BookingAppointmentTheatreVo voTheatreAppt)
	{
		voTheatreAppt.setApptStatus(Status_Reason.BOOKED);
		
		voTheatreAppt.setCurrentStatusRecord(new Appointment_StatusVo());
		voTheatreAppt.getCurrentStatusRecord().setApptDate(voTheatreAppt.getAppointmentDate());
		voTheatreAppt.getCurrentStatusRecord().setApptTime(voTheatreAppt.getApptStartTime());
		voTheatreAppt.getCurrentStatusRecord().setEarliestOfferedDate(form.dteErod().getValue());
		voTheatreAppt.getCurrentStatusRecord().setStatus(Status_Reason.BOOKED);
		voTheatreAppt.getCurrentStatusRecord().setStatusChangeDateTime(new DateTime());
		voTheatreAppt.getCurrentStatusRecord().setStatusReason(Status_Reason.BOOKED);
		
		if(voTheatreAppt.getApptStatusHistory() == null)
			voTheatreAppt.setApptStatusHistory(new Appointment_StatusVoCollection());
		
		voTheatreAppt.getApptStatusHistory().add(voTheatreAppt.getCurrentStatusRecord());
	}
	private String[] getUIValidation()
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.intApptLength().getValue() == null)
			errors.add("'Appointment Length' is mandatory");
		if(form.cmbProcedure().getValue() == null)
			errors.add("'Procedure' is mandatory");
		if(form.cmbListOwners().getValue() == null)
			errors.add("'Consultant' is mandatory");
		
		if (form.timTCI().isVisible())
		{
			if (form.timTCI().getValue() == null)
				errors.add("'To Come in Time' is mandatory");
			else if (form.dteToComeIn().isVisible() && form.dteToComeIn().getValue() == null) //WDEV-18396 
				errors.add("'To Come in Date' is mandatory");
			//WDEV-18357
			else if (form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null && form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot() != null 
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getStartTime() != null 
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession() != null 
					&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getSessionDate() != null)
				{
					Date sessionDate = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getSessionDate();
					Time appTime = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getParentChildSlot().getStartTime();

					//WDEV-18396 
					if (form.dteToComeIn().isVisible() && (form.dteToComeIn().getValue().isGreaterThan(sessionDate) || (form.dteToComeIn().getValue().equals(sessionDate) && form.timTCI().getValue().isGreaterThan(appTime))))
						errors.add("To Come in Date/Time cannot be after Appointment Date/Time");
					else if (form.timTCI().getValue().isGreaterThan(appTime))
    					errors.add("'To Come in Time' cannot be after 'Appointment Time'");
				}
		}
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;	
	}
	
	private boolean apptInThePastValidateNeeded()
	{
		boolean isValidationNeeded = false;
		if(ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue())
		{
			if(isApptInthePast())
			{
				form.getLocalContext().setApptInPastMessageBoxId(engine.showMessage("The selected date of the appointment is in the past. Do you wish to continue to book the appointment", "Booking Historical Appointment?", MessageButtons.YESNO));
				isValidationNeeded = true;
			}
		}
		
		return isValidationNeeded;
	}

	private boolean isApptInthePast()
	{
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		voData.getSession().getSessionDate();
	
		if(voData.getSessionIsNotNull() && voData.getSession().getSessionDateIsNotNull())
		{
			if(voData.getSession().getSessionDate().isLessThan(new Date()))
				return true;
		}
			
		return false;
	}

	private boolean kpiValidateNeeded()
	{	
		boolean isValidationNeeded = false;
		
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if(voData != null && voData.getKPIDateIsNotNull() && voData.getSessionIsNotNull() && voData.getSession().getSessionDateIsNotNull())
		{
			if(voData.getSession().getSessionDateIsNotNull() && voData.getSession().getSessionDate().isGreaterThan(voData.getKPIDate()))
			{
				form.getLocalContext().setKPIMessageBoxId(engine.showMessage("Appointment Date is outside the KPI date,\nDo you want to continue?", "Warning", MessageButtons.YESNO));
				isValidationNeeded = true;
			}		
		}
		return isValidationNeeded;
	}
	
	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>(); 
		if(form.intApptLength().getValue() == null)
			errors.add("'Appointment Length' is mandatory");
		if(form.cmbProcedure().getValue() == null)
			errors.add("'Procedure' date is mandatory");
		if(form.cmbListOwners().getValue() == null)
			errors.add("'Consultant' is mandatory");
		if(form.timTCI().isVisible() && form.timTCI().getValue() == null)
			errors.add("'To Come in Time' is mandatory");
		
		//WDEV-18396
		//WDEV-18084
		if(form.dteToComeIn().isVisible() && form.dteToComeIn().getValue() == null)
			errors.add("'To Come in Date' is mandatory");
		
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && (form.getLocalContext().getPatientElectiveListIsNotMandatory() == null || Boolean.FALSE.equals(form.getLocalContext().getPatientElectiveListIsNotMandatory())) && form.getGlobalContext().RefMan.getSelectedWaitingListConfig() == null)
		{
			errors.add("'Elective list Name' is mandatory");
		}
		
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && form.cmbIntendedManagement().getValue()==null)
		{
			errors.add("'Intended Management' is mandatory");
		}
		
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && form.cmbExceededReason().getValue()==null && form.cmbExceededReason().isRequired())
		{
			errors.add("'Exceeded Reason' is mandatory");
		}
		
		if(form.chkErod().getValue())
		{
			if(form.dteErod().getValue() == null)
			{
				errors.add("'Earliest Date Offered' is mandatory");
			}
			
			if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && form.dteEROD2().isVisible() &&  form.dteEROD2().getValue() == null)
			{
				errors.add("'Second Date Offered' is mandatory");
			}
		}
		
		if(form.dteErod().getValue() != null && form.dteEROD2().isEnabled()  && form.dteEROD2().getValue() != null && form.dteErod().getValue().isGreaterOrEqualThan(form.dteEROD2().getValue()))
		{
			errors.add("'Second Date Offered' must be greater than 'Earliest Date Offered'");
		}
		
		if (form.getLocalContext().getReferralERODForRebook() == null && form.dteErod().isEnabled() && form.dteErod().getValue() != null && new Date().isGreaterThan(form.dteErod().getValue()))
		{
			errors.add("'Earliest Date Offered' must be greater than or equal to Today");
		}
		
		//WDEV-13229
		String message = allowBooking(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession(), form.cmbProcedure().getValue());
		if(message != null)
			errors.add(message);
		
		String[] arrErrors = errors.size() > 0 ? errors.toArray(new String[0]) : null;	
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		return true;
	}
	
	//WDEV-13229
	private String allowBooking(SessionTheatreVo session, ProcedureLiteVo voProcedure)
	{
		//if we have an overbooking right we disregard all the checks
		if(engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			return null;
		
		if(session != null && voProcedure != null)
		{
			if(session.getTheatreProceduresRemainingIsNotNull())
			{
				//if the procedure is limited and the number of procedures left is 0
				for(TheatreProcedureLiteVo voTheatreProc : session.getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(voTheatreProc.getProcedure().equals(voProcedure))
					{
						if(voTheatreProc.getIsLimitedIsNotNull() && voTheatreProc.getIsLimited() && voTheatreProc.getNumberOfProceduresLeftIsNotNull() && voTheatreProc.getNumberOfProceduresLeft() == 0)
							return "Limit has been reached for this procedure.";
					}
				}
			}
		}
		return null;
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onChkErodValueChanged() throws PresentationLogicException
	{
		if(form.chkErod().getValue() == false)
		{
			form.dteErod().setValue(null);
			form.dteEROD2().setValue(null);
		}
		
		updateControlState();
	}
	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getKPIMessageBoxIdIsNotNull())
		{
			if(form.getLocalContext().getKPIMessageBoxId().equals(messageBoxId))
			{
				if(result.equals(DialogResult.YES))
				{
					if(!apptInThePastValidateNeeded())
						doBooking(null);
				}
				else
				{
					form.getLocalContext().setKPIMessageBoxId(null);
				}
			}
		}
		if(form.getLocalContext().getApptInPastMessageBoxIdIsNotNull())
		{
			if(form.getLocalContext().getApptInPastMessageBoxId().equals(messageBoxId))
			{
				if(result.equals(DialogResult.YES))
				{
					doBooking(null);
				}
				else
				{
					form.getLocalContext().setApptInPastMessageBoxId(null);
				}
			}
		}
		
		if(form.getLocalContext().getReasonableDateMessageBoxId() != null && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId)
		{
			Boolean reasonableOffer = null;
			if(DialogResult.YES.equals(result))
			{
				reasonableOffer = true;
			}
			else if(DialogResult.NO.equals(result))
			{
				reasonableOffer = false;
			}
			
			doBooking(reasonableOffer);	
			
			form.getLocalContext().setReasonableDateMessageBoxId(null);
		}
		
		//WDEV-18396
		if (form.getLocalContext().getConfirmCreateNewPatientElectiveListMessageBoxIDIsNotNull() && form.getLocalContext().getConfirmCreateNewPatientElectiveListMessageBoxID().equals(messageBoxId) && DialogResult.YES.equals(result))
		{
			clearElectiveListControls();
			form.htmElectiveListName().setHTML("<b>"+ form.getGlobalContext().RefMan.getSelectedWaitingListConfig().getWaitingListName() +"</b>" );
			form.getLocalContext().setPatientElectiveList(null);
			updateControlState();
			
		}
	}
	
	//WDEV-18396
	private void clearElectiveListControls()
	{
		form.timTCI().setValue(null);
		form.dteToComeIn().setValue(null);
		form.cmbWard().setValue(null);
		form.txtBed().setValue(null);
		form.cmbIntendedManagement().setValue(null);
		form.htmElectiveListName().setHTML("");
		form.txtTCINotes().setValue(null);
	}
	@Override
	protected void onCmbProcedureValueChanged() throws PresentationLogicException
	{
		cmbProcedureValueChanged();
		updateControlState();//WDEV-18084
	}
	/**
	 * 
	 */
	private void cmbProcedureValueChanged()
	{
		if(form.cmbProcedure().getValue() == null)
			return;
		
		Time tciTime = null;
		
		//form.getGlobalContext().RefMan.setSelectedWaitingListConfig(null); // WDEV-18396
		
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if(voData != null &&  voData.getParentChildSlotIsNotNull() && voData.getParentChildSlot().getStartTimeIsNotNull())
		{
			tciTime = (Time) voData.getParentChildSlot().getStartTime().clone();
			if(form.cmbProcedure().getValue().getTCILagTimeIsNotNull())
				tciTime.addMinutes(-form.cmbProcedure().getValue().getTCILagTime());
		}
	
		form.timTCI().setValue(tciTime);
		form.intApptLength().setValue(form.cmbProcedure().getValue().getDurationInMins());
		
		//WDEV-18084
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective() && form.getLocalContext().getPatientElectiveList()==null && voData!=null && voData.getSessionIsNotNull() && voData.getSession().getServiceIsNotNull() && form.cmbProcedure().getValue()!=null) //WDEV-18396
		{
			PatientElectiveListVoCollection patElectiveListColl = domain.getPatientElectiveList(form.getGlobalContext().Core.getPatientShort(),form.getGlobalContext().RefMan.getCatsReferral(),voData.getSession()!=null ? voData.getSession().getService() : null , form.cmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null, form.getLocalContext().getCatsReferral(),true);
			
			if (patElectiveListColl!=null && patElectiveListColl.size()==1)
			{
				if(patElectiveListColl.get(0) != null && (patElectiveListColl.get(0).getCanBeUsed() == null || Boolean.TRUE.equals(patElectiveListColl.get(0).getCanBeUsed())))
				{
					form.getLocalContext().setPatientElectiveList(patElectiveListColl.get(0));
					form.getGlobalContext().RefMan.setSelectedWaitingListConfig(patElectiveListColl.get(0).getElectiveList());
					populatePatientElectiveListFromData(form.getLocalContext().getPatientElectiveList());
				}
				else if(patElectiveListColl.get(0) != null && Boolean.FALSE.equals(patElectiveListColl.get(0).getCanBeUsed()))
				{
					form.getLocalContext().setPatientElectiveListIsNotMandatory(true);
				}
			}
			else
			{
				engine.open(form.getForms().RefMan.SelectElectiveListConfiguration, new Object[] {voData.getSession(), form.cmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null});
			}	
			
			form.htmElectiveListName().setHTML(form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getElectiveListIsNotNull() ? "<b>"+ form.getLocalContext().getPatientElectiveList().getElectiveList().getWaitingListName() +"</b>": null );
		}
		
		
	}
	
	//WDEV-18084
	private String getHCPId(Session_ListOwnerVoCollection listOwners)
	{
		StringBuffer idList=new StringBuffer();
		
		for (int i=0;i<listOwners.size();i++)
		{
			idList.append(listOwners.get(i).getHcp().getID_Hcp()+",");
			
		}
		
		if (idList!=null && idList.length()>0)
		{
			idList.deleteCharAt(idList.length()-1);
			idList.append(")");
			idList.insert(0, "(");
		}
		
		return idList.toString();
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV=18084
		if (formName.equals(form.getForms().RefMan.SelectElectiveListConfiguration))
		{
			if (result.equals(DialogResult.OK))
			{
				if (form.getGlobalContext().RefMan.getSelectedWaitingListConfigIsNotNull())
				{
					//WDEV-18396
					if (form.getLocalContext().getPatientElectiveListIsNotNull())
					{
						form.getLocalContext().setConfirmCreateNewPatientElectiveListMessageBoxID(engine.showMessage("Please confirm adding " + form.getGlobalContext().Core.getPatientShort().getName().toString() + " to " + form.getGlobalContext().RefMan.getSelectedWaitingListConfig().getWaitingListName(), "Confirmation message", MessageButtons.YESNO, MessageIcon.QUESTION, MessageDefaultButton.BUTTON1));
					}
					else
					{	
    					form.htmElectiveListName().setHTML("<b>"+ form.getGlobalContext().RefMan.getSelectedWaitingListConfig().getWaitingListName() +"</b>" );
    					form.getLocalContext().setElectiveListConfigurationWasSelectedFromDialog(true);
					}
					
				}
				else if (form.getGlobalContext().RefMan.getSelectedPatientElectiveListIsNotNull())
				{
					
					form.getLocalContext().setPatientElectiveList(form.getGlobalContext().RefMan.getSelectedPatientElectiveList());
					form.getGlobalContext().RefMan.setSelectedWaitingListConfig(form.getGlobalContext().RefMan.getSelectedPatientElectiveList().getElectiveList());
					form.getLocalContext().setElectiveListConfigurationWasSelectedFromDialog(false);
					populatePatientElectiveListFromData(form.getLocalContext().getPatientElectiveList());
					
				}
			}
			
			updateControlState();
			
			return ;
		}
		
		engine.close(DialogResult.OK);
	}
	
	private void populatePatientElectiveListFromData(PatientElectiveListVo patientElectiveList)
	{
		if (patientElectiveList==null)
			return;
		
		form.htmElectiveListName().setHTML("<b>"+ patientElectiveList.getElectiveList().getWaitingListName() +"</b>" );
		if (form.cmbWard().getValues().contains(patientElectiveList.getWard()))
		{
			form.cmbWard().setValue(patientElectiveList.getWard());
		}
		else if(patientElectiveList.getWard() != null)
		{
			form.cmbWard().newRow(patientElectiveList.getWard(), patientElectiveList.getWard().getName());
		}
		
		HcpLiteVo hcpLiteVo=patientElectiveList.getConsultant()!=null ? domain.getHCPLiteVo(patientElectiveList.getConsultant()): null;
		if (form.cmbListOwners().getValues().contains(hcpLiteVo))
		{
			form.cmbListOwners().setValue(hcpLiteVo);
		}
		else if(hcpLiteVo != null)
		{
			form.cmbListOwners().newRow(hcpLiteVo, hcpLiteVo.getIHcpName());
		}
		
		form.txtBed().setValue(patientElectiveList.getBed());
		form.cmbIntendedManagement().setValue(patientElectiveList.getIntendedManagement());
		form.cmbElectiveListReason().setValue(patientElectiveList.getElectiveListReason());
		//WDEV-18396
		if (ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && form.getLocalContext().getElective())
		{
			form.txtComments().setValue(patientElectiveList.getTCIDetails()!=null ? patientElectiveList.getTCIDetails().getComments(): null);
		}
		else
		{
			form.txtCommentsNoEL().setValue(patientElectiveList.getTCIDetails()!=null ? patientElectiveList.getTCIDetails().getComments(): null);
		}
		
		form.timTCI().setValue(patientElectiveList.getTCIDetails()!=null ? patientElectiveList.getTCIDetails().getTCITime(): null);
		form.dteToComeIn().setValue(patientElectiveList.getTCIDetails()!=null ? patientElectiveList.getTCIDetails().getTCIDate(): null);
		form.cmbExceededReason().setValue(patientElectiveList.getTCIDetails()!=null ? patientElectiveList.getTCIDetails().getKPIExceededReason(): null);
		
	}
	//WDEV-18084
	@Override
	protected void onImbSelectElectiveListConfigClick() throws PresentationLogicException
	{
		openDialog();	
	}
	private void openDialog()
	{
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		engine.open(form.getForms().RefMan.SelectElectiveListConfiguration, new Object[] {voData.getSession(), form.cmbProcedure().getValue(),voData.getSession()!=null && voData.getSession().getListOwners()!=null ? getHCPId(voData.getSession().getListOwners()) : null, form.cmbElectiveListReason().getValue(),form.getLocalContext().getPatientElectiveListIsNotNull()});//WDEV-18396
	}
	@Override
	protected void onDteToComeInValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}
	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException
	{
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			if(ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)
			{
				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");
				return;
			}
			
			String url = ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() + "&PID=" + form.getGlobalContext().Core.getPatientShort().getID_Patient();
			List<WindowParam> params = new ArrayList<WindowParam>(); 
			params.add(new WindowParam("FullScreen","false")); 
			params.add(new WindowParam("ToolBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("StatusBar","false")); 
			params.add(new WindowParam("MenuBar","false")); 
			params.add(new WindowParam("AddressBar","false")); 
			params.add(new WindowParam("Resizable","true")); 
			params.add(new WindowParam("Visible","true"));
			params.add(new WindowParam("Width","1440")); 
			params.add(new WindowParam("Height","1000")); 

			engine.openCustomUrlCloseableOnContextChange(url, params, true);
		}
	}
	
	//WDEV-18396
	@Override
	protected void onCmbElectiveListReasonValueChanged() throws PresentationLogicException
	{
		if (!Boolean.TRUE.equals(form.getLocalContext().getElectiveListConfigurationWasSelectedFromDialog()) && form.getLocalContext().getPatientElectiveListIsNotNull() && !ElectiveListReason.DIAGNOSTIC.equals(form.getLocalContext().getPatientElectiveList().getElectiveListReason()) && form.cmbElectiveListReason().getValue()!=null && ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()))
		{
			openDialog();	
		}
		else if (!Boolean.TRUE.equals(form.getLocalContext().getElectiveListConfigurationWasSelectedFromDialog()) && (form.getLocalContext().getPatientElectiveList()==null || (form.getLocalContext().getPatientElectiveListIsNotNull() && ElectiveListReason.DIAGNOSTIC.equals(form.getLocalContext().getPatientElectiveList().getElectiveListReason()))) && form.cmbElectiveListReason().getValue()!=null && !ElectiveListReason.DIAGNOSTIC.equals(form.cmbElectiveListReason().getValue()) )
		{
			openDialog();	
		}
		updateControlState();
	}
	@Override
	protected void onBtnResourceClick() throws PresentationLogicException
	{
		if(ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue() == null || ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue().length() == 0)
		{
			engine.showMessage("WARD_DASHBOARD_URL config flag was not set.");
			return;
		}
		
		String url = ConfigFlag.GEN.WARD_DASHBOARD_URL.getValue();
		List<WindowParam> params = new ArrayList<WindowParam>(); 
		params.add(new WindowParam("FullScreen","false")); 
		params.add(new WindowParam("ToolBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("StatusBar","false")); 
		params.add(new WindowParam("MenuBar","false")); 
		params.add(new WindowParam("AddressBar","false")); 
		params.add(new WindowParam("Resizable","true")); 
		params.add(new WindowParam("Visible","true"));
		params.add(new WindowParam("Width","1440")); 
		params.add(new WindowParam("Height","1000")); 

		engine.openCustomUrl(url, params, true);
	}
	
	
	
	
	
	
}
