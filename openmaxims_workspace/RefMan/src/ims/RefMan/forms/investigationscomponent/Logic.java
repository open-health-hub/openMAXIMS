// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3163.31063)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.investigationscomponent;

import ims.RefMan.forms.investigationscomponent.GenForm.grdResultsRow;
import ims.RefMan.forms.investigationscomponent.GenForm.grdResultsRowCollection;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.OrderInvestigationLiteVo;
import ims.ocrr.vo.OrderInvestigationLiteVoCollection;
import ims.ocrr.vo.OrderSpecimenLiteVo;
import ims.ocrr.vo.OrderSpecimenLiteVoCollection;
import ims.ocrr.vo.OrderedInvestigationStatusVo;
import ims.ocrr.vo.ResultDetailsForOrderInvestigationLiteVo;
import ims.ocrr.vo.lookups.OrderInvStatus;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface methods below here
	//-----------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * WDEV-13944
	 * Initialise component (decide to list investigation for selected referral or all referrals) 
	 */
	public void initialise(Boolean canViewConfidentialInvsResults, Boolean canViewConfidentialInvsOrdered, Boolean listForAllReferrals)
	{
		if(canViewConfidentialInvsOrdered == null || canViewConfidentialInvsResults == null)
			throw new CodingRuntimeException("mandatory params are null in method initialise");
		
		form.getLocalContext().setcanViewConfidentialInvsResults(canViewConfidentialInvsResults);
		form.getLocalContext().setcanViewConfidentialInvsOrdered(canViewConfidentialInvsOrdered);
		
		form.getLocalContext().setlistForAllReferrals(listForAllReferrals);
		
		populateScreenFromData(Boolean.TRUE.equals(form.getLocalContext().getlistForAllReferrals()));
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
	
	}

	/**
	 * WDEV-13944
	 * Function used to populate screen with investigation
	 * Component might be used in more than one form - that is why is populating based on parameter
	 */
	private void populateScreenFromData(boolean listForAllReferrals)
	{
		form.grdResults().getRows().clear();
		form.grdResults().setReadOnly(false);
		OrderInvestigationLiteVoCollection results;
		try
		{
			if (listForAllReferrals)
			{
				results = domain.listResults(form.getGlobalContext().Core.getPatientShort());
			}
			else
			{
				results = domain.listResults(form.getGlobalContext().RefMan.getCatsReferral());
			}
		}
		catch (DomainInterfaceException e)
		{
			updateTotal();
			engine.showMessage(e.getMessage());
			return;
		}

		if (results == null || results.size() == 0)
		{
			updateTotal();
			return;
		}
		Integer nNewResUnseenDays = new Integer(ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
		Date dateUnseen = new Date().addDay(-1 * nNewResUnseenDays.intValue());

		for (int x = 0; x < results.size(); x++)
		{
			addResult(results.get(x), dateUnseen);
		}

		cleanUpResultGrid();
		updateTotal();

	}

	private void updateTotal()
	{
		StringBuffer total = new StringBuffer();
		total.append("<b>");
		total.append("Total: ");
		total.append(form.grdResults().getRows().size());
		total.append("</b>");
		form.grdResults().setFooterValue(total.toString());
	}

	/**
	 * if there are any parent rows with no children - remove them ie. there are
	 * no viewable results for this specimen - WDEV-3953
	 */
	private void cleanUpResultGrid()
	{
		grdResultsRow pRow;
		for (int i = form.grdResults().getRows().size(); i > 0; i--)
		{
			pRow = form.grdResults().getRows().get(i - 1);
			if (pRow.getRows().size() == 0 && pRow.getColTestName() == null)
				form.grdResults().getRows().remove(i - 1);
		}
	}

	private void addResult(OrderInvestigationLiteVo orderInvestigationLiteVo, Date dateUnseen)
	{
		if (orderInvestigationLiteVo == null)
			return;

		// WDEV-3953
		/*boolean isConfidentialInv = orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getConfidentialTestIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getConfidentialTest().booleanValue();
		if (isConfidentialInv)
		{
			if (!form.getLocalContext().getcanViewConfidentialInvsOrdered())
			{
				return;
			}
			if (orderInvestigationLiteVo.getPathResultDetailsIsNotNull() || orderInvestigationLiteVo.getRadReportingDetailsIsNotNull())
			{
				if (!form.getLocalContext().getcanViewConfidentialInvsResults())
				{
					return;
				}
			}
		}*/

		grdResultsRow parentRow = createOrFindSpecimenGridRow(orderInvestigationLiteVo);
		if (parentRow == null)
			return;

		grdResultsRow row = null;
		if (parentRow.getColTestName() == null)
			row = parentRow;
		else
		{
			row = parentRow.getRows().newRow();
			row.setSelectable(false);
		}

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		if(orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull())
			res.setCategory(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getCategory());
		res.setOrderInvestigation(orderInvestigationLiteVo);
		row.setValue(res);
		
		row.setColResultDetails(orderInvestigationLiteVo.getResultDetails());

		// Test Name
		if (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getNameIsNotNull())
		{
			row.setColTestName(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getName());
		}

		// ABN
		// WDEV-16224 - modifications following OCS DFT model changes
		if (orderInvestigationLiteVo.getResultDetailsIsNotNull() && orderInvestigationLiteVo.getResultDetails().getPathologyResultDetailsIsNotNull())
		{
			for (int i=0; i<orderInvestigationLiteVo.getResultDetails().getPathologyResultDetails().size(); i++)
			{
				if (orderInvestigationLiteVo.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormalIsNotNull() && orderInvestigationLiteVo.getResultDetails().getPathologyResultDetails().get(i).getIsAbnormal().booleanValue())
				{
					row.setColABN(form.getImages().Core.CriticalError);
					row.setTooltipForColABN("Abnormal Result");
					break;
				}
			}
		}

		// Status
		if (orderInvestigationLiteVo.getOrdInvCurrentStatusIsNotNull() && orderInvestigationLiteVo.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull())
		{
			OrderInvStatus currStat = orderInvestigationLiteVo.getOrdInvCurrentStatus().getOrdInvStatus();

			Image image = currStat.getImage();
			String szTooltip = generateStatusTooltip(orderInvestigationLiteVo.getOrdInvCurrentStatus());

			if (orderInvestigationLiteVo.getRepDateTimeIsNotNull() && dateUnseen != null)
			{
				if (currStat.equals(OrderInvStatus.NEW_RESULT) || currStat.equals(OrderInvStatus.UPDATED_RESULT))
				{
					if (orderInvestigationLiteVo.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Unseen");
					}
				}
				else if (currStat.equals(OrderInvStatus.REVIEW))
				{
					if (orderInvestigationLiteVo.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						row.setBold(true);
						szTooltip = (szTooltip + "<br>Requires Attention");
					}
					else
						szTooltip = (szTooltip + "<br>" + OrderInvStatus.REVIEW.toString());
				}
			}
			row.setColStatus(image);
			row.setTooltipForColStatus(szTooltip);
			
			if(orderInvestigationLiteVo.getOrdInvCurrentStatusIsNotNull() && orderInvestigationLiteVo.getOrdInvCurrentStatus().getOrdInvStatusIsNotNull()
					&& (orderInvestigationLiteVo.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCEL_REQUEST)
							|| orderInvestigationLiteVo.getOrdInvCurrentStatus().getOrdInvStatus().equals(OrderInvStatus.CANCELLED)))
				row.setBackColor(ConfigFlag.UI.CANCELLED_INVESTIGATION_ROW_COLOUR.getValue());
			else
				row.setBackColor(parentRow.getBackColor());
			
			row.setReadOnly(false);
		}
	}

	private grdResultsRow createOrFindSpecimenGridRow(OrderInvestigationLiteVo orderInvestigationLiteVo)
	{
		if (orderInvestigationLiteVo == null)
			return null;
		OrderSpecimenLiteVoCollection specimenColl = orderInvestigationLiteVo.getSpecimen();

		// WDEV-16224 - Changes following modifications to OCS DFT model
		// This will create a new row for every specimen found
		
		OrderSpecimenLiteVo specimen = (specimenColl != null && specimenColl.size() > 0 ? specimenColl.get(0) : null);

		for (int x = 0; x < form.grdResults().getRows().size(); x++)
		{
			grdResultsRow subrow = form.grdResults().getRows().get(x);
			OrderInvestigationLiteVo rowValue = (OrderInvestigationLiteVo) subrow.getValue().getOrderInvestigation();
			
			if (rowValue != null && rowValue.getSpecimen() != null && rowValue.getSpecimen().size() > 0 && rowValue.getSpecimen().get(0).equals(specimen))
			{
				subrow = subrow.getRows().newRow();
				subrow.setBackColor(subrow.getParentRow().getBackColor());
				return subrow;
			}
		}

		GenForm.grdResultsRow row = form.grdResults().getRows().newRow();
		row.setExpanded(true);

		if (specimen == null || specimen.getSpecimenSource() == null)
		{
			row.setColSpecimen("[N/A]");
		}
		else
		{
			row.setColSpecimen(specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : ""));
			row.setTooltipForColSpecimen(specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : ""));
		}
		// Date and Time Display Flag
		if (orderInvestigationLiteVo.getDisplayFlagIsNotNull())
		{
			row.setColDateTimeImage(orderInvestigationLiteVo.getDisplayFlag().getImage());
			row.setTooltipForColDateTimeImage(orderInvestigationLiteVo.getDisplayFlag().getText());
		}

		// Date and Time
		if (orderInvestigationLiteVo.getDisplayDateTimeIsNotNull())
		{
			row.setColDateTime(orderInvestigationLiteVo.getDisplayDateTime().toString());
		}

		if (orderInvestigationLiteVo.getResultStatusIsNotNull())
		{
			row.setColProvisonalFinal(orderInvestigationLiteVo.getResultStatus().getText());
		}

		OcsPathRadResultVo res = new OcsPathRadResultVo();
		if (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull())
			res.setCategory(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getCategory());
		res.setOrderInvestigation(orderInvestigationLiteVo);
		res.setDescription(orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getInvestigationIndexIsNotNull() ? orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getName() : "<not set>");
		row.setValue(res);

		row.setExpanded(true);

		// Discipline
		if (orderInvestigationLiteVo.getInvestigationIsNotNull() && orderInvestigationLiteVo.getInvestigation().getProviderServiceIsNotNull() && orderInvestigationLiteVo.getInvestigation().getProviderService().getLocationServiceIsNotNull() && orderInvestigationLiteVo.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() && orderInvestigationLiteVo.getInvestigation().getProviderService().getLocationService().getService().getServiceNameIsNotNull())
		{
			row.setColDiscipline(orderInvestigationLiteVo.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
		}

		// Ordering Location
		if (orderInvestigationLiteVo.getOrderDetailsIsNotNull())
		{
			row.setColOrderingLocation(orderInvestigationLiteVo.getOrderDetails().getCorrectLocation());
			row.setTooltipForColOrderingLocation(orderInvestigationLiteVo.getOrderDetails().getCorrectLocation());
		}

		// Clinician or GP
		if (orderInvestigationLiteVo.getOrderDetailsIsNotNull())
		{
			row.setColClinician(orderInvestigationLiteVo.getOrderDetails().getCorrectClinician());
			// WDEV-2908
			row.setTooltipForColClinician(orderInvestigationLiteVo.getOrderDetails().getCorrectClinician());
		}

		row.setBackColor((form.grdResults().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);

		return row;
	}

	
	private String generateStatusTooltip(OrderedInvestigationStatusVo ordInvCurrentStatus)
	{
		if (ordInvCurrentStatus != null && ordInvCurrentStatus.getOrdInvStatus() != null)
		{
			StringBuffer sb = new StringBuffer();
			sb.append("<b>Current status: </b>" + ordInvCurrentStatus.getOrdInvStatus().getText());

			if (ordInvCurrentStatus.getStatusReason() != null && ordInvCurrentStatus.getStatusReason().length() > 0 && ordInvCurrentStatus.getOrdInvStatus().equals(OrderInvStatus.CANCELLED))
				sb.append("<br><b>Current status reason: </b>" + ordInvCurrentStatus.getStatusReason());

			sb.append("<br><b>Date changed: </b>" + ordInvCurrentStatus.getChangeDateTime());
			sb.append("<br><b>Changed by: </b>" + (ordInvCurrentStatus.getChangeUserIsNotNull() ? ordInvCurrentStatus.getChangeUser().toString() : ""));

			return sb.toString();
		}
		return null;
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(Boolean.TRUE.equals(form.getLocalContext().getlistForAllReferrals()));
	}

	protected void onGrdResultsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (hasResults(form.grdResults().getSelectedRow()))
		{
			viewSelectedResult();
		}
		else
		{
			viewSelectedOrder();
		}
	}

	private void viewSelectedResult()
	{
		if (form.grdResults().getValue() != null)
		{
			DateTime selectedDateTime = getSelectedDisplayDateTime();
			form.getGlobalContext().OCRR.setResultDisplayDate(selectedDateTime != null ? selectedDateTime.getDate() : null);
			form.getGlobalContext().OCRR.setSelectedPathRadResults(getAllInvs());
			form.getGlobalContext().OCRR.setCurrentPathRadResult(getCurrentInv());
			engine.open(form.getForms().OCRR.ResultDialog, false);
		}
	}

	private void viewSelectedOrder()
	{
		if (form.grdResults().getValue() != null)
		{
			OrderInvestigationLiteVo voOrderInv = (OrderInvestigationLiteVo) form.grdResults().getValue().getOrderInvestigation();
			if (voOrderInv.getOrderDetailsIsNotNull())
			{
				form.getGlobalContext().OCRR.setResultDisplayDate(getSelectedDisplayDateTime().getDate());
				form.getGlobalContext().OCRR.PathologyResults.setOrder(voOrderInv.getOrderDetails());
				engine.open(form.getForms().OCRR.OrderSummaryDialog, true);
			}
		}
	}
	
	private boolean hasResults(grdResultsRow selectedRow)
	{
		OrderInvestigationLiteVo resParent = (OrderInvestigationLiteVo) selectedRow.getValue().getOrderInvestigation();
		if (isResultedStatus(resParent))//	WDEV-13251
			return true;

		grdResultsRowCollection rowColl = selectedRow.getRows();
		for (int i = 0; i < rowColl.size(); i++)
		{
			grdResultsRow row = rowColl.get(i);
			OrderInvestigationLiteVo res = (OrderInvestigationLiteVo) row.getValue().getOrderInvestigation();
			if (isResultedStatus(res))//	WDEV-13251
				return true;
		}
		return false;
	}
	
	//	WDEV-13251
	private boolean isResultedStatus(OrderInvestigationLiteVo order)
	{
		if(order == null)
			return false;

		// WDEV-16224 - modifications following OCS DFT model changes
		if (order.getResultDetailsIsNotNull() && (order.getResultDetails().getPathologyResultDetailsIsNotNull() || order.getResultDetails().getClinicalResultDetailsIsNotNull() || order.getResultDetails().getDocumentResultDetailsIsNotNull()))
		{
			return true;
		}
		
		return false;
	}

	private DateTime getSelectedDisplayDateTime()
	{
		if (form.grdResults().getValue() == null)
			return null;

		OrderInvestigationLiteVo voOrderInv = (OrderInvestigationLiteVo) form.grdResults().getValue().getOrderInvestigation();
		return voOrderInv.getDisplayDateTime();
	}
	
	private OcsPathRadResultVo getCurrentInv()
	{
		return form.grdResults().getValue();
	}

	private OcsPathRadResultVoCollection getAllInvs()
	{
		OcsPathRadResultVoCollection result = new OcsPathRadResultVoCollection();

		for (int x = 0; x < form.grdResults().getRows().size(); x++)
		{
			grdResultsRow row = form.grdResults().getRows().get(x);
			
			if(row.getColResultDetails() != null && orderHasAResult(row.getColResultDetails()))
			{
				result.add(form.grdResults().getRows().get(x).getValue());
			}
			else
			{
				if(row.getRows() != null)
				{
					for(int y = 0; y<row.getRows().size(); y++)
					{
						if(row.getRows().get(y).getColResultDetails() != null && orderHasAResult(row.getRows().get(y).getColResultDetails()));
						{
							result.add(row.getRows().get(y).getValue());
						}
					}
				}
			}
		}
		
		return result;
	}


	private boolean orderHasAResult(ResultDetailsForOrderInvestigationLiteVo resultDetails)
	{
		if(resultDetails == null)
			return false;
		
		if(resultDetails.getPathologyResultDetails() != null && resultDetails.getPathologyResultDetails().size() > 0 && resultDetails.getPathologyResultDetails().get(0) != null)
			return true;
		
		if(resultDetails.getClinicalResultDetails() != null)
			return true;
		
		if(resultDetails.getDocumentResultDetails() != null)
			return true;
		
		return false;
	}
}
