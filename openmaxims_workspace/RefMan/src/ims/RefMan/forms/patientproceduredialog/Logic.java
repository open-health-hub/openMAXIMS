// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.patientproceduredialog;

import ims.RefMan.forms.patientproceduredialog.GenForm.OutcomeEnumeration;
import ims.RefMan.vo.CatsReferralForClinicalNotesVo;
import ims.RefMan.vo.PatientProcedureApptDetailVo;
import ims.RefMan.vo.PatientProcedureApptDetailVoCollection;
import ims.RefMan.vo.ReferralClinicalNotesVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public static final Integer COLPROCEDURE = Integer.valueOf(-1);
	public static final Integer COLIMAGE = Integer.valueOf(-2);
	public static final Integer COLMAIN = Integer.valueOf(-3);

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open()
	{
		form.setMode(FormMode.EDIT);
	}

	private void initialize()
	{
		form.qmbProcedure().setFocus();
		
		form.ccAuthoringInfo().initializeComponent();
		form.ccAuthoringInfo().setEnabledAuthoringHCP(true);
		form.ccAuthoringInfo().setEnabledDateTime(true);
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(true);
		
		initializeSelectedProceduresGrid();
		
		form.pdtPerformed().setValue((new Date()).toPartialDate());
		form.Outcome().setValue(OutcomeEnumeration.rdoComplete);
	}

	private void initializeSelectedProceduresGrid()
	{
		form.dyngrdProcedures().clear();

		form.dyngrdProcedures().setSelectable(true);
		
		DynamicGridColumn colProcedure = form.dyngrdProcedures().getColumns().newColumn("Procedure", COLPROCEDURE);//WDEV-14006
		colProcedure.setWidth(550);//WDEV-14006
		colProcedure.setReadOnly(true);//WDEV-14006
		
		DynamicGridColumn colMain = form.dyngrdProcedures().getColumns().newColumn("Primary", COLMAIN);
		colMain.setWidth(50);
		colMain.setAlignment(Alignment.CENTER);

		DynamicGridColumn colImage = form.dyngrdProcedures().getColumns().newColumn("", COLIMAGE);
		colImage.setWidth(-1);
		colImage.setAlignment(Alignment.CENTER);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save()
	{
		ReferralClinicalNotesVo referralClinicalNotes = domain.getReferralClinicalNotes(form.getGlobalContext().RefMan.getCatsReferral());
		referralClinicalNotes = populateReferralClinicalNotes(referralClinicalNotes);
		
		String[] errors = referralClinicalNotes.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			return domain.saveReferralClinicalNotes(referralClinicalNotes);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dyngrdProcedures().getRows().size() == 0)
		{
			uiErrors.add("Please add a least one procedure in Selected Procedures Grid.");					
		}
		
		if(form.pdtPerformed().getValue() == null)
		{
			uiErrors.add("Procedure Date is mandatory.");
		}
		
		if(OutcomeEnumeration.rdoIncomplete.equals(form.Outcome().getValue()) && form.cmbReason().getValue() == null)
		{
			uiErrors.add("Reason is mandatory.");
		}
		
		String authoringErrors = form.ccAuthoringInfo().getErrors();
		
		if(authoringErrors != null && authoringErrors.length() > 0)
		{	
			uiErrors.add(authoringErrors);
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private ReferralClinicalNotesVo populateReferralClinicalNotes(ReferralClinicalNotesVo referralClinicalNotes)
	{
		if(referralClinicalNotes == null)
			referralClinicalNotes = new ReferralClinicalNotesVo();
		
		if(referralClinicalNotes.getCatsReferral() == null)
			referralClinicalNotes.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		if(referralClinicalNotes.getProcedures() == null)
			referralClinicalNotes.setProcedures(new PatientProcedureApptDetailVoCollection());
		
		CatsReferralForClinicalNotesVo referral = domain.getReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		for(int i=0; i<form.dyngrdProcedures().getRows().size(); i++)
		{
			if(form.dyngrdProcedures().getRows().get(i).getValue() instanceof ProcedureLiteVo)
			{
				PatientProcedureApptDetailVo patientProcedure = populatePatientProcedureFromScreen((ProcedureLiteVo) form.dyngrdProcedures().getRows().get(i).getValue(), (Boolean) form.dyngrdProcedures().getRows().get(i).getCells().get(getSelectedColumn(COLMAIN)).getValue(), referral);
				
				if(Boolean.TRUE.equals(patientProcedure.getIsPrimaryProcedure()))
				{
					clearPreviousPrimaryProcedure(referralClinicalNotes, patientProcedure);
				}
				
				referralClinicalNotes.getProcedures().add(patientProcedure);
			}
		}
		
		return referralClinicalNotes;
	}

	private void clearPreviousPrimaryProcedure(ReferralClinicalNotesVo referralClinicalNotes, PatientProcedureApptDetailVo patientProcedure)
	{
		if(referralClinicalNotes == null || referralClinicalNotes.getProcedures() == null || patientProcedure == null)
			return;
		
		for(int i=0; i<referralClinicalNotes.getProcedures().size(); i++)
		{
			if(referralClinicalNotes.getProcedures().get(i) != null && referralClinicalNotes.getProcedures().get(i).getID_PatientProcedureIsNotNull() && !patientProcedure.equals(referralClinicalNotes.getProcedures().get(i)))
			{
				referralClinicalNotes.getProcedures().get(i).setIsPrimaryProcedure(null);
			}
		}
	}

	private PatientProcedureApptDetailVo populatePatientProcedureFromScreen(ProcedureLiteVo procedure, Boolean isPrimary, CatsReferralForClinicalNotesVo referral)
	{
		if(procedure == null)
			return null;
		
		PatientProcedureApptDetailVo patientProcedure = new PatientProcedureApptDetailVo();
		patientProcedure.setAppointment(form.getGlobalContext().RefMan.getAppointmentForPatientDiagnosisOrProcedures());
		
		patientProcedure.setProcedure(procedure);
		patientProcedure.setProcedureDescription(procedure.getProcedureName());
		patientProcedure.setInfoSource(SourceofInformation.CLINICALCONTACT);
		patientProcedure.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		patientProcedure.setEpisodeOfCare(referral.getCareContext().getEpisodeOfCare());
		patientProcedure.setCareContext(referral.getCareContext());
		patientProcedure.setProcDate(form.pdtPerformed().getValue());
		patientProcedure.setProcedureStatus(OutcomeEnumeration.rdoComplete.equals(form.Outcome().getValue()) ? PatientProcedureStatus.PERFORMED : PatientProcedureStatus.INCOMPLETE);
		patientProcedure.setIncompleteReason(OutcomeEnumeration.rdoIncomplete.equals(form.Outcome().getValue()) ? form.cmbReason().getValue() : null);
		patientProcedure.setIsPrimaryProcedure(isPrimary);
		
		return patientProcedure;
	}

	private void updateControlsState()
	{
		form.lblReason().setVisible(OutcomeEnumeration.rdoIncomplete.equals(form.Outcome().getValue()));
		form.cmbReason().setVisible(OutcomeEnumeration.rdoIncomplete.equals(form.Outcome().getValue()));
		form.cmbReason().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.btnAddProcedure().setEnabled(form.qmbProcedure().getValue() != null);
		form.getContextMenus().RefMan.getProceduresPerformedMenuADDItem().setVisible(form.dyngrdProcedures().getValue() != null);
	}

	private String getListOfSelectedProcedures()
	{
		String ids = "";
		
		for(int i=0; i<form.dyngrdProcedures().getRows().size(); i++)
		{
			if(form.dyngrdProcedures().getRows().get(i).getValue() instanceof ProcedureLiteVo)
			{
				ids += (i>0 ? "," : "") + ((ProcedureLiteVo) form.dyngrdProcedures().getRows().get(i).getValue()).getID_Procedure();
			}
		}
		
		return ids.length() > 0 ? ids : null;
	}

	@Override
	protected void onDyngrdProceduresCellButtonClicked(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(getSelectedColumn(COLIMAGE)) && cell.getRow().getValue() instanceof ProcedureLiteVo)
		{
			form.dyngrdProcedures().getRows().remove(cell.getRow());
		}
		
		updateControlsState();
	}

	private void sortSelectedProceduresGrid()
	{
		if(form.dyngrdProcedures().getRows().size() == 0)
			return;
		
		ProcedureLiteVoCollection procedures = new ProcedureLiteVoCollection();
		HashMap<ProcedureLiteVo, Integer> procCollection = new HashMap<ProcedureLiteVo, Integer>(); 
		
		for(int i=0; i<form.dyngrdProcedures().getRows().size(); i++)
		{
			if(form.dyngrdProcedures().getRows().get(i).getValue() instanceof ProcedureLiteVo)
			{
				ProcedureLiteVo proc = (ProcedureLiteVo) form.dyngrdProcedures().getRows().get(i).getValue();
				procedures.add(proc);
				
				if(procCollection.containsKey(proc))
				{
					Integer procValue = procCollection.get(proc);
					procCollection.put(proc, ++procValue);
				}
				else
				{
					procCollection.put(proc, 1);
				}
			}
		}
		
		procedures.sort();
		
		populateSelectedProcedureGrid(procedures, procCollection);
	}

	private void populateSelectedProcedureGrid(ProcedureLiteVoCollection procedures, HashMap<ProcedureLiteVo, Integer> procCollection)
	{
		form.dyngrdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(ProcedureLiteVo procedure : procedures)
		{
			if(procedure == null)
				continue;
			
			Integer numberOfSameProcedure = procCollection.get(procedure);
			
			for(int i=0; i<numberOfSameProcedure; i++)
			{
				addSelectedProcedureRow(procedure);
			}
		}
	}

	private DynamicGridRow addSelectedProcedureRow(ProcedureLiteVo procedure)
	{
		if(procedure == null)
			return null;
		
		DynamicGridRow row = form.dyngrdProcedures().getRows().newRow();

		DynamicGridCell cell = row.getCells().newCell(getSelectedColumn(COLPROCEDURE), DynamicCellType.LABEL);
		cell.setValue(procedure.getProcedureName());
		cell.setIdentifier(procedure.getProcedureName());
		cell.setTooltip(procedure.getProcedureName());
		cell.setReadOnly(true);

		cell = row.getCells().newCell(getSelectedColumn(COLMAIN), DynamicCellType.BOOL);
		cell.setAutoPostBack(true);
		
		if(procedure.equals(form.getLocalContext().getPrimaryProcedure()) && !isProcedureAlreadyAdded(procedure))
		{
			cell.setValue(true);
		}
		
		cell = row.getCells().newCell(getSelectedColumn(COLIMAGE), DynamicCellType.IMAGEBUTTON);
		cell.setValue(form.getImages().Core.Minus);
		cell.setTooltip("Remove Procedure");
		cell.setAutoPostBack(true);
		
		row.setValue(procedure);
		
		return row;
	}
	
	private boolean isProcedureAlreadyAdded(ProcedureLiteVo procedure)
	{
		if(procedure == null)
			return false;
		
		for(int i=0; i<form.dyngrdProcedures().getRows().size(); i++)
		{
			if(procedure.equals(form.dyngrdProcedures().getRows().get(i).getValue()))
				return true;
		}
		
		return false;
	}

	private DynamicGridColumn getSelectedColumn(Integer identifier)
	{
		return form.dyngrdProcedures().getColumns().getByIdentifier(identifier);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onRadioButtonOutcomeValueChanged() throws PresentationLogicException
	{
		if(OutcomeEnumeration.rdoComplete.equals(form.Outcome().getValue()))
		{
			form.cmbReason().setValue(null);
		}
		
		updateControlsState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ProceduresPerformedMenu.ADD:
				addProcedureTwice();
			break;
		}
		
		updateControlsState();
	}

	private void addProcedureTwice()
	{
		if(form.dyngrdProcedures().getValue() instanceof ProcedureLiteVo)
		{
			addSelectedProcedureRow((ProcedureLiteVo) form.dyngrdProcedures().getValue());
			
			sortSelectedProceduresGrid();
		}
	}

	@Override
	protected void onDyngrdProceduresRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onDyngrdProceduresCellValueChanged(DynamicGridCell cell)
	{
		if(cell.getColumn().equals(getSelectedColumn(COLMAIN)) && cell.getValue() instanceof Boolean && (Boolean) cell.getValue())
		{
			if(cell.getRow().getValue() instanceof ProcedureLiteVo)
				form.getLocalContext().setPrimaryProcedure((ProcedureLiteVo) cell.getRow().getValue());
			
			clearOtherRowsCheck(cell.getRow());
		}
	}
	
	private void clearOtherRowsCheck(DynamicGridRow row)
	{
		if(row == null)
			return;
		
		for(int i=0; i<form.dyngrdProcedures().getRows().size(); i++)
		{
			if(!form.dyngrdProcedures().getRows().get(i).equals(row))
			{
				form.dyngrdProcedures().getRows().get(i).getCells().get(getSelectedColumn(COLMAIN)).setValue(false);
			}
		}
	}

	@Override
	protected void onBtnAddProcedureClick() throws PresentationLogicException
	{
		if(form.qmbProcedure().getValue() == null)
		{
			updateControlsState();
			return;
		}
		
		addSelectedProcedureRow(form.qmbProcedure().getValue());
		
		form.qmbProcedure().removeRow(form.qmbProcedure().getValue());
		form.qmbProcedure().clear();
		
		sortSelectedProceduresGrid();
		updateControlsState();
	}

	@Override
	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		populateProceduresQcmb(value);
		updateControlsState();
	}

	private void populateProceduresQcmb(String value)
	{
		form.qmbProcedure().clear();
		ProcedureLiteVoCollection listProc = domain.listProcedures(value, getListOfSelectedProcedures());
		
		if (listProc == null || listProc.size() == 0)
		{
			form.qmbProcedure().showOpened();
			return;
		}
			
		for (int i = 0 ; i < listProc.size() ; i++)
		{
			form.qmbProcedure().newRow(listProc.get(i),listProc.get(i).getProcedureName());
		}
		
		form.qmbProcedure().showOpened();
	}
}
