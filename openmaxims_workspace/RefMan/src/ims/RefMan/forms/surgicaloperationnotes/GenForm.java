// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.surgicaloperationnotes;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbFollowUpInComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value)
			{
				return super.control.removeRow(value);
			}
			public ims.RefMan.vo.lookups.SurgicalOpFollowUpIn getValue()
			{
				return (ims.RefMan.vo.lookups.SurgicalOpFollowUpIn)super.control.getValue();
			}
			public void setValue(ims.RefMan.vo.lookups.SurgicalOpFollowUpIn value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbFollowUpComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value)
			{
				return super.control.removeRow(value);
			}
			public ims.RefMan.vo.lookups.SurgicalOpFollowUpType getValue()
			{
				return (ims.RefMan.vo.lookups.SurgicalOpFollowUpType)super.control.getValue();
			}
			public void setValue(ims.RefMan.vo.lookups.SurgicalOpFollowUpType value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 392, 576, 423, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ims.framework.FormUiLogic m_ccAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 26, skipContextValidation);
			//ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(392), new Integer(576), new Integer(423), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 26), m_ccAuthForm, instance1 } );
			ims.framework.Control m_ccAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, new Integer(startTabIndex.intValue() + 26), m_ccAuthForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccAuthControl);
			Menu[] menus1 = m_ccAuthForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 400, 40, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Diagnosis:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 400, 562, 81, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Follow Up In:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 400, 82, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "VTE Prophylaxis:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 6, 82, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Antibiotics:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 6, 41, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure Performed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 6, 28, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Operation", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 400, 126, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Findings/Diagnosis:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 6, 552, 78, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Instructions:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 6, 10, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 400, 10, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Surgeon:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 6, 58, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Position:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 58, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Skin Preparation:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 6, 112, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Incision:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 117, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure in Detail:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 400, 216, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Complications:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 442, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Closure:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 6, 490, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "L.A. Infiltration:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 400, 392, 45, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Drains:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 400, 112, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Operative", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 6, 536, 88, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Post Operative", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 400, 28, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Pre Operative", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 400, 538, 65, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Follow Up:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 400, 466, 156, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Estimated Blood Loss  mls:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 400, 440, 109, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Tissue Specimens:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 400, 416, 64, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Dressings:", new Integer(1), null, new Integer(0)}));
	
			// Button Controls
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 309, 31, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Amend", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 552, 464, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 552, 80, 247, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 136, 80, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 552, 440, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 136, 32, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 552, 8, 247, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 552, 32, 247, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 136, 56, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 552, 56, 247, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 552, 392, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 552, 416, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 136, 8, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 552, 560, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_cmbFollowUpInTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbFollowUpInTemp);
			cmbFollowUpInComboBox cmbFollowUpIn = (cmbFollowUpInComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFollowUpInComboBox.class, m_cmbFollowUpInTemp);
			super.addComboBox(cmbFollowUpIn);
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 552, 536, 247, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_cmbFollowUpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbFollowUpTemp);
			cmbFollowUpComboBox cmbFollowUp = (cmbFollowUpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFollowUpComboBox.class, m_cmbFollowUpTemp);
			super.addComboBox(cmbFollowUp);
	
			// Rich Text Controls
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 136, 112, 248, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 136, 160, 248, 272, ims.framework.enumerations.ControlAnchoring.ALL);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
			RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 552, 216, 247, 168, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
			RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 136, 442, 248, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
			RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 136, 490, 663, 40, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(2000)} ));
			RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 552, 112, 247, 96, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
			RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 136, 536, 248, 96, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(RichTextControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, new Integer(5000)} ));
		}
		public ims.core.forms.authoringinfo.IComponent ccAuth()
		{
			return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setccAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setccAuthVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean isccAuthVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setccAuthEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean isccAuthEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
		public Button btnAmend()
		{
			return (Button)super.getControl(26);
		}
		public TextBox txtEBL()
		{
			return (TextBox)super.getControl(27);
		}
		public TextBox txtVTE()
		{
			return (TextBox)super.getControl(28);
		}
		public TextBox txtAntibiotics()
		{
			return (TextBox)super.getControl(29);
		}
		public TextBox txtTissue()
		{
			return (TextBox)super.getControl(30);
		}
		public TextBox txtProcedurePerformed()
		{
			return (TextBox)super.getControl(31);
		}
		public TextBox txtSurgeon()
		{
			return (TextBox)super.getControl(32);
		}
		public TextBox txtPreOperative()
		{
			return (TextBox)super.getControl(33);
		}
		public TextBox txtPosition()
		{
			return (TextBox)super.getControl(34);
		}
		public TextBox txtSkinPreparation()
		{
			return (TextBox)super.getControl(35);
		}
		public TextBox txtDrains()
		{
			return (TextBox)super.getControl(36);
		}
		public TextBox txtDressing()
		{
			return (TextBox)super.getControl(37);
		}
		public DateControl dteProcedure()
		{
			return (DateControl)super.getControl(38);
		}
		public cmbFollowUpInComboBox cmbFollowUpIn()
		{
			return (cmbFollowUpInComboBox)super.getComboBox(0);
		}
		public cmbFollowUpComboBox cmbFollowUp()
		{
			return (cmbFollowUpComboBox)super.getComboBox(1);
		}
		public RichTextControl richTextIncision()
		{
			return (RichTextControl)super.getControl(41);
		}
		public RichTextControl richTextProcedureInDetail()
		{
			return (RichTextControl)super.getControl(42);
		}
		public RichTextControl richTextComplication()
		{
			return (RichTextControl)super.getControl(43);
		}
		public RichTextControl richTextClosure()
		{
			return (RichTextControl)super.getControl(44);
		}
		public RichTextControl richTextInfiltration()
		{
			return (RichTextControl)super.getControl(45);
		}
		public RichTextControl richTextOperativeFindings()
		{
			return (RichTextControl)super.getControl(46);
		}
		public RichTextControl richTextPostOperative()
		{
			return (RichTextControl)super.getControl(47);
		}
	}
	public static class recbrIOCRRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.clinical.vo.IntraOperativeCareRecordLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.clinical.vo.IntraOperativeCareRecordLiteVo getValue()
		{
			return (ims.clinical.vo.IntraOperativeCareRecordLiteVo)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.IntraOperativeCareRecordLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCurrentRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 832, 544, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctn);
		ctnContainer ctn = (ctnContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnContainer.class, m_ctn, factory);
		ims.framework.utils.SizeInfo m_ctnDesignSize = new ims.framework.utils.SizeInfo(832, 544);
		ims.framework.utils.SizeInfo m_ctnRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper49.getWidth(), anchoringHelper49.getHeight());
		ctn.setContext(form, appForm, m_ctn, loader, startControlID, m_ctnDesignSize, m_ctnRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctn);

		// Button Controls
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 86, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrIOCRTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrIOCRTemp);
		recbrIOCRRecordBrowser recbrIOCR = (recbrIOCRRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrIOCRRecordBrowser.class, m_recbrIOCRTemp);
		super.addRecordBrowser(recbrIOCR);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctnContainer ctn()
	{
		return (ctnContainer)super.getContainer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(1);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public recbrIOCRRecordBrowser recbrIOCR()
	{
		return (recbrIOCRRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				IntraOperativeCareRecordDialog = new LocalFormName(134158);
			}
			public final FormName IntraOperativeCareRecordDialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentRecord = new ims.framework.ContextVariable("CurrentRecord", prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier + "");
			cxl_CurrentSurgicalConfig = new ims.framework.ContextVariable("CurrentSurgicalConfig", prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier + "");
		}
		
		public boolean getCurrentRecordIsNotNull()
		{
			return !cxl_CurrentRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.SurgicalOpNotesVo getCurrentRecord()
		{
			return (ims.RefMan.vo.SurgicalOpNotesVo)cxl_CurrentRecord.getValue(context);
		}
		public void setCurrentRecord(ims.RefMan.vo.SurgicalOpNotesVo value)
		{
			cxl_CurrentRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentRecord = null;
		public boolean getCurrentSurgicalConfigIsNotNull()
		{
			return !cxl_CurrentSurgicalConfig.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo getCurrentSurgicalConfig()
		{
			return (ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo)cxl_CurrentSurgicalConfig.getValue(context);
		}
		public void setCurrentSurgicalConfig(ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo value)
		{
			cxl_CurrentSurgicalConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSurgicalConfig = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[129];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCDATE", "ProcDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-INCLUDEINDISCHARGELETTER", "IncludeInDischargeLetter");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SITETEXT", "SiteText");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCTIME", "ProcTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-NOTES", "Notes");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREURGENCY", "ProcedureUrgency");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREOUTCOME", "ProcedureOutcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-DATEPLANNED", "DatePlanned");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PLANNEDPROC", "PlannedProc");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCSITE", "ProcSite");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PEFORMEDBY", "PeformedBy");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCEDUREINTENT", "ProcedureIntent");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-LOCATION", "Location");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SPECIALTY", "Specialty");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDSTATUS", "ConfirmedStatus");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-EXCLUDEFROMOTHERS", "ExcludeFromOthers");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCLOCATION", "ProcLocation");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDDATE", "CancelledDate");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-CANCELLEDREASON", "CancelledReason");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SURGEONSGRADE", "SurgeonsGrade");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDDATE", "ProcEndDate");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-PROCENDTIME", "ProcEndTime");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientProcedureForIntraOperativeDialog", "BO-1003100017-SIGNIFPROC", "SignifProc");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-ID", "ID_SurgicalOpNotes");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-CARECONTEXT", "CareContext");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-INTRAOPERATIVECARERECORD", "IntraOperativeCareRecord");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-INCISION", "Incision");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-FINDINGS", "Findings");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-PROCEDURE", "Procedure");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-CLOSURE", "Closure");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-POSTOPINSTRUCTIONS", "PostOpInstructions");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-COMPLICATIONS", "Complications");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-LAINFILTRATION", "LAInfiltration");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-PREOPERATIVEDIAGNOSIS", "PreOperativeDiagnosis");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-ANTIBIOTICS", "Antibiotics");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-VTE", "VTE");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-EBI", "EBI");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-FOLLOWUPTYPE", "FollowUpType");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentRecord_" + componentIdentifier, "BO-1096100053-FOLLOWUPTYPEIN", "FollowUpTypeIn");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-ID", "ID_SurgicalOperationDetailsConfig");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-PROCEDURE", "Procedure");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-INCISION", "Incision");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-FINDINGS", "Findings");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-CLOSURE", "Closure");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-POSTOPINSTRUCTIONS", "PostOpInstructions");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-PROSTHESIS", "Prosthesis");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-DRAIN", "Drain");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-ACTIONSFORGP", "ActionsforGP");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-NURSEENABLEDINSTRUCTIONS", "NurseEnabledInstructions");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.SurgicalOperationNotes.__internal_x_context__CurrentSurgicalConfig_" + componentIdentifier, "BO-1073100029-HOSPITALPLAN", "HospitalPlan");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
